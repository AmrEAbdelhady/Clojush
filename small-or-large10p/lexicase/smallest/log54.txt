Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[39 -14 -14 -14] -14] [[-12 -78 -78 -78] -78] [[-39 -39 -39 47] -39] [[-88 81 -88 -88] -88] [[-53 -40 -53 -53] -53] [[90 90 -27 90] -27] [[-34 -34 -19 -34] -34] [[-52 -52 -80 -52] -80] [[42 42 42 -51] -51] [[-67 14 14 14] -67] [(25 25 25 25) 25] [(69 69 69 69) 69] [(-53 -53 -53 -53) -53] [(-73 -73 -73 -73) -73] [(-44 -44 -44 -44) -44] [(26 4 45 2) 2] [(64 32 87 52) 32] [(90 77 1 43) 1] [(93 96 9 94) 9] [(95 78 41 32) 32] [(69 52 17 81) 17] [(44 20 73 33) 20] [(26 37 62 96) 26] [(84 22 99 45) 22] [(26 11 56 23) 11] [(77 4 79 37) 4] [(8 88 91 61) 8] [(70 82 78 35) 35] [(16 29 11 48) 11] [(38 63 42 91) 38] [(59 83 82 86) 59] [(20 57 46 12) 12] [(48 63 71 75) 48] [(53 33 9 74) 9] [(17 36 58 64) 17] [(-12 -79 -72 5) -79] [(-37 -9 -42 39) -42] [(4 19 61 68) 4] [(48 -47 19 -97) -97] [(-65 -100 80 13) -100] [(-91 -56 59 -93) -93] [(-28 -67 -72 -17) -72] [(-19 93 -12 -94) -94] [(99 -50 86 56) -50] [(60 -13 57 65) -13] [(43 -2 -26 -71) -71] [(16 -99 -25 -93) -99] [(18 -53 -67 -10) -67] [(-50 17 -20 29) -50] [(-95 -83 44 8) -95] [(78 28 6 -4) -4] [(18 -70 45 -97) -97] [(31 77 7 65) 7] [(-57 69 95 -94) -94] [(-70 -54 75 -50) -70] [(59 -24 37 15) -24] [(54 -37 -2 -60) -60] [(61 -97 -95 -42) -97] [(-16 -3 -96 11) -96] [(-86 71 38 -52) -86] [(-1 9 -34 -14) -34] [(49 -68 62 -46) -68] [(-33 -46 -100 32) -100] [(-40 9 -59 22) -59] [(94 59 -61 -41) -61] [(-6 54 4 -43) -43] [(-50 23 92 -66) -66] [(15 12 17 43) 12] [(76 60 85 65) 60] [(-90 3 49 -48) -90] [(-59 6 -7 38) -59] [(-24 62 33 -81) -81] [(-83 44 74 -74) -83] [(17 -5 53 -18) -18] [(-72 -39 80 -83) -83] [(-19 -81 68 -77) -81] [(88 -23 97 65) -23] [(-37 72 17 65) -37] [(-49 12 -81 43) -81] [(-97 -46 15 -34) -97] [(14 19 59 -67) -67] [(17 35 61 -8) -8] [(53 -50 -76 70) -76] [(90 -35 72 56) -35] [(67 -38 -42 97) -42] [(25 -77 0 -66) -77] [(-22 89 67 -93) -93] [(83 -85 -59 34) -85] [(-80 -71 -100 -59) -100] [(-67 -22 19 -23) -67] [(88 -41 9 18) -41] [(93 19 -90 -37) -90] [(-6 -74 -38 50) -74] [(25 19 63 58) 19] [(72 -5 48 42) -5])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[39 -14 -14 -14] -14]
Train Case:   6 | Input/Output: [[-12 -78 -78 -78] -78]
Train Case:   7 | Input/Output: [[-39 -39 -39 47] -39]
Train Case:   8 | Input/Output: [[-88 81 -88 -88] -88]
Train Case:   9 | Input/Output: [[-53 -40 -53 -53] -53]
Train Case:  10 | Input/Output: [[90 90 -27 90] -27]
Train Case:  11 | Input/Output: [[-34 -34 -19 -34] -34]
Train Case:  12 | Input/Output: [[-52 -52 -80 -52] -80]
Train Case:  13 | Input/Output: [[42 42 42 -51] -51]
Train Case:  14 | Input/Output: [[-67 14 14 14] -67]
Train Case:  15 | Input/Output: [(25 25 25 25) 25]
Train Case:  16 | Input/Output: [(69 69 69 69) 69]
Train Case:  17 | Input/Output: [(-53 -53 -53 -53) -53]
Train Case:  18 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  19 | Input/Output: [(-44 -44 -44 -44) -44]
Train Case:  20 | Input/Output: [(26 4 45 2) 2]
Train Case:  21 | Input/Output: [(64 32 87 52) 32]
Train Case:  22 | Input/Output: [(90 77 1 43) 1]
Train Case:  23 | Input/Output: [(93 96 9 94) 9]
Train Case:  24 | Input/Output: [(95 78 41 32) 32]
Train Case:  25 | Input/Output: [(69 52 17 81) 17]
Train Case:  26 | Input/Output: [(44 20 73 33) 20]
Train Case:  27 | Input/Output: [(26 37 62 96) 26]
Train Case:  28 | Input/Output: [(84 22 99 45) 22]
Train Case:  29 | Input/Output: [(26 11 56 23) 11]
Train Case:  30 | Input/Output: [(77 4 79 37) 4]
Train Case:  31 | Input/Output: [(8 88 91 61) 8]
Train Case:  32 | Input/Output: [(70 82 78 35) 35]
Train Case:  33 | Input/Output: [(16 29 11 48) 11]
Train Case:  34 | Input/Output: [(38 63 42 91) 38]
Train Case:  35 | Input/Output: [(59 83 82 86) 59]
Train Case:  36 | Input/Output: [(20 57 46 12) 12]
Train Case:  37 | Input/Output: [(48 63 71 75) 48]
Train Case:  38 | Input/Output: [(53 33 9 74) 9]
Train Case:  39 | Input/Output: [(17 36 58 64) 17]
Train Case:  40 | Input/Output: [(-12 -79 -72 5) -79]
Train Case:  41 | Input/Output: [(-37 -9 -42 39) -42]
Train Case:  42 | Input/Output: [(4 19 61 68) 4]
Train Case:  43 | Input/Output: [(48 -47 19 -97) -97]
Train Case:  44 | Input/Output: [(-65 -100 80 13) -100]
Train Case:  45 | Input/Output: [(-91 -56 59 -93) -93]
Train Case:  46 | Input/Output: [(-28 -67 -72 -17) -72]
Train Case:  47 | Input/Output: [(-19 93 -12 -94) -94]
Train Case:  48 | Input/Output: [(99 -50 86 56) -50]
Train Case:  49 | Input/Output: [(60 -13 57 65) -13]
Train Case:  50 | Input/Output: [(43 -2 -26 -71) -71]
Train Case:  51 | Input/Output: [(16 -99 -25 -93) -99]
Train Case:  52 | Input/Output: [(18 -53 -67 -10) -67]
Train Case:  53 | Input/Output: [(-50 17 -20 29) -50]
Train Case:  54 | Input/Output: [(-95 -83 44 8) -95]
Train Case:  55 | Input/Output: [(78 28 6 -4) -4]
Train Case:  56 | Input/Output: [(18 -70 45 -97) -97]
Train Case:  57 | Input/Output: [(31 77 7 65) 7]
Train Case:  58 | Input/Output: [(-57 69 95 -94) -94]
Train Case:  59 | Input/Output: [(-70 -54 75 -50) -70]
Train Case:  60 | Input/Output: [(59 -24 37 15) -24]
Train Case:  61 | Input/Output: [(54 -37 -2 -60) -60]
Train Case:  62 | Input/Output: [(61 -97 -95 -42) -97]
Train Case:  63 | Input/Output: [(-16 -3 -96 11) -96]
Train Case:  64 | Input/Output: [(-86 71 38 -52) -86]
Train Case:  65 | Input/Output: [(-1 9 -34 -14) -34]
Train Case:  66 | Input/Output: [(49 -68 62 -46) -68]
Train Case:  67 | Input/Output: [(-33 -46 -100 32) -100]
Train Case:  68 | Input/Output: [(-40 9 -59 22) -59]
Train Case:  69 | Input/Output: [(94 59 -61 -41) -61]
Train Case:  70 | Input/Output: [(-6 54 4 -43) -43]
Train Case:  71 | Input/Output: [(-50 23 92 -66) -66]
Train Case:  72 | Input/Output: [(15 12 17 43) 12]
Train Case:  73 | Input/Output: [(76 60 85 65) 60]
Train Case:  74 | Input/Output: [(-90 3 49 -48) -90]
Train Case:  75 | Input/Output: [(-59 6 -7 38) -59]
Train Case:  76 | Input/Output: [(-24 62 33 -81) -81]
Train Case:  77 | Input/Output: [(-83 44 74 -74) -83]
Train Case:  78 | Input/Output: [(17 -5 53 -18) -18]
Train Case:  79 | Input/Output: [(-72 -39 80 -83) -83]
Train Case:  80 | Input/Output: [(-19 -81 68 -77) -81]
Train Case:  81 | Input/Output: [(88 -23 97 65) -23]
Train Case:  82 | Input/Output: [(-37 72 17 65) -37]
Train Case:  83 | Input/Output: [(-49 12 -81 43) -81]
Train Case:  84 | Input/Output: [(-97 -46 15 -34) -97]
Train Case:  85 | Input/Output: [(14 19 59 -67) -67]
Train Case:  86 | Input/Output: [(17 35 61 -8) -8]
Train Case:  87 | Input/Output: [(53 -50 -76 70) -76]
Train Case:  88 | Input/Output: [(90 -35 72 56) -35]
Train Case:  89 | Input/Output: [(67 -38 -42 97) -42]
Train Case:  90 | Input/Output: [(25 -77 0 -66) -77]
Train Case:  91 | Input/Output: [(-22 89 67 -93) -93]
Train Case:  92 | Input/Output: [(83 -85 -59 34) -85]
Train Case:  93 | Input/Output: [(-80 -71 -100 -59) -100]
Train Case:  94 | Input/Output: [(-67 -22 19 -23) -67]
Train Case:  95 | Input/Output: [(88 -41 9 18) -41]
Train Case:  96 | Input/Output: [(93 19 -90 -37) -90]
Train Case:  97 | Input/Output: [(-6 -74 -38 50) -74]
Train Case:  98 | Input/Output: [(25 19 63 58) 19]
Train Case:  99 | Input/Output: [(72 -5 48 42) -5]
Test Case:   0 | Input/Output: [[-2 -2 -43 -2] -43]
Test Case:   1 | Input/Output: [[-27 -27 55 -27] -27]
Test Case:   2 | Input/Output: [[60 -7 -7 -7] -7]
Test Case:   3 | Input/Output: [[-56 -56 -56 -34] -56]
Test Case:   4 | Input/Output: [[63 63 -48 63] -48]
Test Case:   5 | Input/Output: [[81 28 28 28] 28]
Test Case:   6 | Input/Output: [[19 19 -43 19] -43]
Test Case:   7 | Input/Output: [[-43 -92 -43 -43] -92]
Test Case:   8 | Input/Output: [[32 28 28 28] 28]
Test Case:   9 | Input/Output: [[1 1 1 63] 1]
Test Case:  10 | Input/Output: [[-18 -18 -18 80] -18]
Test Case:  11 | Input/Output: [[-80 80 80 80] -80]
Test Case:  12 | Input/Output: [[-54 -68 -54 -54] -68]
Test Case:  13 | Input/Output: [[-81 -81 37 -81] -81]
Test Case:  14 | Input/Output: [[-73 -73 69 -73] -73]
Test Case:  15 | Input/Output: [[20 20 20 64] 20]
Test Case:  16 | Input/Output: [[-35 15 15 15] -35]
Test Case:  17 | Input/Output: [[93 93 93 35] 35]
Test Case:  18 | Input/Output: [[-2 -2 -2 75] -2]
Test Case:  19 | Input/Output: [[49 49 49 73] 49]
Test Case:  20 | Input/Output: [[-45 -45 5 -45] -45]
Test Case:  21 | Input/Output: [[75 96 96 96] 75]
Test Case:  22 | Input/Output: [[9 9 9 -77] -77]
Test Case:  23 | Input/Output: [[-49 -49 -11 -49] -49]
Test Case:  24 | Input/Output: [[42 -58 -58 -58] -58]
Test Case:  25 | Input/Output: [[99 -35 99 99] -35]
Test Case:  26 | Input/Output: [[48 83 48 48] 48]
Test Case:  27 | Input/Output: [[-32 62 -32 -32] -32]
Test Case:  28 | Input/Output: [[-17 -17 81 -17] -17]
Test Case:  29 | Input/Output: [[94 94 -69 94] -69]
Test Case:  30 | Input/Output: [[22 22 6 22] 6]
Test Case:  31 | Input/Output: [[-87 -87 97 -87] -87]
Test Case:  32 | Input/Output: [[-52 -75 -75 -75] -75]
Test Case:  33 | Input/Output: [[23 -10 23 23] -10]
Test Case:  34 | Input/Output: [[83 57 83 83] 57]
Test Case:  35 | Input/Output: [[87 18 87 87] 18]
Test Case:  36 | Input/Output: [[90 -55 90 90] -55]
Test Case:  37 | Input/Output: [[-56 91 91 91] -56]
Test Case:  38 | Input/Output: [[-37 -95 -37 -37] -95]
Test Case:  39 | Input/Output: [[-79 -100 -100 -100] -100]
Test Case:  40 | Input/Output: [[59 96 96 96] 59]
Test Case:  41 | Input/Output: [[90 90 90 -18] -18]
Test Case:  42 | Input/Output: [[15 15 26 15] 15]
Test Case:  43 | Input/Output: [[3 3 -68 3] -68]
Test Case:  44 | Input/Output: [[88 12 88 88] 12]
Test Case:  45 | Input/Output: [[-73 -73 -73 94] -73]
Test Case:  46 | Input/Output: [[43 43 43 61] 43]
Test Case:  47 | Input/Output: [[-94 -94 -94 5] -94]
Test Case:  48 | Input/Output: [[90 90 90 22] 22]
Test Case:  49 | Input/Output: [[-85 34 -85 -85] -85]
Test Case:  50 | Input/Output: [[-68 91 -68 -68] -68]
Test Case:  51 | Input/Output: [[9 9 65 9] 9]
Test Case:  52 | Input/Output: [[-37 -89 -37 -37] -89]
Test Case:  53 | Input/Output: [[-5 60 -5 -5] -5]
Test Case:  54 | Input/Output: [[-25 -25 -40 -25] -40]
Test Case:  55 | Input/Output: [[89 89 89 -16] -16]
Test Case:  56 | Input/Output: [[95 30 95 95] 30]
Test Case:  57 | Input/Output: [[96 -60 96 96] -60]
Test Case:  58 | Input/Output: [[-34 -23 -34 -34] -34]
Test Case:  59 | Input/Output: [[-2 -2 65 -2] -2]
Test Case:  60 | Input/Output: [[-47 -47 97 -47] -47]
Test Case:  61 | Input/Output: [[4 4 4 -34] -34]
Test Case:  62 | Input/Output: [[-6 -6 -61 -6] -61]
Test Case:  63 | Input/Output: [[-28 -60 -60 -60] -60]
Test Case:  64 | Input/Output: [[-46 16 -46 -46] -46]
Test Case:  65 | Input/Output: [[63 63 -14 63] -14]
Test Case:  66 | Input/Output: [[100 -47 -47 -47] -47]
Test Case:  67 | Input/Output: [[81 6 6 6] 6]
Test Case:  68 | Input/Output: [[-77 -77 -23 -77] -77]
Test Case:  69 | Input/Output: [[38 38 38 -83] -83]
Test Case:  70 | Input/Output: [[75 77 77 77] 75]
Test Case:  71 | Input/Output: [[98 98 -86 98] -86]
Test Case:  72 | Input/Output: [[-58 -58 -58 77] -58]
Test Case:  73 | Input/Output: [[-20 -20 -20 89] -20]
Test Case:  74 | Input/Output: [[-7 -87 -7 -7] -87]
Test Case:  75 | Input/Output: [[-3 30 -3 -3] -3]
Test Case:  76 | Input/Output: [[93 93 93 69] 69]
Test Case:  77 | Input/Output: [[-58 -58 -58 74] -58]
Test Case:  78 | Input/Output: [[-18 -18 98 -18] -18]
Test Case:  79 | Input/Output: [[37 37 37 15] 15]
Test Case:  80 | Input/Output: [[-70 -25 -70 -70] -70]
Test Case:  81 | Input/Output: [[-30 41 -30 -30] -30]
Test Case:  82 | Input/Output: [[93 -58 -58 -58] -58]
Test Case:  83 | Input/Output: [[-30 -42 -42 -42] -42]
Test Case:  84 | Input/Output: [[-30 43 43 43] -30]
Test Case:  85 | Input/Output: [[-99 -99 -99 -62] -99]
Test Case:  86 | Input/Output: [[-2 -2 -2 19] -2]
Test Case:  87 | Input/Output: [[-44 -44 10 -44] -44]
Test Case:  88 | Input/Output: [[7 65 65 65] 7]
Test Case:  89 | Input/Output: [[9 9 9 -18] -18]
Test Case:  90 | Input/Output: [[67 6 67 67] 6]
Test Case:  91 | Input/Output: [[89 -45 -45 -45] -45]
Test Case:  92 | Input/Output: [[46 -2 46 46] -2]
Test Case:  93 | Input/Output: [[-92 91 -92 -92] -92]
Test Case:  94 | Input/Output: [[30 30 3 30] 3]
Test Case:  95 | Input/Output: [[-48 -48 -54 -48] -54]
Test Case:  96 | Input/Output: [[-26 -21 -21 -21] -26]
Test Case:  97 | Input/Output: [[-100 -100 4 -100] -100]
Test Case:  98 | Input/Output: [[39 39 39 62] 39]
Test Case:  99 | Input/Output: [[-46 9 -46 -46] -46]
Test Case: 100 | Input/Output: [(62 62 62 62) 62]
Test Case: 101 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 102 | Input/Output: [(74 74 74 74) 74]
Test Case: 103 | Input/Output: [(20 20 20 20) 20]
Test Case: 104 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 105 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 106 | Input/Output: [(90 90 90 90) 90]
Test Case: 107 | Input/Output: [(35 35 35 35) 35]
Test Case: 108 | Input/Output: [(77 77 77 77) 77]
Test Case: 109 | Input/Output: [(49 49 49 49) 49]
Test Case: 110 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 111 | Input/Output: [(51 51 51 51) 51]
Test Case: 112 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 113 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 114 | Input/Output: [(36 36 36 36) 36]
Test Case: 115 | Input/Output: [(30 30 30 30) 30]
Test Case: 116 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 117 | Input/Output: [(86 86 86 86) 86]
Test Case: 118 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 119 | Input/Output: [(69 69 69 69) 69]
Test Case: 120 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 121 | Input/Output: [(29 29 29 29) 29]
Test Case: 122 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 123 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 124 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 125 | Input/Output: [(18 18 18 18) 18]
Test Case: 126 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 127 | Input/Output: [(98 98 98 98) 98]
Test Case: 128 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 129 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 130 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 131 | Input/Output: [(53 53 53 53) 53]
Test Case: 132 | Input/Output: [(36 36 36 36) 36]
Test Case: 133 | Input/Output: [(61 61 61 61) 61]
Test Case: 134 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 135 | Input/Output: [(10 10 10 10) 10]
Test Case: 136 | Input/Output: [(89 89 89 89) 89]
Test Case: 137 | Input/Output: [(32 32 32 32) 32]
Test Case: 138 | Input/Output: [(31 31 31 31) 31]
Test Case: 139 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 140 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 141 | Input/Output: [(26 26 26 26) 26]
Test Case: 142 | Input/Output: [(99 99 99 99) 99]
Test Case: 143 | Input/Output: [(85 85 85 85) 85]
Test Case: 144 | Input/Output: [(13 13 13 13) 13]
Test Case: 145 | Input/Output: [(81 81 81 81) 81]
Test Case: 146 | Input/Output: [(9 9 9 9) 9]
Test Case: 147 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 148 | Input/Output: [(54 54 54 54) 54]
Test Case: 149 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 150 | Input/Output: [(43 43 43 43) 43]
Test Case: 151 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 152 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 153 | Input/Output: [(86 86 86 86) 86]
Test Case: 154 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 155 | Input/Output: [(15 15 15 15) 15]
Test Case: 156 | Input/Output: [(47 47 47 47) 47]
Test Case: 157 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 158 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 159 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 160 | Input/Output: [(54 54 54 54) 54]
Test Case: 161 | Input/Output: [(29 29 29 29) 29]
Test Case: 162 | Input/Output: [(24 24 24 24) 24]
Test Case: 163 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 164 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 165 | Input/Output: [(75 75 75 75) 75]
Test Case: 166 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 167 | Input/Output: [(10 10 10 10) 10]
Test Case: 168 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 169 | Input/Output: [(0 0 0 0) 0]
Test Case: 170 | Input/Output: [(81 81 81 81) 81]
Test Case: 171 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 172 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 173 | Input/Output: [(38 38 38 38) 38]
Test Case: 174 | Input/Output: [(49 49 49 49) 49]
Test Case: 175 | Input/Output: [(85 85 85 85) 85]
Test Case: 176 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 177 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 178 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 179 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 180 | Input/Output: [(25 25 25 25) 25]
Test Case: 181 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 182 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 183 | Input/Output: [(100 100 100 100) 100]
Test Case: 184 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 185 | Input/Output: [(89 89 89 89) 89]
Test Case: 186 | Input/Output: [(68 68 68 68) 68]
Test Case: 187 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 188 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 189 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 190 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 191 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 192 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 193 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 194 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 195 | Input/Output: [(86 86 86 86) 86]
Test Case: 196 | Input/Output: [(70 70 70 70) 70]
Test Case: 197 | Input/Output: [(26 26 26 26) 26]
Test Case: 198 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 199 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 200 | Input/Output: [(2 51 15 74) 2]
Test Case: 201 | Input/Output: [(100 26 26 52) 26]
Test Case: 202 | Input/Output: [(68 49 2 30) 2]
Test Case: 203 | Input/Output: [(0 30 8 98) 0]
Test Case: 204 | Input/Output: [(12 39 13 5) 5]
Test Case: 205 | Input/Output: [(24 2 23 69) 2]
Test Case: 206 | Input/Output: [(46 45 97 62) 45]
Test Case: 207 | Input/Output: [(48 26 97 95) 26]
Test Case: 208 | Input/Output: [(95 55 19 9) 9]
Test Case: 209 | Input/Output: [(48 8 48 27) 8]
Test Case: 210 | Input/Output: [(33 28 34 8) 8]
Test Case: 211 | Input/Output: [(5 12 38 46) 5]
Test Case: 212 | Input/Output: [(26 43 33 38) 26]
Test Case: 213 | Input/Output: [(91 88 76 38) 38]
Test Case: 214 | Input/Output: [(36 98 5 11) 5]
Test Case: 215 | Input/Output: [(0 44 35 50) 0]
Test Case: 216 | Input/Output: [(81 68 18 37) 18]
Test Case: 217 | Input/Output: [(82 18 36 95) 18]
Test Case: 218 | Input/Output: [(58 60 77 13) 13]
Test Case: 219 | Input/Output: [(3 91 16 59) 3]
Test Case: 220 | Input/Output: [(33 86 86 90) 33]
Test Case: 221 | Input/Output: [(63 74 12 99) 12]
Test Case: 222 | Input/Output: [(20 43 46 80) 20]
Test Case: 223 | Input/Output: [(63 19 59 44) 19]
Test Case: 224 | Input/Output: [(43 72 95 20) 20]
Test Case: 225 | Input/Output: [(83 55 64 77) 55]
Test Case: 226 | Input/Output: [(67 21 72 2) 2]
Test Case: 227 | Input/Output: [(100 1 17 66) 1]
Test Case: 228 | Input/Output: [(61 11 77 3) 3]
Test Case: 229 | Input/Output: [(55 20 79 63) 20]
Test Case: 230 | Input/Output: [(32 70 22 6) 6]
Test Case: 231 | Input/Output: [(51 79 51 29) 29]
Test Case: 232 | Input/Output: [(22 85 56 22) 22]
Test Case: 233 | Input/Output: [(99 87 49 80) 49]
Test Case: 234 | Input/Output: [(24 88 90 67) 24]
Test Case: 235 | Input/Output: [(5 7 59 85) 5]
Test Case: 236 | Input/Output: [(88 2 23 57) 2]
Test Case: 237 | Input/Output: [(78 80 74 79) 74]
Test Case: 238 | Input/Output: [(88 1 56 51) 1]
Test Case: 239 | Input/Output: [(81 43 82 6) 6]
Test Case: 240 | Input/Output: [(64 77 4 5) 4]
Test Case: 241 | Input/Output: [(37 57 12 18) 12]
Test Case: 242 | Input/Output: [(73 22 70 46) 22]
Test Case: 243 | Input/Output: [(19 57 24 81) 19]
Test Case: 244 | Input/Output: [(30 53 9 7) 7]
Test Case: 245 | Input/Output: [(91 50 49 10) 10]
Test Case: 246 | Input/Output: [(51 45 92 47) 45]
Test Case: 247 | Input/Output: [(47 11 4 84) 4]
Test Case: 248 | Input/Output: [(13 78 64 4) 4]
Test Case: 249 | Input/Output: [(11 86 50 0) 0]
Test Case: 250 | Input/Output: [(8 79 90 10) 8]
Test Case: 251 | Input/Output: [(71 65 5 92) 5]
Test Case: 252 | Input/Output: [(46 45 52 79) 45]
Test Case: 253 | Input/Output: [(40 38 71 84) 38]
Test Case: 254 | Input/Output: [(16 70 69 41) 16]
Test Case: 255 | Input/Output: [(98 34 21 62) 21]
Test Case: 256 | Input/Output: [(59 41 11 23) 11]
Test Case: 257 | Input/Output: [(46 1 45 15) 1]
Test Case: 258 | Input/Output: [(75 52 16 44) 16]
Test Case: 259 | Input/Output: [(18 18 93 86) 18]
Test Case: 260 | Input/Output: [(44 2 69 95) 2]
Test Case: 261 | Input/Output: [(84 68 26 34) 26]
Test Case: 262 | Input/Output: [(97 39 31 11) 11]
Test Case: 263 | Input/Output: [(82 76 100 61) 61]
Test Case: 264 | Input/Output: [(100 19 32 13) 13]
Test Case: 265 | Input/Output: [(33 31 63 23) 23]
Test Case: 266 | Input/Output: [(31 34 18 10) 10]
Test Case: 267 | Input/Output: [(74 2 100 70) 2]
Test Case: 268 | Input/Output: [(23 14 14 6) 6]
Test Case: 269 | Input/Output: [(95 4 8 69) 4]
Test Case: 270 | Input/Output: [(97 64 57 77) 57]
Test Case: 271 | Input/Output: [(27 78 83 73) 27]
Test Case: 272 | Input/Output: [(61 56 37 28) 28]
Test Case: 273 | Input/Output: [(51 59 73 91) 51]
Test Case: 274 | Input/Output: [(40 92 9 6) 6]
Test Case: 275 | Input/Output: [(45 58 57 83) 45]
Test Case: 276 | Input/Output: [(29 54 45 24) 24]
Test Case: 277 | Input/Output: [(32 18 3 42) 3]
Test Case: 278 | Input/Output: [(98 2 88 46) 2]
Test Case: 279 | Input/Output: [(79 79 40 77) 40]
Test Case: 280 | Input/Output: [(92 1 69 100) 1]
Test Case: 281 | Input/Output: [(42 21 84 10) 10]
Test Case: 282 | Input/Output: [(97 67 19 41) 19]
Test Case: 283 | Input/Output: [(3 56 6 34) 3]
Test Case: 284 | Input/Output: [(75 58 94 13) 13]
Test Case: 285 | Input/Output: [(69 93 77 76) 69]
Test Case: 286 | Input/Output: [(80 62 3 83) 3]
Test Case: 287 | Input/Output: [(21 81 51 46) 21]
Test Case: 288 | Input/Output: [(50 13 82 79) 13]
Test Case: 289 | Input/Output: [(45 44 74 43) 43]
Test Case: 290 | Input/Output: [(43 79 75 52) 43]
Test Case: 291 | Input/Output: [(42 10 85 89) 10]
Test Case: 292 | Input/Output: [(64 16 2 91) 2]
Test Case: 293 | Input/Output: [(46 78 22 96) 22]
Test Case: 294 | Input/Output: [(21 94 55 47) 21]
Test Case: 295 | Input/Output: [(56 84 64 3) 3]
Test Case: 296 | Input/Output: [(74 3 7 74) 3]
Test Case: 297 | Input/Output: [(94 15 57 74) 15]
Test Case: 298 | Input/Output: [(73 91 61 49) 49]
Test Case: 299 | Input/Output: [(92 69 97 15) 15]
Test Case: 300 | Input/Output: [(83 69 98 69) 69]
Test Case: 301 | Input/Output: [(11 38 55 84) 11]
Test Case: 302 | Input/Output: [(79 92 39 40) 39]
Test Case: 303 | Input/Output: [(31 88 46 35) 31]
Test Case: 304 | Input/Output: [(99 6 81 43) 6]
Test Case: 305 | Input/Output: [(78 80 75 63) 63]
Test Case: 306 | Input/Output: [(50 99 20 78) 20]
Test Case: 307 | Input/Output: [(43 36 95 39) 36]
Test Case: 308 | Input/Output: [(12 70 64 53) 12]
Test Case: 309 | Input/Output: [(83 11 100 25) 11]
Test Case: 310 | Input/Output: [(17 38 61 74) 17]
Test Case: 311 | Input/Output: [(35 74 0 22) 0]
Test Case: 312 | Input/Output: [(81 90 88 27) 27]
Test Case: 313 | Input/Output: [(93 41 91 26) 26]
Test Case: 314 | Input/Output: [(82 4 52 57) 4]
Test Case: 315 | Input/Output: [(12 35 1 35) 1]
Test Case: 316 | Input/Output: [(80 17 41 58) 17]
Test Case: 317 | Input/Output: [(5 7 57 83) 5]
Test Case: 318 | Input/Output: [(85 80 75 54) 54]
Test Case: 319 | Input/Output: [(70 50 43 12) 12]
Test Case: 320 | Input/Output: [(51 92 9 38) 9]
Test Case: 321 | Input/Output: [(79 17 3 63) 3]
Test Case: 322 | Input/Output: [(92 35 39 35) 35]
Test Case: 323 | Input/Output: [(2 94 18 86) 2]
Test Case: 324 | Input/Output: [(7 20 30 53) 7]
Test Case: 325 | Input/Output: [(41 13 48 29) 13]
Test Case: 326 | Input/Output: [(84 86 26 28) 26]
Test Case: 327 | Input/Output: [(91 64 43 10) 10]
Test Case: 328 | Input/Output: [(79 65 95 84) 65]
Test Case: 329 | Input/Output: [(19 2 14 99) 2]
Test Case: 330 | Input/Output: [(39 46 8 2) 2]
Test Case: 331 | Input/Output: [(82 67 28 6) 6]
Test Case: 332 | Input/Output: [(74 81 57 30) 30]
Test Case: 333 | Input/Output: [(36 95 1 41) 1]
Test Case: 334 | Input/Output: [(38 39 1 39) 1]
Test Case: 335 | Input/Output: [(90 73 87 58) 58]
Test Case: 336 | Input/Output: [(35 80 78 9) 9]
Test Case: 337 | Input/Output: [(36 45 96 21) 21]
Test Case: 338 | Input/Output: [(52 22 70 89) 22]
Test Case: 339 | Input/Output: [(50 58 89 29) 29]
Test Case: 340 | Input/Output: [(75 93 68 52) 52]
Test Case: 341 | Input/Output: [(37 7 91 40) 7]
Test Case: 342 | Input/Output: [(69 35 61 6) 6]
Test Case: 343 | Input/Output: [(4 32 5 56) 4]
Test Case: 344 | Input/Output: [(72 70 66 39) 39]
Test Case: 345 | Input/Output: [(66 47 78 22) 22]
Test Case: 346 | Input/Output: [(54 59 63 24) 24]
Test Case: 347 | Input/Output: [(91 93 78 2) 2]
Test Case: 348 | Input/Output: [(62 5 92 61) 5]
Test Case: 349 | Input/Output: [(54 57 26 22) 22]
Test Case: 350 | Input/Output: [(41 69 29 60) 29]
Test Case: 351 | Input/Output: [(15 79 6 85) 6]
Test Case: 352 | Input/Output: [(99 43 17 27) 17]
Test Case: 353 | Input/Output: [(91 96 40 57) 40]
Test Case: 354 | Input/Output: [(47 79 67 15) 15]
Test Case: 355 | Input/Output: [(43 38 99 8) 8]
Test Case: 356 | Input/Output: [(35 37 79 51) 35]
Test Case: 357 | Input/Output: [(75 74 13 23) 13]
Test Case: 358 | Input/Output: [(4 88 69 96) 4]
Test Case: 359 | Input/Output: [(1 88 28 54) 1]
Test Case: 360 | Input/Output: [(10 75 14 84) 10]
Test Case: 361 | Input/Output: [(55 42 8 44) 8]
Test Case: 362 | Input/Output: [(81 0 52 45) 0]
Test Case: 363 | Input/Output: [(41 3 73 17) 3]
Test Case: 364 | Input/Output: [(1 7 87 76) 1]
Test Case: 365 | Input/Output: [(55 53 100 71) 53]
Test Case: 366 | Input/Output: [(37 61 73 73) 37]
Test Case: 367 | Input/Output: [(21 1 56 40) 1]
Test Case: 368 | Input/Output: [(54 96 47 82) 47]
Test Case: 369 | Input/Output: [(77 46 99 55) 46]
Test Case: 370 | Input/Output: [(76 60 36 45) 36]
Test Case: 371 | Input/Output: [(46 75 69 28) 28]
Test Case: 372 | Input/Output: [(44 48 1 9) 1]
Test Case: 373 | Input/Output: [(21 45 96 70) 21]
Test Case: 374 | Input/Output: [(54 11 46 98) 11]
Test Case: 375 | Input/Output: [(70 32 82 29) 29]
Test Case: 376 | Input/Output: [(91 84 84 49) 49]
Test Case: 377 | Input/Output: [(57 19 38 62) 19]
Test Case: 378 | Input/Output: [(73 57 41 26) 26]
Test Case: 379 | Input/Output: [(40 74 51 74) 40]
Test Case: 380 | Input/Output: [(12 53 20 58) 12]
Test Case: 381 | Input/Output: [(39 57 39 89) 39]
Test Case: 382 | Input/Output: [(86 69 28 18) 18]
Test Case: 383 | Input/Output: [(75 76 72 75) 72]
Test Case: 384 | Input/Output: [(5 80 99 26) 5]
Test Case: 385 | Input/Output: [(69 52 28 92) 28]
Test Case: 386 | Input/Output: [(35 10 68 25) 10]
Test Case: 387 | Input/Output: [(50 10 35 58) 10]
Test Case: 388 | Input/Output: [(58 67 90 97) 58]
Test Case: 389 | Input/Output: [(71 65 17 46) 17]
Test Case: 390 | Input/Output: [(17 50 19 1) 1]
Test Case: 391 | Input/Output: [(82 70 89 61) 61]
Test Case: 392 | Input/Output: [(96 80 60 29) 29]
Test Case: 393 | Input/Output: [(60 12 39 63) 12]
Test Case: 394 | Input/Output: [(24 74 28 83) 24]
Test Case: 395 | Input/Output: [(100 72 43 78) 43]
Test Case: 396 | Input/Output: [(44 16 30 12) 12]
Test Case: 397 | Input/Output: [(12 25 34 6) 6]
Test Case: 398 | Input/Output: [(25 1 33 8) 1]
Test Case: 399 | Input/Output: [(56 47 72 69) 47]
Test Case: 400 | Input/Output: [(97 -40 25 -54) -54]
Test Case: 401 | Input/Output: [(66 -62 -16 -67) -67]
Test Case: 402 | Input/Output: [(-82 76 -85 -83) -85]
Test Case: 403 | Input/Output: [(-28 -83 -67 -36) -83]
Test Case: 404 | Input/Output: [(-9 90 -66 -36) -66]
Test Case: 405 | Input/Output: [(-31 93 68 -21) -31]
Test Case: 406 | Input/Output: [(79 -68 35 -10) -68]
Test Case: 407 | Input/Output: [(-25 84 -78 35) -78]
Test Case: 408 | Input/Output: [(71 -2 -60 -52) -60]
Test Case: 409 | Input/Output: [(30 -94 -23 28) -94]
Test Case: 410 | Input/Output: [(73 14 59 21) 14]
Test Case: 411 | Input/Output: [(-65 24 -69 -10) -69]
Test Case: 412 | Input/Output: [(90 -38 61 24) -38]
Test Case: 413 | Input/Output: [(86 -21 -19 -53) -53]
Test Case: 414 | Input/Output: [(52 5 23 -71) -71]
Test Case: 415 | Input/Output: [(99 61 3 -82) -82]
Test Case: 416 | Input/Output: [(-66 80 92 84) -66]
Test Case: 417 | Input/Output: [(14 -35 21 -55) -55]
Test Case: 418 | Input/Output: [(84 -83 49 -66) -83]
Test Case: 419 | Input/Output: [(99 -57 93 -69) -69]
Test Case: 420 | Input/Output: [(53 52 21 -40) -40]
Test Case: 421 | Input/Output: [(27 -19 -87 58) -87]
Test Case: 422 | Input/Output: [(-93 -77 9 80) -93]
Test Case: 423 | Input/Output: [(-31 -14 71 19) -31]
Test Case: 424 | Input/Output: [(-88 75 22 -64) -88]
Test Case: 425 | Input/Output: [(-52 -100 20 45) -100]
Test Case: 426 | Input/Output: [(-60 -8 81 -51) -60]
Test Case: 427 | Input/Output: [(-52 10 -3 14) -52]
Test Case: 428 | Input/Output: [(60 -61 16 -44) -61]
Test Case: 429 | Input/Output: [(45 64 -10 46) -10]
Test Case: 430 | Input/Output: [(35 19 -56 48) -56]
Test Case: 431 | Input/Output: [(-96 92 -92 -53) -96]
Test Case: 432 | Input/Output: [(14 -91 37 -93) -93]
Test Case: 433 | Input/Output: [(35 47 -23 58) -23]
Test Case: 434 | Input/Output: [(77 48 51 52) 48]
Test Case: 435 | Input/Output: [(-14 36 21 76) -14]
Test Case: 436 | Input/Output: [(0 17 88 -69) -69]
Test Case: 437 | Input/Output: [(-11 -79 67 17) -79]
Test Case: 438 | Input/Output: [(45 17 53 74) 17]
Test Case: 439 | Input/Output: [(30 25 -95 50) -95]
Test Case: 440 | Input/Output: [(-49 -59 67 -15) -59]
Test Case: 441 | Input/Output: [(-65 53 78 22) -65]
Test Case: 442 | Input/Output: [(27 46 7 60) 7]
Test Case: 443 | Input/Output: [(50 2 -1 42) -1]
Test Case: 444 | Input/Output: [(-17 23 68 96) -17]
Test Case: 445 | Input/Output: [(10 -28 73 74) -28]
Test Case: 446 | Input/Output: [(2 44 32 4) 2]
Test Case: 447 | Input/Output: [(2 10 -15 81) -15]
Test Case: 448 | Input/Output: [(54 43 -50 -48) -50]
Test Case: 449 | Input/Output: [(46 -60 -23 19) -60]
Test Case: 450 | Input/Output: [(96 -45 42 95) -45]
Test Case: 451 | Input/Output: [(-25 59 -84 14) -84]
Test Case: 452 | Input/Output: [(69 -77 -87 74) -87]
Test Case: 453 | Input/Output: [(22 -16 2 -78) -78]
Test Case: 454 | Input/Output: [(93 28 9 -19) -19]
Test Case: 455 | Input/Output: [(-58 85 87 -59) -59]
Test Case: 456 | Input/Output: [(-90 88 51 6) -90]
Test Case: 457 | Input/Output: [(-79 8 -79 -41) -79]
Test Case: 458 | Input/Output: [(-90 -4 -17 11) -90]
Test Case: 459 | Input/Output: [(33 54 77 -31) -31]
Test Case: 460 | Input/Output: [(21 -39 -85 -27) -85]
Test Case: 461 | Input/Output: [(90 66 43 32) 32]
Test Case: 462 | Input/Output: [(91 -33 -43 13) -43]
Test Case: 463 | Input/Output: [(-92 100 -8 -49) -92]
Test Case: 464 | Input/Output: [(23 13 -96 51) -96]
Test Case: 465 | Input/Output: [(2 85 -20 29) -20]
Test Case: 466 | Input/Output: [(-41 13 29 2) -41]
Test Case: 467 | Input/Output: [(13 41 63 -56) -56]
Test Case: 468 | Input/Output: [(88 -26 8 49) -26]
Test Case: 469 | Input/Output: [(97 -82 -21 -64) -82]
Test Case: 470 | Input/Output: [(-3 -12 -72 81) -72]
Test Case: 471 | Input/Output: [(20 -84 -68 -82) -84]
Test Case: 472 | Input/Output: [(-90 23 90 -37) -90]
Test Case: 473 | Input/Output: [(-92 -61 -10 -30) -92]
Test Case: 474 | Input/Output: [(78 -90 63 51) -90]
Test Case: 475 | Input/Output: [(27 -99 -52 84) -99]
Test Case: 476 | Input/Output: [(-88 87 -84 -91) -91]
Test Case: 477 | Input/Output: [(-39 -60 -99 22) -99]
Test Case: 478 | Input/Output: [(58 -69 -16 -2) -69]
Test Case: 479 | Input/Output: [(65 -32 94 10) -32]
Test Case: 480 | Input/Output: [(58 -1 71 80) -1]
Test Case: 481 | Input/Output: [(-86 -99 87 95) -99]
Test Case: 482 | Input/Output: [(-63 32 -12 87) -63]
Test Case: 483 | Input/Output: [(2 -15 85 83) -15]
Test Case: 484 | Input/Output: [(-37 -51 -66 -86) -86]
Test Case: 485 | Input/Output: [(55 29 -3 96) -3]
Test Case: 486 | Input/Output: [(-69 -26 -84 -2) -84]
Test Case: 487 | Input/Output: [(-58 39 51 -15) -58]
Test Case: 488 | Input/Output: [(7 -44 -96 -66) -96]
Test Case: 489 | Input/Output: [(-61 17 10 84) -61]
Test Case: 490 | Input/Output: [(14 -69 42 27) -69]
Test Case: 491 | Input/Output: [(-1 -32 73 45) -32]
Test Case: 492 | Input/Output: [(-34 -64 -97 -63) -97]
Test Case: 493 | Input/Output: [(-42 -81 60 -26) -81]
Test Case: 494 | Input/Output: [(23 -54 -8 -41) -54]
Test Case: 495 | Input/Output: [(96 -94 58 78) -94]
Test Case: 496 | Input/Output: [(-30 -42 96 34) -42]
Test Case: 497 | Input/Output: [(-79 88 65 -55) -79]
Test Case: 498 | Input/Output: [(-99 25 52 -100) -100]
Test Case: 499 | Input/Output: [(40 -63 23 -72) -72]
Test Case: 500 | Input/Output: [(-44 -84 49 -81) -84]
Test Case: 501 | Input/Output: [(32 -97 4 73) -97]
Test Case: 502 | Input/Output: [(6 -59 73 -80) -80]
Test Case: 503 | Input/Output: [(99 -9 15 96) -9]
Test Case: 504 | Input/Output: [(47 13 90 87) 13]
Test Case: 505 | Input/Output: [(-96 14 -44 -59) -96]
Test Case: 506 | Input/Output: [(97 -1 -47 61) -47]
Test Case: 507 | Input/Output: [(-100 -83 2 -51) -100]
Test Case: 508 | Input/Output: [(-82 44 77 79) -82]
Test Case: 509 | Input/Output: [(12 -66 -94 22) -94]
Test Case: 510 | Input/Output: [(-95 -84 27 -52) -95]
Test Case: 511 | Input/Output: [(-80 18 69 -87) -87]
Test Case: 512 | Input/Output: [(91 98 59 -44) -44]
Test Case: 513 | Input/Output: [(79 41 -83 40) -83]
Test Case: 514 | Input/Output: [(83 56 35 -100) -100]
Test Case: 515 | Input/Output: [(-96 58 28 -69) -96]
Test Case: 516 | Input/Output: [(-11 -79 69 -47) -79]
Test Case: 517 | Input/Output: [(-41 76 10 52) -41]
Test Case: 518 | Input/Output: [(38 33 35 1) 1]
Test Case: 519 | Input/Output: [(-9 -52 -75 -24) -75]
Test Case: 520 | Input/Output: [(5 64 -76 -44) -76]
Test Case: 521 | Input/Output: [(-76 -67 91 73) -76]
Test Case: 522 | Input/Output: [(2 -29 55 -19) -29]
Test Case: 523 | Input/Output: [(-65 2 95 -37) -65]
Test Case: 524 | Input/Output: [(-46 -50 -10 -59) -59]
Test Case: 525 | Input/Output: [(61 -87 -77 -78) -87]
Test Case: 526 | Input/Output: [(48 -58 68 47) -58]
Test Case: 527 | Input/Output: [(59 -65 3 83) -65]
Test Case: 528 | Input/Output: [(-74 80 21 47) -74]
Test Case: 529 | Input/Output: [(92 84 -40 64) -40]
Test Case: 530 | Input/Output: [(59 -50 96 98) -50]
Test Case: 531 | Input/Output: [(77 -12 54 -86) -86]
Test Case: 532 | Input/Output: [(-75 -94 26 -92) -94]
Test Case: 533 | Input/Output: [(100 85 -62 63) -62]
Test Case: 534 | Input/Output: [(-68 -6 31 28) -68]
Test Case: 535 | Input/Output: [(58 -100 -92 -10) -100]
Test Case: 536 | Input/Output: [(-45 65 18 16) -45]
Test Case: 537 | Input/Output: [(72 -80 12 89) -80]
Test Case: 538 | Input/Output: [(-96 10 -74 -26) -96]
Test Case: 539 | Input/Output: [(79 43 -71 37) -71]
Test Case: 540 | Input/Output: [(29 28 -4 -75) -75]
Test Case: 541 | Input/Output: [(40 -32 -68 73) -68]
Test Case: 542 | Input/Output: [(57 -96 -6 -93) -96]
Test Case: 543 | Input/Output: [(-13 -66 64 48) -66]
Test Case: 544 | Input/Output: [(-11 20 -86 -12) -86]
Test Case: 545 | Input/Output: [(13 89 93 -96) -96]
Test Case: 546 | Input/Output: [(-20 74 -53 -99) -99]
Test Case: 547 | Input/Output: [(-25 -12 43 -82) -82]
Test Case: 548 | Input/Output: [(-75 17 46 -86) -86]
Test Case: 549 | Input/Output: [(-80 73 -66 100) -80]
Test Case: 550 | Input/Output: [(-44 -7 72 -2) -44]
Test Case: 551 | Input/Output: [(-39 -9 -47 58) -47]
Test Case: 552 | Input/Output: [(19 36 -32 74) -32]
Test Case: 553 | Input/Output: [(-16 -33 28 0) -33]
Test Case: 554 | Input/Output: [(82 -60 16 -62) -62]
Test Case: 555 | Input/Output: [(61 39 -59 -5) -59]
Test Case: 556 | Input/Output: [(-5 23 8 85) -5]
Test Case: 557 | Input/Output: [(-40 44 17 -22) -40]
Test Case: 558 | Input/Output: [(54 38 18 -64) -64]
Test Case: 559 | Input/Output: [(81 -73 71 -29) -73]
Test Case: 560 | Input/Output: [(-15 25 -75 -84) -84]
Test Case: 561 | Input/Output: [(80 -27 -11 27) -27]
Test Case: 562 | Input/Output: [(49 -10 -90 -20) -90]
Test Case: 563 | Input/Output: [(39 89 17 -65) -65]
Test Case: 564 | Input/Output: [(-49 41 60 -91) -91]
Test Case: 565 | Input/Output: [(-14 57 54 5) -14]
Test Case: 566 | Input/Output: [(18 76 -95 19) -95]
Test Case: 567 | Input/Output: [(24 98 -59 -17) -59]
Test Case: 568 | Input/Output: [(-66 60 15 66) -66]
Test Case: 569 | Input/Output: [(-17 49 44 22) -17]
Test Case: 570 | Input/Output: [(47 -84 12 -61) -84]
Test Case: 571 | Input/Output: [(50 -74 59 -40) -74]
Test Case: 572 | Input/Output: [(-51 46 -62 11) -62]
Test Case: 573 | Input/Output: [(88 -84 -28 93) -84]
Test Case: 574 | Input/Output: [(-44 -72 -18 -36) -72]
Test Case: 575 | Input/Output: [(-85 -3 -32 -79) -85]
Test Case: 576 | Input/Output: [(-16 67 -36 44) -36]
Test Case: 577 | Input/Output: [(-13 91 6 -29) -29]
Test Case: 578 | Input/Output: [(-29 58 61 -28) -29]
Test Case: 579 | Input/Output: [(13 -73 70 83) -73]
Test Case: 580 | Input/Output: [(1 91 28 -74) -74]
Test Case: 581 | Input/Output: [(-24 83 100 31) -24]
Test Case: 582 | Input/Output: [(-30 63 -77 -84) -84]
Test Case: 583 | Input/Output: [(-26 43 84 -46) -46]
Test Case: 584 | Input/Output: [(-99 -83 -98 23) -99]
Test Case: 585 | Input/Output: [(8 -74 19 -64) -74]
Test Case: 586 | Input/Output: [(-75 50 73 -75) -75]
Test Case: 587 | Input/Output: [(38 -77 77 -89) -89]
Test Case: 588 | Input/Output: [(31 49 -34 50) -34]
Test Case: 589 | Input/Output: [(-90 57 -6 -89) -90]
Test Case: 590 | Input/Output: [(-26 -46 98 -24) -46]
Test Case: 591 | Input/Output: [(84 49 -48 46) -48]
Test Case: 592 | Input/Output: [(-45 28 -51 67) -51]
Test Case: 593 | Input/Output: [(63 -15 -3 1) -15]
Test Case: 594 | Input/Output: [(64 -86 36 34) -86]
Test Case: 595 | Input/Output: [(-38 -74 45 86) -74]
Test Case: 596 | Input/Output: [(-58 40 18 23) -58]
Test Case: 597 | Input/Output: [(-55 60 67 -74) -74]
Test Case: 598 | Input/Output: [(2 -72 54 -37) -72]
Test Case: 599 | Input/Output: [(39 57 -76 -82) -82]
Test Case: 600 | Input/Output: [(17 -98 -18 2) -98]
Test Case: 601 | Input/Output: [(62 -16 -76 -58) -76]
Test Case: 602 | Input/Output: [(73 -84 19 63) -84]
Test Case: 603 | Input/Output: [(72 79 -14 -43) -43]
Test Case: 604 | Input/Output: [(1 92 -82 2) -82]
Test Case: 605 | Input/Output: [(84 68 12 -15) -15]
Test Case: 606 | Input/Output: [(-52 -41 -92 -59) -92]
Test Case: 607 | Input/Output: [(25 -24 67 -35) -35]
Test Case: 608 | Input/Output: [(-29 57 -77 42) -77]
Test Case: 609 | Input/Output: [(30 -5 86 -77) -77]
Test Case: 610 | Input/Output: [(82 -63 43 89) -63]
Test Case: 611 | Input/Output: [(40 -85 84 96) -85]
Test Case: 612 | Input/Output: [(18 77 72 68) 18]
Test Case: 613 | Input/Output: [(-16 -73 48 67) -73]
Test Case: 614 | Input/Output: [(31 -95 23 -95) -95]
Test Case: 615 | Input/Output: [(-76 -17 -39 60) -76]
Test Case: 616 | Input/Output: [(34 41 -59 -35) -59]
Test Case: 617 | Input/Output: [(-25 -79 -17 -37) -79]
Test Case: 618 | Input/Output: [(-34 66 64 -29) -34]
Test Case: 619 | Input/Output: [(-70 33 -74 -73) -74]
Test Case: 620 | Input/Output: [(-78 3 -14 27) -78]
Test Case: 621 | Input/Output: [(-60 88 -61 87) -61]
Test Case: 622 | Input/Output: [(-68 -92 5 -67) -92]
Test Case: 623 | Input/Output: [(82 17 -72 -94) -94]
Test Case: 624 | Input/Output: [(-32 -59 -6 68) -59]
Test Case: 625 | Input/Output: [(16 31 -56 -81) -81]
Test Case: 626 | Input/Output: [(-39 -92 -52 -75) -92]
Test Case: 627 | Input/Output: [(2 -99 -49 90) -99]
Test Case: 628 | Input/Output: [(41 56 -63 43) -63]
Test Case: 629 | Input/Output: [(-98 39 54 -69) -98]
Test Case: 630 | Input/Output: [(36 91 -96 53) -96]
Test Case: 631 | Input/Output: [(-60 -12 51 -40) -60]
Test Case: 632 | Input/Output: [(-30 27 -6 -10) -30]
Test Case: 633 | Input/Output: [(-29 58 47 -29) -29]
Test Case: 634 | Input/Output: [(-55 -95 72 28) -95]
Test Case: 635 | Input/Output: [(49 60 -63 13) -63]
Test Case: 636 | Input/Output: [(-58 -63 94 -21) -63]
Test Case: 637 | Input/Output: [(-12 81 -16 60) -16]
Test Case: 638 | Input/Output: [(95 -56 19 17) -56]
Test Case: 639 | Input/Output: [(-75 -28 -54 -50) -75]
Test Case: 640 | Input/Output: [(-15 44 -33 -20) -33]
Test Case: 641 | Input/Output: [(-46 -96 -30 -7) -96]
Test Case: 642 | Input/Output: [(71 63 -24 21) -24]
Test Case: 643 | Input/Output: [(85 40 77 82) 40]
Test Case: 644 | Input/Output: [(-78 54 -54 9) -78]
Test Case: 645 | Input/Output: [(85 -42 -27 -2) -42]
Test Case: 646 | Input/Output: [(98 7 -34 -32) -34]
Test Case: 647 | Input/Output: [(25 71 98 47) 25]
Test Case: 648 | Input/Output: [(80 34 -94 -13) -94]
Test Case: 649 | Input/Output: [(30 41 -16 61) -16]
Test Case: 650 | Input/Output: [(45 46 90 -38) -38]
Test Case: 651 | Input/Output: [(51 74 22 41) 22]
Test Case: 652 | Input/Output: [(81 44 20 36) 20]
Test Case: 653 | Input/Output: [(33 -100 -60 -99) -100]
Test Case: 654 | Input/Output: [(78 46 -15 -99) -99]
Test Case: 655 | Input/Output: [(-39 -5 -77 -88) -88]
Test Case: 656 | Input/Output: [(-48 -69 -54 -21) -69]
Test Case: 657 | Input/Output: [(48 -12 62 -55) -55]
Test Case: 658 | Input/Output: [(-70 -5 -64 -10) -70]
Test Case: 659 | Input/Output: [(-69 -75 38 99) -75]
Test Case: 660 | Input/Output: [(-62 35 100 -16) -62]
Test Case: 661 | Input/Output: [(-52 -37 -81 -70) -81]
Test Case: 662 | Input/Output: [(44 12 -45 59) -45]
Test Case: 663 | Input/Output: [(28 -86 66 -2) -86]
Test Case: 664 | Input/Output: [(-9 38 63 -9) -9]
Test Case: 665 | Input/Output: [(18 -30 34 -9) -30]
Test Case: 666 | Input/Output: [(-68 -2 77 29) -68]
Test Case: 667 | Input/Output: [(-1 54 -66 73) -66]
Test Case: 668 | Input/Output: [(54 -30 -86 91) -86]
Test Case: 669 | Input/Output: [(63 -62 -32 9) -62]
Test Case: 670 | Input/Output: [(55 -88 -60 -78) -88]
Test Case: 671 | Input/Output: [(-48 -28 10 63) -48]
Test Case: 672 | Input/Output: [(-70 45 16 14) -70]
Test Case: 673 | Input/Output: [(-5 -2 -60 68) -60]
Test Case: 674 | Input/Output: [(27 32 -41 7) -41]
Test Case: 675 | Input/Output: [(-10 -5 91 -8) -10]
Test Case: 676 | Input/Output: [(13 -39 -41 -61) -61]
Test Case: 677 | Input/Output: [(82 -3 80 37) -3]
Test Case: 678 | Input/Output: [(-61 -2 -40 -80) -80]
Test Case: 679 | Input/Output: [(97 -18 -16 -38) -38]
Test Case: 680 | Input/Output: [(-99 -51 75 44) -99]
Test Case: 681 | Input/Output: [(-63 63 -31 85) -63]
Test Case: 682 | Input/Output: [(89 79 -61 42) -61]
Test Case: 683 | Input/Output: [(-3 59 -42 52) -42]
Test Case: 684 | Input/Output: [(-100 1 6 92) -100]
Test Case: 685 | Input/Output: [(53 -70 24 36) -70]
Test Case: 686 | Input/Output: [(62 79 78 -7) -7]
Test Case: 687 | Input/Output: [(-82 83 -58 -72) -82]
Test Case: 688 | Input/Output: [(-84 28 66 -63) -84]
Test Case: 689 | Input/Output: [(-11 99 -5 -90) -90]
Test Case: 690 | Input/Output: [(1 65 -86 100) -86]
Test Case: 691 | Input/Output: [(-68 -89 -37 -70) -89]
Test Case: 692 | Input/Output: [(-64 34 -93 -95) -95]
Test Case: 693 | Input/Output: [(-21 87 4 57) -21]
Test Case: 694 | Input/Output: [(68 -95 -6 -62) -95]
Test Case: 695 | Input/Output: [(37 11 18 74) 11]
Test Case: 696 | Input/Output: [(-83 91 -48 -16) -83]
Test Case: 697 | Input/Output: [(-22 91 -62 -72) -72]
Test Case: 698 | Input/Output: [(32 54 -89 53) -89]
Test Case: 699 | Input/Output: [(-65 45 -87 34) -87]
Test Case: 700 | Input/Output: [(-33 3 -77 -79) -79]
Test Case: 701 | Input/Output: [(22 55 45 -89) -89]
Test Case: 702 | Input/Output: [(-44 23 -33 -20) -44]
Test Case: 703 | Input/Output: [(-55 -70 53 -26) -70]
Test Case: 704 | Input/Output: [(-39 -53 -62 -31) -62]
Test Case: 705 | Input/Output: [(-68 -66 -92 -45) -92]
Test Case: 706 | Input/Output: [(35 -25 88 -86) -86]
Test Case: 707 | Input/Output: [(-35 44 80 -1) -35]
Test Case: 708 | Input/Output: [(-85 -13 -62 -26) -85]
Test Case: 709 | Input/Output: [(-59 7 -93 -31) -93]
Test Case: 710 | Input/Output: [(-41 -7 -80 -23) -80]
Test Case: 711 | Input/Output: [(48 -48 -28 -28) -48]
Test Case: 712 | Input/Output: [(-1 66 44 -62) -62]
Test Case: 713 | Input/Output: [(-20 -37 69 4) -37]
Test Case: 714 | Input/Output: [(-75 29 11 97) -75]
Test Case: 715 | Input/Output: [(-92 75 -1 -65) -92]
Test Case: 716 | Input/Output: [(-69 -64 -10 72) -69]
Test Case: 717 | Input/Output: [(-33 31 50 -91) -91]
Test Case: 718 | Input/Output: [(-19 -15 63 -13) -19]
Test Case: 719 | Input/Output: [(-32 -36 -18 -61) -61]
Test Case: 720 | Input/Output: [(59 -53 -21 29) -53]
Test Case: 721 | Input/Output: [(28 -74 81 -39) -74]
Test Case: 722 | Input/Output: [(24 -83 11 -19) -83]
Test Case: 723 | Input/Output: [(-87 26 44 -44) -87]
Test Case: 724 | Input/Output: [(54 7 -69 99) -69]
Test Case: 725 | Input/Output: [(97 73 -8 -93) -93]
Test Case: 726 | Input/Output: [(-3 -78 11 19) -78]
Test Case: 727 | Input/Output: [(-45 62 -70 -38) -70]
Test Case: 728 | Input/Output: [(46 -48 80 38) -48]
Test Case: 729 | Input/Output: [(91 -36 70 60) -36]
Test Case: 730 | Input/Output: [(6 84 76 -15) -15]
Test Case: 731 | Input/Output: [(9 42 -10 87) -10]
Test Case: 732 | Input/Output: [(7 -76 -13 37) -76]
Test Case: 733 | Input/Output: [(-22 -89 -64 -16) -89]
Test Case: 734 | Input/Output: [(73 81 -44 4) -44]
Test Case: 735 | Input/Output: [(-28 -60 -30 -83) -83]
Test Case: 736 | Input/Output: [(72 6 -32 87) -32]
Test Case: 737 | Input/Output: [(-49 -6 15 -17) -49]
Test Case: 738 | Input/Output: [(94 33 25 -83) -83]
Test Case: 739 | Input/Output: [(22 -91 -59 62) -91]
Test Case: 740 | Input/Output: [(-35 -89 -4 -27) -89]
Test Case: 741 | Input/Output: [(40 67 29 -11) -11]
Test Case: 742 | Input/Output: [(-56 25 61 24) -56]
Test Case: 743 | Input/Output: [(75 80 86 -12) -12]
Test Case: 744 | Input/Output: [(-25 48 31 -61) -61]
Test Case: 745 | Input/Output: [(-66 -91 86 -49) -91]
Test Case: 746 | Input/Output: [(50 -27 6 4) -27]
Test Case: 747 | Input/Output: [(-31 -41 -32 -89) -89]
Test Case: 748 | Input/Output: [(15 61 -24 39) -24]
Test Case: 749 | Input/Output: [(-15 -51 -26 98) -51]
Test Case: 750 | Input/Output: [(-33 -3 -80 -51) -80]
Test Case: 751 | Input/Output: [(42 -57 -78 -22) -78]
Test Case: 752 | Input/Output: [(43 54 56 -50) -50]
Test Case: 753 | Input/Output: [(-33 -75 -23 -54) -75]
Test Case: 754 | Input/Output: [(65 -42 85 61) -42]
Test Case: 755 | Input/Output: [(-4 -8 -59 99) -59]
Test Case: 756 | Input/Output: [(-9 -33 80 45) -33]
Test Case: 757 | Input/Output: [(-43 -8 -50 74) -50]
Test Case: 758 | Input/Output: [(-6 -47 68 78) -47]
Test Case: 759 | Input/Output: [(26 -51 -51 -65) -65]
Test Case: 760 | Input/Output: [(-92 90 -15 48) -92]
Test Case: 761 | Input/Output: [(-44 -31 23 95) -44]
Test Case: 762 | Input/Output: [(28 64 75 72) 28]
Test Case: 763 | Input/Output: [(-29 -90 48 57) -90]
Test Case: 764 | Input/Output: [(-81 72 73 -19) -81]
Test Case: 765 | Input/Output: [(-11 32 -75 -54) -75]
Test Case: 766 | Input/Output: [(-58 -77 -95 -89) -95]
Test Case: 767 | Input/Output: [(-91 100 9 16) -91]
Test Case: 768 | Input/Output: [(-13 34 25 82) -13]
Test Case: 769 | Input/Output: [(-71 -73 -93 -67) -93]
Test Case: 770 | Input/Output: [(-48 99 -61 -53) -61]
Test Case: 771 | Input/Output: [(-71 -8 -76 -86) -86]
Test Case: 772 | Input/Output: [(27 -53 98 46) -53]
Test Case: 773 | Input/Output: [(-42 72 -58 -20) -58]
Test Case: 774 | Input/Output: [(-98 97 -65 98) -98]
Test Case: 775 | Input/Output: [(95 -95 2 94) -95]
Test Case: 776 | Input/Output: [(-52 -10 -88 -72) -88]
Test Case: 777 | Input/Output: [(-94 -15 51 82) -94]
Test Case: 778 | Input/Output: [(-97 -43 -40 -16) -97]
Test Case: 779 | Input/Output: [(47 61 24 -3) -3]
Test Case: 780 | Input/Output: [(-33 -99 64 -41) -99]
Test Case: 781 | Input/Output: [(-77 -72 -16 67) -77]
Test Case: 782 | Input/Output: [(-87 62 -25 -100) -100]
Test Case: 783 | Input/Output: [(-39 -90 54 82) -90]
Test Case: 784 | Input/Output: [(-58 -13 94 44) -58]
Test Case: 785 | Input/Output: [(34 97 64 -9) -9]
Test Case: 786 | Input/Output: [(-66 -22 -83 44) -83]
Test Case: 787 | Input/Output: [(-39 21 47 98) -39]
Test Case: 788 | Input/Output: [(-35 -14 -10 53) -35]
Test Case: 789 | Input/Output: [(-16 59 19 33) -16]
Test Case: 790 | Input/Output: [(77 -29 46 93) -29]
Test Case: 791 | Input/Output: [(5 44 -71 -64) -71]
Test Case: 792 | Input/Output: [(58 23 54 18) 18]
Test Case: 793 | Input/Output: [(61 -22 -31 57) -31]
Test Case: 794 | Input/Output: [(-2 -89 23 13) -89]
Test Case: 795 | Input/Output: [(-70 81 95 -40) -70]
Test Case: 796 | Input/Output: [(53 -59 43 -16) -59]
Test Case: 797 | Input/Output: [(72 7 -29 -44) -44]
Test Case: 798 | Input/Output: [(-83 32 -99 36) -99]
Test Case: 799 | Input/Output: [(76 92 99 -32) -32]
Test Case: 800 | Input/Output: [(-56 -44 45 31) -56]
Test Case: 801 | Input/Output: [(35 -81 -7 -17) -81]
Test Case: 802 | Input/Output: [(-69 13 33 7) -69]
Test Case: 803 | Input/Output: [(11 51 64 -26) -26]
Test Case: 804 | Input/Output: [(42 73 24 -67) -67]
Test Case: 805 | Input/Output: [(-12 65 -35 57) -35]
Test Case: 806 | Input/Output: [(-40 47 -11 22) -40]
Test Case: 807 | Input/Output: [(1 -46 -20 73) -46]
Test Case: 808 | Input/Output: [(60 -7 69 37) -7]
Test Case: 809 | Input/Output: [(-24 -88 64 -55) -88]
Test Case: 810 | Input/Output: [(38 -35 -40 -89) -89]
Test Case: 811 | Input/Output: [(-49 39 -58 -34) -58]
Test Case: 812 | Input/Output: [(32 -89 -96 -36) -96]
Test Case: 813 | Input/Output: [(66 65 -31 62) -31]
Test Case: 814 | Input/Output: [(77 17 -82 68) -82]
Test Case: 815 | Input/Output: [(-38 9 13 28) -38]
Test Case: 816 | Input/Output: [(-99 -73 32 98) -99]
Test Case: 817 | Input/Output: [(-87 -11 -10 25) -87]
Test Case: 818 | Input/Output: [(57 -25 44 -64) -64]
Test Case: 819 | Input/Output: [(23 -1 46 56) -1]
Test Case: 820 | Input/Output: [(51 29 -85 -10) -85]
Test Case: 821 | Input/Output: [(-38 -22 -88 -8) -88]
Test Case: 822 | Input/Output: [(21 77 15 98) 15]
Test Case: 823 | Input/Output: [(42 -90 92 23) -90]
Test Case: 824 | Input/Output: [(0 -92 35 6) -92]
Test Case: 825 | Input/Output: [(79 81 72 -12) -12]
Test Case: 826 | Input/Output: [(-49 99 84 14) -49]
Test Case: 827 | Input/Output: [(57 45 73 -47) -47]
Test Case: 828 | Input/Output: [(-56 -21 48 6) -56]
Test Case: 829 | Input/Output: [(12 72 33 -20) -20]
Test Case: 830 | Input/Output: [(67 99 -11 -83) -83]
Test Case: 831 | Input/Output: [(86 -52 -8 17) -52]
Test Case: 832 | Input/Output: [(-12 -94 96 -15) -94]
Test Case: 833 | Input/Output: [(96 -31 19 47) -31]
Test Case: 834 | Input/Output: [(-65 -19 57 13) -65]
Test Case: 835 | Input/Output: [(-23 -58 95 31) -58]
Test Case: 836 | Input/Output: [(88 -62 93 59) -62]
Test Case: 837 | Input/Output: [(82 8 89 -37) -37]
Test Case: 838 | Input/Output: [(20 45 -56 -24) -56]
Test Case: 839 | Input/Output: [(-41 -49 7 -92) -92]
Test Case: 840 | Input/Output: [(-5 -33 71 11) -33]
Test Case: 841 | Input/Output: [(71 -8 57 -42) -42]
Test Case: 842 | Input/Output: [(26 100 -26 26) -26]
Test Case: 843 | Input/Output: [(72 74 -84 -18) -84]
Test Case: 844 | Input/Output: [(43 -47 62 -84) -84]
Test Case: 845 | Input/Output: [(-78 16 6 58) -78]
Test Case: 846 | Input/Output: [(-92 29 -71 -48) -92]
Test Case: 847 | Input/Output: [(-69 -23 -97 70) -97]
Test Case: 848 | Input/Output: [(-89 -48 90 70) -89]
Test Case: 849 | Input/Output: [(-61 -15 -82 -76) -82]
Test Case: 850 | Input/Output: [(-95 -77 -52 33) -95]
Test Case: 851 | Input/Output: [(30 -81 13 19) -81]
Test Case: 852 | Input/Output: [(-29 -91 -45 72) -91]
Test Case: 853 | Input/Output: [(-80 -36 -94 28) -94]
Test Case: 854 | Input/Output: [(-56 48 66 81) -56]
Test Case: 855 | Input/Output: [(-50 31 -100 -62) -100]
Test Case: 856 | Input/Output: [(-32 85 -7 55) -32]
Test Case: 857 | Input/Output: [(12 -44 -45 -18) -45]
Test Case: 858 | Input/Output: [(85 -82 40 -81) -82]
Test Case: 859 | Input/Output: [(14 73 -82 53) -82]
Test Case: 860 | Input/Output: [(-16 93 74 -41) -41]
Test Case: 861 | Input/Output: [(25 47 33 87) 25]
Test Case: 862 | Input/Output: [(36 -84 57 -10) -84]
Test Case: 863 | Input/Output: [(-36 78 62 55) -36]
Test Case: 864 | Input/Output: [(-28 -64 -65 71) -65]
Test Case: 865 | Input/Output: [(-17 -65 24 -30) -65]
Test Case: 866 | Input/Output: [(-46 -83 -73 33) -83]
Test Case: 867 | Input/Output: [(1 -99 -73 60) -99]
Test Case: 868 | Input/Output: [(19 27 24 45) 19]
Test Case: 869 | Input/Output: [(-63 73 -94 -1) -94]
Test Case: 870 | Input/Output: [(-76 -48 -28 -76) -76]
Test Case: 871 | Input/Output: [(-11 -2 37 -37) -37]
Test Case: 872 | Input/Output: [(77 8 41 -12) -12]
Test Case: 873 | Input/Output: [(28 -28 -8 -17) -28]
Test Case: 874 | Input/Output: [(-32 -53 -32 -41) -53]
Test Case: 875 | Input/Output: [(72 -70 -82 66) -82]
Test Case: 876 | Input/Output: [(75 -99 82 -43) -99]
Test Case: 877 | Input/Output: [(-42 -56 57 -100) -100]
Test Case: 878 | Input/Output: [(-10 84 -25 -14) -25]
Test Case: 879 | Input/Output: [(86 -11 -68 11) -68]
Test Case: 880 | Input/Output: [(-24 -4 -100 77) -100]
Test Case: 881 | Input/Output: [(-70 76 -66 25) -70]
Test Case: 882 | Input/Output: [(84 -43 4 -3) -43]
Test Case: 883 | Input/Output: [(92 27 60 25) 25]
Test Case: 884 | Input/Output: [(65 53 16 34) 16]
Test Case: 885 | Input/Output: [(61 66 -18 -82) -82]
Test Case: 886 | Input/Output: [(70 -83 61 -98) -98]
Test Case: 887 | Input/Output: [(17 -57 26 65) -57]
Test Case: 888 | Input/Output: [(-15 -52 -63 27) -63]
Test Case: 889 | Input/Output: [(100 21 -73 -55) -73]
Test Case: 890 | Input/Output: [(-73 12 22 78) -73]
Test Case: 891 | Input/Output: [(69 -3 97 9) -3]
Test Case: 892 | Input/Output: [(80 89 12 -52) -52]
Test Case: 893 | Input/Output: [(-2 84 7 82) -2]
Test Case: 894 | Input/Output: [(30 86 -9 -27) -27]
Test Case: 895 | Input/Output: [(-6 -44 -60 48) -60]
Test Case: 896 | Input/Output: [(-51 -97 84 94) -97]
Test Case: 897 | Input/Output: [(56 53 -87 -44) -87]
Test Case: 898 | Input/Output: [(8 4 34 97) 4]
Test Case: 899 | Input/Output: [(-11 59 -79 -94) -94]
Test Case: 900 | Input/Output: [(4 97 -78 16) -78]
Test Case: 901 | Input/Output: [(96 -94 82 9) -94]
Test Case: 902 | Input/Output: [(-62 90 10 -20) -62]
Test Case: 903 | Input/Output: [(40 66 68 -94) -94]
Test Case: 904 | Input/Output: [(4 66 34 80) 4]
Test Case: 905 | Input/Output: [(-33 97 -31 -85) -85]
Test Case: 906 | Input/Output: [(-68 -16 93 -94) -94]
Test Case: 907 | Input/Output: [(91 -74 86 34) -74]
Test Case: 908 | Input/Output: [(21 -28 -68 71) -68]
Test Case: 909 | Input/Output: [(87 -70 -50 11) -70]
Test Case: 910 | Input/Output: [(-96 -16 -63 56) -96]
Test Case: 911 | Input/Output: [(17 -91 0 23) -91]
Test Case: 912 | Input/Output: [(-33 57 65 32) -33]
Test Case: 913 | Input/Output: [(95 94 -8 93) -8]
Test Case: 914 | Input/Output: [(71 -2 -76 70) -76]
Test Case: 915 | Input/Output: [(67 -90 12 37) -90]
Test Case: 916 | Input/Output: [(58 96 78 -89) -89]
Test Case: 917 | Input/Output: [(83 -93 20 -65) -93]
Test Case: 918 | Input/Output: [(-80 -87 87 33) -87]
Test Case: 919 | Input/Output: [(-28 -5 39 -76) -76]
Test Case: 920 | Input/Output: [(-40 -75 76 25) -75]
Test Case: 921 | Input/Output: [(11 10 -36 56) -36]
Test Case: 922 | Input/Output: [(-21 -38 84 89) -38]
Test Case: 923 | Input/Output: [(65 -67 18 -98) -98]
Test Case: 924 | Input/Output: [(-2 75 -90 -85) -90]
Test Case: 925 | Input/Output: [(100 -44 -94 -34) -94]
Test Case: 926 | Input/Output: [(-36 -16 57 -80) -80]
Test Case: 927 | Input/Output: [(-19 -49 94 -3) -49]
Test Case: 928 | Input/Output: [(-51 14 36 86) -51]
Test Case: 929 | Input/Output: [(68 -69 -20 -7) -69]
Test Case: 930 | Input/Output: [(66 87 94 6) 6]
Test Case: 931 | Input/Output: [(-56 60 41 -7) -56]
Test Case: 932 | Input/Output: [(58 -93 54 -100) -100]
Test Case: 933 | Input/Output: [(-37 -47 -81 50) -81]
Test Case: 934 | Input/Output: [(-90 18 -3 -65) -90]
Test Case: 935 | Input/Output: [(65 31 82 18) 18]
Test Case: 936 | Input/Output: [(65 9 63 36) 9]
Test Case: 937 | Input/Output: [(-46 -47 -57 -1) -57]
Test Case: 938 | Input/Output: [(91 -81 -99 82) -99]
Test Case: 939 | Input/Output: [(-90 -84 -92 75) -92]
Test Case: 940 | Input/Output: [(33 7 40 -64) -64]
Test Case: 941 | Input/Output: [(-35 -25 -90 -20) -90]
Test Case: 942 | Input/Output: [(-10 -32 77 52) -32]
Test Case: 943 | Input/Output: [(89 -15 18 73) -15]
Test Case: 944 | Input/Output: [(13 -94 -95 -61) -95]
Test Case: 945 | Input/Output: [(-49 -98 31 -59) -98]
Test Case: 946 | Input/Output: [(-62 70 78 82) -62]
Test Case: 947 | Input/Output: [(-74 97 -60 -98) -98]
Test Case: 948 | Input/Output: [(54 98 0 61) 0]
Test Case: 949 | Input/Output: [(-3 -94 23 -75) -94]
Test Case: 950 | Input/Output: [(-66 -86 96 53) -86]
Test Case: 951 | Input/Output: [(-51 84 -32 -81) -81]
Test Case: 952 | Input/Output: [(-7 -78 2 1) -78]
Test Case: 953 | Input/Output: [(-100 82 -97 -10) -100]
Test Case: 954 | Input/Output: [(69 9 -71 86) -71]
Test Case: 955 | Input/Output: [(84 34 -36 81) -36]
Test Case: 956 | Input/Output: [(-80 59 5 -27) -80]
Test Case: 957 | Input/Output: [(-68 61 51 32) -68]
Test Case: 958 | Input/Output: [(-78 26 65 97) -78]
Test Case: 959 | Input/Output: [(-98 -23 -29 4) -98]
Test Case: 960 | Input/Output: [(16 -94 32 -28) -94]
Test Case: 961 | Input/Output: [(72 -22 95 -62) -62]
Test Case: 962 | Input/Output: [(61 -85 -22 3) -85]
Test Case: 963 | Input/Output: [(-55 21 -64 -96) -96]
Test Case: 964 | Input/Output: [(88 13 40 30) 13]
Test Case: 965 | Input/Output: [(-75 -48 96 32) -75]
Test Case: 966 | Input/Output: [(2 46 99 40) 2]
Test Case: 967 | Input/Output: [(36 -80 50 -80) -80]
Test Case: 968 | Input/Output: [(-17 93 -10 3) -17]
Test Case: 969 | Input/Output: [(92 -52 -3 49) -52]
Test Case: 970 | Input/Output: [(-97 22 85 50) -97]
Test Case: 971 | Input/Output: [(96 -27 -12 -93) -93]
Test Case: 972 | Input/Output: [(-47 -63 66 60) -63]
Test Case: 973 | Input/Output: [(-12 -75 -87 91) -87]
Test Case: 974 | Input/Output: [(20 63 3 -68) -68]
Test Case: 975 | Input/Output: [(-38 83 -52 -11) -52]
Test Case: 976 | Input/Output: [(50 59 78 -26) -26]
Test Case: 977 | Input/Output: [(-5 -57 -19 31) -57]
Test Case: 978 | Input/Output: [(56 59 79 -84) -84]
Test Case: 979 | Input/Output: [(67 -7 -73 -39) -73]
Test Case: 980 | Input/Output: [(-35 -1 81 11) -35]
Test Case: 981 | Input/Output: [(74 -69 6 -70) -70]
Test Case: 982 | Input/Output: [(-70 71 -90 -66) -90]
Test Case: 983 | Input/Output: [(-16 42 29 32) -16]
Test Case: 984 | Input/Output: [(46 13 93 -72) -72]
Test Case: 985 | Input/Output: [(-43 74 -78 48) -78]
Test Case: 986 | Input/Output: [(-23 38 48 24) -23]
Test Case: 987 | Input/Output: [(-77 -14 99 -37) -77]
Test Case: 988 | Input/Output: [(12 -18 80 -86) -86]
Test Case: 989 | Input/Output: [(-83 48 -16 -88) -88]
Test Case: 990 | Input/Output: [(66 80 -70 -21) -70]
Test Case: 991 | Input/Output: [(-51 -56 100 66) -56]
Test Case: 992 | Input/Output: [(-64 54 -4 -89) -89]
Test Case: 993 | Input/Output: [(18 -35 -26 13) -35]
Test Case: 994 | Input/Output: [(78 -78 -35 -50) -78]
Test Case: 995 | Input/Output: [(67 69 -14 -12) -14]
Test Case: 996 | Input/Output: [(95 85 -3 -99) -99]
Test Case: 997 | Input/Output: [(41 49 -58 -39) -58]
Test Case: 998 | Input/Output: [(78 43 62 -91) -91]
Test Case: 999 | Input/Output: [(-64 45 63 82) -64]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 8 -82 112 -113 -127 54 87 47 -17 113 -49 103 -92 -2 -2 64
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[39 -14 -14 -14] -14] [[-12 -78 -78 -78] -78] [[-39 -39 -39 47] -39] [[-88 81 -88 -88] -88] [[-53 -40 -53 -53] -53] [[90 90 -27 90] -27] [[-34 -34 -19 -34] -34] [[-52 -52 -80 -52] -80] [[42 42 42 -51] -51] [[-67 14 14 14] -67] [(25 25 25 25) 25] [(69 69 69 69) 69] [(-53 -53 -53 -53) -53] [(-73 -73 -73 -73) -73] [(-44 -44 -44 -44) -44] [(26 4 45 2) 2] [(64 32 87 52) 32] [(90 77 1 43) 1] [(93 96 9 94) 9] [(95 78 41 32) 32] [(69 52 17 81) 17] [(44 20 73 33) 20] [(26 37 62 96) 26] [(84 22 99 45) 22] [(26 11 56 23) 11] [(77 4 79 37) 4] [(8 88 91 61) 8] [(70 82 78 35) 35] [(16 29 11 48) 11] [(38 63 42 91) 38] [(59 83 82 86) 59] [(20 57 46 12) 12] [(48 63 71 75) 48] [(53 33 9 74) 9] [(17 36 58 64) 17] [(-12 -79 -72 5) -79] [(-37 -9 -42 39) -42] [(4 19 61 68) 4] [(48 -47 19 -97) -97] [(-65 -100 80 13) -100] [(-91 -56 59 -93) -93] [(-28 -67 -72 -17) -72] [(-19 93 -12 -94) -94] [(99 -50 86 56) -50] [(60 -13 57 65) -13] [(43 -2 -26 -71) -71] [(16 -99 -25 -93) -99] [(18 -53 -67 -10) -67] [(-50 17 -20 29) -50] [(-95 -83 44 8) -95] [(78 28 6 -4) -4] [(18 -70 45 -97) -97] [(31 77 7 65) 7] [(-57 69 95 -94) -94] [(-70 -54 75 -50) -70] [(59 -24 37 15) -24] [(54 -37 -2 -60) -60] [(61 -97 -95 -42) -97] [(-16 -3 -96 11) -96] [(-86 71 38 -52) -86] [(-1 9 -34 -14) -34] [(49 -68 62 -46) -68] [(-33 -46 -100 32) -100] [(-40 9 -59 22) -59] [(94 59 -61 -41) -61] [(-6 54 4 -43) -43] [(-50 23 92 -66) -66] [(15 12 17 43) 12] [(76 60 85 65) 60] [(-90 3 49 -48) -90] [(-59 6 -7 38) -59] [(-24 62 33 -81) -81] [(-83 44 74 -74) -83] [(17 -5 53 -18) -18] [(-72 -39 80 -83) -83] [(-19 -81 68 -77) -81] [(88 -23 97 65) -23] [(-37 72 17 65) -37] [(-49 12 -81 43) -81] [(-97 -46 15 -34) -97] [(14 19 59 -67) -67] [(17 35 61 -8) -8] [(53 -50 -76 70) -76] [(90 -35 72 56) -35] [(67 -38 -42 97) -42] [(25 -77 0 -66) -77] [(-22 89 67 -93) -93] [(83 -85 -59 34) -85] [(-80 -71 -100 -59) -100] [(-67 -22 19 -23) -67] [(88 -41 9 18) -41] [(93 19 -90 -37) -90] [(-6 -74 -38 50) -74] [(25 19 63 58) 19] [(72 -5 48 42) -5])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 618
Test mean error for best: 0.61800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: 81                 
Correct output: -53                 | Program output: -40                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 77                 
Correct output: 9                   | Program output: 96                 
Correct output: 32                  | Program output: 78                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 88                 
Correct output: 35                  | Program output: 82                 
Correct output: 11                  | Program output: 29                 
Correct output: 38                  | Program output: 63                 
Correct output: 59                  | Program output: 83                 
Correct output: 12                  | Program output: 57                 
Correct output: 48                  | Program output: 63                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -9                 
Correct output: 4                   | Program output: 19                 
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -56                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -2                 
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -83                
Correct output: -4                  | Program output: 28                 
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 77                 
Correct output: -94                 | Program output: 69                 
Correct output: -70                 | Program output: -54                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -3                 
Correct output: -86                 | Program output: 71                 
Correct output: -34                 | Program output: 9                  
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: 9                  
Correct output: -61                 | Program output: 59                 
Correct output: -43                 | Program output: 54                 
Correct output: -66                 | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: 3                  
Correct output: -59                 | Program output: 6                  
Correct output: -81                 | Program output: 62                 
Correct output: -83                 | Program output: 44                 
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: 72                 
Correct output: -81                 | Program output: 12                 
Correct output: -97                 | Program output: -46                
Correct output: -67                 | Program output: 19                 
Correct output: -8                  | Program output: 35                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: 89                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -71                
Correct output: -67                 | Program output: -22                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction tag_exec_514} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_boolean_338} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction tagged_392})
Lexicase best program: (integer_eq tag_exec_514 (integer_rot boolean_shove tag_boolean_338 boolean_xor print_integer) boolean_invert_second_then_and boolean_dup_items in2 boolean_pop tagged_392)
Lexicase best errors: [0 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 14
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction tag_exec_514} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_boolean_338} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction tagged_392})
Zero cases best program: (integer_eq tag_exec_514 (integer_rot boolean_shove tag_boolean_338 boolean_xor print_integer) boolean_invert_second_then_and boolean_dup_items in2 boolean_pop tagged_392)
Zero cases best errors: [0 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 14
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 3 10 17 3 5 2 17 5 3)
Population mean number of elite cases: 0.07
Count of perfect (error zero) individuals by case: (2 3 10 17 3 5 2 17 5 3)
Population mean number of perfect (error zero) cases: 0.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_shove})
Best program: (exec_do*range (exec_empty) in2 print_integer integer_shove boolean_yank integer_gte integer_gte in2 in1 boolean_invert_second_then_and exec_k (exec_shove () integer_gt integer_yankdup boolean_shove) (exec_rot () () (exec_while (exec_y (exec_pop (boolean_xor exec_while (integer_dec) exec_shove (exec_while (exec_if (exec_rot (integer_yankdup boolean_frominteger) (exec_shove ()) ()) ()))))))))
Errors: [0 0 0 0 1 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 50
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 9.933
Median total errors in population: 10
Error averages by case: (0.998 0.997 0.99 0.983 0.997 0.995 0.998 0.983 0.995 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.896
Average program size in population (points): 69.974
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 479359
--- Timings ---
Current time: 1559593970589 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.8 seconds, 31.0%
Fitness Testing:      1.7 seconds, 65.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -34                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 45                 
Correct output: 32                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 41                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 73                 
Correct output: 26                  | Program output: 62                 
Correct output: 22                  | Program output: 99                 
Correct output: 11                  | Program output: 56                 
Correct output: 4                   | Program output: 79                 
Correct output: 8                   | Program output: 91                 
Correct output: 35                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 38                  | Program output: 42                 
Correct output: 59                  | Program output: 82                 
Correct output: 12                  | Program output: 46                 
Correct output: 48                  | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 58                 
Correct output: -79                 | Program output: -72                
Correct output: -42                 | Program output: -42                
Correct output: 4                   | Program output: 61                 
Correct output: -97                 | Program output: 19                 
Correct output: -100                | Program output: 80                 
Correct output: -93                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -12                
Correct output: -50                 | Program output: 86                 
Correct output: -13                 | Program output: 57                 
Correct output: -71                 | Program output: -26                
Correct output: -99                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -20                
Correct output: -95                 | Program output: 44                 
Correct output: -4                  | Program output: 6                  
Correct output: -97                 | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 95                 
Correct output: -70                 | Program output: 75                 
Correct output: -24                 | Program output: 37                 
Correct output: -60                 | Program output: -2                 
Correct output: -97                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 38                 
Correct output: -34                 | Program output: -34                
Correct output: -68                 | Program output: 62                 
Correct output: -100                | Program output: -100               
Correct output: -59                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -43                 | Program output: 4                  
Correct output: -66                 | Program output: 92                 
Correct output: 12                  | Program output: 17                 
Correct output: 60                  | Program output: 85                 
Correct output: -90                 | Program output: 49                 
Correct output: -59                 | Program output: -7                 
Correct output: -81                 | Program output: 33                 
Correct output: -83                 | Program output: 74                 
Correct output: -18                 | Program output: 53                 
Correct output: -83                 | Program output: 80                 
Correct output: -81                 | Program output: 68                 
Correct output: -23                 | Program output: 97                 
Correct output: -37                 | Program output: 17                 
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: 15                 
Correct output: -67                 | Program output: 59                 
Correct output: -8                  | Program output: 61                 
Correct output: -76                 | Program output: -76                
Correct output: -35                 | Program output: 72                 
Correct output: -42                 | Program output: -42                
Correct output: -77                 | Program output: 0                  
Correct output: -93                 | Program output: 67                 
Correct output: -85                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 19                 
Correct output: -41                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -38                
Correct output: 19                  | Program output: 63                 
Correct output: -5                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 2, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction 62} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_mod integer_mod in3 print_integer exec_s_when_autoconstructing (integer_dup_items exec_eq exec_do*while (exec_empty boolean_yankdup integer_pop in2 boolean_dup integer_lt integer_dup_items)) (boolean_dup) (boolean_xor) integer_mult exec_when (integer_gt exec_dup_items in2) boolean_swap integer_flush boolean_invert_first_then_and boolean_invert_first_then_and in1 exec_yankdup boolean_dup in4 integer_lte exec_dup_times (integer_yank integer_div exec_y () in4 integer_fromboolean) exec_k () () exec_pop (exec_k_when_autoconstructing (exec_stackdepth) (in2 integer_mult boolean_flush print_integer) exec_empty exec_dup_items boolean_empty integer_yankdup boolean_shove integer_pop) integer_pop print_integer exec_flush boolean_empty integer_dup_times boolean_not integer_gte boolean_invert_first_then_and integer_dec exec_noop exec_swap (integer_dup_times exec_swap (print_exec ()) (exec_when () 62 integer_inc boolean_frominteger)) ())
Lexicase best errors: [0 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 88
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 2, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction 62} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_mod integer_mod in3 print_integer exec_s_when_autoconstructing (integer_dup_items exec_eq exec_do*while (exec_empty boolean_yankdup integer_pop in2 boolean_dup integer_lt integer_dup_items)) (boolean_dup) (boolean_xor) integer_mult exec_when (integer_gt exec_dup_items in2) boolean_swap integer_flush boolean_invert_first_then_and boolean_invert_first_then_and in1 exec_yankdup boolean_dup in4 integer_lte exec_dup_times (integer_yank integer_div exec_y () in4 integer_fromboolean) exec_k () () exec_pop (exec_k_when_autoconstructing (exec_stackdepth) (in2 integer_mult boolean_flush print_integer) exec_empty exec_dup_items boolean_empty integer_yankdup boolean_shove integer_pop) integer_pop print_integer exec_flush boolean_empty integer_dup_times boolean_not integer_gte boolean_invert_first_then_and integer_dec exec_noop exec_swap (integer_dup_times exec_swap (print_exec ()) (exec_when () 62 integer_inc boolean_frominteger)) ())
Zero cases best errors: [0 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 88
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 172 172 561 630 5 65 240 385 383)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (174 172 172 561 630 5 65 240 385 383)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction -39} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if})
Best program: (exec_if (in4 integer_fromboolean integer_yank integer_dup_items tagged_2 exec_eq integer_add exec_while (in1) in3 print_integer) (boolean_stackdepth integer_pop exec_flush exec_do*count (exec_dup (exec_flush integer_dup_items integer_gt boolean_empty exec_empty -39) exec_noop) exec_do*times (print_newline) integer_inc boolean_stackdepth exec_dup (integer_dec boolean_yankdup print_newline boolean_flush) in1 boolean_yank) boolean_rot exec_eq exec_swap (boolean_invert_first_then_and integer_pop integer_inc integer_pop integer_yankdup exec_while (integer_gt) boolean_invert_second_then_and boolean_yank integer_dec) (integer_mult) boolean_empty integer_inc integer_max exec_yankdup exec_do*count (exec_k_when_autoconstructing (integer_yank boolean_dup_times boolean_pop exec_do*times (print_exec (exec_flush integer_mult) boolean_dup_times) boolean_dup_items integer_flush boolean_not exec_dup_times (boolean_dup print_exec () boolean_dup) integer_div boolean_dup_items boolean_empty print_exec (exec_while (boolean_dup exec_k (integer_dec integer_lt integer_dup exec_dup_items) (print_newline exec_if () ())))) ()))
Errors: [0 0 0 0 0 1 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 83
Size: 107
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 7.213
Median total errors in population: 6
Error averages by case: (0.826 0.828 0.828 0.439 0.37 0.995 0.935 0.76 0.615 0.617)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.465
Average program size in population (points): 57.243
Average percent parens in population: 0.260
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 888081
--- Timings ---
Current time: 1559593972520 milliseconds
Total Time:           4.7 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.9 seconds, 39.7%
Fitness Testing:      2.4 seconds, 50.6%
Report:               0.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 52                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 81                 
Correct output: 20                  | Program output: 33                 
Correct output: 26                  | Program output: 96                 
Correct output: 22                  | Program output: 45                 
Correct output: 11                  | Program output: 23                 
Correct output: 4                   | Program output: 37                 
Correct output: 8                   | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 48                 
Correct output: 38                  | Program output: 91                 
Correct output: 59                  | Program output: 86                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 75                 
Correct output: 9                   | Program output: 74                 
Correct output: 17                  | Program output: 64                 
Correct output: -79                 | Program output: 5                  
Correct output: -42                 | Program output: 39                 
Correct output: 4                   | Program output: 68                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: 56                 
Correct output: -13                 | Program output: 65                 
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -93                
Correct output: -67                 | Program output: -10                
Correct output: -50                 | Program output: 29                 
Correct output: -95                 | Program output: 8                  
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -50                
Correct output: -24                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -42                
Correct output: -96                 | Program output: 11                 
Correct output: -86                 | Program output: -52                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -46                
Correct output: -100                | Program output: 32                 
Correct output: -59                 | Program output: 22                 
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 43                 
Correct output: 60                  | Program output: 65                 
Correct output: -90                 | Program output: -48                
Correct output: -59                 | Program output: 38                 
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -77                
Correct output: -23                 | Program output: 65                 
Correct output: -37                 | Program output: 65                 
Correct output: -81                 | Program output: 43                 
Correct output: -97                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 70                 
Correct output: -35                 | Program output: 56                 
Correct output: -42                 | Program output: 97                 
Correct output: -77                 | Program output: -66                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 34                 
Correct output: -100                | Program output: -59                
Correct output: -67                 | Program output: -23                
Correct output: -41                 | Program output: 18                 
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: 50                 
Correct output: 19                  | Program output: 58                 
Correct output: -5                  | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction tagged_603} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction print_exec} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_if (in4 integer_fromboolean integer_yank integer_fromboolean integer_dup_items print_integer tagged_2 exec_eq integer_stackdepth integer_add exec_while (boolean_or in1) in4 print_integer) (integer_dup integer_pop exec_flush exec_s_when_autoconstructing (exec_dup (exec_flush in2 integer_dup_items integer_gt boolean_empty exec_empty integer_mult exec_noop) print_newline) (exec_dup (integer_dec boolean_yankdup print_newline boolean_flush) in1 boolean_yank) (boolean_rot exec_eq) exec_swap (integer_pop integer_inc integer_pop integer_yankdup exec_while (integer_gt) boolean_invert_second_then_and integer_dec) (integer_mult) tagged_603 boolean_empty) integer_gte exec_do*count (exec_k_when_autoconstructing (integer_yank boolean_dup_times boolean_yankdup exec_flush) (exec_do*times (print_exec (exec_flush integer_dup_items integer_mult) boolean_dup_items integer_flush boolean_not exec_dup_times (boolean_dup integer_empty print_exec () integer_div exec_yankdup boolean_dup_items in4 exec_while (boolean_dup exec_k (integer_dec integer_lt exec_dup_items) (print_newline boolean_invert_first_then_and)))))))
Lexicase best errors: [1 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 104
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction tagged_603} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction print_exec} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_if (in4 integer_fromboolean integer_yank integer_fromboolean integer_dup_items print_integer tagged_2 exec_eq integer_stackdepth integer_add exec_while (boolean_or in1) in4 print_integer) (integer_dup integer_pop exec_flush exec_s_when_autoconstructing (exec_dup (exec_flush in2 integer_dup_items integer_gt boolean_empty exec_empty integer_mult exec_noop) print_newline) (exec_dup (integer_dec boolean_yankdup print_newline boolean_flush) in1 boolean_yank) (boolean_rot exec_eq) exec_swap (integer_pop integer_inc integer_pop integer_yankdup exec_while (integer_gt) boolean_invert_second_then_and integer_dec) (integer_mult) tagged_603 boolean_empty) integer_gte exec_do*count (exec_k_when_autoconstructing (integer_yank boolean_dup_times boolean_yankdup exec_flush) (exec_do*times (print_exec (exec_flush integer_dup_items integer_mult) boolean_dup_items integer_flush boolean_not exec_dup_times (boolean_dup integer_empty print_exec () integer_div exec_yankdup boolean_dup_items in4 exec_while (boolean_dup exec_k (integer_dec integer_lt exec_dup_items) (print_newline boolean_invert_first_then_and)))))))
Zero cases best errors: [1 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 104
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 83 81 82 82 300 635 303 295 82)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (79 83 81 82 82 300 635 303 295 82)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 2, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_529} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_pop integer_mult exec_dup_times (boolean_invert_first_then_and integer_dup) integer_swap integer_empty integer_fromboolean exec_stackdepth print_boolean in1 boolean_shove integer_max exec_dup_items in4 boolean_and boolean_empty print_integer exec_eq exec_while (exec_stackdepth integer_mod) boolean_dup_items integer_max exec_dup (boolean_and exec_flush) exec_do*range (integer_div boolean_invert_second_then_and boolean_eq) integer_fromboolean exec_yank tag_boolean_529 exec_yank boolean_dup boolean_empty boolean_dup exec_do*while (boolean_flush integer_stackdepth exec_yankdup exec_while (integer_lte integer_fromboolean exec_k (exec_do*count (print_boolean integer_mod print_exec (exec_stackdepth) in3) integer_empty boolean_xor in3 boolean_invert_second_then_and exec_do*range (boolean_dup_times integer_sub integer_max integer_empty) integer_mult exec_rot () (boolean_swap) (exec_noop integer_flush exec_rot (exec_pop (exec_swap (integer_mod boolean_invert_second_then_and integer_dup exec_s () (exec_k (exec_stackdepth) ()) ()) ())) () ())) ())))
Errors: [1 0 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 75
Size: 101
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.978
Median total errors in population: 9
Error averages by case: (0.921 0.917 0.919 0.918 0.918 0.7 0.365 0.697 0.705 0.918)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.652
Average program size in population (points): 79.448
Average percent parens in population: 0.262
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1414107
--- Timings ---
Current time: 1559593974816 milliseconds
Total Time:           6.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.2 seconds, 46.4%
Fitness Testing:      3.0 seconds, 43.9%
Report:               0.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 52                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 81                 
Correct output: 20                  | Program output: 33                 
Correct output: 26                  | Program output: 96                 
Correct output: 22                  | Program output: 45                 
Correct output: 11                  | Program output: 23                 
Correct output: 4                   | Program output: 37                 
Correct output: 8                   | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 48                 
Correct output: 38                  | Program output: 91                 
Correct output: 59                  | Program output: 86                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 75                 
Correct output: 9                   | Program output: 74                 
Correct output: 17                  | Program output: 64                 
Correct output: -79                 | Program output: 5                  
Correct output: -42                 | Program output: 39                 
Correct output: 4                   | Program output: 68                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: 56                 
Correct output: -13                 | Program output: 65                 
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -93                
Correct output: -67                 | Program output: -10                
Correct output: -50                 | Program output: 29                 
Correct output: -95                 | Program output: 8                  
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -50                
Correct output: -24                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -42                
Correct output: -96                 | Program output: 11                 
Correct output: -86                 | Program output: -52                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -46                
Correct output: -100                | Program output: 32                 
Correct output: -59                 | Program output: 22                 
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 43                 
Correct output: 60                  | Program output: 65                 
Correct output: -90                 | Program output: -48                
Correct output: -59                 | Program output: 38                 
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -77                
Correct output: -23                 | Program output: 65                 
Correct output: -37                 | Program output: 65                 
Correct output: -81                 | Program output: 43                 
Correct output: -97                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 70                 
Correct output: -35                 | Program output: 56                 
Correct output: -42                 | Program output: 97                 
Correct output: -77                 | Program output: -66                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 34                 
Correct output: -100                | Program output: -59                
Correct output: -67                 | Program output: -23                
Correct output: -41                 | Program output: 18                 
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: 50                 
Correct output: 19                  | Program output: 58                 
Correct output: -5                  | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_xor} {:close 2, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_654} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 1, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 2, :instruction print_boolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_pop integer_mult exec_pop (exec_dup_times (integer_add boolean_invert_first_then_and integer_dup) integer_fromboolean print_boolean boolean_shove integer_max boolean_invert_first_then_and boolean_xor) in4 boolean_and in3 boolean_empty integer_swap print_integer exec_eq tag_boolean_654 exec_while (in1 exec_stackdepth integer_mod) integer_sub integer_max exec_dup (boolean_eq) integer_swap exec_flush exec_noop exec_do*range (integer_div integer_yank tag_boolean_529 exec_s (exec_yank) (exec_do*range (boolean_dup exec_do*while (integer_yank boolean_flush exec_while () integer_stackdepth integer_fromboolean exec_yank) integer_fromboolean print_boolean print_newline) in3) (boolean_pop integer_empty boolean_xor in3 exec_do*times (boolean_invert_second_then_and boolean_dup_times boolean_frominteger integer_mult) print_boolean)) boolean_swap exec_noop integer_flush exec_rot (exec_pop (exec_swap (integer_mod boolean_invert_second_then_and integer_dup exec_s () (exec_stackdepth) ()) ())) () ())
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 94
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_xor} {:close 2, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_654} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 1, :instruction print_newline} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 2, :instruction print_boolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_pop integer_mult exec_pop (exec_dup_times (integer_add boolean_invert_first_then_and integer_dup) integer_fromboolean print_boolean boolean_shove integer_max boolean_invert_first_then_and boolean_xor) in4 boolean_and in3 boolean_empty integer_swap print_integer exec_eq tag_boolean_654 exec_while (in1 exec_stackdepth integer_mod) integer_sub integer_max exec_dup (boolean_eq) integer_swap exec_flush exec_noop exec_do*range (integer_div integer_yank tag_boolean_529 exec_s (exec_yank) (exec_do*range (boolean_dup exec_do*while (integer_yank boolean_flush exec_while () integer_stackdepth integer_fromboolean exec_yank) integer_fromboolean print_boolean print_newline) in3) (boolean_pop integer_empty boolean_xor in3 exec_do*times (boolean_invert_second_then_and boolean_dup_times boolean_frominteger integer_mult) print_boolean)) boolean_swap exec_noop integer_flush exec_rot (exec_pop (exec_swap (integer_mod boolean_invert_second_then_and integer_dup exec_s () (exec_stackdepth) ()) ())) () ())
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 94
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 244 248 4 240 628 247 620 245 4)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (247 244 248 4 240 628 247 620 245 4)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 2, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_exec} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup})
Best program: (integer_mult exec_dup_times (integer_lt integer_add boolean_invert_first_then_and integer_dup) integer_swap integer_empty exec_if (integer_fromboolean exec_stackdepth exec_yankdup print_boolean integer_max in4) () print_boolean boolean_and in3 boolean_dup_items boolean_empty print_integer exec_eq exec_while (integer_mod) exec_dup (boolean_and integer_mult exec_flush) exec_noop integer_flush exec_do*range (integer_div boolean_eq) integer_fromboolean exec_yank integer_fromboolean tag_boolean_529 exec_s (exec_do*while (boolean_flush exec_if () (integer_stackdepth exec_do*count () integer_lte integer_fromboolean boolean_not exec_shove (exec_k (exec_do*count (print_boolean integer_mod boolean_eq print_exec (in3) boolean_pop integer_empty exec_s (boolean_xor boolean_invert_second_then_and exec_dup (exec_do*range (boolean_dup_times integer_sub integer_max integer_empty) boolean_swap) exec_noop integer_flush exec_pop (exec_swap (integer_div integer_mod boolean_invert_second_then_and integer_dup exec_k (integer_lte exec_dup ()) ()) ())) () ())) ())))) () ())
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 77
Size: 107
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.273
Median total errors in population: 8
Error averages by case: (0.753 0.756 0.752 0.996 0.76 0.372 0.753 0.38 0.755 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.027
Average program size in population (points): 95.548
Average percent parens in population: 0.257
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1962646
--- Timings ---
Current time: 1559593977062 milliseconds
Total Time:           9.2 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.5 seconds, 49.4%
Fitness Testing:      3.7 seconds, 40.2%
Report:               0.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -34                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 45                 
Correct output: 32                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 41                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 73                 
Correct output: 26                  | Program output: 62                 
Correct output: 22                  | Program output: 99                 
Correct output: 11                  | Program output: 56                 
Correct output: 4                   | Program output: 79                 
Correct output: 8                   | Program output: 91                 
Correct output: 35                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 38                  | Program output: 42                 
Correct output: 59                  | Program output: 82                 
Correct output: 12                  | Program output: 46                 
Correct output: 48                  | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 58                 
Correct output: -79                 | Program output: -72                
Correct output: -42                 | Program output: -42                
Correct output: 4                   | Program output: 61                 
Correct output: -97                 | Program output: 19                 
Correct output: -100                | Program output: 80                 
Correct output: -93                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -12                
Correct output: -50                 | Program output: 86                 
Correct output: -13                 | Program output: 57                 
Correct output: -71                 | Program output: -26                
Correct output: -99                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -20                
Correct output: -95                 | Program output: 44                 
Correct output: -4                  | Program output: 6                  
Correct output: -97                 | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 95                 
Correct output: -70                 | Program output: 75                 
Correct output: -24                 | Program output: 37                 
Correct output: -60                 | Program output: -2                 
Correct output: -97                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 38                 
Correct output: -34                 | Program output: -34                
Correct output: -68                 | Program output: 62                 
Correct output: -100                | Program output: -100               
Correct output: -59                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -43                 | Program output: 4                  
Correct output: -66                 | Program output: 92                 
Correct output: 12                  | Program output: 17                 
Correct output: 60                  | Program output: 85                 
Correct output: -90                 | Program output: 49                 
Correct output: -59                 | Program output: -7                 
Correct output: -81                 | Program output: 33                 
Correct output: -83                 | Program output: 74                 
Correct output: -18                 | Program output: 53                 
Correct output: -83                 | Program output: 80                 
Correct output: -81                 | Program output: 68                 
Correct output: -23                 | Program output: 97                 
Correct output: -37                 | Program output: 17                 
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: 15                 
Correct output: -67                 | Program output: 59                 
Correct output: -8                  | Program output: 61                 
Correct output: -76                 | Program output: -76                
Correct output: -35                 | Program output: 72                 
Correct output: -42                 | Program output: -42                
Correct output: -77                 | Program output: 0                  
Correct output: -93                 | Program output: 67                 
Correct output: -85                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 19                 
Correct output: -41                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -38                
Correct output: 19                  | Program output: 63                 
Correct output: -5                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction -39} {:close 0, :instruction -40} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 1, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if})
Lexicase best program: (exec_if (in4 integer_fromboolean integer_dup_items integer_rot boolean_invert_second_then_and in1) (in3 print_integer) integer_max boolean_stackdepth integer_pop exec_flush exec_do*count (exec_dup (exec_shove (exec_flush integer_dup_items integer_swap exec_do*count (exec_empty boolean_dup_times -39) -40 boolean_yankdup exec_noop) in2) print_newline) integer_inc boolean_or exec_dup (boolean_yankdup exec_dup_times (print_newline boolean_flush) in1 integer_eq boolean_yank) print_newline boolean_rot exec_eq boolean_invert_first_then_and integer_pop exec_y_when_autoconstructing () exec_k_when_autoconstructing (integer_inc integer_dec) (integer_mult) integer_gte exec_s (exec_do*count (integer_yank boolean_pop boolean_invert_second_then_and) print_exec (exec_flush exec_swap (boolean_shove integer_mult) (exec_swap (print_newline) (boolean_dup_items print_exec (integer_flush boolean_not exec_yankdup) exec_dup_times (boolean_dup in4 boolean_shove exec_yankdup boolean_dup_items boolean_empty print_boolean exec_k_when_autoconstructing (exec_while (boolean_dup boolean_yank integer_dec integer_lt exec_dup_items) print_newline exec_if () ()) ()))))) () ())
Lexicase best errors: [1 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 111
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction -39} {:close 0, :instruction -40} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 1, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if})
Zero cases best program: (exec_if (in4 integer_fromboolean integer_dup_items integer_rot boolean_invert_second_then_and in1) (in3 print_integer) integer_max boolean_stackdepth integer_pop exec_flush exec_do*count (exec_dup (exec_shove (exec_flush integer_dup_items integer_swap exec_do*count (exec_empty boolean_dup_times -39) -40 boolean_yankdup exec_noop) in2) print_newline) integer_inc boolean_or exec_dup (boolean_yankdup exec_dup_times (print_newline boolean_flush) in1 integer_eq boolean_yank) print_newline boolean_rot exec_eq boolean_invert_first_then_and integer_pop exec_y_when_autoconstructing () exec_k_when_autoconstructing (integer_inc integer_dec) (integer_mult) integer_gte exec_s (exec_do*count (integer_yank boolean_pop boolean_invert_second_then_and) print_exec (exec_flush exec_swap (boolean_shove integer_mult) (exec_swap (print_newline) (boolean_dup_items print_exec (integer_flush boolean_not exec_yankdup) exec_dup_times (boolean_dup in4 boolean_shove exec_yankdup boolean_dup_items boolean_empty print_boolean exec_k_when_autoconstructing (exec_while (boolean_dup boolean_yank integer_dec integer_lt exec_dup_items) print_newline exec_if () ()) ()))))) () ())
Zero cases best errors: [1 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 111
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 604 275 276 272 110 111 204 601 110)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (8 604 275 276 272 110 111 204 601 110)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction tagged_2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 1, :instruction -39} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 1, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction tagged_48} {:close 0, :instruction exec_swap} {:close 1, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if})
Best program: (exec_if (in4 tagged_2 exec_eq integer_add exec_while (exec_if (in1) (in3 print_integer) boolean_stackdepth integer_pop exec_flush exec_do*count (exec_dup (integer_dup_items integer_gt boolean_empty -39) boolean_yankdup exec_noop) in2) print_newline) (integer_inc boolean_rot exec_dup (boolean_dup_times) boolean_yankdup boolean_flush) in1 boolean_rot exec_s (integer_stackdepth integer_div exec_eq) (exec_swap (integer_pop exec_k_when_autoconstructing (integer_inc integer_pop integer_gt) (integer_dec) integer_inc integer_mult) (exec_s (integer_lte exec_do*count (exec_k_when_autoconstructing (integer_yank boolean_pop exec_do*times (print_exec (tagged_48 exec_swap (print_newline) (in2 boolean_dup_items print_exec (boolean_not exec_dup_times (boolean_dup integer_empty exec_yankdup boolean_dup_items boolean_empty boolean_yankdup) print_boolean exec_k_when_autoconstructing (exec_while (boolean_dup integer_dec integer_lt exec_dup_items) exec_empty print_newline boolean_yankdup) (exec_if () ())))))) ())) () ())) ())
Errors: [1 0 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 77
Size: 110
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.429
Median total errors in population: 7
Error averages by case: (0.992 0.396 0.725 0.724 0.728 0.89 0.889 0.796 0.399 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.066
Average program size in population (points): 95.929
Average percent parens in population: 0.250
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2570270
--- Timings ---
Current time: 1559593979193 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.8 seconds, 50.7%
Fitness Testing:      4.4 seconds, 38.5%
Report:               1.1 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 618
Test mean error for best: 0.61800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: 81                 
Correct output: -53                 | Program output: -40                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 77                 
Correct output: 9                   | Program output: 96                 
Correct output: 32                  | Program output: 78                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 88                 
Correct output: 35                  | Program output: 82                 
Correct output: 11                  | Program output: 29                 
Correct output: 38                  | Program output: 63                 
Correct output: 59                  | Program output: 83                 
Correct output: 12                  | Program output: 57                 
Correct output: 48                  | Program output: 63                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -9                 
Correct output: 4                   | Program output: 19                 
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -56                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: 93                 
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -2                 
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -83                
Correct output: -4                  | Program output: 28                 
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 77                 
Correct output: -94                 | Program output: 69                 
Correct output: -70                 | Program output: -54                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -3                 
Correct output: -86                 | Program output: 71                 
Correct output: -34                 | Program output: 9                  
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: 9                  
Correct output: -61                 | Program output: 59                 
Correct output: -43                 | Program output: 54                 
Correct output: -66                 | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: 3                  
Correct output: -59                 | Program output: 6                  
Correct output: -81                 | Program output: 62                 
Correct output: -83                 | Program output: 44                 
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: 72                 
Correct output: -81                 | Program output: 12                 
Correct output: -97                 | Program output: -46                
Correct output: -67                 | Program output: 19                 
Correct output: -8                  | Program output: 35                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: 89                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -71                
Correct output: -67                 | Program output: -22                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 2, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_339} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 2, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_mod exec_do*count () in3 integer_lt print_integer boolean_yank exec_s_when_autoconstructing (exec_eq exec_empty boolean_yankdup in4) (boolean_dup integer_dup_items) () boolean_dup boolean_xor integer_mult integer_dup_times integer_gt exec_s () (boolean_yank tagged_339 boolean_swap boolean_invert_first_then_and in1 integer_gte boolean_dup integer_yank integer_div exec_y () in4 exec_k () () boolean_stackdepth exec_pop (exec_if (integer_gt integer_yankdup boolean_flush print_integer) (integer_gte boolean_dup_items exec_k (integer_lte) (boolean_empty integer_pop) exec_yankdup integer_pop print_exec () print_integer) boolean_empty integer_empty integer_dup_times boolean_not exec_dup_items integer_gte exec_y (exec_noop exec_swap (print_integer exec_k_when_autoconstructing (integer_dup_times exec_swap (integer_lte print_exec ()) (exec_when () exec_rot (integer_lte boolean_pop) () ())) ()) ()))) ())
Lexicase best errors: [1 1 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 96
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 2, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_339} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 2, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_mod exec_do*count () in3 integer_lt print_integer boolean_yank exec_s_when_autoconstructing (exec_eq exec_empty boolean_yankdup in4) (boolean_dup integer_dup_items) () boolean_dup boolean_xor integer_mult integer_dup_times integer_gt exec_s () (boolean_yank tagged_339 boolean_swap boolean_invert_first_then_and in1 integer_gte boolean_dup integer_yank integer_div exec_y () in4 exec_k () () boolean_stackdepth exec_pop (exec_if (integer_gt integer_yankdup boolean_flush print_integer) (integer_gte boolean_dup_items exec_k (integer_lte) (boolean_empty integer_pop) exec_yankdup integer_pop print_exec () print_integer) boolean_empty integer_empty integer_dup_times boolean_not exec_dup_items integer_gte exec_y (exec_noop exec_swap (print_integer exec_k_when_autoconstructing (integer_dup_times exec_swap (integer_lte print_exec ()) (exec_when () exec_rot (integer_lte boolean_pop) () ())) ()) ()))) ())
Zero cases best errors: [1 1 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 96
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (67 191 191 246 81 246 66 81 191 246)
Population mean number of elite cases: 1.61
Count of perfect (error zero) individuals by case: (67 191 191 246 81 246 66 81 191 246)
Population mean number of perfect (error zero) cases: 1.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction -18} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 2, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte})
Best program: (boolean_pop integer_mult exec_dup_times (exec_yank integer_add exec_shove (boolean_invert_first_then_and boolean_shove exec_shove (integer_empty) integer_fromboolean -18) boolean_shove integer_max in4) boolean_and boolean_swap in2 in3 exec_rot (boolean_empty) (integer_swap print_integer) (boolean_swap) boolean_shove exec_eq boolean_not integer_empty exec_stackdepth integer_mod integer_max exec_dup (integer_mod boolean_and exec_flush) exec_noop boolean_pop integer_flush boolean_yankdup boolean_stackdepth exec_yank tag_boolean_529 exec_s (exec_do*range (exec_do*while (integer_dup_items exec_y () integer_inc integer_lte integer_fromboolean print_boolean integer_mod boolean_or integer_pop boolean_pop integer_empty boolean_xor integer_dup_times in3 integer_inc) boolean_not integer_sub integer_max exec_rot () (exec_noop integer_sub integer_sub exec_yank) (exec_pop (boolean_invert_second_then_and integer_dup in1 boolean_eq exec_s () (exec_dup (integer_gte)) ())))) () ())
Errors: [1 0 0 1 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 76
Size: 98
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 8.394
Median total errors in population: 8
Error averages by case: (0.933 0.809 0.809 0.754 0.919 0.754 0.934 0.919 0.809 0.754)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.118
Average program size in population (points): 96.772
Average percent parens in population: 0.246
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3278235
--- Timings ---
Current time: 1559593981441 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.0 seconds, 51.5%
Fitness Testing:      5.1 seconds, 37.8%
Report:               1.4 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: 39                 
Correct output: -78                 | Program output: -12                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 26                 
Correct output: 32                  | Program output: 64                 
Correct output: 1                   | Program output: 90                 
Correct output: 9                   | Program output: 93                 
Correct output: 32                  | Program output: 95                 
Correct output: 17                  | Program output: 69                 
Correct output: 20                  | Program output: 44                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 84                 
Correct output: 11                  | Program output: 26                 
Correct output: 4                   | Program output: 77                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 70                 
Correct output: 11                  | Program output: 16                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -12                
Correct output: -42                 | Program output: -37                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: 48                 
Correct output: -100                | Program output: -65                
Correct output: -93                 | Program output: -91                
Correct output: -72                 | Program output: -28                
Correct output: -94                 | Program output: -19                
Correct output: -50                 | Program output: 99                 
Correct output: -13                 | Program output: 60                 
Correct output: -71                 | Program output: 43                 
Correct output: -99                 | Program output: 16                 
Correct output: -67                 | Program output: 18                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: 78                 
Correct output: -97                 | Program output: 18                 
Correct output: 7                   | Program output: 31                 
Correct output: -94                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 59                 
Correct output: -60                 | Program output: 54                 
Correct output: -97                 | Program output: 61                 
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -1                 
Correct output: -68                 | Program output: 49                 
Correct output: -100                | Program output: -33                
Correct output: -59                 | Program output: -40                
Correct output: -61                 | Program output: 94                 
Correct output: -43                 | Program output: -6                 
Correct output: -66                 | Program output: -50                
Correct output: 12                  | Program output: 15                 
Correct output: 60                  | Program output: 76                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: 17                 
Correct output: -83                 | Program output: -72                
Correct output: -81                 | Program output: -19                
Correct output: -23                 | Program output: 88                 
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: 14                 
Correct output: -8                  | Program output: 17                 
Correct output: -76                 | Program output: 53                 
Correct output: -35                 | Program output: 90                 
Correct output: -42                 | Program output: 67                 
Correct output: -77                 | Program output: 25                 
Correct output: -93                 | Program output: -22                
Correct output: -85                 | Program output: 83                 
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: 88                 
Correct output: -90                 | Program output: 93                 
Correct output: -74                 | Program output: -6                 
Correct output: 19                  | Program output: 25                 
Correct output: -5                  | Program output: 72                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction -39} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_251} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction 87} {:close 1, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction 97} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline})
Lexicase best program: (exec_if (integer_fromboolean exec_swap () (integer_yank exec_eq boolean_eq exec_while (in1) print_integer) boolean_empty) (boolean_stackdepth integer_pop exec_flush exec_shove (integer_stackdepth) print_exec () exec_s (integer_mod integer_empty integer_gt boolean_empty boolean_xor exec_dup (exec_empty -39) exec_noop) (integer_inc integer_inc exec_dup (integer_dec boolean_yankdup integer_div in1 boolean_flush) boolean_rot integer_dup exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div integer_inc tag_boolean_251 integer_pop integer_yankdup exec_dup () exec_while (integer_gt) print_exec (boolean_invert_second_then_and integer_dec) boolean_empty) (integer_gte boolean_dup_items exec_do*count (exec_k_when_autoconstructing (integer_inc) (integer_yank boolean_dup_times integer_empty exec_do*times (exec_pop (exec_flush boolean_dup integer_dec 87 exec_do*times () print_newline) boolean_dup_items boolean_not exec_dup_items integer_empty integer_mod exec_while (exec_yankdup integer_stackdepth) boolean_not) 97 boolean_dup_items exec_swap (boolean_empty print_boolean exec_while (integer_lt print_newline)) ()))) ()) ()) ()))
Lexicase best errors: [1 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 115
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction -39} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_251} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction 87} {:close 1, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction 97} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline})
Zero cases best program: (exec_if (integer_fromboolean exec_swap () (integer_yank exec_eq boolean_eq exec_while (in1) print_integer) boolean_empty) (boolean_stackdepth integer_pop exec_flush exec_shove (integer_stackdepth) print_exec () exec_s (integer_mod integer_empty integer_gt boolean_empty boolean_xor exec_dup (exec_empty -39) exec_noop) (integer_inc integer_inc exec_dup (integer_dec boolean_yankdup integer_div in1 boolean_flush) boolean_rot integer_dup exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div integer_inc tag_boolean_251 integer_pop integer_yankdup exec_dup () exec_while (integer_gt) print_exec (boolean_invert_second_then_and integer_dec) boolean_empty) (integer_gte boolean_dup_items exec_do*count (exec_k_when_autoconstructing (integer_inc) (integer_yank boolean_dup_times integer_empty exec_do*times (exec_pop (exec_flush boolean_dup integer_dec 87 exec_do*times () print_newline) boolean_dup_items boolean_not exec_dup_items integer_empty integer_mod exec_while (exec_yankdup integer_stackdepth) boolean_not) 97 boolean_dup_items exec_swap (boolean_empty print_boolean exec_while (integer_lt print_newline)) ()))) ()) ()) ()))
Zero cases best errors: [1 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 115
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 110 107 155 154 108 461 201 107 107)
Population mean number of elite cases: 1.72
Count of perfect (error zero) individuals by case: (205 110 107 155 154 108 461 201 107 107)
Population mean number of perfect (error zero) cases: 1.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction tagged_943} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction print_boolean} {:close 2, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_gte exec_if (in4 exec_dup () integer_fromboolean integer_yank integer_fromboolean exec_eq integer_add boolean_invert_first_then_and integer_inc in1) (print_integer) integer_pop exec_flush exec_do*count (exec_s_when_autoconstructing (boolean_dup_times in2 integer_dup_items boolean_empty exec_empty integer_rot integer_yank print_newline) (integer_inc exec_dup (exec_noop) integer_dec boolean_yankdup boolean_not integer_empty) (in1 in4 boolean_rot exec_eq) exec_swap (integer_pop integer_inc integer_pop integer_yankdup exec_rot (print_newline integer_gt) (integer_dec) (integer_mult) integer_mod) (boolean_empty) integer_empty exec_do*count (tagged_943) exec_k_when_autoconstructing (integer_yank integer_yank boolean_dup_times boolean_dup boolean_pop exec_do*times (print_exec (exec_flush integer_mult) boolean_dup_items integer_flush boolean_not integer_dup exec_dup_times (boolean_dup integer_empty integer_sub print_boolean)) in2) () integer_div exec_yankdup boolean_dup_items boolean_empty integer_div exec_do*range (print_newline boolean_invert_first_then_and)))
Errors: [1 0 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 79
Size: 100
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 8.285
Median total errors in population: 10
Error averages by case: (0.795 0.89 0.893 0.845 0.846 0.892 0.539 0.799 0.893 0.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.643
Average program size in population (points): 99.004
Average percent parens in population: 0.248
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3923574
--- Timings ---
Current time: 1559593983688 milliseconds
Total Time:          15.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.3 seconds, 52.4%
Fitness Testing:      5.8 seconds, 36.4%
Report:               1.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -34                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 45                 
Correct output: 32                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 41                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 73                 
Correct output: 26                  | Program output: 62                 
Correct output: 22                  | Program output: 99                 
Correct output: 11                  | Program output: 56                 
Correct output: 4                   | Program output: 79                 
Correct output: 8                   | Program output: 91                 
Correct output: 35                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 38                  | Program output: 42                 
Correct output: 59                  | Program output: 82                 
Correct output: 12                  | Program output: 46                 
Correct output: 48                  | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 58                 
Correct output: -79                 | Program output: -72                
Correct output: -42                 | Program output: -42                
Correct output: 4                   | Program output: 61                 
Correct output: -97                 | Program output: 19                 
Correct output: -100                | Program output: 80                 
Correct output: -93                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -12                
Correct output: -50                 | Program output: 86                 
Correct output: -13                 | Program output: 57                 
Correct output: -71                 | Program output: -26                
Correct output: -99                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -20                
Correct output: -95                 | Program output: 44                 
Correct output: -4                  | Program output: 6                  
Correct output: -97                 | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: 95                 
Correct output: -70                 | Program output: 75                 
Correct output: -24                 | Program output: 37                 
Correct output: -60                 | Program output: -2                 
Correct output: -97                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 38                 
Correct output: -34                 | Program output: -34                
Correct output: -68                 | Program output: 62                 
Correct output: -100                | Program output: -100               
Correct output: -59                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -43                 | Program output: 4                  
Correct output: -66                 | Program output: 92                 
Correct output: 12                  | Program output: 17                 
Correct output: 60                  | Program output: 85                 
Correct output: -90                 | Program output: 49                 
Correct output: -59                 | Program output: -7                 
Correct output: -81                 | Program output: 33                 
Correct output: -83                 | Program output: 74                 
Correct output: -18                 | Program output: 53                 
Correct output: -83                 | Program output: 80                 
Correct output: -81                 | Program output: 68                 
Correct output: -23                 | Program output: 97                 
Correct output: -37                 | Program output: 17                 
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: 15                 
Correct output: -67                 | Program output: 59                 
Correct output: -8                  | Program output: 61                 
Correct output: -76                 | Program output: -76                
Correct output: -35                 | Program output: 72                 
Correct output: -42                 | Program output: -42                
Correct output: -77                 | Program output: 0                  
Correct output: -93                 | Program output: 67                 
Correct output: -85                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 19                 
Correct output: -41                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -38                
Correct output: 19                  | Program output: 63                 
Correct output: -5                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_268} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_gt} {:close 0, :instruction 62})
Lexicase best program: (integer_mod in3 print_integer exec_pop () boolean_yank exec_eq boolean_and exec_k_when_autoconstructing (exec_do*while (exec_empty exec_flush boolean_yankdup integer_empty exec_k_when_autoconstructing (boolean_dup exec_k_when_autoconstructing (integer_lt boolean_xor) (integer_mult exec_rot (exec_when (integer_dup_times integer_gt exec_dup_items integer_gte exec_s () (in4) (boolean_invert_first_then_and in4) exec_k (integer_gte integer_lte integer_min) (integer_lte exec_dup_times (integer_fromboolean integer_div tag_integer_268 boolean_flush exec_y () in4 exec_dup () boolean_or exec_pop (in1 integer_shove) exec_k_when_autoconstructing (integer_mult boolean_flush exec_noop exec_empty integer_yankdup boolean_shove integer_gte integer_pop print_integer) (boolean_xor integer_shove integer_add exec_do*count (integer_dup_times boolean_not exec_eq exec_yankdup boolean_invert_first_then_and boolean_yank integer_shove integer_dec exec_dup_items exec_swap (exec_swap (boolean_stackdepth exec_when () integer_shove in2) (exec_s () (integer_lte integer_gt) (62))) ())))))) () ())) ())) ())
Lexicase best errors: [1 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 112
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_268} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_gt} {:close 0, :instruction 62})
Zero cases best program: (integer_mod in3 print_integer exec_pop () boolean_yank exec_eq boolean_and exec_k_when_autoconstructing (exec_do*while (exec_empty exec_flush boolean_yankdup integer_empty exec_k_when_autoconstructing (boolean_dup exec_k_when_autoconstructing (integer_lt boolean_xor) (integer_mult exec_rot (exec_when (integer_dup_times integer_gt exec_dup_items integer_gte exec_s () (in4) (boolean_invert_first_then_and in4) exec_k (integer_gte integer_lte integer_min) (integer_lte exec_dup_times (integer_fromboolean integer_div tag_integer_268 boolean_flush exec_y () in4 exec_dup () boolean_or exec_pop (in1 integer_shove) exec_k_when_autoconstructing (integer_mult boolean_flush exec_noop exec_empty integer_yankdup boolean_shove integer_gte integer_pop print_integer) (boolean_xor integer_shove integer_add exec_do*count (integer_dup_times boolean_not exec_eq exec_yankdup boolean_invert_first_then_and boolean_yank integer_shove integer_dec exec_dup_items exec_swap (exec_swap (boolean_stackdepth exec_when () integer_shove in2) (exec_s () (integer_lte integer_gt) (62))) ())))))) () ())) ())) ())
Zero cases best errors: [1 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 112
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (17 16 312 148 151 148 609 149 604 478)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (17 16 312 148 151 148 609 149 604 478)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction 46} {:close 0, :instruction tag_integer_186} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_rot})
Best program: (integer_mod integer_sub in3 print_integer integer_dup integer_dup_times exec_empty boolean_swap exec_dup_items exec_noop exec_rot (exec_s_when_autoconstructing (integer_swap integer_lt 46) (tag_integer_186 exec_y (exec_do*times (exec_do*while (integer_yankdup boolean_not integer_stackdepth boolean_frominteger integer_rot)))) ()) () ())
Errors: [1 1 1 0 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.368
Median total errors in population: 8
Error averages by case: (0.983 0.984 0.688 0.852 0.849 0.852 0.391 0.851 0.396 0.522)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.668
Average program size in population (points): 100.96
Average percent parens in population: 0.241
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4473827
--- Timings ---
Current time: 1559593986258 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.5 seconds, 53.2%
Fitness Testing:      6.3 seconds, 35.5%
Report:               1.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 77                 
Correct output: 9                   | Program output: 93                 
Correct output: 32                  | Program output: 78                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 70                 
Correct output: 11                  | Program output: 16                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -37                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -91                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -2                 
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: 28                 
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 31                 
Correct output: -94                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -1                 
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: -40                
Correct output: -61                 | Program output: 59                 
Correct output: -43                 | Program output: -6                 
Correct output: -66                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: 14                 
Correct output: -8                  | Program output: 17                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_540} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Lexicase best program: (boolean_flush in2 integer_eq integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer integer_lt exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_gt integer_div boolean_eq) integer_fromboolean integer_lte) (tag_boolean_529 exec_s (exec_yank) (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_fromboolean exec_do*count (print_boolean integer_mod tag_boolean_554 print_exec (integer_pop exec_stackdepth) in3) boolean_pop integer_empty boolean_invert_second_then_and exec_dup_times (tagged_540 boolean_and integer_max exec_y () exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (exec_noop boolean_and) exec_dup (integer_flush exec_rot (integer_pop exec_swap (exec_rot (integer_dup exec_s () (exec_y ()) ()) () ()) ()) () ())))) ()))))
Lexicase best errors: [0 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 100
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_540} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Zero cases best program: (boolean_flush in2 integer_eq integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer integer_lt exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_gt integer_div boolean_eq) integer_fromboolean integer_lte) (tag_boolean_529 exec_s (exec_yank) (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_fromboolean exec_do*count (print_boolean integer_mod tag_boolean_554 print_exec (integer_pop exec_stackdepth) in3) boolean_pop integer_empty boolean_invert_second_then_and exec_dup_times (tagged_540 boolean_and integer_max exec_y () exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (exec_noop boolean_and) exec_dup (integer_flush exec_rot (integer_pop exec_swap (exec_rot (integer_dup exec_s () (exec_y ()) ()) () ()) ()) () ())))) ()))))
Zero cases best errors: [0 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 100
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (674 102 141 14 14 100 173 378 175 15)
Population mean number of elite cases: 1.79
Count of perfect (error zero) individuals by case: (674 102 141 14 14 100 173 378 175 15)
Population mean number of perfect (error zero) cases: 1.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_540} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Best program: (boolean_flush in2 integer_eq integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer integer_lt exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_gt integer_div boolean_eq) integer_fromboolean integer_lte) (tag_boolean_529 exec_s (exec_yank) (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_fromboolean exec_do*count (print_boolean integer_mod tag_boolean_554 print_exec (integer_pop exec_stackdepth) in3) boolean_pop integer_empty boolean_invert_second_then_and exec_dup_times (tagged_540 boolean_and integer_max exec_y () exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (exec_noop boolean_and) exec_dup (integer_flush exec_rot (integer_pop exec_swap (exec_rot (integer_dup exec_s () (exec_y ()) ()) () ()) ()) () ())))) ()))))
Errors: [0 0 1 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 65
Size: 100
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 8.214
Median total errors in population: 8
Error averages by case: (0.326 0.898 0.859 0.986 0.986 0.9 0.827 0.622 0.825 0.985)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.45
Average program size in population (points): 86.837
Average percent parens in population: 0.250
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5022345
--- Timings ---
Current time: 1559593988272 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.7 seconds, 52.5%
Fitness Testing:      6.9 seconds, 33.7%
Report:               2.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 41                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 70                 
Correct output: 11                  | Program output: 11                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: 6                  
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -34                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -59                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -43                 | Program output: -6                 
Correct output: -66                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: 14                 
Correct output: -8                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_540} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Lexicase best program: (boolean_flush in2 integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer integer_lt exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_gt boolean_frominteger integer_div boolean_eq) integer_fromboolean integer_lte) (tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_fromboolean print_boolean integer_mod tag_boolean_554 print_exec (integer_pop exec_stackdepth) in3) integer_empty in2) (boolean_invert_second_then_and tagged_540 boolean_and integer_max exec_y () exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (exec_noop boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (integer_dup exec_s () (exec_y ()) ()) () ()) ())))))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 96
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_540} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Zero cases best program: (boolean_flush in2 integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer integer_lt exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_gt boolean_frominteger integer_div boolean_eq) integer_fromboolean integer_lte) (tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_fromboolean print_boolean integer_mod tag_boolean_554 print_exec (integer_pop exec_stackdepth) in3) integer_empty in2) (boolean_invert_second_then_and tagged_540 boolean_and integer_max exec_y () exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (exec_noop boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (integer_dup exec_s () (exec_y ()) ()) () ()) ())))))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 96
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 248 521 43 302 253 257 181 260 43)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (294 248 521 43 302 253 257 181 260 43)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_540} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Best program: (boolean_flush in2 integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer integer_lt exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_gt boolean_frominteger integer_div boolean_eq) integer_fromboolean integer_lte) (tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_fromboolean print_boolean integer_mod tag_boolean_554 print_exec (integer_pop exec_stackdepth) in3) integer_empty in2) (boolean_invert_second_then_and tagged_540 boolean_and integer_max exec_y () exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (exec_noop boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (integer_dup exec_s () (exec_y ()) ()) () ()) ())))))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 96
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 7.598
Median total errors in population: 8
Error averages by case: (0.706 0.752 0.479 0.957 0.698 0.747 0.743 0.819 0.74 0.957)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.42
Average program size in population (points): 98.713
Average percent parens in population: 0.297
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5391119
--- Timings ---
Current time: 1559593990177 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.0 seconds, 53.6%
Fitness Testing:      7.3 seconds, 32.7%
Report:               3.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 234
Test mean error for best: 0.23400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 52                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 45                 
Correct output: 11                  | Program output: 23                 
Correct output: 4                   | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -72                
Correct output: -42                 | Program output: -42                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: 56                 
Correct output: -13                 | Program output: 57                 
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -93                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -34                
Correct output: -68                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -59                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 15                 
Correct output: 60                  | Program output: 65                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -77                
Correct output: -23                 | Program output: 65                 
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -35                 | Program output: 56                 
Correct output: -42                 | Program output: -42                
Correct output: -77                 | Program output: -66                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -38                
Correct output: 19                  | Program output: 25                 
Correct output: -5                  | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_540} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Lexicase best program: (boolean_flush in2 integer_eq in3 in4 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer integer_lt boolean_stackdepth exec_eq exec_if () (exec_while (exec_k (exec_dup (integer_gt integer_div boolean_eq) integer_fromboolean integer_lte) (exec_if (tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_fromboolean print_boolean integer_mod tag_boolean_554 print_exec (exec_stackdepth) in3) integer_empty in2) (exec_pop (boolean_invert_second_then_and tagged_540 boolean_and integer_max integer_swap exec_y () integer_empty) exec_rot () (exec_noop boolean_and) (exec_dup (integer_flush boolean_frominteger) integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ()))))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 95
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_540} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Zero cases best program: (boolean_flush in2 integer_eq in3 in4 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer integer_lt boolean_stackdepth exec_eq exec_if () (exec_while (exec_k (exec_dup (integer_gt integer_div boolean_eq) integer_fromboolean integer_lte) (exec_if (tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_fromboolean print_boolean integer_mod tag_boolean_554 print_exec (exec_stackdepth) in3) integer_empty in2) (exec_pop (boolean_invert_second_then_and tagged_540 boolean_and integer_max integer_swap exec_y () integer_empty) exec_rot () (exec_noop boolean_and) (exec_dup (integer_flush boolean_frominteger) integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ()))))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 95
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 86 344 382 416 377 382 82 416 668)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (383 86 344 382 416 377 382 82 416 668)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_540} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Best program: (boolean_flush in2 integer_eq in3 in4 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer integer_lt boolean_stackdepth exec_eq exec_if () (exec_while (exec_k (exec_dup (integer_gt integer_div boolean_eq) integer_fromboolean integer_lte) (exec_if (tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_fromboolean print_boolean integer_mod tag_boolean_554 print_exec (exec_stackdepth) in3) integer_empty in2) (exec_pop (boolean_invert_second_then_and tagged_540 boolean_and integer_max integer_swap exec_y () integer_empty) exec_rot () (exec_noop boolean_and) (exec_dup (integer_flush boolean_frominteger) integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ()))))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 64
Size: 95
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 6.464
Median total errors in population: 7
Error averages by case: (0.617 0.914 0.656 0.618 0.584 0.623 0.618 0.918 0.584 0.332)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.107
Average program size in population (points): 96.847
Average percent parens in population: 0.307
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5725813
--- Timings ---
Current time: 1559593992074 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.2 seconds, 54.4%
Fitness Testing:      7.7 seconds, 31.8%
Report:               3.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 204
Test mean error for best: 0.20400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 41                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 70                 
Correct output: 11                  | Program output: 11                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: 6                  
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -34                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -59                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -43                 | Program output: -6                 
Correct output: -66                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: 14                 
Correct output: -8                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y})
Lexicase best program: (boolean_flush in2 integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and print_integer integer_lt exec_eq boolean_empty exec_if () (exec_while (exec_do*while (exec_k (exec_dup (integer_gt boolean_frominteger integer_div boolean_eq) integer_fromboolean integer_lt) (tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_y_when_autoconstructing (exec_if () () in3 exec_yankdup integer_mult integer_lte integer_fromboolean print_boolean integer_mod tag_boolean_554 print_exec (integer_pop integer_dup_items in3) integer_empty in2) boolean_invert_second_then_and boolean_and boolean_and exec_pop (integer_max exec_y () exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (exec_noop boolean_invert_first_then_and)) in2 boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_empty integer_dup integer_eq exec_y ()) () ()) ()))) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 100
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y})
Zero cases best program: (boolean_flush in2 integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and print_integer integer_lt exec_eq boolean_empty exec_if () (exec_while (exec_do*while (exec_k (exec_dup (integer_gt boolean_frominteger integer_div boolean_eq) integer_fromboolean integer_lt) (tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_y_when_autoconstructing (exec_if () () in3 exec_yankdup integer_mult integer_lte integer_fromboolean print_boolean integer_mod tag_boolean_554 print_exec (integer_pop integer_dup_items in3) integer_empty in2) boolean_invert_second_then_and boolean_and boolean_and exec_pop (integer_max exec_y () exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (exec_noop boolean_invert_first_then_and)) in2 boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_empty integer_dup integer_eq exec_y ()) () ()) ()))) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 100
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (492 407 384 226 605 350 641 455 330 205)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (492 407 384 226 605 350 641 455 330 205)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_boolean_554} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_540} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y})
Best program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 65
Size: 96
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 5.905
Median total errors in population: 7
Error averages by case: (0.508 0.593 0.616 0.774 0.395 0.65 0.359 0.545 0.67 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.438
Average program size in population (points): 94.737
Average percent parens in population: 0.319
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.331
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6072586
--- Timings ---
Current time: 1559593993975 milliseconds
Total Time:          26.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.4 seconds, 55.0%
Fitness Testing:      8.1 seconds, 31.1%
Report:               3.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 11
Successful program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 96


Auto-simplifying with starting size: 96
step: 0
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 500
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 1000
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 1500
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 2000
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 2500
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 3000
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 3500
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 4000
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 4500
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 5000
program: (boolean_flush in2 integer_eq integer_eq in3 integer_stackdepth in1 integer_swap exec_dup_items integer_min boolean_and boolean_empty print_integer exec_eq exec_if () (exec_while (exec_k (exec_stackdepth exec_dup (integer_pop integer_gt boolean_frominteger integer_lte integer_div boolean_eq) integer_fromboolean exec_do*while (integer_lte) tag_boolean_529 exec_s (exec_yank) (exec_y_when_autoconstructing (exec_if () () boolean_yank in3 exec_yankdup integer_mult integer_lte integer_mod integer_dec tag_boolean_554 boolean_invert_second_then_and print_exec (integer_pop exec_stackdepth) integer_dup_items) in3) (integer_empty in2) boolean_invert_second_then_and tagged_540 integer_max exec_s_when_autoconstructing () (boolean_swap integer_empty) (exec_rot () (boolean_swap) (boolean_and) exec_dup (integer_flush integer_pop exec_swap (exec_rot (exec_s () (exec_y ()) ()) () ()) ()))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 204
Test mean error for best: 0.20400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 41                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 70                 
Correct output: 11                  | Program output: 11                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: 6                  
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -34                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -59                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -43                 | Program output: -6                 
Correct output: -66                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: 14                 
Correct output: -8                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
