Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[56 7 56 56] 7] [[36 99 99 99] 36] [[94 50 94 94] 50] [[-100 -100 -82 -100] -100] [[72 81 72 72] 72] [[-44 -44 100 -44] -44] [[-91 -91 -91 -80] -91] [[41 82 41 41] 41] [[-42 -61 -42 -42] -61] [[-48 57 57 57] -48] [(59 59 59 59) 59] [(-76 -76 -76 -76) -76] [(83 83 83 83) 83] [(-73 -73 -73 -73) -73] [(-26 -26 -26 -26) -26] [(48 81 5 69) 5] [(25 6 50 21) 6] [(59 51 51 55) 51] [(13 38 11 58) 11] [(35 44 1 87) 1] [(60 22 12 100) 12] [(93 39 11 15) 11] [(58 77 58 99) 58] [(37 28 20 73) 20] [(48 59 32 55) 32] [(94 32 5 80) 5] [(33 97 17 57) 17] [(13 70 63 90) 13] [(29 86 87 6) 6] [(67 90 21 41) 21] [(30 28 86 82) 28] [(3 56 32 64) 3] [(53 67 59 12) 12] [(51 44 10 11) 10] [(53 9 29 5) 5] [(-20 77 -86 39) -86] [(22 1 52 -6) -6] [(58 -27 -47 57) -47] [(99 -19 24 60) -19] [(99 80 -42 54) -42] [(-2 49 -33 35) -33] [(-24 -86 -71 -47) -86] [(23 -37 -93 78) -93] [(54 -13 -55 -69) -69] [(-61 -6 86 17) -61] [(95 28 48 -94) -94] [(-95 22 69 -2) -95] [(93 69 98 -100) -100] [(56 -43 -21 40) -43] [(82 -40 -35 -82) -82] [(-9 -81 -5 3) -81] [(77 -73 45 19) -73] [(16 -70 -11 -89) -89] [(-78 -16 -14 -98) -98] [(-91 -27 71 -63) -91] [(-57 -97 -18 -52) -97] [(11 74 -95 -15) -95] [(-35 64 -70 -32) -70] [(-27 18 60 54) -27] [(82 -99 80 -24) -99] [(-86 76 22 -25) -86] [(84 80 -30 96) -30] [(-81 -60 -98 61) -98] [(-32 96 78 83) -32] [(39 11 -71 99) -71] [(-100 26 86 84) -100] [(3 -13 52 -90) -90] [(95 70 -96 -52) -96] [(-87 14 5 -95) -95] [(-19 62 -81 -34) -81] [(-11 10 -49 75) -49] [(-41 -29 67 -83) -83] [(68 -26 -51 47) -51] [(44 27 70 -85) -85] [(59 -36 -32 81) -36] [(-24 30 -75 -36) -75] [(-80 43 -76 -92) -92] [(-20 -53 -8 -26) -53] [(-94 60 -55 77) -94] [(-5 28 -2 80) -5] [(-28 -66 -47 -23) -66] [(55 -36 98 -27) -36] [(80 56 73 -85) -85] [(-38 50 -53 51) -53] [(-55 42 32 -41) -55] [(-48 73 2 74) -48] [(95 -86 -35 62) -86] [(48 -73 45 89) -73] [(-73 -79 50 27) -79] [(-83 -53 -44 25) -83] [(12 82 -33 -21) -33] [(91 -65 38 -11) -65] [(-50 -64 -93 -10) -93] [(-21 -46 15 14) -46] [(50 95 93 -68) -68])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[56 7 56 56] 7]
Train Case:   6 | Input/Output: [[36 99 99 99] 36]
Train Case:   7 | Input/Output: [[94 50 94 94] 50]
Train Case:   8 | Input/Output: [[-100 -100 -82 -100] -100]
Train Case:   9 | Input/Output: [[72 81 72 72] 72]
Train Case:  10 | Input/Output: [[-44 -44 100 -44] -44]
Train Case:  11 | Input/Output: [[-91 -91 -91 -80] -91]
Train Case:  12 | Input/Output: [[41 82 41 41] 41]
Train Case:  13 | Input/Output: [[-42 -61 -42 -42] -61]
Train Case:  14 | Input/Output: [[-48 57 57 57] -48]
Train Case:  15 | Input/Output: [(59 59 59 59) 59]
Train Case:  16 | Input/Output: [(-76 -76 -76 -76) -76]
Train Case:  17 | Input/Output: [(83 83 83 83) 83]
Train Case:  18 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  19 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  20 | Input/Output: [(48 81 5 69) 5]
Train Case:  21 | Input/Output: [(25 6 50 21) 6]
Train Case:  22 | Input/Output: [(59 51 51 55) 51]
Train Case:  23 | Input/Output: [(13 38 11 58) 11]
Train Case:  24 | Input/Output: [(35 44 1 87) 1]
Train Case:  25 | Input/Output: [(60 22 12 100) 12]
Train Case:  26 | Input/Output: [(93 39 11 15) 11]
Train Case:  27 | Input/Output: [(58 77 58 99) 58]
Train Case:  28 | Input/Output: [(37 28 20 73) 20]
Train Case:  29 | Input/Output: [(48 59 32 55) 32]
Train Case:  30 | Input/Output: [(94 32 5 80) 5]
Train Case:  31 | Input/Output: [(33 97 17 57) 17]
Train Case:  32 | Input/Output: [(13 70 63 90) 13]
Train Case:  33 | Input/Output: [(29 86 87 6) 6]
Train Case:  34 | Input/Output: [(67 90 21 41) 21]
Train Case:  35 | Input/Output: [(30 28 86 82) 28]
Train Case:  36 | Input/Output: [(3 56 32 64) 3]
Train Case:  37 | Input/Output: [(53 67 59 12) 12]
Train Case:  38 | Input/Output: [(51 44 10 11) 10]
Train Case:  39 | Input/Output: [(53 9 29 5) 5]
Train Case:  40 | Input/Output: [(-20 77 -86 39) -86]
Train Case:  41 | Input/Output: [(22 1 52 -6) -6]
Train Case:  42 | Input/Output: [(58 -27 -47 57) -47]
Train Case:  43 | Input/Output: [(99 -19 24 60) -19]
Train Case:  44 | Input/Output: [(99 80 -42 54) -42]
Train Case:  45 | Input/Output: [(-2 49 -33 35) -33]
Train Case:  46 | Input/Output: [(-24 -86 -71 -47) -86]
Train Case:  47 | Input/Output: [(23 -37 -93 78) -93]
Train Case:  48 | Input/Output: [(54 -13 -55 -69) -69]
Train Case:  49 | Input/Output: [(-61 -6 86 17) -61]
Train Case:  50 | Input/Output: [(95 28 48 -94) -94]
Train Case:  51 | Input/Output: [(-95 22 69 -2) -95]
Train Case:  52 | Input/Output: [(93 69 98 -100) -100]
Train Case:  53 | Input/Output: [(56 -43 -21 40) -43]
Train Case:  54 | Input/Output: [(82 -40 -35 -82) -82]
Train Case:  55 | Input/Output: [(-9 -81 -5 3) -81]
Train Case:  56 | Input/Output: [(77 -73 45 19) -73]
Train Case:  57 | Input/Output: [(16 -70 -11 -89) -89]
Train Case:  58 | Input/Output: [(-78 -16 -14 -98) -98]
Train Case:  59 | Input/Output: [(-91 -27 71 -63) -91]
Train Case:  60 | Input/Output: [(-57 -97 -18 -52) -97]
Train Case:  61 | Input/Output: [(11 74 -95 -15) -95]
Train Case:  62 | Input/Output: [(-35 64 -70 -32) -70]
Train Case:  63 | Input/Output: [(-27 18 60 54) -27]
Train Case:  64 | Input/Output: [(82 -99 80 -24) -99]
Train Case:  65 | Input/Output: [(-86 76 22 -25) -86]
Train Case:  66 | Input/Output: [(84 80 -30 96) -30]
Train Case:  67 | Input/Output: [(-81 -60 -98 61) -98]
Train Case:  68 | Input/Output: [(-32 96 78 83) -32]
Train Case:  69 | Input/Output: [(39 11 -71 99) -71]
Train Case:  70 | Input/Output: [(-100 26 86 84) -100]
Train Case:  71 | Input/Output: [(3 -13 52 -90) -90]
Train Case:  72 | Input/Output: [(95 70 -96 -52) -96]
Train Case:  73 | Input/Output: [(-87 14 5 -95) -95]
Train Case:  74 | Input/Output: [(-19 62 -81 -34) -81]
Train Case:  75 | Input/Output: [(-11 10 -49 75) -49]
Train Case:  76 | Input/Output: [(-41 -29 67 -83) -83]
Train Case:  77 | Input/Output: [(68 -26 -51 47) -51]
Train Case:  78 | Input/Output: [(44 27 70 -85) -85]
Train Case:  79 | Input/Output: [(59 -36 -32 81) -36]
Train Case:  80 | Input/Output: [(-24 30 -75 -36) -75]
Train Case:  81 | Input/Output: [(-80 43 -76 -92) -92]
Train Case:  82 | Input/Output: [(-20 -53 -8 -26) -53]
Train Case:  83 | Input/Output: [(-94 60 -55 77) -94]
Train Case:  84 | Input/Output: [(-5 28 -2 80) -5]
Train Case:  85 | Input/Output: [(-28 -66 -47 -23) -66]
Train Case:  86 | Input/Output: [(55 -36 98 -27) -36]
Train Case:  87 | Input/Output: [(80 56 73 -85) -85]
Train Case:  88 | Input/Output: [(-38 50 -53 51) -53]
Train Case:  89 | Input/Output: [(-55 42 32 -41) -55]
Train Case:  90 | Input/Output: [(-48 73 2 74) -48]
Train Case:  91 | Input/Output: [(95 -86 -35 62) -86]
Train Case:  92 | Input/Output: [(48 -73 45 89) -73]
Train Case:  93 | Input/Output: [(-73 -79 50 27) -79]
Train Case:  94 | Input/Output: [(-83 -53 -44 25) -83]
Train Case:  95 | Input/Output: [(12 82 -33 -21) -33]
Train Case:  96 | Input/Output: [(91 -65 38 -11) -65]
Train Case:  97 | Input/Output: [(-50 -64 -93 -10) -93]
Train Case:  98 | Input/Output: [(-21 -46 15 14) -46]
Train Case:  99 | Input/Output: [(50 95 93 -68) -68]
Test Case:   0 | Input/Output: [[89 89 -35 89] -35]
Test Case:   1 | Input/Output: [[-90 -90 -90 -100] -100]
Test Case:   2 | Input/Output: [[-86 -86 -86 19] -86]
Test Case:   3 | Input/Output: [[15 15 17 15] 15]
Test Case:   4 | Input/Output: [[-79 -79 -39 -79] -79]
Test Case:   5 | Input/Output: [[89 -4 89 89] -4]
Test Case:   6 | Input/Output: [[-52 -52 25 -52] -52]
Test Case:   7 | Input/Output: [[8 57 57 57] 8]
Test Case:   8 | Input/Output: [[-21 -89 -89 -89] -89]
Test Case:   9 | Input/Output: [[36 36 36 -92] -92]
Test Case:  10 | Input/Output: [[-83 -83 -83 93] -83]
Test Case:  11 | Input/Output: [[-35 -35 96 -35] -35]
Test Case:  12 | Input/Output: [[87 87 87 79] 79]
Test Case:  13 | Input/Output: [[-3 30 30 30] -3]
Test Case:  14 | Input/Output: [[40 40 40 -94] -94]
Test Case:  15 | Input/Output: [[61 30 30 30] 30]
Test Case:  16 | Input/Output: [[34 8 8 8] 8]
Test Case:  17 | Input/Output: [[-41 83 -41 -41] -41]
Test Case:  18 | Input/Output: [[-37 63 -37 -37] -37]
Test Case:  19 | Input/Output: [[-29 -29 28 -29] -29]
Test Case:  20 | Input/Output: [[37 37 37 20] 20]
Test Case:  21 | Input/Output: [[-25 93 93 93] -25]
Test Case:  22 | Input/Output: [[-4 -52 -52 -52] -52]
Test Case:  23 | Input/Output: [[91 89 91 91] 89]
Test Case:  24 | Input/Output: [[57 57 57 -91] -91]
Test Case:  25 | Input/Output: [[15 15 29 15] 15]
Test Case:  26 | Input/Output: [[-12 -96 -96 -96] -96]
Test Case:  27 | Input/Output: [[-69 49 -69 -69] -69]
Test Case:  28 | Input/Output: [[-40 -40 44 -40] -40]
Test Case:  29 | Input/Output: [[-94 93 -94 -94] -94]
Test Case:  30 | Input/Output: [[42 89 42 42] 42]
Test Case:  31 | Input/Output: [[45 65 65 65] 45]
Test Case:  32 | Input/Output: [[30 73 73 73] 30]
Test Case:  33 | Input/Output: [[20 -21 20 20] -21]
Test Case:  34 | Input/Output: [[39 39 -49 39] -49]
Test Case:  35 | Input/Output: [[-12 -12 -59 -12] -59]
Test Case:  36 | Input/Output: [[-15 -15 21 -15] -15]
Test Case:  37 | Input/Output: [[54 54 54 63] 54]
Test Case:  38 | Input/Output: [[34 -87 -87 -87] -87]
Test Case:  39 | Input/Output: [[57 -76 -76 -76] -76]
Test Case:  40 | Input/Output: [[68 68 -10 68] -10]
Test Case:  41 | Input/Output: [[41 95 41 41] 41]
Test Case:  42 | Input/Output: [[90 -35 90 90] -35]
Test Case:  43 | Input/Output: [[54 54 54 -7] -7]
Test Case:  44 | Input/Output: [[-51 -51 31 -51] -51]
Test Case:  45 | Input/Output: [[28 28 28 73] 28]
Test Case:  46 | Input/Output: [[79 51 51 51] 51]
Test Case:  47 | Input/Output: [[62 -89 -89 -89] -89]
Test Case:  48 | Input/Output: [[-19 -19 -19 -85] -85]
Test Case:  49 | Input/Output: [[52 52 76 52] 52]
Test Case:  50 | Input/Output: [[38 38 94 38] 38]
Test Case:  51 | Input/Output: [[83 -75 83 83] -75]
Test Case:  52 | Input/Output: [[37 37 37 26] 26]
Test Case:  53 | Input/Output: [[35 37 37 37] 35]
Test Case:  54 | Input/Output: [[38 38 38 36] 36]
Test Case:  55 | Input/Output: [[-15 -15 -15 49] -15]
Test Case:  56 | Input/Output: [[-52 -42 -52 -52] -52]
Test Case:  57 | Input/Output: [[-82 -79 -79 -79] -82]
Test Case:  58 | Input/Output: [[21 21 -8 21] -8]
Test Case:  59 | Input/Output: [[-92 33 -92 -92] -92]
Test Case:  60 | Input/Output: [[1 57 1 1] 1]
Test Case:  61 | Input/Output: [[-15 36 36 36] -15]
Test Case:  62 | Input/Output: [[1 1 1 -56] -56]
Test Case:  63 | Input/Output: [[-83 63 -83 -83] -83]
Test Case:  64 | Input/Output: [[63 19 19 19] 19]
Test Case:  65 | Input/Output: [[10 92 92 92] 10]
Test Case:  66 | Input/Output: [[-17 -26 -17 -17] -26]
Test Case:  67 | Input/Output: [[21 21 -33 21] -33]
Test Case:  68 | Input/Output: [[32 32 32 -95] -95]
Test Case:  69 | Input/Output: [[2 53 2 2] 2]
Test Case:  70 | Input/Output: [[79 -32 -32 -32] -32]
Test Case:  71 | Input/Output: [[-86 -77 -86 -86] -86]
Test Case:  72 | Input/Output: [[16 48 48 48] 16]
Test Case:  73 | Input/Output: [[69 -92 69 69] -92]
Test Case:  74 | Input/Output: [[28 28 28 47] 28]
Test Case:  75 | Input/Output: [[-30 -30 -5 -30] -30]
Test Case:  76 | Input/Output: [[85 -20 -20 -20] -20]
Test Case:  77 | Input/Output: [[23 45 23 23] 23]
Test Case:  78 | Input/Output: [[-23 -23 -23 -89] -89]
Test Case:  79 | Input/Output: [[-71 -15 -15 -15] -71]
Test Case:  80 | Input/Output: [[10 50 50 50] 10]
Test Case:  81 | Input/Output: [[-5 50 -5 -5] -5]
Test Case:  82 | Input/Output: [[-99 -99 -99 -80] -99]
Test Case:  83 | Input/Output: [[-69 -69 20 -69] -69]
Test Case:  84 | Input/Output: [[-31 -2 -31 -31] -31]
Test Case:  85 | Input/Output: [[-62 -62 -15 -62] -62]
Test Case:  86 | Input/Output: [[31 31 31 -56] -56]
Test Case:  87 | Input/Output: [[-79 -79 -79 40] -79]
Test Case:  88 | Input/Output: [[79 57 57 57] 57]
Test Case:  89 | Input/Output: [[55 55 55 -28] -28]
Test Case:  90 | Input/Output: [[41 86 41 41] 41]
Test Case:  91 | Input/Output: [[-63 -4 -63 -63] -63]
Test Case:  92 | Input/Output: [[10 10 10 -84] -84]
Test Case:  93 | Input/Output: [[2 2 -3 2] -3]
Test Case:  94 | Input/Output: [[-28 -4 -4 -4] -28]
Test Case:  95 | Input/Output: [[-53 -53 -53 92] -53]
Test Case:  96 | Input/Output: [[10 10 -34 10] -34]
Test Case:  97 | Input/Output: [[-97 -2 -97 -97] -97]
Test Case:  98 | Input/Output: [[29 29 -40 29] -40]
Test Case:  99 | Input/Output: [[18 18 18 18] 18]
Test Case: 100 | Input/Output: [(79 79 79 79) 79]
Test Case: 101 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 102 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 103 | Input/Output: [(87 87 87 87) 87]
Test Case: 104 | Input/Output: [(22 22 22 22) 22]
Test Case: 105 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 106 | Input/Output: [(22 22 22 22) 22]
Test Case: 107 | Input/Output: [(89 89 89 89) 89]
Test Case: 108 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 109 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 110 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 111 | Input/Output: [(81 81 81 81) 81]
Test Case: 112 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 113 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 114 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 115 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 116 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 117 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 118 | Input/Output: [(70 70 70 70) 70]
Test Case: 119 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 120 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 121 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 122 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 123 | Input/Output: [(31 31 31 31) 31]
Test Case: 124 | Input/Output: [(62 62 62 62) 62]
Test Case: 125 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 126 | Input/Output: [(62 62 62 62) 62]
Test Case: 127 | Input/Output: [(79 79 79 79) 79]
Test Case: 128 | Input/Output: [(68 68 68 68) 68]
Test Case: 129 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 130 | Input/Output: [(45 45 45 45) 45]
Test Case: 131 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 132 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 133 | Input/Output: [(93 93 93 93) 93]
Test Case: 134 | Input/Output: [(11 11 11 11) 11]
Test Case: 135 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 136 | Input/Output: [(43 43 43 43) 43]
Test Case: 137 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 138 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 139 | Input/Output: [(61 61 61 61) 61]
Test Case: 140 | Input/Output: [(74 74 74 74) 74]
Test Case: 141 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 142 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 143 | Input/Output: [(81 81 81 81) 81]
Test Case: 144 | Input/Output: [(96 96 96 96) 96]
Test Case: 145 | Input/Output: [(45 45 45 45) 45]
Test Case: 146 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 147 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 148 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 149 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 150 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 151 | Input/Output: [(50 50 50 50) 50]
Test Case: 152 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 153 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 154 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 155 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 156 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 157 | Input/Output: [(91 91 91 91) 91]
Test Case: 158 | Input/Output: [(54 54 54 54) 54]
Test Case: 159 | Input/Output: [(60 60 60 60) 60]
Test Case: 160 | Input/Output: [(43 43 43 43) 43]
Test Case: 161 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 162 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 163 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 164 | Input/Output: [(26 26 26 26) 26]
Test Case: 165 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 166 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 167 | Input/Output: [(4 4 4 4) 4]
Test Case: 168 | Input/Output: [(34 34 34 34) 34]
Test Case: 169 | Input/Output: [(3 3 3 3) 3]
Test Case: 170 | Input/Output: [(28 28 28 28) 28]
Test Case: 171 | Input/Output: [(45 45 45 45) 45]
Test Case: 172 | Input/Output: [(27 27 27 27) 27]
Test Case: 173 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 174 | Input/Output: [(60 60 60 60) 60]
Test Case: 175 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 176 | Input/Output: [(25 25 25 25) 25]
Test Case: 177 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 178 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 179 | Input/Output: [(37 37 37 37) 37]
Test Case: 180 | Input/Output: [(19 19 19 19) 19]
Test Case: 181 | Input/Output: [(85 85 85 85) 85]
Test Case: 182 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 183 | Input/Output: [(93 93 93 93) 93]
Test Case: 184 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 185 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 186 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 187 | Input/Output: [(53 53 53 53) 53]
Test Case: 188 | Input/Output: [(65 65 65 65) 65]
Test Case: 189 | Input/Output: [(69 69 69 69) 69]
Test Case: 190 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 191 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 192 | Input/Output: [(40 40 40 40) 40]
Test Case: 193 | Input/Output: [(58 58 58 58) 58]
Test Case: 194 | Input/Output: [(73 73 73 73) 73]
Test Case: 195 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 196 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 197 | Input/Output: [(79 79 79 79) 79]
Test Case: 198 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 199 | Input/Output: [(64 64 64 64) 64]
Test Case: 200 | Input/Output: [(30 19 86 100) 19]
Test Case: 201 | Input/Output: [(32 13 95 50) 13]
Test Case: 202 | Input/Output: [(90 37 1 86) 1]
Test Case: 203 | Input/Output: [(7 91 62 49) 7]
Test Case: 204 | Input/Output: [(84 40 56 59) 40]
Test Case: 205 | Input/Output: [(55 82 56 3) 3]
Test Case: 206 | Input/Output: [(91 67 89 22) 22]
Test Case: 207 | Input/Output: [(12 55 8 16) 8]
Test Case: 208 | Input/Output: [(64 87 63 76) 63]
Test Case: 209 | Input/Output: [(94 10 41 12) 10]
Test Case: 210 | Input/Output: [(87 99 74 11) 11]
Test Case: 211 | Input/Output: [(46 30 69 100) 30]
Test Case: 212 | Input/Output: [(82 45 98 20) 20]
Test Case: 213 | Input/Output: [(16 46 24 56) 16]
Test Case: 214 | Input/Output: [(71 22 74 81) 22]
Test Case: 215 | Input/Output: [(84 15 56 82) 15]
Test Case: 216 | Input/Output: [(2 35 23 58) 2]
Test Case: 217 | Input/Output: [(95 99 5 41) 5]
Test Case: 218 | Input/Output: [(40 43 90 80) 40]
Test Case: 219 | Input/Output: [(34 13 2 73) 2]
Test Case: 220 | Input/Output: [(55 53 6 77) 6]
Test Case: 221 | Input/Output: [(12 91 8 25) 8]
Test Case: 222 | Input/Output: [(6 84 94 81) 6]
Test Case: 223 | Input/Output: [(30 91 51 83) 30]
Test Case: 224 | Input/Output: [(96 8 9 26) 8]
Test Case: 225 | Input/Output: [(21 42 66 50) 21]
Test Case: 226 | Input/Output: [(62 61 77 58) 58]
Test Case: 227 | Input/Output: [(86 66 87 92) 66]
Test Case: 228 | Input/Output: [(95 14 79 9) 9]
Test Case: 229 | Input/Output: [(24 17 14 48) 14]
Test Case: 230 | Input/Output: [(59 39 96 85) 39]
Test Case: 231 | Input/Output: [(94 26 61 55) 26]
Test Case: 232 | Input/Output: [(7 72 95 29) 7]
Test Case: 233 | Input/Output: [(33 58 64 12) 12]
Test Case: 234 | Input/Output: [(3 20 47 30) 3]
Test Case: 235 | Input/Output: [(33 71 91 16) 16]
Test Case: 236 | Input/Output: [(100 79 15 33) 15]
Test Case: 237 | Input/Output: [(18 0 41 17) 0]
Test Case: 238 | Input/Output: [(40 66 3 0) 0]
Test Case: 239 | Input/Output: [(73 57 51 41) 41]
Test Case: 240 | Input/Output: [(90 45 84 6) 6]
Test Case: 241 | Input/Output: [(37 30 74 37) 30]
Test Case: 242 | Input/Output: [(83 44 38 93) 38]
Test Case: 243 | Input/Output: [(69 16 81 91) 16]
Test Case: 244 | Input/Output: [(62 39 64 73) 39]
Test Case: 245 | Input/Output: [(52 43 39 68) 39]
Test Case: 246 | Input/Output: [(45 14 81 31) 14]
Test Case: 247 | Input/Output: [(4 70 84 62) 4]
Test Case: 248 | Input/Output: [(18 71 16 61) 16]
Test Case: 249 | Input/Output: [(3 9 64 41) 3]
Test Case: 250 | Input/Output: [(6 7 10 9) 6]
Test Case: 251 | Input/Output: [(61 4 13 93) 4]
Test Case: 252 | Input/Output: [(24 42 73 92) 24]
Test Case: 253 | Input/Output: [(70 67 31 76) 31]
Test Case: 254 | Input/Output: [(21 50 89 46) 21]
Test Case: 255 | Input/Output: [(95 58 50 15) 15]
Test Case: 256 | Input/Output: [(24 3 3 94) 3]
Test Case: 257 | Input/Output: [(64 50 39 8) 8]
Test Case: 258 | Input/Output: [(63 39 76 27) 27]
Test Case: 259 | Input/Output: [(88 85 11 16) 11]
Test Case: 260 | Input/Output: [(66 17 5 69) 5]
Test Case: 261 | Input/Output: [(5 97 81 37) 5]
Test Case: 262 | Input/Output: [(70 85 38 70) 38]
Test Case: 263 | Input/Output: [(30 69 58 2) 2]
Test Case: 264 | Input/Output: [(99 72 19 22) 19]
Test Case: 265 | Input/Output: [(10 80 4 67) 4]
Test Case: 266 | Input/Output: [(85 17 79 36) 17]
Test Case: 267 | Input/Output: [(78 73 84 60) 60]
Test Case: 268 | Input/Output: [(47 32 27 96) 27]
Test Case: 269 | Input/Output: [(47 6 14 18) 6]
Test Case: 270 | Input/Output: [(19 96 21 6) 6]
Test Case: 271 | Input/Output: [(58 80 16 79) 16]
Test Case: 272 | Input/Output: [(73 55 43 100) 43]
Test Case: 273 | Input/Output: [(53 98 77 29) 29]
Test Case: 274 | Input/Output: [(89 96 10 84) 10]
Test Case: 275 | Input/Output: [(90 0 10 45) 0]
Test Case: 276 | Input/Output: [(83 41 100 39) 39]
Test Case: 277 | Input/Output: [(93 21 44 71) 21]
Test Case: 278 | Input/Output: [(13 88 32 25) 13]
Test Case: 279 | Input/Output: [(27 63 20 85) 20]
Test Case: 280 | Input/Output: [(22 58 32 0) 0]
Test Case: 281 | Input/Output: [(92 19 4 59) 4]
Test Case: 282 | Input/Output: [(74 72 66 52) 52]
Test Case: 283 | Input/Output: [(53 76 34 80) 34]
Test Case: 284 | Input/Output: [(15 14 82 41) 14]
Test Case: 285 | Input/Output: [(95 72 76 69) 69]
Test Case: 286 | Input/Output: [(35 18 29 57) 18]
Test Case: 287 | Input/Output: [(69 81 99 96) 69]
Test Case: 288 | Input/Output: [(94 95 71 54) 54]
Test Case: 289 | Input/Output: [(36 68 53 34) 34]
Test Case: 290 | Input/Output: [(5 80 14 26) 5]
Test Case: 291 | Input/Output: [(43 92 50 88) 43]
Test Case: 292 | Input/Output: [(35 81 2 80) 2]
Test Case: 293 | Input/Output: [(28 90 74 98) 28]
Test Case: 294 | Input/Output: [(61 11 92 15) 11]
Test Case: 295 | Input/Output: [(57 64 11 11) 11]
Test Case: 296 | Input/Output: [(13 93 50 2) 2]
Test Case: 297 | Input/Output: [(94 20 13 74) 13]
Test Case: 298 | Input/Output: [(12 12 38 35) 12]
Test Case: 299 | Input/Output: [(93 11 31 100) 11]
Test Case: 300 | Input/Output: [(44 10 3 26) 3]
Test Case: 301 | Input/Output: [(84 83 99 22) 22]
Test Case: 302 | Input/Output: [(61 26 79 41) 26]
Test Case: 303 | Input/Output: [(51 81 68 46) 46]
Test Case: 304 | Input/Output: [(44 51 48 16) 16]
Test Case: 305 | Input/Output: [(71 95 20 36) 20]
Test Case: 306 | Input/Output: [(84 19 28 44) 19]
Test Case: 307 | Input/Output: [(66 88 37 54) 37]
Test Case: 308 | Input/Output: [(3 38 76 4) 3]
Test Case: 309 | Input/Output: [(99 3 99 52) 3]
Test Case: 310 | Input/Output: [(90 88 5 80) 5]
Test Case: 311 | Input/Output: [(71 98 50 20) 20]
Test Case: 312 | Input/Output: [(97 22 76 83) 22]
Test Case: 313 | Input/Output: [(5 23 41 5) 5]
Test Case: 314 | Input/Output: [(43 54 33 78) 33]
Test Case: 315 | Input/Output: [(93 66 43 31) 31]
Test Case: 316 | Input/Output: [(60 28 33 34) 28]
Test Case: 317 | Input/Output: [(19 75 40 2) 2]
Test Case: 318 | Input/Output: [(81 26 70 81) 26]
Test Case: 319 | Input/Output: [(93 67 22 72) 22]
Test Case: 320 | Input/Output: [(29 13 20 64) 13]
Test Case: 321 | Input/Output: [(47 44 94 7) 7]
Test Case: 322 | Input/Output: [(93 87 11 14) 11]
Test Case: 323 | Input/Output: [(43 26 55 31) 26]
Test Case: 324 | Input/Output: [(63 56 41 9) 9]
Test Case: 325 | Input/Output: [(54 100 13 88) 13]
Test Case: 326 | Input/Output: [(52 1 99 91) 1]
Test Case: 327 | Input/Output: [(74 7 89 1) 1]
Test Case: 328 | Input/Output: [(85 33 38 72) 33]
Test Case: 329 | Input/Output: [(7 86 39 21) 7]
Test Case: 330 | Input/Output: [(55 31 31 77) 31]
Test Case: 331 | Input/Output: [(98 35 85 15) 15]
Test Case: 332 | Input/Output: [(8 60 89 29) 8]
Test Case: 333 | Input/Output: [(0 38 0 3) 0]
Test Case: 334 | Input/Output: [(46 99 26 95) 26]
Test Case: 335 | Input/Output: [(75 68 7 79) 7]
Test Case: 336 | Input/Output: [(24 87 2 75) 2]
Test Case: 337 | Input/Output: [(65 9 1 38) 1]
Test Case: 338 | Input/Output: [(79 93 16 77) 16]
Test Case: 339 | Input/Output: [(63 53 62 99) 53]
Test Case: 340 | Input/Output: [(2 60 37 83) 2]
Test Case: 341 | Input/Output: [(52 66 81 4) 4]
Test Case: 342 | Input/Output: [(90 61 31 39) 31]
Test Case: 343 | Input/Output: [(28 93 43 58) 28]
Test Case: 344 | Input/Output: [(31 79 43 40) 31]
Test Case: 345 | Input/Output: [(58 81 71 55) 55]
Test Case: 346 | Input/Output: [(91 41 38 72) 38]
Test Case: 347 | Input/Output: [(5 22 15 41) 5]
Test Case: 348 | Input/Output: [(93 81 86 79) 79]
Test Case: 349 | Input/Output: [(23 10 46 80) 10]
Test Case: 350 | Input/Output: [(31 29 85 86) 29]
Test Case: 351 | Input/Output: [(30 60 66 68) 30]
Test Case: 352 | Input/Output: [(87 85 28 5) 5]
Test Case: 353 | Input/Output: [(59 100 66 0) 0]
Test Case: 354 | Input/Output: [(1 12 48 42) 1]
Test Case: 355 | Input/Output: [(16 0 57 86) 0]
Test Case: 356 | Input/Output: [(46 97 64 97) 46]
Test Case: 357 | Input/Output: [(10 69 34 91) 10]
Test Case: 358 | Input/Output: [(92 22 44 2) 2]
Test Case: 359 | Input/Output: [(47 74 48 30) 30]
Test Case: 360 | Input/Output: [(62 100 18 10) 10]
Test Case: 361 | Input/Output: [(96 7 3 20) 3]
Test Case: 362 | Input/Output: [(38 31 24 6) 6]
Test Case: 363 | Input/Output: [(44 8 14 13) 8]
Test Case: 364 | Input/Output: [(74 20 27 30) 20]
Test Case: 365 | Input/Output: [(57 52 51 47) 47]
Test Case: 366 | Input/Output: [(83 60 5 10) 5]
Test Case: 367 | Input/Output: [(72 19 94 56) 19]
Test Case: 368 | Input/Output: [(96 45 1 81) 1]
Test Case: 369 | Input/Output: [(94 65 76 15) 15]
Test Case: 370 | Input/Output: [(89 92 12 39) 12]
Test Case: 371 | Input/Output: [(25 95 44 51) 25]
Test Case: 372 | Input/Output: [(87 52 44 31) 31]
Test Case: 373 | Input/Output: [(51 81 50 89) 50]
Test Case: 374 | Input/Output: [(98 28 35 7) 7]
Test Case: 375 | Input/Output: [(23 23 13 65) 13]
Test Case: 376 | Input/Output: [(54 15 67 46) 15]
Test Case: 377 | Input/Output: [(70 62 25 15) 15]
Test Case: 378 | Input/Output: [(16 69 70 24) 16]
Test Case: 379 | Input/Output: [(29 60 69 85) 29]
Test Case: 380 | Input/Output: [(20 97 95 77) 20]
Test Case: 381 | Input/Output: [(8 25 8 92) 8]
Test Case: 382 | Input/Output: [(100 84 48 60) 48]
Test Case: 383 | Input/Output: [(100 54 45 59) 45]
Test Case: 384 | Input/Output: [(40 100 60 99) 40]
Test Case: 385 | Input/Output: [(80 88 61 60) 60]
Test Case: 386 | Input/Output: [(20 32 59 38) 20]
Test Case: 387 | Input/Output: [(77 44 50 55) 44]
Test Case: 388 | Input/Output: [(41 68 22 64) 22]
Test Case: 389 | Input/Output: [(80 61 43 62) 43]
Test Case: 390 | Input/Output: [(65 40 15 82) 15]
Test Case: 391 | Input/Output: [(18 91 21 36) 18]
Test Case: 392 | Input/Output: [(94 73 76 23) 23]
Test Case: 393 | Input/Output: [(97 42 3 84) 3]
Test Case: 394 | Input/Output: [(97 57 9 30) 9]
Test Case: 395 | Input/Output: [(9 3 86 89) 3]
Test Case: 396 | Input/Output: [(89 12 23 91) 12]
Test Case: 397 | Input/Output: [(69 83 14 35) 14]
Test Case: 398 | Input/Output: [(96 46 17 76) 17]
Test Case: 399 | Input/Output: [(69 65 59 69) 59]
Test Case: 400 | Input/Output: [(-43 -33 -87 -79) -87]
Test Case: 401 | Input/Output: [(57 42 64 0) 0]
Test Case: 402 | Input/Output: [(10 93 -11 79) -11]
Test Case: 403 | Input/Output: [(100 -17 68 96) -17]
Test Case: 404 | Input/Output: [(-76 -27 -65 76) -76]
Test Case: 405 | Input/Output: [(7 32 -94 66) -94]
Test Case: 406 | Input/Output: [(-50 23 78 -93) -93]
Test Case: 407 | Input/Output: [(-93 -95 -72 -61) -95]
Test Case: 408 | Input/Output: [(5 -75 -71 5) -75]
Test Case: 409 | Input/Output: [(-43 -86 77 -28) -86]
Test Case: 410 | Input/Output: [(1 31 88 25) 1]
Test Case: 411 | Input/Output: [(-89 28 -77 46) -89]
Test Case: 412 | Input/Output: [(27 97 46 -13) -13]
Test Case: 413 | Input/Output: [(-24 -7 -64 72) -64]
Test Case: 414 | Input/Output: [(0 -7 91 96) -7]
Test Case: 415 | Input/Output: [(-93 17 -100 -40) -100]
Test Case: 416 | Input/Output: [(-74 -8 17 11) -74]
Test Case: 417 | Input/Output: [(-34 -39 -40 69) -40]
Test Case: 418 | Input/Output: [(50 60 31 -84) -84]
Test Case: 419 | Input/Output: [(59 -6 95 22) -6]
Test Case: 420 | Input/Output: [(-63 93 -91 -13) -91]
Test Case: 421 | Input/Output: [(-70 11 98 53) -70]
Test Case: 422 | Input/Output: [(-34 -25 1 55) -34]
Test Case: 423 | Input/Output: [(-59 -21 94 -98) -98]
Test Case: 424 | Input/Output: [(-80 -93 -90 -85) -93]
Test Case: 425 | Input/Output: [(-9 -58 70 8) -58]
Test Case: 426 | Input/Output: [(70 -32 68 -74) -74]
Test Case: 427 | Input/Output: [(37 50 -53 -21) -53]
Test Case: 428 | Input/Output: [(34 12 0 -12) -12]
Test Case: 429 | Input/Output: [(99 73 31 11) 11]
Test Case: 430 | Input/Output: [(30 35 -60 47) -60]
Test Case: 431 | Input/Output: [(9 39 43 -65) -65]
Test Case: 432 | Input/Output: [(14 -47 -20 -48) -48]
Test Case: 433 | Input/Output: [(57 38 -1 22) -1]
Test Case: 434 | Input/Output: [(70 93 14 -19) -19]
Test Case: 435 | Input/Output: [(-34 37 29 36) -34]
Test Case: 436 | Input/Output: [(33 -99 -91 56) -99]
Test Case: 437 | Input/Output: [(-10 -40 65 -46) -46]
Test Case: 438 | Input/Output: [(89 18 -8 32) -8]
Test Case: 439 | Input/Output: [(-18 -95 -96 -94) -96]
Test Case: 440 | Input/Output: [(85 -60 -7 59) -60]
Test Case: 441 | Input/Output: [(59 80 -6 5) -6]
Test Case: 442 | Input/Output: [(-44 65 -100 -56) -100]
Test Case: 443 | Input/Output: [(43 8 69 43) 8]
Test Case: 444 | Input/Output: [(-2 -9 -87 -60) -87]
Test Case: 445 | Input/Output: [(-48 99 77 39) -48]
Test Case: 446 | Input/Output: [(75 19 -1 82) -1]
Test Case: 447 | Input/Output: [(-13 23 45 50) -13]
Test Case: 448 | Input/Output: [(65 -40 91 -7) -40]
Test Case: 449 | Input/Output: [(8 -91 -55 -19) -91]
Test Case: 450 | Input/Output: [(22 -94 -7 5) -94]
Test Case: 451 | Input/Output: [(64 -39 28 -49) -49]
Test Case: 452 | Input/Output: [(51 8 -32 -93) -93]
Test Case: 453 | Input/Output: [(48 -95 33 -21) -95]
Test Case: 454 | Input/Output: [(32 -30 -43 77) -43]
Test Case: 455 | Input/Output: [(38 -29 80 27) -29]
Test Case: 456 | Input/Output: [(25 67 -16 20) -16]
Test Case: 457 | Input/Output: [(84 -70 36 39) -70]
Test Case: 458 | Input/Output: [(-57 -23 -34 84) -57]
Test Case: 459 | Input/Output: [(-18 95 -97 22) -97]
Test Case: 460 | Input/Output: [(43 -86 36 -36) -86]
Test Case: 461 | Input/Output: [(-82 2 71 11) -82]
Test Case: 462 | Input/Output: [(54 29 -55 -98) -98]
Test Case: 463 | Input/Output: [(-51 -6 -7 -43) -51]
Test Case: 464 | Input/Output: [(80 19 12 81) 12]
Test Case: 465 | Input/Output: [(-85 81 -81 87) -85]
Test Case: 466 | Input/Output: [(59 40 -44 -64) -64]
Test Case: 467 | Input/Output: [(20 70 61 -38) -38]
Test Case: 468 | Input/Output: [(-27 -43 22 -49) -49]
Test Case: 469 | Input/Output: [(-42 96 -29 -37) -42]
Test Case: 470 | Input/Output: [(93 29 7 59) 7]
Test Case: 471 | Input/Output: [(-86 -39 -93 53) -93]
Test Case: 472 | Input/Output: [(52 62 63 -25) -25]
Test Case: 473 | Input/Output: [(39 -30 -9 86) -30]
Test Case: 474 | Input/Output: [(91 -50 -43 57) -50]
Test Case: 475 | Input/Output: [(54 -2 -81 24) -81]
Test Case: 476 | Input/Output: [(19 -49 -23 52) -49]
Test Case: 477 | Input/Output: [(-24 -60 -63 -1) -63]
Test Case: 478 | Input/Output: [(33 5 12 -78) -78]
Test Case: 479 | Input/Output: [(-49 44 -16 41) -49]
Test Case: 480 | Input/Output: [(24 -38 -53 68) -53]
Test Case: 481 | Input/Output: [(48 -12 27 52) -12]
Test Case: 482 | Input/Output: [(-89 -7 -36 40) -89]
Test Case: 483 | Input/Output: [(60 10 -37 -26) -37]
Test Case: 484 | Input/Output: [(13 52 15 -27) -27]
Test Case: 485 | Input/Output: [(89 34 -34 -85) -85]
Test Case: 486 | Input/Output: [(46 99 20 -66) -66]
Test Case: 487 | Input/Output: [(-51 74 -40 -89) -89]
Test Case: 488 | Input/Output: [(96 -56 -57 1) -57]
Test Case: 489 | Input/Output: [(70 20 -83 20) -83]
Test Case: 490 | Input/Output: [(-61 -92 -94 -95) -95]
Test Case: 491 | Input/Output: [(28 79 -24 -81) -81]
Test Case: 492 | Input/Output: [(26 70 98 -19) -19]
Test Case: 493 | Input/Output: [(50 -52 26 65) -52]
Test Case: 494 | Input/Output: [(10 99 32 -76) -76]
Test Case: 495 | Input/Output: [(17 -80 -73 -15) -80]
Test Case: 496 | Input/Output: [(82 -10 52 -84) -84]
Test Case: 497 | Input/Output: [(36 -29 -82 -89) -89]
Test Case: 498 | Input/Output: [(24 -15 12 -53) -53]
Test Case: 499 | Input/Output: [(28 54 59 36) 28]
Test Case: 500 | Input/Output: [(-55 92 -56 -46) -56]
Test Case: 501 | Input/Output: [(-99 -31 -51 -30) -99]
Test Case: 502 | Input/Output: [(9 -45 37 21) -45]
Test Case: 503 | Input/Output: [(87 66 -25 -7) -25]
Test Case: 504 | Input/Output: [(23 80 -28 61) -28]
Test Case: 505 | Input/Output: [(-86 16 63 -70) -86]
Test Case: 506 | Input/Output: [(98 -97 26 -22) -97]
Test Case: 507 | Input/Output: [(87 -90 -27 72) -90]
Test Case: 508 | Input/Output: [(73 55 -91 -47) -91]
Test Case: 509 | Input/Output: [(-75 -59 -22 64) -75]
Test Case: 510 | Input/Output: [(6 65 30 -34) -34]
Test Case: 511 | Input/Output: [(36 -26 44 38) -26]
Test Case: 512 | Input/Output: [(4 -21 -81 64) -81]
Test Case: 513 | Input/Output: [(66 86 -35 -87) -87]
Test Case: 514 | Input/Output: [(-25 15 23 42) -25]
Test Case: 515 | Input/Output: [(-68 -51 5 -56) -68]
Test Case: 516 | Input/Output: [(-84 -79 -32 4) -84]
Test Case: 517 | Input/Output: [(33 49 12 -92) -92]
Test Case: 518 | Input/Output: [(-79 -28 -1 53) -79]
Test Case: 519 | Input/Output: [(-95 60 -55 -55) -95]
Test Case: 520 | Input/Output: [(92 -74 -16 -41) -74]
Test Case: 521 | Input/Output: [(56 87 62 -63) -63]
Test Case: 522 | Input/Output: [(-30 -85 28 -57) -85]
Test Case: 523 | Input/Output: [(-20 44 62 42) -20]
Test Case: 524 | Input/Output: [(16 -86 54 98) -86]
Test Case: 525 | Input/Output: [(40 -35 2 -14) -35]
Test Case: 526 | Input/Output: [(91 -54 51 -26) -54]
Test Case: 527 | Input/Output: [(55 68 87 91) 55]
Test Case: 528 | Input/Output: [(-83 -91 44 90) -91]
Test Case: 529 | Input/Output: [(-92 47 37 83) -92]
Test Case: 530 | Input/Output: [(35 -64 -46 -41) -64]
Test Case: 531 | Input/Output: [(-35 80 -64 9) -64]
Test Case: 532 | Input/Output: [(-19 -95 58 -61) -95]
Test Case: 533 | Input/Output: [(59 78 -72 -29) -72]
Test Case: 534 | Input/Output: [(-51 -52 74 60) -52]
Test Case: 535 | Input/Output: [(-86 54 -45 23) -86]
Test Case: 536 | Input/Output: [(77 63 -98 47) -98]
Test Case: 537 | Input/Output: [(-81 -69 68 -88) -88]
Test Case: 538 | Input/Output: [(-89 98 50 10) -89]
Test Case: 539 | Input/Output: [(-89 90 -86 -16) -89]
Test Case: 540 | Input/Output: [(94 -28 -8 26) -28]
Test Case: 541 | Input/Output: [(76 23 30 -97) -97]
Test Case: 542 | Input/Output: [(65 -83 -21 75) -83]
Test Case: 543 | Input/Output: [(83 57 50 45) 45]
Test Case: 544 | Input/Output: [(84 84 0 12) 0]
Test Case: 545 | Input/Output: [(-77 61 90 15) -77]
Test Case: 546 | Input/Output: [(-32 55 -75 13) -75]
Test Case: 547 | Input/Output: [(0 -20 -72 -53) -72]
Test Case: 548 | Input/Output: [(-66 -38 82 47) -66]
Test Case: 549 | Input/Output: [(-41 -49 -52 -53) -53]
Test Case: 550 | Input/Output: [(80 -50 70 20) -50]
Test Case: 551 | Input/Output: [(-28 -13 -11 24) -28]
Test Case: 552 | Input/Output: [(1 17 2 -57) -57]
Test Case: 553 | Input/Output: [(20 -78 -16 68) -78]
Test Case: 554 | Input/Output: [(-91 -98 17 -34) -98]
Test Case: 555 | Input/Output: [(50 -43 49 -69) -69]
Test Case: 556 | Input/Output: [(11 36 41 26) 11]
Test Case: 557 | Input/Output: [(8 -6 -37 34) -37]
Test Case: 558 | Input/Output: [(37 76 99 -73) -73]
Test Case: 559 | Input/Output: [(-43 11 3 -27) -43]
Test Case: 560 | Input/Output: [(88 57 47 1) 1]
Test Case: 561 | Input/Output: [(77 69 40 -71) -71]
Test Case: 562 | Input/Output: [(67 94 -16 42) -16]
Test Case: 563 | Input/Output: [(7 87 38 -12) -12]
Test Case: 564 | Input/Output: [(81 98 17 50) 17]
Test Case: 565 | Input/Output: [(27 -79 -42 -26) -79]
Test Case: 566 | Input/Output: [(29 -24 -4 67) -24]
Test Case: 567 | Input/Output: [(10 -55 64 23) -55]
Test Case: 568 | Input/Output: [(99 75 57 -1) -1]
Test Case: 569 | Input/Output: [(-94 -47 -51 -21) -94]
Test Case: 570 | Input/Output: [(39 60 24 -73) -73]
Test Case: 571 | Input/Output: [(-80 52 -79 -53) -80]
Test Case: 572 | Input/Output: [(-10 -77 76 -21) -77]
Test Case: 573 | Input/Output: [(-62 15 2 96) -62]
Test Case: 574 | Input/Output: [(31 22 92 -83) -83]
Test Case: 575 | Input/Output: [(-62 57 59 -22) -62]
Test Case: 576 | Input/Output: [(15 32 -65 51) -65]
Test Case: 577 | Input/Output: [(25 76 -18 91) -18]
Test Case: 578 | Input/Output: [(87 -54 51 -12) -54]
Test Case: 579 | Input/Output: [(56 21 -55 30) -55]
Test Case: 580 | Input/Output: [(-57 71 49 -97) -97]
Test Case: 581 | Input/Output: [(51 -42 7 75) -42]
Test Case: 582 | Input/Output: [(29 26 78 18) 18]
Test Case: 583 | Input/Output: [(81 85 -51 79) -51]
Test Case: 584 | Input/Output: [(71 29 74 89) 29]
Test Case: 585 | Input/Output: [(-4 -52 50 -68) -68]
Test Case: 586 | Input/Output: [(92 -18 -56 75) -56]
Test Case: 587 | Input/Output: [(82 -62 -8 56) -62]
Test Case: 588 | Input/Output: [(-87 20 -93 55) -93]
Test Case: 589 | Input/Output: [(-6 -100 7 -17) -100]
Test Case: 590 | Input/Output: [(-97 54 4 90) -97]
Test Case: 591 | Input/Output: [(-45 44 -87 -63) -87]
Test Case: 592 | Input/Output: [(82 -88 83 6) -88]
Test Case: 593 | Input/Output: [(20 -83 -95 34) -95]
Test Case: 594 | Input/Output: [(96 66 34 -46) -46]
Test Case: 595 | Input/Output: [(-53 38 43 -26) -53]
Test Case: 596 | Input/Output: [(-73 8 -55 -73) -73]
Test Case: 597 | Input/Output: [(-76 -34 63 -56) -76]
Test Case: 598 | Input/Output: [(-70 33 -16 -25) -70]
Test Case: 599 | Input/Output: [(-42 30 59 -12) -42]
Test Case: 600 | Input/Output: [(-5 -7 26 69) -7]
Test Case: 601 | Input/Output: [(21 42 48 -27) -27]
Test Case: 602 | Input/Output: [(-88 -53 45 -72) -88]
Test Case: 603 | Input/Output: [(-84 71 -15 4) -84]
Test Case: 604 | Input/Output: [(-85 -76 98 41) -85]
Test Case: 605 | Input/Output: [(74 -53 -32 21) -53]
Test Case: 606 | Input/Output: [(60 -78 -70 -51) -78]
Test Case: 607 | Input/Output: [(14 -66 27 -53) -66]
Test Case: 608 | Input/Output: [(-11 28 33 -42) -42]
Test Case: 609 | Input/Output: [(37 89 29 59) 29]
Test Case: 610 | Input/Output: [(-40 -30 -16 -71) -71]
Test Case: 611 | Input/Output: [(78 -49 -27 -31) -49]
Test Case: 612 | Input/Output: [(23 -1 -88 -40) -88]
Test Case: 613 | Input/Output: [(-71 -79 -97 -24) -97]
Test Case: 614 | Input/Output: [(10 -7 -44 17) -44]
Test Case: 615 | Input/Output: [(92 -36 3 64) -36]
Test Case: 616 | Input/Output: [(78 -60 -57 -30) -60]
Test Case: 617 | Input/Output: [(40 61 -1 81) -1]
Test Case: 618 | Input/Output: [(-96 -69 -28 13) -96]
Test Case: 619 | Input/Output: [(21 73 -24 28) -24]
Test Case: 620 | Input/Output: [(37 -100 -31 -57) -100]
Test Case: 621 | Input/Output: [(60 60 -100 31) -100]
Test Case: 622 | Input/Output: [(51 74 -97 95) -97]
Test Case: 623 | Input/Output: [(72 93 -84 -56) -84]
Test Case: 624 | Input/Output: [(-88 -12 -66 24) -88]
Test Case: 625 | Input/Output: [(11 -15 -90 -88) -90]
Test Case: 626 | Input/Output: [(99 -43 -72 -82) -82]
Test Case: 627 | Input/Output: [(-48 -68 -66 70) -68]
Test Case: 628 | Input/Output: [(-32 21 91 -93) -93]
Test Case: 629 | Input/Output: [(25 21 72 -70) -70]
Test Case: 630 | Input/Output: [(-93 -14 -6 -35) -93]
Test Case: 631 | Input/Output: [(74 -80 14 -44) -80]
Test Case: 632 | Input/Output: [(45 -37 94 -14) -37]
Test Case: 633 | Input/Output: [(10 45 86 53) 10]
Test Case: 634 | Input/Output: [(93 78 -88 -60) -88]
Test Case: 635 | Input/Output: [(-86 54 -97 8) -97]
Test Case: 636 | Input/Output: [(-89 -53 56 -34) -89]
Test Case: 637 | Input/Output: [(-80 45 37 -37) -80]
Test Case: 638 | Input/Output: [(-84 -7 53 60) -84]
Test Case: 639 | Input/Output: [(-7 -35 38 96) -35]
Test Case: 640 | Input/Output: [(-49 -43 99 1) -49]
Test Case: 641 | Input/Output: [(0 25 -36 78) -36]
Test Case: 642 | Input/Output: [(-65 24 -6 56) -65]
Test Case: 643 | Input/Output: [(66 80 70 33) 33]
Test Case: 644 | Input/Output: [(45 -17 56 30) -17]
Test Case: 645 | Input/Output: [(9 26 -12 40) -12]
Test Case: 646 | Input/Output: [(-74 -73 79 -72) -74]
Test Case: 647 | Input/Output: [(10 -7 -100 26) -100]
Test Case: 648 | Input/Output: [(-66 17 95 -17) -66]
Test Case: 649 | Input/Output: [(25 -93 -66 -70) -93]
Test Case: 650 | Input/Output: [(95 -42 -69 57) -69]
Test Case: 651 | Input/Output: [(-16 -26 -78 -26) -78]
Test Case: 652 | Input/Output: [(22 87 7 26) 7]
Test Case: 653 | Input/Output: [(75 -83 -86 -68) -86]
Test Case: 654 | Input/Output: [(-52 32 53 14) -52]
Test Case: 655 | Input/Output: [(-31 -95 -99 100) -99]
Test Case: 656 | Input/Output: [(-5 -50 75 48) -50]
Test Case: 657 | Input/Output: [(84 64 -42 -74) -74]
Test Case: 658 | Input/Output: [(30 -84 -99 -79) -99]
Test Case: 659 | Input/Output: [(-5 3 -12 -75) -75]
Test Case: 660 | Input/Output: [(-5 -81 71 47) -81]
Test Case: 661 | Input/Output: [(-77 64 -25 -77) -77]
Test Case: 662 | Input/Output: [(22 -84 24 20) -84]
Test Case: 663 | Input/Output: [(-92 -93 53 87) -93]
Test Case: 664 | Input/Output: [(-44 -63 6 10) -63]
Test Case: 665 | Input/Output: [(-96 96 41 48) -96]
Test Case: 666 | Input/Output: [(36 84 -79 84) -79]
Test Case: 667 | Input/Output: [(4 37 -74 50) -74]
Test Case: 668 | Input/Output: [(56 -49 7 34) -49]
Test Case: 669 | Input/Output: [(6 -100 -29 -31) -100]
Test Case: 670 | Input/Output: [(-20 -22 -12 12) -22]
Test Case: 671 | Input/Output: [(-69 97 -89 -46) -89]
Test Case: 672 | Input/Output: [(-67 -39 25 -61) -67]
Test Case: 673 | Input/Output: [(-9 81 64 21) -9]
Test Case: 674 | Input/Output: [(25 -63 94 -100) -100]
Test Case: 675 | Input/Output: [(-25 -69 99 18) -69]
Test Case: 676 | Input/Output: [(7 -25 -14 -18) -25]
Test Case: 677 | Input/Output: [(-46 -55 -74 25) -74]
Test Case: 678 | Input/Output: [(18 -57 38 -36) -57]
Test Case: 679 | Input/Output: [(-45 -93 54 -32) -93]
Test Case: 680 | Input/Output: [(-47 43 33 79) -47]
Test Case: 681 | Input/Output: [(-60 9 -6 51) -60]
Test Case: 682 | Input/Output: [(85 16 6 -7) -7]
Test Case: 683 | Input/Output: [(-86 -50 -77 63) -86]
Test Case: 684 | Input/Output: [(73 -52 64 -27) -52]
Test Case: 685 | Input/Output: [(78 -37 97 95) -37]
Test Case: 686 | Input/Output: [(-74 -98 -18 -74) -98]
Test Case: 687 | Input/Output: [(33 -74 -84 41) -84]
Test Case: 688 | Input/Output: [(-3 75 4 -24) -24]
Test Case: 689 | Input/Output: [(-72 3 43 -41) -72]
Test Case: 690 | Input/Output: [(-65 1 80 94) -65]
Test Case: 691 | Input/Output: [(0 67 80 -23) -23]
Test Case: 692 | Input/Output: [(51 24 99 -20) -20]
Test Case: 693 | Input/Output: [(-20 -68 -76 -86) -86]
Test Case: 694 | Input/Output: [(14 87 58 6) 6]
Test Case: 695 | Input/Output: [(-93 -8 99 88) -93]
Test Case: 696 | Input/Output: [(-9 96 9 53) -9]
Test Case: 697 | Input/Output: [(-17 91 -34 90) -34]
Test Case: 698 | Input/Output: [(-79 5 7 -14) -79]
Test Case: 699 | Input/Output: [(55 17 63 73) 17]
Test Case: 700 | Input/Output: [(-59 -5 25 85) -59]
Test Case: 701 | Input/Output: [(-87 84 47 54) -87]
Test Case: 702 | Input/Output: [(78 -29 82 -75) -75]
Test Case: 703 | Input/Output: [(8 -99 -9 -30) -99]
Test Case: 704 | Input/Output: [(-20 7 71 -69) -69]
Test Case: 705 | Input/Output: [(94 -11 98 -36) -36]
Test Case: 706 | Input/Output: [(-8 83 -40 -6) -40]
Test Case: 707 | Input/Output: [(19 1 -57 -33) -57]
Test Case: 708 | Input/Output: [(88 64 92 48) 48]
Test Case: 709 | Input/Output: [(-87 78 -6 8) -87]
Test Case: 710 | Input/Output: [(-79 5 93 -43) -79]
Test Case: 711 | Input/Output: [(-87 32 36 -78) -87]
Test Case: 712 | Input/Output: [(-40 81 -94 87) -94]
Test Case: 713 | Input/Output: [(17 17 23 70) 17]
Test Case: 714 | Input/Output: [(-87 -3 4 53) -87]
Test Case: 715 | Input/Output: [(-10 16 -11 21) -11]
Test Case: 716 | Input/Output: [(87 -59 52 -56) -59]
Test Case: 717 | Input/Output: [(-61 75 70 10) -61]
Test Case: 718 | Input/Output: [(97 -84 21 15) -84]
Test Case: 719 | Input/Output: [(-18 76 55 -90) -90]
Test Case: 720 | Input/Output: [(-21 22 96 -91) -91]
Test Case: 721 | Input/Output: [(-31 78 23 34) -31]
Test Case: 722 | Input/Output: [(-53 52 -6 -46) -53]
Test Case: 723 | Input/Output: [(15 -68 -99 47) -99]
Test Case: 724 | Input/Output: [(31 -44 60 -4) -44]
Test Case: 725 | Input/Output: [(91 -97 -3 -3) -97]
Test Case: 726 | Input/Output: [(-66 -98 -3 -6) -98]
Test Case: 727 | Input/Output: [(88 4 -31 88) -31]
Test Case: 728 | Input/Output: [(65 -20 30 62) -20]
Test Case: 729 | Input/Output: [(0 6 8 -95) -95]
Test Case: 730 | Input/Output: [(-46 16 -6 -12) -46]
Test Case: 731 | Input/Output: [(-34 -62 -65 -85) -85]
Test Case: 732 | Input/Output: [(92 100 38 86) 38]
Test Case: 733 | Input/Output: [(34 -64 -62 -29) -64]
Test Case: 734 | Input/Output: [(18 -62 -76 6) -76]
Test Case: 735 | Input/Output: [(64 -39 -98 30) -98]
Test Case: 736 | Input/Output: [(73 -69 -40 5) -69]
Test Case: 737 | Input/Output: [(98 10 -1 -78) -78]
Test Case: 738 | Input/Output: [(-84 -89 95 -98) -98]
Test Case: 739 | Input/Output: [(64 12 99 -11) -11]
Test Case: 740 | Input/Output: [(77 79 51 -100) -100]
Test Case: 741 | Input/Output: [(97 -62 24 19) -62]
Test Case: 742 | Input/Output: [(37 54 -69 -17) -69]
Test Case: 743 | Input/Output: [(-24 3 76 -14) -24]
Test Case: 744 | Input/Output: [(-56 -87 -90 77) -90]
Test Case: 745 | Input/Output: [(95 50 -74 -57) -74]
Test Case: 746 | Input/Output: [(45 69 -45 85) -45]
Test Case: 747 | Input/Output: [(73 -49 0 -23) -49]
Test Case: 748 | Input/Output: [(-16 6 98 34) -16]
Test Case: 749 | Input/Output: [(-36 72 19 54) -36]
Test Case: 750 | Input/Output: [(63 -8 7 -89) -89]
Test Case: 751 | Input/Output: [(95 82 -61 7) -61]
Test Case: 752 | Input/Output: [(-39 52 57 -44) -44]
Test Case: 753 | Input/Output: [(23 3 -92 -77) -92]
Test Case: 754 | Input/Output: [(-73 -32 25 -72) -73]
Test Case: 755 | Input/Output: [(38 75 -22 30) -22]
Test Case: 756 | Input/Output: [(39 74 84 -45) -45]
Test Case: 757 | Input/Output: [(62 -79 43 -33) -79]
Test Case: 758 | Input/Output: [(-88 25 47 66) -88]
Test Case: 759 | Input/Output: [(-53 -46 -93 -36) -93]
Test Case: 760 | Input/Output: [(94 75 62 -25) -25]
Test Case: 761 | Input/Output: [(-76 71 30 59) -76]
Test Case: 762 | Input/Output: [(-73 63 -75 67) -75]
Test Case: 763 | Input/Output: [(-15 -45 58 52) -45]
Test Case: 764 | Input/Output: [(31 22 60 78) 22]
Test Case: 765 | Input/Output: [(92 -2 -91 51) -91]
Test Case: 766 | Input/Output: [(90 34 -33 20) -33]
Test Case: 767 | Input/Output: [(-70 86 -12 -12) -70]
Test Case: 768 | Input/Output: [(23 -6 -45 55) -45]
Test Case: 769 | Input/Output: [(-63 43 10 65) -63]
Test Case: 770 | Input/Output: [(-84 98 20 80) -84]
Test Case: 771 | Input/Output: [(-57 -49 -59 14) -59]
Test Case: 772 | Input/Output: [(-41 -86 59 39) -86]
Test Case: 773 | Input/Output: [(-58 -56 -36 -36) -58]
Test Case: 774 | Input/Output: [(16 94 9 -18) -18]
Test Case: 775 | Input/Output: [(-54 -32 -87 -95) -95]
Test Case: 776 | Input/Output: [(74 34 57 67) 34]
Test Case: 777 | Input/Output: [(4 -21 31 -39) -39]
Test Case: 778 | Input/Output: [(-13 -86 2 -74) -86]
Test Case: 779 | Input/Output: [(77 -19 -68 -11) -68]
Test Case: 780 | Input/Output: [(26 -11 -85 -67) -85]
Test Case: 781 | Input/Output: [(-17 -5 36 48) -17]
Test Case: 782 | Input/Output: [(-47 -12 61 77) -47]
Test Case: 783 | Input/Output: [(-63 97 78 90) -63]
Test Case: 784 | Input/Output: [(-20 31 -98 -95) -98]
Test Case: 785 | Input/Output: [(68 -97 -12 96) -97]
Test Case: 786 | Input/Output: [(-32 -55 8 -85) -85]
Test Case: 787 | Input/Output: [(41 74 45 66) 41]
Test Case: 788 | Input/Output: [(3 -97 -47 -48) -97]
Test Case: 789 | Input/Output: [(72 -72 -4 -90) -90]
Test Case: 790 | Input/Output: [(-20 47 51 -95) -95]
Test Case: 791 | Input/Output: [(-63 -38 -84 -31) -84]
Test Case: 792 | Input/Output: [(49 -92 15 -87) -92]
Test Case: 793 | Input/Output: [(-53 -85 -38 56) -85]
Test Case: 794 | Input/Output: [(-13 -74 2 42) -74]
Test Case: 795 | Input/Output: [(62 10 -50 -55) -55]
Test Case: 796 | Input/Output: [(41 -48 -34 -82) -82]
Test Case: 797 | Input/Output: [(-5 -59 100 82) -59]
Test Case: 798 | Input/Output: [(-17 100 -86 -36) -86]
Test Case: 799 | Input/Output: [(-52 91 -21 -6) -52]
Test Case: 800 | Input/Output: [(77 8 -9 -59) -59]
Test Case: 801 | Input/Output: [(-68 -46 81 4) -68]
Test Case: 802 | Input/Output: [(46 76 -34 -8) -34]
Test Case: 803 | Input/Output: [(-98 4 4 -99) -99]
Test Case: 804 | Input/Output: [(-100 85 -14 -48) -100]
Test Case: 805 | Input/Output: [(65 -41 1 -87) -87]
Test Case: 806 | Input/Output: [(3 16 -69 -46) -69]
Test Case: 807 | Input/Output: [(13 -33 -66 -76) -76]
Test Case: 808 | Input/Output: [(21 0 59 90) 0]
Test Case: 809 | Input/Output: [(45 0 91 100) 0]
Test Case: 810 | Input/Output: [(-44 -44 -56 60) -56]
Test Case: 811 | Input/Output: [(8 -87 -4 37) -87]
Test Case: 812 | Input/Output: [(-25 -57 62 95) -57]
Test Case: 813 | Input/Output: [(4 42 -77 10) -77]
Test Case: 814 | Input/Output: [(40 -48 25 -2) -48]
Test Case: 815 | Input/Output: [(58 89 51 2) 2]
Test Case: 816 | Input/Output: [(53 11 42 33) 11]
Test Case: 817 | Input/Output: [(92 55 -70 -82) -82]
Test Case: 818 | Input/Output: [(76 88 -92 98) -92]
Test Case: 819 | Input/Output: [(53 -57 -89 -21) -89]
Test Case: 820 | Input/Output: [(16 89 73 1) 1]
Test Case: 821 | Input/Output: [(95 20 -7 2) -7]
Test Case: 822 | Input/Output: [(-89 84 -23 -36) -89]
Test Case: 823 | Input/Output: [(45 -52 71 16) -52]
Test Case: 824 | Input/Output: [(-51 -6 -96 -38) -96]
Test Case: 825 | Input/Output: [(-54 39 22 98) -54]
Test Case: 826 | Input/Output: [(-50 66 27 -89) -89]
Test Case: 827 | Input/Output: [(99 -71 40 -26) -71]
Test Case: 828 | Input/Output: [(-85 -20 -41 70) -85]
Test Case: 829 | Input/Output: [(-85 6 -43 -56) -85]
Test Case: 830 | Input/Output: [(18 94 -36 -30) -36]
Test Case: 831 | Input/Output: [(87 64 91 14) 14]
Test Case: 832 | Input/Output: [(36 -57 54 10) -57]
Test Case: 833 | Input/Output: [(38 22 -22 84) -22]
Test Case: 834 | Input/Output: [(-67 -89 47 -64) -89]
Test Case: 835 | Input/Output: [(95 -16 66 -37) -37]
Test Case: 836 | Input/Output: [(90 -87 -58 74) -87]
Test Case: 837 | Input/Output: [(-69 6 -29 54) -69]
Test Case: 838 | Input/Output: [(67 53 -41 89) -41]
Test Case: 839 | Input/Output: [(37 -100 -11 14) -100]
Test Case: 840 | Input/Output: [(26 55 47 -92) -92]
Test Case: 841 | Input/Output: [(84 -87 53 46) -87]
Test Case: 842 | Input/Output: [(17 58 -61 -44) -61]
Test Case: 843 | Input/Output: [(-65 -57 77 -70) -70]
Test Case: 844 | Input/Output: [(14 71 42 71) 14]
Test Case: 845 | Input/Output: [(-62 -9 42 39) -62]
Test Case: 846 | Input/Output: [(-88 -98 -50 29) -98]
Test Case: 847 | Input/Output: [(61 49 88 -13) -13]
Test Case: 848 | Input/Output: [(-21 43 63 47) -21]
Test Case: 849 | Input/Output: [(-47 50 -28 -76) -76]
Test Case: 850 | Input/Output: [(10 69 -60 -39) -60]
Test Case: 851 | Input/Output: [(27 -42 -26 -31) -42]
Test Case: 852 | Input/Output: [(29 -84 -57 -38) -84]
Test Case: 853 | Input/Output: [(40 65 -35 -7) -35]
Test Case: 854 | Input/Output: [(49 24 78 59) 24]
Test Case: 855 | Input/Output: [(41 75 -79 -7) -79]
Test Case: 856 | Input/Output: [(-19 24 -28 62) -28]
Test Case: 857 | Input/Output: [(83 -56 -43 -1) -56]
Test Case: 858 | Input/Output: [(6 48 55 84) 6]
Test Case: 859 | Input/Output: [(-19 -28 -96 -89) -96]
Test Case: 860 | Input/Output: [(36 11 -77 27) -77]
Test Case: 861 | Input/Output: [(-25 42 -74 9) -74]
Test Case: 862 | Input/Output: [(59 -35 31 8) -35]
Test Case: 863 | Input/Output: [(-81 -4 84 28) -81]
Test Case: 864 | Input/Output: [(50 -40 18 -87) -87]
Test Case: 865 | Input/Output: [(-59 26 63 -88) -88]
Test Case: 866 | Input/Output: [(-11 19 48 -84) -84]
Test Case: 867 | Input/Output: [(26 1 21 82) 1]
Test Case: 868 | Input/Output: [(-100 56 -56 49) -100]
Test Case: 869 | Input/Output: [(-64 -66 -70 0) -70]
Test Case: 870 | Input/Output: [(79 7 -56 -98) -98]
Test Case: 871 | Input/Output: [(91 -26 40 58) -26]
Test Case: 872 | Input/Output: [(-83 -57 18 -43) -83]
Test Case: 873 | Input/Output: [(68 -16 -66 27) -66]
Test Case: 874 | Input/Output: [(67 59 56 21) 21]
Test Case: 875 | Input/Output: [(28 33 -100 -45) -100]
Test Case: 876 | Input/Output: [(-12 -94 -63 -83) -94]
Test Case: 877 | Input/Output: [(82 16 56 -28) -28]
Test Case: 878 | Input/Output: [(-12 34 79 83) -12]
Test Case: 879 | Input/Output: [(-52 9 -48 50) -52]
Test Case: 880 | Input/Output: [(-78 11 -99 57) -99]
Test Case: 881 | Input/Output: [(-37 -57 -3 -32) -57]
Test Case: 882 | Input/Output: [(-10 -32 2 25) -32]
Test Case: 883 | Input/Output: [(-59 46 27 49) -59]
Test Case: 884 | Input/Output: [(4 88 68 64) 4]
Test Case: 885 | Input/Output: [(45 86 -41 -28) -41]
Test Case: 886 | Input/Output: [(-44 -78 -93 9) -93]
Test Case: 887 | Input/Output: [(22 -18 -72 -34) -72]
Test Case: 888 | Input/Output: [(-15 -48 26 9) -48]
Test Case: 889 | Input/Output: [(59 63 -49 11) -49]
Test Case: 890 | Input/Output: [(40 -59 -60 -21) -60]
Test Case: 891 | Input/Output: [(39 95 -26 29) -26]
Test Case: 892 | Input/Output: [(-81 -43 35 -12) -81]
Test Case: 893 | Input/Output: [(-69 -59 86 -16) -69]
Test Case: 894 | Input/Output: [(63 83 -15 -72) -72]
Test Case: 895 | Input/Output: [(-86 -77 -28 -100) -100]
Test Case: 896 | Input/Output: [(-54 -27 -88 33) -88]
Test Case: 897 | Input/Output: [(-92 1 94 83) -92]
Test Case: 898 | Input/Output: [(65 -29 -40 70) -40]
Test Case: 899 | Input/Output: [(39 -66 -60 55) -66]
Test Case: 900 | Input/Output: [(-43 0 60 -51) -51]
Test Case: 901 | Input/Output: [(-5 83 -64 50) -64]
Test Case: 902 | Input/Output: [(52 -98 -77 -23) -98]
Test Case: 903 | Input/Output: [(7 13 60 -23) -23]
Test Case: 904 | Input/Output: [(72 100 -95 1) -95]
Test Case: 905 | Input/Output: [(16 85 -22 37) -22]
Test Case: 906 | Input/Output: [(52 -24 -53 -35) -53]
Test Case: 907 | Input/Output: [(11 97 -65 -71) -71]
Test Case: 908 | Input/Output: [(44 -13 88 90) -13]
Test Case: 909 | Input/Output: [(84 65 -48 38) -48]
Test Case: 910 | Input/Output: [(-41 95 68 74) -41]
Test Case: 911 | Input/Output: [(-53 -95 96 -73) -95]
Test Case: 912 | Input/Output: [(67 -21 75 -84) -84]
Test Case: 913 | Input/Output: [(-96 2 -47 -21) -96]
Test Case: 914 | Input/Output: [(37 -94 -16 93) -94]
Test Case: 915 | Input/Output: [(-74 76 37 92) -74]
Test Case: 916 | Input/Output: [(54 59 -33 51) -33]
Test Case: 917 | Input/Output: [(64 86 77 68) 64]
Test Case: 918 | Input/Output: [(21 54 90 55) 21]
Test Case: 919 | Input/Output: [(-15 68 64 -32) -32]
Test Case: 920 | Input/Output: [(-50 21 -90 -19) -90]
Test Case: 921 | Input/Output: [(-26 38 -81 -31) -81]
Test Case: 922 | Input/Output: [(9 -47 -14 -18) -47]
Test Case: 923 | Input/Output: [(41 20 -90 -82) -90]
Test Case: 924 | Input/Output: [(53 48 -82 -40) -82]
Test Case: 925 | Input/Output: [(19 -32 10 84) -32]
Test Case: 926 | Input/Output: [(-22 32 -7 58) -22]
Test Case: 927 | Input/Output: [(69 38 -26 -57) -57]
Test Case: 928 | Input/Output: [(99 43 29 -64) -64]
Test Case: 929 | Input/Output: [(11 -51 -45 7) -51]
Test Case: 930 | Input/Output: [(-58 -72 -28 65) -72]
Test Case: 931 | Input/Output: [(15 -91 -22 -52) -91]
Test Case: 932 | Input/Output: [(98 98 -58 82) -58]
Test Case: 933 | Input/Output: [(-52 -54 -78 -9) -78]
Test Case: 934 | Input/Output: [(-95 51 82 11) -95]
Test Case: 935 | Input/Output: [(-53 -30 -14 -54) -54]
Test Case: 936 | Input/Output: [(-61 -6 45 -93) -93]
Test Case: 937 | Input/Output: [(-72 -81 -17 -1) -81]
Test Case: 938 | Input/Output: [(35 49 -6 -59) -59]
Test Case: 939 | Input/Output: [(84 -60 76 54) -60]
Test Case: 940 | Input/Output: [(85 32 14 77) 14]
Test Case: 941 | Input/Output: [(-49 -100 2 64) -100]
Test Case: 942 | Input/Output: [(96 -64 86 31) -64]
Test Case: 943 | Input/Output: [(-59 -56 94 18) -59]
Test Case: 944 | Input/Output: [(19 56 31 92) 19]
Test Case: 945 | Input/Output: [(-47 -87 -71 24) -87]
Test Case: 946 | Input/Output: [(-5 -9 -10 30) -10]
Test Case: 947 | Input/Output: [(47 -33 11 76) -33]
Test Case: 948 | Input/Output: [(-84 16 47 -69) -84]
Test Case: 949 | Input/Output: [(-91 -52 -76 -96) -96]
Test Case: 950 | Input/Output: [(41 -34 19 -48) -48]
Test Case: 951 | Input/Output: [(94 0 -40 -73) -73]
Test Case: 952 | Input/Output: [(10 -29 -62 -1) -62]
Test Case: 953 | Input/Output: [(-6 24 74 2) -6]
Test Case: 954 | Input/Output: [(31 -6 -72 69) -72]
Test Case: 955 | Input/Output: [(55 -76 94 67) -76]
Test Case: 956 | Input/Output: [(6 -41 -73 0) -73]
Test Case: 957 | Input/Output: [(67 -47 -5 2) -47]
Test Case: 958 | Input/Output: [(62 -84 90 73) -84]
Test Case: 959 | Input/Output: [(37 93 -77 81) -77]
Test Case: 960 | Input/Output: [(-43 -60 86 -52) -60]
Test Case: 961 | Input/Output: [(10 -97 45 -54) -97]
Test Case: 962 | Input/Output: [(56 0 65 -19) -19]
Test Case: 963 | Input/Output: [(-34 7 -46 -37) -46]
Test Case: 964 | Input/Output: [(99 -1 -48 43) -48]
Test Case: 965 | Input/Output: [(-85 41 -12 23) -85]
Test Case: 966 | Input/Output: [(58 -50 -76 -15) -76]
Test Case: 967 | Input/Output: [(10 -1 65 -41) -41]
Test Case: 968 | Input/Output: [(-82 31 49 98) -82]
Test Case: 969 | Input/Output: [(-35 -5 -38 -72) -72]
Test Case: 970 | Input/Output: [(-83 -7 9 -15) -83]
Test Case: 971 | Input/Output: [(-82 -82 2 87) -82]
Test Case: 972 | Input/Output: [(-2 24 2 -5) -5]
Test Case: 973 | Input/Output: [(38 95 91 32) 32]
Test Case: 974 | Input/Output: [(48 74 -43 -6) -43]
Test Case: 975 | Input/Output: [(60 -51 68 -41) -51]
Test Case: 976 | Input/Output: [(15 -59 -28 17) -59]
Test Case: 977 | Input/Output: [(21 50 69 27) 21]
Test Case: 978 | Input/Output: [(68 -14 -53 10) -53]
Test Case: 979 | Input/Output: [(-36 65 8 -56) -56]
Test Case: 980 | Input/Output: [(-4 -45 -86 39) -86]
Test Case: 981 | Input/Output: [(12 -10 -28 4) -28]
Test Case: 982 | Input/Output: [(-93 48 -48 -27) -93]
Test Case: 983 | Input/Output: [(-97 43 22 49) -97]
Test Case: 984 | Input/Output: [(9 24 -58 -75) -75]
Test Case: 985 | Input/Output: [(55 96 -91 82) -91]
Test Case: 986 | Input/Output: [(64 -56 31 53) -56]
Test Case: 987 | Input/Output: [(3 16 9 60) 3]
Test Case: 988 | Input/Output: [(-54 66 -37 -95) -95]
Test Case: 989 | Input/Output: [(-79 -38 -34 -52) -79]
Test Case: 990 | Input/Output: [(23 34 1 -68) -68]
Test Case: 991 | Input/Output: [(43 9 -2 -46) -46]
Test Case: 992 | Input/Output: [(9 72 98 91) 9]
Test Case: 993 | Input/Output: [(-49 -49 -100 19) -100]
Test Case: 994 | Input/Output: [(-95 60 55 81) -95]
Test Case: 995 | Input/Output: [(-7 -26 -50 -10) -50]
Test Case: 996 | Input/Output: [(52 -4 -2 -25) -25]
Test Case: 997 | Input/Output: [(90 -53 -91 -74) -91]
Test Case: 998 | Input/Output: [(-68 -38 63 -45) -68]
Test Case: 999 | Input/Output: [(-35 94 -79 -69) -79]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -48 19 108 -40 -80 59 78 -65 -40 83 95 76 12 -51 12 112
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[56 7 56 56] 7] [[36 99 99 99] 36] [[94 50 94 94] 50] [[-100 -100 -82 -100] -100] [[72 81 72 72] 72] [[-44 -44 100 -44] -44] [[-91 -91 -91 -80] -91] [[41 82 41 41] 41] [[-42 -61 -42 -42] -61] [[-48 57 57 57] -48] [(59 59 59 59) 59] [(-76 -76 -76 -76) -76] [(83 83 83 83) 83] [(-73 -73 -73 -73) -73] [(-26 -26 -26 -26) -26] [(48 81 5 69) 5] [(25 6 50 21) 6] [(59 51 51 55) 51] [(13 38 11 58) 11] [(35 44 1 87) 1] [(60 22 12 100) 12] [(93 39 11 15) 11] [(58 77 58 99) 58] [(37 28 20 73) 20] [(48 59 32 55) 32] [(94 32 5 80) 5] [(33 97 17 57) 17] [(13 70 63 90) 13] [(29 86 87 6) 6] [(67 90 21 41) 21] [(30 28 86 82) 28] [(3 56 32 64) 3] [(53 67 59 12) 12] [(51 44 10 11) 10] [(53 9 29 5) 5] [(-20 77 -86 39) -86] [(22 1 52 -6) -6] [(58 -27 -47 57) -47] [(99 -19 24 60) -19] [(99 80 -42 54) -42] [(-2 49 -33 35) -33] [(-24 -86 -71 -47) -86] [(23 -37 -93 78) -93] [(54 -13 -55 -69) -69] [(-61 -6 86 17) -61] [(95 28 48 -94) -94] [(-95 22 69 -2) -95] [(93 69 98 -100) -100] [(56 -43 -21 40) -43] [(82 -40 -35 -82) -82] [(-9 -81 -5 3) -81] [(77 -73 45 19) -73] [(16 -70 -11 -89) -89] [(-78 -16 -14 -98) -98] [(-91 -27 71 -63) -91] [(-57 -97 -18 -52) -97] [(11 74 -95 -15) -95] [(-35 64 -70 -32) -70] [(-27 18 60 54) -27] [(82 -99 80 -24) -99] [(-86 76 22 -25) -86] [(84 80 -30 96) -30] [(-81 -60 -98 61) -98] [(-32 96 78 83) -32] [(39 11 -71 99) -71] [(-100 26 86 84) -100] [(3 -13 52 -90) -90] [(95 70 -96 -52) -96] [(-87 14 5 -95) -95] [(-19 62 -81 -34) -81] [(-11 10 -49 75) -49] [(-41 -29 67 -83) -83] [(68 -26 -51 47) -51] [(44 27 70 -85) -85] [(59 -36 -32 81) -36] [(-24 30 -75 -36) -75] [(-80 43 -76 -92) -92] [(-20 -53 -8 -26) -53] [(-94 60 -55 77) -94] [(-5 28 -2 80) -5] [(-28 -66 -47 -23) -66] [(55 -36 98 -27) -36] [(80 56 73 -85) -85] [(-38 50 -53 51) -53] [(-55 42 32 -41) -55] [(-48 73 2 74) -48] [(95 -86 -35 62) -86] [(48 -73 45 89) -73] [(-73 -79 50 27) -79] [(-83 -53 -44 25) -83] [(12 82 -33 -21) -33] [(91 -65 38 -11) -65] [(-50 -64 -93 -10) -93] [(-21 -46 15 14) -46] [(50 95 93 -68) -68])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_486} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_shove boolean_dup_times integer_gt boolean_invert_second_then_and in3 integer_mod integer_rot boolean_yankdup tagged_486 integer_shove print_integer boolean_empty integer_eq integer_inc exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_inc integer_dup exec_swap (integer_dup_times) ())) ()))
Lexicase best errors: [1 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_486} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_shove boolean_dup_times integer_gt boolean_invert_second_then_and in3 integer_mod integer_rot boolean_yankdup tagged_486 integer_shove print_integer boolean_empty integer_eq integer_inc exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_inc integer_dup exec_swap (integer_dup_times) ())) ()))
Zero cases best errors: [1 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 6 5 3 7 2 5 3 4 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 6 5 3 7 2 5 3 4 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction tagged_535} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap})
Best program: (in3 exec_k (print_integer) (integer_yank print_boolean integer_gt exec_do*while (exec_flush)) boolean_frominteger integer_yankdup print_integer integer_div tagged_535 exec_do*count (integer_dup_times print_boolean exec_yankdup boolean_empty) print_integer exec_stackdepth exec_k () (integer_mult boolean_frominteger integer_mult boolean_dup_items exec_pop (integer_div exec_swap (boolean_dup integer_shove integer_max integer_sub exec_dup () boolean_eq boolean_dup_items exec_do*while (integer_dup integer_dup_times boolean_dup_items) print_exec (integer_rot) exec_s (exec_noop integer_dup_items integer_dup_times integer_lte boolean_yank in4) (exec_do*while () exec_swap () ()) ()) ())))
Errors: [1 1 0 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.996 0.994 0.995 0.997 0.993 0.998 0.995 0.997 0.996 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.779
Average program size in population (points): 68.766
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 507754
--- Timings ---
Current time: 1559593817179 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.6%
Fitness Testing:      1.7 seconds, 66.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: 39                 
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 54                 
Correct output: -33                 | Program output: 35                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: 3                  
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: 96                 
Correct output: -98                 | Program output: 61                 
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: 99                 
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: 75                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 81                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: 77                 
Correct output: -5                  | Program output: 80                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 51                 
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 74                 
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: 25                 
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_exec_472} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_s} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction -61} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 1, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (boolean_pop integer_mod integer_inc in4 exec_noop integer_mult boolean_or exec_yank integer_inc tag_exec_472 (print_boolean integer_pop exec_y_when_autoconstructing (integer_yankdup) boolean_dup exec_yankdup) exec_y_when_autoconstructing () exec_if (in4 exec_do*times () integer_dup exec_eq integer_yankdup integer_dup_items exec_pop ()) (boolean_flush exec_s_when_autoconstructing (boolean_not boolean_or) (exec_noop boolean_xor boolean_pop exec_s () (integer_mult in4 print_integer) (integer_dup_times integer_flush exec_noop integer_rot) integer_lte boolean_eq in3 integer_yank) (exec_flush exec_s () () (in2) integer_mod exec_do*count () integer_gt exec_k (integer_swap integer_lte exec_rot (integer_yank integer_swap integer_rot) () (boolean_frominteger exec_s () (integer_lt boolean_swap -61 boolean_eq) (boolean_not integer_rot exec_dup_items) integer_stackdepth boolean_shove) print_newline) (exec_y_when_autoconstructing (exec_rot () (exec_y () boolean_pop exec_dup_times (boolean_empty boolean_empty) integer_mult) (boolean_flush integer_yankdup exec_do*while (integer_shove) boolean_stackdepth boolean_invert_first_then_and exec_do*times (boolean_not boolean_and integer_stackdepth integer_gte exec_do*count () boolean_dup) print_integer integer_shove) exec_dup_items integer_pop boolean_invert_first_then_and integer_stackdepth)))))
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 131
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_exec_472} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_s} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction -61} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_shove} {:close 1, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (boolean_pop integer_mod integer_inc in4 exec_noop integer_mult boolean_or exec_yank integer_inc tag_exec_472 (print_boolean integer_pop exec_y_when_autoconstructing (integer_yankdup) boolean_dup exec_yankdup) exec_y_when_autoconstructing () exec_if (in4 exec_do*times () integer_dup exec_eq integer_yankdup integer_dup_items exec_pop ()) (boolean_flush exec_s_when_autoconstructing (boolean_not boolean_or) (exec_noop boolean_xor boolean_pop exec_s () (integer_mult in4 print_integer) (integer_dup_times integer_flush exec_noop integer_rot) integer_lte boolean_eq in3 integer_yank) (exec_flush exec_s () () (in2) integer_mod exec_do*count () integer_gt exec_k (integer_swap integer_lte exec_rot (integer_yank integer_swap integer_rot) () (boolean_frominteger exec_s () (integer_lt boolean_swap -61 boolean_eq) (boolean_not integer_rot exec_dup_items) integer_stackdepth boolean_shove) print_newline) (exec_y_when_autoconstructing (exec_rot () (exec_y () boolean_pop exec_dup_times (boolean_empty boolean_empty) integer_mult) (boolean_flush integer_yankdup exec_do*while (integer_shove) boolean_stackdepth boolean_invert_first_then_and exec_do*times (boolean_not boolean_and integer_stackdepth integer_gte exec_do*count () boolean_dup) print_integer integer_shove) exec_dup_items integer_pop boolean_invert_first_then_and integer_stackdepth)))))
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 131
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 250 170 103 102 171 252 103 171 180)
Population mean number of elite cases: 1.60
Count of perfect (error zero) individuals by case: (101 250 170 103 102 171 252 103 171 180)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_eq} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add})
Best program: (integer_dec integer_lt in4 print_integer integer_dup_items exec_eq exec_stackdepth print_boolean integer_add)
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 8.397
Median total errors in population: 8
Error averages by case: (0.899 0.75 0.83 0.897 0.898 0.829 0.748 0.897 0.829 0.82)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.195
Average program size in population (points): 51.837
Average percent parens in population: 0.250
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 834626
--- Timings ---
Current time: 1559593818926 milliseconds
Total Time:           4.5 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         1.9 seconds, 41.1%
Fitness Testing:      2.2 seconds, 49.2%
Report:               0.3 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_shove boolean_dup_times integer_gt integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot in4 tagged_486 integer_dup integer_lte integer_shove print_integer exec_yankdup boolean_empty integer_eq integer_inc exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_and) (integer_dup_times))) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_shove boolean_dup_times integer_gt integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot in4 tagged_486 integer_dup integer_lte integer_shove print_integer exec_yankdup boolean_empty integer_eq integer_inc exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_and) (integer_dup_times))) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 141 280 535 140 140 140 140 140 290)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (138 141 280 535 140 140 140 140 140 290)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_486} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times})
Best program: (integer_shove boolean_dup_times integer_gt boolean_invert_first_then_and in3 integer_mod integer_rot exec_while () boolean_eq boolean_yankdup tagged_486 boolean_dup integer_shove print_integer boolean_empty exec_yank integer_eq integer_inc exec_do*count (exec_eq exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_do*while (boolean_invert_first_then_and integer_inc integer_dup exec_swap (integer_dup_times) ())) ()) ()))
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.916
Median total errors in population: 8
Error averages by case: (0.862 0.859 0.72 0.465 0.86 0.86 0.86 0.86 0.86 0.71)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.933
Average program size in population (points): 42.35
Average percent parens in population: 0.244
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1158595
--- Timings ---
Current time: 1559593820952 milliseconds
Total Time:           6.5 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.2 seconds, 49.8%
Fitness Testing:      2.7 seconds, 40.9%
Report:               0.5 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_shove boolean_or integer_gt integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot in4 tagged_486 integer_dup integer_shove print_integer exec_yankdup boolean_empty integer_eq exec_shove (integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_and) (integer_dup_times))) ()))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_shove boolean_or integer_gt integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot in4 tagged_486 integer_dup integer_shove print_integer exec_yankdup boolean_empty integer_eq exec_shove (integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_and) (integer_dup_times))) ()))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 90 90 4 680 516 513 513 517 175)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (2 90 90 4 680 516 513 513 517 175)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Best program: (integer_shove boolean_or integer_gt integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot in4 tagged_486 integer_dup integer_shove print_integer exec_yankdup boolean_empty integer_eq exec_shove (integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_and) (integer_dup_times))) ()))
Errors: [1 0 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.9
Median total errors in population: 5
Error averages by case: (0.998 0.91 0.91 0.996 0.32 0.484 0.487 0.487 0.483 0.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.799
Average program size in population (points): 48.008
Average percent parens in population: 0.258
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.99
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.99
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1419908
--- Timings ---
Current time: 1559593822890 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.6 seconds, 54.8%
Fitness Testing:      3.0 seconds, 35.5%
Report:               0.7 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction integer_swap} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_shove boolean_or integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot in4 integer_swap tagged_486 integer_dup integer_shove print_integer integer_fromboolean exec_yankdup boolean_empty exec_stackdepth integer_eq exec_shove (exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_yank integer_dup_times) ())) ())))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction integer_swap} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_shove boolean_or integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot in4 integer_swap tagged_486 integer_dup integer_shove print_integer integer_fromboolean exec_yankdup boolean_empty exec_stackdepth integer_eq exec_shove (exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_yank integer_dup_times) ())) ())))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (499 450 724 337 2 448 159 103 708 449)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (499 450 724 337 2 448 159 103 708 449)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Best program: (integer_shove boolean_or integer_gt integer_mod boolean_invert_second_then_and in3 integer_mod integer_rot in4 tagged_486 integer_dup integer_shove integer_min print_integer exec_yankdup boolean_empty integer_eq exec_shove (integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_dup_times (exec_do*while (integer_dup exec_swap (boolean_and) (integer_dup_times)))) ()))
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 6.121
Median total errors in population: 5
Error averages by case: (0.501 0.55 0.276 0.663 0.998 0.552 0.841 0.897 0.292 0.551)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.149
Average program size in population (points): 43.105
Average percent parens in population: 0.248
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1739060
--- Timings ---
Current time: 1559593824731 milliseconds
Total Time:          10.3 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.9 seconds, 57.5%
Fitness Testing:      3.4 seconds, 32.6%
Report:               0.9 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_486} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_shove boolean_or integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot tagged_486 in2 integer_dup integer_shove print_integer exec_yankdup boolean_empty integer_eq exec_pop (exec_dup_times (exec_shove (integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (exec_swap (boolean_and) (integer_dup_times))) ()))))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_486} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_shove boolean_or integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot tagged_486 in2 integer_dup integer_shove print_integer exec_yankdup boolean_empty integer_eq exec_pop (exec_dup_times (exec_shove (integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (exec_swap (boolean_and) (integer_dup_times))) ()))))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (426 94 93 97 572 93 320 99 92 384)
Population mean number of elite cases: 2.27
Count of perfect (error zero) individuals by case: (426 94 93 97 572 93 320 99 92 384)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_486} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Best program: (integer_shove boolean_or integer_gt integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot in4 integer_pop tagged_486 exec_noop in2 integer_dup integer_shove print_integer exec_yankdup boolean_empty integer_eq exec_pop (exec_dup_times (exec_shove (integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_and) (integer_dup_times))) ()))))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.73
Median total errors in population: 7
Error averages by case: (0.574 0.906 0.907 0.903 0.428 0.907 0.68 0.901 0.908 0.616)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.57
Average program size in population (points): 36.407
Average percent parens in population: 0.242
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2079311
--- Timings ---
Current time: 1559593826450 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.1 seconds, 58.8%
Fitness Testing:      3.7 seconds, 31.0%
Report:               1.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_486} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_max integer_shove boolean_or integer_gt integer_mod exec_yankdup boolean_invert_second_then_and in3 exec_do*range () integer_gt exec_y_when_autoconstructing (integer_rot boolean_pop) tagged_486 in2 integer_dup integer_shove print_integer exec_yankdup boolean_empty integer_eq exec_dup_times (integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_and) (integer_dup_times))) ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_486} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_max integer_shove boolean_or integer_gt integer_mod exec_yankdup boolean_invert_second_then_and in3 exec_do*range () integer_gt exec_y_when_autoconstructing (integer_rot boolean_pop) tagged_486 in2 integer_dup integer_shove print_integer exec_yankdup boolean_empty integer_eq exec_dup_times (integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_do*while (integer_dup exec_swap (boolean_and) (integer_dup_times))) ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (476 407 498 406 102 407 512 181 418 416)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (476 407 498 406 102 407 512 181 418 416)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_486} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_and})
Best program: (integer_shove boolean_or integer_gt integer_mod boolean_invert_second_then_and in3 integer_gt integer_mod integer_rot in4 integer_dup_items tagged_486 boolean_empty in2 integer_dup integer_shove print_integer exec_yankdup exec_k () (boolean_empty integer_eq exec_pop (exec_dup_times (exec_shove (boolean_invert_first_then_and integer_inc) exec_do*count (exec_eq exec_k_when_autoconstructing (exec_swap (integer_rot) (boolean_and)) ())))))
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.177
Median total errors in population: 6
Error averages by case: (0.524 0.593 0.502 0.594 0.898 0.593 0.488 0.819 0.582 0.584)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.482
Average program size in population (points): 40.595
Average percent parens in population: 0.247
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.009
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2440095
--- Timings ---
Current time: 1559593828159 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.2 seconds, 59.7%
Fitness Testing:      4.1 seconds, 30.0%
Report:               1.3 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 207
Test mean error for best: 0.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_shove boolean_or integer_gt integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq integer_inc exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup boolean_dup_times) exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_shove boolean_or integer_gt integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq integer_inc exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup boolean_dup_times) exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (49 463 105 362 105 382 205 105 404 456)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (49 463 105 362 105 382 205 105 404 456)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times})
Best program: (integer_shove boolean_or integer_gt integer_mod exec_s (integer_dup boolean_invert_second_then_and in3 integer_mod integer_rot in1) (in4 integer_dup integer_shove) (integer_min) print_integer integer_inc integer_max exec_yank boolean_or boolean_invert_first_then_and exec_k_when_autoconstructing (exec_dup_times (exec_do*while (integer_dup boolean_dup_times) exec_swap (boolean_and) (integer_dec integer_dup_times integer_dup_times))) ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 31
Size: 41
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.364
Median total errors in population: 8
Error averages by case: (0.951 0.537 0.895 0.638 0.895 0.618 0.795 0.895 0.596 0.544)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.039
Average program size in population (points): 41.693
Average percent parens in population: 0.254
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2812940
--- Timings ---
Current time: 1559593829927 milliseconds
Total Time:          15.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.3 seconds, 60.4%
Fitness Testing:      4.5 seconds, 29.3%
Report:               1.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 207
Test mean error for best: 0.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_shove boolean_or integer_gt integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq integer_inc exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup boolean_dup_times) exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_shove boolean_or integer_gt integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq integer_inc exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup boolean_dup_times) exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 131 423 426 426 428 424 377 320 394)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (383 131 423 426 426 428 424 377 320 394)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times})
Best program: (integer_shove boolean_or integer_gt exec_s (integer_dup boolean_invert_second_then_and in3 integer_mod integer_rot in1) (in4 integer_dup integer_shove) (integer_min) print_integer integer_inc integer_max exec_yank boolean_or boolean_invert_first_then_and exec_dup_times (exec_do*while (integer_dup boolean_dup_times) boolean_xor) exec_swap (boolean_and) (integer_dec integer_dup_times integer_dup_times))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.268
Median total errors in population: 7
Error averages by case: (0.617 0.869 0.577 0.574 0.574 0.572 0.576 0.623 0.68 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.699
Average program size in population (points): 40.187
Average percent parens in population: 0.233
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.01
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3279699
--- Timings ---
Current time: 1559593831769 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 60.5%
Fitness Testing:      5.0 seconds, 28.9%
Report:               1.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 177
Test mean error for best: 0.17700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_s (integer_shove boolean_or boolean_invert_second_then_and integer_mod exec_s (boolean_swap boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_max integer_eq boolean_swap exec_do*count (boolean_eq exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup boolean_dup_times) exec_while (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 52
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_s (integer_shove boolean_or boolean_invert_second_then_and integer_mod exec_s (boolean_swap boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_max integer_eq boolean_swap exec_do*count (boolean_eq exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup boolean_dup_times) exec_while (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 52
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (423 404 591 397 217 566 412 222 642 421)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (423 404 591 397 217 566 412 222 642 421)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction tagged_486} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times})
Best program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 34
Size: 47
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 5.705
Median total errors in population: 5
Error averages by case: (0.577 0.596 0.409 0.603 0.783 0.434 0.588 0.778 0.358 0.579)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.389
Average program size in population (points): 41.858
Average percent parens in population: 0.247
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3861516
--- Timings ---
Current time: 1559593834034 milliseconds
Total Time:          19.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.6 seconds, 60.2%
Fitness Testing:      5.6 seconds, 29.1%
Report:               2.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 9
Successful program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 47


Auto-simplifying with starting size: 47
step: 0
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 500
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 1000
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 1500
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 2000
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 2500
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 3000
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 3500
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 4000
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 4500
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 5000
program: (exec_s (integer_shove boolean_or integer_gt) (integer_mod exec_s (boolean_invert_second_then_and in3 integer_mod integer_shove integer_rot in1) (in2 in4 tagged_486 integer_dup integer_shove) (integer_min) print_integer integer_eq exec_do*count (exec_yank boolean_invert_first_then_and exec_k_when_autoconstructing (integer_lte) (exec_do*while (exec_yankdup) integer_dup exec_stackdepth)) boolean_dup_times) (exec_swap (boolean_and) (integer_dup_times integer_dup_times)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 177
Test mean error for best: 0.17700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
