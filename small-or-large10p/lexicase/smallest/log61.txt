Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[31 46 31 31] 31] [[-13 -62 -13 -13] -62] [[-5 -5 41 -5] -5] [[-19 -49 -49 -49] -49] [[-90 -90 -12 -90] -90] [[8 58 8 8] 8] [[80 15 80 80] 15] [[-46 -9 -9 -9] -46] [[-37 -80 -37 -37] -80] [[-9 -9 -90 -9] -90] [(-35 -35 -35 -35) -35] [(88 88 88 88) 88] [(21 21 21 21) 21] [(34 34 34 34) 34] [(44 44 44 44) 44] [(65 84 8 16) 8] [(20 50 100 56) 20] [(28 87 41 67) 28] [(100 7 22 54) 7] [(79 88 85 4) 4] [(35 91 55 16) 16] [(82 12 77 56) 12] [(63 37 39 50) 37] [(24 35 52 11) 11] [(88 33 56 72) 33] [(12 52 44 47) 12] [(59 1 25 8) 1] [(5 72 3 99) 3] [(27 90 48 46) 27] [(79 95 17 82) 17] [(81 74 83 93) 74] [(8 38 76 80) 8] [(50 3 18 22) 3] [(9 7 44 3) 3] [(18 31 93 96) 18] [(88 -8 -28 -98) -98] [(-42 68 -70 85) -70] [(90 -6 60 -92) -92] [(-68 56 -86 23) -86] [(-20 64 -21 -85) -85] [(5 -64 -68 -59) -68] [(6 44 -15 -61) -61] [(-91 40 -70 5) -91] [(51 -68 88 43) -68] [(-92 2 -74 99) -92] [(-88 -44 -37 -88) -88] [(26 -34 -40 80) -40] [(-25 -2 43 79) -25] [(48 82 -68 -74) -74] [(59 -43 78 -17) -43] [(31 31 47 62) 31] [(60 5 -35 -38) -38] [(-53 -43 44 47) -53] [(-80 -74 8 -80) -80] [(80 -3 46 16) -3] [(86 14 20 -5) -5] [(-100 52 -74 -45) -100] [(-83 -55 8 10) -83] [(-35 88 64 41) -35] [(-6 17 -7 -99) -99] [(88 -62 -82 19) -82] [(-46 73 22 32) -46] [(3 44 -33 70) -33] [(85 85 75 -52) -52] [(100 87 96 -41) -41] [(7 -32 -95 36) -95] [(-65 84 -64 10) -65] [(-69 12 10 20) -69] [(-68 17 -52 -94) -94] [(-42 10 58 -33) -42] [(6 8 20 -7) -7] [(99 -1 -10 96) -10] [(43 -78 -78 72) -78] [(34 -19 100 91) -19] [(-67 51 45 -4) -67] [(96 58 21 100) 21] [(-52 -79 35 17) -79] [(76 -55 90 -61) -61] [(86 -83 -2 -4) -83] [(79 81 21 91) 21] [(35 19 83 83) 19] [(-39 -88 -20 69) -88] [(-32 72 -83 -80) -83] [(54 15 -52 81) -52] [(-14 22 -86 -2) -86] [(-98 -47 -13 -87) -98] [(-50 -18 -5 -17) -50] [(81 56 47 98) 47] [(73 -3 20 -33) -33] [(-54 69 -100 42) -100] [(18 32 -80 -41) -80] [(40 37 84 30) 30] [(90 7 3 -4) -4] [(-78 -99 -34 -100) -100] [(-96 -88 81 100) -96])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[31 46 31 31] 31]
Train Case:   6 | Input/Output: [[-13 -62 -13 -13] -62]
Train Case:   7 | Input/Output: [[-5 -5 41 -5] -5]
Train Case:   8 | Input/Output: [[-19 -49 -49 -49] -49]
Train Case:   9 | Input/Output: [[-90 -90 -12 -90] -90]
Train Case:  10 | Input/Output: [[8 58 8 8] 8]
Train Case:  11 | Input/Output: [[80 15 80 80] 15]
Train Case:  12 | Input/Output: [[-46 -9 -9 -9] -46]
Train Case:  13 | Input/Output: [[-37 -80 -37 -37] -80]
Train Case:  14 | Input/Output: [[-9 -9 -90 -9] -90]
Train Case:  15 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  16 | Input/Output: [(88 88 88 88) 88]
Train Case:  17 | Input/Output: [(21 21 21 21) 21]
Train Case:  18 | Input/Output: [(34 34 34 34) 34]
Train Case:  19 | Input/Output: [(44 44 44 44) 44]
Train Case:  20 | Input/Output: [(65 84 8 16) 8]
Train Case:  21 | Input/Output: [(20 50 100 56) 20]
Train Case:  22 | Input/Output: [(28 87 41 67) 28]
Train Case:  23 | Input/Output: [(100 7 22 54) 7]
Train Case:  24 | Input/Output: [(79 88 85 4) 4]
Train Case:  25 | Input/Output: [(35 91 55 16) 16]
Train Case:  26 | Input/Output: [(82 12 77 56) 12]
Train Case:  27 | Input/Output: [(63 37 39 50) 37]
Train Case:  28 | Input/Output: [(24 35 52 11) 11]
Train Case:  29 | Input/Output: [(88 33 56 72) 33]
Train Case:  30 | Input/Output: [(12 52 44 47) 12]
Train Case:  31 | Input/Output: [(59 1 25 8) 1]
Train Case:  32 | Input/Output: [(5 72 3 99) 3]
Train Case:  33 | Input/Output: [(27 90 48 46) 27]
Train Case:  34 | Input/Output: [(79 95 17 82) 17]
Train Case:  35 | Input/Output: [(81 74 83 93) 74]
Train Case:  36 | Input/Output: [(8 38 76 80) 8]
Train Case:  37 | Input/Output: [(50 3 18 22) 3]
Train Case:  38 | Input/Output: [(9 7 44 3) 3]
Train Case:  39 | Input/Output: [(18 31 93 96) 18]
Train Case:  40 | Input/Output: [(88 -8 -28 -98) -98]
Train Case:  41 | Input/Output: [(-42 68 -70 85) -70]
Train Case:  42 | Input/Output: [(90 -6 60 -92) -92]
Train Case:  43 | Input/Output: [(-68 56 -86 23) -86]
Train Case:  44 | Input/Output: [(-20 64 -21 -85) -85]
Train Case:  45 | Input/Output: [(5 -64 -68 -59) -68]
Train Case:  46 | Input/Output: [(6 44 -15 -61) -61]
Train Case:  47 | Input/Output: [(-91 40 -70 5) -91]
Train Case:  48 | Input/Output: [(51 -68 88 43) -68]
Train Case:  49 | Input/Output: [(-92 2 -74 99) -92]
Train Case:  50 | Input/Output: [(-88 -44 -37 -88) -88]
Train Case:  51 | Input/Output: [(26 -34 -40 80) -40]
Train Case:  52 | Input/Output: [(-25 -2 43 79) -25]
Train Case:  53 | Input/Output: [(48 82 -68 -74) -74]
Train Case:  54 | Input/Output: [(59 -43 78 -17) -43]
Train Case:  55 | Input/Output: [(31 31 47 62) 31]
Train Case:  56 | Input/Output: [(60 5 -35 -38) -38]
Train Case:  57 | Input/Output: [(-53 -43 44 47) -53]
Train Case:  58 | Input/Output: [(-80 -74 8 -80) -80]
Train Case:  59 | Input/Output: [(80 -3 46 16) -3]
Train Case:  60 | Input/Output: [(86 14 20 -5) -5]
Train Case:  61 | Input/Output: [(-100 52 -74 -45) -100]
Train Case:  62 | Input/Output: [(-83 -55 8 10) -83]
Train Case:  63 | Input/Output: [(-35 88 64 41) -35]
Train Case:  64 | Input/Output: [(-6 17 -7 -99) -99]
Train Case:  65 | Input/Output: [(88 -62 -82 19) -82]
Train Case:  66 | Input/Output: [(-46 73 22 32) -46]
Train Case:  67 | Input/Output: [(3 44 -33 70) -33]
Train Case:  68 | Input/Output: [(85 85 75 -52) -52]
Train Case:  69 | Input/Output: [(100 87 96 -41) -41]
Train Case:  70 | Input/Output: [(7 -32 -95 36) -95]
Train Case:  71 | Input/Output: [(-65 84 -64 10) -65]
Train Case:  72 | Input/Output: [(-69 12 10 20) -69]
Train Case:  73 | Input/Output: [(-68 17 -52 -94) -94]
Train Case:  74 | Input/Output: [(-42 10 58 -33) -42]
Train Case:  75 | Input/Output: [(6 8 20 -7) -7]
Train Case:  76 | Input/Output: [(99 -1 -10 96) -10]
Train Case:  77 | Input/Output: [(43 -78 -78 72) -78]
Train Case:  78 | Input/Output: [(34 -19 100 91) -19]
Train Case:  79 | Input/Output: [(-67 51 45 -4) -67]
Train Case:  80 | Input/Output: [(96 58 21 100) 21]
Train Case:  81 | Input/Output: [(-52 -79 35 17) -79]
Train Case:  82 | Input/Output: [(76 -55 90 -61) -61]
Train Case:  83 | Input/Output: [(86 -83 -2 -4) -83]
Train Case:  84 | Input/Output: [(79 81 21 91) 21]
Train Case:  85 | Input/Output: [(35 19 83 83) 19]
Train Case:  86 | Input/Output: [(-39 -88 -20 69) -88]
Train Case:  87 | Input/Output: [(-32 72 -83 -80) -83]
Train Case:  88 | Input/Output: [(54 15 -52 81) -52]
Train Case:  89 | Input/Output: [(-14 22 -86 -2) -86]
Train Case:  90 | Input/Output: [(-98 -47 -13 -87) -98]
Train Case:  91 | Input/Output: [(-50 -18 -5 -17) -50]
Train Case:  92 | Input/Output: [(81 56 47 98) 47]
Train Case:  93 | Input/Output: [(73 -3 20 -33) -33]
Train Case:  94 | Input/Output: [(-54 69 -100 42) -100]
Train Case:  95 | Input/Output: [(18 32 -80 -41) -80]
Train Case:  96 | Input/Output: [(40 37 84 30) 30]
Train Case:  97 | Input/Output: [(90 7 3 -4) -4]
Train Case:  98 | Input/Output: [(-78 -99 -34 -100) -100]
Train Case:  99 | Input/Output: [(-96 -88 81 100) -96]
Test Case:   0 | Input/Output: [[-50 -61 -50 -50] -61]
Test Case:   1 | Input/Output: [[49 -38 49 49] -38]
Test Case:   2 | Input/Output: [[46 46 -36 46] -36]
Test Case:   3 | Input/Output: [[-85 28 28 28] -85]
Test Case:   4 | Input/Output: [[-86 6 6 6] -86]
Test Case:   5 | Input/Output: [[50 50 88 50] 50]
Test Case:   6 | Input/Output: [[-99 -99 -61 -99] -99]
Test Case:   7 | Input/Output: [[-9 -81 -81 -81] -81]
Test Case:   8 | Input/Output: [[-43 -65 -43 -43] -65]
Test Case:   9 | Input/Output: [[-13 -13 46 -13] -13]
Test Case:  10 | Input/Output: [[74 74 74 -20] -20]
Test Case:  11 | Input/Output: [[94 13 94 94] 13]
Test Case:  12 | Input/Output: [[12 12 12 13] 12]
Test Case:  13 | Input/Output: [[34 -94 -94 -94] -94]
Test Case:  14 | Input/Output: [[-64 -28 -64 -64] -64]
Test Case:  15 | Input/Output: [[43 7 43 43] 7]
Test Case:  16 | Input/Output: [[-12 -12 -96 -12] -96]
Test Case:  17 | Input/Output: [[-27 -27 -27 -99] -99]
Test Case:  18 | Input/Output: [[70 27 70 70] 27]
Test Case:  19 | Input/Output: [[85 16 16 16] 16]
Test Case:  20 | Input/Output: [[96 94 94 94] 94]
Test Case:  21 | Input/Output: [[97 -93 -93 -93] -93]
Test Case:  22 | Input/Output: [[-75 -75 -75 66] -75]
Test Case:  23 | Input/Output: [[-59 -59 -59 -83] -83]
Test Case:  24 | Input/Output: [[83 83 83 30] 30]
Test Case:  25 | Input/Output: [[-15 -7 -7 -7] -15]
Test Case:  26 | Input/Output: [[14 -31 -31 -31] -31]
Test Case:  27 | Input/Output: [[9 95 95 95] 9]
Test Case:  28 | Input/Output: [[49 -23 -23 -23] -23]
Test Case:  29 | Input/Output: [[26 -69 -69 -69] -69]
Test Case:  30 | Input/Output: [[78 -64 78 78] -64]
Test Case:  31 | Input/Output: [[45 45 -4 45] -4]
Test Case:  32 | Input/Output: [[52 35 52 52] 35]
Test Case:  33 | Input/Output: [[77 20 20 20] 20]
Test Case:  34 | Input/Output: [[7 7 30 7] 7]
Test Case:  35 | Input/Output: [[-48 10 -48 -48] -48]
Test Case:  36 | Input/Output: [[-66 82 -66 -66] -66]
Test Case:  37 | Input/Output: [[50 50 76 50] 50]
Test Case:  38 | Input/Output: [[-51 -49 -51 -51] -51]
Test Case:  39 | Input/Output: [[-16 60 60 60] -16]
Test Case:  40 | Input/Output: [[88 75 88 88] 75]
Test Case:  41 | Input/Output: [[2 -62 2 2] -62]
Test Case:  42 | Input/Output: [[10 2 10 10] 2]
Test Case:  43 | Input/Output: [[-52 -91 -91 -91] -91]
Test Case:  44 | Input/Output: [[60 60 60 -1] -1]
Test Case:  45 | Input/Output: [[6 58 58 58] 6]
Test Case:  46 | Input/Output: [[38 38 38 17] 17]
Test Case:  47 | Input/Output: [[93 93 -3 93] -3]
Test Case:  48 | Input/Output: [[-25 -25 38 -25] -25]
Test Case:  49 | Input/Output: [[5 5 93 5] 5]
Test Case:  50 | Input/Output: [[-68 79 79 79] -68]
Test Case:  51 | Input/Output: [[-31 23 -31 -31] -31]
Test Case:  52 | Input/Output: [[99 99 62 99] 62]
Test Case:  53 | Input/Output: [[80 80 80 -52] -52]
Test Case:  54 | Input/Output: [[17 -20 17 17] -20]
Test Case:  55 | Input/Output: [[-81 87 -81 -81] -81]
Test Case:  56 | Input/Output: [[-71 -71 -7 -71] -71]
Test Case:  57 | Input/Output: [[93 93 93 94] 93]
Test Case:  58 | Input/Output: [[-64 19 -64 -64] -64]
Test Case:  59 | Input/Output: [[-11 -11 -11 40] -11]
Test Case:  60 | Input/Output: [[-90 -90 -90 -36] -90]
Test Case:  61 | Input/Output: [[93 93 93 65] 65]
Test Case:  62 | Input/Output: [[16 16 16 -91] -91]
Test Case:  63 | Input/Output: [[-13 -19 -19 -19] -19]
Test Case:  64 | Input/Output: [[-31 -31 -31 65] -31]
Test Case:  65 | Input/Output: [[-68 35 35 35] -68]
Test Case:  66 | Input/Output: [[71 71 71 68] 68]
Test Case:  67 | Input/Output: [[96 96 -91 96] -91]
Test Case:  68 | Input/Output: [[-83 -83 -83 -16] -83]
Test Case:  69 | Input/Output: [[-67 -24 -24 -24] -67]
Test Case:  70 | Input/Output: [[-77 -19 -19 -19] -77]
Test Case:  71 | Input/Output: [[63 63 -98 63] -98]
Test Case:  72 | Input/Output: [[99 52 99 99] 52]
Test Case:  73 | Input/Output: [[-79 -79 -79 -42] -79]
Test Case:  74 | Input/Output: [[46 -31 46 46] -31]
Test Case:  75 | Input/Output: [[-95 -95 -95 17] -95]
Test Case:  76 | Input/Output: [[-70 -89 -70 -70] -89]
Test Case:  77 | Input/Output: [[-73 -89 -73 -73] -89]
Test Case:  78 | Input/Output: [[16 16 41 16] 16]
Test Case:  79 | Input/Output: [[66 66 -70 66] -70]
Test Case:  80 | Input/Output: [[-9 -30 -30 -30] -30]
Test Case:  81 | Input/Output: [[85 85 66 85] 66]
Test Case:  82 | Input/Output: [[-74 -74 82 -74] -74]
Test Case:  83 | Input/Output: [[-9 -31 -31 -31] -31]
Test Case:  84 | Input/Output: [[35 35 -51 35] -51]
Test Case:  85 | Input/Output: [[52 52 52 -43] -43]
Test Case:  86 | Input/Output: [[10 11 10 10] 10]
Test Case:  87 | Input/Output: [[-54 -54 75 -54] -54]
Test Case:  88 | Input/Output: [[54 54 65 54] 54]
Test Case:  89 | Input/Output: [[-32 -47 -47 -47] -47]
Test Case:  90 | Input/Output: [[-28 -28 31 -28] -28]
Test Case:  91 | Input/Output: [[24 57 57 57] 24]
Test Case:  92 | Input/Output: [[-87 -87 70 -87] -87]
Test Case:  93 | Input/Output: [[-88 -88 -88 -32] -88]
Test Case:  94 | Input/Output: [[48 48 -67 48] -67]
Test Case:  95 | Input/Output: [[-28 -46 -46 -46] -46]
Test Case:  96 | Input/Output: [[-39 -39 -39 -27] -39]
Test Case:  97 | Input/Output: [[-8 -63 -8 -8] -63]
Test Case:  98 | Input/Output: [[2 60 60 60] 2]
Test Case:  99 | Input/Output: [[-63 -98 -63 -63] -98]
Test Case: 100 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 101 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 102 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 103 | Input/Output: [(35 35 35 35) 35]
Test Case: 104 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 105 | Input/Output: [(61 61 61 61) 61]
Test Case: 106 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 107 | Input/Output: [(4 4 4 4) 4]
Test Case: 108 | Input/Output: [(31 31 31 31) 31]
Test Case: 109 | Input/Output: [(59 59 59 59) 59]
Test Case: 110 | Input/Output: [(14 14 14 14) 14]
Test Case: 111 | Input/Output: [(52 52 52 52) 52]
Test Case: 112 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 113 | Input/Output: [(11 11 11 11) 11]
Test Case: 114 | Input/Output: [(41 41 41 41) 41]
Test Case: 115 | Input/Output: [(76 76 76 76) 76]
Test Case: 116 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 117 | Input/Output: [(19 19 19 19) 19]
Test Case: 118 | Input/Output: [(27 27 27 27) 27]
Test Case: 119 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 120 | Input/Output: [(39 39 39 39) 39]
Test Case: 121 | Input/Output: [(43 43 43 43) 43]
Test Case: 122 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 123 | Input/Output: [(31 31 31 31) 31]
Test Case: 124 | Input/Output: [(51 51 51 51) 51]
Test Case: 125 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 126 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 127 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 128 | Input/Output: [(16 16 16 16) 16]
Test Case: 129 | Input/Output: [(47 47 47 47) 47]
Test Case: 130 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 131 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 132 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 133 | Input/Output: [(55 55 55 55) 55]
Test Case: 134 | Input/Output: [(5 5 5 5) 5]
Test Case: 135 | Input/Output: [(10 10 10 10) 10]
Test Case: 136 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 137 | Input/Output: [(34 34 34 34) 34]
Test Case: 138 | Input/Output: [(24 24 24 24) 24]
Test Case: 139 | Input/Output: [(4 4 4 4) 4]
Test Case: 140 | Input/Output: [(39 39 39 39) 39]
Test Case: 141 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 142 | Input/Output: [(47 47 47 47) 47]
Test Case: 143 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 144 | Input/Output: [(3 3 3 3) 3]
Test Case: 145 | Input/Output: [(75 75 75 75) 75]
Test Case: 146 | Input/Output: [(27 27 27 27) 27]
Test Case: 147 | Input/Output: [(83 83 83 83) 83]
Test Case: 148 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 149 | Input/Output: [(69 69 69 69) 69]
Test Case: 150 | Input/Output: [(71 71 71 71) 71]
Test Case: 151 | Input/Output: [(30 30 30 30) 30]
Test Case: 152 | Input/Output: [(1 1 1 1) 1]
Test Case: 153 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 154 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 155 | Input/Output: [(93 93 93 93) 93]
Test Case: 156 | Input/Output: [(86 86 86 86) 86]
Test Case: 157 | Input/Output: [(79 79 79 79) 79]
Test Case: 158 | Input/Output: [(12 12 12 12) 12]
Test Case: 159 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 160 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 161 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 162 | Input/Output: [(84 84 84 84) 84]
Test Case: 163 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 164 | Input/Output: [(74 74 74 74) 74]
Test Case: 165 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 166 | Input/Output: [(0 0 0 0) 0]
Test Case: 167 | Input/Output: [(13 13 13 13) 13]
Test Case: 168 | Input/Output: [(21 21 21 21) 21]
Test Case: 169 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 170 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 171 | Input/Output: [(79 79 79 79) 79]
Test Case: 172 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 173 | Input/Output: [(92 92 92 92) 92]
Test Case: 174 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 175 | Input/Output: [(88 88 88 88) 88]
Test Case: 176 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 177 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 178 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 179 | Input/Output: [(41 41 41 41) 41]
Test Case: 180 | Input/Output: [(43 43 43 43) 43]
Test Case: 181 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 182 | Input/Output: [(21 21 21 21) 21]
Test Case: 183 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 184 | Input/Output: [(10 10 10 10) 10]
Test Case: 185 | Input/Output: [(49 49 49 49) 49]
Test Case: 186 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 187 | Input/Output: [(99 99 99 99) 99]
Test Case: 188 | Input/Output: [(34 34 34 34) 34]
Test Case: 189 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 190 | Input/Output: [(36 36 36 36) 36]
Test Case: 191 | Input/Output: [(73 73 73 73) 73]
Test Case: 192 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 193 | Input/Output: [(85 85 85 85) 85]
Test Case: 194 | Input/Output: [(38 38 38 38) 38]
Test Case: 195 | Input/Output: [(63 63 63 63) 63]
Test Case: 196 | Input/Output: [(49 49 49 49) 49]
Test Case: 197 | Input/Output: [(65 65 65 65) 65]
Test Case: 198 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 199 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 200 | Input/Output: [(5 21 6 87) 5]
Test Case: 201 | Input/Output: [(28 90 0 91) 0]
Test Case: 202 | Input/Output: [(60 79 16 77) 16]
Test Case: 203 | Input/Output: [(5 85 73 98) 5]
Test Case: 204 | Input/Output: [(19 47 40 46) 19]
Test Case: 205 | Input/Output: [(92 84 42 49) 42]
Test Case: 206 | Input/Output: [(55 43 62 36) 36]
Test Case: 207 | Input/Output: [(9 86 59 99) 9]
Test Case: 208 | Input/Output: [(36 39 10 93) 10]
Test Case: 209 | Input/Output: [(47 85 67 66) 47]
Test Case: 210 | Input/Output: [(27 64 7 76) 7]
Test Case: 211 | Input/Output: [(49 2 16 3) 2]
Test Case: 212 | Input/Output: [(6 6 29 25) 6]
Test Case: 213 | Input/Output: [(70 95 48 83) 48]
Test Case: 214 | Input/Output: [(16 11 8 29) 8]
Test Case: 215 | Input/Output: [(70 63 84 82) 63]
Test Case: 216 | Input/Output: [(57 44 42 92) 42]
Test Case: 217 | Input/Output: [(79 37 97 8) 8]
Test Case: 218 | Input/Output: [(2 1 22 48) 1]
Test Case: 219 | Input/Output: [(41 67 19 13) 13]
Test Case: 220 | Input/Output: [(87 63 79 24) 24]
Test Case: 221 | Input/Output: [(22 56 63 68) 22]
Test Case: 222 | Input/Output: [(90 17 73 69) 17]
Test Case: 223 | Input/Output: [(13 1 14 92) 1]
Test Case: 224 | Input/Output: [(34 5 35 96) 5]
Test Case: 225 | Input/Output: [(75 75 89 51) 51]
Test Case: 226 | Input/Output: [(26 97 24 99) 24]
Test Case: 227 | Input/Output: [(100 11 38 90) 11]
Test Case: 228 | Input/Output: [(75 49 73 26) 26]
Test Case: 229 | Input/Output: [(26 23 96 4) 4]
Test Case: 230 | Input/Output: [(37 2 76 100) 2]
Test Case: 231 | Input/Output: [(86 14 14 94) 14]
Test Case: 232 | Input/Output: [(86 65 44 26) 26]
Test Case: 233 | Input/Output: [(92 44 55 100) 44]
Test Case: 234 | Input/Output: [(93 30 72 73) 30]
Test Case: 235 | Input/Output: [(93 9 48 38) 9]
Test Case: 236 | Input/Output: [(53 99 4 46) 4]
Test Case: 237 | Input/Output: [(81 77 36 80) 36]
Test Case: 238 | Input/Output: [(98 72 7 5) 5]
Test Case: 239 | Input/Output: [(88 85 71 53) 53]
Test Case: 240 | Input/Output: [(76 24 41 5) 5]
Test Case: 241 | Input/Output: [(57 0 6 83) 0]
Test Case: 242 | Input/Output: [(28 43 88 55) 28]
Test Case: 243 | Input/Output: [(20 69 39 51) 20]
Test Case: 244 | Input/Output: [(36 31 52 32) 31]
Test Case: 245 | Input/Output: [(100 73 100 54) 54]
Test Case: 246 | Input/Output: [(19 1 35 90) 1]
Test Case: 247 | Input/Output: [(70 85 57 16) 16]
Test Case: 248 | Input/Output: [(72 65 88 94) 65]
Test Case: 249 | Input/Output: [(15 61 12 30) 12]
Test Case: 250 | Input/Output: [(50 16 95 24) 16]
Test Case: 251 | Input/Output: [(93 84 93 5) 5]
Test Case: 252 | Input/Output: [(45 91 48 77) 45]
Test Case: 253 | Input/Output: [(71 9 49 74) 9]
Test Case: 254 | Input/Output: [(5 51 65 64) 5]
Test Case: 255 | Input/Output: [(46 10 76 92) 10]
Test Case: 256 | Input/Output: [(98 84 25 29) 25]
Test Case: 257 | Input/Output: [(78 6 47 65) 6]
Test Case: 258 | Input/Output: [(31 87 75 8) 8]
Test Case: 259 | Input/Output: [(36 41 88 60) 36]
Test Case: 260 | Input/Output: [(85 9 17 11) 9]
Test Case: 261 | Input/Output: [(10 62 31 77) 10]
Test Case: 262 | Input/Output: [(41 94 34 29) 29]
Test Case: 263 | Input/Output: [(48 1 80 26) 1]
Test Case: 264 | Input/Output: [(15 47 43 87) 15]
Test Case: 265 | Input/Output: [(22 61 68 29) 22]
Test Case: 266 | Input/Output: [(91 33 6 7) 6]
Test Case: 267 | Input/Output: [(80 5 67 45) 5]
Test Case: 268 | Input/Output: [(89 53 22 49) 22]
Test Case: 269 | Input/Output: [(86 38 13 59) 13]
Test Case: 270 | Input/Output: [(80 84 83 99) 80]
Test Case: 271 | Input/Output: [(88 90 0 97) 0]
Test Case: 272 | Input/Output: [(65 5 81 22) 5]
Test Case: 273 | Input/Output: [(18 12 52 99) 12]
Test Case: 274 | Input/Output: [(92 6 48 2) 2]
Test Case: 275 | Input/Output: [(67 99 14 50) 14]
Test Case: 276 | Input/Output: [(3 47 79 37) 3]
Test Case: 277 | Input/Output: [(62 99 64 50) 50]
Test Case: 278 | Input/Output: [(17 3 98 89) 3]
Test Case: 279 | Input/Output: [(30 85 14 50) 14]
Test Case: 280 | Input/Output: [(13 5 46 96) 5]
Test Case: 281 | Input/Output: [(96 75 17 19) 17]
Test Case: 282 | Input/Output: [(49 20 90 91) 20]
Test Case: 283 | Input/Output: [(28 84 51 23) 23]
Test Case: 284 | Input/Output: [(37 1 1 75) 1]
Test Case: 285 | Input/Output: [(69 69 79 9) 9]
Test Case: 286 | Input/Output: [(77 61 70 32) 32]
Test Case: 287 | Input/Output: [(35 46 65 89) 35]
Test Case: 288 | Input/Output: [(41 91 0 30) 0]
Test Case: 289 | Input/Output: [(42 60 85 58) 42]
Test Case: 290 | Input/Output: [(37 99 98 69) 37]
Test Case: 291 | Input/Output: [(72 17 44 28) 17]
Test Case: 292 | Input/Output: [(73 25 90 74) 25]
Test Case: 293 | Input/Output: [(34 0 15 45) 0]
Test Case: 294 | Input/Output: [(45 24 81 47) 24]
Test Case: 295 | Input/Output: [(12 71 41 92) 12]
Test Case: 296 | Input/Output: [(94 88 71 79) 71]
Test Case: 297 | Input/Output: [(29 31 55 54) 29]
Test Case: 298 | Input/Output: [(27 74 19 58) 19]
Test Case: 299 | Input/Output: [(81 54 98 25) 25]
Test Case: 300 | Input/Output: [(47 6 55 100) 6]
Test Case: 301 | Input/Output: [(67 57 11 32) 11]
Test Case: 302 | Input/Output: [(40 68 11 2) 2]
Test Case: 303 | Input/Output: [(44 38 69 50) 38]
Test Case: 304 | Input/Output: [(19 78 65 89) 19]
Test Case: 305 | Input/Output: [(5 25 77 38) 5]
Test Case: 306 | Input/Output: [(14 31 66 37) 14]
Test Case: 307 | Input/Output: [(53 64 87 56) 53]
Test Case: 308 | Input/Output: [(34 58 67 68) 34]
Test Case: 309 | Input/Output: [(98 7 24 9) 7]
Test Case: 310 | Input/Output: [(23 40 98 63) 23]
Test Case: 311 | Input/Output: [(1 12 33 8) 1]
Test Case: 312 | Input/Output: [(71 47 18 97) 18]
Test Case: 313 | Input/Output: [(91 95 28 26) 26]
Test Case: 314 | Input/Output: [(15 40 12 71) 12]
Test Case: 315 | Input/Output: [(53 82 25 75) 25]
Test Case: 316 | Input/Output: [(62 48 19 96) 19]
Test Case: 317 | Input/Output: [(94 4 37 8) 4]
Test Case: 318 | Input/Output: [(31 72 82 35) 31]
Test Case: 319 | Input/Output: [(2 37 25 93) 2]
Test Case: 320 | Input/Output: [(54 18 87 17) 17]
Test Case: 321 | Input/Output: [(62 16 54 97) 16]
Test Case: 322 | Input/Output: [(17 8 58 42) 8]
Test Case: 323 | Input/Output: [(48 2 52 56) 2]
Test Case: 324 | Input/Output: [(51 98 88 53) 51]
Test Case: 325 | Input/Output: [(34 57 48 30) 30]
Test Case: 326 | Input/Output: [(46 59 62 33) 33]
Test Case: 327 | Input/Output: [(19 89 31 31) 19]
Test Case: 328 | Input/Output: [(84 37 93 30) 30]
Test Case: 329 | Input/Output: [(15 7 27 35) 7]
Test Case: 330 | Input/Output: [(6 1 67 34) 1]
Test Case: 331 | Input/Output: [(19 30 17 7) 7]
Test Case: 332 | Input/Output: [(100 3 25 52) 3]
Test Case: 333 | Input/Output: [(67 73 62 25) 25]
Test Case: 334 | Input/Output: [(13 17 100 57) 13]
Test Case: 335 | Input/Output: [(41 4 3 74) 3]
Test Case: 336 | Input/Output: [(75 56 33 93) 33]
Test Case: 337 | Input/Output: [(58 4 62 51) 4]
Test Case: 338 | Input/Output: [(51 100 30 68) 30]
Test Case: 339 | Input/Output: [(17 72 61 50) 17]
Test Case: 340 | Input/Output: [(13 79 16 81) 13]
Test Case: 341 | Input/Output: [(46 68 19 98) 19]
Test Case: 342 | Input/Output: [(49 5 27 82) 5]
Test Case: 343 | Input/Output: [(8 25 80 97) 8]
Test Case: 344 | Input/Output: [(5 36 20 0) 0]
Test Case: 345 | Input/Output: [(5 82 94 44) 5]
Test Case: 346 | Input/Output: [(20 72 32 29) 20]
Test Case: 347 | Input/Output: [(56 58 93 22) 22]
Test Case: 348 | Input/Output: [(24 34 68 31) 24]
Test Case: 349 | Input/Output: [(52 91 66 6) 6]
Test Case: 350 | Input/Output: [(5 43 72 95) 5]
Test Case: 351 | Input/Output: [(73 32 28 76) 28]
Test Case: 352 | Input/Output: [(60 70 51 60) 51]
Test Case: 353 | Input/Output: [(40 81 24 60) 24]
Test Case: 354 | Input/Output: [(66 65 65 52) 52]
Test Case: 355 | Input/Output: [(66 43 2 38) 2]
Test Case: 356 | Input/Output: [(36 89 57 14) 14]
Test Case: 357 | Input/Output: [(38 92 10 82) 10]
Test Case: 358 | Input/Output: [(43 77 44 74) 43]
Test Case: 359 | Input/Output: [(78 98 55 67) 55]
Test Case: 360 | Input/Output: [(63 0 58 58) 0]
Test Case: 361 | Input/Output: [(95 47 35 11) 11]
Test Case: 362 | Input/Output: [(2 38 18 1) 1]
Test Case: 363 | Input/Output: [(9 59 76 5) 5]
Test Case: 364 | Input/Output: [(97 41 56 34) 34]
Test Case: 365 | Input/Output: [(10 73 36 8) 8]
Test Case: 366 | Input/Output: [(67 64 44 53) 44]
Test Case: 367 | Input/Output: [(46 19 100 52) 19]
Test Case: 368 | Input/Output: [(98 36 60 19) 19]
Test Case: 369 | Input/Output: [(17 93 30 54) 17]
Test Case: 370 | Input/Output: [(58 59 57 68) 57]
Test Case: 371 | Input/Output: [(83 49 5 19) 5]
Test Case: 372 | Input/Output: [(78 3 77 21) 3]
Test Case: 373 | Input/Output: [(42 83 86 3) 3]
Test Case: 374 | Input/Output: [(71 29 51 9) 9]
Test Case: 375 | Input/Output: [(26 27 65 2) 2]
Test Case: 376 | Input/Output: [(93 81 95 59) 59]
Test Case: 377 | Input/Output: [(91 13 16 34) 13]
Test Case: 378 | Input/Output: [(59 14 3 53) 3]
Test Case: 379 | Input/Output: [(17 22 40 39) 17]
Test Case: 380 | Input/Output: [(1 31 56 54) 1]
Test Case: 381 | Input/Output: [(75 92 60 59) 59]
Test Case: 382 | Input/Output: [(6 97 90 28) 6]
Test Case: 383 | Input/Output: [(100 95 13 73) 13]
Test Case: 384 | Input/Output: [(88 44 55 99) 44]
Test Case: 385 | Input/Output: [(45 2 73 73) 2]
Test Case: 386 | Input/Output: [(10 38 45 68) 10]
Test Case: 387 | Input/Output: [(94 15 97 25) 15]
Test Case: 388 | Input/Output: [(5 12 88 30) 5]
Test Case: 389 | Input/Output: [(90 35 46 98) 35]
Test Case: 390 | Input/Output: [(28 84 16 12) 12]
Test Case: 391 | Input/Output: [(85 15 33 49) 15]
Test Case: 392 | Input/Output: [(69 93 77 47) 47]
Test Case: 393 | Input/Output: [(3 85 52 2) 2]
Test Case: 394 | Input/Output: [(29 57 31 9) 9]
Test Case: 395 | Input/Output: [(1 90 79 48) 1]
Test Case: 396 | Input/Output: [(41 95 56 10) 10]
Test Case: 397 | Input/Output: [(67 10 12 93) 10]
Test Case: 398 | Input/Output: [(67 52 5 57) 5]
Test Case: 399 | Input/Output: [(15 66 87 6) 6]
Test Case: 400 | Input/Output: [(1 -79 -27 -79) -79]
Test Case: 401 | Input/Output: [(43 -69 63 -25) -69]
Test Case: 402 | Input/Output: [(-40 -7 1 -52) -52]
Test Case: 403 | Input/Output: [(99 22 -34 26) -34]
Test Case: 404 | Input/Output: [(55 79 67 37) 37]
Test Case: 405 | Input/Output: [(19 -94 -38 40) -94]
Test Case: 406 | Input/Output: [(74 -46 63 -30) -46]
Test Case: 407 | Input/Output: [(34 15 -88 -35) -88]
Test Case: 408 | Input/Output: [(-52 96 -43 -56) -56]
Test Case: 409 | Input/Output: [(2 -52 -93 97) -93]
Test Case: 410 | Input/Output: [(-57 94 62 -1) -57]
Test Case: 411 | Input/Output: [(-68 -9 -20 33) -68]
Test Case: 412 | Input/Output: [(80 -20 23 -20) -20]
Test Case: 413 | Input/Output: [(-95 74 0 64) -95]
Test Case: 414 | Input/Output: [(-65 -61 -1 -86) -86]
Test Case: 415 | Input/Output: [(-85 55 13 38) -85]
Test Case: 416 | Input/Output: [(-39 87 49 -57) -57]
Test Case: 417 | Input/Output: [(80 82 16 67) 16]
Test Case: 418 | Input/Output: [(-47 -53 -19 76) -53]
Test Case: 419 | Input/Output: [(-94 -55 -72 -83) -94]
Test Case: 420 | Input/Output: [(-79 -87 -84 -76) -87]
Test Case: 421 | Input/Output: [(83 -4 25 4) -4]
Test Case: 422 | Input/Output: [(64 22 30 -93) -93]
Test Case: 423 | Input/Output: [(14 93 -67 -75) -75]
Test Case: 424 | Input/Output: [(91 -83 19 -63) -83]
Test Case: 425 | Input/Output: [(26 50 90 -48) -48]
Test Case: 426 | Input/Output: [(73 16 -4 -25) -25]
Test Case: 427 | Input/Output: [(24 65 85 -27) -27]
Test Case: 428 | Input/Output: [(13 -6 -50 5) -50]
Test Case: 429 | Input/Output: [(-26 89 -53 17) -53]
Test Case: 430 | Input/Output: [(95 -81 65 -73) -81]
Test Case: 431 | Input/Output: [(-100 23 -55 7) -100]
Test Case: 432 | Input/Output: [(100 -10 -93 -14) -93]
Test Case: 433 | Input/Output: [(-28 -41 52 50) -41]
Test Case: 434 | Input/Output: [(-48 -57 -97 53) -97]
Test Case: 435 | Input/Output: [(-27 -47 -44 2) -47]
Test Case: 436 | Input/Output: [(52 -15 37 -89) -89]
Test Case: 437 | Input/Output: [(80 10 -29 40) -29]
Test Case: 438 | Input/Output: [(66 11 -56 -6) -56]
Test Case: 439 | Input/Output: [(-66 -44 58 -78) -78]
Test Case: 440 | Input/Output: [(-96 38 35 -53) -96]
Test Case: 441 | Input/Output: [(83 -77 -51 36) -77]
Test Case: 442 | Input/Output: [(-1 8 23 38) -1]
Test Case: 443 | Input/Output: [(-83 76 -51 -33) -83]
Test Case: 444 | Input/Output: [(-27 -43 -100 -22) -100]
Test Case: 445 | Input/Output: [(50 -100 -32 -72) -100]
Test Case: 446 | Input/Output: [(-62 88 -81 -51) -81]
Test Case: 447 | Input/Output: [(40 10 -8 -14) -14]
Test Case: 448 | Input/Output: [(79 72 0 -80) -80]
Test Case: 449 | Input/Output: [(-24 10 -41 57) -41]
Test Case: 450 | Input/Output: [(71 1 -27 -64) -64]
Test Case: 451 | Input/Output: [(17 -62 34 -51) -62]
Test Case: 452 | Input/Output: [(-23 3 29 -10) -23]
Test Case: 453 | Input/Output: [(-50 94 -9 -100) -100]
Test Case: 454 | Input/Output: [(-18 -40 86 -5) -40]
Test Case: 455 | Input/Output: [(32 -58 -100 27) -100]
Test Case: 456 | Input/Output: [(-44 82 -46 -8) -46]
Test Case: 457 | Input/Output: [(7 99 -96 34) -96]
Test Case: 458 | Input/Output: [(-47 89 -32 76) -47]
Test Case: 459 | Input/Output: [(2 -81 93 -69) -81]
Test Case: 460 | Input/Output: [(30 66 82 34) 30]
Test Case: 461 | Input/Output: [(-81 -50 71 -51) -81]
Test Case: 462 | Input/Output: [(-91 -91 -76 -55) -91]
Test Case: 463 | Input/Output: [(42 -25 -16 -63) -63]
Test Case: 464 | Input/Output: [(-1 90 9 77) -1]
Test Case: 465 | Input/Output: [(-98 -24 -94 93) -98]
Test Case: 466 | Input/Output: [(42 68 20 -36) -36]
Test Case: 467 | Input/Output: [(8 99 82 87) 8]
Test Case: 468 | Input/Output: [(-22 16 25 17) -22]
Test Case: 469 | Input/Output: [(-20 45 -70 96) -70]
Test Case: 470 | Input/Output: [(51 -54 -99 -100) -100]
Test Case: 471 | Input/Output: [(60 25 83 -47) -47]
Test Case: 472 | Input/Output: [(-17 -14 64 -98) -98]
Test Case: 473 | Input/Output: [(54 9 57 -53) -53]
Test Case: 474 | Input/Output: [(88 -95 -17 57) -95]
Test Case: 475 | Input/Output: [(45 -3 20 -35) -35]
Test Case: 476 | Input/Output: [(-77 -91 -94 96) -94]
Test Case: 477 | Input/Output: [(66 -95 -72 22) -95]
Test Case: 478 | Input/Output: [(81 51 -12 -86) -86]
Test Case: 479 | Input/Output: [(95 34 -74 78) -74]
Test Case: 480 | Input/Output: [(3 -39 45 58) -39]
Test Case: 481 | Input/Output: [(65 4 -49 -3) -49]
Test Case: 482 | Input/Output: [(33 72 41 -52) -52]
Test Case: 483 | Input/Output: [(40 92 54 8) 8]
Test Case: 484 | Input/Output: [(66 3 -19 -60) -60]
Test Case: 485 | Input/Output: [(58 12 18 36) 12]
Test Case: 486 | Input/Output: [(25 -52 -90 18) -90]
Test Case: 487 | Input/Output: [(-45 -1 -24 -18) -45]
Test Case: 488 | Input/Output: [(-3 -43 11 12) -43]
Test Case: 489 | Input/Output: [(-58 77 99 -56) -58]
Test Case: 490 | Input/Output: [(-97 57 -88 -15) -97]
Test Case: 491 | Input/Output: [(56 -59 75 59) -59]
Test Case: 492 | Input/Output: [(-40 -63 -52 22) -63]
Test Case: 493 | Input/Output: [(79 -33 -99 74) -99]
Test Case: 494 | Input/Output: [(65 -11 54 90) -11]
Test Case: 495 | Input/Output: [(-60 -68 -11 11) -68]
Test Case: 496 | Input/Output: [(65 98 -94 -50) -94]
Test Case: 497 | Input/Output: [(41 -33 81 40) -33]
Test Case: 498 | Input/Output: [(-27 -33 -97 -24) -97]
Test Case: 499 | Input/Output: [(-35 -13 43 64) -35]
Test Case: 500 | Input/Output: [(-91 91 96 -73) -91]
Test Case: 501 | Input/Output: [(17 8 -8 -39) -39]
Test Case: 502 | Input/Output: [(-44 -76 13 -86) -86]
Test Case: 503 | Input/Output: [(15 -18 55 18) -18]
Test Case: 504 | Input/Output: [(-79 -58 10 47) -79]
Test Case: 505 | Input/Output: [(-61 -11 20 -99) -99]
Test Case: 506 | Input/Output: [(-69 54 40 7) -69]
Test Case: 507 | Input/Output: [(-54 -8 51 -27) -54]
Test Case: 508 | Input/Output: [(-76 -16 90 -94) -94]
Test Case: 509 | Input/Output: [(-73 -39 47 47) -73]
Test Case: 510 | Input/Output: [(-35 66 17 59) -35]
Test Case: 511 | Input/Output: [(15 94 77 -15) -15]
Test Case: 512 | Input/Output: [(-8 27 74 -82) -82]
Test Case: 513 | Input/Output: [(38 -16 -24 -75) -75]
Test Case: 514 | Input/Output: [(-55 40 -96 -75) -96]
Test Case: 515 | Input/Output: [(-35 -73 -87 -55) -87]
Test Case: 516 | Input/Output: [(-75 -41 -45 25) -75]
Test Case: 517 | Input/Output: [(-83 -21 -57 39) -83]
Test Case: 518 | Input/Output: [(-76 40 -75 83) -76]
Test Case: 519 | Input/Output: [(-52 -26 -32 -7) -52]
Test Case: 520 | Input/Output: [(-53 43 -49 34) -53]
Test Case: 521 | Input/Output: [(-42 -46 61 5) -46]
Test Case: 522 | Input/Output: [(44 80 48 91) 44]
Test Case: 523 | Input/Output: [(-30 -53 75 -48) -53]
Test Case: 524 | Input/Output: [(-34 8 -6 92) -34]
Test Case: 525 | Input/Output: [(-70 45 -49 -53) -70]
Test Case: 526 | Input/Output: [(-57 91 91 -90) -90]
Test Case: 527 | Input/Output: [(39 -8 -20 83) -20]
Test Case: 528 | Input/Output: [(-29 58 -66 -85) -85]
Test Case: 529 | Input/Output: [(77 44 -73 48) -73]
Test Case: 530 | Input/Output: [(75 -15 2 28) -15]
Test Case: 531 | Input/Output: [(-94 43 38 -72) -94]
Test Case: 532 | Input/Output: [(96 -35 -98 -48) -98]
Test Case: 533 | Input/Output: [(-57 70 23 -51) -57]
Test Case: 534 | Input/Output: [(82 31 72 -93) -93]
Test Case: 535 | Input/Output: [(3 86 8 -5) -5]
Test Case: 536 | Input/Output: [(-54 21 48 -5) -54]
Test Case: 537 | Input/Output: [(-9 -38 70 18) -38]
Test Case: 538 | Input/Output: [(-23 80 100 100) -23]
Test Case: 539 | Input/Output: [(-42 79 -52 90) -52]
Test Case: 540 | Input/Output: [(40 -55 -30 50) -55]
Test Case: 541 | Input/Output: [(45 21 -64 -22) -64]
Test Case: 542 | Input/Output: [(13 -49 14 50) -49]
Test Case: 543 | Input/Output: [(36 60 21 -8) -8]
Test Case: 544 | Input/Output: [(79 4 -74 -19) -74]
Test Case: 545 | Input/Output: [(11 -48 -54 65) -54]
Test Case: 546 | Input/Output: [(8 43 -95 94) -95]
Test Case: 547 | Input/Output: [(-76 8 -93 -20) -93]
Test Case: 548 | Input/Output: [(80 65 38 -17) -17]
Test Case: 549 | Input/Output: [(-91 -80 -4 66) -91]
Test Case: 550 | Input/Output: [(5 -48 85 -27) -48]
Test Case: 551 | Input/Output: [(27 61 -69 22) -69]
Test Case: 552 | Input/Output: [(43 -52 -76 -65) -76]
Test Case: 553 | Input/Output: [(84 6 37 -4) -4]
Test Case: 554 | Input/Output: [(4 -70 -22 -90) -90]
Test Case: 555 | Input/Output: [(72 12 -46 -83) -83]
Test Case: 556 | Input/Output: [(0 -97 -51 26) -97]
Test Case: 557 | Input/Output: [(-55 -54 55 -61) -61]
Test Case: 558 | Input/Output: [(5 83 43 -51) -51]
Test Case: 559 | Input/Output: [(-47 -59 -34 22) -59]
Test Case: 560 | Input/Output: [(-77 -7 -73 52) -77]
Test Case: 561 | Input/Output: [(3 -77 98 -26) -77]
Test Case: 562 | Input/Output: [(-11 97 -83 68) -83]
Test Case: 563 | Input/Output: [(71 74 -89 91) -89]
Test Case: 564 | Input/Output: [(-95 -70 58 -76) -95]
Test Case: 565 | Input/Output: [(-44 76 -90 86) -90]
Test Case: 566 | Input/Output: [(65 -45 99 -5) -45]
Test Case: 567 | Input/Output: [(-34 72 60 -5) -34]
Test Case: 568 | Input/Output: [(10 14 -56 -12) -56]
Test Case: 569 | Input/Output: [(50 11 -15 -42) -42]
Test Case: 570 | Input/Output: [(-21 -93 73 -5) -93]
Test Case: 571 | Input/Output: [(22 -17 -61 93) -61]
Test Case: 572 | Input/Output: [(94 -14 46 -12) -14]
Test Case: 573 | Input/Output: [(46 25 86 -44) -44]
Test Case: 574 | Input/Output: [(18 -97 20 -75) -97]
Test Case: 575 | Input/Output: [(100 47 40 -66) -66]
Test Case: 576 | Input/Output: [(-98 -28 100 -67) -98]
Test Case: 577 | Input/Output: [(-99 82 98 19) -99]
Test Case: 578 | Input/Output: [(16 99 36 -100) -100]
Test Case: 579 | Input/Output: [(40 81 83 -93) -93]
Test Case: 580 | Input/Output: [(-86 68 31 -84) -86]
Test Case: 581 | Input/Output: [(15 59 81 49) 15]
Test Case: 582 | Input/Output: [(99 15 13 58) 13]
Test Case: 583 | Input/Output: [(-58 42 4 -70) -70]
Test Case: 584 | Input/Output: [(71 -74 4 21) -74]
Test Case: 585 | Input/Output: [(-2 46 -3 -85) -85]
Test Case: 586 | Input/Output: [(16 -45 15 36) -45]
Test Case: 587 | Input/Output: [(71 55 81 -90) -90]
Test Case: 588 | Input/Output: [(49 60 47 -60) -60]
Test Case: 589 | Input/Output: [(-76 3 -11 -22) -76]
Test Case: 590 | Input/Output: [(44 -75 -46 -16) -75]
Test Case: 591 | Input/Output: [(47 -84 -78 23) -84]
Test Case: 592 | Input/Output: [(20 -9 -84 16) -84]
Test Case: 593 | Input/Output: [(-12 38 54 -25) -25]
Test Case: 594 | Input/Output: [(98 -20 -80 18) -80]
Test Case: 595 | Input/Output: [(-9 -11 -39 -43) -43]
Test Case: 596 | Input/Output: [(69 -6 -11 -46) -46]
Test Case: 597 | Input/Output: [(-8 32 -51 -62) -62]
Test Case: 598 | Input/Output: [(89 47 -1 47) -1]
Test Case: 599 | Input/Output: [(10 28 -23 -20) -23]
Test Case: 600 | Input/Output: [(-30 -29 -25 85) -30]
Test Case: 601 | Input/Output: [(-5 80 21 -93) -93]
Test Case: 602 | Input/Output: [(58 91 73 -1) -1]
Test Case: 603 | Input/Output: [(78 -100 18 92) -100]
Test Case: 604 | Input/Output: [(-24 4 -52 -86) -86]
Test Case: 605 | Input/Output: [(31 -42 77 -82) -82]
Test Case: 606 | Input/Output: [(-93 -46 55 -13) -93]
Test Case: 607 | Input/Output: [(-14 36 74 20) -14]
Test Case: 608 | Input/Output: [(-14 73 -31 51) -31]
Test Case: 609 | Input/Output: [(-75 -21 -21 45) -75]
Test Case: 610 | Input/Output: [(-69 62 42 -60) -69]
Test Case: 611 | Input/Output: [(-11 -41 85 68) -41]
Test Case: 612 | Input/Output: [(-29 74 36 -55) -55]
Test Case: 613 | Input/Output: [(38 2 2 -59) -59]
Test Case: 614 | Input/Output: [(87 -88 18 -83) -88]
Test Case: 615 | Input/Output: [(83 3 47 -59) -59]
Test Case: 616 | Input/Output: [(-52 -93 -92 49) -93]
Test Case: 617 | Input/Output: [(85 -89 -11 -63) -89]
Test Case: 618 | Input/Output: [(-33 -26 56 -87) -87]
Test Case: 619 | Input/Output: [(-63 13 -88 78) -88]
Test Case: 620 | Input/Output: [(-57 100 14 60) -57]
Test Case: 621 | Input/Output: [(78 12 77 -64) -64]
Test Case: 622 | Input/Output: [(66 -63 64 39) -63]
Test Case: 623 | Input/Output: [(-67 -27 43 41) -67]
Test Case: 624 | Input/Output: [(62 -31 -46 79) -46]
Test Case: 625 | Input/Output: [(-47 7 81 93) -47]
Test Case: 626 | Input/Output: [(5 72 34 12) 5]
Test Case: 627 | Input/Output: [(-37 72 -51 -51) -51]
Test Case: 628 | Input/Output: [(-100 25 -29 92) -100]
Test Case: 629 | Input/Output: [(19 17 -21 -2) -21]
Test Case: 630 | Input/Output: [(13 21 98 -11) -11]
Test Case: 631 | Input/Output: [(-56 -41 88 -12) -56]
Test Case: 632 | Input/Output: [(-71 -14 3 71) -71]
Test Case: 633 | Input/Output: [(50 -29 21 -20) -29]
Test Case: 634 | Input/Output: [(-97 90 20 -62) -97]
Test Case: 635 | Input/Output: [(41 13 -62 -33) -62]
Test Case: 636 | Input/Output: [(84 -32 71 -22) -32]
Test Case: 637 | Input/Output: [(27 -38 -38 -15) -38]
Test Case: 638 | Input/Output: [(-58 39 -60 73) -60]
Test Case: 639 | Input/Output: [(-15 9 -42 -68) -68]
Test Case: 640 | Input/Output: [(-85 89 -83 -78) -85]
Test Case: 641 | Input/Output: [(-84 -69 43 -83) -84]
Test Case: 642 | Input/Output: [(86 -6 56 37) -6]
Test Case: 643 | Input/Output: [(-24 -97 -74 -82) -97]
Test Case: 644 | Input/Output: [(86 65 75 -25) -25]
Test Case: 645 | Input/Output: [(-98 -23 -24 -53) -98]
Test Case: 646 | Input/Output: [(-15 -99 -40 10) -99]
Test Case: 647 | Input/Output: [(-31 17 70 -30) -31]
Test Case: 648 | Input/Output: [(40 80 65 -54) -54]
Test Case: 649 | Input/Output: [(-27 -75 10 65) -75]
Test Case: 650 | Input/Output: [(42 -28 9 43) -28]
Test Case: 651 | Input/Output: [(-67 8 -43 10) -67]
Test Case: 652 | Input/Output: [(-25 -67 -2 67) -67]
Test Case: 653 | Input/Output: [(-53 -98 -87 -43) -98]
Test Case: 654 | Input/Output: [(55 5 -56 100) -56]
Test Case: 655 | Input/Output: [(54 -7 -46 -82) -82]
Test Case: 656 | Input/Output: [(-99 77 -10 60) -99]
Test Case: 657 | Input/Output: [(-45 -61 30 43) -61]
Test Case: 658 | Input/Output: [(-96 -34 16 -30) -96]
Test Case: 659 | Input/Output: [(67 2 7 56) 2]
Test Case: 660 | Input/Output: [(-21 -8 47 -52) -52]
Test Case: 661 | Input/Output: [(-36 29 36 69) -36]
Test Case: 662 | Input/Output: [(-9 -19 78 -95) -95]
Test Case: 663 | Input/Output: [(-72 78 55 46) -72]
Test Case: 664 | Input/Output: [(-67 -75 63 -17) -75]
Test Case: 665 | Input/Output: [(-84 38 13 -53) -84]
Test Case: 666 | Input/Output: [(61 74 10 -74) -74]
Test Case: 667 | Input/Output: [(-11 -87 -66 90) -87]
Test Case: 668 | Input/Output: [(51 39 -47 -11) -47]
Test Case: 669 | Input/Output: [(65 -74 -71 -79) -79]
Test Case: 670 | Input/Output: [(-85 -47 58 72) -85]
Test Case: 671 | Input/Output: [(91 44 -87 -83) -87]
Test Case: 672 | Input/Output: [(11 -73 -83 -47) -83]
Test Case: 673 | Input/Output: [(95 -93 18 74) -93]
Test Case: 674 | Input/Output: [(-90 22 -47 95) -90]
Test Case: 675 | Input/Output: [(-55 14 -73 31) -73]
Test Case: 676 | Input/Output: [(2 -2 -55 -74) -74]
Test Case: 677 | Input/Output: [(-88 50 1 -20) -88]
Test Case: 678 | Input/Output: [(26 -71 -19 67) -71]
Test Case: 679 | Input/Output: [(-35 -34 29 -9) -35]
Test Case: 680 | Input/Output: [(-5 33 68 -73) -73]
Test Case: 681 | Input/Output: [(26 58 -14 -15) -15]
Test Case: 682 | Input/Output: [(-70 43 -92 -27) -92]
Test Case: 683 | Input/Output: [(-97 45 -59 -8) -97]
Test Case: 684 | Input/Output: [(98 -30 -97 -17) -97]
Test Case: 685 | Input/Output: [(84 3 -56 31) -56]
Test Case: 686 | Input/Output: [(-74 -34 -48 7) -74]
Test Case: 687 | Input/Output: [(-54 -98 87 -10) -98]
Test Case: 688 | Input/Output: [(57 64 -59 98) -59]
Test Case: 689 | Input/Output: [(-87 -97 75 4) -97]
Test Case: 690 | Input/Output: [(-72 63 13 -97) -97]
Test Case: 691 | Input/Output: [(-22 -81 86 -64) -81]
Test Case: 692 | Input/Output: [(-21 61 1 -10) -21]
Test Case: 693 | Input/Output: [(-67 55 98 82) -67]
Test Case: 694 | Input/Output: [(79 -68 -76 37) -76]
Test Case: 695 | Input/Output: [(54 14 82 -66) -66]
Test Case: 696 | Input/Output: [(32 -33 35 -52) -52]
Test Case: 697 | Input/Output: [(33 -20 -40 -80) -80]
Test Case: 698 | Input/Output: [(58 90 -43 -32) -43]
Test Case: 699 | Input/Output: [(-75 -63 -13 -88) -88]
Test Case: 700 | Input/Output: [(-42 -4 -47 -64) -64]
Test Case: 701 | Input/Output: [(-82 -95 44 59) -95]
Test Case: 702 | Input/Output: [(18 76 70 -43) -43]
Test Case: 703 | Input/Output: [(74 -30 -59 -8) -59]
Test Case: 704 | Input/Output: [(7 97 14 34) 7]
Test Case: 705 | Input/Output: [(-5 -64 94 91) -64]
Test Case: 706 | Input/Output: [(-18 42 50 -73) -73]
Test Case: 707 | Input/Output: [(-80 4 -46 83) -80]
Test Case: 708 | Input/Output: [(-24 36 -85 -78) -85]
Test Case: 709 | Input/Output: [(-85 17 11 -100) -100]
Test Case: 710 | Input/Output: [(84 -7 -95 -10) -95]
Test Case: 711 | Input/Output: [(-88 -68 58 -29) -88]
Test Case: 712 | Input/Output: [(-20 -16 29 36) -20]
Test Case: 713 | Input/Output: [(-98 14 58 91) -98]
Test Case: 714 | Input/Output: [(95 -17 -35 -52) -52]
Test Case: 715 | Input/Output: [(41 -92 -99 -15) -99]
Test Case: 716 | Input/Output: [(-77 -50 97 14) -77]
Test Case: 717 | Input/Output: [(70 -34 -70 -65) -70]
Test Case: 718 | Input/Output: [(-25 -4 97 -47) -47]
Test Case: 719 | Input/Output: [(-62 -21 -3 72) -62]
Test Case: 720 | Input/Output: [(-72 57 72 -69) -72]
Test Case: 721 | Input/Output: [(-34 42 -30 100) -34]
Test Case: 722 | Input/Output: [(99 36 61 3) 3]
Test Case: 723 | Input/Output: [(-21 -58 80 14) -58]
Test Case: 724 | Input/Output: [(-11 -84 36 9) -84]
Test Case: 725 | Input/Output: [(46 37 99 -71) -71]
Test Case: 726 | Input/Output: [(54 29 -74 37) -74]
Test Case: 727 | Input/Output: [(15 -97 -48 70) -97]
Test Case: 728 | Input/Output: [(-54 -41 -24 91) -54]
Test Case: 729 | Input/Output: [(-74 -39 11 -73) -74]
Test Case: 730 | Input/Output: [(52 16 -84 49) -84]
Test Case: 731 | Input/Output: [(90 13 -52 -39) -52]
Test Case: 732 | Input/Output: [(71 -10 100 -94) -94]
Test Case: 733 | Input/Output: [(-56 -99 51 92) -99]
Test Case: 734 | Input/Output: [(-9 40 8 86) -9]
Test Case: 735 | Input/Output: [(-6 7 30 83) -6]
Test Case: 736 | Input/Output: [(100 -65 -76 37) -76]
Test Case: 737 | Input/Output: [(55 41 -24 -70) -70]
Test Case: 738 | Input/Output: [(97 3 -64 -96) -96]
Test Case: 739 | Input/Output: [(66 81 -39 53) -39]
Test Case: 740 | Input/Output: [(100 16 64 49) 16]
Test Case: 741 | Input/Output: [(-76 -97 64 66) -97]
Test Case: 742 | Input/Output: [(-6 -18 11 -39) -39]
Test Case: 743 | Input/Output: [(-69 -12 63 -70) -70]
Test Case: 744 | Input/Output: [(26 -43 74 -78) -78]
Test Case: 745 | Input/Output: [(28 89 3 5) 3]
Test Case: 746 | Input/Output: [(73 -87 90 -32) -87]
Test Case: 747 | Input/Output: [(-2 31 -83 87) -83]
Test Case: 748 | Input/Output: [(-42 76 80 -67) -67]
Test Case: 749 | Input/Output: [(-23 86 79 84) -23]
Test Case: 750 | Input/Output: [(-33 -15 -39 76) -39]
Test Case: 751 | Input/Output: [(-56 87 -6 91) -56]
Test Case: 752 | Input/Output: [(28 77 92 2) 2]
Test Case: 753 | Input/Output: [(3 -62 -11 -57) -62]
Test Case: 754 | Input/Output: [(71 44 -36 -29) -36]
Test Case: 755 | Input/Output: [(28 -32 26 -38) -38]
Test Case: 756 | Input/Output: [(89 -91 76 65) -91]
Test Case: 757 | Input/Output: [(-23 36 2 22) -23]
Test Case: 758 | Input/Output: [(2 -88 16 -56) -88]
Test Case: 759 | Input/Output: [(-14 -76 -7 -50) -76]
Test Case: 760 | Input/Output: [(2 -100 40 -53) -100]
Test Case: 761 | Input/Output: [(25 4 -29 -89) -89]
Test Case: 762 | Input/Output: [(41 10 88 -50) -50]
Test Case: 763 | Input/Output: [(-41 51 -22 -9) -41]
Test Case: 764 | Input/Output: [(88 18 35 -23) -23]
Test Case: 765 | Input/Output: [(-2 58 14 -6) -6]
Test Case: 766 | Input/Output: [(-60 76 -12 46) -60]
Test Case: 767 | Input/Output: [(19 -99 42 1) -99]
Test Case: 768 | Input/Output: [(27 -2 0 -27) -27]
Test Case: 769 | Input/Output: [(67 75 12 -88) -88]
Test Case: 770 | Input/Output: [(9 21 -64 65) -64]
Test Case: 771 | Input/Output: [(21 -36 -20 4) -36]
Test Case: 772 | Input/Output: [(6 -34 73 52) -34]
Test Case: 773 | Input/Output: [(64 5 7 -74) -74]
Test Case: 774 | Input/Output: [(-98 -25 10 78) -98]
Test Case: 775 | Input/Output: [(94 -91 -83 60) -91]
Test Case: 776 | Input/Output: [(20 39 58 -52) -52]
Test Case: 777 | Input/Output: [(-27 79 85 -4) -27]
Test Case: 778 | Input/Output: [(98 -14 29 53) -14]
Test Case: 779 | Input/Output: [(50 -78 -89 -76) -89]
Test Case: 780 | Input/Output: [(-95 59 96 76) -95]
Test Case: 781 | Input/Output: [(90 -82 9 -86) -86]
Test Case: 782 | Input/Output: [(6 -68 -30 54) -68]
Test Case: 783 | Input/Output: [(53 -42 -56 -15) -56]
Test Case: 784 | Input/Output: [(-6 44 47 -44) -44]
Test Case: 785 | Input/Output: [(39 -44 -46 -5) -46]
Test Case: 786 | Input/Output: [(18 -68 99 90) -68]
Test Case: 787 | Input/Output: [(97 -71 -79 90) -79]
Test Case: 788 | Input/Output: [(-70 88 -2 66) -70]
Test Case: 789 | Input/Output: [(-47 54 -26 -18) -47]
Test Case: 790 | Input/Output: [(35 -34 -71 47) -71]
Test Case: 791 | Input/Output: [(-94 -94 -43 61) -94]
Test Case: 792 | Input/Output: [(35 -57 -82 -16) -82]
Test Case: 793 | Input/Output: [(-45 -2 35 2) -45]
Test Case: 794 | Input/Output: [(-10 -64 -2 16) -64]
Test Case: 795 | Input/Output: [(37 25 1 -64) -64]
Test Case: 796 | Input/Output: [(-30 44 89 21) -30]
Test Case: 797 | Input/Output: [(-60 -41 -2 96) -60]
Test Case: 798 | Input/Output: [(-23 79 -50 67) -50]
Test Case: 799 | Input/Output: [(19 -20 72 -8) -20]
Test Case: 800 | Input/Output: [(-42 81 62 69) -42]
Test Case: 801 | Input/Output: [(-61 -84 16 -99) -99]
Test Case: 802 | Input/Output: [(-86 94 -19 69) -86]
Test Case: 803 | Input/Output: [(82 9 12 -89) -89]
Test Case: 804 | Input/Output: [(34 45 87 -72) -72]
Test Case: 805 | Input/Output: [(83 -94 100 -1) -94]
Test Case: 806 | Input/Output: [(96 47 -1 -91) -91]
Test Case: 807 | Input/Output: [(33 61 73 98) 33]
Test Case: 808 | Input/Output: [(74 12 -85 -14) -85]
Test Case: 809 | Input/Output: [(-37 28 8 98) -37]
Test Case: 810 | Input/Output: [(92 -97 -87 -81) -97]
Test Case: 811 | Input/Output: [(-64 -23 34 -12) -64]
Test Case: 812 | Input/Output: [(-38 66 -100 -72) -100]
Test Case: 813 | Input/Output: [(-79 -3 30 74) -79]
Test Case: 814 | Input/Output: [(25 11 -21 32) -21]
Test Case: 815 | Input/Output: [(81 43 68 55) 43]
Test Case: 816 | Input/Output: [(48 63 45 87) 45]
Test Case: 817 | Input/Output: [(47 -16 3 36) -16]
Test Case: 818 | Input/Output: [(-16 11 -59 -42) -59]
Test Case: 819 | Input/Output: [(-78 57 99 -30) -78]
Test Case: 820 | Input/Output: [(54 -3 -86 56) -86]
Test Case: 821 | Input/Output: [(-2 -42 -19 -12) -42]
Test Case: 822 | Input/Output: [(64 15 -96 -58) -96]
Test Case: 823 | Input/Output: [(58 72 -67 -26) -67]
Test Case: 824 | Input/Output: [(93 -19 -84 46) -84]
Test Case: 825 | Input/Output: [(18 -26 -47 73) -47]
Test Case: 826 | Input/Output: [(-88 66 -28 17) -88]
Test Case: 827 | Input/Output: [(-51 95 80 99) -51]
Test Case: 828 | Input/Output: [(-32 -25 75 -66) -66]
Test Case: 829 | Input/Output: [(49 77 -69 -77) -77]
Test Case: 830 | Input/Output: [(33 71 -29 88) -29]
Test Case: 831 | Input/Output: [(-67 -25 -48 75) -67]
Test Case: 832 | Input/Output: [(-4 6 88 -27) -27]
Test Case: 833 | Input/Output: [(12 -65 -54 73) -65]
Test Case: 834 | Input/Output: [(-8 -8 -89 -18) -89]
Test Case: 835 | Input/Output: [(-86 -4 -12 57) -86]
Test Case: 836 | Input/Output: [(-29 10 76 77) -29]
Test Case: 837 | Input/Output: [(87 -65 65 76) -65]
Test Case: 838 | Input/Output: [(84 25 40 84) 25]
Test Case: 839 | Input/Output: [(-80 45 54 16) -80]
Test Case: 840 | Input/Output: [(89 -76 9 -69) -76]
Test Case: 841 | Input/Output: [(56 -62 -58 35) -62]
Test Case: 842 | Input/Output: [(-93 -13 -97 -61) -97]
Test Case: 843 | Input/Output: [(51 -41 23 -56) -56]
Test Case: 844 | Input/Output: [(-30 49 -1 14) -30]
Test Case: 845 | Input/Output: [(-23 64 49 -51) -51]
Test Case: 846 | Input/Output: [(-24 35 -82 81) -82]
Test Case: 847 | Input/Output: [(7 -65 -58 -96) -96]
Test Case: 848 | Input/Output: [(70 82 -99 34) -99]
Test Case: 849 | Input/Output: [(-74 63 66 27) -74]
Test Case: 850 | Input/Output: [(-29 84 -74 83) -74]
Test Case: 851 | Input/Output: [(28 55 2 -86) -86]
Test Case: 852 | Input/Output: [(-30 -57 62 65) -57]
Test Case: 853 | Input/Output: [(80 36 75 -87) -87]
Test Case: 854 | Input/Output: [(28 51 -56 32) -56]
Test Case: 855 | Input/Output: [(-63 18 -81 -57) -81]
Test Case: 856 | Input/Output: [(7 70 -11 96) -11]
Test Case: 857 | Input/Output: [(-16 -10 43 -8) -16]
Test Case: 858 | Input/Output: [(96 74 -61 -6) -61]
Test Case: 859 | Input/Output: [(-8 -89 19 84) -89]
Test Case: 860 | Input/Output: [(-85 95 49 -3) -85]
Test Case: 861 | Input/Output: [(49 -71 -72 -57) -72]
Test Case: 862 | Input/Output: [(41 -15 -16 -34) -34]
Test Case: 863 | Input/Output: [(77 -76 -81 27) -81]
Test Case: 864 | Input/Output: [(79 -47 92 -40) -47]
Test Case: 865 | Input/Output: [(53 78 -55 53) -55]
Test Case: 866 | Input/Output: [(77 -53 96 -66) -66]
Test Case: 867 | Input/Output: [(84 73 98 3) 3]
Test Case: 868 | Input/Output: [(-77 2 -17 64) -77]
Test Case: 869 | Input/Output: [(73 13 95 51) 13]
Test Case: 870 | Input/Output: [(-64 -8 -61 3) -64]
Test Case: 871 | Input/Output: [(55 -34 -22 12) -34]
Test Case: 872 | Input/Output: [(-62 -1 -33 -87) -87]
Test Case: 873 | Input/Output: [(-51 -48 -47 53) -51]
Test Case: 874 | Input/Output: [(-60 -3 -55 13) -60]
Test Case: 875 | Input/Output: [(10 -89 -14 -9) -89]
Test Case: 876 | Input/Output: [(100 -34 -47 8) -47]
Test Case: 877 | Input/Output: [(-57 -21 -100 26) -100]
Test Case: 878 | Input/Output: [(29 22 -21 -100) -100]
Test Case: 879 | Input/Output: [(-60 70 -37 33) -60]
Test Case: 880 | Input/Output: [(77 -91 -59 -26) -91]
Test Case: 881 | Input/Output: [(22 32 -73 70) -73]
Test Case: 882 | Input/Output: [(-92 28 -27 24) -92]
Test Case: 883 | Input/Output: [(87 44 -52 -42) -52]
Test Case: 884 | Input/Output: [(-100 -5 30 13) -100]
Test Case: 885 | Input/Output: [(-47 65 -31 -36) -47]
Test Case: 886 | Input/Output: [(80 -59 -54 -46) -59]
Test Case: 887 | Input/Output: [(-96 -21 61 14) -96]
Test Case: 888 | Input/Output: [(74 -64 -12 98) -64]
Test Case: 889 | Input/Output: [(-25 64 -44 -39) -44]
Test Case: 890 | Input/Output: [(-37 -43 -50 -40) -50]
Test Case: 891 | Input/Output: [(61 -65 78 57) -65]
Test Case: 892 | Input/Output: [(65 -100 -11 54) -100]
Test Case: 893 | Input/Output: [(-38 -58 50 29) -58]
Test Case: 894 | Input/Output: [(-37 -86 -55 -95) -95]
Test Case: 895 | Input/Output: [(76 -30 15 63) -30]
Test Case: 896 | Input/Output: [(-12 77 -9 -57) -57]
Test Case: 897 | Input/Output: [(-64 -9 -3 18) -64]
Test Case: 898 | Input/Output: [(-27 69 76 -53) -53]
Test Case: 899 | Input/Output: [(18 -10 85 -37) -37]
Test Case: 900 | Input/Output: [(90 60 -37 90) -37]
Test Case: 901 | Input/Output: [(-75 -88 16 -30) -88]
Test Case: 902 | Input/Output: [(-26 -54 -11 -84) -84]
Test Case: 903 | Input/Output: [(31 -21 -34 79) -34]
Test Case: 904 | Input/Output: [(-48 97 -98 88) -98]
Test Case: 905 | Input/Output: [(-74 83 -91 -91) -91]
Test Case: 906 | Input/Output: [(94 -76 -94 -4) -94]
Test Case: 907 | Input/Output: [(28 -50 -52 -44) -52]
Test Case: 908 | Input/Output: [(-9 -14 66 46) -14]
Test Case: 909 | Input/Output: [(53 82 35 -52) -52]
Test Case: 910 | Input/Output: [(-79 69 11 -80) -80]
Test Case: 911 | Input/Output: [(36 49 46 -1) -1]
Test Case: 912 | Input/Output: [(84 30 14 76) 14]
Test Case: 913 | Input/Output: [(58 -11 50 30) -11]
Test Case: 914 | Input/Output: [(-18 12 -63 -56) -63]
Test Case: 915 | Input/Output: [(-60 -48 -59 -30) -60]
Test Case: 916 | Input/Output: [(75 32 -87 82) -87]
Test Case: 917 | Input/Output: [(80 90 -45 -57) -57]
Test Case: 918 | Input/Output: [(-64 65 -28 75) -64]
Test Case: 919 | Input/Output: [(-27 -16 3 86) -27]
Test Case: 920 | Input/Output: [(-55 19 -81 -50) -81]
Test Case: 921 | Input/Output: [(-96 -42 -69 5) -96]
Test Case: 922 | Input/Output: [(42 98 -46 7) -46]
Test Case: 923 | Input/Output: [(91 -31 -14 64) -31]
Test Case: 924 | Input/Output: [(86 -74 -15 42) -74]
Test Case: 925 | Input/Output: [(14 62 -84 -9) -84]
Test Case: 926 | Input/Output: [(26 -31 15 72) -31]
Test Case: 927 | Input/Output: [(-88 -11 68 47) -88]
Test Case: 928 | Input/Output: [(-21 86 -6 92) -21]
Test Case: 929 | Input/Output: [(92 -9 27 -78) -78]
Test Case: 930 | Input/Output: [(6 63 -70 17) -70]
Test Case: 931 | Input/Output: [(-2 -46 10 -25) -46]
Test Case: 932 | Input/Output: [(27 -1 -54 -58) -58]
Test Case: 933 | Input/Output: [(-75 95 49 -6) -75]
Test Case: 934 | Input/Output: [(-20 -22 63 95) -22]
Test Case: 935 | Input/Output: [(-49 -79 -75 60) -79]
Test Case: 936 | Input/Output: [(75 98 45 19) 19]
Test Case: 937 | Input/Output: [(-25 -90 45 79) -90]
Test Case: 938 | Input/Output: [(-4 11 -90 56) -90]
Test Case: 939 | Input/Output: [(71 58 2 41) 2]
Test Case: 940 | Input/Output: [(84 -64 77 -26) -64]
Test Case: 941 | Input/Output: [(95 -88 -90 85) -90]
Test Case: 942 | Input/Output: [(53 -16 -61 70) -61]
Test Case: 943 | Input/Output: [(72 6 88 -36) -36]
Test Case: 944 | Input/Output: [(80 41 100 -8) -8]
Test Case: 945 | Input/Output: [(-65 -49 96 79) -65]
Test Case: 946 | Input/Output: [(44 -18 -57 17) -57]
Test Case: 947 | Input/Output: [(56 26 34 56) 26]
Test Case: 948 | Input/Output: [(20 -76 66 -41) -76]
Test Case: 949 | Input/Output: [(-26 82 -84 -12) -84]
Test Case: 950 | Input/Output: [(-86 -51 -28 -62) -86]
Test Case: 951 | Input/Output: [(-19 68 -3 7) -19]
Test Case: 952 | Input/Output: [(18 25 89 -44) -44]
Test Case: 953 | Input/Output: [(76 -54 45 -81) -81]
Test Case: 954 | Input/Output: [(44 43 -37 14) -37]
Test Case: 955 | Input/Output: [(96 3 -93 -59) -93]
Test Case: 956 | Input/Output: [(-59 99 75 -30) -59]
Test Case: 957 | Input/Output: [(61 -27 37 -38) -38]
Test Case: 958 | Input/Output: [(66 -76 -96 -94) -96]
Test Case: 959 | Input/Output: [(12 -73 47 51) -73]
Test Case: 960 | Input/Output: [(31 71 63 -29) -29]
Test Case: 961 | Input/Output: [(9 64 -100 -81) -100]
Test Case: 962 | Input/Output: [(6 71 30 31) 6]
Test Case: 963 | Input/Output: [(-19 -5 -32 94) -32]
Test Case: 964 | Input/Output: [(32 39 -76 33) -76]
Test Case: 965 | Input/Output: [(-24 36 58 2) -24]
Test Case: 966 | Input/Output: [(98 51 33 -53) -53]
Test Case: 967 | Input/Output: [(-75 -97 55 -23) -97]
Test Case: 968 | Input/Output: [(-43 -43 -61 -48) -61]
Test Case: 969 | Input/Output: [(-55 24 -80 7) -80]
Test Case: 970 | Input/Output: [(-8 -22 15 -25) -25]
Test Case: 971 | Input/Output: [(73 -75 76 42) -75]
Test Case: 972 | Input/Output: [(-64 -5 17 -11) -64]
Test Case: 973 | Input/Output: [(8 31 42 63) 8]
Test Case: 974 | Input/Output: [(1 17 7 10) 1]
Test Case: 975 | Input/Output: [(-59 21 -70 -16) -70]
Test Case: 976 | Input/Output: [(-47 1 -57 -43) -57]
Test Case: 977 | Input/Output: [(-23 38 -82 -35) -82]
Test Case: 978 | Input/Output: [(50 -21 12 -24) -24]
Test Case: 979 | Input/Output: [(91 44 67 81) 44]
Test Case: 980 | Input/Output: [(52 -40 -49 -79) -79]
Test Case: 981 | Input/Output: [(2 -51 73 -94) -94]
Test Case: 982 | Input/Output: [(-72 73 93 78) -72]
Test Case: 983 | Input/Output: [(-12 -49 9 34) -49]
Test Case: 984 | Input/Output: [(-95 34 -8 51) -95]
Test Case: 985 | Input/Output: [(36 35 -73 -50) -73]
Test Case: 986 | Input/Output: [(17 -36 62 -87) -87]
Test Case: 987 | Input/Output: [(-26 91 66 -58) -58]
Test Case: 988 | Input/Output: [(83 27 -39 25) -39]
Test Case: 989 | Input/Output: [(-67 29 10 -98) -98]
Test Case: 990 | Input/Output: [(22 -42 16 -67) -67]
Test Case: 991 | Input/Output: [(-1 80 -52 47) -52]
Test Case: 992 | Input/Output: [(-31 79 -33 -65) -65]
Test Case: 993 | Input/Output: [(96 -89 90 49) -89]
Test Case: 994 | Input/Output: [(-96 -42 100 -16) -96]
Test Case: 995 | Input/Output: [(12 -92 -84 54) -92]
Test Case: 996 | Input/Output: [(31 69 -48 -77) -77]
Test Case: 997 | Input/Output: [(-98 63 -80 7) -98]
Test Case: 998 | Input/Output: [(-49 -17 26 11) -49]
Test Case: 999 | Input/Output: [(100 33 86 87) 33]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 112 109 15 23 5 -59 78 -11 60 93 -123 -105 110 50 79 76
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[31 46 31 31] 31] [[-13 -62 -13 -13] -62] [[-5 -5 41 -5] -5] [[-19 -49 -49 -49] -49] [[-90 -90 -12 -90] -90] [[8 58 8 8] 8] [[80 15 80 80] 15] [[-46 -9 -9 -9] -46] [[-37 -80 -37 -37] -80] [[-9 -9 -90 -9] -90] [(-35 -35 -35 -35) -35] [(88 88 88 88) 88] [(21 21 21 21) 21] [(34 34 34 34) 34] [(44 44 44 44) 44] [(65 84 8 16) 8] [(20 50 100 56) 20] [(28 87 41 67) 28] [(100 7 22 54) 7] [(79 88 85 4) 4] [(35 91 55 16) 16] [(82 12 77 56) 12] [(63 37 39 50) 37] [(24 35 52 11) 11] [(88 33 56 72) 33] [(12 52 44 47) 12] [(59 1 25 8) 1] [(5 72 3 99) 3] [(27 90 48 46) 27] [(79 95 17 82) 17] [(81 74 83 93) 74] [(8 38 76 80) 8] [(50 3 18 22) 3] [(9 7 44 3) 3] [(18 31 93 96) 18] [(88 -8 -28 -98) -98] [(-42 68 -70 85) -70] [(90 -6 60 -92) -92] [(-68 56 -86 23) -86] [(-20 64 -21 -85) -85] [(5 -64 -68 -59) -68] [(6 44 -15 -61) -61] [(-91 40 -70 5) -91] [(51 -68 88 43) -68] [(-92 2 -74 99) -92] [(-88 -44 -37 -88) -88] [(26 -34 -40 80) -40] [(-25 -2 43 79) -25] [(48 82 -68 -74) -74] [(59 -43 78 -17) -43] [(31 31 47 62) 31] [(60 5 -35 -38) -38] [(-53 -43 44 47) -53] [(-80 -74 8 -80) -80] [(80 -3 46 16) -3] [(86 14 20 -5) -5] [(-100 52 -74 -45) -100] [(-83 -55 8 10) -83] [(-35 88 64 41) -35] [(-6 17 -7 -99) -99] [(88 -62 -82 19) -82] [(-46 73 22 32) -46] [(3 44 -33 70) -33] [(85 85 75 -52) -52] [(100 87 96 -41) -41] [(7 -32 -95 36) -95] [(-65 84 -64 10) -65] [(-69 12 10 20) -69] [(-68 17 -52 -94) -94] [(-42 10 58 -33) -42] [(6 8 20 -7) -7] [(99 -1 -10 96) -10] [(43 -78 -78 72) -78] [(34 -19 100 91) -19] [(-67 51 45 -4) -67] [(96 58 21 100) 21] [(-52 -79 35 17) -79] [(76 -55 90 -61) -61] [(86 -83 -2 -4) -83] [(79 81 21 91) 21] [(35 19 83 83) 19] [(-39 -88 -20 69) -88] [(-32 72 -83 -80) -83] [(54 15 -52 81) -52] [(-14 22 -86 -2) -86] [(-98 -47 -13 -87) -98] [(-50 -18 -5 -17) -50] [(81 56 47 98) 47] [(73 -3 20 -33) -33] [(-54 69 -100 42) -100] [(18 32 -80 -41) -80] [(40 37 84 30) 30] [(90 7 3 -4) -4] [(-78 -99 -34 -100) -100] [(-96 -88 81 100) -96])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -19                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 65                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 100                
Correct output: 4                   | Program output: 79                 
Correct output: 16                  | Program output: 35                 
Correct output: 12                  | Program output: 82                 
Correct output: 37                  | Program output: 63                 
Correct output: 11                  | Program output: 24                 
Correct output: 33                  | Program output: 88                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 59                 
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 50                 
Correct output: 3                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: 88                 
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: 90                 
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -20                
Correct output: -68                 | Program output: 5                  
Correct output: -61                 | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: 48                 
Correct output: -43                 | Program output: 59                 
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 60                 
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 80                 
Correct output: -5                  | Program output: 86                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -6                 
Correct output: -82                 | Program output: 88                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 100                
Correct output: -95                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 6                  
Correct output: -10                 | Program output: 99                 
Correct output: -78                 | Program output: 43                 
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 96                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: 76                 
Correct output: -83                 | Program output: 86                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -32                
Correct output: -52                 | Program output: 54                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 81                 
Correct output: -33                 | Program output: 73                 
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: 18                 
Correct output: 30                  | Program output: 40                 
Correct output: -4                  | Program output: 90                 
Correct output: -100                | Program output: -78                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_746} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_653} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction 42})
Lexicase best program: (boolean_yankdup boolean_and integer_empty exec_rot () (integer_eq in1 exec_do*while (print_integer exec_dup () exec_s (exec_shove (exec_yank exec_y () tag_integer_746 exec_do*times (exec_stackdepth exec_yankdup tagged_653 integer_inc boolean_shove integer_dup_items integer_mult integer_mult exec_swap () (integer_rot integer_stackdepth boolean_flush) exec_y_when_autoconstructing (exec_do*range (boolean_empty in4) print_newline boolean_pop) boolean_or integer_swap integer_mult integer_flush exec_yankdup) exec_do*times (integer_mod) integer_yank integer_fromboolean boolean_frominteger integer_dup_items) integer_dup_items integer_mod) (boolean_eq boolean_xor) (in4 boolean_invert_first_then_and exec_do*range (boolean_invert_first_then_and) exec_k (exec_when (integer_min print_boolean in1 42)) ()))) ())
Lexicase best errors: [0 1 0 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 79
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_746} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_653} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction 42})
Zero cases best program: (boolean_yankdup boolean_and integer_empty exec_rot () (integer_eq in1 exec_do*while (print_integer exec_dup () exec_s (exec_shove (exec_yank exec_y () tag_integer_746 exec_do*times (exec_stackdepth exec_yankdup tagged_653 integer_inc boolean_shove integer_dup_items integer_mult integer_mult exec_swap () (integer_rot integer_stackdepth boolean_flush) exec_y_when_autoconstructing (exec_do*range (boolean_empty in4) print_newline boolean_pop) boolean_or integer_swap integer_mult integer_flush exec_yankdup) exec_do*times (integer_mod) integer_yank integer_fromboolean boolean_frominteger integer_dup_items) integer_dup_items integer_mod) (boolean_eq boolean_xor) (in4 boolean_invert_first_then_and exec_do*range (boolean_invert_first_then_and) exec_k (exec_when (integer_min print_boolean in1 42)) ()))) ())
Zero cases best errors: [0 1 0 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 79
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 3 5 4 4 5 5 6 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 4 3 5 4 4 5 5 6 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction -11} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_261} {:close 0, :instruction tag_exec_705})
Best program: (exec_s (integer_min boolean_pop) (integer_flush boolean_invert_second_then_and boolean_eq exec_dup () integer_div in2 boolean_not) (exec_k_when_autoconstructing (boolean_pop exec_shove (boolean_flush) integer_gt) (integer_mod boolean_flush integer_mod boolean_yankdup integer_dec) exec_if (exec_do*times () boolean_rot boolean_stackdepth integer_mult) (boolean_xor integer_add integer_fromboolean exec_rot (exec_rot (exec_dup_items) (exec_noop in1) (exec_noop boolean_frominteger) integer_lt print_integer) (exec_dup_items exec_flush exec_noop boolean_yank integer_sub integer_yankdup exec_yankdup) (exec_y_when_autoconstructing (integer_rot integer_swap boolean_yankdup integer_dup_times) integer_add in3) boolean_invert_first_then_and integer_swap integer_swap integer_lte integer_dup_times boolean_invert_second_then_and exec_rot (-11 integer_mult boolean_not integer_empty exec_do*range (exec_dup_times (integer_lt boolean_rot exec_if () (exec_yank) boolean_shove integer_pop) boolean_dup_items print_newline exec_dup_times (exec_pop () integer_dup_items integer_shove integer_yank boolean_stackdepth exec_y (print_integer boolean_yank print_newline) integer_mult boolean_stackdepth) integer_gte integer_dup_items) integer_flush) (integer_dup boolean_invert_first_then_and boolean_xor in2 boolean_frominteger) (integer_min tagged_261) tag_exec_705 ())))
Errors: [0 1 0 1 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 95
Size: 124
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.997 0.996 0.997 0.995 0.996 0.996 0.995 0.995 0.994 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.662
Average program size in population (points): 71.126
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 494760
--- Timings ---
Current time: 1559594014566 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 29.2%
Fitness Testing:      1.8 seconds, 67.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 67                 
Correct output: 7                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 72                 
Correct output: 12                  | Program output: 47                 
Correct output: 1                   | Program output: 8                  
Correct output: 3                   | Program output: 99                 
Correct output: 27                  | Program output: 46                 
Correct output: 17                  | Program output: 82                 
Correct output: 74                  | Program output: 93                 
Correct output: 8                   | Program output: 80                 
Correct output: 3                   | Program output: 22                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 96                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: 85                 
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 23                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: 5                  
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 80                 
Correct output: -25                 | Program output: 79                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 62                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -45                
Correct output: -83                 | Program output: 10                 
Correct output: -35                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 19                 
Correct output: -46                 | Program output: 32                 
Correct output: -33                 | Program output: 70                 
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: 36                 
Correct output: -65                 | Program output: 10                 
Correct output: -69                 | Program output: 20                 
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 96                 
Correct output: -78                 | Program output: 72                 
Correct output: -19                 | Program output: 91                 
Correct output: -67                 | Program output: -4                 
Correct output: 21                  | Program output: 100                
Correct output: -79                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 91                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: 69                 
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 81                 
Correct output: -86                 | Program output: -2                 
Correct output: -98                 | Program output: -87                
Correct output: -50                 | Program output: -17                
Correct output: 47                  | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: 42                 
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_873} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_465} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_594} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_788} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank})
Lexicase best program: (integer_mult boolean_eq integer_shove integer_dup boolean_frominteger integer_empty integer_sub boolean_pop exec_s (integer_gte exec_dup (exec_swap (integer_lte integer_div exec_yankdup exec_empty boolean_xor exec_dup (exec_dup_items integer_yank integer_eq exec_yank tagged_873 boolean_or boolean_invert_second_then_and integer_gt exec_do*count (exec_dup_items boolean_stackdepth exec_empty)) integer_inc exec_do*while (tagged_465 integer_lt integer_gt) exec_do*while () boolean_stackdepth integer_stackdepth exec_when (boolean_or) in4 print_integer exec_eq exec_dup_items boolean_dup_times exec_y_when_autoconstructing () integer_rot integer_lte boolean_flush exec_y (integer_shove exec_shove (integer_min integer_fromboolean tag_integer_594 in4 integer_shove tagged_788 exec_do*times () boolean_and integer_swap)) exec_do*range (boolean_swap boolean_invert_first_then_and) exec_yank) ())) () ())
Lexicase best errors: [0 1 0 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 82
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction tagged_873} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_465} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_594} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_788} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank})
Zero cases best program: (integer_mult boolean_eq integer_shove integer_dup boolean_frominteger integer_empty integer_sub boolean_pop exec_s (integer_gte exec_dup (exec_swap (integer_lte integer_div exec_yankdup exec_empty boolean_xor exec_dup (exec_dup_items integer_yank integer_eq exec_yank tagged_873 boolean_or boolean_invert_second_then_and integer_gt exec_do*count (exec_dup_items boolean_stackdepth exec_empty)) integer_inc exec_do*while (tagged_465 integer_lt integer_gt) exec_do*while () boolean_stackdepth integer_stackdepth exec_when (boolean_or) in4 print_integer exec_eq exec_dup_items boolean_dup_times exec_y_when_autoconstructing () integer_rot integer_lte boolean_flush exec_y (integer_shove exec_shove (integer_min integer_fromboolean tag_integer_594 in4 integer_shove tagged_788 exec_do*times () boolean_and integer_swap)) exec_do*range (boolean_swap boolean_invert_first_then_and) exec_yank) ())) () ())
Zero cases best errors: [0 1 0 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 82
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 144 112 115 187 117 187 107 118 187)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (108 144 112 115 187 117 187 107 118 187)
Population mean number of perfect (error zero) cases: 1.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_873} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_788} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction integer_shove})
Best program: (integer_mult integer_shove integer_dup integer_empty integer_sub integer_gte exec_swap (integer_lte integer_div exec_yankdup exec_empty boolean_xor exec_dup (exec_dup_items integer_yank integer_eq tagged_873 boolean_or boolean_invert_second_then_and integer_gt exec_do*count (boolean_stackdepth exec_empty)) integer_inc exec_do*while (exec_do*count (integer_lt integer_gt) exec_do*while () integer_stackdepth boolean_or) in4 print_integer exec_eq exec_dup_times (boolean_dup_times exec_y_when_autoconstructing () integer_rot integer_inc boolean_flush integer_shove exec_shove (exec_dup (integer_fromboolean in4 integer_yank integer_shove tagged_788 exec_do*times () boolean_and integer_swap)) exec_do*range (boolean_invert_first_then_and) exec_while () integer_shove)) ())
Errors: [0 1 0 1 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 55
Size: 70
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 8.618
Median total errors in population: 9
Error averages by case: (0.892 0.856 0.888 0.885 0.813 0.883 0.813 0.893 0.882 0.813)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.411
Average program size in population (points): 87.815
Average percent parens in population: 0.271
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1056748
--- Timings ---
Current time: 1559594016920 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.9 seconds, 36.5%
Fitness Testing:      2.6 seconds, 51.5%
Report:               0.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: 41                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -12                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 100                
Correct output: 28                  | Program output: 41                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 85                 
Correct output: 16                  | Program output: 55                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 52                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 44                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 48                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 44                 
Correct output: 18                  | Program output: 93                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: 88                 
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 43                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 78                 
Correct output: 31                  | Program output: 47                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 44                 
Correct output: -80                 | Program output: 8                  
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: 8                  
Correct output: -35                 | Program output: 64                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 22                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: 10                 
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: 58                 
Correct output: -7                  | Program output: 20                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 100                
Correct output: -67                 | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: 35                 
Correct output: -61                 | Program output: 90                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 84                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_exec_49} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_289} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 65} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction 61} {:close 0, :instruction exec_s} {:close 0, :instruction 97} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_and tag_exec_49 (print_integer) integer_yankdup exec_yank exec_stackdepth integer_div in3 in3 boolean_and boolean_rot tagged_289 integer_dec exec_y_when_autoconstructing () boolean_yank boolean_xor boolean_and exec_shove (exec_s (exec_dup_items 65 exec_yank integer_add integer_lt boolean_dup integer_fromboolean integer_dup boolean_rot boolean_or boolean_swap) (exec_when (integer_dup_times integer_mult boolean_flush integer_empty exec_rot (integer_min integer_dup_items integer_yank exec_while () 61) (exec_s (97 exec_yankdup integer_gte) (integer_mult integer_empty integer_fromboolean in3 boolean_swap exec_empty exec_empty) (integer_fromboolean exec_do*range (integer_yank) boolean_empty) print_newline) (integer_dup_items exec_if (exec_eq) (boolean_invert_second_then_and in2 print_boolean integer_sub exec_empty boolean_shove boolean_xor exec_do*while (print_newline boolean_yankdup boolean_yankdup integer_shove))))) ()))
Lexicase best errors: [1 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 91
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tag_exec_49} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_289} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 65} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 1, :instruction 61} {:close 0, :instruction exec_s} {:close 0, :instruction 97} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_and tag_exec_49 (print_integer) integer_yankdup exec_yank exec_stackdepth integer_div in3 in3 boolean_and boolean_rot tagged_289 integer_dec exec_y_when_autoconstructing () boolean_yank boolean_xor boolean_and exec_shove (exec_s (exec_dup_items 65 exec_yank integer_add integer_lt boolean_dup integer_fromboolean integer_dup boolean_rot boolean_or boolean_swap) (exec_when (integer_dup_times integer_mult boolean_flush integer_empty exec_rot (integer_min integer_dup_items integer_yank exec_while () 61) (exec_s (97 exec_yankdup integer_gte) (integer_mult integer_empty integer_fromboolean in3 boolean_swap exec_empty exec_empty) (integer_fromboolean exec_do*range (integer_yank) boolean_empty) print_newline) (integer_dup_items exec_if (exec_eq) (boolean_invert_second_then_and in2 print_boolean integer_sub exec_empty boolean_shove boolean_xor exec_do*while (print_newline boolean_yankdup boolean_yankdup integer_shove))))) ()))
Zero cases best errors: [1 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 91
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (56 655 49 196 49 180 187 194 188 196)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (56 655 49 196 49 180 187 194 188 196)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction -85} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq})
Best program: (in3 exec_rot (print_integer) (print_boolean exec_yankdup exec_if (exec_dup_times (integer_stackdepth boolean_flush) exec_k_when_autoconstructing (exec_pop (exec_flush integer_gte) integer_eq boolean_rot) (integer_dup boolean_or) integer_dup_times exec_flush print_exec (integer_mult boolean_shove) exec_do*times (exec_k_when_autoconstructing (boolean_invert_first_then_and exec_empty boolean_dup_items integer_yank) (integer_max in1 integer_fromboolean in3 boolean_flush) boolean_dup exec_rot () (integer_add boolean_pop integer_gt) (integer_sub integer_dup_items exec_s () (exec_rot (integer_swap exec_s_when_autoconstructing (print_exec () exec_s (integer_lte exec_k_when_autoconstructing (integer_swap boolean_and boolean_invert_first_then_and exec_s (integer_dup_times in1) (integer_stackdepth integer_max) (boolean_and exec_s_when_autoconstructing (exec_if (-85 integer_stackdepth) (integer_max exec_s_when_autoconstructing (exec_eq) () ())) () ())) ()) () ()) () ()) () ()) ()))) ()) ())
Errors: [1 0 1 0 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 64
Size: 107
Percent parens: 0.402
--- Population Statistics ---
Average total errors in population: 8.05
Median total errors in population: 8
Error averages by case: (0.944 0.345 0.951 0.804 0.951 0.82 0.813 0.806 0.812 0.804)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.603
Average program size in population (points): 84.106
Average percent parens in population: 0.272
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1669484
--- Timings ---
Current time: 1559594019347 milliseconds
Total Time:           7.7 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.3 seconds, 42.1%
Fitness Testing:      3.4 seconds, 44.1%
Report:               1.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 46                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 58                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 84                 
Correct output: 20                  | Program output: 50                 
Correct output: 28                  | Program output: 87                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 88                 
Correct output: 16                  | Program output: 91                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 35                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 52                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 72                 
Correct output: 27                  | Program output: 90                 
Correct output: 17                  | Program output: 95                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 7                  
Correct output: 18                  | Program output: 31                 
Correct output: -98                 | Program output: -8                 
Correct output: -70                 | Program output: 68                 
Correct output: -92                 | Program output: -6                 
Correct output: -86                 | Program output: 56                 
Correct output: -85                 | Program output: 64                 
Correct output: -68                 | Program output: -64                
Correct output: -61                 | Program output: 44                 
Correct output: -91                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 2                  
Correct output: -88                 | Program output: -44                
Correct output: -40                 | Program output: -34                
Correct output: -25                 | Program output: -2                 
Correct output: -74                 | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 5                  
Correct output: -53                 | Program output: -43                
Correct output: -80                 | Program output: -74                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: 14                 
Correct output: -100                | Program output: 52                 
Correct output: -83                 | Program output: -55                
Correct output: -35                 | Program output: 88                 
Correct output: -99                 | Program output: 17                 
Correct output: -82                 | Program output: -62                
Correct output: -46                 | Program output: 73                 
Correct output: -33                 | Program output: 44                 
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 87                 
Correct output: -95                 | Program output: -32                
Correct output: -65                 | Program output: 84                 
Correct output: -69                 | Program output: 12                 
Correct output: -94                 | Program output: 17                 
Correct output: -42                 | Program output: 10                 
Correct output: -7                  | Program output: 8                  
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: 51                 
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 81                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: 72                 
Correct output: -52                 | Program output: 15                 
Correct output: -86                 | Program output: 22                 
Correct output: -98                 | Program output: -47                
Correct output: -50                 | Program output: -18                
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -3                 
Correct output: -100                | Program output: 69                 
Correct output: -80                 | Program output: 32                 
Correct output: 30                  | Program output: 37                 
Correct output: -4                  | Program output: 7                  
Correct output: -100                | Program output: -99                
Correct output: -96                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction -65} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction tagged_921} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2})
Lexicase best program: (exec_do*times (integer_shove integer_dup_items exec_s () (exec_dup () exec_y_when_autoconstructing () exec_do*while (boolean_swap -65 boolean_and boolean_and exec_swap () (integer_dup_items boolean_frominteger exec_do*times (boolean_xor integer_swap integer_gte boolean_yank in2 integer_fromboolean print_boolean exec_dup (boolean_flush exec_k (print_integer exec_noop integer_eq exec_empty exec_flush print_boolean integer_min integer_inc) (integer_gt boolean_invert_first_then_and integer_stackdepth integer_empty boolean_yankdup exec_dup () integer_mult exec_eq boolean_shove boolean_swap exec_y_when_autoconstructing (exec_do*while (integer_inc exec_rot () (exec_rot (integer_max boolean_stackdepth integer_sub) (integer_dup_times print_newline integer_yankdup exec_k (integer_rot boolean_yank tagged_921) (print_newline boolean_invert_first_then_and integer_yank boolean_swap exec_while (boolean_invert_first_then_and integer_min) boolean_stackdepth) exec_while (exec_shove (exec_yankdup exec_noop) exec_do*range (exec_do*times () integer_empty) exec_dup (integer_gt boolean_xor integer_lte exec_s (exec_dup_items) (integer_flush in2) ()))) ()) ())))))))) ()))
Lexicase best errors: [0 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 115
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction -65} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction tagged_921} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2})
Zero cases best program: (exec_do*times (integer_shove integer_dup_items exec_s () (exec_dup () exec_y_when_autoconstructing () exec_do*while (boolean_swap -65 boolean_and boolean_and exec_swap () (integer_dup_items boolean_frominteger exec_do*times (boolean_xor integer_swap integer_gte boolean_yank in2 integer_fromboolean print_boolean exec_dup (boolean_flush exec_k (print_integer exec_noop integer_eq exec_empty exec_flush print_boolean integer_min integer_inc) (integer_gt boolean_invert_first_then_and integer_stackdepth integer_empty boolean_yankdup exec_dup () integer_mult exec_eq boolean_shove boolean_swap exec_y_when_autoconstructing (exec_do*while (integer_inc exec_rot () (exec_rot (integer_max boolean_stackdepth integer_sub) (integer_dup_times print_newline integer_yankdup exec_k (integer_rot boolean_yank tagged_921) (print_newline boolean_invert_first_then_and integer_yank boolean_swap exec_while (boolean_invert_first_then_and integer_min) boolean_stackdepth) exec_while (exec_shove (exec_yankdup exec_noop) exec_do*range (exec_do*times () integer_empty) exec_dup (integer_gt boolean_xor integer_lte exec_s (exec_dup_items) (integer_flush in2) ()))) ()) ())))))))) ()))
Zero cases best errors: [0 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 115
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 75 185 205 186 399 207 607 75 193)
Population mean number of elite cases: 2.32
Count of perfect (error zero) individuals by case: (185 75 185 205 186 399 207 607 75 193)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction -87} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_692} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -29} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while})
Best program: (boolean_and print_integer integer_add exec_dup_items integer_mult boolean_stackdepth integer_yank integer_max integer_min integer_yank boolean_stackdepth exec_shove (in2 boolean_empty boolean_flush boolean_swap) print_integer integer_flush in2 integer_gt boolean_xor in2 integer_empty exec_do*while (integer_empty) integer_gt boolean_flush boolean_eq exec_flush boolean_or exec_if (-87 exec_k (exec_yankdup tagged_692 integer_gte) (in3 integer_max print_exec () exec_k_when_autoconstructing (in3) (boolean_not integer_inc integer_gte) integer_rot) integer_eq boolean_swap boolean_not integer_mod integer_dup exec_s (boolean_yankdup exec_y_when_autoconstructing (exec_rot (in2) (boolean_eq boolean_invert_first_then_and) () boolean_shove) integer_dup integer_dup_times -29 boolean_rot boolean_dup exec_pop (print_exec () exec_when (integer_eq boolean_dup_times exec_when () exec_y_when_autoconstructing (print_newline integer_yankdup) integer_inc) exec_shove (exec_swap (exec_do*while (integer_eq exec_do*while (exec_dup_items integer_fromboolean) integer_pop exec_while ())) ()))) () ()) ())
Errors: [0 1 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 82
Size: 110
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.683
Median total errors in population: 8
Error averages by case: (0.815 0.925 0.815 0.795 0.814 0.601 0.793 0.393 0.925 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.255
Average program size in population (points): 83.123
Average percent parens in population: 0.279
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2163157
--- Timings ---
Current time: 1559594021680 milliseconds
Total Time:          10.0 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.7 seconds, 47.2%
Fitness Testing:      4.0 seconds, 39.8%
Report:               1.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 46                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 58                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 84                 
Correct output: 20                  | Program output: 50                 
Correct output: 28                  | Program output: 87                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 88                 
Correct output: 16                  | Program output: 91                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 35                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 52                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 72                 
Correct output: 27                  | Program output: 90                 
Correct output: 17                  | Program output: 95                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 7                  
Correct output: 18                  | Program output: 31                 
Correct output: -98                 | Program output: -8                 
Correct output: -70                 | Program output: 68                 
Correct output: -92                 | Program output: -6                 
Correct output: -86                 | Program output: 56                 
Correct output: -85                 | Program output: 64                 
Correct output: -68                 | Program output: -64                
Correct output: -61                 | Program output: 44                 
Correct output: -91                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 2                  
Correct output: -88                 | Program output: -44                
Correct output: -40                 | Program output: -34                
Correct output: -25                 | Program output: -2                 
Correct output: -74                 | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 5                  
Correct output: -53                 | Program output: -43                
Correct output: -80                 | Program output: -74                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: 14                 
Correct output: -100                | Program output: 52                 
Correct output: -83                 | Program output: -55                
Correct output: -35                 | Program output: 88                 
Correct output: -99                 | Program output: 17                 
Correct output: -82                 | Program output: -62                
Correct output: -46                 | Program output: 73                 
Correct output: -33                 | Program output: 44                 
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 87                 
Correct output: -95                 | Program output: -32                
Correct output: -65                 | Program output: 84                 
Correct output: -69                 | Program output: 12                 
Correct output: -94                 | Program output: 17                 
Correct output: -42                 | Program output: 10                 
Correct output: -7                  | Program output: 8                  
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: 51                 
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 81                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: 72                 
Correct output: -52                 | Program output: 15                 
Correct output: -86                 | Program output: 22                 
Correct output: -98                 | Program output: -47                
Correct output: -50                 | Program output: -18                
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -3                 
Correct output: -100                | Program output: 69                 
Correct output: -80                 | Program output: 32                 
Correct output: 30                  | Program output: 37                 
Correct output: -4                  | Program output: 7                  
Correct output: -100                | Program output: -99                
Correct output: -96                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction -87} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_692} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop})
Lexicase best program: (print_integer exec_dup_items integer_mult boolean_stackdepth integer_yank integer_max integer_min exec_dup_items integer_yank boolean_stackdepth exec_do*while (integer_div exec_yankdup in2 boolean_empty integer_yankdup boolean_flush print_integer in2 integer_gt integer_empty boolean_flush) exec_flush boolean_or exec_if (-87 integer_flush exec_yankdup tagged_692 boolean_and integer_gte) (integer_dup) integer_lte in3 print_exec () exec_empty exec_dup (integer_gte) integer_yank exec_do*range (boolean_swap integer_mod integer_lt) integer_dup exec_s (boolean_yankdup exec_yankdup exec_y_when_autoconstructing (exec_rot (boolean_eq boolean_swap boolean_dup_times integer_dup integer_gt integer_dup_times -29 exec_pop (integer_eq print_exec () print_newline exec_when (integer_eq print_newline integer_yankdup) exec_y_when_autoconstructing (integer_inc) integer_dup_items exec_do*while (integer_eq exec_do*while (integer_pop exec_pop ())))) () ())) () ())
Lexicase best errors: [1 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 93
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction -87} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_692} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 1, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop})
Zero cases best program: (print_integer exec_dup_items integer_mult boolean_stackdepth integer_yank integer_max integer_min exec_dup_items integer_yank boolean_stackdepth exec_do*while (integer_div exec_yankdup in2 boolean_empty integer_yankdup boolean_flush print_integer in2 integer_gt integer_empty boolean_flush) exec_flush boolean_or exec_if (-87 integer_flush exec_yankdup tagged_692 boolean_and integer_gte) (integer_dup) integer_lte in3 print_exec () exec_empty exec_dup (integer_gte) integer_yank exec_do*range (boolean_swap integer_mod integer_lt) integer_dup exec_s (boolean_yankdup exec_yankdup exec_y_when_autoconstructing (exec_rot (boolean_eq boolean_swap boolean_dup_times integer_dup integer_gt integer_dup_times -29 exec_pop (integer_eq print_exec () print_newline exec_when (integer_eq print_newline integer_yankdup) exec_y_when_autoconstructing (integer_inc) integer_dup_items exec_do*while (integer_eq exec_do*while (integer_pop exec_pop ())))) () ())) () ())
Zero cases best errors: [1 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 93
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 323 320 324 5 154 5 479 5 152)
Population mean number of elite cases: 1.77
Count of perfect (error zero) individuals by case: (5 323 320 324 5 154 5 479 5 152)
Population mean number of perfect (error zero) cases: 1.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction -87} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 1, :instruction print_exec} {:close 2, :instruction exec_while} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop})
Best program: (boolean_and integer_yankdup integer_mult boolean_stackdepth integer_yank integer_min integer_yank exec_shove (in2 boolean_flush print_integer integer_flush in2 integer_gt in2 integer_empty integer_gte boolean_flush) exec_flush print_boolean integer_dup_times integer_dec exec_if (-87 exec_yankdup boolean_pop) (boolean_and integer_gte) integer_dup in3 exec_dup () integer_lt in2 boolean_not boolean_swap integer_gte print_boolean exec_do*count (exec_shove (integer_mod integer_dup exec_s (boolean_yankdup exec_y_when_autoconstructing (boolean_eq boolean_invert_first_then_and)) (integer_dup integer_dup_times boolean_eq boolean_yankdup boolean_frominteger) (exec_pop (print_exec () exec_while ()) exec_when (boolean_empty) integer_eq exec_when () integer_div print_newline exec_do*range (exec_swap (exec_do*while (exec_k_when_autoconstructing () (integer_eq print_newline integer_inc integer_pop))) ())))))
Errors: [1 0 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 68
Size: 90
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 8.228
Median total errors in population: 9
Error averages by case: (0.995 0.677 0.68 0.676 0.995 0.846 0.995 0.521 0.995 0.848)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.854
Average program size in population (points): 83.86
Average percent parens in population: 0.276
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2643388
--- Timings ---
Current time: 1559594023782 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.0 seconds, 49.4%
Fitness Testing:      4.5 seconds, 37.3%
Report:               1.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 46                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 58                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 84                 
Correct output: 20                  | Program output: 50                 
Correct output: 28                  | Program output: 87                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 88                 
Correct output: 16                  | Program output: 91                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 35                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 52                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 72                 
Correct output: 27                  | Program output: 90                 
Correct output: 17                  | Program output: 95                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 7                  
Correct output: 18                  | Program output: 31                 
Correct output: -98                 | Program output: -8                 
Correct output: -70                 | Program output: 68                 
Correct output: -92                 | Program output: -6                 
Correct output: -86                 | Program output: 56                 
Correct output: -85                 | Program output: 64                 
Correct output: -68                 | Program output: -64                
Correct output: -61                 | Program output: 44                 
Correct output: -91                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 2                  
Correct output: -88                 | Program output: -44                
Correct output: -40                 | Program output: -34                
Correct output: -25                 | Program output: -2                 
Correct output: -74                 | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 5                  
Correct output: -53                 | Program output: -43                
Correct output: -80                 | Program output: -74                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: 14                 
Correct output: -100                | Program output: 52                 
Correct output: -83                 | Program output: -55                
Correct output: -35                 | Program output: 88                 
Correct output: -99                 | Program output: 17                 
Correct output: -82                 | Program output: -62                
Correct output: -46                 | Program output: 73                 
Correct output: -33                 | Program output: 44                 
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 87                 
Correct output: -95                 | Program output: -32                
Correct output: -65                 | Program output: 84                 
Correct output: -69                 | Program output: 12                 
Correct output: -94                 | Program output: 17                 
Correct output: -42                 | Program output: 10                 
Correct output: -7                  | Program output: 8                  
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: 51                 
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 81                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: 72                 
Correct output: -52                 | Program output: 15                 
Correct output: -86                 | Program output: 22                 
Correct output: -98                 | Program output: -47                
Correct output: -50                 | Program output: -18                
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -3                 
Correct output: -100                | Program output: 69                 
Correct output: -80                 | Program output: 32                 
Correct output: 30                  | Program output: 37                 
Correct output: -4                  | Program output: 7                  
Correct output: -100                | Program output: -99                
Correct output: -96                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_and integer_mult boolean_and boolean_stackdepth integer_yank integer_dup_times integer_min integer_min integer_yank in2 boolean_flush print_integer integer_flush in2 integer_gt in2 integer_empty exec_flush print_boolean integer_dec exec_if (integer_min exec_yankdup boolean_pop) (boolean_and integer_lte exec_k_when_autoconstructing (integer_dup) (in3 exec_dup () in2 boolean_not integer_gte) exec_do*count (exec_shove (exec_shove (integer_mod integer_dup exec_s (boolean_yankdup boolean_swap boolean_eq exec_if () (integer_shove boolean_eq boolean_yankdup boolean_frominteger) exec_pop (print_exec () exec_when (integer_swap exec_do*range (boolean_empty) integer_eq exec_when () integer_div boolean_dup_times exec_y_when_autoconstructing (integer_inc exec_swap (exec_do*while (exec_do*while (integer_pop exec_pop (integer_max integer_min)))) ())))) () ())))))
Lexicase best errors: [1 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 91
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_and integer_mult boolean_and boolean_stackdepth integer_yank integer_dup_times integer_min integer_min integer_yank in2 boolean_flush print_integer integer_flush in2 integer_gt in2 integer_empty exec_flush print_boolean integer_dec exec_if (integer_min exec_yankdup boolean_pop) (boolean_and integer_lte exec_k_when_autoconstructing (integer_dup) (in3 exec_dup () in2 boolean_not integer_gte) exec_do*count (exec_shove (exec_shove (integer_mod integer_dup exec_s (boolean_yankdup boolean_swap boolean_eq exec_if () (integer_shove boolean_eq boolean_yankdup boolean_frominteger) exec_pop (print_exec () exec_when (integer_swap exec_do*range (boolean_empty) integer_eq exec_when () integer_div boolean_dup_times exec_y_when_autoconstructing (integer_inc exec_swap (exec_do*while (exec_do*while (integer_pop exec_pop (integer_max integer_min)))) ())))) () ())))))
Zero cases best errors: [1 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 91
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 92 215 216 107 125 209 209 91 529)
Population mean number of elite cases: 1.89
Count of perfect (error zero) individuals by case: (94 92 215 216 107 125 209 209 91 529)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_267} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_692} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -29} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction print_newline} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop})
Best program: (boolean_and print_integer integer_dec exec_dup_items integer_mult integer_yank integer_min integer_yank boolean_dup_items boolean_invert_first_then_and integer_max boolean_shove in2 integer_min boolean_empty boolean_flush print_integer integer_max tagged_267 integer_flush in2 boolean_empty integer_gt in2 integer_lte integer_empty boolean_flush exec_flush exec_flush integer_min boolean_or integer_dec exec_yankdup tagged_692 exec_do*range (exec_empty boolean_and integer_gte) integer_dup print_exec () exec_k_when_autoconstructing (exec_rot (in2 integer_gte) (exec_flush integer_sub integer_rot) (exec_do*times ()) boolean_swap integer_dec integer_mod exec_stackdepth integer_dup exec_dup_times (boolean_yankdup exec_y_when_autoconstructing (in2) integer_max print_newline) boolean_invert_second_then_and) (boolean_eq exec_flush integer_dup integer_dup_times boolean_yankdup -29 in3 exec_pop (print_exec () exec_when (exec_while (exec_when () print_newline boolean_and)) boolean_rot in3) exec_empty exec_y_when_autoconstructing (integer_dup_times exec_swap (integer_pop integer_rot exec_pop ()) ())))
Errors: [1 1 0 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 83
Size: 103
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 8.113
Median total errors in population: 9
Error averages by case: (0.906 0.908 0.785 0.784 0.893 0.875 0.791 0.791 0.909 0.471)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.558
Average program size in population (points): 75.254
Average percent parens in population: 0.265
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.992
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.992
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3161832
--- Timings ---
Current time: 1559594025897 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.3 seconds, 51.1%
Fitness Testing:      5.1 seconds, 35.8%
Report:               1.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 46                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 58                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 84                 
Correct output: 20                  | Program output: 50                 
Correct output: 28                  | Program output: 87                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 88                 
Correct output: 16                  | Program output: 91                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 35                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 52                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 72                 
Correct output: 27                  | Program output: 90                 
Correct output: 17                  | Program output: 95                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 7                  
Correct output: 18                  | Program output: 31                 
Correct output: -98                 | Program output: -8                 
Correct output: -70                 | Program output: 68                 
Correct output: -92                 | Program output: -6                 
Correct output: -86                 | Program output: 56                 
Correct output: -85                 | Program output: 64                 
Correct output: -68                 | Program output: -64                
Correct output: -61                 | Program output: 44                 
Correct output: -91                 | Program output: 40                 
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 2                  
Correct output: -88                 | Program output: -44                
Correct output: -40                 | Program output: -34                
Correct output: -25                 | Program output: -2                 
Correct output: -74                 | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: 5                  
Correct output: -53                 | Program output: -43                
Correct output: -80                 | Program output: -74                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: 14                 
Correct output: -100                | Program output: 52                 
Correct output: -83                 | Program output: -55                
Correct output: -35                 | Program output: 88                 
Correct output: -99                 | Program output: 17                 
Correct output: -82                 | Program output: -62                
Correct output: -46                 | Program output: 73                 
Correct output: -33                 | Program output: 44                 
Correct output: -52                 | Program output: 85                 
Correct output: -41                 | Program output: 87                 
Correct output: -95                 | Program output: -32                
Correct output: -65                 | Program output: 84                 
Correct output: -69                 | Program output: 12                 
Correct output: -94                 | Program output: 17                 
Correct output: -42                 | Program output: 10                 
Correct output: -7                  | Program output: 8                  
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: 51                 
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 81                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: 72                 
Correct output: -52                 | Program output: 15                 
Correct output: -86                 | Program output: 22                 
Correct output: -98                 | Program output: -47                
Correct output: -50                 | Program output: -18                
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -3                 
Correct output: -100                | Program output: 69                 
Correct output: -80                 | Program output: 32                 
Correct output: 30                  | Program output: 37                 
Correct output: -4                  | Program output: 7                  
Correct output: -100                | Program output: -99                
Correct output: -96                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction -87} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_692} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop})
Lexicase best program: (boolean_or print_integer exec_dup_items integer_mult integer_lte integer_min integer_yank integer_max exec_shove (integer_yankdup exec_shove (in2 print_integer integer_mult) integer_flush integer_gt integer_empty exec_flush boolean_or integer_dec exec_if (integer_shove integer_inc -87 exec_k_when_autoconstructing (boolean_yankdup tagged_692 boolean_and integer_dup) (boolean_invert_first_then_and print_exec (in2 boolean_not boolean_eq integer_gte) exec_flush exec_s_when_autoconstructing (exec_yank integer_rot) (boolean_swap integer_mod in3 in1) (boolean_yankdup exec_while (boolean_xor exec_y_when_autoconstructing (exec_do*count (exec_k (exec_noop) (integer_dup boolean_eq boolean_yankdup boolean_rot -29 exec_pop (integer_shove print_exec (integer_mod exec_while (integer_empty) integer_swap) integer_eq print_newline exec_y_when_autoconstructing (exec_swap (exec_do*while (integer_pop integer_rot exec_pop ())) ()))))))))) ()))
Lexicase best errors: [0 1 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction -87} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_692} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction -29} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop})
Zero cases best program: (boolean_or print_integer exec_dup_items integer_mult integer_lte integer_min integer_yank integer_max exec_shove (integer_yankdup exec_shove (in2 print_integer integer_mult) integer_flush integer_gt integer_empty exec_flush boolean_or integer_dec exec_if (integer_shove integer_inc -87 exec_k_when_autoconstructing (boolean_yankdup tagged_692 boolean_and integer_dup) (boolean_invert_first_then_and print_exec (in2 boolean_not boolean_eq integer_gte) exec_flush exec_s_when_autoconstructing (exec_yank integer_rot) (boolean_swap integer_mod in3 in1) (boolean_yankdup exec_while (boolean_xor exec_y_when_autoconstructing (exec_do*count (exec_k (exec_noop) (integer_dup boolean_eq boolean_yankdup boolean_rot -29 exec_pop (integer_shove print_exec (integer_mod exec_while (integer_empty) integer_swap) integer_eq print_newline exec_y_when_autoconstructing (exec_swap (exec_do*while (integer_pop integer_rot exec_pop ())) ()))))))))) ()))
Zero cases best errors: [0 1 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 292 263 264 90 91 368 293 9 8)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (263 292 263 264 90 91 368 293 9 8)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_20} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 3, :instruction in4} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Best program: (exec_k_when_autoconstructing (tagged_20 print_boolean integer_eq exec_pop (boolean_invert_first_then_and in4)) () integer_max boolean_dup_times boolean_dup_times boolean_stackdepth integer_dup_times boolean_dup_times in3 exec_dup () in2 boolean_dup_times print_integer in2 exec_k (in4 integer_mult exec_shove ()) ())
Errors: [0 1 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 8.059
Median total errors in population: 8
Error averages by case: (0.737 0.708 0.737 0.736 0.91 0.909 0.632 0.707 0.991 0.992)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.654
Average program size in population (points): 73.041
Average percent parens in population: 0.282
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3578973
--- Timings ---
Current time: 1559594027857 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.5 seconds, 52.5%
Fitness Testing:      5.6 seconds, 34.4%
Report:               2.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 72                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 8                  
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 22                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: 19                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: 7                  
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 96                 
Correct output: -78                 | Program output: 43                 
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 96                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -4                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 54                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 81                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yank} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_k_when_autoconstructing (boolean_invert_first_then_and integer_yank) (in4) exec_eq boolean_dup_times boolean_shove boolean_stackdepth boolean_dup_times in1 tagged_348 integer_min in3 integer_yankdup print_integer integer_pop exec_k (exec_while (integer_pop boolean_frominteger integer_rot integer_mult boolean_dup_items exec_shove ())) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yank} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_k_when_autoconstructing (boolean_invert_first_then_and integer_yank) (in4) exec_eq boolean_dup_times boolean_shove boolean_stackdepth boolean_dup_times in1 tagged_348 integer_min in3 integer_yankdup print_integer integer_pop exec_k (exec_while (integer_pop boolean_frominteger integer_rot integer_mult boolean_dup_items exec_shove ())) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 199 679 448 248 201 431 94 199 328)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (7 199 679 448 248 201 431 94 199 328)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yank} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove})
Best program: (exec_k_when_autoconstructing (boolean_invert_first_then_and integer_yank) (in4) exec_eq boolean_dup_times boolean_shove boolean_stackdepth boolean_dup_times in1 tagged_348 integer_min in3 integer_yankdup print_integer integer_pop exec_k (exec_while (integer_pop boolean_frominteger integer_rot integer_mult boolean_dup_items exec_shove ())) ())
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.166
Median total errors in population: 6
Error averages by case: (0.993 0.801 0.321 0.552 0.752 0.799 0.569 0.906 0.801 0.672)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.811
Average program size in population (points): 54.471
Average percent parens in population: 0.234
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.009
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3928235
--- Timings ---
Current time: 1559594029650 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.8 seconds, 53.9%
Fitness Testing:      6.0 seconds, 33.0%
Report:               2.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 79                 
Correct output: 16                  | Program output: 35                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 24                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 59                 
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 6                  
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: 76                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 40                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -78                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove})
Lexicase best program: (in3 boolean_invert_first_then_and exec_stackdepth integer_yank boolean_rot in4 exec_eq boolean_dup_times boolean_stackdepth boolean_dup_times in1 tagged_348 integer_min in3 integer_yankdup print_integer boolean_flush integer_pop exec_k (exec_yankdup exec_while (integer_pop boolean_frominteger integer_mult boolean_dup_items exec_shove ())) ())
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove})
Zero cases best program: (in3 boolean_invert_first_then_and exec_stackdepth integer_yank boolean_rot in4 exec_eq boolean_dup_times boolean_stackdepth boolean_dup_times in1 tagged_348 integer_min in3 integer_yankdup print_integer boolean_flush integer_pop exec_k (exec_yankdup exec_while (integer_pop boolean_frominteger integer_mult boolean_dup_items exec_shove ())) ())
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (376 197 91 311 712 729 443 283 96 708)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (376 197 91 311 712 729 443 283 96 708)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove})
Best program: (in3 boolean_invert_first_then_and exec_stackdepth integer_yank boolean_rot in4 exec_eq boolean_dup_times boolean_stackdepth boolean_dup_times in1 tagged_348 integer_min in3 integer_yankdup print_integer boolean_flush integer_pop exec_k (exec_yankdup exec_while (integer_pop boolean_frominteger integer_mult boolean_dup_items exec_shove ())) ())
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 6.054
Median total errors in population: 5
Error averages by case: (0.624 0.803 0.909 0.689 0.288 0.271 0.557 0.717 0.904 0.292)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.778
Average program size in population (points): 38.6
Average percent parens in population: 0.219
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.009
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4172394
--- Timings ---
Current time: 1559594031267 milliseconds
Total Time:          19.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.9 seconds, 55.3%
Fitness Testing:      6.2 seconds, 31.7%
Report:               2.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 22                 
Correct output: 4                   | Program output: 79                 
Correct output: 16                  | Program output: 35                 
Correct output: 12                  | Program output: 77                 
Correct output: 37                  | Program output: 39                 
Correct output: 11                  | Program output: 24                 
Correct output: 33                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 17                 
Correct output: 74                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 18                 
Correct output: 3                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: 60                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: 59                 
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 46                 
Correct output: -5                  | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: 75                 
Correct output: -41                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: 6                  
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 21                 
Correct output: -79                 | Program output: -52                
Correct output: -61                 | Program output: 76                 
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 35                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 47                 
Correct output: -33                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 40                 
Correct output: -4                  | Program output: 3                  
Correct output: -100                | Program output: -78                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove})
Lexicase best program: (in3 boolean_invert_first_then_and exec_stackdepth integer_yank boolean_rot in4 exec_eq boolean_dup_times boolean_stackdepth boolean_dup_times in1 tagged_348 integer_min in3 integer_yankdup print_integer boolean_flush integer_pop exec_yankdup exec_while (integer_pop integer_flush) boolean_frominteger integer_mult boolean_dup_items exec_shove ())
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove})
Zero cases best program: (in3 boolean_invert_first_then_and exec_stackdepth integer_yank boolean_rot in4 exec_eq boolean_dup_times boolean_stackdepth boolean_dup_times in1 tagged_348 integer_min in3 integer_yankdup print_integer boolean_flush integer_pop exec_yankdup exec_while (integer_pop integer_flush) boolean_frominteger integer_mult boolean_dup_items exec_shove ())
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (342 339 112 111 317 168 343 291 285 320)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (342 339 112 111 317 168 343 291 285 320)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove})
Best program: (in3 boolean_invert_first_then_and exec_stackdepth integer_yank boolean_rot in4 exec_eq boolean_dup_times boolean_stackdepth boolean_dup_times in1 tagged_348 integer_min in3 integer_yankdup print_integer boolean_or boolean_flush integer_pop exec_k (exec_yankdup exec_while (integer_pop integer_mult boolean_dup_items exec_shove ())) ())
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 7.372
Median total errors in population: 7
Error averages by case: (0.658 0.661 0.888 0.889 0.683 0.832 0.657 0.709 0.715 0.68)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.608
Average program size in population (points): 32.036
Average percent parens in population: 0.199
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.008
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4453904
--- Timings ---
Current time: 1559594032875 milliseconds
Total Time:          21.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.0 seconds, 56.4%
Fitness Testing:      6.6 seconds, 30.8%
Report:               2.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 464
Test mean error for best: 0.46400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 67                 
Correct output: 7                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 56                 
Correct output: 37                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 72                 
Correct output: 12                  | Program output: 47                 
Correct output: 1                   | Program output: 8                  
Correct output: 3                   | Program output: 99                 
Correct output: 27                  | Program output: 46                 
Correct output: 17                  | Program output: 82                 
Correct output: 74                  | Program output: 93                 
Correct output: 8                   | Program output: 80                 
Correct output: 3                   | Program output: 22                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 96                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: 43                 
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: 79                 
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: -17                
Correct output: 31                  | Program output: 62                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 16                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 10                 
Correct output: -35                 | Program output: 41                 
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: 32                 
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: 20                 
Correct output: -94                 | Program output: -68                
Correct output: -42                 | Program output: -33                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 91                 
Correct output: -67                 | Program output: -4                 
Correct output: 21                  | Program output: 100                
Correct output: -79                 | Program output: 17                 
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 91                 
Correct output: 19                  | Program output: 83                 
Correct output: -88                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -78                
Correct output: -96                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yank} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_k_when_autoconstructing (boolean_invert_first_then_and integer_yank) (in4) exec_eq exec_do*while () boolean_dup_times boolean_stackdepth in3 in1 tagged_348 integer_min boolean_flush integer_min integer_yankdup print_integer integer_pop boolean_dup_times exec_k (exec_while (integer_empty integer_pop print_boolean integer_add integer_rot exec_empty integer_mult)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yank} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_k_when_autoconstructing (boolean_invert_first_then_and integer_yank) (in4) exec_eq exec_do*while () boolean_dup_times boolean_stackdepth in3 in1 tagged_348 integer_min boolean_flush integer_min integer_yankdup print_integer integer_pop boolean_dup_times exec_k (exec_while (integer_empty integer_pop print_boolean integer_add integer_rot exec_empty integer_mult)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 372 370 439 438 372 375 374 204 216)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (473 372 370 439 438 372 375 374 204 216)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yank} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Best program: (exec_k_when_autoconstructing (boolean_invert_first_then_and integer_yank) (in4) exec_eq exec_do*while () boolean_stackdepth in3 in1 tagged_348 integer_min boolean_flush in3 integer_yankdup print_integer integer_pop exec_k (exec_while (integer_pop boolean_frominteger print_boolean integer_add integer_rot exec_empty integer_mult exec_shove ())) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.367
Median total errors in population: 6
Error averages by case: (0.527 0.628 0.63 0.561 0.562 0.628 0.625 0.626 0.796 0.784)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.018
Average program size in population (points): 32.173
Average percent parens in population: 0.188
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.01
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4695495
--- Timings ---
Current time: 1559594034429 milliseconds
Total Time:          22.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.2 seconds, 57.4%
Fitness Testing:      6.8 seconds, 29.8%
Report:               2.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -13                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -12                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -9                 
Correct output: -80                 | Program output: -37                
Correct output: -90                 | Program output: -90                
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -15                
Correct output: -91                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -37                
Correct output: -40                 | Program output: -40                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -64                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -52                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -2                 
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -52                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -13                
Correct output: -50                 | Program output: -5                 
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -34                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_invert_first_then_and in2 in4 exec_eq exec_when (boolean_swap integer_mult boolean_dup_times boolean_stackdepth boolean_dup_times exec_empty) in1 tagged_348 integer_min boolean_pop integer_min in3 in3 integer_yankdup print_integer integer_pop integer_yankdup exec_k (exec_dup_items exec_while (integer_pop integer_rot integer_mult exec_shove ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_invert_first_then_and in2 in4 exec_eq exec_when (boolean_swap integer_mult boolean_dup_times boolean_stackdepth boolean_dup_times exec_empty) in1 tagged_348 integer_min boolean_pop integer_min in3 in3 integer_yankdup print_integer integer_pop integer_yankdup exec_k (exec_dup_items exec_while (integer_pop integer_rot integer_mult exec_shove ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 152 439 354 158 230 15 497 11 644)
Population mean number of elite cases: 2.66
Count of perfect (error zero) individuals by case: (158 152 439 354 158 230 15 497 11 644)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Best program: (boolean_invert_first_then_and in2 in4 exec_eq exec_when (boolean_swap integer_mult boolean_dup_times boolean_stackdepth boolean_dup_times exec_empty) in1 tagged_348 integer_min boolean_pop integer_min in3 in3 integer_yankdup print_integer integer_pop integer_yankdup exec_k (exec_dup_items exec_while (integer_pop integer_rot integer_mult exec_shove ())) ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 29
Size: 35
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 7.342
Median total errors in population: 7
Error averages by case: (0.842 0.848 0.561 0.646 0.842 0.77 0.985 0.503 0.989 0.356)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.635
Average program size in population (points): 35.629
Average percent parens in population: 0.217
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.01
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4946455
--- Timings ---
Current time: 1559594036022 milliseconds
Total Time:          24.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.3 seconds, 58.4%
Fitness Testing:      7.1 seconds, 29.1%
Report:               3.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 202
Test mean error for best: 0.20200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -62                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 15                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_invert_first_then_and in2 in4 exec_eq exec_when (boolean_swap boolean_invert_second_then_and integer_mult boolean_dup_times boolean_stackdepth boolean_dup_times exec_empty) in1 tagged_348 integer_min boolean_pop integer_min in3 in3 integer_mult integer_yankdup print_integer exec_flush exec_k (exec_dup_items exec_while (integer_pop integer_rot integer_mult exec_shove ())) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 36
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_invert_first_then_and in2 in4 exec_eq exec_when (boolean_swap boolean_invert_second_then_and integer_mult boolean_dup_times boolean_stackdepth boolean_dup_times exec_empty) in1 tagged_348 integer_min boolean_pop integer_min in3 in3 integer_mult integer_yankdup print_integer exec_flush exec_k (exec_dup_items exec_while (integer_pop integer_rot integer_mult exec_shove ())) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 36
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 760 450 506 272 282 436 172 170 300)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (384 760 450 506 272 282 436 172 170 300)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction tagged_348} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_763} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Best program: (boolean_invert_first_then_and in2 in4 exec_eq exec_when (boolean_swap integer_mult boolean_dup_times boolean_stackdepth boolean_dup_times exec_empty) in1 tagged_348 integer_min integer_min in3 integer_yankdup print_integer integer_pop tag_boolean_763 integer_yankdup exec_k (exec_dup_items exec_while (integer_pop integer_rot integer_mult exec_shove ())) ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 34
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.268
Median total errors in population: 7
Error averages by case: (0.616 0.24 0.55 0.494 0.728 0.718 0.564 0.828 0.83 0.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.119
Average program size in population (points): 34.526
Average percent parens in population: 0.184
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.01
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5184803
--- Timings ---
Current time: 1559594037581 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.4 seconds, 59.2%
Fitness Testing:      7.4 seconds, 28.4%
Report:               3.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -62                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 15                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_invert_first_then_and exec_swap (exec_s (integer_yank integer_yank) (in2 in4) ()) (exec_eq integer_mult boolean_dup_times exec_empty) in1 integer_min boolean_pop integer_min integer_add in3 boolean_invert_first_then_and boolean_pop integer_yankdup print_integer integer_pop exec_k (exec_while (integer_pop exec_empty integer_add integer_rot integer_mult exec_shove ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_invert_first_then_and exec_swap (exec_s (integer_yank integer_yank) (in2 in4) ()) (exec_eq integer_mult boolean_dup_times exec_empty) in1 integer_min boolean_pop integer_min integer_add in3 boolean_invert_first_then_and boolean_pop integer_yankdup print_integer integer_pop exec_k (exec_while (integer_pop exec_empty integer_add integer_rot integer_mult exec_shove ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (463 621 554 540 461 414 401 460 295 478)
Population mean number of elite cases: 4.69
Count of perfect (error zero) individuals by case: (463 621 554 540 461 414 401 460 295 478)
Population mean number of perfect (error zero) cases: 4.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 3, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_shove})
Best program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.313
Median total errors in population: 5
Error averages by case: (0.537 0.379 0.446 0.46 0.539 0.586 0.599 0.54 0.705 0.522)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.251
Average program size in population (points): 35.068
Average percent parens in population: 0.192
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.011
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5451589
--- Timings ---
Current time: 1559594039210 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.5 seconds, 59.9%
Fitness Testing:      7.7 seconds, 27.8%
Report:               3.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 13
Successful program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 38


Auto-simplifying with starting size: 38
step: 0
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 500
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1000
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1500
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2000
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2500
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3000
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3500
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4000
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4500
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 5000
program: (boolean_invert_first_then_and exec_s (integer_yank) (in2 in4) () exec_eq integer_mult boolean_dup_times exec_empty in1 integer_min boolean_pop integer_min integer_add boolean_and in3 boolean_invert_first_then_and integer_shove integer_yankdup print_integer exec_k (integer_lte exec_while (integer_pop exec_empty integer_add integer_rot integer_mult in3 exec_shove ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 31                  | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -5                  | Program output: -5                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: 88                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 8                   | Program output: 16                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 79                 
Correct output: 74                  | Program output: 74                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -68                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -91                 | Program output: -91                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -40                 | Program output: -34                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: 31                  | Program output: 31                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: -5                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -62                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 3                  
Correct output: -52                 | Program output: -52                
Correct output: -41                 | Program output: -41                
Correct output: -95                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -67                 | Program output: -67                
Correct output: 21                  | Program output: 58                 
Correct output: -79                 | Program output: -79                
Correct output: -61                 | Program output: -61                
Correct output: -83                 | Program output: -83                
Correct output: 21                  | Program output: 79                 
Correct output: 19                  | Program output: 19                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -80                
Correct output: -52                 | Program output: 15                 
Correct output: -86                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -50                 | Program output: -50                
Correct output: 47                  | Program output: 56                 
Correct output: -33                 | Program output: -33                
Correct output: -100                | Program output: -54                
Correct output: -80                 | Program output: -41                
Correct output: 30                  | Program output: 30                 
Correct output: -4                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
;;******************************
