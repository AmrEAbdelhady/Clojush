Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x17e6b7e4 clojush.problems.software.smallest$fn__7461@17e6b7e4] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0xb842275 clojush.instructions.tag$tag_instruction_erc$fn__2160@b842275] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x11c25846 clojush.instructions.tag$tagged_instruction_erc$fn__2166@11c25846] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0xdd9de63 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@dd9de63]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x98712fa clojush.problems.software.smallest$smallest_initial_report@98712fa]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x3b8d2abe clojush.problems.software.smallest$smallest_report@3b8d2abe]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[13 13 13 87] 13] [[15 -67 15 15] -67] [[3 3 3 80] 3] [[76 -89 -89 -89] -89] [[69 -23 -23 -23] -23] [[-83 -83 -83 -59] -83] [[75 75 75 -18] -18] [[-40 72 -40 -40] -40] [[-13 -49 -13 -13] -49] [[33 0 33 33] 0] [(79 79 79 79) 79] [(-93 -93 -93 -93) -93] [(55 55 55 55) 55] [(-59 -59 -59 -59) -59] [(44 44 44 44) 44] [(68 24 21 22) 21] [(87 79 37 38) 37] [(83 67 63 5) 5] [(34 20 75 35) 20] [(11 14 43 86) 11] [(32 49 86 35) 32] [(30 22 20 99) 20] [(0 97 100 72) 0] [(63 24 26 95) 24] [(8 40 12 46) 8] [(13 15 26 7) 7] [(24 76 66 7) 7] [(29 72 30 41) 29] [(66 80 95 78) 66] [(49 76 44 81) 44] [(89 95 69 81) 69] [(62 51 76 46) 46] [(18 62 74 23) 18] [(11 67 85 83) 11] [(94 59 32 89) 32] [(98 -89 -65 -65) -89] [(73 14 44 -59) -59] [(-64 67 46 80) -64] [(78 -80 -95 50) -95] [(46 74 -89 57) -89] [(-95 -15 23 64) -95] [(-20 62 36 -93) -93] [(85 -84 55 5) -84] [(-91 84 63 38) -91] [(59 27 -10 18) -10] [(76 -44 2 -75) -75] [(-95 79 -25 63) -95] [(-48 55 -68 78) -68] [(-63 27 60 39) -63] [(8 38 -11 -82) -82] [(59 -81 -40 42) -81] [(-80 -79 40 33) -80] [(74 29 67 -97) -97] [(-88 -73 -91 40) -91] [(-96 1 31 42) -96] [(-29 -97 97 -71) -97] [(1 36 25 45) 1] [(9 -56 60 72) -56] [(-26 31 25 35) -26] [(-30 -55 10 6) -55] [(57 12 -56 98) -56] [(59 -5 -12 54) -12] [(96 90 61 -10) -10] [(-6 51 70 -81) -81] [(33 52 78 -70) -70] [(69 -75 33 -38) -75] [(55 -15 -30 -51) -51] [(96 -47 -73 -38) -73] [(-57 44 95 8) -57] [(65 25 81 44) 25] [(-29 84 -73 43) -73] [(-13 -73 -55 -58) -73] [(-37 92 -87 78) -87] [(-5 -46 -8 -91) -91] [(52 -27 -51 2) -51] [(26 -83 -64 84) -83] [(84 59 28 -60) -60] [(-91 -94 60 72) -94] [(57 -95 69 -14) -95] [(-8 -9 -35 56) -35] [(-87 68 -66 69) -87] [(-59 -96 -17 -49) -96] [(-17 73 81 93) -17] [(-1 -68 -62 90) -68] [(-12 72 56 -28) -28] [(-79 56 -58 -86) -86] [(-82 70 -21 -57) -82] [(-31 -85 96 -32) -85] [(100 -4 -91 -13) -91] [(-73 -88 85 42) -88] [(3 74 -71 8) -71] [(82 27 -14 88) -14] [(83 17 42 -80) -80] [(61 15 77 11) 11] [(-83 -9 97 22) -83])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[13 13 13 87] 13]
Train Case:   6 | Input/Output: [[15 -67 15 15] -67]
Train Case:   7 | Input/Output: [[3 3 3 80] 3]
Train Case:   8 | Input/Output: [[76 -89 -89 -89] -89]
Train Case:   9 | Input/Output: [[69 -23 -23 -23] -23]
Train Case:  10 | Input/Output: [[-83 -83 -83 -59] -83]
Train Case:  11 | Input/Output: [[75 75 75 -18] -18]
Train Case:  12 | Input/Output: [[-40 72 -40 -40] -40]
Train Case:  13 | Input/Output: [[-13 -49 -13 -13] -49]
Train Case:  14 | Input/Output: [[33 0 33 33] 0]
Train Case:  15 | Input/Output: [(79 79 79 79) 79]
Train Case:  16 | Input/Output: [(-93 -93 -93 -93) -93]
Train Case:  17 | Input/Output: [(55 55 55 55) 55]
Train Case:  18 | Input/Output: [(-59 -59 -59 -59) -59]
Train Case:  19 | Input/Output: [(44 44 44 44) 44]
Train Case:  20 | Input/Output: [(68 24 21 22) 21]
Train Case:  21 | Input/Output: [(87 79 37 38) 37]
Train Case:  22 | Input/Output: [(83 67 63 5) 5]
Train Case:  23 | Input/Output: [(34 20 75 35) 20]
Train Case:  24 | Input/Output: [(11 14 43 86) 11]
Train Case:  25 | Input/Output: [(32 49 86 35) 32]
Train Case:  26 | Input/Output: [(30 22 20 99) 20]
Train Case:  27 | Input/Output: [(0 97 100 72) 0]
Train Case:  28 | Input/Output: [(63 24 26 95) 24]
Train Case:  29 | Input/Output: [(8 40 12 46) 8]
Train Case:  30 | Input/Output: [(13 15 26 7) 7]
Train Case:  31 | Input/Output: [(24 76 66 7) 7]
Train Case:  32 | Input/Output: [(29 72 30 41) 29]
Train Case:  33 | Input/Output: [(66 80 95 78) 66]
Train Case:  34 | Input/Output: [(49 76 44 81) 44]
Train Case:  35 | Input/Output: [(89 95 69 81) 69]
Train Case:  36 | Input/Output: [(62 51 76 46) 46]
Train Case:  37 | Input/Output: [(18 62 74 23) 18]
Train Case:  38 | Input/Output: [(11 67 85 83) 11]
Train Case:  39 | Input/Output: [(94 59 32 89) 32]
Train Case:  40 | Input/Output: [(98 -89 -65 -65) -89]
Train Case:  41 | Input/Output: [(73 14 44 -59) -59]
Train Case:  42 | Input/Output: [(-64 67 46 80) -64]
Train Case:  43 | Input/Output: [(78 -80 -95 50) -95]
Train Case:  44 | Input/Output: [(46 74 -89 57) -89]
Train Case:  45 | Input/Output: [(-95 -15 23 64) -95]
Train Case:  46 | Input/Output: [(-20 62 36 -93) -93]
Train Case:  47 | Input/Output: [(85 -84 55 5) -84]
Train Case:  48 | Input/Output: [(-91 84 63 38) -91]
Train Case:  49 | Input/Output: [(59 27 -10 18) -10]
Train Case:  50 | Input/Output: [(76 -44 2 -75) -75]
Train Case:  51 | Input/Output: [(-95 79 -25 63) -95]
Train Case:  52 | Input/Output: [(-48 55 -68 78) -68]
Train Case:  53 | Input/Output: [(-63 27 60 39) -63]
Train Case:  54 | Input/Output: [(8 38 -11 -82) -82]
Train Case:  55 | Input/Output: [(59 -81 -40 42) -81]
Train Case:  56 | Input/Output: [(-80 -79 40 33) -80]
Train Case:  57 | Input/Output: [(74 29 67 -97) -97]
Train Case:  58 | Input/Output: [(-88 -73 -91 40) -91]
Train Case:  59 | Input/Output: [(-96 1 31 42) -96]
Train Case:  60 | Input/Output: [(-29 -97 97 -71) -97]
Train Case:  61 | Input/Output: [(1 36 25 45) 1]
Train Case:  62 | Input/Output: [(9 -56 60 72) -56]
Train Case:  63 | Input/Output: [(-26 31 25 35) -26]
Train Case:  64 | Input/Output: [(-30 -55 10 6) -55]
Train Case:  65 | Input/Output: [(57 12 -56 98) -56]
Train Case:  66 | Input/Output: [(59 -5 -12 54) -12]
Train Case:  67 | Input/Output: [(96 90 61 -10) -10]
Train Case:  68 | Input/Output: [(-6 51 70 -81) -81]
Train Case:  69 | Input/Output: [(33 52 78 -70) -70]
Train Case:  70 | Input/Output: [(69 -75 33 -38) -75]
Train Case:  71 | Input/Output: [(55 -15 -30 -51) -51]
Train Case:  72 | Input/Output: [(96 -47 -73 -38) -73]
Train Case:  73 | Input/Output: [(-57 44 95 8) -57]
Train Case:  74 | Input/Output: [(65 25 81 44) 25]
Train Case:  75 | Input/Output: [(-29 84 -73 43) -73]
Train Case:  76 | Input/Output: [(-13 -73 -55 -58) -73]
Train Case:  77 | Input/Output: [(-37 92 -87 78) -87]
Train Case:  78 | Input/Output: [(-5 -46 -8 -91) -91]
Train Case:  79 | Input/Output: [(52 -27 -51 2) -51]
Train Case:  80 | Input/Output: [(26 -83 -64 84) -83]
Train Case:  81 | Input/Output: [(84 59 28 -60) -60]
Train Case:  82 | Input/Output: [(-91 -94 60 72) -94]
Train Case:  83 | Input/Output: [(57 -95 69 -14) -95]
Train Case:  84 | Input/Output: [(-8 -9 -35 56) -35]
Train Case:  85 | Input/Output: [(-87 68 -66 69) -87]
Train Case:  86 | Input/Output: [(-59 -96 -17 -49) -96]
Train Case:  87 | Input/Output: [(-17 73 81 93) -17]
Train Case:  88 | Input/Output: [(-1 -68 -62 90) -68]
Train Case:  89 | Input/Output: [(-12 72 56 -28) -28]
Train Case:  90 | Input/Output: [(-79 56 -58 -86) -86]
Train Case:  91 | Input/Output: [(-82 70 -21 -57) -82]
Train Case:  92 | Input/Output: [(-31 -85 96 -32) -85]
Train Case:  93 | Input/Output: [(100 -4 -91 -13) -91]
Train Case:  94 | Input/Output: [(-73 -88 85 42) -88]
Train Case:  95 | Input/Output: [(3 74 -71 8) -71]
Train Case:  96 | Input/Output: [(82 27 -14 88) -14]
Train Case:  97 | Input/Output: [(83 17 42 -80) -80]
Train Case:  98 | Input/Output: [(61 15 77 11) 11]
Train Case:  99 | Input/Output: [(-83 -9 97 22) -83]
Test Case:   0 | Input/Output: [[54 -50 -50 -50] -50]
Test Case:   1 | Input/Output: [[30 -43 30 30] -43]
Test Case:   2 | Input/Output: [[-84 -63 -63 -63] -84]
Test Case:   3 | Input/Output: [[90 4 4 4] 4]
Test Case:   4 | Input/Output: [[57 57 57 -77] -77]
Test Case:   5 | Input/Output: [[88 19 88 88] 19]
Test Case:   6 | Input/Output: [[-57 -57 -57 26] -57]
Test Case:   7 | Input/Output: [[4 -74 4 4] -74]
Test Case:   8 | Input/Output: [[17 -22 -22 -22] -22]
Test Case:   9 | Input/Output: [[-71 72 -71 -71] -71]
Test Case:  10 | Input/Output: [[-22 -22 -22 -39] -39]
Test Case:  11 | Input/Output: [[-7 95 -7 -7] -7]
Test Case:  12 | Input/Output: [[49 88 49 49] 49]
Test Case:  13 | Input/Output: [[36 -91 36 36] -91]
Test Case:  14 | Input/Output: [[49 -26 49 49] -26]
Test Case:  15 | Input/Output: [[78 85 78 78] 78]
Test Case:  16 | Input/Output: [[69 -51 -51 -51] -51]
Test Case:  17 | Input/Output: [[-9 -31 -9 -9] -31]
Test Case:  18 | Input/Output: [[4 4 4 77] 4]
Test Case:  19 | Input/Output: [[14 -66 -66 -66] -66]
Test Case:  20 | Input/Output: [[-59 -59 -59 91] -59]
Test Case:  21 | Input/Output: [[-91 -91 16 -91] -91]
Test Case:  22 | Input/Output: [[-2 -59 -59 -59] -59]
Test Case:  23 | Input/Output: [[-58 79 -58 -58] -58]
Test Case:  24 | Input/Output: [[-11 -11 -11 -46] -46]
Test Case:  25 | Input/Output: [[41 -10 41 41] -10]
Test Case:  26 | Input/Output: [[60 60 60 99] 60]
Test Case:  27 | Input/Output: [[14 21 21 21] 14]
Test Case:  28 | Input/Output: [[-23 34 34 34] -23]
Test Case:  29 | Input/Output: [[-14 -54 -14 -14] -54]
Test Case:  30 | Input/Output: [[-30 -16 -16 -16] -30]
Test Case:  31 | Input/Output: [[-33 -33 -34 -33] -34]
Test Case:  32 | Input/Output: [[77 77 77 67] 67]
Test Case:  33 | Input/Output: [[88 68 68 68] 68]
Test Case:  34 | Input/Output: [[-43 -23 -43 -43] -43]
Test Case:  35 | Input/Output: [[66 66 66 4] 4]
Test Case:  36 | Input/Output: [[75 44 75 75] 44]
Test Case:  37 | Input/Output: [[-31 -31 -31 -78] -78]
Test Case:  38 | Input/Output: [[40 -33 40 40] -33]
Test Case:  39 | Input/Output: [[-48 -48 -48 -76] -76]
Test Case:  40 | Input/Output: [[90 90 -34 90] -34]
Test Case:  41 | Input/Output: [[-65 -65 3 -65] -65]
Test Case:  42 | Input/Output: [[56 84 56 56] 56]
Test Case:  43 | Input/Output: [[82 -32 -32 -32] -32]
Test Case:  44 | Input/Output: [[-87 -87 -11 -87] -87]
Test Case:  45 | Input/Output: [[-68 70 70 70] -68]
Test Case:  46 | Input/Output: [[30 30 30 -10] -10]
Test Case:  47 | Input/Output: [[40 -81 -81 -81] -81]
Test Case:  48 | Input/Output: [[26 -77 -77 -77] -77]
Test Case:  49 | Input/Output: [[37 76 37 37] 37]
Test Case:  50 | Input/Output: [[-5 -54 -5 -5] -54]
Test Case:  51 | Input/Output: [[52 52 -52 52] -52]
Test Case:  52 | Input/Output: [[-90 -90 48 -90] -90]
Test Case:  53 | Input/Output: [[96 96 96 53] 53]
Test Case:  54 | Input/Output: [[-20 15 15 15] -20]
Test Case:  55 | Input/Output: [[-46 83 -46 -46] -46]
Test Case:  56 | Input/Output: [[61 61 -30 61] -30]
Test Case:  57 | Input/Output: [[36 -19 36 36] -19]
Test Case:  58 | Input/Output: [[-93 -25 -93 -93] -93]
Test Case:  59 | Input/Output: [[88 88 -59 88] -59]
Test Case:  60 | Input/Output: [[96 96 -3 96] -3]
Test Case:  61 | Input/Output: [[-45 -45 -45 -21] -45]
Test Case:  62 | Input/Output: [[8 8 8 -7] -7]
Test Case:  63 | Input/Output: [[-68 -68 -27 -68] -68]
Test Case:  64 | Input/Output: [[-98 -98 19 -98] -98]
Test Case:  65 | Input/Output: [[-61 -61 -61 -61] -61]
Test Case:  66 | Input/Output: [[1 84 1 1] 1]
Test Case:  67 | Input/Output: [[45 45 45 31] 31]
Test Case:  68 | Input/Output: [[42 56 56 56] 42]
Test Case:  69 | Input/Output: [[-32 -32 59 -32] -32]
Test Case:  70 | Input/Output: [[59 40 59 59] 40]
Test Case:  71 | Input/Output: [[-6 -6 -6 26] -6]
Test Case:  72 | Input/Output: [[-72 -72 6 -72] -72]
Test Case:  73 | Input/Output: [[-13 -52 -13 -13] -52]
Test Case:  74 | Input/Output: [[76 76 -22 76] -22]
Test Case:  75 | Input/Output: [[62 -92 -92 -92] -92]
Test Case:  76 | Input/Output: [[33 33 94 33] 33]
Test Case:  77 | Input/Output: [[30 98 30 30] 30]
Test Case:  78 | Input/Output: [[-89 86 86 86] -89]
Test Case:  79 | Input/Output: [[-60 -60 -60 2] -60]
Test Case:  80 | Input/Output: [[15 15 15 11] 11]
Test Case:  81 | Input/Output: [[11 11 79 11] 11]
Test Case:  82 | Input/Output: [[45 45 -99 45] -99]
Test Case:  83 | Input/Output: [[54 54 54 12] 12]
Test Case:  84 | Input/Output: [[-25 -71 -71 -71] -71]
Test Case:  85 | Input/Output: [[-68 -80 -68 -68] -80]
Test Case:  86 | Input/Output: [[40 81 81 81] 40]
Test Case:  87 | Input/Output: [[66 66 -71 66] -71]
Test Case:  88 | Input/Output: [[-4 -42 -4 -4] -42]
Test Case:  89 | Input/Output: [[-16 96 -16 -16] -16]
Test Case:  90 | Input/Output: [[57 42 57 57] 42]
Test Case:  91 | Input/Output: [[99 61 99 99] 61]
Test Case:  92 | Input/Output: [[79 79 -84 79] -84]
Test Case:  93 | Input/Output: [[1 1 1 33] 1]
Test Case:  94 | Input/Output: [[-2 -27 -27 -27] -27]
Test Case:  95 | Input/Output: [[52 -13 52 52] -13]
Test Case:  96 | Input/Output: [[100 100 100 90] 90]
Test Case:  97 | Input/Output: [[68 65 65 65] 65]
Test Case:  98 | Input/Output: [[66 8 8 8] 8]
Test Case:  99 | Input/Output: [[-80 -80 -80 -55] -80]
Test Case: 100 | Input/Output: [(92 92 92 92) 92]
Test Case: 101 | Input/Output: [(98 98 98 98) 98]
Test Case: 102 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 103 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 104 | Input/Output: [(28 28 28 28) 28]
Test Case: 105 | Input/Output: [(40 40 40 40) 40]
Test Case: 106 | Input/Output: [(85 85 85 85) 85]
Test Case: 107 | Input/Output: [(34 34 34 34) 34]
Test Case: 108 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 109 | Input/Output: [(44 44 44 44) 44]
Test Case: 110 | Input/Output: [(36 36 36 36) 36]
Test Case: 111 | Input/Output: [(92 92 92 92) 92]
Test Case: 112 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 113 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 114 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 115 | Input/Output: [(18 18 18 18) 18]
Test Case: 116 | Input/Output: [(32 32 32 32) 32]
Test Case: 117 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 118 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 119 | Input/Output: [(53 53 53 53) 53]
Test Case: 120 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 121 | Input/Output: [(71 71 71 71) 71]
Test Case: 122 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 123 | Input/Output: [(7 7 7 7) 7]
Test Case: 124 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 125 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 126 | Input/Output: [(77 77 77 77) 77]
Test Case: 127 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 128 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 129 | Input/Output: [(22 22 22 22) 22]
Test Case: 130 | Input/Output: [(32 32 32 32) 32]
Test Case: 131 | Input/Output: [(45 45 45 45) 45]
Test Case: 132 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 133 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 134 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 135 | Input/Output: [(43 43 43 43) 43]
Test Case: 136 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 137 | Input/Output: [(75 75 75 75) 75]
Test Case: 138 | Input/Output: [(73 73 73 73) 73]
Test Case: 139 | Input/Output: [(77 77 77 77) 77]
Test Case: 140 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 141 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 142 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 143 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 144 | Input/Output: [(17 17 17 17) 17]
Test Case: 145 | Input/Output: [(37 37 37 37) 37]
Test Case: 146 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 147 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 148 | Input/Output: [(8 8 8 8) 8]
Test Case: 149 | Input/Output: [(11 11 11 11) 11]
Test Case: 150 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 151 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 152 | Input/Output: [(60 60 60 60) 60]
Test Case: 153 | Input/Output: [(91 91 91 91) 91]
Test Case: 154 | Input/Output: [(71 71 71 71) 71]
Test Case: 155 | Input/Output: [(62 62 62 62) 62]
Test Case: 156 | Input/Output: [(74 74 74 74) 74]
Test Case: 157 | Input/Output: [(44 44 44 44) 44]
Test Case: 158 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 159 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 160 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 161 | Input/Output: [(73 73 73 73) 73]
Test Case: 162 | Input/Output: [(93 93 93 93) 93]
Test Case: 163 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 164 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 165 | Input/Output: [(67 67 67 67) 67]
Test Case: 166 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 167 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 168 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 169 | Input/Output: [(73 73 73 73) 73]
Test Case: 170 | Input/Output: [(16 16 16 16) 16]
Test Case: 171 | Input/Output: [(65 65 65 65) 65]
Test Case: 172 | Input/Output: [(31 31 31 31) 31]
Test Case: 173 | Input/Output: [(52 52 52 52) 52]
Test Case: 174 | Input/Output: [(66 66 66 66) 66]
Test Case: 175 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 176 | Input/Output: [(38 38 38 38) 38]
Test Case: 177 | Input/Output: [(13 13 13 13) 13]
Test Case: 178 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 179 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 180 | Input/Output: [(99 99 99 99) 99]
Test Case: 181 | Input/Output: [(9 9 9 9) 9]
Test Case: 182 | Input/Output: [(21 21 21 21) 21]
Test Case: 183 | Input/Output: [(95 95 95 95) 95]
Test Case: 184 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 185 | Input/Output: [(86 86 86 86) 86]
Test Case: 186 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 187 | Input/Output: [(23 23 23 23) 23]
Test Case: 188 | Input/Output: [(0 0 0 0) 0]
Test Case: 189 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 190 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 191 | Input/Output: [(67 67 67 67) 67]
Test Case: 192 | Input/Output: [(32 32 32 32) 32]
Test Case: 193 | Input/Output: [(77 77 77 77) 77]
Test Case: 194 | Input/Output: [(27 27 27 27) 27]
Test Case: 195 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 196 | Input/Output: [(29 29 29 29) 29]
Test Case: 197 | Input/Output: [(33 33 33 33) 33]
Test Case: 198 | Input/Output: [(55 55 55 55) 55]
Test Case: 199 | Input/Output: [(97 97 97 97) 97]
Test Case: 200 | Input/Output: [(54 35 89 1) 1]
Test Case: 201 | Input/Output: [(25 69 68 79) 25]
Test Case: 202 | Input/Output: [(61 56 94 66) 56]
Test Case: 203 | Input/Output: [(73 58 41 11) 11]
Test Case: 204 | Input/Output: [(63 80 79 91) 63]
Test Case: 205 | Input/Output: [(23 74 31 74) 23]
Test Case: 206 | Input/Output: [(92 18 26 71) 18]
Test Case: 207 | Input/Output: [(90 20 22 66) 20]
Test Case: 208 | Input/Output: [(36 21 7 10) 7]
Test Case: 209 | Input/Output: [(99 93 75 66) 66]
Test Case: 210 | Input/Output: [(61 7 15 5) 5]
Test Case: 211 | Input/Output: [(26 96 41 83) 26]
Test Case: 212 | Input/Output: [(60 55 58 97) 55]
Test Case: 213 | Input/Output: [(45 88 38 3) 3]
Test Case: 214 | Input/Output: [(39 38 67 30) 30]
Test Case: 215 | Input/Output: [(53 53 48 23) 23]
Test Case: 216 | Input/Output: [(92 82 60 76) 60]
Test Case: 217 | Input/Output: [(18 69 39 12) 12]
Test Case: 218 | Input/Output: [(98 16 95 37) 16]
Test Case: 219 | Input/Output: [(62 57 5 38) 5]
Test Case: 220 | Input/Output: [(84 54 63 43) 43]
Test Case: 221 | Input/Output: [(41 15 10 83) 10]
Test Case: 222 | Input/Output: [(66 67 26 35) 26]
Test Case: 223 | Input/Output: [(58 51 11 63) 11]
Test Case: 224 | Input/Output: [(2 95 7 83) 2]
Test Case: 225 | Input/Output: [(74 79 34 5) 5]
Test Case: 226 | Input/Output: [(37 13 77 78) 13]
Test Case: 227 | Input/Output: [(79 10 80 3) 3]
Test Case: 228 | Input/Output: [(34 86 0 96) 0]
Test Case: 229 | Input/Output: [(62 11 69 4) 4]
Test Case: 230 | Input/Output: [(1 65 33 42) 1]
Test Case: 231 | Input/Output: [(40 21 89 71) 21]
Test Case: 232 | Input/Output: [(39 5 96 82) 5]
Test Case: 233 | Input/Output: [(76 67 100 29) 29]
Test Case: 234 | Input/Output: [(77 32 80 14) 14]
Test Case: 235 | Input/Output: [(27 18 89 96) 18]
Test Case: 236 | Input/Output: [(84 97 64 11) 11]
Test Case: 237 | Input/Output: [(23 21 82 29) 21]
Test Case: 238 | Input/Output: [(67 13 21 53) 13]
Test Case: 239 | Input/Output: [(23 52 70 72) 23]
Test Case: 240 | Input/Output: [(13 98 14 54) 13]
Test Case: 241 | Input/Output: [(28 76 14 61) 14]
Test Case: 242 | Input/Output: [(64 63 46 85) 46]
Test Case: 243 | Input/Output: [(92 33 10 24) 10]
Test Case: 244 | Input/Output: [(75 85 98 66) 66]
Test Case: 245 | Input/Output: [(95 58 50 38) 38]
Test Case: 246 | Input/Output: [(99 39 34 53) 34]
Test Case: 247 | Input/Output: [(43 87 58 43) 43]
Test Case: 248 | Input/Output: [(28 31 88 2) 2]
Test Case: 249 | Input/Output: [(49 45 5 39) 5]
Test Case: 250 | Input/Output: [(99 55 73 82) 55]
Test Case: 251 | Input/Output: [(4 86 41 33) 4]
Test Case: 252 | Input/Output: [(18 48 14 64) 14]
Test Case: 253 | Input/Output: [(27 67 62 83) 27]
Test Case: 254 | Input/Output: [(56 75 14 71) 14]
Test Case: 255 | Input/Output: [(55 2 64 72) 2]
Test Case: 256 | Input/Output: [(3 2 89 60) 2]
Test Case: 257 | Input/Output: [(92 30 80 57) 30]
Test Case: 258 | Input/Output: [(3 9 82 31) 3]
Test Case: 259 | Input/Output: [(65 27 41 2) 2]
Test Case: 260 | Input/Output: [(45 0 67 21) 0]
Test Case: 261 | Input/Output: [(97 88 73 1) 1]
Test Case: 262 | Input/Output: [(64 16 62 66) 16]
Test Case: 263 | Input/Output: [(36 91 62 42) 36]
Test Case: 264 | Input/Output: [(60 12 65 21) 12]
Test Case: 265 | Input/Output: [(49 7 94 94) 7]
Test Case: 266 | Input/Output: [(81 36 86 94) 36]
Test Case: 267 | Input/Output: [(63 68 26 25) 25]
Test Case: 268 | Input/Output: [(18 62 75 57) 18]
Test Case: 269 | Input/Output: [(43 32 72 39) 32]
Test Case: 270 | Input/Output: [(58 62 27 10) 10]
Test Case: 271 | Input/Output: [(75 60 21 55) 21]
Test Case: 272 | Input/Output: [(62 99 82 40) 40]
Test Case: 273 | Input/Output: [(36 47 24 79) 24]
Test Case: 274 | Input/Output: [(69 44 100 19) 19]
Test Case: 275 | Input/Output: [(27 62 32 86) 27]
Test Case: 276 | Input/Output: [(18 1 38 9) 1]
Test Case: 277 | Input/Output: [(0 89 83 66) 0]
Test Case: 278 | Input/Output: [(62 50 87 56) 50]
Test Case: 279 | Input/Output: [(39 2 21 24) 2]
Test Case: 280 | Input/Output: [(62 65 23 18) 18]
Test Case: 281 | Input/Output: [(98 46 26 70) 26]
Test Case: 282 | Input/Output: [(87 44 51 14) 14]
Test Case: 283 | Input/Output: [(44 79 31 66) 31]
Test Case: 284 | Input/Output: [(96 91 1 53) 1]
Test Case: 285 | Input/Output: [(9 27 35 61) 9]
Test Case: 286 | Input/Output: [(81 100 45 34) 34]
Test Case: 287 | Input/Output: [(79 84 9 91) 9]
Test Case: 288 | Input/Output: [(70 35 81 19) 19]
Test Case: 289 | Input/Output: [(44 48 34 60) 34]
Test Case: 290 | Input/Output: [(62 79 74 17) 17]
Test Case: 291 | Input/Output: [(98 3 25 6) 3]
Test Case: 292 | Input/Output: [(57 5 8 16) 5]
Test Case: 293 | Input/Output: [(73 46 71 92) 46]
Test Case: 294 | Input/Output: [(12 71 18 49) 12]
Test Case: 295 | Input/Output: [(67 48 74 31) 31]
Test Case: 296 | Input/Output: [(39 3 62 63) 3]
Test Case: 297 | Input/Output: [(81 6 80 39) 6]
Test Case: 298 | Input/Output: [(3 54 13 79) 3]
Test Case: 299 | Input/Output: [(67 30 90 33) 30]
Test Case: 300 | Input/Output: [(92 77 0 59) 0]
Test Case: 301 | Input/Output: [(40 97 80 75) 40]
Test Case: 302 | Input/Output: [(97 11 50 39) 11]
Test Case: 303 | Input/Output: [(98 38 23 11) 11]
Test Case: 304 | Input/Output: [(55 51 35 73) 35]
Test Case: 305 | Input/Output: [(87 87 15 35) 15]
Test Case: 306 | Input/Output: [(74 4 17 93) 4]
Test Case: 307 | Input/Output: [(90 16 88 97) 16]
Test Case: 308 | Input/Output: [(92 30 55 10) 10]
Test Case: 309 | Input/Output: [(80 99 35 80) 35]
Test Case: 310 | Input/Output: [(82 80 50 62) 50]
Test Case: 311 | Input/Output: [(15 8 59 1) 1]
Test Case: 312 | Input/Output: [(5 34 72 5) 5]
Test Case: 313 | Input/Output: [(78 76 6 39) 6]
Test Case: 314 | Input/Output: [(81 97 81 1) 1]
Test Case: 315 | Input/Output: [(26 57 2 40) 2]
Test Case: 316 | Input/Output: [(16 3 0 80) 0]
Test Case: 317 | Input/Output: [(82 46 47 24) 24]
Test Case: 318 | Input/Output: [(44 20 38 21) 20]
Test Case: 319 | Input/Output: [(98 73 78 1) 1]
Test Case: 320 | Input/Output: [(9 89 37 4) 4]
Test Case: 321 | Input/Output: [(48 16 81 99) 16]
Test Case: 322 | Input/Output: [(79 15 59 62) 15]
Test Case: 323 | Input/Output: [(58 27 91 5) 5]
Test Case: 324 | Input/Output: [(69 79 9 95) 9]
Test Case: 325 | Input/Output: [(91 9 97 58) 9]
Test Case: 326 | Input/Output: [(78 42 3 39) 3]
Test Case: 327 | Input/Output: [(67 86 17 54) 17]
Test Case: 328 | Input/Output: [(90 88 22 80) 22]
Test Case: 329 | Input/Output: [(31 50 72 97) 31]
Test Case: 330 | Input/Output: [(67 97 70 2) 2]
Test Case: 331 | Input/Output: [(49 29 21 18) 18]
Test Case: 332 | Input/Output: [(86 84 95 63) 63]
Test Case: 333 | Input/Output: [(20 28 6 72) 6]
Test Case: 334 | Input/Output: [(56 5 18 1) 1]
Test Case: 335 | Input/Output: [(72 76 64 3) 3]
Test Case: 336 | Input/Output: [(95 83 64 29) 29]
Test Case: 337 | Input/Output: [(60 51 19 4) 4]
Test Case: 338 | Input/Output: [(45 45 82 20) 20]
Test Case: 339 | Input/Output: [(76 90 69 24) 24]
Test Case: 340 | Input/Output: [(76 77 43 18) 18]
Test Case: 341 | Input/Output: [(84 37 44 5) 5]
Test Case: 342 | Input/Output: [(7 48 42 70) 7]
Test Case: 343 | Input/Output: [(6 12 93 47) 6]
Test Case: 344 | Input/Output: [(87 15 11 64) 11]
Test Case: 345 | Input/Output: [(0 16 59 33) 0]
Test Case: 346 | Input/Output: [(35 63 22 82) 22]
Test Case: 347 | Input/Output: [(65 65 76 4) 4]
Test Case: 348 | Input/Output: [(9 71 82 81) 9]
Test Case: 349 | Input/Output: [(76 77 68 64) 64]
Test Case: 350 | Input/Output: [(59 30 22 29) 22]
Test Case: 351 | Input/Output: [(8 41 17 99) 8]
Test Case: 352 | Input/Output: [(27 12 89 2) 2]
Test Case: 353 | Input/Output: [(17 20 0 51) 0]
Test Case: 354 | Input/Output: [(88 84 82 11) 11]
Test Case: 355 | Input/Output: [(41 98 69 24) 24]
Test Case: 356 | Input/Output: [(80 16 84 37) 16]
Test Case: 357 | Input/Output: [(97 98 76 45) 45]
Test Case: 358 | Input/Output: [(50 6 63 34) 6]
Test Case: 359 | Input/Output: [(3 31 94 49) 3]
Test Case: 360 | Input/Output: [(95 84 49 10) 10]
Test Case: 361 | Input/Output: [(1 80 75 21) 1]
Test Case: 362 | Input/Output: [(7 66 23 54) 7]
Test Case: 363 | Input/Output: [(13 34 27 11) 11]
Test Case: 364 | Input/Output: [(69 61 77 95) 61]
Test Case: 365 | Input/Output: [(71 14 27 70) 14]
Test Case: 366 | Input/Output: [(64 38 44 64) 38]
Test Case: 367 | Input/Output: [(26 4 61 18) 4]
Test Case: 368 | Input/Output: [(25 85 70 79) 25]
Test Case: 369 | Input/Output: [(34 24 83 26) 24]
Test Case: 370 | Input/Output: [(33 72 95 4) 4]
Test Case: 371 | Input/Output: [(3 92 45 59) 3]
Test Case: 372 | Input/Output: [(18 40 74 48) 18]
Test Case: 373 | Input/Output: [(57 11 50 36) 11]
Test Case: 374 | Input/Output: [(91 47 7 27) 7]
Test Case: 375 | Input/Output: [(32 16 93 33) 16]
Test Case: 376 | Input/Output: [(14 69 34 62) 14]
Test Case: 377 | Input/Output: [(68 74 82 15) 15]
Test Case: 378 | Input/Output: [(36 7 16 24) 7]
Test Case: 379 | Input/Output: [(77 79 73 25) 25]
Test Case: 380 | Input/Output: [(88 3 0 12) 0]
Test Case: 381 | Input/Output: [(13 35 91 39) 13]
Test Case: 382 | Input/Output: [(46 23 77 7) 7]
Test Case: 383 | Input/Output: [(97 93 92 99) 92]
Test Case: 384 | Input/Output: [(91 5 23 20) 5]
Test Case: 385 | Input/Output: [(58 0 10 44) 0]
Test Case: 386 | Input/Output: [(63 2 95 4) 2]
Test Case: 387 | Input/Output: [(57 36 77 85) 36]
Test Case: 388 | Input/Output: [(59 71 3 83) 3]
Test Case: 389 | Input/Output: [(81 39 44 50) 39]
Test Case: 390 | Input/Output: [(21 51 95 38) 21]
Test Case: 391 | Input/Output: [(48 34 7 20) 7]
Test Case: 392 | Input/Output: [(97 93 72 43) 43]
Test Case: 393 | Input/Output: [(2 73 37 97) 2]
Test Case: 394 | Input/Output: [(17 41 31 11) 11]
Test Case: 395 | Input/Output: [(46 25 33 91) 25]
Test Case: 396 | Input/Output: [(99 54 5 88) 5]
Test Case: 397 | Input/Output: [(79 75 19 93) 19]
Test Case: 398 | Input/Output: [(13 45 67 3) 3]
Test Case: 399 | Input/Output: [(83 92 76 52) 52]
Test Case: 400 | Input/Output: [(-70 6 -100 75) -100]
Test Case: 401 | Input/Output: [(-76 85 16 -27) -76]
Test Case: 402 | Input/Output: [(54 -57 -34 -15) -57]
Test Case: 403 | Input/Output: [(22 -33 65 56) -33]
Test Case: 404 | Input/Output: [(-33 -99 -9 92) -99]
Test Case: 405 | Input/Output: [(-71 -1 2 36) -71]
Test Case: 406 | Input/Output: [(-9 73 23 -5) -9]
Test Case: 407 | Input/Output: [(39 -13 -87 -92) -92]
Test Case: 408 | Input/Output: [(20 -86 97 -84) -86]
Test Case: 409 | Input/Output: [(17 -83 -60 -53) -83]
Test Case: 410 | Input/Output: [(-20 77 -88 52) -88]
Test Case: 411 | Input/Output: [(72 76 16 -39) -39]
Test Case: 412 | Input/Output: [(-40 -100 22 89) -100]
Test Case: 413 | Input/Output: [(87 88 -40 76) -40]
Test Case: 414 | Input/Output: [(-50 60 76 27) -50]
Test Case: 415 | Input/Output: [(14 22 94 74) 14]
Test Case: 416 | Input/Output: [(-76 -9 -24 -22) -76]
Test Case: 417 | Input/Output: [(21 -45 31 -66) -66]
Test Case: 418 | Input/Output: [(60 98 -17 59) -17]
Test Case: 419 | Input/Output: [(85 -17 -51 96) -51]
Test Case: 420 | Input/Output: [(1 -47 -60 -43) -60]
Test Case: 421 | Input/Output: [(93 -30 92 -95) -95]
Test Case: 422 | Input/Output: [(29 68 -31 35) -31]
Test Case: 423 | Input/Output: [(-95 51 -60 58) -95]
Test Case: 424 | Input/Output: [(45 -35 16 -24) -35]
Test Case: 425 | Input/Output: [(-22 -87 16 -63) -87]
Test Case: 426 | Input/Output: [(-26 15 35 -8) -26]
Test Case: 427 | Input/Output: [(-39 -35 59 -46) -46]
Test Case: 428 | Input/Output: [(-86 47 90 -78) -86]
Test Case: 429 | Input/Output: [(67 79 -54 17) -54]
Test Case: 430 | Input/Output: [(72 33 -32 -59) -59]
Test Case: 431 | Input/Output: [(92 -49 -97 91) -97]
Test Case: 432 | Input/Output: [(-72 60 -82 -82) -82]
Test Case: 433 | Input/Output: [(-32 71 -10 -78) -78]
Test Case: 434 | Input/Output: [(-64 -4 -84 -61) -84]
Test Case: 435 | Input/Output: [(60 -34 -65 94) -65]
Test Case: 436 | Input/Output: [(-3 6 20 -13) -13]
Test Case: 437 | Input/Output: [(-16 68 -80 73) -80]
Test Case: 438 | Input/Output: [(28 -24 -77 13) -77]
Test Case: 439 | Input/Output: [(79 29 37 -27) -27]
Test Case: 440 | Input/Output: [(-84 100 63 9) -84]
Test Case: 441 | Input/Output: [(-54 65 -100 88) -100]
Test Case: 442 | Input/Output: [(-21 7 31 -32) -32]
Test Case: 443 | Input/Output: [(6 91 -53 83) -53]
Test Case: 444 | Input/Output: [(-50 19 82 79) -50]
Test Case: 445 | Input/Output: [(75 -25 73 -95) -95]
Test Case: 446 | Input/Output: [(62 -59 47 -47) -59]
Test Case: 447 | Input/Output: [(-23 -40 -72 28) -72]
Test Case: 448 | Input/Output: [(-48 -97 -43 30) -97]
Test Case: 449 | Input/Output: [(-68 -100 24 27) -100]
Test Case: 450 | Input/Output: [(66 -89 -38 -22) -89]
Test Case: 451 | Input/Output: [(19 83 43 -90) -90]
Test Case: 452 | Input/Output: [(87 1 -40 -72) -72]
Test Case: 453 | Input/Output: [(63 -17 65 39) -17]
Test Case: 454 | Input/Output: [(-67 -31 -7 80) -67]
Test Case: 455 | Input/Output: [(-22 33 -20 -89) -89]
Test Case: 456 | Input/Output: [(-39 -65 18 -93) -93]
Test Case: 457 | Input/Output: [(-56 -67 -98 -69) -98]
Test Case: 458 | Input/Output: [(-82 38 2 12) -82]
Test Case: 459 | Input/Output: [(-47 -93 65 46) -93]
Test Case: 460 | Input/Output: [(-30 46 70 -66) -66]
Test Case: 461 | Input/Output: [(12 88 15 -40) -40]
Test Case: 462 | Input/Output: [(-65 -71 88 -28) -71]
Test Case: 463 | Input/Output: [(1 -50 -67 100) -67]
Test Case: 464 | Input/Output: [(15 -61 81 10) -61]
Test Case: 465 | Input/Output: [(-60 29 -79 40) -79]
Test Case: 466 | Input/Output: [(90 75 69 -73) -73]
Test Case: 467 | Input/Output: [(-28 64 82 -31) -31]
Test Case: 468 | Input/Output: [(19 46 71 -97) -97]
Test Case: 469 | Input/Output: [(-23 70 -88 -10) -88]
Test Case: 470 | Input/Output: [(90 70 -83 -41) -83]
Test Case: 471 | Input/Output: [(60 91 13 6) 6]
Test Case: 472 | Input/Output: [(-13 70 72 -74) -74]
Test Case: 473 | Input/Output: [(67 93 -93 -43) -93]
Test Case: 474 | Input/Output: [(95 -98 -18 72) -98]
Test Case: 475 | Input/Output: [(30 16 47 93) 16]
Test Case: 476 | Input/Output: [(-37 8 -25 -30) -37]
Test Case: 477 | Input/Output: [(9 -38 33 -17) -38]
Test Case: 478 | Input/Output: [(-80 -11 -34 88) -80]
Test Case: 479 | Input/Output: [(2 39 -53 29) -53]
Test Case: 480 | Input/Output: [(-2 72 -31 89) -31]
Test Case: 481 | Input/Output: [(-33 -75 -89 -40) -89]
Test Case: 482 | Input/Output: [(44 70 69 -99) -99]
Test Case: 483 | Input/Output: [(-47 -54 -44 -1) -54]
Test Case: 484 | Input/Output: [(57 -40 -40 76) -40]
Test Case: 485 | Input/Output: [(62 62 97 -1) -1]
Test Case: 486 | Input/Output: [(-1 5 -50 33) -50]
Test Case: 487 | Input/Output: [(51 15 -24 -36) -36]
Test Case: 488 | Input/Output: [(-37 9 99 -91) -91]
Test Case: 489 | Input/Output: [(-51 -27 50 -18) -51]
Test Case: 490 | Input/Output: [(-2 18 47 -40) -40]
Test Case: 491 | Input/Output: [(-96 -75 58 -15) -96]
Test Case: 492 | Input/Output: [(-11 -55 -36 -23) -55]
Test Case: 493 | Input/Output: [(49 94 -76 2) -76]
Test Case: 494 | Input/Output: [(23 -65 47 16) -65]
Test Case: 495 | Input/Output: [(23 -61 -35 -95) -95]
Test Case: 496 | Input/Output: [(29 -34 -86 -27) -86]
Test Case: 497 | Input/Output: [(89 -89 17 27) -89]
Test Case: 498 | Input/Output: [(19 94 42 24) 19]
Test Case: 499 | Input/Output: [(13 40 -54 -74) -74]
Test Case: 500 | Input/Output: [(11 -32 -86 54) -86]
Test Case: 501 | Input/Output: [(30 -60 74 45) -60]
Test Case: 502 | Input/Output: [(-55 16 -83 -44) -83]
Test Case: 503 | Input/Output: [(98 -13 -17 -95) -95]
Test Case: 504 | Input/Output: [(-94 -43 19 -53) -94]
Test Case: 505 | Input/Output: [(-6 29 -23 84) -23]
Test Case: 506 | Input/Output: [(31 -66 58 -15) -66]
Test Case: 507 | Input/Output: [(-94 -13 42 59) -94]
Test Case: 508 | Input/Output: [(-51 93 22 -89) -89]
Test Case: 509 | Input/Output: [(-63 -21 -17 89) -63]
Test Case: 510 | Input/Output: [(-20 54 -16 -34) -34]
Test Case: 511 | Input/Output: [(-34 -42 -67 25) -67]
Test Case: 512 | Input/Output: [(-31 24 -47 -82) -82]
Test Case: 513 | Input/Output: [(28 -13 21 -9) -13]
Test Case: 514 | Input/Output: [(40 -82 -43 14) -82]
Test Case: 515 | Input/Output: [(64 -62 34 7) -62]
Test Case: 516 | Input/Output: [(83 -79 82 -95) -95]
Test Case: 517 | Input/Output: [(23 21 66 81) 21]
Test Case: 518 | Input/Output: [(-91 27 65 73) -91]
Test Case: 519 | Input/Output: [(-31 57 -81 58) -81]
Test Case: 520 | Input/Output: [(-17 91 48 93) -17]
Test Case: 521 | Input/Output: [(0 -87 13 -55) -87]
Test Case: 522 | Input/Output: [(-18 -23 -49 43) -49]
Test Case: 523 | Input/Output: [(-61 -85 8 47) -85]
Test Case: 524 | Input/Output: [(-17 -92 88 39) -92]
Test Case: 525 | Input/Output: [(-56 74 -2 -24) -56]
Test Case: 526 | Input/Output: [(28 77 84 -86) -86]
Test Case: 527 | Input/Output: [(78 -79 78 7) -79]
Test Case: 528 | Input/Output: [(-38 26 4 95) -38]
Test Case: 529 | Input/Output: [(14 -68 -81 97) -81]
Test Case: 530 | Input/Output: [(6 16 33 -73) -73]
Test Case: 531 | Input/Output: [(57 97 -52 75) -52]
Test Case: 532 | Input/Output: [(55 59 -4 29) -4]
Test Case: 533 | Input/Output: [(96 -83 -79 96) -83]
Test Case: 534 | Input/Output: [(-61 -77 -19 -23) -77]
Test Case: 535 | Input/Output: [(-16 14 67 21) -16]
Test Case: 536 | Input/Output: [(-66 -47 -27 -8) -66]
Test Case: 537 | Input/Output: [(18 67 49 17) 17]
Test Case: 538 | Input/Output: [(-68 84 81 16) -68]
Test Case: 539 | Input/Output: [(69 -41 57 96) -41]
Test Case: 540 | Input/Output: [(-63 61 59 -40) -63]
Test Case: 541 | Input/Output: [(18 75 -24 9) -24]
Test Case: 542 | Input/Output: [(67 63 46 35) 35]
Test Case: 543 | Input/Output: [(-28 64 37 91) -28]
Test Case: 544 | Input/Output: [(58 51 5 68) 5]
Test Case: 545 | Input/Output: [(30 4 -50 34) -50]
Test Case: 546 | Input/Output: [(-28 11 78 29) -28]
Test Case: 547 | Input/Output: [(-34 -76 35 -67) -76]
Test Case: 548 | Input/Output: [(-65 -35 -95 28) -95]
Test Case: 549 | Input/Output: [(-59 -41 99 -47) -59]
Test Case: 550 | Input/Output: [(59 -57 54 -53) -57]
Test Case: 551 | Input/Output: [(-46 20 -7 -97) -97]
Test Case: 552 | Input/Output: [(-45 -93 -57 81) -93]
Test Case: 553 | Input/Output: [(-18 38 -98 53) -98]
Test Case: 554 | Input/Output: [(-38 22 -83 -48) -83]
Test Case: 555 | Input/Output: [(-17 -67 42 67) -67]
Test Case: 556 | Input/Output: [(48 22 -22 -7) -22]
Test Case: 557 | Input/Output: [(68 -38 2 -2) -38]
Test Case: 558 | Input/Output: [(79 -47 -25 -83) -83]
Test Case: 559 | Input/Output: [(-85 -1 -18 36) -85]
Test Case: 560 | Input/Output: [(-28 50 64 61) -28]
Test Case: 561 | Input/Output: [(-31 -22 -85 84) -85]
Test Case: 562 | Input/Output: [(-66 35 -22 -16) -66]
Test Case: 563 | Input/Output: [(21 -23 -88 48) -88]
Test Case: 564 | Input/Output: [(28 33 49 -63) -63]
Test Case: 565 | Input/Output: [(-12 -57 11 55) -57]
Test Case: 566 | Input/Output: [(46 -92 -100 87) -100]
Test Case: 567 | Input/Output: [(48 77 -47 84) -47]
Test Case: 568 | Input/Output: [(-83 1 -42 79) -83]
Test Case: 569 | Input/Output: [(35 -15 13 -80) -80]
Test Case: 570 | Input/Output: [(52 -80 -95 17) -95]
Test Case: 571 | Input/Output: [(37 -7 80 69) -7]
Test Case: 572 | Input/Output: [(-22 7 36 -54) -54]
Test Case: 573 | Input/Output: [(11 -94 -73 92) -94]
Test Case: 574 | Input/Output: [(-54 23 -59 76) -59]
Test Case: 575 | Input/Output: [(-64 -87 -84 14) -87]
Test Case: 576 | Input/Output: [(-43 -89 60 46) -89]
Test Case: 577 | Input/Output: [(83 -12 96 -23) -23]
Test Case: 578 | Input/Output: [(10 -42 -41 48) -42]
Test Case: 579 | Input/Output: [(-5 78 15 69) -5]
Test Case: 580 | Input/Output: [(67 -13 -57 -40) -57]
Test Case: 581 | Input/Output: [(-20 73 -8 -73) -73]
Test Case: 582 | Input/Output: [(89 87 -2 45) -2]
Test Case: 583 | Input/Output: [(-36 43 -27 16) -36]
Test Case: 584 | Input/Output: [(39 2 53 20) 2]
Test Case: 585 | Input/Output: [(44 31 69 24) 24]
Test Case: 586 | Input/Output: [(74 -97 90 -46) -97]
Test Case: 587 | Input/Output: [(-24 78 99 -45) -45]
Test Case: 588 | Input/Output: [(16 61 -32 -45) -45]
Test Case: 589 | Input/Output: [(-82 -83 -3 79) -83]
Test Case: 590 | Input/Output: [(51 60 -79 57) -79]
Test Case: 591 | Input/Output: [(-89 23 -40 28) -89]
Test Case: 592 | Input/Output: [(49 -57 78 55) -57]
Test Case: 593 | Input/Output: [(-98 -46 89 87) -98]
Test Case: 594 | Input/Output: [(-29 -48 -76 19) -76]
Test Case: 595 | Input/Output: [(67 76 74 -84) -84]
Test Case: 596 | Input/Output: [(11 61 -29 19) -29]
Test Case: 597 | Input/Output: [(79 95 23 24) 23]
Test Case: 598 | Input/Output: [(-93 -18 -58 -24) -93]
Test Case: 599 | Input/Output: [(46 -62 31 67) -62]
Test Case: 600 | Input/Output: [(-95 21 52 19) -95]
Test Case: 601 | Input/Output: [(-33 -4 17 68) -33]
Test Case: 602 | Input/Output: [(-16 23 -82 92) -82]
Test Case: 603 | Input/Output: [(16 -21 3 -43) -43]
Test Case: 604 | Input/Output: [(94 -67 98 -71) -71]
Test Case: 605 | Input/Output: [(63 -55 -60 22) -60]
Test Case: 606 | Input/Output: [(96 34 28 53) 28]
Test Case: 607 | Input/Output: [(-72 83 59 77) -72]
Test Case: 608 | Input/Output: [(-63 -60 86 -46) -63]
Test Case: 609 | Input/Output: [(23 36 -49 -51) -51]
Test Case: 610 | Input/Output: [(92 13 -99 12) -99]
Test Case: 611 | Input/Output: [(-44 -4 -31 -7) -44]
Test Case: 612 | Input/Output: [(-79 -72 -67 46) -79]
Test Case: 613 | Input/Output: [(19 -20 28 93) -20]
Test Case: 614 | Input/Output: [(-42 37 67 -67) -67]
Test Case: 615 | Input/Output: [(-76 7 20 -97) -97]
Test Case: 616 | Input/Output: [(-65 82 -46 28) -65]
Test Case: 617 | Input/Output: [(31 80 5 34) 5]
Test Case: 618 | Input/Output: [(17 -61 -94 -95) -95]
Test Case: 619 | Input/Output: [(-91 53 41 -95) -95]
Test Case: 620 | Input/Output: [(-100 5 -26 54) -100]
Test Case: 621 | Input/Output: [(-60 -84 -80 -97) -97]
Test Case: 622 | Input/Output: [(72 -39 61 -97) -97]
Test Case: 623 | Input/Output: [(-32 61 -29 100) -32]
Test Case: 624 | Input/Output: [(-90 53 74 97) -90]
Test Case: 625 | Input/Output: [(55 -81 -91 -48) -91]
Test Case: 626 | Input/Output: [(-75 -13 81 -100) -100]
Test Case: 627 | Input/Output: [(-44 71 -6 -74) -74]
Test Case: 628 | Input/Output: [(82 7 66 -89) -89]
Test Case: 629 | Input/Output: [(-90 -80 40 14) -90]
Test Case: 630 | Input/Output: [(20 35 -8 -35) -35]
Test Case: 631 | Input/Output: [(-63 60 -17 -63) -63]
Test Case: 632 | Input/Output: [(85 -71 -18 63) -71]
Test Case: 633 | Input/Output: [(-30 -72 26 46) -72]
Test Case: 634 | Input/Output: [(83 6 11 96) 6]
Test Case: 635 | Input/Output: [(-91 68 -97 -97) -97]
Test Case: 636 | Input/Output: [(75 -55 38 -62) -62]
Test Case: 637 | Input/Output: [(65 -90 1 66) -90]
Test Case: 638 | Input/Output: [(71 -68 -78 -3) -78]
Test Case: 639 | Input/Output: [(10 -78 -33 14) -78]
Test Case: 640 | Input/Output: [(92 6 52 68) 6]
Test Case: 641 | Input/Output: [(-85 -17 80 -19) -85]
Test Case: 642 | Input/Output: [(82 19 -76 -69) -76]
Test Case: 643 | Input/Output: [(-30 -97 96 36) -97]
Test Case: 644 | Input/Output: [(53 -82 -52 -3) -82]
Test Case: 645 | Input/Output: [(-85 66 -99 35) -99]
Test Case: 646 | Input/Output: [(25 70 45 94) 25]
Test Case: 647 | Input/Output: [(-61 -8 -39 -29) -61]
Test Case: 648 | Input/Output: [(-49 -19 34 57) -49]
Test Case: 649 | Input/Output: [(85 -85 -97 -37) -97]
Test Case: 650 | Input/Output: [(36 52 -34 -90) -90]
Test Case: 651 | Input/Output: [(81 53 -45 69) -45]
Test Case: 652 | Input/Output: [(-31 85 -50 42) -50]
Test Case: 653 | Input/Output: [(-28 17 5 -1) -28]
Test Case: 654 | Input/Output: [(31 -25 -98 21) -98]
Test Case: 655 | Input/Output: [(-18 -37 13 -7) -37]
Test Case: 656 | Input/Output: [(81 81 61 48) 48]
Test Case: 657 | Input/Output: [(-31 8 41 88) -31]
Test Case: 658 | Input/Output: [(24 79 -82 -7) -82]
Test Case: 659 | Input/Output: [(78 -42 48 83) -42]
Test Case: 660 | Input/Output: [(21 81 80 35) 21]
Test Case: 661 | Input/Output: [(84 -12 -39 -21) -39]
Test Case: 662 | Input/Output: [(-34 -45 31 96) -45]
Test Case: 663 | Input/Output: [(-77 -52 -66 87) -77]
Test Case: 664 | Input/Output: [(71 13 -81 -18) -81]
Test Case: 665 | Input/Output: [(17 70 -52 -76) -76]
Test Case: 666 | Input/Output: [(63 49 -30 86) -30]
Test Case: 667 | Input/Output: [(-39 -89 -27 -38) -89]
Test Case: 668 | Input/Output: [(-93 7 88 49) -93]
Test Case: 669 | Input/Output: [(-9 15 -73 -19) -73]
Test Case: 670 | Input/Output: [(61 92 -61 73) -61]
Test Case: 671 | Input/Output: [(-42 4 -42 -37) -42]
Test Case: 672 | Input/Output: [(-60 58 14 33) -60]
Test Case: 673 | Input/Output: [(51 6 3 79) 3]
Test Case: 674 | Input/Output: [(-35 81 13 -21) -35]
Test Case: 675 | Input/Output: [(12 31 -4 25) -4]
Test Case: 676 | Input/Output: [(44 -29 -42 -52) -52]
Test Case: 677 | Input/Output: [(-46 -78 33 87) -78]
Test Case: 678 | Input/Output: [(-86 34 51 -94) -94]
Test Case: 679 | Input/Output: [(-13 -64 -33 83) -64]
Test Case: 680 | Input/Output: [(82 -17 -82 16) -82]
Test Case: 681 | Input/Output: [(21 96 -19 -56) -56]
Test Case: 682 | Input/Output: [(-97 -22 -9 -19) -97]
Test Case: 683 | Input/Output: [(-39 29 -92 43) -92]
Test Case: 684 | Input/Output: [(-97 49 -78 83) -97]
Test Case: 685 | Input/Output: [(-66 -87 56 81) -87]
Test Case: 686 | Input/Output: [(-5 -52 18 -65) -65]
Test Case: 687 | Input/Output: [(-21 89 86 -69) -69]
Test Case: 688 | Input/Output: [(19 -58 46 -32) -58]
Test Case: 689 | Input/Output: [(63 -91 34 90) -91]
Test Case: 690 | Input/Output: [(-73 -61 -92 -88) -92]
Test Case: 691 | Input/Output: [(14 78 58 52) 14]
Test Case: 692 | Input/Output: [(-53 49 -1 65) -53]
Test Case: 693 | Input/Output: [(-37 5 -62 42) -62]
Test Case: 694 | Input/Output: [(-12 -53 -84 -48) -84]
Test Case: 695 | Input/Output: [(64 -51 12 -55) -55]
Test Case: 696 | Input/Output: [(28 -100 -93 -48) -100]
Test Case: 697 | Input/Output: [(-61 93 -55 -85) -85]
Test Case: 698 | Input/Output: [(-59 -5 26 66) -59]
Test Case: 699 | Input/Output: [(-59 -74 94 -16) -74]
Test Case: 700 | Input/Output: [(-26 -2 59 90) -26]
Test Case: 701 | Input/Output: [(-8 30 -73 -4) -73]
Test Case: 702 | Input/Output: [(-100 -94 8 -75) -100]
Test Case: 703 | Input/Output: [(8 67 63 -94) -94]
Test Case: 704 | Input/Output: [(-28 3 22 -91) -91]
Test Case: 705 | Input/Output: [(-51 72 58 -13) -51]
Test Case: 706 | Input/Output: [(94 46 -91 -14) -91]
Test Case: 707 | Input/Output: [(15 -95 -25 11) -95]
Test Case: 708 | Input/Output: [(43 48 41 80) 41]
Test Case: 709 | Input/Output: [(-33 20 29 68) -33]
Test Case: 710 | Input/Output: [(-6 86 -34 23) -34]
Test Case: 711 | Input/Output: [(97 -48 90 -58) -58]
Test Case: 712 | Input/Output: [(78 -11 -79 -58) -79]
Test Case: 713 | Input/Output: [(-16 -20 -40 -26) -40]
Test Case: 714 | Input/Output: [(-1 -3 -65 -56) -65]
Test Case: 715 | Input/Output: [(-72 91 -74 87) -74]
Test Case: 716 | Input/Output: [(89 8 5 46) 5]
Test Case: 717 | Input/Output: [(-63 51 -20 -31) -63]
Test Case: 718 | Input/Output: [(-32 -14 61 10) -32]
Test Case: 719 | Input/Output: [(52 -49 -55 -61) -61]
Test Case: 720 | Input/Output: [(62 -70 84 1) -70]
Test Case: 721 | Input/Output: [(-33 -65 29 24) -65]
Test Case: 722 | Input/Output: [(-50 -1 95 -15) -50]
Test Case: 723 | Input/Output: [(-2 -52 -15 74) -52]
Test Case: 724 | Input/Output: [(-75 11 75 64) -75]
Test Case: 725 | Input/Output: [(-10 -71 -39 -59) -71]
Test Case: 726 | Input/Output: [(-85 54 -41 -38) -85]
Test Case: 727 | Input/Output: [(-24 52 -33 3) -33]
Test Case: 728 | Input/Output: [(-61 41 1 -20) -61]
Test Case: 729 | Input/Output: [(66 62 -71 34) -71]
Test Case: 730 | Input/Output: [(51 46 68 42) 42]
Test Case: 731 | Input/Output: [(-33 16 37 -19) -33]
Test Case: 732 | Input/Output: [(-37 47 69 -52) -52]
Test Case: 733 | Input/Output: [(-6 -5 -89 -83) -89]
Test Case: 734 | Input/Output: [(-60 -100 -86 -44) -100]
Test Case: 735 | Input/Output: [(-15 -21 41 34) -21]
Test Case: 736 | Input/Output: [(48 -55 -71 99) -71]
Test Case: 737 | Input/Output: [(44 54 -73 -15) -73]
Test Case: 738 | Input/Output: [(-89 100 -77 -71) -89]
Test Case: 739 | Input/Output: [(-79 -32 84 -78) -79]
Test Case: 740 | Input/Output: [(61 47 17 -30) -30]
Test Case: 741 | Input/Output: [(-72 -98 6 100) -98]
Test Case: 742 | Input/Output: [(-34 87 40 67) -34]
Test Case: 743 | Input/Output: [(-6 -74 -88 9) -88]
Test Case: 744 | Input/Output: [(62 -78 35 -20) -78]
Test Case: 745 | Input/Output: [(10 -99 52 88) -99]
Test Case: 746 | Input/Output: [(-29 94 -69 -8) -69]
Test Case: 747 | Input/Output: [(100 -38 0 -10) -38]
Test Case: 748 | Input/Output: [(-48 -5 48 15) -48]
Test Case: 749 | Input/Output: [(-86 -65 -65 93) -86]
Test Case: 750 | Input/Output: [(-95 -14 -64 -17) -95]
Test Case: 751 | Input/Output: [(69 27 64 -51) -51]
Test Case: 752 | Input/Output: [(6 82 -67 -7) -67]
Test Case: 753 | Input/Output: [(21 2 -60 -26) -60]
Test Case: 754 | Input/Output: [(-2 -77 45 47) -77]
Test Case: 755 | Input/Output: [(20 6 32 97) 6]
Test Case: 756 | Input/Output: [(-88 -67 -7 25) -88]
Test Case: 757 | Input/Output: [(76 -87 88 -41) -87]
Test Case: 758 | Input/Output: [(72 46 -99 47) -99]
Test Case: 759 | Input/Output: [(23 74 -85 94) -85]
Test Case: 760 | Input/Output: [(-92 88 47 26) -92]
Test Case: 761 | Input/Output: [(57 80 43 -92) -92]
Test Case: 762 | Input/Output: [(32 -83 35 63) -83]
Test Case: 763 | Input/Output: [(66 -18 -64 -8) -64]
Test Case: 764 | Input/Output: [(-95 -19 55 -40) -95]
Test Case: 765 | Input/Output: [(-12 58 19 -27) -27]
Test Case: 766 | Input/Output: [(37 88 -6 -36) -36]
Test Case: 767 | Input/Output: [(-56 51 -64 39) -64]
Test Case: 768 | Input/Output: [(28 -31 58 8) -31]
Test Case: 769 | Input/Output: [(7 -1 83 30) -1]
Test Case: 770 | Input/Output: [(47 -5 25 -92) -92]
Test Case: 771 | Input/Output: [(-47 -78 -27 27) -78]
Test Case: 772 | Input/Output: [(-11 -87 10 -81) -87]
Test Case: 773 | Input/Output: [(-80 -73 32 24) -80]
Test Case: 774 | Input/Output: [(24 -26 -50 99) -50]
Test Case: 775 | Input/Output: [(-1 -30 -88 -3) -88]
Test Case: 776 | Input/Output: [(96 98 4 60) 4]
Test Case: 777 | Input/Output: [(59 -14 -77 -87) -87]
Test Case: 778 | Input/Output: [(92 19 -67 89) -67]
Test Case: 779 | Input/Output: [(10 92 26 3) 3]
Test Case: 780 | Input/Output: [(60 100 47 70) 47]
Test Case: 781 | Input/Output: [(-87 72 -53 86) -87]
Test Case: 782 | Input/Output: [(-23 -2 -38 -98) -98]
Test Case: 783 | Input/Output: [(56 -10 -61 3) -61]
Test Case: 784 | Input/Output: [(-14 65 36 18) -14]
Test Case: 785 | Input/Output: [(-25 69 30 -54) -54]
Test Case: 786 | Input/Output: [(-85 76 -65 -76) -85]
Test Case: 787 | Input/Output: [(-72 50 51 -74) -74]
Test Case: 788 | Input/Output: [(-33 -81 21 6) -81]
Test Case: 789 | Input/Output: [(3 -21 -80 64) -80]
Test Case: 790 | Input/Output: [(-84 32 38 24) -84]
Test Case: 791 | Input/Output: [(24 -38 31 55) -38]
Test Case: 792 | Input/Output: [(52 7 80 -58) -58]
Test Case: 793 | Input/Output: [(16 -24 -96 1) -96]
Test Case: 794 | Input/Output: [(66 18 -68 -16) -68]
Test Case: 795 | Input/Output: [(-40 -63 -1 -91) -91]
Test Case: 796 | Input/Output: [(63 -25 -11 87) -25]
Test Case: 797 | Input/Output: [(15 -98 53 57) -98]
Test Case: 798 | Input/Output: [(98 25 18 12) 12]
Test Case: 799 | Input/Output: [(-36 -26 86 2) -36]
Test Case: 800 | Input/Output: [(22 28 15 40) 15]
Test Case: 801 | Input/Output: [(51 20 94 68) 20]
Test Case: 802 | Input/Output: [(-34 -77 -12 23) -77]
Test Case: 803 | Input/Output: [(-24 -36 9 80) -36]
Test Case: 804 | Input/Output: [(-70 -83 -54 -94) -94]
Test Case: 805 | Input/Output: [(62 -11 -10 2) -11]
Test Case: 806 | Input/Output: [(-71 71 -32 84) -71]
Test Case: 807 | Input/Output: [(5 -55 -69 57) -69]
Test Case: 808 | Input/Output: [(4 -37 -67 -29) -67]
Test Case: 809 | Input/Output: [(-72 -67 72 33) -72]
Test Case: 810 | Input/Output: [(31 31 -66 -7) -66]
Test Case: 811 | Input/Output: [(-94 19 25 14) -94]
Test Case: 812 | Input/Output: [(78 -27 -83 25) -83]
Test Case: 813 | Input/Output: [(-53 64 -95 48) -95]
Test Case: 814 | Input/Output: [(-21 -72 -40 67) -72]
Test Case: 815 | Input/Output: [(-97 28 83 59) -97]
Test Case: 816 | Input/Output: [(19 -9 -9 -68) -68]
Test Case: 817 | Input/Output: [(-1 60 42 -90) -90]
Test Case: 818 | Input/Output: [(-14 -42 -15 -74) -74]
Test Case: 819 | Input/Output: [(-41 20 -38 67) -41]
Test Case: 820 | Input/Output: [(60 -89 -73 -63) -89]
Test Case: 821 | Input/Output: [(-10 -10 -100 -78) -100]
Test Case: 822 | Input/Output: [(-15 91 -33 32) -33]
Test Case: 823 | Input/Output: [(-77 -81 36 -62) -81]
Test Case: 824 | Input/Output: [(45 97 19 72) 19]
Test Case: 825 | Input/Output: [(83 -30 37 50) -30]
Test Case: 826 | Input/Output: [(-40 43 -27 51) -40]
Test Case: 827 | Input/Output: [(39 92 41 3) 3]
Test Case: 828 | Input/Output: [(6 -45 48 64) -45]
Test Case: 829 | Input/Output: [(71 -44 23 31) -44]
Test Case: 830 | Input/Output: [(52 -99 34 -66) -99]
Test Case: 831 | Input/Output: [(-25 -1 -46 65) -46]
Test Case: 832 | Input/Output: [(-4 -84 42 -65) -84]
Test Case: 833 | Input/Output: [(3 22 -78 41) -78]
Test Case: 834 | Input/Output: [(34 52 -53 -36) -53]
Test Case: 835 | Input/Output: [(22 -81 72 32) -81]
Test Case: 836 | Input/Output: [(-25 -11 -36 -63) -63]
Test Case: 837 | Input/Output: [(96 -37 -87 60) -87]
Test Case: 838 | Input/Output: [(96 -71 72 39) -71]
Test Case: 839 | Input/Output: [(-94 8 58 86) -94]
Test Case: 840 | Input/Output: [(34 50 25 -17) -17]
Test Case: 841 | Input/Output: [(-39 -27 32 -9) -39]
Test Case: 842 | Input/Output: [(77 13 -99 -21) -99]
Test Case: 843 | Input/Output: [(-66 29 43 -33) -66]
Test Case: 844 | Input/Output: [(-4 -87 -30 92) -87]
Test Case: 845 | Input/Output: [(-32 81 18 18) -32]
Test Case: 846 | Input/Output: [(-61 -84 32 -48) -84]
Test Case: 847 | Input/Output: [(31 -12 -20 -50) -50]
Test Case: 848 | Input/Output: [(33 6 88 -39) -39]
Test Case: 849 | Input/Output: [(77 -80 32 -74) -80]
Test Case: 850 | Input/Output: [(2 41 -32 -43) -43]
Test Case: 851 | Input/Output: [(-26 87 69 -68) -68]
Test Case: 852 | Input/Output: [(-28 -54 -22 -25) -54]
Test Case: 853 | Input/Output: [(-58 60 -50 -43) -58]
Test Case: 854 | Input/Output: [(-8 88 -96 -32) -96]
Test Case: 855 | Input/Output: [(-9 -99 -94 -54) -99]
Test Case: 856 | Input/Output: [(-52 81 -35 -92) -92]
Test Case: 857 | Input/Output: [(84 27 -93 -12) -93]
Test Case: 858 | Input/Output: [(78 11 48 -62) -62]
Test Case: 859 | Input/Output: [(98 46 56 17) 17]
Test Case: 860 | Input/Output: [(-65 -3 47 -100) -100]
Test Case: 861 | Input/Output: [(12 16 -77 -55) -77]
Test Case: 862 | Input/Output: [(-28 21 -27 50) -28]
Test Case: 863 | Input/Output: [(-70 59 6 47) -70]
Test Case: 864 | Input/Output: [(35 -74 -35 17) -74]
Test Case: 865 | Input/Output: [(-4 -62 -91 87) -91]
Test Case: 866 | Input/Output: [(-60 -72 -19 -93) -93]
Test Case: 867 | Input/Output: [(33 -39 2 1) -39]
Test Case: 868 | Input/Output: [(64 -26 -49 39) -49]
Test Case: 869 | Input/Output: [(-37 76 -99 36) -99]
Test Case: 870 | Input/Output: [(-67 -80 -39 -69) -80]
Test Case: 871 | Input/Output: [(-5 -86 -11 28) -86]
Test Case: 872 | Input/Output: [(-80 -28 -16 96) -80]
Test Case: 873 | Input/Output: [(-33 60 -61 -8) -61]
Test Case: 874 | Input/Output: [(-90 65 57 -61) -90]
Test Case: 875 | Input/Output: [(-91 -50 -68 92) -91]
Test Case: 876 | Input/Output: [(-12 59 62 -37) -37]
Test Case: 877 | Input/Output: [(16 -89 -18 100) -89]
Test Case: 878 | Input/Output: [(27 51 -53 18) -53]
Test Case: 879 | Input/Output: [(44 -78 90 72) -78]
Test Case: 880 | Input/Output: [(-78 79 -19 -20) -78]
Test Case: 881 | Input/Output: [(-20 76 -26 -30) -30]
Test Case: 882 | Input/Output: [(-75 12 2 61) -75]
Test Case: 883 | Input/Output: [(-55 -40 46 11) -55]
Test Case: 884 | Input/Output: [(-48 -50 52 30) -50]
Test Case: 885 | Input/Output: [(9 -42 -58 58) -58]
Test Case: 886 | Input/Output: [(66 41 30 26) 26]
Test Case: 887 | Input/Output: [(18 97 96 28) 18]
Test Case: 888 | Input/Output: [(-2 81 4 72) -2]
Test Case: 889 | Input/Output: [(-66 94 -42 -49) -66]
Test Case: 890 | Input/Output: [(-40 -31 86 -34) -40]
Test Case: 891 | Input/Output: [(25 -97 18 99) -97]
Test Case: 892 | Input/Output: [(84 -20 -99 -67) -99]
Test Case: 893 | Input/Output: [(-77 65 -5 43) -77]
Test Case: 894 | Input/Output: [(-89 -23 78 -88) -89]
Test Case: 895 | Input/Output: [(-11 94 82 84) -11]
Test Case: 896 | Input/Output: [(97 47 -15 86) -15]
Test Case: 897 | Input/Output: [(-12 -74 3 -87) -87]
Test Case: 898 | Input/Output: [(34 68 70 88) 34]
Test Case: 899 | Input/Output: [(69 -65 63 -46) -65]
Test Case: 900 | Input/Output: [(-17 51 -20 13) -20]
Test Case: 901 | Input/Output: [(-3 84 61 -34) -34]
Test Case: 902 | Input/Output: [(-85 -11 -65 -74) -85]
Test Case: 903 | Input/Output: [(56 -92 72 -61) -92]
Test Case: 904 | Input/Output: [(2 -18 88 -100) -100]
Test Case: 905 | Input/Output: [(35 -14 -20 80) -20]
Test Case: 906 | Input/Output: [(-46 96 80 48) -46]
Test Case: 907 | Input/Output: [(46 91 100 67) 46]
Test Case: 908 | Input/Output: [(81 86 -31 -49) -49]
Test Case: 909 | Input/Output: [(86 21 7 -62) -62]
Test Case: 910 | Input/Output: [(95 -97 -35 54) -97]
Test Case: 911 | Input/Output: [(-69 26 -23 64) -69]
Test Case: 912 | Input/Output: [(73 56 37 -28) -28]
Test Case: 913 | Input/Output: [(0 -13 23 50) -13]
Test Case: 914 | Input/Output: [(24 40 -11 81) -11]
Test Case: 915 | Input/Output: [(-45 28 -62 71) -62]
Test Case: 916 | Input/Output: [(-74 8 42 -45) -74]
Test Case: 917 | Input/Output: [(2 53 57 -25) -25]
Test Case: 918 | Input/Output: [(-30 -17 -61 7) -61]
Test Case: 919 | Input/Output: [(-49 -96 -92 78) -96]
Test Case: 920 | Input/Output: [(63 -78 41 -72) -78]
Test Case: 921 | Input/Output: [(-30 -73 -20 -20) -73]
Test Case: 922 | Input/Output: [(-25 60 22 91) -25]
Test Case: 923 | Input/Output: [(51 69 75 -96) -96]
Test Case: 924 | Input/Output: [(-19 -18 82 -26) -26]
Test Case: 925 | Input/Output: [(30 -47 70 -63) -63]
Test Case: 926 | Input/Output: [(16 88 -78 16) -78]
Test Case: 927 | Input/Output: [(-53 83 -96 83) -96]
Test Case: 928 | Input/Output: [(78 96 -57 33) -57]
Test Case: 929 | Input/Output: [(49 70 95 -75) -75]
Test Case: 930 | Input/Output: [(74 4 96 -55) -55]
Test Case: 931 | Input/Output: [(-22 91 25 -35) -35]
Test Case: 932 | Input/Output: [(89 66 38 -54) -54]
Test Case: 933 | Input/Output: [(72 24 -71 66) -71]
Test Case: 934 | Input/Output: [(-70 -55 23 -76) -76]
Test Case: 935 | Input/Output: [(-21 53 49 90) -21]
Test Case: 936 | Input/Output: [(-22 49 10 -23) -23]
Test Case: 937 | Input/Output: [(85 5 69 -68) -68]
Test Case: 938 | Input/Output: [(15 2 -64 -19) -64]
Test Case: 939 | Input/Output: [(63 95 52 -55) -55]
Test Case: 940 | Input/Output: [(-17 69 -40 9) -40]
Test Case: 941 | Input/Output: [(-53 24 4 5) -53]
Test Case: 942 | Input/Output: [(83 49 -45 -73) -73]
Test Case: 943 | Input/Output: [(-48 -46 28 -68) -68]
Test Case: 944 | Input/Output: [(-25 -90 98 31) -90]
Test Case: 945 | Input/Output: [(37 -99 -45 48) -99]
Test Case: 946 | Input/Output: [(78 -38 -34 -71) -71]
Test Case: 947 | Input/Output: [(50 -82 -12 60) -82]
Test Case: 948 | Input/Output: [(39 26 -60 8) -60]
Test Case: 949 | Input/Output: [(-35 -78 -66 -65) -78]
Test Case: 950 | Input/Output: [(-43 22 -21 99) -43]
Test Case: 951 | Input/Output: [(-58 43 -40 86) -58]
Test Case: 952 | Input/Output: [(16 47 -90 68) -90]
Test Case: 953 | Input/Output: [(-63 -14 -51 52) -63]
Test Case: 954 | Input/Output: [(10 11 -52 41) -52]
Test Case: 955 | Input/Output: [(-21 -91 79 -38) -91]
Test Case: 956 | Input/Output: [(44 49 11 58) 11]
Test Case: 957 | Input/Output: [(2 11 90 -45) -45]
Test Case: 958 | Input/Output: [(-49 21 47 -81) -81]
Test Case: 959 | Input/Output: [(33 18 -62 -57) -62]
Test Case: 960 | Input/Output: [(10 -17 2 -47) -47]
Test Case: 961 | Input/Output: [(79 94 -15 -52) -52]
Test Case: 962 | Input/Output: [(66 83 -52 76) -52]
Test Case: 963 | Input/Output: [(77 10 -77 75) -77]
Test Case: 964 | Input/Output: [(53 -86 -11 -13) -86]
Test Case: 965 | Input/Output: [(-23 73 55 11) -23]
Test Case: 966 | Input/Output: [(-94 74 -4 39) -94]
Test Case: 967 | Input/Output: [(-18 75 -93 -51) -93]
Test Case: 968 | Input/Output: [(76 20 -78 71) -78]
Test Case: 969 | Input/Output: [(4 38 25 99) 4]
Test Case: 970 | Input/Output: [(-10 27 79 38) -10]
Test Case: 971 | Input/Output: [(1 -80 13 49) -80]
Test Case: 972 | Input/Output: [(100 -26 6 -79) -79]
Test Case: 973 | Input/Output: [(47 68 47 12) 12]
Test Case: 974 | Input/Output: [(-99 49 -61 30) -99]
Test Case: 975 | Input/Output: [(54 -33 44 4) -33]
Test Case: 976 | Input/Output: [(83 17 9 51) 9]
Test Case: 977 | Input/Output: [(90 -48 -88 -54) -88]
Test Case: 978 | Input/Output: [(32 18 -59 8) -59]
Test Case: 979 | Input/Output: [(-30 74 -16 66) -30]
Test Case: 980 | Input/Output: [(65 -3 48 -33) -33]
Test Case: 981 | Input/Output: [(25 43 -95 -31) -95]
Test Case: 982 | Input/Output: [(-66 89 69 -46) -66]
Test Case: 983 | Input/Output: [(-36 32 -34 38) -36]
Test Case: 984 | Input/Output: [(-79 -21 -69 80) -79]
Test Case: 985 | Input/Output: [(-31 51 76 -40) -40]
Test Case: 986 | Input/Output: [(-62 21 -7 -43) -62]
Test Case: 987 | Input/Output: [(-95 27 -75 -36) -95]
Test Case: 988 | Input/Output: [(25 18 -2 70) -2]
Test Case: 989 | Input/Output: [(-12 42 41 22) -12]
Test Case: 990 | Input/Output: [(-20 -65 -52 7) -65]
Test Case: 991 | Input/Output: [(-34 65 99 69) -34]
Test Case: 992 | Input/Output: [(25 -68 -15 -2) -68]
Test Case: 993 | Input/Output: [(83 -43 -76 -45) -76]
Test Case: 994 | Input/Output: [(-2 39 99 40) -2]
Test Case: 995 | Input/Output: [(73 3 -44 -34) -44]
Test Case: 996 | Input/Output: [(-82 71 -49 6) -82]
Test Case: 997 | Input/Output: [(2 -55 97 -91) -91]
Test Case: 998 | Input/Output: [(-91 -75 5 -98) -98]
Test Case: 999 | Input/Output: [(-7 -37 35 -42) -42]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x17e6b7e4 clojush.problems.software.smallest$fn__7461@17e6b7e4] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0xb842275 clojush.instructions.tag$tag_instruction_erc$fn__2160@b842275] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x11c25846 clojush.instructions.tag$tagged_instruction_erc$fn__2166@11c25846] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0xdd9de63 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@dd9de63]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x98712fa clojush.problems.software.smallest$smallest_initial_report@98712fa]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x3b8d2abe clojush.problems.software.smallest$smallest_report@3b8d2abe]
random-screen = false
random-seed = -83 -84 -57 -18 -13 -35 -15 -49 35 -57 76 38 -52 -110 -116 35
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[13 13 13 87] 13] [[15 -67 15 15] -67] [[3 3 3 80] 3] [[76 -89 -89 -89] -89] [[69 -23 -23 -23] -23] [[-83 -83 -83 -59] -83] [[75 75 75 -18] -18] [[-40 72 -40 -40] -40] [[-13 -49 -13 -13] -49] [[33 0 33 33] 0] [(79 79 79 79) 79] [(-93 -93 -93 -93) -93] [(55 55 55 55) 55] [(-59 -59 -59 -59) -59] [(44 44 44 44) 44] [(68 24 21 22) 21] [(87 79 37 38) 37] [(83 67 63 5) 5] [(34 20 75 35) 20] [(11 14 43 86) 11] [(32 49 86 35) 32] [(30 22 20 99) 20] [(0 97 100 72) 0] [(63 24 26 95) 24] [(8 40 12 46) 8] [(13 15 26 7) 7] [(24 76 66 7) 7] [(29 72 30 41) 29] [(66 80 95 78) 66] [(49 76 44 81) 44] [(89 95 69 81) 69] [(62 51 76 46) 46] [(18 62 74 23) 18] [(11 67 85 83) 11] [(94 59 32 89) 32] [(98 -89 -65 -65) -89] [(73 14 44 -59) -59] [(-64 67 46 80) -64] [(78 -80 -95 50) -95] [(46 74 -89 57) -89] [(-95 -15 23 64) -95] [(-20 62 36 -93) -93] [(85 -84 55 5) -84] [(-91 84 63 38) -91] [(59 27 -10 18) -10] [(76 -44 2 -75) -75] [(-95 79 -25 63) -95] [(-48 55 -68 78) -68] [(-63 27 60 39) -63] [(8 38 -11 -82) -82] [(59 -81 -40 42) -81] [(-80 -79 40 33) -80] [(74 29 67 -97) -97] [(-88 -73 -91 40) -91] [(-96 1 31 42) -96] [(-29 -97 97 -71) -97] [(1 36 25 45) 1] [(9 -56 60 72) -56] [(-26 31 25 35) -26] [(-30 -55 10 6) -55] [(57 12 -56 98) -56] [(59 -5 -12 54) -12] [(96 90 61 -10) -10] [(-6 51 70 -81) -81] [(33 52 78 -70) -70] [(69 -75 33 -38) -75] [(55 -15 -30 -51) -51] [(96 -47 -73 -38) -73] [(-57 44 95 8) -57] [(65 25 81 44) 25] [(-29 84 -73 43) -73] [(-13 -73 -55 -58) -73] [(-37 92 -87 78) -87] [(-5 -46 -8 -91) -91] [(52 -27 -51 2) -51] [(26 -83 -64 84) -83] [(84 59 28 -60) -60] [(-91 -94 60 72) -94] [(57 -95 69 -14) -95] [(-8 -9 -35 56) -35] [(-87 68 -66 69) -87] [(-59 -96 -17 -49) -96] [(-17 73 81 93) -17] [(-1 -68 -62 90) -68] [(-12 72 56 -28) -28] [(-79 56 -58 -86) -86] [(-82 70 -21 -57) -82] [(-31 -85 96 -32) -85] [(100 -4 -91 -13) -91] [(-73 -88 85 42) -88] [(3 74 -71 8) -71] [(82 27 -14 88) -14] [(83 17 42 -80) -80] [(61 15 77 11) 11] [(-83 -9 97 22) -83])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -67                 | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -23                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: -13                
Correct output: 0                   | Program output: 33                 
Correct output: 79                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: 55                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 63                 
Correct output: 20                  | Program output: 75                 
Correct output: 11                  | Program output: 43                 
Correct output: 32                  | Program output: 86                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 100                
Correct output: 24                  | Program output: 26                 
Correct output: 8                   | Program output: 12                 
Correct output: 7                   | Program output: 26                 
Correct output: 7                   | Program output: 66                 
Correct output: 29                  | Program output: 30                 
Correct output: 66                  | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: 69                  | Program output: 69                 
Correct output: 46                  | Program output: 76                 
Correct output: 18                  | Program output: 74                 
Correct output: 11                  | Program output: 85                 
Correct output: 32                  | Program output: 32                 
Correct output: -89                 | Program output: -65                
Correct output: -59                 | Program output: 44                 
Correct output: -64                 | Program output: 46                 
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 23                 
Correct output: -93                 | Program output: 36                 
Correct output: -84                 | Program output: 55                 
Correct output: -91                 | Program output: 63                 
Correct output: -10                 | Program output: -10                
Correct output: -75                 | Program output: 2                  
Correct output: -95                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: 60                 
Correct output: -82                 | Program output: -11                
Correct output: -81                 | Program output: -40                
Correct output: -80                 | Program output: 40                 
Correct output: -97                 | Program output: 67                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: 31                 
Correct output: -97                 | Program output: 97                 
Correct output: 1                   | Program output: 25                 
Correct output: -56                 | Program output: 60                 
Correct output: -26                 | Program output: 25                 
Correct output: -55                 | Program output: 10                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -10                 | Program output: 61                 
Correct output: -81                 | Program output: 70                 
Correct output: -70                 | Program output: 78                 
Correct output: -75                 | Program output: 33                 
Correct output: -51                 | Program output: -30                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: 95                 
Correct output: 25                  | Program output: 81                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -64                
Correct output: -60                 | Program output: 28                 
Correct output: -94                 | Program output: 60                 
Correct output: -95                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -66                
Correct output: -96                 | Program output: -17                
Correct output: -17                 | Program output: 81                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 56                 
Correct output: -86                 | Program output: -58                
Correct output: -82                 | Program output: -21                
Correct output: -85                 | Program output: 96                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -14                 | Program output: -14                
Correct output: -80                 | Program output: 42                 
Correct output: 11                  | Program output: 77                 
Correct output: -83                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction tagged_467} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup_times boolean_invert_second_then_and boolean_pop integer_dup in3 integer_min integer_fromboolean print_integer boolean_not integer_swap integer_swap exec_do*count (boolean_empty integer_stackdepth exec_y () boolean_dup_times in3 exec_pop (integer_add boolean_invert_first_then_and) in2 boolean_shove exec_y () integer_dup_times exec_eq) print_exec (tagged_467) exec_s () (exec_eq integer_dup_times exec_s (integer_rot boolean_flush exec_y_when_autoconstructing (print_boolean 71 boolean_empty exec_while ()) boolean_and boolean_invert_second_then_and exec_yankdup print_integer integer_mod boolean_and boolean_empty integer_lt boolean_shove boolean_flush print_exec () integer_pop in4 boolean_dup) () (boolean_invert_second_then_and boolean_and exec_pop (exec_y_when_autoconstructing (boolean_invert_second_then_and) boolean_swap boolean_and integer_flush exec_dup_times (boolean_invert_second_then_and exec_if (exec_do*count (exec_when (boolean_invert_first_then_and tagged_341 integer_pop)) exec_s () (exec_k_when_autoconstructing (exec_swap () (exec_y_when_autoconstructing (integer_sub integer_dec integer_yank exec_k (integer_mod exec_shove (exec_while (integer_inc exec_k (exec_y_when_autoconstructing (integer_yank integer_mult exec_y_when_autoconstructing (boolean_shove integer_yank) exec_yankdup boolean_stackdepth)) ()))) ()))) ()) ()) ())))) ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 127
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction tagged_467} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup_times boolean_invert_second_then_and boolean_pop integer_dup in3 integer_min integer_fromboolean print_integer boolean_not integer_swap integer_swap exec_do*count (boolean_empty integer_stackdepth exec_y () boolean_dup_times in3 exec_pop (integer_add boolean_invert_first_then_and) in2 boolean_shove exec_y () integer_dup_times exec_eq) print_exec (tagged_467) exec_s () (exec_eq integer_dup_times exec_s (integer_rot boolean_flush exec_y_when_autoconstructing (print_boolean 71 boolean_empty exec_while ()) boolean_and boolean_invert_second_then_and exec_yankdup print_integer integer_mod boolean_and boolean_empty integer_lt boolean_shove boolean_flush print_exec () integer_pop in4 boolean_dup) () (boolean_invert_second_then_and boolean_and exec_pop (exec_y_when_autoconstructing (boolean_invert_second_then_and) boolean_swap boolean_and integer_flush exec_dup_times (boolean_invert_second_then_and exec_if (exec_do*count (exec_when (boolean_invert_first_then_and tagged_341 integer_pop)) exec_s () (exec_k_when_autoconstructing (exec_swap () (exec_y_when_autoconstructing (integer_sub integer_dec integer_yank exec_k (integer_mod exec_shove (exec_while (integer_inc exec_k (exec_y_when_autoconstructing (integer_yank integer_mult exec_y_when_autoconstructing (boolean_shove integer_yank) exec_yankdup boolean_stackdepth)) ()))) ()))) ()) ()) ())))) ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 127
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 9 5 13 1 1 5 5 1 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (2 9 5 13 1 1 5 5 1 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction 22} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup})
Best program: (integer_gt in3 integer_mult integer_lte integer_eq boolean_invert_second_then_and in4 exec_k_when_autoconstructing (boolean_frominteger boolean_not print_integer boolean_dup_times boolean_dup boolean_dup_items) (print_integer) exec_while (exec_do*times (exec_noop integer_pop) boolean_not integer_inc integer_min boolean_flush) exec_k_when_autoconstructing (boolean_invert_first_then_and exec_dup_times (exec_dup_items integer_yankdup exec_k_when_autoconstructing () (integer_shove exec_pop () exec_when (integer_dup_items integer_gte boolean_xor) exec_s_when_autoconstructing () (exec_yank exec_flush in4 exec_s_when_autoconstructing (exec_eq in3 boolean_and boolean_invert_second_then_and exec_dup_times (integer_dec exec_rot (22 in3 boolean_eq print_boolean integer_yankdup integer_flush integer_swap boolean_yankdup exec_k_when_autoconstructing (boolean_dup_items) (integer_dup integer_dup)) () ())) () ()) ()))) ())
Errors: [1 1 0 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 59
Size: 83
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 9.955
Median total errors in population: 10
Error averages by case: (0.998 0.991 0.995 0.987 0.999 0.999 0.995 0.995 0.999 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.598
Average program size in population (points): 68.208
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 469584
--- Timings ---
Current time: 1559594215075 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.9 seconds, 34.1%
Fitness Testing:      1.5 seconds, 61.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -67                 | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -23                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: -13                
Correct output: 0                   | Program output: 33                 
Correct output: 79                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: 55                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 63                 
Correct output: 20                  | Program output: 75                 
Correct output: 11                  | Program output: 43                 
Correct output: 32                  | Program output: 86                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 100                
Correct output: 24                  | Program output: 26                 
Correct output: 8                   | Program output: 12                 
Correct output: 7                   | Program output: 26                 
Correct output: 7                   | Program output: 66                 
Correct output: 29                  | Program output: 30                 
Correct output: 66                  | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: 69                  | Program output: 69                 
Correct output: 46                  | Program output: 76                 
Correct output: 18                  | Program output: 74                 
Correct output: 11                  | Program output: 85                 
Correct output: 32                  | Program output: 32                 
Correct output: -89                 | Program output: -65                
Correct output: -59                 | Program output: 44                 
Correct output: -64                 | Program output: 46                 
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 23                 
Correct output: -93                 | Program output: 36                 
Correct output: -84                 | Program output: 55                 
Correct output: -91                 | Program output: 63                 
Correct output: -10                 | Program output: -10                
Correct output: -75                 | Program output: 2                  
Correct output: -95                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: 60                 
Correct output: -82                 | Program output: -11                
Correct output: -81                 | Program output: -40                
Correct output: -80                 | Program output: 40                 
Correct output: -97                 | Program output: 67                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: 31                 
Correct output: -97                 | Program output: 97                 
Correct output: 1                   | Program output: 25                 
Correct output: -56                 | Program output: 60                 
Correct output: -26                 | Program output: 25                 
Correct output: -55                 | Program output: 10                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -10                 | Program output: 61                 
Correct output: -81                 | Program output: 70                 
Correct output: -70                 | Program output: 78                 
Correct output: -75                 | Program output: 33                 
Correct output: -51                 | Program output: -30                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: 95                 
Correct output: 25                  | Program output: 81                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -64                
Correct output: -60                 | Program output: 28                 
Correct output: -94                 | Program output: 60                 
Correct output: -95                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -66                
Correct output: -96                 | Program output: -17                
Correct output: -17                 | Program output: 81                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 56                 
Correct output: -86                 | Program output: -58                
Correct output: -82                 | Program output: -21                
Correct output: -85                 | Program output: 96                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -14                 | Program output: -14                
Correct output: -80                 | Program output: 42                 
Correct output: 11                  | Program output: 77                 
Correct output: -83                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction -82} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 2, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_pop})
Lexicase best program: (in2 print_boolean -82 exec_noop boolean_and boolean_empty in1 exec_while () exec_k_when_autoconstructing (exec_when () exec_shove () in3) (print_integer integer_mod integer_gte integer_lte exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_empty) (exec_pop ()) ()))
Lexicase best errors: [0 0 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction -82} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 2, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_pop})
Zero cases best program: (in2 print_boolean -82 exec_noop boolean_and boolean_empty in1 exec_while () exec_k_when_autoconstructing (exec_when () exec_shove () in3) (print_integer integer_mod integer_gte integer_lte exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_empty) (exec_pop ()) ()))
Zero cases best errors: [0 0 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 227 216 211 9 7 8 228 226 7)
Population mean number of elite cases: 1.37
Count of perfect (error zero) individuals by case: (227 227 216 211 9 7 8 228 226 7)
Population mean number of perfect (error zero) cases: 1.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_flush} {:close 0, :instruction -82} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop})
Best program: (in2 print_boolean integer_flush -82 exec_noop boolean_and boolean_empty exec_while () exec_k_when_autoconstructing (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_dup_items exec_shove () in3) (print_integer integer_mod integer_gte exec_s_when_autoconstructing (boolean_invert_first_then_and exec_pop ()) () ())) ())
Errors: [0 0 1 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 20
Size: 31
Percent parens: 0.355
--- Population Statistics ---
Average total errors in population: 8.634
Median total errors in population: 9
Error averages by case: (0.773 0.773 0.784 0.789 0.991 0.993 0.992 0.772 0.774 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.479
Average program size in population (points): 72.928
Average percent parens in population: 0.246
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 945669
--- Timings ---
Current time: 1559594216850 milliseconds
Total Time:           4.4 seconds
Initialization:       0.1 seconds,  2.6%
Reproduction:         1.8 seconds, 40.8%
Fitness Testing:      2.1 seconds, 46.8%
Report:               0.4 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 402
Test mean error for best: 0.40200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -67                 | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -23                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: -13                
Correct output: 0                   | Program output: 33                 
Correct output: 79                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: 55                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 35                 
Correct output: 11                  | Program output: 43                 
Correct output: 32                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 72                 
Correct output: 24                  | Program output: 26                 
Correct output: 8                   | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 29                  | Program output: 30                 
Correct output: 66                  | Program output: 78                 
Correct output: 44                  | Program output: 44                 
Correct output: 69                  | Program output: 69                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 23                 
Correct output: 11                  | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: -89                 | Program output: -65                
Correct output: -59                 | Program output: -59                
Correct output: -64                 | Program output: 46                 
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 23                 
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: 5                  
Correct output: -91                 | Program output: 38                 
Correct output: -10                 | Program output: -10                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: 39                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -40                
Correct output: -80                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: 31                 
Correct output: -97                 | Program output: -71                
Correct output: 1                   | Program output: 25                 
Correct output: -56                 | Program output: 60                 
Correct output: -26                 | Program output: 25                 
Correct output: -55                 | Program output: 6                  
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -38                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: 8                  
Correct output: 25                  | Program output: 44                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -64                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: 60                 
Correct output: -95                 | Program output: -14                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -66                
Correct output: -96                 | Program output: -49                
Correct output: -17                 | Program output: 81                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: -28                
Correct output: -86                 | Program output: -86                
Correct output: -82                 | Program output: -57                
Correct output: -85                 | Program output: -32                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: 42                 
Correct output: -71                 | Program output: -71                
Correct output: -14                 | Program output: -14                
Correct output: -80                 | Program output: -80                
Correct output: 11                  | Program output: 11                 
Correct output: -83                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 3, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 1, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction tagged_231} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_do*count () in2 boolean_yankdup boolean_yankdup integer_rot in2 boolean_pop exec_shove (print_integer) integer_add boolean_frominteger exec_do*times (boolean_dup_times integer_dec integer_yank) exec_dup () exec_shove (exec_k (in4) (exec_while (exec_empty exec_eq integer_yankdup exec_shove (print_boolean exec_when (exec_when (exec_swap () (integer_lt integer_add exec_when (boolean_not boolean_dup_items)) in3) boolean_rot integer_add integer_max boolean_frominteger) boolean_empty)) exec_rot (integer_lte exec_flush) (in3) (exec_while () exec_if (exec_yankdup integer_empty integer_inc integer_yankdup tag_exec_84 (exec_y (exec_pop (print_newline) exec_k_when_autoconstructing (integer_rot exec_dup_items boolean_stackdepth) (exec_s (integer_yank integer_gte exec_when () integer_lte) (integer_eq integer_max exec_shove (integer_rot exec_do*range (boolean_rot integer_inc integer_empty) exec_eq exec_s (integer_flush boolean_swap exec_dup_items exec_dup_items integer_swap) (in3 in4 exec_if () (boolean_swap in2 tagged_231 exec_y (exec_s_when_autoconstructing (integer_sub integer_swap print_integer integer_shove) (boolean_pop) ()))) ())) ())))) ()))))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 131
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 3, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 1, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction tagged_231} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_do*count () in2 boolean_yankdup boolean_yankdup integer_rot in2 boolean_pop exec_shove (print_integer) integer_add boolean_frominteger exec_do*times (boolean_dup_times integer_dec integer_yank) exec_dup () exec_shove (exec_k (in4) (exec_while (exec_empty exec_eq integer_yankdup exec_shove (print_boolean exec_when (exec_when (exec_swap () (integer_lt integer_add exec_when (boolean_not boolean_dup_items)) in3) boolean_rot integer_add integer_max boolean_frominteger) boolean_empty)) exec_rot (integer_lte exec_flush) (in3) (exec_while () exec_if (exec_yankdup integer_empty integer_inc integer_yankdup tag_exec_84 (exec_y (exec_pop (print_newline) exec_k_when_autoconstructing (integer_rot exec_dup_items boolean_stackdepth) (exec_s (integer_yank integer_gte exec_when () integer_lte) (integer_eq integer_max exec_shove (integer_rot exec_do*range (boolean_rot integer_inc integer_empty) exec_eq exec_s (integer_flush boolean_swap exec_dup_items exec_dup_items integer_swap) (in3 in4 exec_if () (boolean_swap in2 tagged_231 exec_y (exec_s_when_autoconstructing (integer_sub integer_swap print_integer integer_shove) (boolean_pop) ()))) ())) ())))) ()))))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 131
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (280 77 80 202 180 282 263 67 66 66)
Population mean number of elite cases: 1.56
Count of perfect (error zero) individuals by case: (280 77 80 202 180 282 263 67 66 66)
Population mean number of perfect (error zero) cases: 1.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 1, :instruction tagged_467} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction -62} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction -89} {:close 0, :instruction print_boolean} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup_times boolean_invert_second_then_and boolean_pop in4 in3 integer_min integer_fromboolean print_integer integer_swap integer_swap exec_do*count (integer_stackdepth exec_y () boolean_dup_times in3 integer_add boolean_invert_first_then_and) boolean_shove exec_y () exec_eq tagged_467 exec_s () (boolean_dup_items integer_swap -62) (integer_dup_times exec_s (integer_rot boolean_flush exec_y_when_autoconstructing (exec_dup () -89 print_boolean 71 boolean_empty exec_while ()) boolean_invert_second_then_and exec_yankdup print_integer boolean_and boolean_empty integer_lt boolean_shove boolean_flush print_exec () in4 boolean_dup) () (boolean_invert_second_then_and exec_do*times () boolean_and exec_pop (integer_gte integer_mod exec_y_when_autoconstructing (boolean_invert_second_then_and) boolean_swap boolean_and integer_flush boolean_invert_second_then_and integer_pop exec_do*count (exec_when (boolean_invert_first_then_and tagged_341 integer_pop)) exec_s () (exec_k_when_autoconstructing (print_boolean) (exec_swap () (exec_y_when_autoconstructing (integer_sub integer_dec integer_yank exec_k (integer_mod print_integer integer_inc exec_k (exec_y_when_autoconstructing (integer_yank integer_mult exec_y_when_autoconstructing (boolean_shove exec_rot (integer_yank) (exec_yankdup boolean_stackdepth) ()))) ()) ())))) ()))))
Errors: [0 1 1 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 87
Size: 123
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 8.437
Median total errors in population: 8
Error averages by case: (0.72 0.923 0.92 0.798 0.82 0.718 0.737 0.933 0.934 0.934)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.582
Average program size in population (points): 86.692
Average percent parens in population: 0.319
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1400040
--- Timings ---
Current time: 1559594219158 milliseconds
Total Time:           6.4 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         3.0 seconds, 47.1%
Fitness Testing:      2.6 seconds, 39.9%
Report:               0.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 402
Test mean error for best: 0.40200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -67                 | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -23                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: -13                
Correct output: 0                   | Program output: 33                 
Correct output: 79                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: 55                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 35                 
Correct output: 11                  | Program output: 43                 
Correct output: 32                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 72                 
Correct output: 24                  | Program output: 26                 
Correct output: 8                   | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 29                  | Program output: 30                 
Correct output: 66                  | Program output: 78                 
Correct output: 44                  | Program output: 44                 
Correct output: 69                  | Program output: 69                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 23                 
Correct output: 11                  | Program output: 83                 
Correct output: 32                  | Program output: 32                 
Correct output: -89                 | Program output: -65                
Correct output: -59                 | Program output: -59                
Correct output: -64                 | Program output: 46                 
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 23                 
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: 5                  
Correct output: -91                 | Program output: 38                 
Correct output: -10                 | Program output: -10                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: 39                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -40                
Correct output: -80                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: 31                 
Correct output: -97                 | Program output: -71                
Correct output: 1                   | Program output: 25                 
Correct output: -56                 | Program output: 60                 
Correct output: -26                 | Program output: 25                 
Correct output: -55                 | Program output: 6                  
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -38                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: 8                  
Correct output: 25                  | Program output: 44                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -64                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: 60                 
Correct output: -95                 | Program output: -14                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -66                
Correct output: -96                 | Program output: -49                
Correct output: -17                 | Program output: 81                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: -28                
Correct output: -86                 | Program output: -86                
Correct output: -82                 | Program output: -57                
Correct output: -85                 | Program output: -32                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: 42                 
Correct output: -71                 | Program output: -71                
Correct output: -14                 | Program output: -14                
Correct output: -80                 | Program output: -80                
Correct output: 11                  | Program output: 11                 
Correct output: -83                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 1, :instruction tagged_467} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction -62} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction -89} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup_times boolean_invert_second_then_and boolean_pop in4 in3 integer_min integer_fromboolean print_integer integer_swap exec_do*count (integer_stackdepth exec_y () boolean_dup_times in3 integer_shove integer_add boolean_invert_first_then_and) boolean_shove exec_y () exec_eq tagged_467 exec_s () (boolean_dup_items integer_swap -62) (integer_dup_times exec_s (integer_rot boolean_flush exec_y_when_autoconstructing (integer_flush exec_dup () integer_flush -89 boolean_empty boolean_dup_items exec_while ()) exec_stackdepth boolean_and exec_flush integer_yankdup integer_lt boolean_shove boolean_flush print_exec () in4 boolean_dup) () (boolean_invert_second_then_and exec_do*times () boolean_and exec_pop (exec_y (integer_gte integer_mod exec_y_when_autoconstructing (boolean_invert_second_then_and) boolean_and integer_flush exec_k (boolean_invert_second_then_and integer_pop exec_do*count (exec_k_when_autoconstructing () (exec_when (boolean_invert_first_then_and tagged_341 integer_pop)) exec_s () (exec_k_when_autoconstructing (print_boolean) (exec_swap () (exec_y_when_autoconstructing (integer_sub integer_dec integer_yank exec_k (integer_mod print_integer integer_inc exec_k (exec_y_when_autoconstructing (integer_yank integer_mult exec_y_when_autoconstructing (boolean_shove boolean_invert_second_then_and exec_rot (integer_yank) (exec_yankdup boolean_stackdepth) ()))) ()) ())))) ())) ())))))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 131
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 1, :instruction tagged_467} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction -62} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction -89} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup_times boolean_invert_second_then_and boolean_pop in4 in3 integer_min integer_fromboolean print_integer integer_swap exec_do*count (integer_stackdepth exec_y () boolean_dup_times in3 integer_shove integer_add boolean_invert_first_then_and) boolean_shove exec_y () exec_eq tagged_467 exec_s () (boolean_dup_items integer_swap -62) (integer_dup_times exec_s (integer_rot boolean_flush exec_y_when_autoconstructing (integer_flush exec_dup () integer_flush -89 boolean_empty boolean_dup_items exec_while ()) exec_stackdepth boolean_and exec_flush integer_yankdup integer_lt boolean_shove boolean_flush print_exec () in4 boolean_dup) () (boolean_invert_second_then_and exec_do*times () boolean_and exec_pop (exec_y (integer_gte integer_mod exec_y_when_autoconstructing (boolean_invert_second_then_and) boolean_and integer_flush exec_k (boolean_invert_second_then_and integer_pop exec_do*count (exec_k_when_autoconstructing () (exec_when (boolean_invert_first_then_and tagged_341 integer_pop)) exec_s () (exec_k_when_autoconstructing (print_boolean) (exec_swap () (exec_y_when_autoconstructing (integer_sub integer_dec integer_yank exec_k (integer_mod print_integer integer_inc exec_k (exec_y_when_autoconstructing (integer_yank integer_mult exec_y_when_autoconstructing (boolean_shove boolean_invert_second_then_and exec_rot (integer_yank) (exec_yankdup boolean_stackdepth) ()))) ()) ())))) ())) ())))))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 131
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (295 245 152 459 632 244 648 247 441 297)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (295 245 152 459 632 244 648 247 441 297)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 1, :instruction tagged_467} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction -62} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction -89} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup_times boolean_invert_second_then_and in4 in3 integer_min integer_fromboolean print_integer integer_swap integer_swap exec_do*count (integer_stackdepth exec_y () boolean_dup_times integer_add boolean_invert_first_then_and) exec_y () exec_eq tagged_467 integer_pop exec_s () (boolean_dup_items integer_swap -62) (integer_dup_times exec_s (integer_rot boolean_flush exec_dup () -89 integer_mult) (print_boolean 71 boolean_empty exec_while ()) (boolean_invert_second_then_and exec_yankdup print_integer boolean_and boolean_empty integer_lt boolean_shove boolean_flush print_exec () in4 boolean_dup)) boolean_invert_second_then_and exec_do*times () boolean_and boolean_stackdepth boolean_not integer_mod exec_y_when_autoconstructing (boolean_invert_second_then_and) boolean_swap boolean_and integer_flush exec_y_when_autoconstructing (boolean_invert_second_then_and integer_pop exec_do*count (exec_when (boolean_invert_first_then_and tagged_341 integer_pop)) exec_s () (exec_k_when_autoconstructing (print_boolean) (exec_swap () (exec_y_when_autoconstructing (integer_sub integer_dec integer_yank exec_k (integer_mod integer_inc exec_k (exec_y_when_autoconstructing (integer_yank integer_mult exec_y_when_autoconstructing (boolean_shove exec_rot (integer_yank) (exec_yankdup boolean_stackdepth) ()))) ()) ())))) ()))
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 85
Size: 120
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.34
Median total errors in population: 6
Error averages by case: (0.705 0.755 0.848 0.541 0.368 0.756 0.352 0.753 0.559 0.703)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.353
Average program size in population (points): 131.376
Average percent parens in population: 0.304
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2147498
--- Timings ---
Current time: 1559594221679 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.1 seconds, 46.4%
Fitness Testing:      3.3 seconds, 37.2%
Report:               1.3 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -23                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: 79                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: 55                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 63                 
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 14                 
Correct output: 32                  | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 97                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 12                 
Correct output: 7                   | Program output: 15                 
Correct output: 7                   | Program output: 66                 
Correct output: 29                  | Program output: 30                 
Correct output: 66                  | Program output: 80                 
Correct output: 44                  | Program output: 44                 
Correct output: 69                  | Program output: 69                 
Correct output: 46                  | Program output: 51                 
Correct output: 18                  | Program output: 62                 
Correct output: 11                  | Program output: 67                 
Correct output: 32                  | Program output: 32                 
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: 14                 
Correct output: -64                 | Program output: 46                 
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -15                
Correct output: -93                 | Program output: 36                 
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: 63                 
Correct output: -10                 | Program output: -10                
Correct output: -75                 | Program output: -44                
Correct output: -95                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: 27                 
Correct output: -82                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -79                
Correct output: -97                 | Program output: 29                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 25                 
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: 25                 
Correct output: -55                 | Program output: -55                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -10                 | Program output: 61                 
Correct output: -81                 | Program output: 51                 
Correct output: -70                 | Program output: 52                 
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -30                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -46                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -17                 | Program output: 73                 
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: 56                 
Correct output: -86                 | Program output: -58                
Correct output: -82                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -14                 | Program output: -14                
Correct output: -80                 | Program output: 17                 
Correct output: 11                  | Program output: 15                 
Correct output: -83                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction tagged_467} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Lexicase best program: (boolean_dup_times boolean_invert_second_then_and in2 integer_dup in3 integer_min exec_y (print_integer boolean_not exec_yankdup) integer_swap integer_swap exec_do*count (boolean_empty exec_if (integer_stackdepth exec_y () boolean_dup_times in3 exec_pop (integer_add boolean_invert_first_then_and) in2 boolean_shove exec_yank exec_y () exec_eq) (print_exec (tagged_467) exec_s () (exec_eq boolean_xor integer_dup_times integer_rot integer_rot boolean_flush exec_s_when_autoconstructing (exec_y_when_autoconstructing (boolean_pop 71 boolean_empty boolean_invert_second_then_and integer_gt exec_yankdup integer_inc exec_s () (integer_mod exec_dup_times (boolean_and integer_lt boolean_shove boolean_flush print_exec () in4 boolean_dup)) (boolean_invert_second_then_and boolean_and exec_pop (exec_y_when_autoconstructing (boolean_invert_second_then_and) boolean_swap exec_dup_times (integer_max exec_if (exec_do*count (exec_when (boolean_dup_items) boolean_invert_first_then_and boolean_and integer_stackdepth exec_s () (exec_swap () (exec_y_when_autoconstructing (boolean_stackdepth integer_add integer_sub integer_dec integer_yank integer_mult) exec_while (exec_k (exec_y_when_autoconstructing (boolean_swap boolean_stackdepth in2 integer_mult exec_y_when_autoconstructing (boolean_shove integer_yank) exec_yankdup)) ()))) ())) ()))))) () ()) ())))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 129
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction tagged_467} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Zero cases best program: (boolean_dup_times boolean_invert_second_then_and in2 integer_dup in3 integer_min exec_y (print_integer boolean_not exec_yankdup) integer_swap integer_swap exec_do*count (boolean_empty exec_if (integer_stackdepth exec_y () boolean_dup_times in3 exec_pop (integer_add boolean_invert_first_then_and) in2 boolean_shove exec_yank exec_y () exec_eq) (print_exec (tagged_467) exec_s () (exec_eq boolean_xor integer_dup_times integer_rot integer_rot boolean_flush exec_s_when_autoconstructing (exec_y_when_autoconstructing (boolean_pop 71 boolean_empty boolean_invert_second_then_and integer_gt exec_yankdup integer_inc exec_s () (integer_mod exec_dup_times (boolean_and integer_lt boolean_shove boolean_flush print_exec () in4 boolean_dup)) (boolean_invert_second_then_and boolean_and exec_pop (exec_y_when_autoconstructing (boolean_invert_second_then_and) boolean_swap exec_dup_times (integer_max exec_if (exec_do*count (exec_when (boolean_dup_items) boolean_invert_first_then_and boolean_and integer_stackdepth exec_s () (exec_swap () (exec_y_when_autoconstructing (boolean_stackdepth integer_add integer_sub integer_dec integer_yank integer_mult) exec_while (exec_k (exec_y_when_autoconstructing (boolean_swap boolean_stackdepth in2 integer_mult exec_y_when_autoconstructing (boolean_shove integer_yank) exec_yankdup)) ()))) ())) ()))))) () ()) ())))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 129
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (336 174 383 339 223 174 393 339 342 222)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (336 174 383 339 223 174 393 339 342 222)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction tagged_643} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_eq} {:close 1, :instruction tagged_467} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_exec_929} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup_times boolean_invert_second_then_and in2 tagged_643 boolean_pop in3 integer_min integer_fromboolean exec_y (integer_rot print_integer boolean_not exec_yankdup) integer_swap integer_swap exec_eq boolean_empty exec_if (integer_stackdepth exec_y () boolean_dup_times in3 exec_pop (integer_add boolean_invert_first_then_and) in2 boolean_shove integer_dup_times exec_eq) (tagged_467) integer_dup_times integer_rot exec_s (integer_rot boolean_flush exec_y_when_autoconstructing (71 boolean_empty boolean_and boolean_frominteger boolean_invert_second_then_and exec_yankdup integer_inc exec_s () (integer_mod exec_dup_times (boolean_and boolean_empty integer_lt boolean_shove boolean_flush print_integer boolean_dup)) (exec_dup_times (boolean_invert_second_then_and boolean_and boolean_dup_times exec_pop (exec_y_when_autoconstructing (boolean_invert_second_then_and) boolean_swap exec_dup_times (integer_max exec_if (exec_do*count (exec_when (boolean_dup_times boolean_invert_first_then_and tagged_341 integer_pop)) integer_dup_times exec_s () (exec_dup () exec_k_when_autoconstructing (exec_y_when_autoconstructing (integer_sub integer_dec exec_k (integer_mod integer_inc tag_exec_929 (exec_k (exec_y_when_autoconstructing (boolean_swap integer_yank integer_mult exec_y_when_autoconstructing (boolean_shove in1 integer_yank) exec_yankdup print_integer boolean_stackdepth)) ())) ())) ()) ()) ())))))) () ())
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 93
Size: 129
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 7.075
Median total errors in population: 6
Error averages by case: (0.664 0.826 0.617 0.661 0.777 0.826 0.607 0.661 0.658 0.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.199
Average program size in population (points): 131.899
Average percent parens in population: 0.301
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2844024
--- Timings ---
Current time: 1559594224352 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.2 seconds, 45.9%
Fitness Testing:      4.0 seconds, 35.3%
Report:               2.0 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -67                 | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -23                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: -13                
Correct output: 0                   | Program output: 33                 
Correct output: 79                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: 55                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 63                 
Correct output: 20                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 13                 
Correct output: 7                   | Program output: 24                 
Correct output: 29                  | Program output: 29                 
Correct output: 66                  | Program output: 66                 
Correct output: 44                  | Program output: 44                 
Correct output: 69                  | Program output: 69                 
Correct output: 46                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: -89                 | Program output: -65                
Correct output: -59                 | Program output: 44                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -20                
Correct output: -84                 | Program output: 55                 
Correct output: -91                 | Program output: -91                
Correct output: -10                 | Program output: -10                
Correct output: -75                 | Program output: 2                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -11                
Correct output: -81                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: 67                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -29                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: 9                  
Correct output: -26                 | Program output: -26                
Correct output: -55                 | Program output: -30                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -10                 | Program output: 61                 
Correct output: -81                 | Program output: -6                 
Correct output: -70                 | Program output: 33                 
Correct output: -75                 | Program output: 33                 
Correct output: -51                 | Program output: -30                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: -57                
Correct output: 25                  | Program output: 65                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -8                 
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -64                
Correct output: -60                 | Program output: 28                 
Correct output: -94                 | Program output: -91                
Correct output: -95                 | Program output: 57                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: -12                
Correct output: -86                 | Program output: -79                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -31                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -14                 | Program output: -14                
Correct output: -80                 | Program output: 42                 
Correct output: 11                  | Program output: 61                 
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_27} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 71} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_swap boolean_dup_times boolean_dup_times boolean_invert_second_then_and boolean_pop in1 boolean_swap integer_dup integer_min in3 integer_min integer_fromboolean print_integer exec_s (integer_dup_items) (boolean_not integer_swap) (in4 exec_flush integer_swap exec_do*count (boolean_empty exec_y () boolean_dup_times integer_dup_times integer_eq exec_pop (tag_integer_27 boolean_shove exec_y () print_exec (exec_s () (boolean_invert_second_then_and exec_eq integer_swap integer_flush) (exec_s (boolean_flush exec_flush) (exec_y_when_autoconstructing (71 boolean_and exec_do*range () exec_yankdup print_integer integer_mod boolean_and boolean_empty integer_lt boolean_flush print_exec () in4 integer_dup_times boolean_dup)) (boolean_invert_second_then_and boolean_and boolean_xor exec_pop (boolean_or integer_mult exec_do*times () exec_y_when_autoconstructing (boolean_swap integer_flush exec_dup_times (boolean_invert_second_then_and in4) exec_if (exec_do*count (exec_stackdepth boolean_invert_first_then_and tagged_341 integer_pop)) (exec_k_when_autoconstructing (exec_swap () (boolean_not)) (exec_y_when_autoconstructing (boolean_xor)) integer_sub print_integer integer_dec integer_yank integer_mod integer_dec boolean_eq exec_shove (boolean_pop) integer_inc exec_k (boolean_yankdup exec_y_when_autoconstructing (integer_yank exec_k_when_autoconstructing () (integer_mult integer_dup_items exec_y_when_autoconstructing (boolean_xor exec_swap (boolean_stackdepth) ())))) ()))))))))))
Lexicase best errors: [0 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 138
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_27} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 71} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_swap boolean_dup_times boolean_dup_times boolean_invert_second_then_and boolean_pop in1 boolean_swap integer_dup integer_min in3 integer_min integer_fromboolean print_integer exec_s (integer_dup_items) (boolean_not integer_swap) (in4 exec_flush integer_swap exec_do*count (boolean_empty exec_y () boolean_dup_times integer_dup_times integer_eq exec_pop (tag_integer_27 boolean_shove exec_y () print_exec (exec_s () (boolean_invert_second_then_and exec_eq integer_swap integer_flush) (exec_s (boolean_flush exec_flush) (exec_y_when_autoconstructing (71 boolean_and exec_do*range () exec_yankdup print_integer integer_mod boolean_and boolean_empty integer_lt boolean_flush print_exec () in4 integer_dup_times boolean_dup)) (boolean_invert_second_then_and boolean_and boolean_xor exec_pop (boolean_or integer_mult exec_do*times () exec_y_when_autoconstructing (boolean_swap integer_flush exec_dup_times (boolean_invert_second_then_and in4) exec_if (exec_do*count (exec_stackdepth boolean_invert_first_then_and tagged_341 integer_pop)) (exec_k_when_autoconstructing (exec_swap () (boolean_not)) (exec_y_when_autoconstructing (boolean_xor)) integer_sub print_integer integer_dec integer_yank integer_mod integer_dec boolean_eq exec_shove (boolean_pop) integer_inc exec_k (boolean_yankdup exec_y_when_autoconstructing (integer_yank exec_k_when_autoconstructing () (integer_mult integer_dup_items exec_y_when_autoconstructing (boolean_xor exec_swap (boolean_stackdepth) ())))) ()))))))))))
Zero cases best errors: [0 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 138
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (496 275 274 277 279 4 6 479 6 485)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (496 275 274 277 279 4 6 479 6 485)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tag_integer_27} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction 71} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_341} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction tagged_338} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_swap boolean_dup_times exec_dup_times (boolean_invert_second_then_and in1) integer_dup in3 integer_min integer_fromboolean print_integer boolean_not integer_swap in4 integer_swap boolean_empty exec_y () boolean_dup_times exec_do*times (integer_dup_times exec_pop (integer_add in2 tag_integer_27 boolean_shove exec_y () print_exec (integer_dup_times boolean_invert_second_then_and exec_eq) print_exec (exec_s () (boolean_invert_second_then_and exec_eq integer_dup_times exec_s (integer_fromboolean integer_pop boolean_swap) (boolean_flush exec_flush) (print_boolean 71 in3 integer_add boolean_empty exec_do*range () exec_yankdup print_integer integer_mod boolean_and boolean_empty integer_lt boolean_flush boolean_stackdepth print_exec () integer_pop integer_lte boolean_and) in4 integer_dup boolean_dup) () boolean_invert_second_then_and integer_dup_items) boolean_and boolean_xor exec_pop (exec_do*times () exec_noop) exec_y_when_autoconstructing (integer_dup boolean_swap integer_flush boolean_invert_second_then_and exec_yank in4) exec_when (exec_stackdepth integer_flush boolean_invert_first_then_and tagged_341 integer_pop)) exec_k_when_autoconstructing (exec_swap () (tagged_338 exec_y_when_autoconstructing (print_integer print_integer integer_dec print_exec (exec_k (integer_mod exec_shove (boolean_pop) boolean_invert_first_then_and exec_k (integer_yank integer_mult exec_y_when_autoconstructing (exec_swap (boolean_stackdepth) ())) ()) ())))) ()))
Errors: [0 0 0 0 0 1 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 100
Size: 134
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.419
Median total errors in population: 7
Error averages by case: (0.504 0.725 0.726 0.723 0.721 0.996 0.994 0.521 0.994 0.515)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 94.738
Average program size in population (points): 134.598
Average percent parens in population: 0.296
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3737595
--- Timings ---
Current time: 1559594227023 milliseconds
Total Time:          14.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.3 seconds, 44.7%
Fitness Testing:      4.9 seconds, 34.2%
Report:               2.9 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -67                 | Program output: -67                
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -23                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: 79                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: 55                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 24                 
Correct output: 37                  | Program output: 79                 
Correct output: 5                   | Program output: 67                 
Correct output: 20                  | Program output: 20                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 13                 
Correct output: 7                   | Program output: 24                 
Correct output: 29                  | Program output: 29                 
Correct output: 66                  | Program output: 66                 
Correct output: 44                  | Program output: 49                 
Correct output: 69                  | Program output: 89                 
Correct output: 46                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 59                 
Correct output: -89                 | Program output: -89                
Correct output: -59                 | Program output: 14                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -80                
Correct output: -89                 | Program output: 46                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -20                
Correct output: -84                 | Program output: -84                
Correct output: -91                 | Program output: -91                
Correct output: -10                 | Program output: 27                 
Correct output: -75                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: 8                  
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: 29                 
Correct output: -91                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -55                 | Program output: -55                
Correct output: -56                 | Program output: 12                 
Correct output: -12                 | Program output: -5                 
Correct output: -10                 | Program output: 90                 
Correct output: -81                 | Program output: -6                 
Correct output: -70                 | Program output: 33                 
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -15                
Correct output: -73                 | Program output: -47                
Correct output: -57                 | Program output: -57                
Correct output: 25                  | Program output: 25                 
Correct output: -73                 | Program output: -29                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -37                
Correct output: -91                 | Program output: -46                
Correct output: -51                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: 59                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -35                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -12                
Correct output: -86                 | Program output: -79                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 3                  
Correct output: -14                 | Program output: 27                 
Correct output: -80                 | Program output: 17                 
Correct output: 11                  | Program output: 15                 
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 2, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction tag_integer_27} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction tag_boolean_148} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_swap boolean_rot boolean_dup_times boolean_invert_second_then_and in3 integer_shove boolean_pop boolean_xor integer_flush exec_y_when_autoconstructing (in1) integer_dup in2 exec_k_when_autoconstructing (integer_min integer_fromboolean print_integer boolean_not boolean_rot integer_inc integer_swap) (in4 boolean_stackdepth exec_k_when_autoconstructing (integer_swap integer_lt boolean_dup_times in2 tag_integer_27 boolean_shove exec_y () exec_do*while (exec_eq) print_exec (exec_s () (exec_do*times (exec_eq integer_dup_times integer_dup_times) integer_flush) (exec_dup_times (integer_stackdepth exec_s (integer_rot in1 boolean_flush exec_flush) (exec_y_when_autoconstructing (71 boolean_empty exec_while ()) integer_rot exec_yankdup print_integer integer_mod boolean_empty print_exec () in3 integer_pop integer_stackdepth in4 boolean_dup) () print_newline boolean_and boolean_xor integer_gte exec_pop (boolean_xor exec_do*times () exec_y_when_autoconstructing () exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_not boolean_swap integer_flush exec_dup_times (boolean_invert_second_then_and in4) integer_div) (exec_if (exec_do*count (exec_when (exec_stackdepth exec_s_when_autoconstructing (integer_pop) () (integer_dup boolean_flush exec_swap () (exec_y_when_autoconstructing (boolean_pop) integer_sub print_integer integer_dec integer_yank exec_k (boolean_eq exec_shove (boolean_pop) integer_inc integer_yank integer_mult exec_swap (tag_boolean_148) (boolean_stackdepth)) ()))))) ()))))))) ()))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 146
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 2, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction tag_integer_27} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction tag_boolean_148} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_swap boolean_rot boolean_dup_times boolean_invert_second_then_and in3 integer_shove boolean_pop boolean_xor integer_flush exec_y_when_autoconstructing (in1) integer_dup in2 exec_k_when_autoconstructing (integer_min integer_fromboolean print_integer boolean_not boolean_rot integer_inc integer_swap) (in4 boolean_stackdepth exec_k_when_autoconstructing (integer_swap integer_lt boolean_dup_times in2 tag_integer_27 boolean_shove exec_y () exec_do*while (exec_eq) print_exec (exec_s () (exec_do*times (exec_eq integer_dup_times integer_dup_times) integer_flush) (exec_dup_times (integer_stackdepth exec_s (integer_rot in1 boolean_flush exec_flush) (exec_y_when_autoconstructing (71 boolean_empty exec_while ()) integer_rot exec_yankdup print_integer integer_mod boolean_empty print_exec () in3 integer_pop integer_stackdepth in4 boolean_dup) () print_newline boolean_and boolean_xor integer_gte exec_pop (boolean_xor exec_do*times () exec_y_when_autoconstructing () exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_not boolean_swap integer_flush exec_dup_times (boolean_invert_second_then_and in4) integer_div) (exec_if (exec_do*count (exec_when (exec_stackdepth exec_s_when_autoconstructing (integer_pop) () (integer_dup boolean_flush exec_swap () (exec_y_when_autoconstructing (boolean_pop) integer_sub print_integer integer_dec integer_yank exec_k (boolean_eq exec_shove (boolean_pop) integer_inc integer_yank integer_mult exec_swap (tag_boolean_148) (boolean_stackdepth)) ()))))) ()))))))) ()))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 146
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (405 700 409 423 507 182 210 399 181 408)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (405 700 409 423 507 182 210 399 181 408)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 2, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_637} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_while} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_swap boolean_dup_times integer_eq boolean_invert_second_then_and integer_pop integer_shove boolean_pop boolean_xor in1 integer_dup in2 integer_min tagged_637 integer_fromboolean print_integer integer_dup_items boolean_not integer_swap exec_swap (integer_swap exec_do*count (integer_lt exec_y () boolean_dup_times integer_dup_times integer_dup_items) exec_pop (boolean_rot boolean_frominteger integer_add integer_yank boolean_shove exec_y () exec_do*while (exec_eq) print_exec (exec_s () (in2) (boolean_invert_second_then_and integer_dup_times integer_flush) print_boolean exec_s_when_autoconstructing (exec_s (in1 boolean_and exec_flush) (exec_y_when_autoconstructing (print_boolean exec_while ()) exec_do*range () exec_yankdup exec_yankdup print_integer integer_mod boolean_and boolean_empty print_exec () in3 integer_pop integer_lt in4 boolean_dup) () integer_fromboolean integer_add exec_pop (boolean_xor exec_do*times () exec_k_when_autoconstructing (boolean_not print_boolean exec_dup_times (boolean_invert_second_then_and in4) exec_dup_items) (exec_do*count (boolean_dup_times boolean_invert_first_then_and integer_pop)) integer_dup print_integer exec_swap () (exec_y_when_autoconstructing (boolean_yank integer_sub print_integer integer_dec integer_yank boolean_eq boolean_eq exec_shove (boolean_or boolean_pop) integer_yank integer_mult exec_y_when_autoconstructing (exec_swap (boolean_stackdepth) ()))))) () ()))) ())
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 98
Size: 133
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.176
Median total errors in population: 7
Error averages by case: (0.595 0.3 0.591 0.577 0.493 0.818 0.79 0.601 0.819 0.592)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 99.336
Average program size in population (points): 135.991
Average percent parens in population: 0.269
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4664691
--- Timings ---
Current time: 1559594229676 milliseconds
Total Time:          16.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.5 seconds, 44.3%
Fitness Testing:      5.7 seconds, 33.8%
Report:               3.6 seconds, 21.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 211
Test mean error for best: 0.21100
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -67                 | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -23                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: -13                
Correct output: 0                   | Program output: 33                 
Correct output: 79                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: 55                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 29                  | Program output: 29                 
Correct output: 66                  | Program output: 66                 
Correct output: 44                  | Program output: 44                 
Correct output: 69                  | Program output: 69                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: -89                 | Program output: -65                
Correct output: -59                 | Program output: -59                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -10                 | Program output: -10                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -71                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: 9                  
Correct output: -26                 | Program output: -26                
Correct output: -55                 | Program output: -30                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -38                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: -57                
Correct output: 25                  | Program output: 44                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -64                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -91                
Correct output: -95                 | Program output: -14                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: -28                
Correct output: -86                 | Program output: -86                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -32                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -14                 | Program output: -14                
Correct output: -80                 | Program output: -80                
Correct output: 11                  | Program output: 11                 
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tag_integer_27} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_integer_897} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tagged_341} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction tag_integer_410} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_dup_times boolean_invert_first_then_and boolean_yank boolean_pop in1 boolean_invert_first_then_and in4 in3 integer_min integer_min integer_fromboolean print_integer integer_lte boolean_dup_items integer_dup_items boolean_not boolean_not integer_swap in4 integer_swap exec_do*count (boolean_empty integer_mod) integer_dup_times boolean_invert_second_then_and exec_k_when_autoconstructing (integer_add in2 tag_integer_27 exec_flush exec_y () integer_dup_times integer_swap print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush in1 boolean_swap) print_boolean 71 boolean_empty boolean_and exec_do*range () integer_yank) tag_integer_897 print_integer integer_mod integer_lt boolean_flush print_exec () boolean_dup) () boolean_invert_second_then_and boolean_xor exec_pop (boolean_yankdup exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap integer_flush exec_yankdup exec_dup_times (boolean_empty exec_do*count () exec_do*count (exec_when (boolean_and integer_add exec_stackdepth in2 tagged_341 boolean_dup_items exec_noop exec_k_when_autoconstructing (boolean_invert_first_then_and exec_swap () (integer_sub in2 print_integer tag_integer_410) integer_dec integer_yank exec_k (integer_mod exec_shove (boolean_pop) integer_inc exec_k (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult print_exec (integer_fromboolean) boolean_swap exec_swap (boolean_frominteger exec_k (boolean_eq boolean_stackdepth) ()) ())) ()) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 141
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tag_integer_27} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_integer_897} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction tagged_341} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction tag_integer_410} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_dup_times boolean_invert_first_then_and boolean_yank boolean_pop in1 boolean_invert_first_then_and in4 in3 integer_min integer_min integer_fromboolean print_integer integer_lte boolean_dup_items integer_dup_items boolean_not boolean_not integer_swap in4 integer_swap exec_do*count (boolean_empty integer_mod) integer_dup_times boolean_invert_second_then_and exec_k_when_autoconstructing (integer_add in2 tag_integer_27 exec_flush exec_y () integer_dup_times integer_swap print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush in1 boolean_swap) print_boolean 71 boolean_empty boolean_and exec_do*range () integer_yank) tag_integer_897 print_integer integer_mod integer_lt boolean_flush print_exec () boolean_dup) () boolean_invert_second_then_and boolean_xor exec_pop (boolean_yankdup exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap integer_flush exec_yankdup exec_dup_times (boolean_empty exec_do*count () exec_do*count (exec_when (boolean_and integer_add exec_stackdepth in2 tagged_341 boolean_dup_items exec_noop exec_k_when_autoconstructing (boolean_invert_first_then_and exec_swap () (integer_sub in2 print_integer tag_integer_410) integer_dec integer_yank exec_k (integer_mod exec_shove (boolean_pop) integer_inc exec_k (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult print_exec (integer_fromboolean) boolean_swap exec_swap (boolean_frominteger exec_k (boolean_eq boolean_stackdepth) ()) ())) ()) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 141
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 540 631 701 356 536 349 348 309 537)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (333 540 631 701 356 536 349 348 309 537)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction tag_integer_27} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction 71} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_integer_897} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*times} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_341} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_xor} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tag_boolean_148} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_800})
Best program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 102
Size: 132
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 5.36
Median total errors in population: 5
Error averages by case: (0.667 0.46 0.369 0.299 0.644 0.464 0.651 0.652 0.691 0.463)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 101.972
Average program size in population (points): 139.553
Average percent parens in population: 0.269
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5645511
--- Timings ---
Current time: 1559594232432 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.6 seconds, 44.0%
Fitness Testing:      6.6 seconds, 33.6%
Report:               4.2 seconds, 21.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 132


Auto-simplifying with starting size: 132
step: 0
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 500
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 1000
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 1500
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 2000
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 2500
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 3000
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 3500
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 4000
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 4500
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

step: 5000
program: (boolean_swap boolean_dup_times boolean_pop in1 in4 in3 integer_min integer_min integer_fromboolean print_integer integer_dup_items integer_dup_items boolean_yank boolean_empty integer_swap in4 integer_swap integer_lte exec_do*count (boolean_empty integer_mod) integer_add in2 tag_integer_27 boolean_shove exec_y () integer_gte print_exec (exec_s () (exec_eq integer_dup_times integer_flush) (integer_flush integer_mult integer_div boolean_swap) exec_eq) boolean_flush 71 boolean_empty exec_while () boolean_and exec_do*range () tag_integer_897 print_integer boolean_pop boolean_xor boolean_empty integer_mod integer_lt boolean_flush print_exec () integer_pop in4 boolean_dup boolean_pop boolean_invert_second_then_and exec_pop (exec_do*times () boolean_flush) exec_y_when_autoconstructing (boolean_invert_second_then_and) exec_stackdepth integer_swap boolean_swap exec_pop (integer_flush exec_yankdup boolean_invert_second_then_and in4) boolean_empty exec_do*count () exec_yank exec_do*count (exec_when (exec_stackdepth tagged_341 boolean_dup_items boolean_xor)) integer_pop exec_k_when_autoconstructing (print_boolean integer_sub print_integer integer_yank exec_k (integer_mod exec_yankdup exec_shove (integer_mod) exec_if (exec_y_when_autoconstructing (exec_dup () boolean_swap integer_yank integer_mult exec_swap (boolean_frominteger tag_boolean_148) (exec_k (boolean_stackdepth tag_boolean_800) ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 132

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 211
Test mean error for best: 0.21100
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -67                 | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -23                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: -13                
Correct output: 0                   | Program output: 33                 
Correct output: 79                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: 55                  | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: 44                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 26                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 29                  | Program output: 29                 
Correct output: 66                  | Program output: 66                 
Correct output: 44                  | Program output: 44                 
Correct output: 69                  | Program output: 69                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: -89                 | Program output: -65                
Correct output: -59                 | Program output: -59                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -10                 | Program output: -10                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -71                
Correct output: 1                   | Program output: 1                  
Correct output: -56                 | Program output: 9                  
Correct output: -26                 | Program output: -26                
Correct output: -55                 | Program output: -30                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -38                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -57                 | Program output: -57                
Correct output: 25                  | Program output: 44                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -64                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -91                
Correct output: -95                 | Program output: -14                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: -28                
Correct output: -86                 | Program output: -86                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -32                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -14                 | Program output: -14                
Correct output: -80                 | Program output: -80                
Correct output: 11                  | Program output: 11                 
Correct output: -83                 | Program output: -83                
;;******************************
