Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -4 -58 -4] -58] [[80 0 0 0] 0] [[6 6 6 57] 6] [[-55 -74 -74 -74] -74] [[-80 -80 -80 -29] -80] [[-98 89 89 89] -98] [[-2 -52 -2 -2] -52] [[53 24 24 24] 24] [[91 20 91 91] 20] [[-57 -57 -57 -11] -57] [(26 26 26 26) 26] [(-15 -15 -15 -15) -15] [(54 54 54 54) 54] [(76 76 76 76) 76] [(61 61 61 61) 61] [(26 0 91 2) 0] [(16 22 43 95) 16] [(97 65 50 44) 44] [(89 24 84 52) 24] [(83 79 55 95) 55] [(75 31 37 2) 2] [(89 9 55 46) 9] [(54 22 81 72) 22] [(45 5 99 95) 5] [(27 90 51 54) 27] [(60 55 92 100) 55] [(82 82 5 49) 5] [(66 44 65 98) 44] [(88 30 39 56) 30] [(26 43 78 8) 8] [(41 88 93 41) 41] [(37 22 37 66) 22] [(64 42 1 88) 1] [(46 33 13 87) 13] [(26 90 72 54) 26] [(-37 -63 37 -95) -95] [(41 -79 90 53) -79] [(16 32 91 37) 16] [(1 -12 -67 -27) -67] [(24 38 -84 -65) -84] [(-25 59 -16 41) -25] [(33 29 -20 -8) -20] [(7 -95 -2 -80) -95] [(-86 -91 15 -68) -91] [(-51 8 -7 -31) -51] [(100 39 -3 10) -3] [(35 63 -96 31) -96] [(-9 10 26 22) -9] [(67 -12 27 12) -12] [(-17 46 9 -11) -17] [(17 53 72 -82) -82] [(-8 -78 -6 -100) -100] [(88 90 3 4) 3] [(-71 -36 -83 47) -83] [(-81 -74 -90 -88) -90] [(-90 7 -28 64) -90] [(-25 -55 -28 -27) -55] [(-77 84 -18 40) -77] [(-98 -93 20 -61) -98] [(17 -86 -37 -70) -86] [(-53 11 35 5) -53] [(3 -28 89 76) -28] [(-26 61 -46 -30) -46] [(-68 -80 -98 -96) -98] [(-72 -84 10 77) -84] [(13 20 48 39) 13] [(-91 67 -79 -37) -91] [(-98 -14 -21 10) -98] [(89 -27 98 -63) -63] [(-30 79 12 -5) -30] [(85 19 19 -51) -51] [(-27 39 -17 -87) -87] [(-81 -13 100 87) -81] [(98 90 -46 81) -46] [(-32 19 -4 58) -32] [(-84 0 -60 -4) -84] [(-64 -75 -18 96) -75] [(14 0 -58 -57) -58] [(18 -46 48 45) -46] [(78 76 65 -93) -93] [(-62 66 -8 67) -62] [(31 24 21 36) 21] [(34 -83 -32 7) -83] [(-44 69 99 91) -44] [(-99 1 30 36) -99] [(-42 -28 56 -99) -99] [(-24 -33 -87 -29) -87] [(-23 -1 -48 -2) -48] [(-8 -46 -1 97) -46] [(-14 -64 -19 -80) -80] [(13 -72 34 -98) -98] [(-64 -83 45 -60) -83] [(62 -95 98 69) -95] [(39 -24 -81 -23) -81] [(7 94 -68 -86) -86])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-4 -4 -58 -4] -58]
Train Case:   6 | Input/Output: [[80 0 0 0] 0]
Train Case:   7 | Input/Output: [[6 6 6 57] 6]
Train Case:   8 | Input/Output: [[-55 -74 -74 -74] -74]
Train Case:   9 | Input/Output: [[-80 -80 -80 -29] -80]
Train Case:  10 | Input/Output: [[-98 89 89 89] -98]
Train Case:  11 | Input/Output: [[-2 -52 -2 -2] -52]
Train Case:  12 | Input/Output: [[53 24 24 24] 24]
Train Case:  13 | Input/Output: [[91 20 91 91] 20]
Train Case:  14 | Input/Output: [[-57 -57 -57 -11] -57]
Train Case:  15 | Input/Output: [(26 26 26 26) 26]
Train Case:  16 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  17 | Input/Output: [(54 54 54 54) 54]
Train Case:  18 | Input/Output: [(76 76 76 76) 76]
Train Case:  19 | Input/Output: [(61 61 61 61) 61]
Train Case:  20 | Input/Output: [(26 0 91 2) 0]
Train Case:  21 | Input/Output: [(16 22 43 95) 16]
Train Case:  22 | Input/Output: [(97 65 50 44) 44]
Train Case:  23 | Input/Output: [(89 24 84 52) 24]
Train Case:  24 | Input/Output: [(83 79 55 95) 55]
Train Case:  25 | Input/Output: [(75 31 37 2) 2]
Train Case:  26 | Input/Output: [(89 9 55 46) 9]
Train Case:  27 | Input/Output: [(54 22 81 72) 22]
Train Case:  28 | Input/Output: [(45 5 99 95) 5]
Train Case:  29 | Input/Output: [(27 90 51 54) 27]
Train Case:  30 | Input/Output: [(60 55 92 100) 55]
Train Case:  31 | Input/Output: [(82 82 5 49) 5]
Train Case:  32 | Input/Output: [(66 44 65 98) 44]
Train Case:  33 | Input/Output: [(88 30 39 56) 30]
Train Case:  34 | Input/Output: [(26 43 78 8) 8]
Train Case:  35 | Input/Output: [(41 88 93 41) 41]
Train Case:  36 | Input/Output: [(37 22 37 66) 22]
Train Case:  37 | Input/Output: [(64 42 1 88) 1]
Train Case:  38 | Input/Output: [(46 33 13 87) 13]
Train Case:  39 | Input/Output: [(26 90 72 54) 26]
Train Case:  40 | Input/Output: [(-37 -63 37 -95) -95]
Train Case:  41 | Input/Output: [(41 -79 90 53) -79]
Train Case:  42 | Input/Output: [(16 32 91 37) 16]
Train Case:  43 | Input/Output: [(1 -12 -67 -27) -67]
Train Case:  44 | Input/Output: [(24 38 -84 -65) -84]
Train Case:  45 | Input/Output: [(-25 59 -16 41) -25]
Train Case:  46 | Input/Output: [(33 29 -20 -8) -20]
Train Case:  47 | Input/Output: [(7 -95 -2 -80) -95]
Train Case:  48 | Input/Output: [(-86 -91 15 -68) -91]
Train Case:  49 | Input/Output: [(-51 8 -7 -31) -51]
Train Case:  50 | Input/Output: [(100 39 -3 10) -3]
Train Case:  51 | Input/Output: [(35 63 -96 31) -96]
Train Case:  52 | Input/Output: [(-9 10 26 22) -9]
Train Case:  53 | Input/Output: [(67 -12 27 12) -12]
Train Case:  54 | Input/Output: [(-17 46 9 -11) -17]
Train Case:  55 | Input/Output: [(17 53 72 -82) -82]
Train Case:  56 | Input/Output: [(-8 -78 -6 -100) -100]
Train Case:  57 | Input/Output: [(88 90 3 4) 3]
Train Case:  58 | Input/Output: [(-71 -36 -83 47) -83]
Train Case:  59 | Input/Output: [(-81 -74 -90 -88) -90]
Train Case:  60 | Input/Output: [(-90 7 -28 64) -90]
Train Case:  61 | Input/Output: [(-25 -55 -28 -27) -55]
Train Case:  62 | Input/Output: [(-77 84 -18 40) -77]
Train Case:  63 | Input/Output: [(-98 -93 20 -61) -98]
Train Case:  64 | Input/Output: [(17 -86 -37 -70) -86]
Train Case:  65 | Input/Output: [(-53 11 35 5) -53]
Train Case:  66 | Input/Output: [(3 -28 89 76) -28]
Train Case:  67 | Input/Output: [(-26 61 -46 -30) -46]
Train Case:  68 | Input/Output: [(-68 -80 -98 -96) -98]
Train Case:  69 | Input/Output: [(-72 -84 10 77) -84]
Train Case:  70 | Input/Output: [(13 20 48 39) 13]
Train Case:  71 | Input/Output: [(-91 67 -79 -37) -91]
Train Case:  72 | Input/Output: [(-98 -14 -21 10) -98]
Train Case:  73 | Input/Output: [(89 -27 98 -63) -63]
Train Case:  74 | Input/Output: [(-30 79 12 -5) -30]
Train Case:  75 | Input/Output: [(85 19 19 -51) -51]
Train Case:  76 | Input/Output: [(-27 39 -17 -87) -87]
Train Case:  77 | Input/Output: [(-81 -13 100 87) -81]
Train Case:  78 | Input/Output: [(98 90 -46 81) -46]
Train Case:  79 | Input/Output: [(-32 19 -4 58) -32]
Train Case:  80 | Input/Output: [(-84 0 -60 -4) -84]
Train Case:  81 | Input/Output: [(-64 -75 -18 96) -75]
Train Case:  82 | Input/Output: [(14 0 -58 -57) -58]
Train Case:  83 | Input/Output: [(18 -46 48 45) -46]
Train Case:  84 | Input/Output: [(78 76 65 -93) -93]
Train Case:  85 | Input/Output: [(-62 66 -8 67) -62]
Train Case:  86 | Input/Output: [(31 24 21 36) 21]
Train Case:  87 | Input/Output: [(34 -83 -32 7) -83]
Train Case:  88 | Input/Output: [(-44 69 99 91) -44]
Train Case:  89 | Input/Output: [(-99 1 30 36) -99]
Train Case:  90 | Input/Output: [(-42 -28 56 -99) -99]
Train Case:  91 | Input/Output: [(-24 -33 -87 -29) -87]
Train Case:  92 | Input/Output: [(-23 -1 -48 -2) -48]
Train Case:  93 | Input/Output: [(-8 -46 -1 97) -46]
Train Case:  94 | Input/Output: [(-14 -64 -19 -80) -80]
Train Case:  95 | Input/Output: [(13 -72 34 -98) -98]
Train Case:  96 | Input/Output: [(-64 -83 45 -60) -83]
Train Case:  97 | Input/Output: [(62 -95 98 69) -95]
Train Case:  98 | Input/Output: [(39 -24 -81 -23) -81]
Train Case:  99 | Input/Output: [(7 94 -68 -86) -86]
Test Case:   0 | Input/Output: [[-27 -27 -32 -27] -32]
Test Case:   1 | Input/Output: [[-68 -32 -32 -32] -68]
Test Case:   2 | Input/Output: [[69 69 -52 69] -52]
Test Case:   3 | Input/Output: [[61 61 61 -65] -65]
Test Case:   4 | Input/Output: [[37 68 68 68] 37]
Test Case:   5 | Input/Output: [[-8 5 -8 -8] -8]
Test Case:   6 | Input/Output: [[9 9 9 -88] -88]
Test Case:   7 | Input/Output: [[-9 -83 -83 -83] -83]
Test Case:   8 | Input/Output: [[67 67 67 -43] -43]
Test Case:   9 | Input/Output: [[13 61 13 13] 13]
Test Case:  10 | Input/Output: [[77 80 77 77] 77]
Test Case:  11 | Input/Output: [[-72 -69 -72 -72] -72]
Test Case:  12 | Input/Output: [[43 -9 -9 -9] -9]
Test Case:  13 | Input/Output: [[41 -44 -44 -44] -44]
Test Case:  14 | Input/Output: [[21 -3 -3 -3] -3]
Test Case:  15 | Input/Output: [[-99 -99 -99 -67] -99]
Test Case:  16 | Input/Output: [[-82 -82 -82 -82] -82]
Test Case:  17 | Input/Output: [[-3 61 61 61] -3]
Test Case:  18 | Input/Output: [[24 24 -90 24] -90]
Test Case:  19 | Input/Output: [[-65 -65 -65 95] -65]
Test Case:  20 | Input/Output: [[-50 60 -50 -50] -50]
Test Case:  21 | Input/Output: [[-46 5 5 5] -46]
Test Case:  22 | Input/Output: [[-55 71 -55 -55] -55]
Test Case:  23 | Input/Output: [[57 68 57 57] 57]
Test Case:  24 | Input/Output: [[4 -17 4 4] -17]
Test Case:  25 | Input/Output: [[2 97 2 2] 2]
Test Case:  26 | Input/Output: [[-24 6 -24 -24] -24]
Test Case:  27 | Input/Output: [[-1 58 -1 -1] -1]
Test Case:  28 | Input/Output: [[27 27 27 -34] -34]
Test Case:  29 | Input/Output: [[50 73 73 73] 50]
Test Case:  30 | Input/Output: [[-11 25 25 25] -11]
Test Case:  31 | Input/Output: [[-22 -88 -22 -22] -88]
Test Case:  32 | Input/Output: [[74 74 82 74] 74]
Test Case:  33 | Input/Output: [[-28 69 69 69] -28]
Test Case:  34 | Input/Output: [[5 33 5 5] 5]
Test Case:  35 | Input/Output: [[-80 -46 -46 -46] -80]
Test Case:  36 | Input/Output: [[-67 -52 -52 -52] -67]
Test Case:  37 | Input/Output: [[-43 -32 -32 -32] -43]
Test Case:  38 | Input/Output: [[-99 11 -99 -99] -99]
Test Case:  39 | Input/Output: [[-68 -68 -68 91] -68]
Test Case:  40 | Input/Output: [[-97 -97 -90 -97] -97]
Test Case:  41 | Input/Output: [[-88 -88 -88 -33] -88]
Test Case:  42 | Input/Output: [[-78 33 33 33] -78]
Test Case:  43 | Input/Output: [[-94 28 28 28] -94]
Test Case:  44 | Input/Output: [[-83 -72 -83 -83] -83]
Test Case:  45 | Input/Output: [[53 53 53 -22] -22]
Test Case:  46 | Input/Output: [[-52 -52 -84 -52] -84]
Test Case:  47 | Input/Output: [[17 17 -14 17] -14]
Test Case:  48 | Input/Output: [[46 46 46 74] 46]
Test Case:  49 | Input/Output: [[16 16 16 67] 16]
Test Case:  50 | Input/Output: [[100 100 60 100] 60]
Test Case:  51 | Input/Output: [[94 94 -31 94] -31]
Test Case:  52 | Input/Output: [[-10 -10 -10 -33] -33]
Test Case:  53 | Input/Output: [[-9 65 65 65] -9]
Test Case:  54 | Input/Output: [[-62 -62 -62 60] -62]
Test Case:  55 | Input/Output: [[13 -80 -80 -80] -80]
Test Case:  56 | Input/Output: [[-89 -89 -89 -95] -95]
Test Case:  57 | Input/Output: [[3 3 3 76] 3]
Test Case:  58 | Input/Output: [[95 96 96 96] 95]
Test Case:  59 | Input/Output: [[71 85 85 85] 71]
Test Case:  60 | Input/Output: [[-88 94 94 94] -88]
Test Case:  61 | Input/Output: [[36 -23 36 36] -23]
Test Case:  62 | Input/Output: [[20 19 19 19] 19]
Test Case:  63 | Input/Output: [[5 5 -98 5] -98]
Test Case:  64 | Input/Output: [[79 79 35 79] 35]
Test Case:  65 | Input/Output: [[-23 -73 -23 -23] -73]
Test Case:  66 | Input/Output: [[-62 -92 -62 -62] -92]
Test Case:  67 | Input/Output: [[19 19 19 -19] -19]
Test Case:  68 | Input/Output: [[-49 -49 -49 -50] -50]
Test Case:  69 | Input/Output: [[53 53 53 24] 24]
Test Case:  70 | Input/Output: [[-38 -38 -21 -38] -38]
Test Case:  71 | Input/Output: [[83 83 13 83] 13]
Test Case:  72 | Input/Output: [[-39 55 -39 -39] -39]
Test Case:  73 | Input/Output: [[-30 -30 45 -30] -30]
Test Case:  74 | Input/Output: [[-33 -57 -57 -57] -57]
Test Case:  75 | Input/Output: [[47 47 38 47] 38]
Test Case:  76 | Input/Output: [[56 26 56 56] 26]
Test Case:  77 | Input/Output: [[-97 8 -97 -97] -97]
Test Case:  78 | Input/Output: [[-58 -58 -58 -91] -91]
Test Case:  79 | Input/Output: [[-31 -31 -31 -52] -52]
Test Case:  80 | Input/Output: [[-79 -79 -62 -79] -79]
Test Case:  81 | Input/Output: [[-58 -48 -48 -48] -58]
Test Case:  82 | Input/Output: [[-9 -9 -9 16] -9]
Test Case:  83 | Input/Output: [[-87 -87 -98 -87] -98]
Test Case:  84 | Input/Output: [[-26 -26 -26 4] -26]
Test Case:  85 | Input/Output: [[-81 -81 43 -81] -81]
Test Case:  86 | Input/Output: [[-98 -98 -98 -78] -98]
Test Case:  87 | Input/Output: [[-11 50 -11 -11] -11]
Test Case:  88 | Input/Output: [[-2 14 -2 -2] -2]
Test Case:  89 | Input/Output: [[60 60 -50 60] -50]
Test Case:  90 | Input/Output: [[-70 -63 -63 -63] -70]
Test Case:  91 | Input/Output: [[-60 66 -60 -60] -60]
Test Case:  92 | Input/Output: [[-55 -55 -55 56] -55]
Test Case:  93 | Input/Output: [[-28 -28 -28 -38] -38]
Test Case:  94 | Input/Output: [[37 -49 37 37] -49]
Test Case:  95 | Input/Output: [[83 83 83 96] 83]
Test Case:  96 | Input/Output: [[-65 -65 -65 -38] -65]
Test Case:  97 | Input/Output: [[-23 -24 -23 -23] -24]
Test Case:  98 | Input/Output: [[-57 -57 11 -57] -57]
Test Case:  99 | Input/Output: [[-10 -10 -10 50] -10]
Test Case: 100 | Input/Output: [(68 68 68 68) 68]
Test Case: 101 | Input/Output: [(91 91 91 91) 91]
Test Case: 102 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 103 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 104 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 105 | Input/Output: [(4 4 4 4) 4]
Test Case: 106 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 107 | Input/Output: [(27 27 27 27) 27]
Test Case: 108 | Input/Output: [(25 25 25 25) 25]
Test Case: 109 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 110 | Input/Output: [(25 25 25 25) 25]
Test Case: 111 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 112 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 113 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 114 | Input/Output: [(79 79 79 79) 79]
Test Case: 115 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 116 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 117 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 118 | Input/Output: [(19 19 19 19) 19]
Test Case: 119 | Input/Output: [(11 11 11 11) 11]
Test Case: 120 | Input/Output: [(81 81 81 81) 81]
Test Case: 121 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 122 | Input/Output: [(92 92 92 92) 92]
Test Case: 123 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 124 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 125 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 126 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 127 | Input/Output: [(32 32 32 32) 32]
Test Case: 128 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 129 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 130 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 131 | Input/Output: [(5 5 5 5) 5]
Test Case: 132 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 133 | Input/Output: [(42 42 42 42) 42]
Test Case: 134 | Input/Output: [(55 55 55 55) 55]
Test Case: 135 | Input/Output: [(3 3 3 3) 3]
Test Case: 136 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 137 | Input/Output: [(19 19 19 19) 19]
Test Case: 138 | Input/Output: [(47 47 47 47) 47]
Test Case: 139 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 140 | Input/Output: [(6 6 6 6) 6]
Test Case: 141 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 142 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 143 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 144 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 145 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 146 | Input/Output: [(76 76 76 76) 76]
Test Case: 147 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 148 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 149 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 150 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 151 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 152 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 153 | Input/Output: [(27 27 27 27) 27]
Test Case: 154 | Input/Output: [(4 4 4 4) 4]
Test Case: 155 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 156 | Input/Output: [(13 13 13 13) 13]
Test Case: 157 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 158 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 159 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 160 | Input/Output: [(1 1 1 1) 1]
Test Case: 161 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 162 | Input/Output: [(89 89 89 89) 89]
Test Case: 163 | Input/Output: [(53 53 53 53) 53]
Test Case: 164 | Input/Output: [(31 31 31 31) 31]
Test Case: 165 | Input/Output: [(3 3 3 3) 3]
Test Case: 166 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 167 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 168 | Input/Output: [(7 7 7 7) 7]
Test Case: 169 | Input/Output: [(100 100 100 100) 100]
Test Case: 170 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 171 | Input/Output: [(94 94 94 94) 94]
Test Case: 172 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 173 | Input/Output: [(0 0 0 0) 0]
Test Case: 174 | Input/Output: [(14 14 14 14) 14]
Test Case: 175 | Input/Output: [(17 17 17 17) 17]
Test Case: 176 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 177 | Input/Output: [(91 91 91 91) 91]
Test Case: 178 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 179 | Input/Output: [(73 73 73 73) 73]
Test Case: 180 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 181 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 182 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 183 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 184 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 185 | Input/Output: [(42 42 42 42) 42]
Test Case: 186 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 187 | Input/Output: [(4 4 4 4) 4]
Test Case: 188 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 189 | Input/Output: [(84 84 84 84) 84]
Test Case: 190 | Input/Output: [(5 5 5 5) 5]
Test Case: 191 | Input/Output: [(89 89 89 89) 89]
Test Case: 192 | Input/Output: [(64 64 64 64) 64]
Test Case: 193 | Input/Output: [(82 82 82 82) 82]
Test Case: 194 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 195 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 196 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 197 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 198 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 199 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 200 | Input/Output: [(17 38 46 79) 17]
Test Case: 201 | Input/Output: [(10 4 66 86) 4]
Test Case: 202 | Input/Output: [(5 73 93 28) 5]
Test Case: 203 | Input/Output: [(91 1 81 3) 1]
Test Case: 204 | Input/Output: [(32 29 96 11) 11]
Test Case: 205 | Input/Output: [(65 23 30 12) 12]
Test Case: 206 | Input/Output: [(95 88 64 19) 19]
Test Case: 207 | Input/Output: [(71 40 46 95) 40]
Test Case: 208 | Input/Output: [(41 100 16 23) 16]
Test Case: 209 | Input/Output: [(89 85 27 88) 27]
Test Case: 210 | Input/Output: [(52 92 8 35) 8]
Test Case: 211 | Input/Output: [(36 90 9 44) 9]
Test Case: 212 | Input/Output: [(19 20 5 92) 5]
Test Case: 213 | Input/Output: [(59 87 77 44) 44]
Test Case: 214 | Input/Output: [(14 54 8 10) 8]
Test Case: 215 | Input/Output: [(52 25 79 21) 21]
Test Case: 216 | Input/Output: [(21 36 48 0) 0]
Test Case: 217 | Input/Output: [(2 68 73 89) 2]
Test Case: 218 | Input/Output: [(44 93 28 75) 28]
Test Case: 219 | Input/Output: [(66 8 99 25) 8]
Test Case: 220 | Input/Output: [(4 7 36 32) 4]
Test Case: 221 | Input/Output: [(64 97 73 79) 64]
Test Case: 222 | Input/Output: [(74 36 48 93) 36]
Test Case: 223 | Input/Output: [(51 94 61 45) 45]
Test Case: 224 | Input/Output: [(25 90 19 59) 19]
Test Case: 225 | Input/Output: [(76 46 35 7) 7]
Test Case: 226 | Input/Output: [(10 94 16 65) 10]
Test Case: 227 | Input/Output: [(95 36 33 99) 33]
Test Case: 228 | Input/Output: [(75 36 39 20) 20]
Test Case: 229 | Input/Output: [(12 80 76 35) 12]
Test Case: 230 | Input/Output: [(12 64 48 59) 12]
Test Case: 231 | Input/Output: [(41 68 98 60) 41]
Test Case: 232 | Input/Output: [(57 49 34 6) 6]
Test Case: 233 | Input/Output: [(69 57 49 25) 25]
Test Case: 234 | Input/Output: [(48 82 43 79) 43]
Test Case: 235 | Input/Output: [(69 60 87 26) 26]
Test Case: 236 | Input/Output: [(95 19 93 46) 19]
Test Case: 237 | Input/Output: [(20 41 12 85) 12]
Test Case: 238 | Input/Output: [(94 46 97 44) 44]
Test Case: 239 | Input/Output: [(49 56 5 55) 5]
Test Case: 240 | Input/Output: [(55 41 97 11) 11]
Test Case: 241 | Input/Output: [(2 63 35 98) 2]
Test Case: 242 | Input/Output: [(94 62 44 9) 9]
Test Case: 243 | Input/Output: [(97 93 68 11) 11]
Test Case: 244 | Input/Output: [(47 68 51 96) 47]
Test Case: 245 | Input/Output: [(20 4 59 78) 4]
Test Case: 246 | Input/Output: [(75 95 41 79) 41]
Test Case: 247 | Input/Output: [(34 49 55 62) 34]
Test Case: 248 | Input/Output: [(0 18 40 35) 0]
Test Case: 249 | Input/Output: [(82 72 82 25) 25]
Test Case: 250 | Input/Output: [(100 54 80 59) 54]
Test Case: 251 | Input/Output: [(53 56 22 61) 22]
Test Case: 252 | Input/Output: [(33 45 61 94) 33]
Test Case: 253 | Input/Output: [(73 23 56 81) 23]
Test Case: 254 | Input/Output: [(64 4 54 51) 4]
Test Case: 255 | Input/Output: [(62 78 32 80) 32]
Test Case: 256 | Input/Output: [(16 35 8 49) 8]
Test Case: 257 | Input/Output: [(5 10 95 10) 5]
Test Case: 258 | Input/Output: [(79 20 97 85) 20]
Test Case: 259 | Input/Output: [(4 25 28 59) 4]
Test Case: 260 | Input/Output: [(21 16 69 46) 16]
Test Case: 261 | Input/Output: [(45 68 88 69) 45]
Test Case: 262 | Input/Output: [(53 53 97 23) 23]
Test Case: 263 | Input/Output: [(58 74 54 85) 54]
Test Case: 264 | Input/Output: [(43 65 78 32) 32]
Test Case: 265 | Input/Output: [(60 97 40 5) 5]
Test Case: 266 | Input/Output: [(29 69 39 52) 29]
Test Case: 267 | Input/Output: [(52 72 77 66) 52]
Test Case: 268 | Input/Output: [(6 91 48 60) 6]
Test Case: 269 | Input/Output: [(91 87 13 64) 13]
Test Case: 270 | Input/Output: [(82 18 20 89) 18]
Test Case: 271 | Input/Output: [(83 56 28 85) 28]
Test Case: 272 | Input/Output: [(48 26 74 47) 26]
Test Case: 273 | Input/Output: [(46 6 62 60) 6]
Test Case: 274 | Input/Output: [(30 18 38 63) 18]
Test Case: 275 | Input/Output: [(59 12 10 2) 2]
Test Case: 276 | Input/Output: [(15 89 74 45) 15]
Test Case: 277 | Input/Output: [(7 29 71 36) 7]
Test Case: 278 | Input/Output: [(61 47 83 8) 8]
Test Case: 279 | Input/Output: [(74 33 59 36) 33]
Test Case: 280 | Input/Output: [(6 17 16 77) 6]
Test Case: 281 | Input/Output: [(11 51 74 20) 11]
Test Case: 282 | Input/Output: [(72 37 84 37) 37]
Test Case: 283 | Input/Output: [(93 89 25 72) 25]
Test Case: 284 | Input/Output: [(88 9 60 97) 9]
Test Case: 285 | Input/Output: [(43 5 18 73) 5]
Test Case: 286 | Input/Output: [(29 37 61 81) 29]
Test Case: 287 | Input/Output: [(52 63 79 16) 16]
Test Case: 288 | Input/Output: [(90 24 41 29) 24]
Test Case: 289 | Input/Output: [(59 9 83 90) 9]
Test Case: 290 | Input/Output: [(78 29 14 31) 14]
Test Case: 291 | Input/Output: [(96 51 2 32) 2]
Test Case: 292 | Input/Output: [(70 62 91 99) 62]
Test Case: 293 | Input/Output: [(56 96 90 93) 56]
Test Case: 294 | Input/Output: [(82 77 32 18) 18]
Test Case: 295 | Input/Output: [(75 74 82 89) 74]
Test Case: 296 | Input/Output: [(24 80 31 86) 24]
Test Case: 297 | Input/Output: [(58 87 2 64) 2]
Test Case: 298 | Input/Output: [(87 84 70 9) 9]
Test Case: 299 | Input/Output: [(71 32 83 100) 32]
Test Case: 300 | Input/Output: [(55 99 23 71) 23]
Test Case: 301 | Input/Output: [(29 99 75 93) 29]
Test Case: 302 | Input/Output: [(6 40 52 11) 6]
Test Case: 303 | Input/Output: [(95 64 69 41) 41]
Test Case: 304 | Input/Output: [(98 37 69 82) 37]
Test Case: 305 | Input/Output: [(95 63 67 13) 13]
Test Case: 306 | Input/Output: [(47 82 53 55) 47]
Test Case: 307 | Input/Output: [(0 70 70 38) 0]
Test Case: 308 | Input/Output: [(22 68 72 52) 22]
Test Case: 309 | Input/Output: [(92 19 73 40) 19]
Test Case: 310 | Input/Output: [(48 90 9 18) 9]
Test Case: 311 | Input/Output: [(34 17 7 48) 7]
Test Case: 312 | Input/Output: [(71 83 21 40) 21]
Test Case: 313 | Input/Output: [(37 61 62 77) 37]
Test Case: 314 | Input/Output: [(76 71 90 83) 71]
Test Case: 315 | Input/Output: [(100 47 23 44) 23]
Test Case: 316 | Input/Output: [(79 90 94 88) 79]
Test Case: 317 | Input/Output: [(58 91 44 9) 9]
Test Case: 318 | Input/Output: [(39 83 82 13) 13]
Test Case: 319 | Input/Output: [(79 88 96 62) 62]
Test Case: 320 | Input/Output: [(87 63 50 60) 50]
Test Case: 321 | Input/Output: [(85 46 12 82) 12]
Test Case: 322 | Input/Output: [(12 100 73 74) 12]
Test Case: 323 | Input/Output: [(59 71 53 79) 53]
Test Case: 324 | Input/Output: [(22 27 39 88) 22]
Test Case: 325 | Input/Output: [(96 3 20 73) 3]
Test Case: 326 | Input/Output: [(82 21 68 37) 21]
Test Case: 327 | Input/Output: [(39 59 26 51) 26]
Test Case: 328 | Input/Output: [(68 90 31 18) 18]
Test Case: 329 | Input/Output: [(71 3 16 82) 3]
Test Case: 330 | Input/Output: [(16 67 36 60) 16]
Test Case: 331 | Input/Output: [(35 43 11 7) 7]
Test Case: 332 | Input/Output: [(1 11 61 13) 1]
Test Case: 333 | Input/Output: [(52 61 82 33) 33]
Test Case: 334 | Input/Output: [(15 80 4 67) 4]
Test Case: 335 | Input/Output: [(22 79 20 63) 20]
Test Case: 336 | Input/Output: [(9 59 42 37) 9]
Test Case: 337 | Input/Output: [(76 6 50 40) 6]
Test Case: 338 | Input/Output: [(16 38 88 40) 16]
Test Case: 339 | Input/Output: [(34 34 34 33) 33]
Test Case: 340 | Input/Output: [(12 14 73 25) 12]
Test Case: 341 | Input/Output: [(85 38 9 24) 9]
Test Case: 342 | Input/Output: [(88 26 35 88) 26]
Test Case: 343 | Input/Output: [(54 63 95 0) 0]
Test Case: 344 | Input/Output: [(74 54 87 46) 46]
Test Case: 345 | Input/Output: [(47 29 30 58) 29]
Test Case: 346 | Input/Output: [(49 80 96 82) 49]
Test Case: 347 | Input/Output: [(73 93 34 92) 34]
Test Case: 348 | Input/Output: [(95 47 9 71) 9]
Test Case: 349 | Input/Output: [(13 20 59 87) 13]
Test Case: 350 | Input/Output: [(19 51 72 45) 19]
Test Case: 351 | Input/Output: [(69 72 90 13) 13]
Test Case: 352 | Input/Output: [(17 53 5 81) 5]
Test Case: 353 | Input/Output: [(82 14 26 63) 14]
Test Case: 354 | Input/Output: [(32 26 69 70) 26]
Test Case: 355 | Input/Output: [(59 18 100 58) 18]
Test Case: 356 | Input/Output: [(92 75 56 79) 56]
Test Case: 357 | Input/Output: [(29 95 33 42) 29]
Test Case: 358 | Input/Output: [(18 65 52 33) 18]
Test Case: 359 | Input/Output: [(100 5 23 32) 5]
Test Case: 360 | Input/Output: [(86 71 3 72) 3]
Test Case: 361 | Input/Output: [(94 96 38 30) 30]
Test Case: 362 | Input/Output: [(46 81 75 66) 46]
Test Case: 363 | Input/Output: [(50 18 20 5) 5]
Test Case: 364 | Input/Output: [(68 66 70 64) 64]
Test Case: 365 | Input/Output: [(48 24 89 6) 6]
Test Case: 366 | Input/Output: [(14 3 31 89) 3]
Test Case: 367 | Input/Output: [(55 86 44 88) 44]
Test Case: 368 | Input/Output: [(99 37 19 28) 19]
Test Case: 369 | Input/Output: [(43 75 52 70) 43]
Test Case: 370 | Input/Output: [(93 55 51 13) 13]
Test Case: 371 | Input/Output: [(22 3 70 51) 3]
Test Case: 372 | Input/Output: [(11 26 17 10) 10]
Test Case: 373 | Input/Output: [(76 52 34 47) 34]
Test Case: 374 | Input/Output: [(23 38 52 93) 23]
Test Case: 375 | Input/Output: [(37 42 49 4) 4]
Test Case: 376 | Input/Output: [(35 72 3 83) 3]
Test Case: 377 | Input/Output: [(76 74 25 44) 25]
Test Case: 378 | Input/Output: [(24 43 60 84) 24]
Test Case: 379 | Input/Output: [(91 100 83 63) 63]
Test Case: 380 | Input/Output: [(82 88 52 3) 3]
Test Case: 381 | Input/Output: [(82 55 69 84) 55]
Test Case: 382 | Input/Output: [(60 30 94 24) 24]
Test Case: 383 | Input/Output: [(56 59 62 45) 45]
Test Case: 384 | Input/Output: [(91 91 32 90) 32]
Test Case: 385 | Input/Output: [(2 74 16 37) 2]
Test Case: 386 | Input/Output: [(84 17 85 29) 17]
Test Case: 387 | Input/Output: [(35 19 63 80) 19]
Test Case: 388 | Input/Output: [(56 27 67 54) 27]
Test Case: 389 | Input/Output: [(11 20 25 89) 11]
Test Case: 390 | Input/Output: [(95 19 68 20) 19]
Test Case: 391 | Input/Output: [(99 19 96 74) 19]
Test Case: 392 | Input/Output: [(96 52 53 84) 52]
Test Case: 393 | Input/Output: [(79 52 79 12) 12]
Test Case: 394 | Input/Output: [(1 80 14 81) 1]
Test Case: 395 | Input/Output: [(71 56 95 9) 9]
Test Case: 396 | Input/Output: [(26 21 37 3) 3]
Test Case: 397 | Input/Output: [(49 63 53 8) 8]
Test Case: 398 | Input/Output: [(46 93 52 87) 46]
Test Case: 399 | Input/Output: [(56 66 43 68) 43]
Test Case: 400 | Input/Output: [(-39 10 -5 19) -39]
Test Case: 401 | Input/Output: [(-19 -42 -30 -55) -55]
Test Case: 402 | Input/Output: [(7 -20 74 -97) -97]
Test Case: 403 | Input/Output: [(-97 -55 58 -11) -97]
Test Case: 404 | Input/Output: [(61 56 33 79) 33]
Test Case: 405 | Input/Output: [(-10 44 -9 -30) -30]
Test Case: 406 | Input/Output: [(-60 70 89 71) -60]
Test Case: 407 | Input/Output: [(79 1 9 84) 1]
Test Case: 408 | Input/Output: [(-30 -77 62 -37) -77]
Test Case: 409 | Input/Output: [(14 65 57 -39) -39]
Test Case: 410 | Input/Output: [(-11 78 -40 -1) -40]
Test Case: 411 | Input/Output: [(1 29 -87 -8) -87]
Test Case: 412 | Input/Output: [(-21 -20 50 15) -21]
Test Case: 413 | Input/Output: [(-97 -74 47 77) -97]
Test Case: 414 | Input/Output: [(-75 -47 -78 51) -78]
Test Case: 415 | Input/Output: [(26 64 -34 -43) -43]
Test Case: 416 | Input/Output: [(-9 -96 -100 38) -100]
Test Case: 417 | Input/Output: [(3 88 -36 9) -36]
Test Case: 418 | Input/Output: [(98 -20 40 -31) -31]
Test Case: 419 | Input/Output: [(73 93 -97 28) -97]
Test Case: 420 | Input/Output: [(-19 -30 50 -63) -63]
Test Case: 421 | Input/Output: [(-7 23 -9 -22) -22]
Test Case: 422 | Input/Output: [(21 -81 -99 -66) -99]
Test Case: 423 | Input/Output: [(18 36 -74 -1) -74]
Test Case: 424 | Input/Output: [(-83 -76 -87 -26) -87]
Test Case: 425 | Input/Output: [(10 8 79 45) 8]
Test Case: 426 | Input/Output: [(87 10 69 -31) -31]
Test Case: 427 | Input/Output: [(-52 81 85 -33) -52]
Test Case: 428 | Input/Output: [(-8 6 50 -59) -59]
Test Case: 429 | Input/Output: [(-11 -12 -73 63) -73]
Test Case: 430 | Input/Output: [(71 77 -3 65) -3]
Test Case: 431 | Input/Output: [(0 33 -30 63) -30]
Test Case: 432 | Input/Output: [(91 4 -6 95) -6]
Test Case: 433 | Input/Output: [(14 41 -70 29) -70]
Test Case: 434 | Input/Output: [(42 91 -39 49) -39]
Test Case: 435 | Input/Output: [(72 -82 -55 -88) -88]
Test Case: 436 | Input/Output: [(-86 -78 -38 -95) -95]
Test Case: 437 | Input/Output: [(83 -34 -73 60) -73]
Test Case: 438 | Input/Output: [(93 -62 -1 -41) -62]
Test Case: 439 | Input/Output: [(69 -21 100 83) -21]
Test Case: 440 | Input/Output: [(-20 -90 15 9) -90]
Test Case: 441 | Input/Output: [(-50 -47 -5 -95) -95]
Test Case: 442 | Input/Output: [(-50 20 52 -65) -65]
Test Case: 443 | Input/Output: [(19 -75 86 -21) -75]
Test Case: 444 | Input/Output: [(12 -78 -68 70) -78]
Test Case: 445 | Input/Output: [(-46 -25 82 81) -46]
Test Case: 446 | Input/Output: [(-14 -74 -54 -66) -74]
Test Case: 447 | Input/Output: [(-11 -84 2 -100) -100]
Test Case: 448 | Input/Output: [(78 67 -45 9) -45]
Test Case: 449 | Input/Output: [(-89 0 88 -99) -99]
Test Case: 450 | Input/Output: [(62 -6 -85 -89) -89]
Test Case: 451 | Input/Output: [(-43 54 67 91) -43]
Test Case: 452 | Input/Output: [(-65 -9 -96 -20) -96]
Test Case: 453 | Input/Output: [(-47 81 -74 0) -74]
Test Case: 454 | Input/Output: [(-55 91 -6 87) -55]
Test Case: 455 | Input/Output: [(77 -44 98 -76) -76]
Test Case: 456 | Input/Output: [(93 61 49 -32) -32]
Test Case: 457 | Input/Output: [(94 41 89 18) 18]
Test Case: 458 | Input/Output: [(-25 36 56 -11) -25]
Test Case: 459 | Input/Output: [(-10 93 -92 -11) -92]
Test Case: 460 | Input/Output: [(-95 41 -54 45) -95]
Test Case: 461 | Input/Output: [(-25 -84 11 -87) -87]
Test Case: 462 | Input/Output: [(2 12 -74 40) -74]
Test Case: 463 | Input/Output: [(-91 29 -52 28) -91]
Test Case: 464 | Input/Output: [(46 -25 26 30) -25]
Test Case: 465 | Input/Output: [(28 -96 55 50) -96]
Test Case: 466 | Input/Output: [(-81 88 -53 -82) -82]
Test Case: 467 | Input/Output: [(34 71 92 85) 34]
Test Case: 468 | Input/Output: [(21 -21 -92 -64) -92]
Test Case: 469 | Input/Output: [(80 27 -90 26) -90]
Test Case: 470 | Input/Output: [(24 85 -53 51) -53]
Test Case: 471 | Input/Output: [(83 -81 40 12) -81]
Test Case: 472 | Input/Output: [(-17 -31 92 17) -31]
Test Case: 473 | Input/Output: [(-91 84 -15 -13) -91]
Test Case: 474 | Input/Output: [(81 -1 46 -5) -5]
Test Case: 475 | Input/Output: [(69 44 43 -95) -95]
Test Case: 476 | Input/Output: [(-14 -57 -14 30) -57]
Test Case: 477 | Input/Output: [(19 64 66 45) 19]
Test Case: 478 | Input/Output: [(-44 74 -15 92) -44]
Test Case: 479 | Input/Output: [(-100 -99 -53 32) -100]
Test Case: 480 | Input/Output: [(46 -85 1 55) -85]
Test Case: 481 | Input/Output: [(15 -34 74 -88) -88]
Test Case: 482 | Input/Output: [(66 -26 20 -96) -96]
Test Case: 483 | Input/Output: [(30 -78 22 8) -78]
Test Case: 484 | Input/Output: [(-3 -8 -91 -16) -91]
Test Case: 485 | Input/Output: [(60 28 54 -87) -87]
Test Case: 486 | Input/Output: [(95 -22 -85 -5) -85]
Test Case: 487 | Input/Output: [(22 -67 8 69) -67]
Test Case: 488 | Input/Output: [(19 -72 89 -21) -72]
Test Case: 489 | Input/Output: [(-70 53 -29 24) -70]
Test Case: 490 | Input/Output: [(38 -71 -48 -98) -98]
Test Case: 491 | Input/Output: [(10 37 -32 -66) -66]
Test Case: 492 | Input/Output: [(72 57 -33 -48) -48]
Test Case: 493 | Input/Output: [(64 86 19 92) 19]
Test Case: 494 | Input/Output: [(-79 -88 -16 -69) -88]
Test Case: 495 | Input/Output: [(-54 95 -89 29) -89]
Test Case: 496 | Input/Output: [(50 11 -80 28) -80]
Test Case: 497 | Input/Output: [(70 39 -95 -84) -95]
Test Case: 498 | Input/Output: [(-29 51 -84 -93) -93]
Test Case: 499 | Input/Output: [(80 -66 19 -12) -66]
Test Case: 500 | Input/Output: [(-57 -29 -20 -89) -89]
Test Case: 501 | Input/Output: [(-16 52 53 -3) -16]
Test Case: 502 | Input/Output: [(0 5 59 100) 0]
Test Case: 503 | Input/Output: [(1 22 -99 -21) -99]
Test Case: 504 | Input/Output: [(74 93 87 94) 74]
Test Case: 505 | Input/Output: [(-3 -15 -83 76) -83]
Test Case: 506 | Input/Output: [(-74 85 -83 6) -83]
Test Case: 507 | Input/Output: [(17 -26 -50 11) -50]
Test Case: 508 | Input/Output: [(-71 54 -51 -65) -71]
Test Case: 509 | Input/Output: [(-99 36 46 -89) -99]
Test Case: 510 | Input/Output: [(22 33 -5 -52) -52]
Test Case: 511 | Input/Output: [(-70 -59 -32 -96) -96]
Test Case: 512 | Input/Output: [(97 -39 35 -78) -78]
Test Case: 513 | Input/Output: [(83 -11 -44 13) -44]
Test Case: 514 | Input/Output: [(-47 18 3 -23) -47]
Test Case: 515 | Input/Output: [(50 -69 27 -10) -69]
Test Case: 516 | Input/Output: [(57 -85 -6 -54) -85]
Test Case: 517 | Input/Output: [(-69 -39 -94 -18) -94]
Test Case: 518 | Input/Output: [(2 -64 97 60) -64]
Test Case: 519 | Input/Output: [(34 -4 78 78) -4]
Test Case: 520 | Input/Output: [(-70 -62 -6 -51) -70]
Test Case: 521 | Input/Output: [(2 -20 -80 -73) -80]
Test Case: 522 | Input/Output: [(-90 -46 -56 -98) -98]
Test Case: 523 | Input/Output: [(-13 -18 40 -20) -20]
Test Case: 524 | Input/Output: [(-77 48 -34 86) -77]
Test Case: 525 | Input/Output: [(1 -75 50 50) -75]
Test Case: 526 | Input/Output: [(-91 98 61 87) -91]
Test Case: 527 | Input/Output: [(79 42 -82 82) -82]
Test Case: 528 | Input/Output: [(77 -36 37 71) -36]
Test Case: 529 | Input/Output: [(-1 -13 24 -13) -13]
Test Case: 530 | Input/Output: [(-29 -70 56 -8) -70]
Test Case: 531 | Input/Output: [(-61 29 33 -26) -61]
Test Case: 532 | Input/Output: [(-51 -39 -34 -77) -77]
Test Case: 533 | Input/Output: [(34 6 94 57) 6]
Test Case: 534 | Input/Output: [(-83 92 -54 24) -83]
Test Case: 535 | Input/Output: [(-9 15 59 -53) -53]
Test Case: 536 | Input/Output: [(-82 84 -100 -84) -100]
Test Case: 537 | Input/Output: [(-47 78 -69 87) -69]
Test Case: 538 | Input/Output: [(66 77 69 -97) -97]
Test Case: 539 | Input/Output: [(4 74 48 78) 4]
Test Case: 540 | Input/Output: [(-17 67 -41 32) -41]
Test Case: 541 | Input/Output: [(-80 -84 53 62) -84]
Test Case: 542 | Input/Output: [(32 -13 -21 38) -21]
Test Case: 543 | Input/Output: [(-89 -72 90 -11) -89]
Test Case: 544 | Input/Output: [(-28 35 93 -49) -49]
Test Case: 545 | Input/Output: [(-50 27 -80 27) -80]
Test Case: 546 | Input/Output: [(-82 50 -90 17) -90]
Test Case: 547 | Input/Output: [(-93 13 -47 97) -93]
Test Case: 548 | Input/Output: [(60 -37 -67 -12) -67]
Test Case: 549 | Input/Output: [(-48 -91 6 -1) -91]
Test Case: 550 | Input/Output: [(-81 88 -82 -77) -82]
Test Case: 551 | Input/Output: [(-17 60 -25 -55) -55]
Test Case: 552 | Input/Output: [(35 66 28 38) 28]
Test Case: 553 | Input/Output: [(-94 61 -19 -83) -94]
Test Case: 554 | Input/Output: [(21 -27 21 -49) -49]
Test Case: 555 | Input/Output: [(-96 13 10 100) -96]
Test Case: 556 | Input/Output: [(100 49 -48 30) -48]
Test Case: 557 | Input/Output: [(-87 77 -52 22) -87]
Test Case: 558 | Input/Output: [(-29 90 23 -72) -72]
Test Case: 559 | Input/Output: [(81 3 38 -12) -12]
Test Case: 560 | Input/Output: [(-57 40 -96 58) -96]
Test Case: 561 | Input/Output: [(-34 47 -99 -23) -99]
Test Case: 562 | Input/Output: [(68 37 76 11) 11]
Test Case: 563 | Input/Output: [(52 15 -93 65) -93]
Test Case: 564 | Input/Output: [(95 -88 -25 75) -88]
Test Case: 565 | Input/Output: [(81 -62 -44 -96) -96]
Test Case: 566 | Input/Output: [(15 -82 -14 13) -82]
Test Case: 567 | Input/Output: [(-39 -37 -79 96) -79]
Test Case: 568 | Input/Output: [(-10 54 -80 24) -80]
Test Case: 569 | Input/Output: [(-80 -78 64 100) -80]
Test Case: 570 | Input/Output: [(-66 98 19 -33) -66]
Test Case: 571 | Input/Output: [(-86 62 0 -69) -86]
Test Case: 572 | Input/Output: [(29 -25 60 -15) -25]
Test Case: 573 | Input/Output: [(79 76 40 -81) -81]
Test Case: 574 | Input/Output: [(100 2 71 84) 2]
Test Case: 575 | Input/Output: [(-80 87 -71 1) -80]
Test Case: 576 | Input/Output: [(16 67 -45 -68) -68]
Test Case: 577 | Input/Output: [(17 -47 -77 88) -77]
Test Case: 578 | Input/Output: [(-33 -43 86 -19) -43]
Test Case: 579 | Input/Output: [(74 -80 19 -19) -80]
Test Case: 580 | Input/Output: [(-72 -50 -52 62) -72]
Test Case: 581 | Input/Output: [(-85 35 -3 57) -85]
Test Case: 582 | Input/Output: [(-28 18 -66 -79) -79]
Test Case: 583 | Input/Output: [(-100 64 66 -32) -100]
Test Case: 584 | Input/Output: [(-1 -24 -25 92) -25]
Test Case: 585 | Input/Output: [(64 24 31 -25) -25]
Test Case: 586 | Input/Output: [(15 -35 -40 -36) -40]
Test Case: 587 | Input/Output: [(-22 -17 15 -56) -56]
Test Case: 588 | Input/Output: [(67 -3 72 96) -3]
Test Case: 589 | Input/Output: [(16 14 -52 66) -52]
Test Case: 590 | Input/Output: [(3 34 -5 -61) -61]
Test Case: 591 | Input/Output: [(-43 78 87 -93) -93]
Test Case: 592 | Input/Output: [(50 -9 -98 -11) -98]
Test Case: 593 | Input/Output: [(76 97 44 34) 34]
Test Case: 594 | Input/Output: [(-16 -24 -88 -9) -88]
Test Case: 595 | Input/Output: [(98 57 -86 25) -86]
Test Case: 596 | Input/Output: [(33 -23 98 6) -23]
Test Case: 597 | Input/Output: [(-91 12 2 -19) -91]
Test Case: 598 | Input/Output: [(-94 -35 83 96) -94]
Test Case: 599 | Input/Output: [(49 -29 69 -32) -32]
Test Case: 600 | Input/Output: [(-1 -43 31 38) -43]
Test Case: 601 | Input/Output: [(79 -66 10 78) -66]
Test Case: 602 | Input/Output: [(-20 -27 89 -8) -27]
Test Case: 603 | Input/Output: [(13 -92 -99 59) -99]
Test Case: 604 | Input/Output: [(78 -43 -45 -59) -59]
Test Case: 605 | Input/Output: [(-79 24 15 -35) -79]
Test Case: 606 | Input/Output: [(19 70 14 -36) -36]
Test Case: 607 | Input/Output: [(0 -43 -97 48) -97]
Test Case: 608 | Input/Output: [(-14 -48 -33 -99) -99]
Test Case: 609 | Input/Output: [(52 -23 -77 28) -77]
Test Case: 610 | Input/Output: [(-44 78 4 69) -44]
Test Case: 611 | Input/Output: [(3 -33 10 -44) -44]
Test Case: 612 | Input/Output: [(-60 40 -11 35) -60]
Test Case: 613 | Input/Output: [(-23 65 -34 94) -34]
Test Case: 614 | Input/Output: [(65 -72 94 -10) -72]
Test Case: 615 | Input/Output: [(73 40 -56 -88) -88]
Test Case: 616 | Input/Output: [(22 -57 16 -35) -57]
Test Case: 617 | Input/Output: [(-46 -73 35 -21) -73]
Test Case: 618 | Input/Output: [(31 -94 26 55) -94]
Test Case: 619 | Input/Output: [(-53 -90 -78 0) -90]
Test Case: 620 | Input/Output: [(-50 21 -80 59) -80]
Test Case: 621 | Input/Output: [(-80 -49 -97 92) -97]
Test Case: 622 | Input/Output: [(7 43 -43 -52) -52]
Test Case: 623 | Input/Output: [(-95 52 53 83) -95]
Test Case: 624 | Input/Output: [(25 23 66 19) 19]
Test Case: 625 | Input/Output: [(-46 12 -36 -82) -82]
Test Case: 626 | Input/Output: [(-8 -48 44 -45) -48]
Test Case: 627 | Input/Output: [(13 90 -97 86) -97]
Test Case: 628 | Input/Output: [(-48 -49 54 72) -49]
Test Case: 629 | Input/Output: [(58 -96 -25 71) -96]
Test Case: 630 | Input/Output: [(29 37 22 -95) -95]
Test Case: 631 | Input/Output: [(-75 -11 -82 -49) -82]
Test Case: 632 | Input/Output: [(-44 55 7 43) -44]
Test Case: 633 | Input/Output: [(16 -68 5 -3) -68]
Test Case: 634 | Input/Output: [(89 -92 -35 -54) -92]
Test Case: 635 | Input/Output: [(-54 100 94 -62) -62]
Test Case: 636 | Input/Output: [(88 -12 10 36) -12]
Test Case: 637 | Input/Output: [(47 -58 36 -50) -58]
Test Case: 638 | Input/Output: [(97 22 -53 43) -53]
Test Case: 639 | Input/Output: [(-79 -58 39 -24) -79]
Test Case: 640 | Input/Output: [(24 -43 92 14) -43]
Test Case: 641 | Input/Output: [(5 46 -3 -79) -79]
Test Case: 642 | Input/Output: [(41 -21 -20 -43) -43]
Test Case: 643 | Input/Output: [(81 95 -68 71) -68]
Test Case: 644 | Input/Output: [(-55 52 -45 -64) -64]
Test Case: 645 | Input/Output: [(-94 -19 5 -33) -94]
Test Case: 646 | Input/Output: [(-35 81 -5 -56) -56]
Test Case: 647 | Input/Output: [(15 -66 -97 87) -97]
Test Case: 648 | Input/Output: [(-10 -96 76 57) -96]
Test Case: 649 | Input/Output: [(43 30 -63 93) -63]
Test Case: 650 | Input/Output: [(60 17 19 14) 14]
Test Case: 651 | Input/Output: [(-38 -75 50 -71) -75]
Test Case: 652 | Input/Output: [(-8 5 -83 -39) -83]
Test Case: 653 | Input/Output: [(-84 6 -61 84) -84]
Test Case: 654 | Input/Output: [(85 -25 -42 -81) -81]
Test Case: 655 | Input/Output: [(-82 16 66 -37) -82]
Test Case: 656 | Input/Output: [(82 26 -84 -36) -84]
Test Case: 657 | Input/Output: [(-89 74 -22 -31) -89]
Test Case: 658 | Input/Output: [(-71 -19 -33 83) -71]
Test Case: 659 | Input/Output: [(-92 94 52 65) -92]
Test Case: 660 | Input/Output: [(41 -30 47 -20) -30]
Test Case: 661 | Input/Output: [(20 79 0 -39) -39]
Test Case: 662 | Input/Output: [(46 38 -57 36) -57]
Test Case: 663 | Input/Output: [(-95 -65 64 10) -95]
Test Case: 664 | Input/Output: [(-75 -93 -71 -95) -95]
Test Case: 665 | Input/Output: [(-36 62 3 -39) -39]
Test Case: 666 | Input/Output: [(-100 -24 -9 62) -100]
Test Case: 667 | Input/Output: [(-81 50 5 -49) -81]
Test Case: 668 | Input/Output: [(59 -35 94 -34) -35]
Test Case: 669 | Input/Output: [(-71 20 -83 56) -83]
Test Case: 670 | Input/Output: [(63 -75 -11 -89) -89]
Test Case: 671 | Input/Output: [(-39 19 -80 -77) -80]
Test Case: 672 | Input/Output: [(-66 28 -10 24) -66]
Test Case: 673 | Input/Output: [(96 -82 -84 72) -84]
Test Case: 674 | Input/Output: [(-25 -35 -57 -31) -57]
Test Case: 675 | Input/Output: [(-61 93 79 -2) -61]
Test Case: 676 | Input/Output: [(-97 -69 -43 -85) -97]
Test Case: 677 | Input/Output: [(27 45 21 86) 21]
Test Case: 678 | Input/Output: [(63 -43 75 84) -43]
Test Case: 679 | Input/Output: [(42 69 -68 83) -68]
Test Case: 680 | Input/Output: [(35 43 18 -44) -44]
Test Case: 681 | Input/Output: [(-24 -84 -59 -4) -84]
Test Case: 682 | Input/Output: [(-51 21 49 63) -51]
Test Case: 683 | Input/Output: [(-96 -14 54 -13) -96]
Test Case: 684 | Input/Output: [(77 -6 31 -15) -15]
Test Case: 685 | Input/Output: [(-49 -15 -98 16) -98]
Test Case: 686 | Input/Output: [(76 -32 79 59) -32]
Test Case: 687 | Input/Output: [(67 35 -15 43) -15]
Test Case: 688 | Input/Output: [(-26 93 -24 -22) -26]
Test Case: 689 | Input/Output: [(61 -16 -20 40) -20]
Test Case: 690 | Input/Output: [(-11 -86 -93 -56) -93]
Test Case: 691 | Input/Output: [(-88 -49 60 96) -88]
Test Case: 692 | Input/Output: [(-5 40 -42 -58) -58]
Test Case: 693 | Input/Output: [(56 11 -9 44) -9]
Test Case: 694 | Input/Output: [(-47 -22 73 -37) -47]
Test Case: 695 | Input/Output: [(57 0 -37 -99) -99]
Test Case: 696 | Input/Output: [(87 78 36 -96) -96]
Test Case: 697 | Input/Output: [(-92 62 -36 -23) -92]
Test Case: 698 | Input/Output: [(-93 57 -27 98) -93]
Test Case: 699 | Input/Output: [(-83 69 -83 -80) -83]
Test Case: 700 | Input/Output: [(17 30 17 31) 17]
Test Case: 701 | Input/Output: [(-97 -76 84 63) -97]
Test Case: 702 | Input/Output: [(-3 -62 -85 -7) -85]
Test Case: 703 | Input/Output: [(-8 -15 -53 -19) -53]
Test Case: 704 | Input/Output: [(55 42 -44 -72) -72]
Test Case: 705 | Input/Output: [(-87 -2 -47 29) -87]
Test Case: 706 | Input/Output: [(59 58 -69 20) -69]
Test Case: 707 | Input/Output: [(41 1 -89 16) -89]
Test Case: 708 | Input/Output: [(27 13 94 -81) -81]
Test Case: 709 | Input/Output: [(-6 -25 -59 -76) -76]
Test Case: 710 | Input/Output: [(-85 -37 -45 2) -85]
Test Case: 711 | Input/Output: [(-22 9 -84 -44) -84]
Test Case: 712 | Input/Output: [(-9 39 -60 43) -60]
Test Case: 713 | Input/Output: [(-89 38 -9 -89) -89]
Test Case: 714 | Input/Output: [(-35 -89 1 19) -89]
Test Case: 715 | Input/Output: [(38 59 -6 45) -6]
Test Case: 716 | Input/Output: [(47 -79 -76 20) -79]
Test Case: 717 | Input/Output: [(-57 99 69 -34) -57]
Test Case: 718 | Input/Output: [(52 85 45 90) 45]
Test Case: 719 | Input/Output: [(-86 2 69 81) -86]
Test Case: 720 | Input/Output: [(-31 -88 46 -50) -88]
Test Case: 721 | Input/Output: [(-15 57 -25 92) -25]
Test Case: 722 | Input/Output: [(19 -25 82 -70) -70]
Test Case: 723 | Input/Output: [(-73 -70 87 -69) -73]
Test Case: 724 | Input/Output: [(-19 -70 92 -37) -70]
Test Case: 725 | Input/Output: [(-9 -67 59 98) -67]
Test Case: 726 | Input/Output: [(-23 72 -6 97) -23]
Test Case: 727 | Input/Output: [(43 -14 63 -77) -77]
Test Case: 728 | Input/Output: [(-8 34 -38 -95) -95]
Test Case: 729 | Input/Output: [(-4 41 11 -44) -44]
Test Case: 730 | Input/Output: [(-77 14 -58 80) -77]
Test Case: 731 | Input/Output: [(28 39 39 61) 28]
Test Case: 732 | Input/Output: [(75 -34 -71 27) -71]
Test Case: 733 | Input/Output: [(37 -95 88 93) -95]
Test Case: 734 | Input/Output: [(63 12 -27 10) -27]
Test Case: 735 | Input/Output: [(-72 47 -2 30) -72]
Test Case: 736 | Input/Output: [(1 13 -48 99) -48]
Test Case: 737 | Input/Output: [(87 32 44 42) 32]
Test Case: 738 | Input/Output: [(15 5 75 82) 5]
Test Case: 739 | Input/Output: [(56 93 52 34) 34]
Test Case: 740 | Input/Output: [(20 -85 95 -31) -85]
Test Case: 741 | Input/Output: [(68 39 -24 -2) -24]
Test Case: 742 | Input/Output: [(13 -17 -69 -26) -69]
Test Case: 743 | Input/Output: [(0 -82 -1 26) -82]
Test Case: 744 | Input/Output: [(52 46 -62 7) -62]
Test Case: 745 | Input/Output: [(-91 42 71 33) -91]
Test Case: 746 | Input/Output: [(10 -5 86 46) -5]
Test Case: 747 | Input/Output: [(-49 -82 17 0) -82]
Test Case: 748 | Input/Output: [(92 -16 67 83) -16]
Test Case: 749 | Input/Output: [(43 -96 -100 45) -100]
Test Case: 750 | Input/Output: [(80 40 17 41) 17]
Test Case: 751 | Input/Output: [(-26 -54 89 67) -54]
Test Case: 752 | Input/Output: [(2 -53 31 31) -53]
Test Case: 753 | Input/Output: [(-74 -18 81 -95) -95]
Test Case: 754 | Input/Output: [(4 -83 66 81) -83]
Test Case: 755 | Input/Output: [(83 65 -10 -44) -44]
Test Case: 756 | Input/Output: [(-71 -77 54 -96) -96]
Test Case: 757 | Input/Output: [(-32 64 44 -14) -32]
Test Case: 758 | Input/Output: [(56 19 -49 6) -49]
Test Case: 759 | Input/Output: [(39 -35 23 -63) -63]
Test Case: 760 | Input/Output: [(55 92 -87 74) -87]
Test Case: 761 | Input/Output: [(98 97 12 -11) -11]
Test Case: 762 | Input/Output: [(10 -49 -28 -40) -49]
Test Case: 763 | Input/Output: [(98 80 0 50) 0]
Test Case: 764 | Input/Output: [(-45 89 -62 -57) -62]
Test Case: 765 | Input/Output: [(-7 32 80 46) -7]
Test Case: 766 | Input/Output: [(-32 -33 -73 22) -73]
Test Case: 767 | Input/Output: [(-71 100 56 80) -71]
Test Case: 768 | Input/Output: [(-4 -51 55 -86) -86]
Test Case: 769 | Input/Output: [(84 -84 94 -89) -89]
Test Case: 770 | Input/Output: [(-33 21 -21 -81) -81]
Test Case: 771 | Input/Output: [(46 -67 -11 -78) -78]
Test Case: 772 | Input/Output: [(45 77 52 42) 42]
Test Case: 773 | Input/Output: [(9 44 -36 -83) -83]
Test Case: 774 | Input/Output: [(-79 57 -81 85) -81]
Test Case: 775 | Input/Output: [(91 -17 50 -81) -81]
Test Case: 776 | Input/Output: [(-46 -11 -54 -2) -54]
Test Case: 777 | Input/Output: [(-74 10 67 56) -74]
Test Case: 778 | Input/Output: [(-36 -65 -85 -96) -96]
Test Case: 779 | Input/Output: [(-28 84 -63 79) -63]
Test Case: 780 | Input/Output: [(38 -100 -42 -81) -100]
Test Case: 781 | Input/Output: [(76 56 -89 67) -89]
Test Case: 782 | Input/Output: [(-50 87 -10 29) -50]
Test Case: 783 | Input/Output: [(-67 72 52 31) -67]
Test Case: 784 | Input/Output: [(15 24 50 89) 15]
Test Case: 785 | Input/Output: [(-17 -28 49 -49) -49]
Test Case: 786 | Input/Output: [(-97 -2 -87 42) -97]
Test Case: 787 | Input/Output: [(61 -55 53 -71) -71]
Test Case: 788 | Input/Output: [(49 20 -94 52) -94]
Test Case: 789 | Input/Output: [(52 -60 42 100) -60]
Test Case: 790 | Input/Output: [(88 6 -42 32) -42]
Test Case: 791 | Input/Output: [(-58 -53 -7 -33) -58]
Test Case: 792 | Input/Output: [(55 26 5 -52) -52]
Test Case: 793 | Input/Output: [(-53 -83 -81 -4) -83]
Test Case: 794 | Input/Output: [(31 2 5 -19) -19]
Test Case: 795 | Input/Output: [(16 69 -31 -48) -48]
Test Case: 796 | Input/Output: [(-19 -9 -74 16) -74]
Test Case: 797 | Input/Output: [(-14 -79 33 -32) -79]
Test Case: 798 | Input/Output: [(71 -70 11 25) -70]
Test Case: 799 | Input/Output: [(-94 -33 -68 -43) -94]
Test Case: 800 | Input/Output: [(-16 -56 -33 21) -56]
Test Case: 801 | Input/Output: [(24 53 -60 -90) -90]
Test Case: 802 | Input/Output: [(-88 89 45 66) -88]
Test Case: 803 | Input/Output: [(84 63 98 -5) -5]
Test Case: 804 | Input/Output: [(-31 -17 86 -18) -31]
Test Case: 805 | Input/Output: [(79 -83 2 67) -83]
Test Case: 806 | Input/Output: [(0 36 10 -31) -31]
Test Case: 807 | Input/Output: [(31 46 -35 90) -35]
Test Case: 808 | Input/Output: [(-77 -75 -17 44) -77]
Test Case: 809 | Input/Output: [(40 -61 -44 -9) -61]
Test Case: 810 | Input/Output: [(-43 79 -66 66) -66]
Test Case: 811 | Input/Output: [(4 7 -100 25) -100]
Test Case: 812 | Input/Output: [(-23 -64 51 4) -64]
Test Case: 813 | Input/Output: [(53 -76 36 -51) -76]
Test Case: 814 | Input/Output: [(-14 -43 32 -15) -43]
Test Case: 815 | Input/Output: [(-60 -5 29 -27) -60]
Test Case: 816 | Input/Output: [(-97 -72 87 -11) -97]
Test Case: 817 | Input/Output: [(-98 -43 26 96) -98]
Test Case: 818 | Input/Output: [(34 93 51 -56) -56]
Test Case: 819 | Input/Output: [(-6 -94 7 49) -94]
Test Case: 820 | Input/Output: [(-52 -96 75 30) -96]
Test Case: 821 | Input/Output: [(-49 -11 -8 19) -49]
Test Case: 822 | Input/Output: [(44 -89 -63 78) -89]
Test Case: 823 | Input/Output: [(-35 60 30 77) -35]
Test Case: 824 | Input/Output: [(66 -16 -36 -6) -36]
Test Case: 825 | Input/Output: [(-80 24 -46 25) -80]
Test Case: 826 | Input/Output: [(60 42 8 13) 8]
Test Case: 827 | Input/Output: [(-43 -38 66 -50) -50]
Test Case: 828 | Input/Output: [(48 86 2 86) 2]
Test Case: 829 | Input/Output: [(-60 -82 4 17) -82]
Test Case: 830 | Input/Output: [(66 -89 94 -63) -89]
Test Case: 831 | Input/Output: [(-12 84 27 86) -12]
Test Case: 832 | Input/Output: [(29 -52 -76 -38) -76]
Test Case: 833 | Input/Output: [(-52 16 3 49) -52]
Test Case: 834 | Input/Output: [(47 22 -3 -80) -80]
Test Case: 835 | Input/Output: [(-82 91 -23 91) -82]
Test Case: 836 | Input/Output: [(38 -23 10 -72) -72]
Test Case: 837 | Input/Output: [(-63 -22 24 84) -63]
Test Case: 838 | Input/Output: [(-24 15 -10 10) -24]
Test Case: 839 | Input/Output: [(-53 98 5 -73) -73]
Test Case: 840 | Input/Output: [(53 65 -86 -10) -86]
Test Case: 841 | Input/Output: [(15 -33 -11 100) -33]
Test Case: 842 | Input/Output: [(97 31 95 -5) -5]
Test Case: 843 | Input/Output: [(-4 -69 -46 -87) -87]
Test Case: 844 | Input/Output: [(-41 -10 -70 74) -70]
Test Case: 845 | Input/Output: [(-57 32 91 20) -57]
Test Case: 846 | Input/Output: [(77 7 65 42) 7]
Test Case: 847 | Input/Output: [(97 -66 -43 -10) -66]
Test Case: 848 | Input/Output: [(-81 -26 -43 -38) -81]
Test Case: 849 | Input/Output: [(-39 -66 -41 -69) -69]
Test Case: 850 | Input/Output: [(-48 -63 84 -2) -63]
Test Case: 851 | Input/Output: [(51 64 30 3) 3]
Test Case: 852 | Input/Output: [(81 85 -13 65) -13]
Test Case: 853 | Input/Output: [(-39 55 93 81) -39]
Test Case: 854 | Input/Output: [(18 -89 -6 -21) -89]
Test Case: 855 | Input/Output: [(30 20 -89 -63) -89]
Test Case: 856 | Input/Output: [(31 87 21 61) 21]
Test Case: 857 | Input/Output: [(-85 91 -59 -26) -85]
Test Case: 858 | Input/Output: [(29 -1 49 -46) -46]
Test Case: 859 | Input/Output: [(14 -78 43 -70) -78]
Test Case: 860 | Input/Output: [(-40 31 19 -30) -40]
Test Case: 861 | Input/Output: [(10 -10 -75 -54) -75]
Test Case: 862 | Input/Output: [(-56 -57 -66 -48) -66]
Test Case: 863 | Input/Output: [(91 -2 -93 -47) -93]
Test Case: 864 | Input/Output: [(78 42 75 -94) -94]
Test Case: 865 | Input/Output: [(31 -62 2 -5) -62]
Test Case: 866 | Input/Output: [(-86 86 -33 82) -86]
Test Case: 867 | Input/Output: [(45 27 -87 -47) -87]
Test Case: 868 | Input/Output: [(4 33 17 -79) -79]
Test Case: 869 | Input/Output: [(15 -44 -8 -90) -90]
Test Case: 870 | Input/Output: [(-34 -11 -58 -79) -79]
Test Case: 871 | Input/Output: [(-95 -68 60 -82) -95]
Test Case: 872 | Input/Output: [(24 52 -8 53) -8]
Test Case: 873 | Input/Output: [(-6 -8 -43 24) -43]
Test Case: 874 | Input/Output: [(-76 -68 73 -73) -76]
Test Case: 875 | Input/Output: [(-3 -12 53 14) -12]
Test Case: 876 | Input/Output: [(-34 10 94 28) -34]
Test Case: 877 | Input/Output: [(0 -4 -3 -19) -19]
Test Case: 878 | Input/Output: [(-89 27 -57 75) -89]
Test Case: 879 | Input/Output: [(-92 94 -50 1) -92]
Test Case: 880 | Input/Output: [(43 -42 9 56) -42]
Test Case: 881 | Input/Output: [(97 84 71 -8) -8]
Test Case: 882 | Input/Output: [(86 96 28 42) 28]
Test Case: 883 | Input/Output: [(18 -49 81 47) -49]
Test Case: 884 | Input/Output: [(34 -33 -36 7) -36]
Test Case: 885 | Input/Output: [(-6 -54 -65 -80) -80]
Test Case: 886 | Input/Output: [(56 -19 -78 50) -78]
Test Case: 887 | Input/Output: [(-81 17 -50 71) -81]
Test Case: 888 | Input/Output: [(7 -65 -93 -29) -93]
Test Case: 889 | Input/Output: [(80 6 -64 -44) -64]
Test Case: 890 | Input/Output: [(59 -97 -68 -45) -97]
Test Case: 891 | Input/Output: [(-11 91 53 83) -11]
Test Case: 892 | Input/Output: [(-5 83 -1 -88) -88]
Test Case: 893 | Input/Output: [(-13 -28 85 -16) -28]
Test Case: 894 | Input/Output: [(-84 27 -19 1) -84]
Test Case: 895 | Input/Output: [(54 -6 -99 97) -99]
Test Case: 896 | Input/Output: [(-40 -31 42 -24) -40]
Test Case: 897 | Input/Output: [(97 -95 56 72) -95]
Test Case: 898 | Input/Output: [(-71 -64 -26 -85) -85]
Test Case: 899 | Input/Output: [(3 -80 -98 31) -98]
Test Case: 900 | Input/Output: [(38 72 69 -71) -71]
Test Case: 901 | Input/Output: [(-58 32 10 9) -58]
Test Case: 902 | Input/Output: [(29 -93 -52 58) -93]
Test Case: 903 | Input/Output: [(10 45 -42 28) -42]
Test Case: 904 | Input/Output: [(-10 74 -44 92) -44]
Test Case: 905 | Input/Output: [(-34 -19 8 75) -34]
Test Case: 906 | Input/Output: [(70 47 -57 7) -57]
Test Case: 907 | Input/Output: [(-75 -92 -95 93) -95]
Test Case: 908 | Input/Output: [(-94 -7 -87 26) -94]
Test Case: 909 | Input/Output: [(40 82 -9 55) -9]
Test Case: 910 | Input/Output: [(85 -98 16 -43) -98]
Test Case: 911 | Input/Output: [(54 49 -62 24) -62]
Test Case: 912 | Input/Output: [(10 -48 -99 1) -99]
Test Case: 913 | Input/Output: [(39 -7 94 67) -7]
Test Case: 914 | Input/Output: [(54 -83 -34 14) -83]
Test Case: 915 | Input/Output: [(-80 80 -97 90) -97]
Test Case: 916 | Input/Output: [(-8 8 25 61) -8]
Test Case: 917 | Input/Output: [(12 2 -20 23) -20]
Test Case: 918 | Input/Output: [(75 -17 93 89) -17]
Test Case: 919 | Input/Output: [(62 0 1 26) 0]
Test Case: 920 | Input/Output: [(15 -93 -35 -8) -93]
Test Case: 921 | Input/Output: [(73 38 -21 64) -21]
Test Case: 922 | Input/Output: [(64 -12 -97 30) -97]
Test Case: 923 | Input/Output: [(49 90 -81 -68) -81]
Test Case: 924 | Input/Output: [(-45 -56 -91 69) -91]
Test Case: 925 | Input/Output: [(33 95 6 0) 0]
Test Case: 926 | Input/Output: [(-97 -66 78 -68) -97]
Test Case: 927 | Input/Output: [(88 30 17 -32) -32]
Test Case: 928 | Input/Output: [(-88 15 81 -99) -99]
Test Case: 929 | Input/Output: [(12 -40 70 42) -40]
Test Case: 930 | Input/Output: [(-21 -100 -37 -93) -100]
Test Case: 931 | Input/Output: [(9 78 83 -98) -98]
Test Case: 932 | Input/Output: [(60 -6 47 75) -6]
Test Case: 933 | Input/Output: [(62 -98 22 -48) -98]
Test Case: 934 | Input/Output: [(34 72 16 24) 16]
Test Case: 935 | Input/Output: [(80 -79 -70 71) -79]
Test Case: 936 | Input/Output: [(-95 -48 -97 6) -97]
Test Case: 937 | Input/Output: [(-87 -82 -96 -66) -96]
Test Case: 938 | Input/Output: [(57 -31 -53 84) -53]
Test Case: 939 | Input/Output: [(32 4 12 14) 4]
Test Case: 940 | Input/Output: [(38 -91 74 -70) -91]
Test Case: 941 | Input/Output: [(-70 87 48 -100) -100]
Test Case: 942 | Input/Output: [(-65 -10 -61 97) -65]
Test Case: 943 | Input/Output: [(-79 68 -3 -39) -79]
Test Case: 944 | Input/Output: [(-50 -29 80 -61) -61]
Test Case: 945 | Input/Output: [(35 67 55 -15) -15]
Test Case: 946 | Input/Output: [(60 -49 -28 90) -49]
Test Case: 947 | Input/Output: [(-55 -85 -11 -70) -85]
Test Case: 948 | Input/Output: [(35 73 90 61) 35]
Test Case: 949 | Input/Output: [(90 -85 -26 97) -85]
Test Case: 950 | Input/Output: [(-83 -29 -63 -48) -83]
Test Case: 951 | Input/Output: [(81 27 -70 41) -70]
Test Case: 952 | Input/Output: [(29 77 33 62) 29]
Test Case: 953 | Input/Output: [(51 -4 71 61) -4]
Test Case: 954 | Input/Output: [(85 -78 68 36) -78]
Test Case: 955 | Input/Output: [(87 -26 82 84) -26]
Test Case: 956 | Input/Output: [(81 52 -66 66) -66]
Test Case: 957 | Input/Output: [(70 85 26 93) 26]
Test Case: 958 | Input/Output: [(74 -58 3 -3) -58]
Test Case: 959 | Input/Output: [(26 96 63 -58) -58]
Test Case: 960 | Input/Output: [(87 11 60 2) 2]
Test Case: 961 | Input/Output: [(27 44 38 -9) -9]
Test Case: 962 | Input/Output: [(66 -55 31 78) -55]
Test Case: 963 | Input/Output: [(-78 -82 39 15) -82]
Test Case: 964 | Input/Output: [(39 45 70 -37) -37]
Test Case: 965 | Input/Output: [(31 -33 -81 -99) -99]
Test Case: 966 | Input/Output: [(-73 79 -29 -66) -73]
Test Case: 967 | Input/Output: [(29 -47 -3 -65) -65]
Test Case: 968 | Input/Output: [(-54 59 -67 -16) -67]
Test Case: 969 | Input/Output: [(-63 76 100 -49) -63]
Test Case: 970 | Input/Output: [(-85 90 -37 -5) -85]
Test Case: 971 | Input/Output: [(67 75 -68 -52) -68]
Test Case: 972 | Input/Output: [(33 -69 25 -64) -69]
Test Case: 973 | Input/Output: [(-68 4 -65 -79) -79]
Test Case: 974 | Input/Output: [(42 7 -6 31) -6]
Test Case: 975 | Input/Output: [(93 12 -94 72) -94]
Test Case: 976 | Input/Output: [(-4 -8 52 -42) -42]
Test Case: 977 | Input/Output: [(82 -87 59 39) -87]
Test Case: 978 | Input/Output: [(37 -7 99 -93) -93]
Test Case: 979 | Input/Output: [(-39 60 85 0) -39]
Test Case: 980 | Input/Output: [(38 47 -68 85) -68]
Test Case: 981 | Input/Output: [(87 58 -34 11) -34]
Test Case: 982 | Input/Output: [(74 41 30 -72) -72]
Test Case: 983 | Input/Output: [(-53 -87 -53 12) -87]
Test Case: 984 | Input/Output: [(40 44 -65 34) -65]
Test Case: 985 | Input/Output: [(-58 -56 5 54) -58]
Test Case: 986 | Input/Output: [(-52 26 -45 -24) -52]
Test Case: 987 | Input/Output: [(99 2 -93 -1) -93]
Test Case: 988 | Input/Output: [(-79 -61 -1 8) -79]
Test Case: 989 | Input/Output: [(83 7 27 -7) -7]
Test Case: 990 | Input/Output: [(9 60 -78 -9) -78]
Test Case: 991 | Input/Output: [(-34 22 20 -16) -34]
Test Case: 992 | Input/Output: [(48 -52 -83 -96) -96]
Test Case: 993 | Input/Output: [(-34 -39 -4 -97) -97]
Test Case: 994 | Input/Output: [(85 -35 -74 11) -74]
Test Case: 995 | Input/Output: [(-90 -15 -9 25) -90]
Test Case: 996 | Input/Output: [(-90 -82 -92 41) -92]
Test Case: 997 | Input/Output: [(92 -4 100 -17) -17]
Test Case: 998 | Input/Output: [(80 6 80 -99) -99]
Test Case: 999 | Input/Output: [(-5 -53 24 92) -53]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -66 23 70 -12 -72 68 104 50 118 -110 79 -124 35 -43 63 -29
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -4 -58 -4] -58] [[80 0 0 0] 0] [[6 6 6 57] 6] [[-55 -74 -74 -74] -74] [[-80 -80 -80 -29] -80] [[-98 89 89 89] -98] [[-2 -52 -2 -2] -52] [[53 24 24 24] 24] [[91 20 91 91] 20] [[-57 -57 -57 -11] -57] [(26 26 26 26) 26] [(-15 -15 -15 -15) -15] [(54 54 54 54) 54] [(76 76 76 76) 76] [(61 61 61 61) 61] [(26 0 91 2) 0] [(16 22 43 95) 16] [(97 65 50 44) 44] [(89 24 84 52) 24] [(83 79 55 95) 55] [(75 31 37 2) 2] [(89 9 55 46) 9] [(54 22 81 72) 22] [(45 5 99 95) 5] [(27 90 51 54) 27] [(60 55 92 100) 55] [(82 82 5 49) 5] [(66 44 65 98) 44] [(88 30 39 56) 30] [(26 43 78 8) 8] [(41 88 93 41) 41] [(37 22 37 66) 22] [(64 42 1 88) 1] [(46 33 13 87) 13] [(26 90 72 54) 26] [(-37 -63 37 -95) -95] [(41 -79 90 53) -79] [(16 32 91 37) 16] [(1 -12 -67 -27) -67] [(24 38 -84 -65) -84] [(-25 59 -16 41) -25] [(33 29 -20 -8) -20] [(7 -95 -2 -80) -95] [(-86 -91 15 -68) -91] [(-51 8 -7 -31) -51] [(100 39 -3 10) -3] [(35 63 -96 31) -96] [(-9 10 26 22) -9] [(67 -12 27 12) -12] [(-17 46 9 -11) -17] [(17 53 72 -82) -82] [(-8 -78 -6 -100) -100] [(88 90 3 4) 3] [(-71 -36 -83 47) -83] [(-81 -74 -90 -88) -90] [(-90 7 -28 64) -90] [(-25 -55 -28 -27) -55] [(-77 84 -18 40) -77] [(-98 -93 20 -61) -98] [(17 -86 -37 -70) -86] [(-53 11 35 5) -53] [(3 -28 89 76) -28] [(-26 61 -46 -30) -46] [(-68 -80 -98 -96) -98] [(-72 -84 10 77) -84] [(13 20 48 39) 13] [(-91 67 -79 -37) -91] [(-98 -14 -21 10) -98] [(89 -27 98 -63) -63] [(-30 79 12 -5) -30] [(85 19 19 -51) -51] [(-27 39 -17 -87) -87] [(-81 -13 100 87) -81] [(98 90 -46 81) -46] [(-32 19 -4 58) -32] [(-84 0 -60 -4) -84] [(-64 -75 -18 96) -75] [(14 0 -58 -57) -58] [(18 -46 48 45) -46] [(78 76 65 -93) -93] [(-62 66 -8 67) -62] [(31 24 21 36) 21] [(34 -83 -32 7) -83] [(-44 69 99 91) -44] [(-99 1 30 36) -99] [(-42 -28 56 -99) -99] [(-24 -33 -87 -29) -87] [(-23 -1 -48 -2) -48] [(-8 -46 -1 97) -46] [(-14 -64 -19 -80) -80] [(13 -72 34 -98) -98] [(-64 -83 45 -60) -83] [(62 -95 98 69) -95] [(39 -24 -81 -23) -81] [(7 94 -68 -86) -86])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: 59                 
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: 8                  
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 46                 
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 84                 
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 61                 
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: 67                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 79                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: 39                 
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: 19                 
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: 66                 
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_899} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_k (integer_fromboolean in2) () boolean_xor print_integer boolean_yank exec_swap () (exec_empty integer_eq integer_max exec_empty boolean_swap integer_yank boolean_eq) boolean_not integer_add boolean_dup_times boolean_empty exec_swap () (integer_eq exec_noop integer_swap tagged_899 integer_min exec_dup (boolean_invert_first_then_and) integer_empty boolean_pop))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in2} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_899} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_k (integer_fromboolean in2) () boolean_xor print_integer boolean_yank exec_swap () (exec_empty integer_eq integer_max exec_empty boolean_swap integer_yank boolean_eq) boolean_not integer_add boolean_dup_times boolean_empty exec_swap () (integer_eq exec_noop integer_swap tagged_899 integer_min exec_dup (boolean_invert_first_then_and) integer_empty boolean_pop))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 2 5 3 1000 1000 12 8 6 1000)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (13 2 5 3 0 0 12 8 6 0)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 1, :instruction tag_exec_512} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_integer_913} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction tag_boolean_448} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup})
Best program: (print_integer exec_pop (boolean_flush) exec_while () in1 boolean_and integer_gt tag_exec_512 () integer_lte exec_do*range (exec_shove (integer_rot boolean_rot print_integer integer_lte tag_integer_913 exec_s_when_autoconstructing (exec_s () (in4 in2) (print_integer) boolean_dup_items integer_empty boolean_swap exec_dup_items boolean_pop) () (integer_sub exec_s () (boolean_frominteger integer_eq in1 integer_flush integer_mod integer_max) (tag_boolean_448 integer_flush) integer_dup))))
Errors: [0 1 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 9.951
Median total errors in population: 10
Error averages by case: (0.987 0.998 0.995 0.997 1.0 1.0 0.988 0.992 0.994 1.0)
Error minima by case: (0 0 0 0 1 1 0 0 0 1)
Average genome size in population (length): 48.57
Average program size in population (points): 66.836
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 459702
--- Timings ---
Current time: 1559593767520 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.6%
Fitness Testing:      1.7 seconds, 66.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: 1                  
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 33                 
Correct output: -95                 | Program output: 7                  
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 17                 
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 85                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 14                 
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 34                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: 39                 
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_821} {:close 1, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_yank boolean_invert_second_then_and exec_s (boolean_pop in1) () (print_integer integer_lte) integer_gte exec_s_when_autoconstructing (integer_mod exec_shove () boolean_yank) () (boolean_dup boolean_yank boolean_invert_first_then_and) integer_sub exec_when (boolean_rot exec_rot (integer_min exec_rot (integer_empty) (boolean_swap boolean_invert_second_then_and integer_shove integer_inc integer_empty) (in3 integer_shove boolean_yank) exec_yank integer_yank boolean_dup_times integer_stackdepth boolean_or boolean_frominteger integer_max boolean_dup_times in4 integer_sub exec_do*while () exec_k (exec_noop exec_shove (in2 exec_do*range (boolean_swap boolean_xor boolean_not boolean_frominteger integer_dup exec_do*range (in1 boolean_or boolean_frominteger boolean_eq exec_do*times (integer_div exec_if () (integer_inc) exec_flush boolean_pop) integer_inc exec_dup () integer_flush tagged_821 exec_while () in3 integer_div boolean_flush exec_dup_items integer_dup_times) in3 exec_y (integer_add integer_max exec_yankdup boolean_pop) integer_empty integer_gt exec_do*range (boolean_rot boolean_dup integer_div integer_eq exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_dup_items) () ()))))) ()) () ()))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 121
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_821} {:close 1, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_yank boolean_invert_second_then_and exec_s (boolean_pop in1) () (print_integer integer_lte) integer_gte exec_s_when_autoconstructing (integer_mod exec_shove () boolean_yank) () (boolean_dup boolean_yank boolean_invert_first_then_and) integer_sub exec_when (boolean_rot exec_rot (integer_min exec_rot (integer_empty) (boolean_swap boolean_invert_second_then_and integer_shove integer_inc integer_empty) (in3 integer_shove boolean_yank) exec_yank integer_yank boolean_dup_times integer_stackdepth boolean_or boolean_frominteger integer_max boolean_dup_times in4 integer_sub exec_do*while () exec_k (exec_noop exec_shove (in2 exec_do*range (boolean_swap boolean_xor boolean_not boolean_frominteger integer_dup exec_do*range (in1 boolean_or boolean_frominteger boolean_eq exec_do*times (integer_div exec_if () (integer_inc) exec_flush boolean_pop) integer_inc exec_dup () integer_flush tagged_821 exec_while () in3 integer_div boolean_flush exec_dup_items integer_dup_times) in3 exec_y (integer_add integer_max exec_yankdup boolean_pop) integer_empty integer_gt exec_do*range (boolean_rot boolean_dup integer_div integer_eq exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_dup_items) () ()))))) ()) () ()))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 121
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 1 137 138 392 530 137 531 7)
Population mean number of elite cases: 1.88
Count of perfect (error zero) individuals by case: (2 2 1 137 138 392 530 137 531 7)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction exec_shove} {:close 0, :instruction -93} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove})
Best program: (exec_k_when_autoconstructing (boolean_swap) (boolean_stackdepth exec_empty exec_yankdup exec_when (exec_yank boolean_frominteger integer_max integer_mult print_integer in1 boolean_and print_integer exec_do*range () boolean_xor exec_k_when_autoconstructing (boolean_invert_second_then_and exec_swap (integer_min exec_shove () -93 exec_rot (exec_dup (boolean_and) integer_dup) (boolean_shove) ()) ()) ())))
Errors: [1 1 1 0 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 41
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 8.123
Median total errors in population: 7
Error averages by case: (0.998 0.998 0.999 0.863 0.862 0.608 0.47 0.863 0.469 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.17
Average program size in population (points): 68.635
Average percent parens in population: 0.279
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 909565
--- Timings ---
Current time: 1559593769505 milliseconds
Total Time:           4.7 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         1.8 seconds, 37.5%
Fitness Testing:      2.4 seconds, 50.2%
Report:               0.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 697
Test mean error for best: 0.69700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 2020               
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: 59                 
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 46                 
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 84                 
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 61                 
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 2020               
Correct output: -91                 | Program output: 67                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 79                 
Correct output: -51                 | Program output: 1919               
Correct output: -87                 | Program output: 39                 
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: 1919               
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: 66                 
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction tagged_400} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Lexicase best program: (boolean_xor in2 exec_dup_items in2 tagged_400 integer_gte boolean_pop tag_exec_702 () integer_dup_times integer_gte boolean_pop integer_mod integer_dup_times boolean_empty in1 integer_yank exec_stackdepth exec_k (exec_shove (boolean_invert_second_then_and exec_dup () integer_rot exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup in4) (exec_pop (integer_fromboolean integer_stackdepth exec_dup_times (integer_rot) integer_add boolean_invert_first_then_and) -64 boolean_shove integer_empty) tagged_780 exec_y (exec_k () (in2 exec_y ())) boolean_dup_times exec_swap (integer_gte exec_noop exec_swap (exec_do*range (integer_stackdepth print_newline boolean_dup_items) boolean_swap boolean_flush integer_mod) (integer_dup_times integer_stackdepth) exec_noop) ())
Lexicase best errors: [0 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction tagged_400} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Zero cases best program: (boolean_xor in2 exec_dup_items in2 tagged_400 integer_gte boolean_pop tag_exec_702 () integer_dup_times integer_gte boolean_pop integer_mod integer_dup_times boolean_empty in1 integer_yank exec_stackdepth exec_k (exec_shove (boolean_invert_second_then_and exec_dup () integer_rot exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup in4) (exec_pop (integer_fromboolean integer_stackdepth exec_dup_times (integer_rot) integer_add boolean_invert_first_then_and) -64 boolean_shove integer_empty) tagged_780 exec_y (exec_k () (in2 exec_y ())) boolean_dup_times exec_swap (integer_gte exec_noop exec_swap (exec_do*range (integer_stackdepth print_newline boolean_dup_items) boolean_swap boolean_flush integer_mod) (integer_dup_times integer_stackdepth) exec_noop) ())
Zero cases best errors: [0 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 88 77 69 76 510 243 59 62 244)
Population mean number of elite cases: 1.69
Count of perfect (error zero) individuals by case: (265 88 77 69 76 510 243 59 62 244)
Population mean number of perfect (error zero) cases: 1.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction tagged_400} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -64} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_stackdepth})
Best program: (boolean_xor in2 exec_dup_items in2 tagged_400 integer_gte boolean_pop tag_exec_702 () integer_dup_times integer_gte boolean_pop integer_mod integer_dup_times boolean_empty in1 integer_yank exec_stackdepth integer_dup_times exec_k (exec_shove (boolean_invert_second_then_and exec_dup () integer_rot exec_empty exec_dup_times (exec_stackdepth boolean_frominteger in2)) print_integer boolean_yankdup in4) (exec_pop (integer_fromboolean integer_stackdepth integer_rot) integer_add boolean_invert_first_then_and) -64 integer_empty exec_y (exec_k () (in2 exec_y ())) exec_swap (integer_stackdepth integer_gte exec_noop exec_swap (exec_do*range (exec_do*while (print_newline boolean_dup_items) boolean_swap boolean_shove boolean_flush integer_mod) integer_stackdepth) ()) ())
Errors: [0 0 0 0 0 1 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 75
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 8.307
Median total errors in population: 9
Error averages by case: (0.735 0.912 0.923 0.931 0.924 0.49 0.757 0.941 0.938 0.756)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.746
Average program size in population (points): 63.068
Average percent parens in population: 0.265
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1539609
--- Timings ---
Current time: 1559593772275 milliseconds
Total Time:           7.1 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.1 seconds, 43.5%
Fitness Testing:      3.1 seconds, 43.9%
Report:               0.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 568
Test mean error for best: 0.56800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Lexicase best program: (exec_dup_items in2 exec_s_when_autoconstructing () (integer_gte) (tag_exec_702 () integer_mod integer_dup_times boolean_pop) integer_mod boolean_invert_second_then_and integer_dup_times boolean_empty in1 in1 integer_yank exec_stackdepth exec_k (exec_shove (exec_dup () exec_empty exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup integer_pop in4) (exec_pop (integer_fromboolean integer_stackdepth exec_when (exec_k_when_autoconstructing (integer_add integer_sub integer_empty) (integer_gt exec_y (exec_k () (in2 exec_y ())) exec_s (boolean_dup_times exec_swap (exec_noop exec_do*range (print_newline boolean_dup) boolean_swap boolean_flush integer_stackdepth) (exec_noop)) () ())))))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 75
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Zero cases best program: (exec_dup_items in2 exec_s_when_autoconstructing () (integer_gte) (tag_exec_702 () integer_mod integer_dup_times boolean_pop) integer_mod boolean_invert_second_then_and integer_dup_times boolean_empty in1 in1 integer_yank exec_stackdepth exec_k (exec_shove (exec_dup () exec_empty exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup integer_pop in4) (exec_pop (integer_fromboolean integer_stackdepth exec_when (exec_k_when_autoconstructing (integer_add integer_sub integer_empty) (integer_gt exec_y (exec_k () (in2 exec_y ())) exec_s (boolean_dup_times exec_swap (exec_noop exec_do*range (print_newline boolean_dup) boolean_swap boolean_flush integer_stackdepth) (exec_noop)) () ())))))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 75
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (131 60 250 270 132 110 102 113 479 260)
Population mean number of elite cases: 1.91
Count of perfect (error zero) individuals by case: (131 60 250 270 132 110 102 113 479 260)
Population mean number of perfect (error zero) cases: 1.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Best program: (exec_dup_items in2 exec_s_when_autoconstructing () (integer_gte) (tag_exec_702 () integer_mod integer_dup_times boolean_pop) integer_mod boolean_invert_second_then_and integer_dup_times boolean_empty in1 in1 integer_yank exec_stackdepth exec_k (exec_shove (exec_dup () exec_empty exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup integer_pop in4) (exec_pop (integer_fromboolean integer_stackdepth exec_when (exec_k_when_autoconstructing (integer_add integer_sub integer_empty) (integer_gt exec_y (exec_k () (in2 exec_y ())) exec_s (boolean_dup_times exec_swap (exec_noop exec_do*range (print_newline boolean_dup) boolean_swap boolean_flush integer_stackdepth) (exec_noop)) () ())))))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 75
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 8.093
Median total errors in population: 7
Error averages by case: (0.869 0.94 0.75 0.73 0.868 0.89 0.898 0.887 0.521 0.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.993
Average program size in population (points): 74.175
Average percent parens in population: 0.270
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2233706
--- Timings ---
Current time: 1559593774592 milliseconds
Total Time:           9.9 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.3 seconds, 43.4%
Fitness Testing:      4.0 seconds, 40.4%
Report:               1.5 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: 59                 
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: 8                  
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 46                 
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 84                 
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 61                 
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: 67                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 79                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: 39                 
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: 19                 
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: 66                 
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction tagged_400} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -64} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Lexicase best program: (in2 exec_dup_items in2 tagged_400 integer_gte boolean_pop integer_fromboolean tag_exec_702 () integer_dup_times integer_gte boolean_pop integer_mod integer_dup_times integer_yank exec_stackdepth exec_k (exec_shove (exec_shove (boolean_invert_second_then_and exec_dup () integer_rot exec_empty exec_dup_times (boolean_frominteger in2)) integer_shove print_integer in4) exec_pop (integer_fromboolean integer_stackdepth integer_rot) integer_add boolean_invert_first_then_and) (-64 exec_y (boolean_dup) integer_mult exec_k (exec_dup (exec_k () (in2 exec_y ())) boolean_dup_times exec_swap (integer_gte integer_max integer_sub exec_swap (boolean_swap boolean_flush integer_stackdepth) (exec_noop)) ()) ()))
Lexicase best errors: [0 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction tagged_400} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -64} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Zero cases best program: (in2 exec_dup_items in2 tagged_400 integer_gte boolean_pop integer_fromboolean tag_exec_702 () integer_dup_times integer_gte boolean_pop integer_mod integer_dup_times integer_yank exec_stackdepth exec_k (exec_shove (exec_shove (boolean_invert_second_then_and exec_dup () integer_rot exec_empty exec_dup_times (boolean_frominteger in2)) integer_shove print_integer in4) exec_pop (integer_fromboolean integer_stackdepth integer_rot) integer_add boolean_invert_first_then_and) (-64 exec_y (boolean_dup) integer_mult exec_k (exec_dup (exec_k () (in2 exec_y ())) boolean_dup_times exec_swap (integer_gte integer_max integer_sub exec_swap (boolean_swap boolean_flush integer_stackdepth) (exec_noop)) ()) ()))
Zero cases best errors: [0 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 4 2 3 224 449 351 532 86 532)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (348 4 2 3 224 449 351 532 86 532)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Best program: (exec_dup_items in2 exec_s_when_autoconstructing () (integer_gte) (tag_exec_702 () integer_mod integer_dup_times boolean_pop) integer_mult boolean_invert_second_then_and integer_dup_times boolean_empty in1 integer_yank exec_stackdepth exec_k (exec_shove (exec_dup () exec_empty exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup boolean_invert_first_then_and integer_pop in4) (exec_pop (integer_fromboolean integer_stackdepth exec_when (exec_k_when_autoconstructing (integer_add integer_sub integer_empty) (integer_gt boolean_or exec_y (exec_k () (in2 exec_y ())) exec_s (boolean_dup_times exec_swap (exec_noop exec_do*range (print_newline boolean_dup) boolean_swap boolean_flush integer_stackdepth) (exec_noop)) () ())))))
Errors: [0 1 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 52
Size: 76
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.469
Median total errors in population: 7
Error averages by case: (0.652 0.996 0.998 0.997 0.776 0.551 0.649 0.468 0.914 0.468)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.229
Average program size in population (points): 67.468
Average percent parens in population: 0.294
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.186
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2700284
--- Timings ---
Current time: 1559593776588 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.4 seconds, 45.9%
Fitness Testing:      4.5 seconds, 38.2%
Report:               1.8 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 568
Test mean error for best: 0.56800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop})
Lexicase best program: (exec_dup_items in2 exec_s_when_autoconstructing () (integer_gte) (tag_exec_702 () integer_mod integer_dup_times boolean_pop) integer_mod boolean_invert_second_then_and integer_dup_times boolean_empty boolean_and in1 in3 boolean_yankdup in1 integer_yank exec_stackdepth exec_k (exec_shove (exec_empty exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup integer_pop in4) (integer_stackdepth exec_when (exec_k_when_autoconstructing (integer_add integer_sub integer_empty) (exec_k () (in2 boolean_dup_times exec_swap (exec_noop print_newline boolean_dup) (in3 boolean_swap boolean_flush boolean_dup_items exec_noop))))))
Lexicase best errors: [0 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 63
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop})
Zero cases best program: (exec_dup_items in2 exec_s_when_autoconstructing () (integer_gte) (tag_exec_702 () integer_mod integer_dup_times boolean_pop) integer_mod boolean_invert_second_then_and integer_dup_times boolean_empty boolean_and in1 in3 boolean_yankdup in1 integer_yank exec_stackdepth exec_k (exec_shove (exec_empty exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup integer_pop in4) (integer_stackdepth exec_when (exec_k_when_autoconstructing (integer_add integer_sub integer_empty) (exec_k () (in2 boolean_dup_times exec_swap (exec_noop print_newline boolean_dup) (in3 boolean_swap boolean_flush boolean_dup_items exec_noop))))))
Zero cases best errors: [0 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 63
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 49 138 238 71 80 57 263 456 472)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (236 49 138 238 71 80 57 263 456 472)
Population mean number of perfect (error zero) cases: 2.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 2, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Best program: (exec_if (exec_dup_items in2 exec_s_when_autoconstructing () (tag_exec_702 () integer_mod integer_swap integer_dup_times boolean_pop) (integer_mod boolean_invert_second_then_and integer_dup_times boolean_empty in1 in1) integer_yank) (exec_stackdepth exec_k (exec_shove (exec_dup () exec_empty exec_dup_times (boolean_frominteger in2)) print_integer integer_shove boolean_yankdup integer_pop in4) (exec_pop (integer_fromboolean integer_stackdepth exec_k_when_autoconstructing (exec_pop (integer_sub integer_empty) exec_y (boolean_invert_first_then_and exec_k () (in2 exec_y ())) exec_s (boolean_dup_times integer_lt exec_swap (exec_do*range (print_newline integer_dup)) (boolean_dup) boolean_swap boolean_flush integer_stackdepth) (exec_noop) ()) ()))))
Errors: [0 0 1 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 79
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 7.94
Median total errors in population: 8
Error averages by case: (0.764 0.951 0.862 0.762 0.929 0.92 0.943 0.737 0.544 0.528)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.235
Average program size in population (points): 66.202
Average percent parens in population: 0.279
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3304250
--- Timings ---
Current time: 1559593778677 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.6 seconds, 47.3%
Fitness Testing:      5.2 seconds, 37.2%
Report:               2.1 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -64} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_pop})
Lexicase best program: (boolean_xor exec_dup_items boolean_pop boolean_not integer_dup_times in3 boolean_pop integer_mod integer_dup_times in1 integer_min integer_fromboolean integer_yank exec_stackdepth exec_pop () exec_k (exec_shove (exec_eq boolean_invert_second_then_and exec_dup () integer_rot exec_dup_times (boolean_frominteger in2)) boolean_shove print_integer in4) (boolean_rot exec_pop (integer_fromboolean boolean_dup_items integer_stackdepth integer_add boolean_invert_first_then_and) -64 boolean_shove tagged_780 exec_y (exec_k () (in2 exec_y ())) exec_shove () exec_swap (print_exec (integer_gte exec_noop exec_swap (exec_do*range (integer_stackdepth print_newline boolean_dup_items) boolean_swap boolean_invert_first_then_and) (boolean_flush integer_mod) integer_rot) integer_stackdepth) (exec_pop ())))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -64} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_pop})
Zero cases best program: (boolean_xor exec_dup_items boolean_pop boolean_not integer_dup_times in3 boolean_pop integer_mod integer_dup_times in1 integer_min integer_fromboolean integer_yank exec_stackdepth exec_pop () exec_k (exec_shove (exec_eq boolean_invert_second_then_and exec_dup () integer_rot exec_dup_times (boolean_frominteger in2)) boolean_shove print_integer in4) (boolean_rot exec_pop (integer_fromboolean boolean_dup_items integer_stackdepth integer_add boolean_invert_first_then_and) -64 boolean_shove tagged_780 exec_y (exec_k () (in2 exec_y ())) exec_shove () exec_swap (print_exec (integer_gte exec_noop exec_swap (exec_do*range (integer_stackdepth print_newline boolean_dup_items) boolean_swap boolean_invert_first_then_and) (boolean_flush integer_mod) integer_rot) integer_stackdepth) (exec_pop ())))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 221 220 181 359 172 56 178 207 75)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (432 221 220 181 359 172 56 178 207 75)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -64} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_780} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_pop})
Best program: (boolean_xor exec_dup_items boolean_pop boolean_not integer_dup_times in3 boolean_pop integer_mod integer_dup_times in1 integer_min integer_yank exec_stackdepth boolean_or exec_pop () exec_k (exec_shove (exec_dup () exec_y () exec_dup_times (boolean_frominteger in2)) boolean_shove print_integer boolean_yankdup boolean_rot exec_pop (integer_fromboolean exec_pop (boolean_dup_items integer_stackdepth integer_add boolean_invert_first_then_and) -64 boolean_shove tagged_780 exec_k () (in2 exec_y ())) boolean_flush exec_shove () exec_swap (print_exec (integer_gte exec_swap (exec_do*range (integer_stackdepth print_newline boolean_dup_items) boolean_swap boolean_flush integer_mod) (integer_rot) integer_stackdepth) exec_pop ()) ()) ())
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 55
Size: 76
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 7.899
Median total errors in population: 8
Error averages by case: (0.568 0.779 0.78 0.819 0.641 0.828 0.944 0.822 0.793 0.925)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.862
Average program size in population (points): 66.747
Average percent parens in population: 0.260
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3851087
--- Timings ---
Current time: 1559593780933 milliseconds
Total Time:          16.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.7 seconds, 48.5%
Fitness Testing:      5.8 seconds, 36.2%
Report:               2.3 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 568
Test mean error for best: 0.56800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_gte} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop})
Lexicase best program: (exec_dup_items in2 integer_gte tag_exec_702 () integer_mod integer_dup_times boolean_pop boolean_invert_second_then_and integer_dup_times boolean_empty boolean_and in1 in3 boolean_rot boolean_yankdup in1 integer_yank exec_stackdepth exec_k (exec_shove (exec_empty exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup exec_shove (integer_stackdepth exec_when (exec_k_when_autoconstructing (integer_add integer_sub integer_empty) (exec_k () (exec_s (in2 boolean_dup_times exec_swap (integer_add exec_do*while (exec_noop print_newline exec_do*count (in3 boolean_swap boolean_flush boolean_dup_items boolean_empty integer_dup exec_noop))) ()) () ()))))) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 69
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_gte} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop})
Zero cases best program: (exec_dup_items in2 integer_gte tag_exec_702 () integer_mod integer_dup_times boolean_pop boolean_invert_second_then_and integer_dup_times boolean_empty boolean_and in1 in3 boolean_rot boolean_yankdup in1 integer_yank exec_stackdepth exec_k (exec_shove (exec_empty exec_dup_times (boolean_frominteger in2)) print_integer boolean_yankdup exec_shove (integer_stackdepth exec_when (exec_k_when_autoconstructing (integer_add integer_sub integer_empty) (exec_k () (exec_s (in2 boolean_dup_times exec_swap (integer_add exec_do*while (exec_noop print_newline exec_do*count (in3 boolean_swap boolean_flush boolean_dup_items boolean_empty integer_dup exec_noop))) ()) () ()))))) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 69
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (130 502 99 128 205 506 127 126 198 203)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (130 502 99 128 205 506 127 126 198 203)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_702} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 2, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop})
Best program: (exec_if (boolean_or exec_dup_items in2 exec_s_when_autoconstructing () (tag_exec_702 () integer_mod integer_swap integer_dup_times boolean_pop) (integer_mod boolean_invert_second_then_and integer_dup_times boolean_empty in1 in1) integer_yank) (exec_stackdepth exec_shove (exec_dup () exec_empty exec_dup_times (boolean_frominteger in2)) print_integer integer_shove boolean_yankdup in4) exec_pop (integer_eq integer_fromboolean boolean_shove integer_stackdepth exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_gte exec_pop (integer_empty) exec_y (boolean_invert_first_then_and exec_k () (in2 exec_y ())) exec_s (boolean_dup_times integer_lt exec_swap (integer_dup_items exec_do*range (boolean_swap print_newline integer_dup)) (boolean_swap boolean_flush integer_stackdepth) exec_noop) () ()) ())))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 56
Size: 81
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 7.776
Median total errors in population: 8
Error averages by case: (0.87 0.498 0.901 0.872 0.795 0.494 0.873 0.874 0.802 0.797)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.116
Average program size in population (points): 61.163
Average percent parens in population: 0.251
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4447050
--- Timings ---
Current time: 1559593783137 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.9 seconds, 48.7%
Fitness Testing:      6.4 seconds, 35.0%
Report:               2.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_461} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_eq} {:close 2, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -64} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 1, :instruction exec_pop})
Lexicase best program: (boolean_xor tag_integer_461 exec_dup_items boolean_pop boolean_not integer_dup_times in3 integer_mod integer_min boolean_yank integer_dup_times exec_k_when_autoconstructing (in1 integer_min exec_stackdepth exec_k (exec_shove (boolean_invert_second_then_and exec_dup () integer_rot boolean_frominteger exec_eq)) (in2)) (integer_mod boolean_shove print_integer in4) boolean_rot boolean_pop boolean_dup_items integer_stackdepth -64 boolean_shove tagged_780 exec_y (exec_k () (in2 boolean_flush integer_gt exec_swap (integer_gte exec_y () exec_swap (exec_do*range (exec_yankdup) integer_stackdepth print_newline boolean_dup_items) (boolean_stackdepth integer_max boolean_not boolean_invert_first_then_and) boolean_flush integer_mod) (integer_rot) integer_div) exec_pop ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 74
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_461} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_eq} {:close 2, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -64} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 1, :instruction exec_pop})
Zero cases best program: (boolean_xor tag_integer_461 exec_dup_items boolean_pop boolean_not integer_dup_times in3 integer_mod integer_min boolean_yank integer_dup_times exec_k_when_autoconstructing (in1 integer_min exec_stackdepth exec_k (exec_shove (boolean_invert_second_then_and exec_dup () integer_rot boolean_frominteger exec_eq)) (in2)) (integer_mod boolean_shove print_integer in4) boolean_rot boolean_pop boolean_dup_items integer_stackdepth -64 boolean_shove tagged_780 exec_y (exec_k () (in2 boolean_flush integer_gt exec_swap (integer_gte exec_y () exec_swap (exec_do*range (exec_yankdup) integer_stackdepth print_newline boolean_dup_items) (boolean_stackdepth integer_max boolean_not boolean_invert_first_then_and) boolean_flush integer_mod) (integer_rot) integer_div) exec_pop ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 74
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 55 114 280 544 175 174 179 229 222)
Population mean number of elite cases: 2.12
Count of perfect (error zero) individuals by case: (148 55 114 280 544 175 174 179 229 222)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 2, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction -64} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Best program: (exec_dup_items integer_fromboolean boolean_not integer_dup_times integer_dup integer_yankdup integer_lt in3 boolean_pop integer_mod integer_dup_times integer_lt in1 integer_min exec_stackdepth exec_k (exec_eq exec_shove (boolean_invert_second_then_and exec_dup () integer_pop boolean_invert_second_then_and exec_dup_times (integer_yankdup boolean_xor in2)) boolean_shove print_integer boolean_yankdup exec_do*times (integer_add) exec_y_when_autoconstructing (in4) exec_pop (boolean_dup_items integer_stackdepth integer_add -64 boolean_shove boolean_and exec_y (exec_k (exec_k () (exec_y ())) (boolean_flush exec_shove () exec_swap (print_exec (integer_gte exec_noop exec_do*range (boolean_shove integer_stackdepth boolean_dup_items) integer_add boolean_swap boolean_invert_first_then_and) exec_swap () (boolean_flush integer_mod) integer_rot) (integer_stackdepth) integer_min)))) ())
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 63
Size: 85
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 7.88
Median total errors in population: 8
Error averages by case: (0.852 0.945 0.886 0.72 0.456 0.825 0.826 0.821 0.771 0.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.98
Average program size in population (points): 68.256
Average percent parens in population: 0.261
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5061391
--- Timings ---
Current time: 1559593785173 milliseconds
Total Time:          20.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.0 seconds, 48.8%
Fitness Testing:      7.1 seconds, 34.4%
Report:               3.3 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 449
Test mean error for best: 0.44900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (boolean_xor boolean_not boolean_pop integer_mod boolean_yankdup integer_dup_times in1 in2 integer_min exec_stackdepth exec_pop () exec_k (exec_shove (boolean_invert_second_then_and exec_dup () boolean_invert_first_then_and boolean_frominteger exec_y_when_autoconstructing (in2)) print_integer integer_lte boolean_rot exec_dup (integer_fromboolean boolean_dup_items integer_stackdepth integer_add boolean_invert_first_then_and) integer_add boolean_shove exec_y (exec_k () (in1 integer_mult exec_y ())) boolean_flush integer_lt integer_mult exec_noop exec_swap (exec_do*range (print_boolean) exec_eq boolean_flush integer_mod) (integer_rot) integer_stackdepth) ())
Lexicase best errors: [0 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 62
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (boolean_xor boolean_not boolean_pop integer_mod boolean_yankdup integer_dup_times in1 in2 integer_min exec_stackdepth exec_pop () exec_k (exec_shove (boolean_invert_second_then_and exec_dup () boolean_invert_first_then_and boolean_frominteger exec_y_when_autoconstructing (in2)) print_integer integer_lte boolean_rot exec_dup (integer_fromboolean boolean_dup_items integer_stackdepth integer_add boolean_invert_first_then_and) integer_add boolean_shove exec_y (exec_k () (in1 integer_mult exec_y ())) boolean_flush integer_lt integer_mult exec_noop exec_swap (exec_do*range (print_boolean) exec_eq boolean_flush integer_mod) (integer_rot) integer_stackdepth) ())
Zero cases best errors: [0 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 62
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 205 341 225 142 211 223 459 151 211)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (203 205 341 225 142 211 223 459 151 211)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_boolean_934} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot})
Best program: (boolean_xor boolean_pop boolean_not in3 exec_s_when_autoconstructing () (boolean_frominteger boolean_pop) (integer_mod integer_dup_times in1 in2 integer_min exec_stackdepth exec_pop () tag_boolean_934 exec_shove (boolean_swap exec_dup () boolean_frominteger exec_y_when_autoconstructing (in2)) boolean_shove print_integer boolean_yankdup integer_lte boolean_rot exec_dup (integer_fromboolean boolean_dup_items exec_s (integer_stackdepth boolean_invert_first_then_and) (integer_add tagged_780 exec_y (exec_k () (in2 exec_y ())) boolean_flush integer_mult print_exec (integer_gte exec_noop exec_flush exec_swap (exec_do*range (print_newline boolean_dup_items) exec_eq boolean_flush integer_mod) (integer_rot))) ())))
Errors: [0 0 1 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 52
Size: 72
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.629
Median total errors in population: 8
Error averages by case: (0.797 0.795 0.659 0.775 0.858 0.789 0.777 0.541 0.849 0.789)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.093
Average program size in population (points): 64.968
Average percent parens in population: 0.237
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5760194
--- Timings ---
Current time: 1559593787811 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.1 seconds, 49.4%
Fitness Testing:      7.8 seconds, 34.4%
Report:               3.6 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 364
Test mean error for best: 0.36400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_pop})
Lexicase best program: (boolean_xor exec_dup_items boolean_pop boolean_not in3 boolean_dup_times boolean_pop integer_mod in1 exec_yank in2 integer_min exec_stackdepth exec_k (boolean_shove exec_shove (boolean_invert_second_then_and exec_dup () exec_y_when_autoconstructing (in2)) boolean_shove print_integer boolean_yankdup integer_lte boolean_rot exec_dup (integer_empty) integer_fromboolean boolean_dup_items integer_stackdepth integer_mod integer_fromboolean integer_add integer_add integer_swap boolean_shove tagged_780 exec_y (exec_k () (in2 exec_y ())) boolean_flush integer_mult print_exec (integer_gte exec_noop exec_swap (exec_do*range (boolean_empty print_newline boolean_dup_items) exec_eq exec_do*times (boolean_flush exec_dup (integer_mod) integer_fromboolean) integer_stackdepth) (exec_pop ()))) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 77
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_pop})
Zero cases best program: (boolean_xor exec_dup_items boolean_pop boolean_not in3 boolean_dup_times boolean_pop integer_mod in1 exec_yank in2 integer_min exec_stackdepth exec_k (boolean_shove exec_shove (boolean_invert_second_then_and exec_dup () exec_y_when_autoconstructing (in2)) boolean_shove print_integer boolean_yankdup integer_lte boolean_rot exec_dup (integer_empty) integer_fromboolean boolean_dup_items integer_stackdepth integer_mod integer_fromboolean integer_add integer_add integer_swap boolean_shove tagged_780 exec_y (exec_k () (in2 exec_y ())) boolean_flush integer_mult print_exec (integer_gte exec_noop exec_swap (exec_do*range (boolean_empty print_newline boolean_dup_items) exec_eq exec_do*times (boolean_flush exec_dup (integer_mod) integer_fromboolean) integer_stackdepth) (exec_pop ()))) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 77
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 358 321 265 341 535 265 279 236 262)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (191 358 321 265 341 535 265 279 236 262)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_66} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_899} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop})
Best program: (in4 boolean_flush tagged_66 in2 boolean_dup_times in3 integer_swap in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_add integer_inc exec_empty in4 in4 boolean_swap exec_do*count () boolean_eq exec_swap () (exec_yankdup) integer_yank integer_max boolean_eq exec_noop boolean_yankdup tagged_899 boolean_not integer_dup_times exec_dup (integer_fromboolean) boolean_pop)
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 35
Size: 40
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 6.947
Median total errors in population: 7
Error averages by case: (0.809 0.642 0.679 0.735 0.659 0.465 0.735 0.721 0.764 0.738)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.664
Average program size in population (points): 62.672
Average percent parens in population: 0.233
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6511386
--- Timings ---
Current time: 1559593790105 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.3 seconds, 48.5%
Fitness Testing:      8.5 seconds, 33.8%
Report:               4.4 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 452
Test mean error for best: 0.45200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_934} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 3, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_pop})
Lexicase best program: (boolean_xor boolean_dup_times boolean_pop boolean_not in3 exec_s_when_autoconstructing () (integer_pop integer_mod integer_dup_times in1 in2 integer_min exec_stackdepth tag_boolean_934 exec_shove (exec_dup () integer_swap boolean_frominteger in2)) (integer_eq boolean_shove print_integer boolean_yankdup integer_lte boolean_rot exec_dup (boolean_shove integer_fromboolean exec_s (integer_stackdepth integer_add integer_add tagged_780 exec_y (boolean_eq)) () (exec_k () (in2 integer_shove exec_y ())) boolean_flush integer_mult integer_gte exec_noop exec_swap (exec_do*times (integer_empty exec_do*range (print_newline boolean_dup_items) exec_eq exec_flush) boolean_flush integer_sub integer_mod) (integer_rot) exec_pop ())))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 75
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_934} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_780} {:close 0, :instruction exec_y} {:close 3, :instruction boolean_eq} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 3, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_pop})
Zero cases best program: (boolean_xor boolean_dup_times boolean_pop boolean_not in3 exec_s_when_autoconstructing () (integer_pop integer_mod integer_dup_times in1 in2 integer_min exec_stackdepth tag_boolean_934 exec_shove (exec_dup () integer_swap boolean_frominteger in2)) (integer_eq boolean_shove print_integer boolean_yankdup integer_lte boolean_rot exec_dup (boolean_shove integer_fromboolean exec_s (integer_stackdepth integer_add integer_add tagged_780 exec_y (boolean_eq)) () (exec_k () (in2 integer_shove exec_y ())) boolean_flush integer_mult integer_gte exec_noop exec_swap (exec_do*times (integer_empty exec_do*range (print_newline boolean_dup_items) exec_eq exec_flush) boolean_flush integer_sub integer_mod) (integer_rot) exec_pop ())))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 75
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 343 110 534 46 106 338 351 479 358)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (108 343 110 534 46 106 338 351 479 358)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_66} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_899} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop})
Best program: (boolean_flush tagged_66 in2 boolean_dup_times in3 integer_swap in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_add integer_yank integer_inc exec_empty in4 in4 boolean_swap exec_do*count () boolean_eq exec_swap () (integer_inc exec_yankdup) integer_yank integer_max boolean_eq exec_noop boolean_yankdup tagged_899 boolean_not integer_dup_times exec_dup (integer_fromboolean) boolean_pop)
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 36
Size: 41
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 7.227
Median total errors in population: 7
Error averages by case: (0.892 0.657 0.89 0.466 0.954 0.894 0.662 0.649 0.521 0.642)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.558
Average program size in population (points): 63.442
Average percent parens in population: 0.227
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.009
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7222490
--- Timings ---
Current time: 1559593792412 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.4 seconds, 48.6%
Fitness Testing:      9.3 seconds, 33.8%
Report:               4.8 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 393
Test mean error for best: 0.39300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_290} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 2, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_xor exec_yank boolean_and tagged_290 exec_dup_items boolean_pop boolean_not integer_gte integer_dup_times in3 boolean_dup_times in1 integer_min integer_yank exec_rot (exec_stackdepth exec_k (tagged_433 exec_shove (boolean_invert_second_then_and exec_dup () exec_dup_times (exec_dup (in2)) integer_yankdup boolean_shove print_integer in4) exec_pop (integer_fromboolean integer_stackdepth in1 boolean_shove integer_stackdepth exec_y (boolean_dup) exec_k () (boolean_dup_items boolean_rot exec_swap (exec_dup_times ()) (integer_gte boolean_swap print_newline boolean_dup_items) exec_pop ()) integer_eq) integer_dup_times integer_rot) (integer_stackdepth) exec_stackdepth) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_290} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 2, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_xor exec_yank boolean_and tagged_290 exec_dup_items boolean_pop boolean_not integer_gte integer_dup_times in3 boolean_dup_times in1 integer_min integer_yank exec_rot (exec_stackdepth exec_k (tagged_433 exec_shove (boolean_invert_second_then_and exec_dup () exec_dup_times (exec_dup (in2)) integer_yankdup boolean_shove print_integer in4) exec_pop (integer_fromboolean integer_stackdepth in1 boolean_shove integer_stackdepth exec_y (boolean_dup) exec_k () (boolean_dup_items boolean_rot exec_swap (exec_dup_times ()) (integer_gte boolean_swap print_newline boolean_dup_items) exec_pop ()) integer_eq) integer_dup_times integer_rot) (integer_stackdepth) exec_stackdepth) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (609 408 396 395 380 83 157 616 352 642)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (609 408 396 395 380 83 157 616 352 642)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_290} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_433} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 2, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_xor exec_yank boolean_and tagged_290 exec_dup_items boolean_pop boolean_not integer_gte integer_dup_times in3 boolean_dup_times in1 integer_min integer_yank exec_rot (exec_stackdepth exec_k (tagged_433 exec_shove (boolean_invert_second_then_and exec_dup () exec_dup_times (exec_dup (in2)) integer_yankdup boolean_shove print_integer in4) exec_pop (integer_fromboolean integer_stackdepth in1 boolean_shove integer_stackdepth exec_y (boolean_dup) exec_k () (boolean_dup_items boolean_rot exec_swap (exec_dup_times ()) (integer_gte boolean_swap print_newline boolean_dup_items) exec_pop ()) integer_eq) integer_dup_times integer_rot) (integer_stackdepth) exec_stackdepth) () ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 5.962
Median total errors in population: 5
Error averages by case: (0.391 0.592 0.604 0.605 0.62 0.917 0.843 0.384 0.648 0.358)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.079
Average program size in population (points): 54.38
Average percent parens in population: 0.192
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.01
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8065219
--- Timings ---
Current time: 1559593794645 milliseconds
Total Time:          29.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.5 seconds, 48.7%
Fitness Testing:     10.1 seconds, 33.8%
Report:               5.1 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -4                 
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -2                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 2, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (in4 boolean_flush exec_k (in2) () integer_dup boolean_stackdepth integer_sub boolean_dup_times in3 integer_swap boolean_eq print_boolean boolean_swap integer_yank integer_shove integer_rot integer_min boolean_xor print_integer integer_inc integer_fromboolean boolean_yank exec_empty exec_empty boolean_swap integer_fromboolean in4 exec_do*count () boolean_eq integer_add boolean_dup_times exec_swap () (boolean_stackdepth) exec_s (boolean_eq exec_swap (exec_noop boolean_yankdup boolean_invert_second_then_and boolean_not) (exec_do*count (integer_dup_times exec_empty integer_min integer_mult integer_mod) exec_k_when_autoconstructing (boolean_invert_first_then_and) ())) () ())
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 2, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (in4 boolean_flush exec_k (in2) () integer_dup boolean_stackdepth integer_sub boolean_dup_times in3 integer_swap boolean_eq print_boolean boolean_swap integer_yank integer_shove integer_rot integer_min boolean_xor print_integer integer_inc integer_fromboolean boolean_yank exec_empty exec_empty boolean_swap integer_fromboolean in4 exec_do*count () boolean_eq integer_add boolean_dup_times exec_swap () (boolean_stackdepth) exec_s (boolean_eq exec_swap (exec_noop boolean_yankdup boolean_invert_second_then_and boolean_not) (exec_do*count (integer_dup_times exec_empty integer_min integer_mult integer_mod) exec_k_when_autoconstructing (boolean_invert_first_then_and) ())) () ())
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (132 273 230 121 277 200 130 244 423 377)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (132 273 230 121 277 200 130 244 423 377)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 2, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (in4 boolean_flush exec_k (in2) () integer_dup boolean_stackdepth integer_sub boolean_dup_times in3 integer_swap boolean_eq print_boolean boolean_swap integer_yank integer_shove integer_rot integer_min boolean_xor print_integer integer_inc integer_fromboolean boolean_yank exec_empty exec_empty boolean_swap integer_fromboolean in4 exec_do*count () boolean_eq integer_add boolean_dup_times exec_swap () (boolean_stackdepth) exec_s (boolean_eq exec_swap (exec_noop boolean_yankdup boolean_invert_second_then_and boolean_not) (exec_do*count (integer_dup_times exec_empty integer_min integer_mult integer_mod) exec_k_when_autoconstructing (boolean_invert_first_then_and) ())) () ())
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 48
Size: 62
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.593
Median total errors in population: 8
Error averages by case: (0.868 0.727 0.77 0.879 0.723 0.8 0.87 0.756 0.577 0.623)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.15
Average program size in population (points): 55.31
Average percent parens in population: 0.228
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.009
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8738723
--- Timings ---
Current time: 1559593796833 milliseconds
Total Time:          31.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.7 seconds, 49.1%
Fitness Testing:     10.7 seconds, 33.5%
Report:               5.5 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 350
Test mean error for best: 0.35000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -31                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -4                 
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -2                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_66} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_899} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop})
Lexicase best program: (in4 boolean_flush integer_min tagged_66 in2 boolean_dup_times in1 in4 integer_yank integer_shove integer_min integer_fromboolean boolean_xor print_integer integer_gt integer_add integer_inc exec_empty integer_swap in4 boolean_swap exec_do*count () boolean_dup_times exec_eq boolean_eq exec_do*range (exec_yankdup) in4 integer_yank exec_do*range (integer_max exec_dup_times (integer_max) exec_noop tagged_899 exec_shove (exec_do*range (integer_dup boolean_not) exec_dup (integer_fromboolean) boolean_pop)))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 50
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_66} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_899} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop})
Zero cases best program: (in4 boolean_flush integer_min tagged_66 in2 boolean_dup_times in1 in4 integer_yank integer_shove integer_min integer_fromboolean boolean_xor print_integer integer_gt integer_add integer_inc exec_empty integer_swap in4 boolean_swap exec_do*count () boolean_dup_times exec_eq boolean_eq exec_do*range (exec_yankdup) in4 integer_yank exec_do*range (integer_max exec_dup_times (integer_max) exec_noop tagged_899 exec_shove (exec_do*range (integer_dup boolean_not) exec_dup (integer_fromboolean) boolean_pop)))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 50
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (627 36 373 319 419 222 476 358 301 356)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (627 36 373 319 419 222 476 358 301 356)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_540})
Best program: (in4 exec_s_when_autoconstructing (boolean_flush exec_if () (in2)) (boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor) (print_integer integer_mult integer_add exec_eq) integer_inc exec_empty integer_swap in4 boolean_swap boolean_eq exec_swap () (exec_yankdup) integer_max in2 boolean_eq exec_noop boolean_yankdup boolean_not boolean_dup integer_dup_times exec_s_when_autoconstructing (integer_div boolean_xor exec_dup (tagged_540)) () ())
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 6.513
Median total errors in population: 6
Error averages by case: (0.373 0.964 0.627 0.681 0.581 0.778 0.524 0.642 0.699 0.644)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.373
Average program size in population (points): 48.259
Average percent parens in population: 0.193
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9465500
--- Timings ---
Current time: 1559593798855 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.8 seconds, 49.3%
Fitness Testing:     11.3 seconds, 33.2%
Report:               5.9 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 386
Test mean error for best: 0.38600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -23                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_540})
Lexicase best program: (in4 exec_s_when_autoconstructing (in1) (boolean_flush exec_if () (in2)) (boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor) print_integer integer_dec integer_add exec_eq integer_inc exec_empty in4 boolean_swap boolean_eq exec_swap () (integer_mod exec_yankdup) integer_max in2 boolean_eq exec_noop boolean_yankdup boolean_not boolean_dup integer_dup_times exec_s_when_autoconstructing (integer_div boolean_xor exec_dup (tagged_540)) () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_540})
Zero cases best program: (in4 exec_s_when_autoconstructing (in1) (boolean_flush exec_if () (in2)) (boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor) print_integer integer_dec integer_add exec_eq integer_inc exec_empty in4 boolean_swap boolean_eq exec_swap () (integer_mod exec_yankdup) integer_max in2 boolean_eq exec_noop boolean_yankdup boolean_not boolean_dup integer_dup_times exec_s_when_autoconstructing (integer_div boolean_xor exec_dup (tagged_540)) () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (379 563 383 463 233 707 445 57 58 650)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (379 563 383 463 233 707 445 57 58 650)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_540})
Best program: (in4 exec_s_when_autoconstructing (in1) (boolean_flush exec_if () (in2)) (boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor) print_integer integer_dec integer_add exec_eq integer_inc exec_empty in4 boolean_swap boolean_eq exec_swap () (integer_mod exec_yankdup) integer_max in2 boolean_eq exec_noop boolean_yankdup boolean_not boolean_dup integer_dup_times exec_s_when_autoconstructing (integer_div boolean_xor exec_dup (tagged_540)) () ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 6.062
Median total errors in population: 5
Error averages by case: (0.621 0.437 0.617 0.537 0.767 0.293 0.555 0.943 0.942 0.35)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.628
Average program size in population (points): 48.77
Average percent parens in population: 0.199
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 10088492
--- Timings ---
Current time: 1559593800829 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.9 seconds, 49.7%
Fitness Testing:     11.9 seconds, 32.9%
Report:               6.2 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 315
Test mean error for best: 0.31500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 43                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 52                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 46                 
Correct output: 22                  | Program output: 72                 
Correct output: 5                   | Program output: 95                 
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 54                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 53                 
Correct output: 16                  | Program output: 37                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 12                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 76                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 45                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 69                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction tagged_66} {:close 2, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_899} {:close 1, :instruction boolean_not} {:close 1, :instruction 67} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 tagged_66 in2 in4 boolean_dup_times in3 in1 in1 integer_shove integer_min boolean_xor exec_while () exec_k (print_integer in4 boolean_eq) (exec_yankdup) integer_max boolean_eq exec_noop integer_swap integer_dec boolean_yankdup tagged_899 boolean_not 67 boolean_stackdepth boolean_empty integer_dup_times exec_do*count (exec_dup ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction tagged_66} {:close 2, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_899} {:close 1, :instruction boolean_not} {:close 1, :instruction 67} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 tagged_66 in2 in4 boolean_dup_times in3 in1 in1 integer_shove integer_min boolean_xor exec_while () exec_k (print_integer in4 boolean_eq) (exec_yankdup) integer_max boolean_eq exec_noop integer_swap integer_dec boolean_yankdup tagged_899 boolean_not 67 boolean_stackdepth boolean_empty integer_dup_times exec_do*count (exec_dup ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (617 398 77 75 425 410 450 732 425 702)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (617 398 77 75 425 410 450 732 425 702)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction tagged_66} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush})
Best program: (in4 integer_dup tagged_66 in3 in1 in1 integer_shove integer_min boolean_xor print_integer integer_inc exec_y (in4 in4) boolean_eq integer_yank exec_noop integer_swap boolean_yankdup exec_y (exec_stackdepth integer_dup_times exec_flush))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 23
Size: 26
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 5.689
Median total errors in population: 5
Error averages by case: (0.383 0.602 0.923 0.925 0.575 0.59 0.55 0.268 0.575 0.298)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.311
Average program size in population (points): 43.415
Average percent parens in population: 0.200
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.01
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 10568053
--- Timings ---
Current time: 1559593803122 milliseconds
Total Time:          38.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.1 seconds, 50.2%
Fitness Testing:     12.4 seconds, 32.5%
Report:               6.4 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 355
Test mean error for best: 0.35500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_66} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_899} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_yank boolean_shove in4 integer_mult boolean_flush tagged_66 boolean_dup_times in2 in3 integer_min boolean_and in1 integer_shove exec_do*while (integer_min boolean_xor) print_integer integer_dup integer_stackdepth exec_do*count () integer_lte integer_rot boolean_eq integer_yank integer_max boolean_pop boolean_eq exec_pop (boolean_yankdup tagged_899 boolean_not) integer_dup_times exec_dup ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 38
Percent parens: 0.132
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_66} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_899} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_yank boolean_shove in4 integer_mult boolean_flush tagged_66 boolean_dup_times in2 in3 integer_min boolean_and in1 integer_shove exec_do*while (integer_min boolean_xor) print_integer integer_dup integer_stackdepth exec_do*count () integer_lte integer_rot boolean_eq integer_yank integer_max boolean_pop boolean_eq exec_pop (boolean_yankdup tagged_899 boolean_not) integer_dup_times exec_dup ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 38
Percent parens: 0.132
--- Lexicase Population Statistics ---
Count of elite individuals by case: (569 345 473 740 292 344 378 418 414 229)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (569 345 473 740 292 344 378 418 414 229)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_66} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_899} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop})
Best program: (in4 boolean_invert_second_then_and boolean_flush boolean_swap tagged_66 in2 in3 boolean_dup_times in1 in4 integer_yank integer_shove integer_min integer_fromboolean boolean_xor print_integer integer_add integer_swap boolean_rot integer_inc exec_empty integer_swap in4 boolean_swap exec_do*count () integer_dec exec_do*range () boolean_yank boolean_eq exec_yankdup in4 exec_dup (integer_yank) exec_dup_times (boolean_dup_items exec_noop tagged_899 boolean_yankdup exec_k (exec_do*while (exec_do*range (integer_dup integer_dup boolean_not) exec_dup (integer_sub integer_fromboolean) boolean_pop)) ()))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 5.798
Median total errors in population: 5
Error averages by case: (0.431 0.655 0.527 0.26 0.708 0.656 0.622 0.582 0.586 0.771)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.756
Average program size in population (points): 42.246
Average percent parens in population: 0.193
Minimum age in population: 17.0
Maximum age in population: 17.0
Average age in population: 17.0
Median age in population: 17.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.01
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 11097081
--- Timings ---
Current time: 1559593805189 milliseconds
Total Time:          40.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.2 seconds, 50.1%
Fitness Testing:     12.9 seconds, 31.9%
Report:               7.1 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 386
Test mean error for best: 0.38600
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -23                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_66} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_899} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_yank boolean_shove in4 boolean_flush boolean_dup_times tagged_66 boolean_dup_times boolean_empty in2 in3 integer_min in1 exec_do*while (integer_min boolean_xor) print_integer exec_k () (integer_dup integer_stackdepth exec_do*count () boolean_eq) integer_yank integer_max boolean_pop exec_pop (boolean_yankdup tagged_899 integer_rot boolean_not) integer_dup_times exec_dup ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 38
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_66} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_899} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_yank boolean_shove in4 boolean_flush boolean_dup_times tagged_66 boolean_dup_times boolean_empty in2 in3 integer_min in1 exec_do*while (integer_min boolean_xor) print_integer exec_k () (integer_dup integer_stackdepth exec_do*count () boolean_eq) integer_yank integer_max boolean_pop exec_pop (boolean_yankdup tagged_899 integer_rot boolean_not) integer_dup_times exec_dup ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (635 686 366 470 477 453 346 372 467 477)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (635 686 366 470 477 453 346 372 467 477)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_540} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when})
Best program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 5.251
Median total errors in population: 5
Error averages by case: (0.365 0.314 0.634 0.53 0.523 0.547 0.654 0.628 0.533 0.523)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.229
Average program size in population (points): 46.916
Average percent parens in population: 0.201
Minimum age in population: 18.0
Maximum age in population: 18.0
Average age in population: 18.0
Median age in population: 18.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 11597547
--- Timings ---
Current time: 1559593807108 milliseconds
Total Time:          42.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.4 seconds, 50.5%
Fitness Testing:     13.3 seconds, 31.4%
Report:               7.6 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 18
Successful program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 50


Auto-simplifying with starting size: 50
step: 0
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 500
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1000
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1500
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2000
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2500
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3000
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3500
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4000
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4500
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 5000
program: (in4 in4 integer_dup exec_s_when_autoconstructing (in1) (in2) () boolean_dup_times in1 in4 integer_yank integer_shove integer_min boolean_xor print_integer integer_dec exec_eq integer_inc integer_dup_times in4 boolean_swap boolean_eq integer_mod in4 in2 boolean_eq boolean_eq exec_noop boolean_yankdup boolean_not integer_dup_times exec_s_when_autoconstructing (exec_swap () (integer_div boolean_xor exec_dup (integer_eq tagged_540 boolean_or) exec_when ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 386
Test mean error for best: 0.38600
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -23                
Correct output: -86                 | Program output: -86                
;;******************************
