Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[74 74 74 -31] -31] [[44 44 -5 44] -5] [[-34 -34 -34 -73] -73] [[-75 79 -75 -75] -75] [[-63 -63 -63 2] -63] [[-7 94 -7 -7] -7] [[-45 -67 -45 -45] -67] [[-93 -85 -93 -93] -93] [[-84 -72 -84 -84] -84] [[-73 13 -73 -73] -73] [(35 35 35 35) 35] [(-99 -99 -99 -99) -99] [(-8 -8 -8 -8) -8] [(-11 -11 -11 -11) -11] [(19 19 19 19) 19] [(97 66 37 48) 37] [(82 40 95 16) 16] [(81 75 47 98) 47] [(36 23 57 68) 23] [(82 15 65 42) 15] [(93 4 48 13) 4] [(34 36 100 31) 31] [(59 77 14 67) 14] [(40 6 62 93) 6] [(13 8 19 28) 8] [(13 31 4 51) 4] [(6 76 32 63) 6] [(47 66 40 7) 7] [(67 69 15 45) 15] [(17 22 91 98) 17] [(26 12 53 85) 12] [(79 49 10 44) 10] [(47 30 4 65) 4] [(53 27 98 23) 23] [(68 21 36 51) 21] [(9 -75 72 -72) -75] [(30 -8 -90 2) -90] [(53 33 44 -87) -87] [(-98 32 -68 -32) -98] [(27 95 -82 25) -82] [(17 -14 77 39) -14] [(20 100 -79 -75) -79] [(85 32 5 47) 5] [(5 -60 -4 -84) -84] [(29 61 14 -50) -50] [(-48 -18 -26 30) -48] [(-91 88 -98 68) -98] [(-35 -42 62 26) -42] [(-85 33 70 80) -85] [(-58 -14 59 39) -58] [(-68 -30 -29 -30) -68] [(-67 78 -38 -58) -67] [(-38 -17 34 -6) -38] [(-37 7 -9 -11) -37] [(-51 -7 -62 94) -62] [(64 -32 -45 60) -45] [(-71 50 -93 -69) -93] [(78 81 42 50) 42] [(-4 -7 73 -5) -7] [(34 -20 52 47) -20] [(21 78 3 19) 3] [(-85 -76 -46 -74) -85] [(54 -25 -92 -34) -92] [(98 36 -69 4) -69] [(1 -18 92 -62) -62] [(-85 -99 -95 -85) -99] [(67 -48 -61 92) -61] [(81 -60 -29 39) -60] [(-64 27 -49 93) -64] [(70 -76 74 73) -76] [(-95 -69 83 -53) -95] [(-22 16 90 68) -22] [(8 -74 39 65) -74] [(-9 -29 -82 59) -82] [(-60 70 -66 -38) -66] [(-98 55 -13 75) -98] [(-66 -59 50 70) -66] [(5 -43 21 -36) -43] [(61 62 97 -93) -93] [(85 18 71 20) 18] [(11 45 63 -3) -3] [(73 36 96 54) 36] [(56 4 20 66) 4] [(-63 -61 -52 11) -63] [(73 -85 -96 81) -96] [(-87 75 -94 45) -94] [(23 93 -84 73) -84] [(57 -97 -93 -6) -97] [(-12 99 -32 7) -32] [(-88 -7 -61 -9) -88] [(-96 1 22 -94) -96] [(10 73 -93 -45) -93] [(38 69 -57 38) -57] [(9 -22 97 11) -22] [(-17 -9 16 96) -17])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[74 74 74 -31] -31]
Train Case:   6 | Input/Output: [[44 44 -5 44] -5]
Train Case:   7 | Input/Output: [[-34 -34 -34 -73] -73]
Train Case:   8 | Input/Output: [[-75 79 -75 -75] -75]
Train Case:   9 | Input/Output: [[-63 -63 -63 2] -63]
Train Case:  10 | Input/Output: [[-7 94 -7 -7] -7]
Train Case:  11 | Input/Output: [[-45 -67 -45 -45] -67]
Train Case:  12 | Input/Output: [[-93 -85 -93 -93] -93]
Train Case:  13 | Input/Output: [[-84 -72 -84 -84] -84]
Train Case:  14 | Input/Output: [[-73 13 -73 -73] -73]
Train Case:  15 | Input/Output: [(35 35 35 35) 35]
Train Case:  16 | Input/Output: [(-99 -99 -99 -99) -99]
Train Case:  17 | Input/Output: [(-8 -8 -8 -8) -8]
Train Case:  18 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  19 | Input/Output: [(19 19 19 19) 19]
Train Case:  20 | Input/Output: [(97 66 37 48) 37]
Train Case:  21 | Input/Output: [(82 40 95 16) 16]
Train Case:  22 | Input/Output: [(81 75 47 98) 47]
Train Case:  23 | Input/Output: [(36 23 57 68) 23]
Train Case:  24 | Input/Output: [(82 15 65 42) 15]
Train Case:  25 | Input/Output: [(93 4 48 13) 4]
Train Case:  26 | Input/Output: [(34 36 100 31) 31]
Train Case:  27 | Input/Output: [(59 77 14 67) 14]
Train Case:  28 | Input/Output: [(40 6 62 93) 6]
Train Case:  29 | Input/Output: [(13 8 19 28) 8]
Train Case:  30 | Input/Output: [(13 31 4 51) 4]
Train Case:  31 | Input/Output: [(6 76 32 63) 6]
Train Case:  32 | Input/Output: [(47 66 40 7) 7]
Train Case:  33 | Input/Output: [(67 69 15 45) 15]
Train Case:  34 | Input/Output: [(17 22 91 98) 17]
Train Case:  35 | Input/Output: [(26 12 53 85) 12]
Train Case:  36 | Input/Output: [(79 49 10 44) 10]
Train Case:  37 | Input/Output: [(47 30 4 65) 4]
Train Case:  38 | Input/Output: [(53 27 98 23) 23]
Train Case:  39 | Input/Output: [(68 21 36 51) 21]
Train Case:  40 | Input/Output: [(9 -75 72 -72) -75]
Train Case:  41 | Input/Output: [(30 -8 -90 2) -90]
Train Case:  42 | Input/Output: [(53 33 44 -87) -87]
Train Case:  43 | Input/Output: [(-98 32 -68 -32) -98]
Train Case:  44 | Input/Output: [(27 95 -82 25) -82]
Train Case:  45 | Input/Output: [(17 -14 77 39) -14]
Train Case:  46 | Input/Output: [(20 100 -79 -75) -79]
Train Case:  47 | Input/Output: [(85 32 5 47) 5]
Train Case:  48 | Input/Output: [(5 -60 -4 -84) -84]
Train Case:  49 | Input/Output: [(29 61 14 -50) -50]
Train Case:  50 | Input/Output: [(-48 -18 -26 30) -48]
Train Case:  51 | Input/Output: [(-91 88 -98 68) -98]
Train Case:  52 | Input/Output: [(-35 -42 62 26) -42]
Train Case:  53 | Input/Output: [(-85 33 70 80) -85]
Train Case:  54 | Input/Output: [(-58 -14 59 39) -58]
Train Case:  55 | Input/Output: [(-68 -30 -29 -30) -68]
Train Case:  56 | Input/Output: [(-67 78 -38 -58) -67]
Train Case:  57 | Input/Output: [(-38 -17 34 -6) -38]
Train Case:  58 | Input/Output: [(-37 7 -9 -11) -37]
Train Case:  59 | Input/Output: [(-51 -7 -62 94) -62]
Train Case:  60 | Input/Output: [(64 -32 -45 60) -45]
Train Case:  61 | Input/Output: [(-71 50 -93 -69) -93]
Train Case:  62 | Input/Output: [(78 81 42 50) 42]
Train Case:  63 | Input/Output: [(-4 -7 73 -5) -7]
Train Case:  64 | Input/Output: [(34 -20 52 47) -20]
Train Case:  65 | Input/Output: [(21 78 3 19) 3]
Train Case:  66 | Input/Output: [(-85 -76 -46 -74) -85]
Train Case:  67 | Input/Output: [(54 -25 -92 -34) -92]
Train Case:  68 | Input/Output: [(98 36 -69 4) -69]
Train Case:  69 | Input/Output: [(1 -18 92 -62) -62]
Train Case:  70 | Input/Output: [(-85 -99 -95 -85) -99]
Train Case:  71 | Input/Output: [(67 -48 -61 92) -61]
Train Case:  72 | Input/Output: [(81 -60 -29 39) -60]
Train Case:  73 | Input/Output: [(-64 27 -49 93) -64]
Train Case:  74 | Input/Output: [(70 -76 74 73) -76]
Train Case:  75 | Input/Output: [(-95 -69 83 -53) -95]
Train Case:  76 | Input/Output: [(-22 16 90 68) -22]
Train Case:  77 | Input/Output: [(8 -74 39 65) -74]
Train Case:  78 | Input/Output: [(-9 -29 -82 59) -82]
Train Case:  79 | Input/Output: [(-60 70 -66 -38) -66]
Train Case:  80 | Input/Output: [(-98 55 -13 75) -98]
Train Case:  81 | Input/Output: [(-66 -59 50 70) -66]
Train Case:  82 | Input/Output: [(5 -43 21 -36) -43]
Train Case:  83 | Input/Output: [(61 62 97 -93) -93]
Train Case:  84 | Input/Output: [(85 18 71 20) 18]
Train Case:  85 | Input/Output: [(11 45 63 -3) -3]
Train Case:  86 | Input/Output: [(73 36 96 54) 36]
Train Case:  87 | Input/Output: [(56 4 20 66) 4]
Train Case:  88 | Input/Output: [(-63 -61 -52 11) -63]
Train Case:  89 | Input/Output: [(73 -85 -96 81) -96]
Train Case:  90 | Input/Output: [(-87 75 -94 45) -94]
Train Case:  91 | Input/Output: [(23 93 -84 73) -84]
Train Case:  92 | Input/Output: [(57 -97 -93 -6) -97]
Train Case:  93 | Input/Output: [(-12 99 -32 7) -32]
Train Case:  94 | Input/Output: [(-88 -7 -61 -9) -88]
Train Case:  95 | Input/Output: [(-96 1 22 -94) -96]
Train Case:  96 | Input/Output: [(10 73 -93 -45) -93]
Train Case:  97 | Input/Output: [(38 69 -57 38) -57]
Train Case:  98 | Input/Output: [(9 -22 97 11) -22]
Train Case:  99 | Input/Output: [(-17 -9 16 96) -17]
Test Case:   0 | Input/Output: [[7 7 7 -40] -40]
Test Case:   1 | Input/Output: [[91 91 -51 91] -51]
Test Case:   2 | Input/Output: [[-62 -62 73 -62] -62]
Test Case:   3 | Input/Output: [[42 72 42 42] 42]
Test Case:   4 | Input/Output: [[-14 -66 -66 -66] -66]
Test Case:   5 | Input/Output: [[-14 -58 -14 -14] -58]
Test Case:   6 | Input/Output: [[90 -71 -71 -71] -71]
Test Case:   7 | Input/Output: [[87 82 87 87] 82]
Test Case:   8 | Input/Output: [[35 -61 -61 -61] -61]
Test Case:   9 | Input/Output: [[-71 -12 -12 -12] -71]
Test Case:  10 | Input/Output: [[-32 -77 -32 -32] -77]
Test Case:  11 | Input/Output: [[-20 41 -20 -20] -20]
Test Case:  12 | Input/Output: [[10 10 -63 10] -63]
Test Case:  13 | Input/Output: [[84 12 12 12] 12]
Test Case:  14 | Input/Output: [[-60 48 48 48] -60]
Test Case:  15 | Input/Output: [[41 79 41 41] 41]
Test Case:  16 | Input/Output: [[34 3 34 34] 3]
Test Case:  17 | Input/Output: [[-18 -14 -14 -14] -18]
Test Case:  18 | Input/Output: [[73 45 45 45] 45]
Test Case:  19 | Input/Output: [[89 -51 -51 -51] -51]
Test Case:  20 | Input/Output: [[51 51 51 -50] -50]
Test Case:  21 | Input/Output: [[-38 69 -38 -38] -38]
Test Case:  22 | Input/Output: [[-78 -100 -100 -100] -100]
Test Case:  23 | Input/Output: [[-59 69 69 69] -59]
Test Case:  24 | Input/Output: [[90 -92 -92 -92] -92]
Test Case:  25 | Input/Output: [[-85 -85 36 -85] -85]
Test Case:  26 | Input/Output: [[27 76 27 27] 27]
Test Case:  27 | Input/Output: [[77 77 41 77] 41]
Test Case:  28 | Input/Output: [[79 79 79 70] 70]
Test Case:  29 | Input/Output: [[-40 -34 -40 -40] -40]
Test Case:  30 | Input/Output: [[-84 -66 -66 -66] -84]
Test Case:  31 | Input/Output: [[-90 -90 -79 -90] -90]
Test Case:  32 | Input/Output: [[17 17 90 17] 17]
Test Case:  33 | Input/Output: [[-81 -81 73 -81] -81]
Test Case:  34 | Input/Output: [[30 20 20 20] 20]
Test Case:  35 | Input/Output: [[61 -71 61 61] -71]
Test Case:  36 | Input/Output: [[-47 -25 -25 -25] -47]
Test Case:  37 | Input/Output: [[-79 -79 -97 -79] -97]
Test Case:  38 | Input/Output: [[-34 -20 -34 -34] -34]
Test Case:  39 | Input/Output: [[39 -90 39 39] -90]
Test Case:  40 | Input/Output: [[65 65 65 58] 58]
Test Case:  41 | Input/Output: [[-83 -83 -83 -52] -83]
Test Case:  42 | Input/Output: [[68 68 68 20] 20]
Test Case:  43 | Input/Output: [[20 -2 -2 -2] -2]
Test Case:  44 | Input/Output: [[-57 -68 -68 -68] -68]
Test Case:  45 | Input/Output: [[88 88 4 88] 4]
Test Case:  46 | Input/Output: [[11 11 -72 11] -72]
Test Case:  47 | Input/Output: [[76 -54 76 76] -54]
Test Case:  48 | Input/Output: [[-12 -12 -12 -55] -55]
Test Case:  49 | Input/Output: [[64 64 64 2] 2]
Test Case:  50 | Input/Output: [[76 -54 76 76] -54]
Test Case:  51 | Input/Output: [[-47 12 -47 -47] -47]
Test Case:  52 | Input/Output: [[50 50 72 50] 50]
Test Case:  53 | Input/Output: [[-61 64 64 64] -61]
Test Case:  54 | Input/Output: [[-69 -69 86 -69] -69]
Test Case:  55 | Input/Output: [[-5 -5 -5 -93] -93]
Test Case:  56 | Input/Output: [[15 15 30 15] 15]
Test Case:  57 | Input/Output: [[-5 4 4 4] -5]
Test Case:  58 | Input/Output: [[-50 3 -50 -50] -50]
Test Case:  59 | Input/Output: [[-30 -30 -30 78] -30]
Test Case:  60 | Input/Output: [[79 -98 -98 -98] -98]
Test Case:  61 | Input/Output: [[6 -75 -75 -75] -75]
Test Case:  62 | Input/Output: [[53 -72 53 53] -72]
Test Case:  63 | Input/Output: [[31 82 31 31] 31]
Test Case:  64 | Input/Output: [[-58 -58 -58 -1] -58]
Test Case:  65 | Input/Output: [[55 -33 55 55] -33]
Test Case:  66 | Input/Output: [[12 -62 -62 -62] -62]
Test Case:  67 | Input/Output: [[-18 -93 -93 -93] -93]
Test Case:  68 | Input/Output: [[-1 86 -1 -1] -1]
Test Case:  69 | Input/Output: [[-43 -43 -31 -43] -43]
Test Case:  70 | Input/Output: [[-67 -20 -20 -20] -67]
Test Case:  71 | Input/Output: [[-41 -41 -41 -20] -41]
Test Case:  72 | Input/Output: [[-92 57 -92 -92] -92]
Test Case:  73 | Input/Output: [[-23 21 21 21] -23]
Test Case:  74 | Input/Output: [[50 -78 50 50] -78]
Test Case:  75 | Input/Output: [[80 15 80 80] 15]
Test Case:  76 | Input/Output: [[-92 50 50 50] -92]
Test Case:  77 | Input/Output: [[-40 -40 -40 61] -40]
Test Case:  78 | Input/Output: [[95 95 -96 95] -96]
Test Case:  79 | Input/Output: [[-63 -99 -63 -63] -99]
Test Case:  80 | Input/Output: [[47 47 -55 47] -55]
Test Case:  81 | Input/Output: [[14 39 14 14] 14]
Test Case:  82 | Input/Output: [[-75 -75 -71 -75] -75]
Test Case:  83 | Input/Output: [[87 87 -37 87] -37]
Test Case:  84 | Input/Output: [[-55 -55 -55 51] -55]
Test Case:  85 | Input/Output: [[17 17 17 -75] -75]
Test Case:  86 | Input/Output: [[25 79 25 25] 25]
Test Case:  87 | Input/Output: [[31 31 31 -70] -70]
Test Case:  88 | Input/Output: [[-33 -27 -33 -33] -33]
Test Case:  89 | Input/Output: [[-70 -70 -70 18] -70]
Test Case:  90 | Input/Output: [[21 21 16 21] 16]
Test Case:  91 | Input/Output: [[-58 -14 -14 -14] -58]
Test Case:  92 | Input/Output: [[85 85 85 10] 10]
Test Case:  93 | Input/Output: [[-97 -97 -97 -43] -97]
Test Case:  94 | Input/Output: [[19 -70 -70 -70] -70]
Test Case:  95 | Input/Output: [[-38 57 -38 -38] -38]
Test Case:  96 | Input/Output: [[-62 -62 69 -62] -62]
Test Case:  97 | Input/Output: [[-76 -76 -76 0] -76]
Test Case:  98 | Input/Output: [[57 57 57 15] 15]
Test Case:  99 | Input/Output: [[-16 -16 -100 -16] -100]
Test Case: 100 | Input/Output: [(32 32 32 32) 32]
Test Case: 101 | Input/Output: [(45 45 45 45) 45]
Test Case: 102 | Input/Output: [(0 0 0 0) 0]
Test Case: 103 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 104 | Input/Output: [(5 5 5 5) 5]
Test Case: 105 | Input/Output: [(45 45 45 45) 45]
Test Case: 106 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 107 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 108 | Input/Output: [(91 91 91 91) 91]
Test Case: 109 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 110 | Input/Output: [(31 31 31 31) 31]
Test Case: 111 | Input/Output: [(26 26 26 26) 26]
Test Case: 112 | Input/Output: [(32 32 32 32) 32]
Test Case: 113 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 114 | Input/Output: [(63 63 63 63) 63]
Test Case: 115 | Input/Output: [(93 93 93 93) 93]
Test Case: 116 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 117 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 118 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 119 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 120 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 121 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 122 | Input/Output: [(60 60 60 60) 60]
Test Case: 123 | Input/Output: [(50 50 50 50) 50]
Test Case: 124 | Input/Output: [(93 93 93 93) 93]
Test Case: 125 | Input/Output: [(6 6 6 6) 6]
Test Case: 126 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 127 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 128 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 129 | Input/Output: [(91 91 91 91) 91]
Test Case: 130 | Input/Output: [(97 97 97 97) 97]
Test Case: 131 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 132 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 133 | Input/Output: [(68 68 68 68) 68]
Test Case: 134 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 135 | Input/Output: [(11 11 11 11) 11]
Test Case: 136 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 137 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 138 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 139 | Input/Output: [(27 27 27 27) 27]
Test Case: 140 | Input/Output: [(22 22 22 22) 22]
Test Case: 141 | Input/Output: [(15 15 15 15) 15]
Test Case: 142 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 143 | Input/Output: [(21 21 21 21) 21]
Test Case: 144 | Input/Output: [(96 96 96 96) 96]
Test Case: 145 | Input/Output: [(19 19 19 19) 19]
Test Case: 146 | Input/Output: [(58 58 58 58) 58]
Test Case: 147 | Input/Output: [(26 26 26 26) 26]
Test Case: 148 | Input/Output: [(21 21 21 21) 21]
Test Case: 149 | Input/Output: [(76 76 76 76) 76]
Test Case: 150 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 151 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 152 | Input/Output: [(95 95 95 95) 95]
Test Case: 153 | Input/Output: [(37 37 37 37) 37]
Test Case: 154 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 155 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 156 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 157 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 158 | Input/Output: [(89 89 89 89) 89]
Test Case: 159 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 160 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 161 | Input/Output: [(66 66 66 66) 66]
Test Case: 162 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 163 | Input/Output: [(8 8 8 8) 8]
Test Case: 164 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 165 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 166 | Input/Output: [(9 9 9 9) 9]
Test Case: 167 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 168 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 169 | Input/Output: [(24 24 24 24) 24]
Test Case: 170 | Input/Output: [(41 41 41 41) 41]
Test Case: 171 | Input/Output: [(8 8 8 8) 8]
Test Case: 172 | Input/Output: [(3 3 3 3) 3]
Test Case: 173 | Input/Output: [(88 88 88 88) 88]
Test Case: 174 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 175 | Input/Output: [(23 23 23 23) 23]
Test Case: 176 | Input/Output: [(70 70 70 70) 70]
Test Case: 177 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 178 | Input/Output: [(27 27 27 27) 27]
Test Case: 179 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 180 | Input/Output: [(96 96 96 96) 96]
Test Case: 181 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 182 | Input/Output: [(97 97 97 97) 97]
Test Case: 183 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 184 | Input/Output: [(78 78 78 78) 78]
Test Case: 185 | Input/Output: [(15 15 15 15) 15]
Test Case: 186 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 187 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 188 | Input/Output: [(48 48 48 48) 48]
Test Case: 189 | Input/Output: [(22 22 22 22) 22]
Test Case: 190 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 191 | Input/Output: [(29 29 29 29) 29]
Test Case: 192 | Input/Output: [(8 8 8 8) 8]
Test Case: 193 | Input/Output: [(99 99 99 99) 99]
Test Case: 194 | Input/Output: [(10 10 10 10) 10]
Test Case: 195 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 196 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 197 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 198 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 199 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 200 | Input/Output: [(12 63 50 91) 12]
Test Case: 201 | Input/Output: [(23 37 20 49) 20]
Test Case: 202 | Input/Output: [(58 46 1 59) 1]
Test Case: 203 | Input/Output: [(70 10 48 73) 10]
Test Case: 204 | Input/Output: [(30 7 74 25) 7]
Test Case: 205 | Input/Output: [(17 21 80 67) 17]
Test Case: 206 | Input/Output: [(93 84 63 37) 37]
Test Case: 207 | Input/Output: [(99 50 67 59) 50]
Test Case: 208 | Input/Output: [(54 74 24 11) 11]
Test Case: 209 | Input/Output: [(49 42 24 52) 24]
Test Case: 210 | Input/Output: [(7 27 54 18) 7]
Test Case: 211 | Input/Output: [(64 18 19 87) 18]
Test Case: 212 | Input/Output: [(8 34 95 5) 5]
Test Case: 213 | Input/Output: [(96 33 96 9) 9]
Test Case: 214 | Input/Output: [(43 38 15 55) 15]
Test Case: 215 | Input/Output: [(59 86 61 15) 15]
Test Case: 216 | Input/Output: [(6 37 52 52) 6]
Test Case: 217 | Input/Output: [(96 60 66 4) 4]
Test Case: 218 | Input/Output: [(16 35 95 59) 16]
Test Case: 219 | Input/Output: [(85 23 72 15) 15]
Test Case: 220 | Input/Output: [(29 57 13 82) 13]
Test Case: 221 | Input/Output: [(97 52 53 37) 37]
Test Case: 222 | Input/Output: [(66 86 96 5) 5]
Test Case: 223 | Input/Output: [(42 13 25 37) 13]
Test Case: 224 | Input/Output: [(45 77 57 6) 6]
Test Case: 225 | Input/Output: [(53 16 63 42) 16]
Test Case: 226 | Input/Output: [(69 30 25 58) 25]
Test Case: 227 | Input/Output: [(2 46 30 66) 2]
Test Case: 228 | Input/Output: [(20 52 50 24) 20]
Test Case: 229 | Input/Output: [(75 12 90 17) 12]
Test Case: 230 | Input/Output: [(51 18 51 22) 18]
Test Case: 231 | Input/Output: [(28 4 24 77) 4]
Test Case: 232 | Input/Output: [(85 75 72 30) 30]
Test Case: 233 | Input/Output: [(65 21 13 11) 11]
Test Case: 234 | Input/Output: [(72 74 32 12) 12]
Test Case: 235 | Input/Output: [(82 94 88 58) 58]
Test Case: 236 | Input/Output: [(27 23 4 43) 4]
Test Case: 237 | Input/Output: [(79 43 77 17) 17]
Test Case: 238 | Input/Output: [(28 34 55 76) 28]
Test Case: 239 | Input/Output: [(28 53 100 7) 7]
Test Case: 240 | Input/Output: [(81 1 62 38) 1]
Test Case: 241 | Input/Output: [(95 74 16 5) 5]
Test Case: 242 | Input/Output: [(69 22 17 30) 17]
Test Case: 243 | Input/Output: [(14 51 83 52) 14]
Test Case: 244 | Input/Output: [(25 45 34 37) 25]
Test Case: 245 | Input/Output: [(98 85 80 100) 80]
Test Case: 246 | Input/Output: [(54 76 82 1) 1]
Test Case: 247 | Input/Output: [(10 67 23 0) 0]
Test Case: 248 | Input/Output: [(59 36 43 62) 36]
Test Case: 249 | Input/Output: [(7 69 0 4) 0]
Test Case: 250 | Input/Output: [(94 49 36 48) 36]
Test Case: 251 | Input/Output: [(18 9 45 18) 9]
Test Case: 252 | Input/Output: [(19 49 44 78) 19]
Test Case: 253 | Input/Output: [(50 5 72 46) 5]
Test Case: 254 | Input/Output: [(14 10 82 85) 10]
Test Case: 255 | Input/Output: [(66 31 46 27) 27]
Test Case: 256 | Input/Output: [(9 31 73 35) 9]
Test Case: 257 | Input/Output: [(87 58 46 63) 46]
Test Case: 258 | Input/Output: [(31 88 15 41) 15]
Test Case: 259 | Input/Output: [(0 45 93 89) 0]
Test Case: 260 | Input/Output: [(86 48 24 5) 5]
Test Case: 261 | Input/Output: [(57 28 49 62) 28]
Test Case: 262 | Input/Output: [(39 7 82 56) 7]
Test Case: 263 | Input/Output: [(72 23 31 35) 23]
Test Case: 264 | Input/Output: [(43 19 55 92) 19]
Test Case: 265 | Input/Output: [(62 82 31 77) 31]
Test Case: 266 | Input/Output: [(34 74 34 8) 8]
Test Case: 267 | Input/Output: [(68 71 17 39) 17]
Test Case: 268 | Input/Output: [(36 35 30 86) 30]
Test Case: 269 | Input/Output: [(53 43 11 92) 11]
Test Case: 270 | Input/Output: [(65 34 81 58) 34]
Test Case: 271 | Input/Output: [(56 52 73 17) 17]
Test Case: 272 | Input/Output: [(12 88 63 29) 12]
Test Case: 273 | Input/Output: [(18 91 17 28) 17]
Test Case: 274 | Input/Output: [(50 79 66 73) 50]
Test Case: 275 | Input/Output: [(89 61 80 35) 35]
Test Case: 276 | Input/Output: [(52 28 18 68) 18]
Test Case: 277 | Input/Output: [(42 96 40 76) 40]
Test Case: 278 | Input/Output: [(42 31 34 0) 0]
Test Case: 279 | Input/Output: [(85 57 18 18) 18]
Test Case: 280 | Input/Output: [(68 43 95 99) 43]
Test Case: 281 | Input/Output: [(40 68 39 41) 39]
Test Case: 282 | Input/Output: [(100 79 65 8) 8]
Test Case: 283 | Input/Output: [(53 14 66 87) 14]
Test Case: 284 | Input/Output: [(9 16 44 7) 7]
Test Case: 285 | Input/Output: [(85 23 84 95) 23]
Test Case: 286 | Input/Output: [(43 33 48 13) 13]
Test Case: 287 | Input/Output: [(84 6 8 89) 6]
Test Case: 288 | Input/Output: [(8 38 83 86) 8]
Test Case: 289 | Input/Output: [(48 4 11 54) 4]
Test Case: 290 | Input/Output: [(78 40 34 53) 34]
Test Case: 291 | Input/Output: [(90 84 19 51) 19]
Test Case: 292 | Input/Output: [(18 88 80 98) 18]
Test Case: 293 | Input/Output: [(30 27 14 58) 14]
Test Case: 294 | Input/Output: [(4 79 39 80) 4]
Test Case: 295 | Input/Output: [(72 95 83 22) 22]
Test Case: 296 | Input/Output: [(71 51 13 63) 13]
Test Case: 297 | Input/Output: [(42 70 51 72) 42]
Test Case: 298 | Input/Output: [(19 62 5 18) 5]
Test Case: 299 | Input/Output: [(26 55 56 28) 26]
Test Case: 300 | Input/Output: [(86 28 65 19) 19]
Test Case: 301 | Input/Output: [(66 40 50 47) 40]
Test Case: 302 | Input/Output: [(23 100 3 18) 3]
Test Case: 303 | Input/Output: [(85 78 72 21) 21]
Test Case: 304 | Input/Output: [(22 2 70 88) 2]
Test Case: 305 | Input/Output: [(35 70 67 89) 35]
Test Case: 306 | Input/Output: [(11 24 59 2) 2]
Test Case: 307 | Input/Output: [(25 32 67 92) 25]
Test Case: 308 | Input/Output: [(64 99 36 95) 36]
Test Case: 309 | Input/Output: [(1 39 55 45) 1]
Test Case: 310 | Input/Output: [(64 30 93 82) 30]
Test Case: 311 | Input/Output: [(83 57 87 37) 37]
Test Case: 312 | Input/Output: [(0 0 61 44) 0]
Test Case: 313 | Input/Output: [(73 48 20 99) 20]
Test Case: 314 | Input/Output: [(22 78 97 0) 0]
Test Case: 315 | Input/Output: [(60 41 82 18) 18]
Test Case: 316 | Input/Output: [(21 15 98 76) 15]
Test Case: 317 | Input/Output: [(80 26 64 55) 26]
Test Case: 318 | Input/Output: [(26 38 45 19) 19]
Test Case: 319 | Input/Output: [(86 25 62 99) 25]
Test Case: 320 | Input/Output: [(69 38 67 55) 38]
Test Case: 321 | Input/Output: [(43 26 24 84) 24]
Test Case: 322 | Input/Output: [(68 87 54 26) 26]
Test Case: 323 | Input/Output: [(44 9 47 76) 9]
Test Case: 324 | Input/Output: [(38 89 7 52) 7]
Test Case: 325 | Input/Output: [(66 58 36 32) 32]
Test Case: 326 | Input/Output: [(96 5 13 27) 5]
Test Case: 327 | Input/Output: [(34 94 3 15) 3]
Test Case: 328 | Input/Output: [(57 63 1 33) 1]
Test Case: 329 | Input/Output: [(7 98 9 31) 7]
Test Case: 330 | Input/Output: [(8 55 70 100) 8]
Test Case: 331 | Input/Output: [(20 35 35 38) 20]
Test Case: 332 | Input/Output: [(75 81 26 77) 26]
Test Case: 333 | Input/Output: [(11 54 61 75) 11]
Test Case: 334 | Input/Output: [(50 1 18 6) 1]
Test Case: 335 | Input/Output: [(7 33 4 36) 4]
Test Case: 336 | Input/Output: [(16 67 72 28) 16]
Test Case: 337 | Input/Output: [(65 1 28 29) 1]
Test Case: 338 | Input/Output: [(11 36 8 7) 7]
Test Case: 339 | Input/Output: [(0 35 92 96) 0]
Test Case: 340 | Input/Output: [(11 65 40 64) 11]
Test Case: 341 | Input/Output: [(50 12 99 17) 12]
Test Case: 342 | Input/Output: [(21 54 0 32) 0]
Test Case: 343 | Input/Output: [(89 32 34 81) 32]
Test Case: 344 | Input/Output: [(99 20 66 10) 10]
Test Case: 345 | Input/Output: [(37 37 80 13) 13]
Test Case: 346 | Input/Output: [(35 50 81 65) 35]
Test Case: 347 | Input/Output: [(87 24 70 33) 24]
Test Case: 348 | Input/Output: [(9 99 65 4) 4]
Test Case: 349 | Input/Output: [(65 59 49 96) 49]
Test Case: 350 | Input/Output: [(46 9 43 14) 9]
Test Case: 351 | Input/Output: [(69 91 55 26) 26]
Test Case: 352 | Input/Output: [(72 79 83 50) 50]
Test Case: 353 | Input/Output: [(49 75 21 19) 19]
Test Case: 354 | Input/Output: [(12 38 66 58) 12]
Test Case: 355 | Input/Output: [(58 100 77 8) 8]
Test Case: 356 | Input/Output: [(100 78 99 6) 6]
Test Case: 357 | Input/Output: [(95 2 94 83) 2]
Test Case: 358 | Input/Output: [(2 90 77 98) 2]
Test Case: 359 | Input/Output: [(49 12 5 80) 5]
Test Case: 360 | Input/Output: [(6 61 58 92) 6]
Test Case: 361 | Input/Output: [(63 7 76 78) 7]
Test Case: 362 | Input/Output: [(19 71 26 66) 19]
Test Case: 363 | Input/Output: [(6 74 81 62) 6]
Test Case: 364 | Input/Output: [(53 28 70 84) 28]
Test Case: 365 | Input/Output: [(40 14 22 16) 14]
Test Case: 366 | Input/Output: [(58 58 45 72) 45]
Test Case: 367 | Input/Output: [(13 4 96 79) 4]
Test Case: 368 | Input/Output: [(39 36 66 47) 36]
Test Case: 369 | Input/Output: [(31 80 6 98) 6]
Test Case: 370 | Input/Output: [(84 61 77 62) 61]
Test Case: 371 | Input/Output: [(48 32 30 50) 30]
Test Case: 372 | Input/Output: [(11 11 28 50) 11]
Test Case: 373 | Input/Output: [(21 75 29 17) 17]
Test Case: 374 | Input/Output: [(94 55 52 10) 10]
Test Case: 375 | Input/Output: [(1 76 86 98) 1]
Test Case: 376 | Input/Output: [(44 89 27 60) 27]
Test Case: 377 | Input/Output: [(29 58 53 16) 16]
Test Case: 378 | Input/Output: [(30 79 76 92) 30]
Test Case: 379 | Input/Output: [(63 28 14 26) 14]
Test Case: 380 | Input/Output: [(64 17 13 59) 13]
Test Case: 381 | Input/Output: [(69 74 26 17) 17]
Test Case: 382 | Input/Output: [(91 68 40 46) 40]
Test Case: 383 | Input/Output: [(7 78 73 52) 7]
Test Case: 384 | Input/Output: [(7 94 84 39) 7]
Test Case: 385 | Input/Output: [(13 7 9 68) 7]
Test Case: 386 | Input/Output: [(66 75 25 59) 25]
Test Case: 387 | Input/Output: [(35 90 68 31) 31]
Test Case: 388 | Input/Output: [(23 41 21 95) 21]
Test Case: 389 | Input/Output: [(43 79 8 80) 8]
Test Case: 390 | Input/Output: [(22 17 14 36) 14]
Test Case: 391 | Input/Output: [(70 32 2 78) 2]
Test Case: 392 | Input/Output: [(76 35 17 22) 17]
Test Case: 393 | Input/Output: [(97 2 73 9) 2]
Test Case: 394 | Input/Output: [(23 48 44 49) 23]
Test Case: 395 | Input/Output: [(12 0 90 69) 0]
Test Case: 396 | Input/Output: [(46 66 19 22) 19]
Test Case: 397 | Input/Output: [(73 54 37 96) 37]
Test Case: 398 | Input/Output: [(21 6 90 36) 6]
Test Case: 399 | Input/Output: [(27 11 51 1) 1]
Test Case: 400 | Input/Output: [(-6 -94 74 20) -94]
Test Case: 401 | Input/Output: [(54 10 49 74) 10]
Test Case: 402 | Input/Output: [(30 -15 23 39) -15]
Test Case: 403 | Input/Output: [(26 39 -5 12) -5]
Test Case: 404 | Input/Output: [(-73 45 18 81) -73]
Test Case: 405 | Input/Output: [(-94 30 6 -65) -94]
Test Case: 406 | Input/Output: [(-25 -85 -80 92) -85]
Test Case: 407 | Input/Output: [(-42 -72 49 -32) -72]
Test Case: 408 | Input/Output: [(53 30 99 -54) -54]
Test Case: 409 | Input/Output: [(93 34 43 -46) -46]
Test Case: 410 | Input/Output: [(79 -5 84 -71) -71]
Test Case: 411 | Input/Output: [(-77 -41 31 -76) -77]
Test Case: 412 | Input/Output: [(-75 -57 -15 -13) -75]
Test Case: 413 | Input/Output: [(32 68 32 42) 32]
Test Case: 414 | Input/Output: [(63 69 47 -56) -56]
Test Case: 415 | Input/Output: [(24 82 -50 -45) -50]
Test Case: 416 | Input/Output: [(30 -29 -59 -89) -89]
Test Case: 417 | Input/Output: [(61 91 -77 31) -77]
Test Case: 418 | Input/Output: [(73 -77 57 19) -77]
Test Case: 419 | Input/Output: [(-25 90 -32 39) -32]
Test Case: 420 | Input/Output: [(14 43 38 -29) -29]
Test Case: 421 | Input/Output: [(-36 -47 -57 -4) -57]
Test Case: 422 | Input/Output: [(-2 -4 -66 -69) -69]
Test Case: 423 | Input/Output: [(37 99 -60 97) -60]
Test Case: 424 | Input/Output: [(90 17 -84 23) -84]
Test Case: 425 | Input/Output: [(-29 37 -72 51) -72]
Test Case: 426 | Input/Output: [(-78 -57 53 -100) -100]
Test Case: 427 | Input/Output: [(-99 -79 40 42) -99]
Test Case: 428 | Input/Output: [(-35 46 52 -99) -99]
Test Case: 429 | Input/Output: [(7 60 12 97) 7]
Test Case: 430 | Input/Output: [(63 -63 25 43) -63]
Test Case: 431 | Input/Output: [(-38 -54 32 21) -54]
Test Case: 432 | Input/Output: [(-52 -33 -23 -34) -52]
Test Case: 433 | Input/Output: [(-74 -78 -2 54) -78]
Test Case: 434 | Input/Output: [(72 -58 60 76) -58]
Test Case: 435 | Input/Output: [(-73 -91 36 71) -91]
Test Case: 436 | Input/Output: [(38 -94 -40 -84) -94]
Test Case: 437 | Input/Output: [(29 -17 55 5) -17]
Test Case: 438 | Input/Output: [(9 63 85 -42) -42]
Test Case: 439 | Input/Output: [(-87 46 -23 63) -87]
Test Case: 440 | Input/Output: [(-65 94 98 97) -65]
Test Case: 441 | Input/Output: [(95 51 -3 -54) -54]
Test Case: 442 | Input/Output: [(62 -66 -35 -6) -66]
Test Case: 443 | Input/Output: [(59 -85 15 -6) -85]
Test Case: 444 | Input/Output: [(67 -74 -25 39) -74]
Test Case: 445 | Input/Output: [(-14 -99 -53 -86) -99]
Test Case: 446 | Input/Output: [(-48 27 77 -28) -48]
Test Case: 447 | Input/Output: [(91 -69 -51 72) -69]
Test Case: 448 | Input/Output: [(-81 96 39 91) -81]
Test Case: 449 | Input/Output: [(4 86 -58 44) -58]
Test Case: 450 | Input/Output: [(67 37 -43 77) -43]
Test Case: 451 | Input/Output: [(3 72 60 82) 3]
Test Case: 452 | Input/Output: [(37 80 -87 32) -87]
Test Case: 453 | Input/Output: [(41 60 56 -24) -24]
Test Case: 454 | Input/Output: [(-19 -16 67 -33) -33]
Test Case: 455 | Input/Output: [(-41 -18 27 -87) -87]
Test Case: 456 | Input/Output: [(32 34 -8 -26) -26]
Test Case: 457 | Input/Output: [(-87 79 -31 -73) -87]
Test Case: 458 | Input/Output: [(54 52 18 -78) -78]
Test Case: 459 | Input/Output: [(-35 -8 22 -49) -49]
Test Case: 460 | Input/Output: [(41 -49 84 77) -49]
Test Case: 461 | Input/Output: [(82 62 78 -29) -29]
Test Case: 462 | Input/Output: [(-96 13 -17 -87) -96]
Test Case: 463 | Input/Output: [(52 -90 -88 -23) -90]
Test Case: 464 | Input/Output: [(45 -33 -42 -82) -82]
Test Case: 465 | Input/Output: [(14 37 75 30) 14]
Test Case: 466 | Input/Output: [(-46 3 -12 0) -46]
Test Case: 467 | Input/Output: [(30 31 -75 92) -75]
Test Case: 468 | Input/Output: [(-29 -53 -81 -29) -81]
Test Case: 469 | Input/Output: [(29 3 57 -67) -67]
Test Case: 470 | Input/Output: [(-75 -6 -75 -60) -75]
Test Case: 471 | Input/Output: [(-19 -24 54 -93) -93]
Test Case: 472 | Input/Output: [(-51 -32 -31 39) -51]
Test Case: 473 | Input/Output: [(-32 4 -6 65) -32]
Test Case: 474 | Input/Output: [(68 -99 -4 97) -99]
Test Case: 475 | Input/Output: [(2 -54 -94 -92) -94]
Test Case: 476 | Input/Output: [(-62 54 -32 -12) -62]
Test Case: 477 | Input/Output: [(-75 50 51 -39) -75]
Test Case: 478 | Input/Output: [(20 -45 71 -21) -45]
Test Case: 479 | Input/Output: [(68 99 93 -32) -32]
Test Case: 480 | Input/Output: [(18 -68 -59 -58) -68]
Test Case: 481 | Input/Output: [(41 -97 -16 35) -97]
Test Case: 482 | Input/Output: [(20 -68 -100 -12) -100]
Test Case: 483 | Input/Output: [(-95 10 -57 21) -95]
Test Case: 484 | Input/Output: [(3 91 -66 -62) -66]
Test Case: 485 | Input/Output: [(-86 -55 -25 16) -86]
Test Case: 486 | Input/Output: [(18 -4 72 83) -4]
Test Case: 487 | Input/Output: [(-31 -44 96 -69) -69]
Test Case: 488 | Input/Output: [(-99 78 -91 70) -99]
Test Case: 489 | Input/Output: [(80 33 -36 -83) -83]
Test Case: 490 | Input/Output: [(14 -64 -37 79) -64]
Test Case: 491 | Input/Output: [(74 -32 38 -35) -35]
Test Case: 492 | Input/Output: [(-34 28 41 -12) -34]
Test Case: 493 | Input/Output: [(53 -91 -46 -94) -94]
Test Case: 494 | Input/Output: [(-85 19 -37 53) -85]
Test Case: 495 | Input/Output: [(84 77 -2 -64) -64]
Test Case: 496 | Input/Output: [(-85 -78 -40 14) -85]
Test Case: 497 | Input/Output: [(-22 6 -39 77) -39]
Test Case: 498 | Input/Output: [(-72 44 -36 11) -72]
Test Case: 499 | Input/Output: [(-73 7 74 -75) -75]
Test Case: 500 | Input/Output: [(63 75 83 28) 28]
Test Case: 501 | Input/Output: [(19 31 80 12) 12]
Test Case: 502 | Input/Output: [(-40 94 3 44) -40]
Test Case: 503 | Input/Output: [(5 -70 37 17) -70]
Test Case: 504 | Input/Output: [(53 72 -1 -65) -65]
Test Case: 505 | Input/Output: [(74 -69 -57 14) -69]
Test Case: 506 | Input/Output: [(-77 23 30 25) -77]
Test Case: 507 | Input/Output: [(74 42 51 12) 12]
Test Case: 508 | Input/Output: [(-72 -92 -93 -54) -93]
Test Case: 509 | Input/Output: [(5 99 -28 -94) -94]
Test Case: 510 | Input/Output: [(-43 -8 -16 -67) -67]
Test Case: 511 | Input/Output: [(-73 85 57 -70) -73]
Test Case: 512 | Input/Output: [(-39 -95 100 -93) -95]
Test Case: 513 | Input/Output: [(54 72 -53 -26) -53]
Test Case: 514 | Input/Output: [(9 -17 68 15) -17]
Test Case: 515 | Input/Output: [(11 -19 -66 91) -66]
Test Case: 516 | Input/Output: [(27 4 -88 84) -88]
Test Case: 517 | Input/Output: [(64 -52 21 -82) -82]
Test Case: 518 | Input/Output: [(-86 84 71 78) -86]
Test Case: 519 | Input/Output: [(69 -19 -56 -54) -56]
Test Case: 520 | Input/Output: [(78 73 -8 15) -8]
Test Case: 521 | Input/Output: [(-84 67 34 78) -84]
Test Case: 522 | Input/Output: [(-55 36 56 73) -55]
Test Case: 523 | Input/Output: [(37 70 6 -53) -53]
Test Case: 524 | Input/Output: [(31 -55 16 -92) -92]
Test Case: 525 | Input/Output: [(84 34 58 45) 34]
Test Case: 526 | Input/Output: [(-35 -73 -60 -99) -99]
Test Case: 527 | Input/Output: [(-46 36 25 21) -46]
Test Case: 528 | Input/Output: [(38 76 -18 19) -18]
Test Case: 529 | Input/Output: [(96 5 -6 -37) -37]
Test Case: 530 | Input/Output: [(78 -37 39 12) -37]
Test Case: 531 | Input/Output: [(-6 31 37 -75) -75]
Test Case: 532 | Input/Output: [(-32 -88 96 -26) -88]
Test Case: 533 | Input/Output: [(-19 -12 -88 -30) -88]
Test Case: 534 | Input/Output: [(-93 -78 -34 10) -93]
Test Case: 535 | Input/Output: [(-51 77 94 -83) -83]
Test Case: 536 | Input/Output: [(29 80 67 91) 29]
Test Case: 537 | Input/Output: [(86 -13 84 91) -13]
Test Case: 538 | Input/Output: [(-80 94 7 10) -80]
Test Case: 539 | Input/Output: [(36 79 73 -66) -66]
Test Case: 540 | Input/Output: [(-60 98 16 10) -60]
Test Case: 541 | Input/Output: [(-20 -12 -37 48) -37]
Test Case: 542 | Input/Output: [(-14 -52 -59 81) -59]
Test Case: 543 | Input/Output: [(-49 17 -77 -60) -77]
Test Case: 544 | Input/Output: [(58 79 91 -8) -8]
Test Case: 545 | Input/Output: [(-34 -77 74 -79) -79]
Test Case: 546 | Input/Output: [(-19 -59 -87 54) -87]
Test Case: 547 | Input/Output: [(17 -54 -100 -32) -100]
Test Case: 548 | Input/Output: [(-23 73 22 -97) -97]
Test Case: 549 | Input/Output: [(45 39 -1 -9) -9]
Test Case: 550 | Input/Output: [(85 4 41 -75) -75]
Test Case: 551 | Input/Output: [(-85 -29 -13 52) -85]
Test Case: 552 | Input/Output: [(34 0 -45 16) -45]
Test Case: 553 | Input/Output: [(55 73 63 -35) -35]
Test Case: 554 | Input/Output: [(39 63 -64 69) -64]
Test Case: 555 | Input/Output: [(-42 39 51 -81) -81]
Test Case: 556 | Input/Output: [(-16 -91 95 -68) -91]
Test Case: 557 | Input/Output: [(22 51 -83 -20) -83]
Test Case: 558 | Input/Output: [(48 42 -14 73) -14]
Test Case: 559 | Input/Output: [(-83 20 -23 -52) -83]
Test Case: 560 | Input/Output: [(81 -66 64 -4) -66]
Test Case: 561 | Input/Output: [(-83 95 93 -94) -94]
Test Case: 562 | Input/Output: [(-2 -61 -1 -39) -61]
Test Case: 563 | Input/Output: [(-98 -80 -81 -51) -98]
Test Case: 564 | Input/Output: [(62 1 -30 -93) -93]
Test Case: 565 | Input/Output: [(96 89 -49 71) -49]
Test Case: 566 | Input/Output: [(-38 29 12 62) -38]
Test Case: 567 | Input/Output: [(15 -41 20 -6) -41]
Test Case: 568 | Input/Output: [(-73 -28 53 -29) -73]
Test Case: 569 | Input/Output: [(-35 29 -51 96) -51]
Test Case: 570 | Input/Output: [(46 -65 -40 -15) -65]
Test Case: 571 | Input/Output: [(16 82 24 -65) -65]
Test Case: 572 | Input/Output: [(-54 -58 84 3) -58]
Test Case: 573 | Input/Output: [(12 -41 12 73) -41]
Test Case: 574 | Input/Output: [(-9 27 56 -92) -92]
Test Case: 575 | Input/Output: [(-52 18 5 -74) -74]
Test Case: 576 | Input/Output: [(7 88 -1 -54) -54]
Test Case: 577 | Input/Output: [(-95 72 -85 -27) -95]
Test Case: 578 | Input/Output: [(49 -2 -84 49) -84]
Test Case: 579 | Input/Output: [(27 -90 63 15) -90]
Test Case: 580 | Input/Output: [(54 -100 -23 -29) -100]
Test Case: 581 | Input/Output: [(-16 23 -83 62) -83]
Test Case: 582 | Input/Output: [(-59 -18 80 26) -59]
Test Case: 583 | Input/Output: [(-19 65 33 -40) -40]
Test Case: 584 | Input/Output: [(-81 -96 1 -82) -96]
Test Case: 585 | Input/Output: [(75 92 -83 26) -83]
Test Case: 586 | Input/Output: [(-96 -13 -21 37) -96]
Test Case: 587 | Input/Output: [(100 5 73 92) 5]
Test Case: 588 | Input/Output: [(-16 -34 82 14) -34]
Test Case: 589 | Input/Output: [(-72 7 74 -50) -72]
Test Case: 590 | Input/Output: [(64 32 34 39) 32]
Test Case: 591 | Input/Output: [(-40 -37 -86 30) -86]
Test Case: 592 | Input/Output: [(-26 -42 87 16) -42]
Test Case: 593 | Input/Output: [(-98 47 27 -38) -98]
Test Case: 594 | Input/Output: [(99 90 32 -11) -11]
Test Case: 595 | Input/Output: [(-63 57 -96 72) -96]
Test Case: 596 | Input/Output: [(47 14 -100 -96) -100]
Test Case: 597 | Input/Output: [(-55 18 -92 -11) -92]
Test Case: 598 | Input/Output: [(-15 72 -44 59) -44]
Test Case: 599 | Input/Output: [(-55 79 85 11) -55]
Test Case: 600 | Input/Output: [(-32 77 17 -53) -53]
Test Case: 601 | Input/Output: [(-75 92 4 -33) -75]
Test Case: 602 | Input/Output: [(93 -84 81 25) -84]
Test Case: 603 | Input/Output: [(-49 71 -67 -28) -67]
Test Case: 604 | Input/Output: [(-67 -89 -24 -59) -89]
Test Case: 605 | Input/Output: [(95 -2 -17 -99) -99]
Test Case: 606 | Input/Output: [(15 34 -97 -36) -97]
Test Case: 607 | Input/Output: [(66 48 -17 -10) -17]
Test Case: 608 | Input/Output: [(25 -66 -39 89) -66]
Test Case: 609 | Input/Output: [(-16 -71 -90 -60) -90]
Test Case: 610 | Input/Output: [(85 49 72 6) 6]
Test Case: 611 | Input/Output: [(-72 -93 -72 -2) -93]
Test Case: 612 | Input/Output: [(67 -94 43 99) -94]
Test Case: 613 | Input/Output: [(-99 84 9 -8) -99]
Test Case: 614 | Input/Output: [(-99 99 57 -47) -99]
Test Case: 615 | Input/Output: [(-11 -42 -26 72) -42]
Test Case: 616 | Input/Output: [(-32 55 32 -69) -69]
Test Case: 617 | Input/Output: [(28 5 56 20) 5]
Test Case: 618 | Input/Output: [(39 -43 -26 -15) -43]
Test Case: 619 | Input/Output: [(26 54 -1 60) -1]
Test Case: 620 | Input/Output: [(36 -82 95 84) -82]
Test Case: 621 | Input/Output: [(-72 97 -58 -64) -72]
Test Case: 622 | Input/Output: [(-43 -10 -100 -48) -100]
Test Case: 623 | Input/Output: [(-20 49 -39 38) -39]
Test Case: 624 | Input/Output: [(-56 71 17 94) -56]
Test Case: 625 | Input/Output: [(-86 -91 29 -78) -91]
Test Case: 626 | Input/Output: [(-59 1 -13 11) -59]
Test Case: 627 | Input/Output: [(-54 49 6 97) -54]
Test Case: 628 | Input/Output: [(-5 8 15 34) -5]
Test Case: 629 | Input/Output: [(70 14 0 -49) -49]
Test Case: 630 | Input/Output: [(97 35 84 23) 23]
Test Case: 631 | Input/Output: [(-99 -20 88 88) -99]
Test Case: 632 | Input/Output: [(-99 77 -16 -31) -99]
Test Case: 633 | Input/Output: [(38 -27 -40 -42) -42]
Test Case: 634 | Input/Output: [(-35 -88 60 -11) -88]
Test Case: 635 | Input/Output: [(-59 52 -14 46) -59]
Test Case: 636 | Input/Output: [(-31 -83 66 -18) -83]
Test Case: 637 | Input/Output: [(80 -13 69 -94) -94]
Test Case: 638 | Input/Output: [(-19 78 -66 43) -66]
Test Case: 639 | Input/Output: [(78 18 -19 7) -19]
Test Case: 640 | Input/Output: [(-78 19 -27 53) -78]
Test Case: 641 | Input/Output: [(56 43 -22 58) -22]
Test Case: 642 | Input/Output: [(-97 40 -21 -93) -97]
Test Case: 643 | Input/Output: [(24 -17 23 -10) -17]
Test Case: 644 | Input/Output: [(-63 -13 86 -84) -84]
Test Case: 645 | Input/Output: [(27 42 -52 64) -52]
Test Case: 646 | Input/Output: [(76 -11 41 -90) -90]
Test Case: 647 | Input/Output: [(24 1 97 9) 1]
Test Case: 648 | Input/Output: [(69 89 11 -21) -21]
Test Case: 649 | Input/Output: [(-57 -59 -27 72) -59]
Test Case: 650 | Input/Output: [(60 26 -25 73) -25]
Test Case: 651 | Input/Output: [(64 -42 60 -42) -42]
Test Case: 652 | Input/Output: [(-69 -72 -31 -11) -72]
Test Case: 653 | Input/Output: [(-59 -48 -16 56) -59]
Test Case: 654 | Input/Output: [(68 34 33 -41) -41]
Test Case: 655 | Input/Output: [(25 38 78 -63) -63]
Test Case: 656 | Input/Output: [(4 46 -70 -19) -70]
Test Case: 657 | Input/Output: [(15 -46 78 69) -46]
Test Case: 658 | Input/Output: [(9 75 -18 -64) -64]
Test Case: 659 | Input/Output: [(-100 92 3 52) -100]
Test Case: 660 | Input/Output: [(-97 25 89 -90) -97]
Test Case: 661 | Input/Output: [(-49 64 -49 -17) -49]
Test Case: 662 | Input/Output: [(-25 84 -54 -79) -79]
Test Case: 663 | Input/Output: [(31 96 25 -52) -52]
Test Case: 664 | Input/Output: [(81 23 76 -48) -48]
Test Case: 665 | Input/Output: [(-70 -40 -3 55) -70]
Test Case: 666 | Input/Output: [(2 99 -80 67) -80]
Test Case: 667 | Input/Output: [(43 -73 -1 77) -73]
Test Case: 668 | Input/Output: [(100 97 55 47) 47]
Test Case: 669 | Input/Output: [(78 54 89 -88) -88]
Test Case: 670 | Input/Output: [(64 65 -47 64) -47]
Test Case: 671 | Input/Output: [(74 -15 10 71) -15]
Test Case: 672 | Input/Output: [(-81 -84 48 29) -84]
Test Case: 673 | Input/Output: [(75 -92 -4 -26) -92]
Test Case: 674 | Input/Output: [(-18 -26 40 -66) -66]
Test Case: 675 | Input/Output: [(77 -30 69 -34) -34]
Test Case: 676 | Input/Output: [(41 35 7 -59) -59]
Test Case: 677 | Input/Output: [(60 28 6 7) 6]
Test Case: 678 | Input/Output: [(92 -74 26 -12) -74]
Test Case: 679 | Input/Output: [(86 12 -100 -2) -100]
Test Case: 680 | Input/Output: [(-77 -60 -2 34) -77]
Test Case: 681 | Input/Output: [(15 -98 -43 -87) -98]
Test Case: 682 | Input/Output: [(-100 94 37 34) -100]
Test Case: 683 | Input/Output: [(-82 73 -48 -6) -82]
Test Case: 684 | Input/Output: [(81 -61 -48 -33) -61]
Test Case: 685 | Input/Output: [(54 88 73 -72) -72]
Test Case: 686 | Input/Output: [(-57 -3 65 -28) -57]
Test Case: 687 | Input/Output: [(-96 21 78 68) -96]
Test Case: 688 | Input/Output: [(-35 -83 56 54) -83]
Test Case: 689 | Input/Output: [(9 15 68 19) 9]
Test Case: 690 | Input/Output: [(-90 -18 66 -72) -90]
Test Case: 691 | Input/Output: [(-52 37 -43 -46) -52]
Test Case: 692 | Input/Output: [(-89 13 26 -52) -89]
Test Case: 693 | Input/Output: [(30 69 49 -47) -47]
Test Case: 694 | Input/Output: [(-37 7 59 15) -37]
Test Case: 695 | Input/Output: [(3 -18 -99 -70) -99]
Test Case: 696 | Input/Output: [(28 -83 -44 -2) -83]
Test Case: 697 | Input/Output: [(36 -98 -97 -9) -98]
Test Case: 698 | Input/Output: [(-16 -91 -44 -58) -91]
Test Case: 699 | Input/Output: [(-44 -88 -18 57) -88]
Test Case: 700 | Input/Output: [(90 1 -46 -69) -69]
Test Case: 701 | Input/Output: [(45 -31 -55 -30) -55]
Test Case: 702 | Input/Output: [(51 45 -11 1) -11]
Test Case: 703 | Input/Output: [(-64 64 -90 -78) -90]
Test Case: 704 | Input/Output: [(0 20 1 34) 0]
Test Case: 705 | Input/Output: [(99 40 38 -59) -59]
Test Case: 706 | Input/Output: [(-16 17 -86 -81) -86]
Test Case: 707 | Input/Output: [(-69 45 39 8) -69]
Test Case: 708 | Input/Output: [(21 -98 20 93) -98]
Test Case: 709 | Input/Output: [(71 85 -26 -90) -90]
Test Case: 710 | Input/Output: [(-46 -19 -57 31) -57]
Test Case: 711 | Input/Output: [(-94 14 -16 -80) -94]
Test Case: 712 | Input/Output: [(-66 -2 -96 -25) -96]
Test Case: 713 | Input/Output: [(-32 11 40 -4) -32]
Test Case: 714 | Input/Output: [(37 38 -92 51) -92]
Test Case: 715 | Input/Output: [(88 95 -6 39) -6]
Test Case: 716 | Input/Output: [(-26 50 52 -54) -54]
Test Case: 717 | Input/Output: [(0 -39 -74 84) -74]
Test Case: 718 | Input/Output: [(-7 -72 19 43) -72]
Test Case: 719 | Input/Output: [(-94 -18 -87 -56) -94]
Test Case: 720 | Input/Output: [(5 -44 -54 81) -54]
Test Case: 721 | Input/Output: [(0 -5 72 -93) -93]
Test Case: 722 | Input/Output: [(-83 32 -70 -9) -83]
Test Case: 723 | Input/Output: [(94 74 39 -11) -11]
Test Case: 724 | Input/Output: [(-58 97 -12 -26) -58]
Test Case: 725 | Input/Output: [(-21 77 49 34) -21]
Test Case: 726 | Input/Output: [(-36 74 76 6) -36]
Test Case: 727 | Input/Output: [(0 -21 31 7) -21]
Test Case: 728 | Input/Output: [(35 18 83 85) 18]
Test Case: 729 | Input/Output: [(-39 9 -26 -33) -39]
Test Case: 730 | Input/Output: [(56 -58 -56 12) -58]
Test Case: 731 | Input/Output: [(86 9 -51 -31) -51]
Test Case: 732 | Input/Output: [(-24 -20 -42 24) -42]
Test Case: 733 | Input/Output: [(28 -79 -30 -79) -79]
Test Case: 734 | Input/Output: [(16 57 -28 -59) -59]
Test Case: 735 | Input/Output: [(51 72 -60 22) -60]
Test Case: 736 | Input/Output: [(-8 95 -36 35) -36]
Test Case: 737 | Input/Output: [(-78 54 52 -7) -78]
Test Case: 738 | Input/Output: [(16 90 73 29) 16]
Test Case: 739 | Input/Output: [(29 -94 -53 -8) -94]
Test Case: 740 | Input/Output: [(-44 -97 -14 35) -97]
Test Case: 741 | Input/Output: [(85 -93 -84 16) -93]
Test Case: 742 | Input/Output: [(-29 -69 -53 65) -69]
Test Case: 743 | Input/Output: [(-82 -45 81 -83) -83]
Test Case: 744 | Input/Output: [(96 77 22 -96) -96]
Test Case: 745 | Input/Output: [(-7 20 -61 -10) -61]
Test Case: 746 | Input/Output: [(34 23 -32 -58) -58]
Test Case: 747 | Input/Output: [(-43 -58 26 92) -58]
Test Case: 748 | Input/Output: [(-40 8 -54 97) -54]
Test Case: 749 | Input/Output: [(-3 66 -82 56) -82]
Test Case: 750 | Input/Output: [(71 -72 61 -33) -72]
Test Case: 751 | Input/Output: [(0 -62 -61 -59) -62]
Test Case: 752 | Input/Output: [(9 -76 -20 76) -76]
Test Case: 753 | Input/Output: [(41 39 -81 -66) -81]
Test Case: 754 | Input/Output: [(62 -53 -34 3) -53]
Test Case: 755 | Input/Output: [(-15 -38 82 -7) -38]
Test Case: 756 | Input/Output: [(47 82 -1 -37) -37]
Test Case: 757 | Input/Output: [(12 -53 -4 -66) -66]
Test Case: 758 | Input/Output: [(60 -68 59 -91) -91]
Test Case: 759 | Input/Output: [(-32 88 49 2) -32]
Test Case: 760 | Input/Output: [(-26 48 -67 -43) -67]
Test Case: 761 | Input/Output: [(-76 40 50 95) -76]
Test Case: 762 | Input/Output: [(-48 -59 -77 -95) -95]
Test Case: 763 | Input/Output: [(-19 -23 69 -93) -93]
Test Case: 764 | Input/Output: [(-93 -11 -70 33) -93]
Test Case: 765 | Input/Output: [(-6 -72 -43 -18) -72]
Test Case: 766 | Input/Output: [(26 -87 76 -45) -87]
Test Case: 767 | Input/Output: [(33 75 22 100) 22]
Test Case: 768 | Input/Output: [(14 -9 87 62) -9]
Test Case: 769 | Input/Output: [(-55 -13 -41 7) -55]
Test Case: 770 | Input/Output: [(-85 -7 95 76) -85]
Test Case: 771 | Input/Output: [(73 -59 1 75) -59]
Test Case: 772 | Input/Output: [(-23 -75 93 39) -75]
Test Case: 773 | Input/Output: [(38 90 -4 58) -4]
Test Case: 774 | Input/Output: [(-12 -64 -45 67) -64]
Test Case: 775 | Input/Output: [(-91 51 -4 13) -91]
Test Case: 776 | Input/Output: [(-85 -12 55 -62) -85]
Test Case: 777 | Input/Output: [(49 28 -54 -90) -90]
Test Case: 778 | Input/Output: [(-85 57 9 -31) -85]
Test Case: 779 | Input/Output: [(44 90 70 51) 44]
Test Case: 780 | Input/Output: [(-27 7 31 12) -27]
Test Case: 781 | Input/Output: [(-6 -57 -11 57) -57]
Test Case: 782 | Input/Output: [(-37 83 33 -80) -80]
Test Case: 783 | Input/Output: [(-10 69 -77 -89) -89]
Test Case: 784 | Input/Output: [(60 -90 -4 -24) -90]
Test Case: 785 | Input/Output: [(56 -38 -40 28) -40]
Test Case: 786 | Input/Output: [(11 -50 70 100) -50]
Test Case: 787 | Input/Output: [(92 50 -29 -68) -68]
Test Case: 788 | Input/Output: [(-38 11 31 36) -38]
Test Case: 789 | Input/Output: [(-98 43 51 17) -98]
Test Case: 790 | Input/Output: [(79 -11 23 55) -11]
Test Case: 791 | Input/Output: [(45 82 -53 61) -53]
Test Case: 792 | Input/Output: [(-26 79 -82 -28) -82]
Test Case: 793 | Input/Output: [(25 -65 33 -10) -65]
Test Case: 794 | Input/Output: [(41 -62 12 62) -62]
Test Case: 795 | Input/Output: [(-10 96 4 -84) -84]
Test Case: 796 | Input/Output: [(-86 -20 90 -65) -86]
Test Case: 797 | Input/Output: [(-55 15 88 74) -55]
Test Case: 798 | Input/Output: [(8 42 -89 5) -89]
Test Case: 799 | Input/Output: [(37 -80 -2 -50) -80]
Test Case: 800 | Input/Output: [(16 -68 -25 62) -68]
Test Case: 801 | Input/Output: [(-36 83 -82 -1) -82]
Test Case: 802 | Input/Output: [(64 40 95 81) 40]
Test Case: 803 | Input/Output: [(-36 61 -31 -76) -76]
Test Case: 804 | Input/Output: [(-27 -45 -90 -91) -91]
Test Case: 805 | Input/Output: [(-82 -99 53 6) -99]
Test Case: 806 | Input/Output: [(40 21 -80 -28) -80]
Test Case: 807 | Input/Output: [(67 43 -90 25) -90]
Test Case: 808 | Input/Output: [(-7 -57 -93 -20) -93]
Test Case: 809 | Input/Output: [(15 -20 24 78) -20]
Test Case: 810 | Input/Output: [(-57 -2 -4 39) -57]
Test Case: 811 | Input/Output: [(-70 51 23 48) -70]
Test Case: 812 | Input/Output: [(-17 -49 -35 -58) -58]
Test Case: 813 | Input/Output: [(-85 59 5 64) -85]
Test Case: 814 | Input/Output: [(14 -3 -47 33) -47]
Test Case: 815 | Input/Output: [(-94 -70 96 29) -94]
Test Case: 816 | Input/Output: [(-56 -84 -2 -42) -84]
Test Case: 817 | Input/Output: [(43 -30 53 -45) -45]
Test Case: 818 | Input/Output: [(-31 98 -29 -49) -49]
Test Case: 819 | Input/Output: [(-3 88 -42 88) -42]
Test Case: 820 | Input/Output: [(65 -98 31 10) -98]
Test Case: 821 | Input/Output: [(-84 17 -99 -14) -99]
Test Case: 822 | Input/Output: [(74 47 -95 -63) -95]
Test Case: 823 | Input/Output: [(83 56 25 -68) -68]
Test Case: 824 | Input/Output: [(-100 -91 -85 67) -100]
Test Case: 825 | Input/Output: [(16 -80 40 -83) -83]
Test Case: 826 | Input/Output: [(64 -25 10 -9) -25]
Test Case: 827 | Input/Output: [(22 -85 -27 -8) -85]
Test Case: 828 | Input/Output: [(-47 -83 74 94) -83]
Test Case: 829 | Input/Output: [(55 -43 64 -14) -43]
Test Case: 830 | Input/Output: [(-95 -27 -99 -2) -99]
Test Case: 831 | Input/Output: [(-17 -74 -82 -100) -100]
Test Case: 832 | Input/Output: [(-23 80 -75 -87) -87]
Test Case: 833 | Input/Output: [(18 92 -59 -83) -83]
Test Case: 834 | Input/Output: [(-18 73 -90 -21) -90]
Test Case: 835 | Input/Output: [(42 13 -77 79) -77]
Test Case: 836 | Input/Output: [(11 3 -44 85) -44]
Test Case: 837 | Input/Output: [(87 -8 62 -16) -16]
Test Case: 838 | Input/Output: [(8 74 -9 89) -9]
Test Case: 839 | Input/Output: [(51 -89 74 100) -89]
Test Case: 840 | Input/Output: [(94 -90 29 61) -90]
Test Case: 841 | Input/Output: [(63 74 -18 45) -18]
Test Case: 842 | Input/Output: [(-2 87 -18 87) -18]
Test Case: 843 | Input/Output: [(-51 14 48 -74) -74]
Test Case: 844 | Input/Output: [(46 -35 -95 48) -95]
Test Case: 845 | Input/Output: [(84 -100 -25 -94) -100]
Test Case: 846 | Input/Output: [(23 -52 -9 56) -52]
Test Case: 847 | Input/Output: [(59 72 -92 -52) -92]
Test Case: 848 | Input/Output: [(58 -85 30 77) -85]
Test Case: 849 | Input/Output: [(92 -61 -27 -85) -85]
Test Case: 850 | Input/Output: [(24 -16 67 -28) -28]
Test Case: 851 | Input/Output: [(35 68 58 41) 35]
Test Case: 852 | Input/Output: [(-34 33 -12 63) -34]
Test Case: 853 | Input/Output: [(-51 23 6 -61) -61]
Test Case: 854 | Input/Output: [(-52 68 99 -33) -52]
Test Case: 855 | Input/Output: [(-52 -49 -26 16) -52]
Test Case: 856 | Input/Output: [(-56 55 99 22) -56]
Test Case: 857 | Input/Output: [(-86 53 90 -52) -86]
Test Case: 858 | Input/Output: [(49 -28 93 -66) -66]
Test Case: 859 | Input/Output: [(-25 -6 50 -99) -99]
Test Case: 860 | Input/Output: [(55 -72 26 58) -72]
Test Case: 861 | Input/Output: [(-94 -28 -39 92) -94]
Test Case: 862 | Input/Output: [(-96 86 -37 -60) -96]
Test Case: 863 | Input/Output: [(32 41 25 -68) -68]
Test Case: 864 | Input/Output: [(-38 93 0 -71) -71]
Test Case: 865 | Input/Output: [(10 -59 56 -87) -87]
Test Case: 866 | Input/Output: [(87 -25 -5 5) -25]
Test Case: 867 | Input/Output: [(-47 84 -32 -26) -47]
Test Case: 868 | Input/Output: [(53 25 -14 -65) -65]
Test Case: 869 | Input/Output: [(-21 7 -36 -49) -49]
Test Case: 870 | Input/Output: [(40 -35 -34 -11) -35]
Test Case: 871 | Input/Output: [(-67 76 43 33) -67]
Test Case: 872 | Input/Output: [(-40 -29 -31 75) -40]
Test Case: 873 | Input/Output: [(41 26 -5 78) -5]
Test Case: 874 | Input/Output: [(95 -93 -68 11) -93]
Test Case: 875 | Input/Output: [(-22 -4 43 -9) -22]
Test Case: 876 | Input/Output: [(66 -21 -28 78) -28]
Test Case: 877 | Input/Output: [(-71 -8 -30 37) -71]
Test Case: 878 | Input/Output: [(84 -96 -13 8) -96]
Test Case: 879 | Input/Output: [(-51 -89 85 -40) -89]
Test Case: 880 | Input/Output: [(-31 34 99 69) -31]
Test Case: 881 | Input/Output: [(-8 22 -87 -54) -87]
Test Case: 882 | Input/Output: [(-14 64 47 15) -14]
Test Case: 883 | Input/Output: [(24 -92 -9 92) -92]
Test Case: 884 | Input/Output: [(-57 -52 -96 -91) -96]
Test Case: 885 | Input/Output: [(21 53 62 33) 21]
Test Case: 886 | Input/Output: [(-35 -57 38 -7) -57]
Test Case: 887 | Input/Output: [(67 18 22 -62) -62]
Test Case: 888 | Input/Output: [(-98 -47 95 25) -98]
Test Case: 889 | Input/Output: [(-54 -17 -78 -33) -78]
Test Case: 890 | Input/Output: [(-4 -20 83 -24) -24]
Test Case: 891 | Input/Output: [(79 -80 19 -34) -80]
Test Case: 892 | Input/Output: [(77 -63 26 -76) -76]
Test Case: 893 | Input/Output: [(-15 -92 -78 -79) -92]
Test Case: 894 | Input/Output: [(-20 -25 -10 41) -25]
Test Case: 895 | Input/Output: [(-91 -95 96 16) -95]
Test Case: 896 | Input/Output: [(5 22 -10 -20) -20]
Test Case: 897 | Input/Output: [(-67 0 -28 43) -67]
Test Case: 898 | Input/Output: [(76 -97 96 -20) -97]
Test Case: 899 | Input/Output: [(60 36 78 -43) -43]
Test Case: 900 | Input/Output: [(76 52 89 -63) -63]
Test Case: 901 | Input/Output: [(81 2 -52 68) -52]
Test Case: 902 | Input/Output: [(-26 -31 -70 82) -70]
Test Case: 903 | Input/Output: [(57 44 85 58) 44]
Test Case: 904 | Input/Output: [(-57 74 -28 64) -57]
Test Case: 905 | Input/Output: [(-54 29 91 -28) -54]
Test Case: 906 | Input/Output: [(-98 63 -15 19) -98]
Test Case: 907 | Input/Output: [(-99 4 -39 47) -99]
Test Case: 908 | Input/Output: [(-82 58 -35 -99) -99]
Test Case: 909 | Input/Output: [(-53 63 63 61) -53]
Test Case: 910 | Input/Output: [(-96 -59 92 71) -96]
Test Case: 911 | Input/Output: [(33 -5 92 -13) -13]
Test Case: 912 | Input/Output: [(-76 -83 -66 -17) -83]
Test Case: 913 | Input/Output: [(-38 -97 -96 74) -97]
Test Case: 914 | Input/Output: [(6 -3 98 -95) -95]
Test Case: 915 | Input/Output: [(-36 -71 -89 71) -89]
Test Case: 916 | Input/Output: [(33 -1 32 -27) -27]
Test Case: 917 | Input/Output: [(-88 -38 -71 -71) -88]
Test Case: 918 | Input/Output: [(86 -46 18 73) -46]
Test Case: 919 | Input/Output: [(73 91 -52 29) -52]
Test Case: 920 | Input/Output: [(-38 -89 -23 88) -89]
Test Case: 921 | Input/Output: [(-69 -28 75 84) -69]
Test Case: 922 | Input/Output: [(48 -52 -56 -43) -56]
Test Case: 923 | Input/Output: [(-64 -98 -82 -11) -98]
Test Case: 924 | Input/Output: [(100 -80 94 49) -80]
Test Case: 925 | Input/Output: [(-40 -38 9 -58) -58]
Test Case: 926 | Input/Output: [(61 73 11 -79) -79]
Test Case: 927 | Input/Output: [(-5 37 12 -87) -87]
Test Case: 928 | Input/Output: [(40 55 10 -58) -58]
Test Case: 929 | Input/Output: [(-54 73 3 -31) -54]
Test Case: 930 | Input/Output: [(60 -80 99 -12) -80]
Test Case: 931 | Input/Output: [(-20 -70 7 70) -70]
Test Case: 932 | Input/Output: [(78 -41 -33 71) -41]
Test Case: 933 | Input/Output: [(-94 -39 -93 84) -94]
Test Case: 934 | Input/Output: [(42 7 28 58) 7]
Test Case: 935 | Input/Output: [(-97 -38 45 11) -97]
Test Case: 936 | Input/Output: [(-59 -22 -30 61) -59]
Test Case: 937 | Input/Output: [(5 -69 -28 18) -69]
Test Case: 938 | Input/Output: [(95 -52 -79 -54) -79]
Test Case: 939 | Input/Output: [(79 -66 59 31) -66]
Test Case: 940 | Input/Output: [(10 -93 36 -2) -93]
Test Case: 941 | Input/Output: [(-97 -76 14 34) -97]
Test Case: 942 | Input/Output: [(-46 44 24 -92) -92]
Test Case: 943 | Input/Output: [(-70 -75 37 -16) -75]
Test Case: 944 | Input/Output: [(-38 80 49 30) -38]
Test Case: 945 | Input/Output: [(91 -34 -14 96) -34]
Test Case: 946 | Input/Output: [(40 98 88 17) 17]
Test Case: 947 | Input/Output: [(-93 -94 -97 70) -97]
Test Case: 948 | Input/Output: [(65 -16 -31 3) -31]
Test Case: 949 | Input/Output: [(9 -43 -56 -41) -56]
Test Case: 950 | Input/Output: [(40 -27 -85 28) -85]
Test Case: 951 | Input/Output: [(7 -99 36 38) -99]
Test Case: 952 | Input/Output: [(20 -54 19 -65) -65]
Test Case: 953 | Input/Output: [(-68 66 -25 17) -68]
Test Case: 954 | Input/Output: [(19 3 -37 -12) -37]
Test Case: 955 | Input/Output: [(97 87 90 73) 73]
Test Case: 956 | Input/Output: [(-15 -33 -1 -20) -33]
Test Case: 957 | Input/Output: [(26 -11 54 53) -11]
Test Case: 958 | Input/Output: [(-94 4 -77 57) -94]
Test Case: 959 | Input/Output: [(-86 -34 49 14) -86]
Test Case: 960 | Input/Output: [(81 74 3 -23) -23]
Test Case: 961 | Input/Output: [(37 91 74 33) 33]
Test Case: 962 | Input/Output: [(27 46 64 -72) -72]
Test Case: 963 | Input/Output: [(-47 -16 70 -51) -51]
Test Case: 964 | Input/Output: [(-46 24 70 15) -46]
Test Case: 965 | Input/Output: [(-7 87 -65 -66) -66]
Test Case: 966 | Input/Output: [(-86 -47 -3 79) -86]
Test Case: 967 | Input/Output: [(-65 43 -72 65) -72]
Test Case: 968 | Input/Output: [(24 65 24 76) 24]
Test Case: 969 | Input/Output: [(-32 -50 -84 39) -84]
Test Case: 970 | Input/Output: [(70 70 82 61) 61]
Test Case: 971 | Input/Output: [(-77 -5 -13 -53) -77]
Test Case: 972 | Input/Output: [(65 -67 32 22) -67]
Test Case: 973 | Input/Output: [(-57 -98 -8 88) -98]
Test Case: 974 | Input/Output: [(46 47 60 -5) -5]
Test Case: 975 | Input/Output: [(38 9 -41 6) -41]
Test Case: 976 | Input/Output: [(-18 91 12 28) -18]
Test Case: 977 | Input/Output: [(87 73 85 -36) -36]
Test Case: 978 | Input/Output: [(69 -90 -20 52) -90]
Test Case: 979 | Input/Output: [(-60 42 20 -1) -60]
Test Case: 980 | Input/Output: [(-59 81 13 54) -59]
Test Case: 981 | Input/Output: [(-93 0 -51 4) -93]
Test Case: 982 | Input/Output: [(-87 25 -91 -18) -91]
Test Case: 983 | Input/Output: [(-9 -88 -52 55) -88]
Test Case: 984 | Input/Output: [(-53 13 75 -65) -65]
Test Case: 985 | Input/Output: [(-50 30 -84 -47) -84]
Test Case: 986 | Input/Output: [(17 1 56 -55) -55]
Test Case: 987 | Input/Output: [(-87 -35 -92 -58) -92]
Test Case: 988 | Input/Output: [(-97 -47 49 -38) -97]
Test Case: 989 | Input/Output: [(-30 13 46 -54) -54]
Test Case: 990 | Input/Output: [(-81 -40 47 -88) -88]
Test Case: 991 | Input/Output: [(-16 17 -3 94) -16]
Test Case: 992 | Input/Output: [(-45 79 28 84) -45]
Test Case: 993 | Input/Output: [(3 -87 -40 79) -87]
Test Case: 994 | Input/Output: [(28 1 7 54) 1]
Test Case: 995 | Input/Output: [(-31 -16 -25 -61) -61]
Test Case: 996 | Input/Output: [(4 -80 -42 -40) -80]
Test Case: 997 | Input/Output: [(-5 16 4 80) -5]
Test Case: 998 | Input/Output: [(39 -52 -28 71) -52]
Test Case: 999 | Input/Output: [(96 -95 -15 -52) -95]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -19 46 20 29 10 -51 -65 123 -112 -42 -106 52 95 32 -96 -75
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[74 74 74 -31] -31] [[44 44 -5 44] -5] [[-34 -34 -34 -73] -73] [[-75 79 -75 -75] -75] [[-63 -63 -63 2] -63] [[-7 94 -7 -7] -7] [[-45 -67 -45 -45] -67] [[-93 -85 -93 -93] -93] [[-84 -72 -84 -84] -84] [[-73 13 -73 -73] -73] [(35 35 35 35) 35] [(-99 -99 -99 -99) -99] [(-8 -8 -8 -8) -8] [(-11 -11 -11 -11) -11] [(19 19 19 19) 19] [(97 66 37 48) 37] [(82 40 95 16) 16] [(81 75 47 98) 47] [(36 23 57 68) 23] [(82 15 65 42) 15] [(93 4 48 13) 4] [(34 36 100 31) 31] [(59 77 14 67) 14] [(40 6 62 93) 6] [(13 8 19 28) 8] [(13 31 4 51) 4] [(6 76 32 63) 6] [(47 66 40 7) 7] [(67 69 15 45) 15] [(17 22 91 98) 17] [(26 12 53 85) 12] [(79 49 10 44) 10] [(47 30 4 65) 4] [(53 27 98 23) 23] [(68 21 36 51) 21] [(9 -75 72 -72) -75] [(30 -8 -90 2) -90] [(53 33 44 -87) -87] [(-98 32 -68 -32) -98] [(27 95 -82 25) -82] [(17 -14 77 39) -14] [(20 100 -79 -75) -79] [(85 32 5 47) 5] [(5 -60 -4 -84) -84] [(29 61 14 -50) -50] [(-48 -18 -26 30) -48] [(-91 88 -98 68) -98] [(-35 -42 62 26) -42] [(-85 33 70 80) -85] [(-58 -14 59 39) -58] [(-68 -30 -29 -30) -68] [(-67 78 -38 -58) -67] [(-38 -17 34 -6) -38] [(-37 7 -9 -11) -37] [(-51 -7 -62 94) -62] [(64 -32 -45 60) -45] [(-71 50 -93 -69) -93] [(78 81 42 50) 42] [(-4 -7 73 -5) -7] [(34 -20 52 47) -20] [(21 78 3 19) 3] [(-85 -76 -46 -74) -85] [(54 -25 -92 -34) -92] [(98 36 -69 4) -69] [(1 -18 92 -62) -62] [(-85 -99 -95 -85) -99] [(67 -48 -61 92) -61] [(81 -60 -29 39) -60] [(-64 27 -49 93) -64] [(70 -76 74 73) -76] [(-95 -69 83 -53) -95] [(-22 16 90 68) -22] [(8 -74 39 65) -74] [(-9 -29 -82 59) -82] [(-60 70 -66 -38) -66] [(-98 55 -13 75) -98] [(-66 -59 50 70) -66] [(5 -43 21 -36) -43] [(61 62 97 -93) -93] [(85 18 71 20) 18] [(11 45 63 -3) -3] [(73 36 96 54) 36] [(56 4 20 66) 4] [(-63 -61 -52 11) -63] [(73 -85 -96 81) -96] [(-87 75 -94 45) -94] [(23 93 -84 73) -84] [(57 -97 -93 -6) -97] [(-12 99 -32 7) -32] [(-88 -7 -61 -9) -88] [(-96 1 22 -94) -96] [(10 73 -93 -45) -93] [(38 69 -57 38) -57] [(9 -22 97 11) -22] [(-17 -9 16 96) -17])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: 74                 
Correct output: -5                  | Program output: -5                 
Correct output: -73                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 95                 
Correct output: 47                  | Program output: 47                 
Correct output: 23                  | Program output: 57                 
Correct output: 15                  | Program output: 65                 
Correct output: 4                   | Program output: 48                 
Correct output: 31                  | Program output: 100                
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 62                 
Correct output: 8                   | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 91                 
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 23                  | Program output: 98                 
Correct output: 21                  | Program output: 36                 
Correct output: -75                 | Program output: 72                 
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: 44                 
Correct output: -98                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -14                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 55                 
Correct output: -84                 | Program output: -4                 
Correct output: -50                 | Program output: 14                 
Correct output: -48                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 62                 
Correct output: -85                 | Program output: 70                 
Correct output: -58                 | Program output: 59                 
Correct output: -68                 | Program output: -29                
Correct output: -67                 | Program output: -38                
Correct output: -38                 | Program output: 34                 
Correct output: -37                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: 42                  | Program output: 42                 
Correct output: -7                  | Program output: 73                 
Correct output: -20                 | Program output: 52                 
Correct output: 3                   | Program output: 3                  
Correct output: -85                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: 92                 
Correct output: -99                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -29                
Correct output: -64                 | Program output: -49                
Correct output: -76                 | Program output: 74                 
Correct output: -95                 | Program output: 83                 
Correct output: -22                 | Program output: 90                 
Correct output: -74                 | Program output: 39                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -13                
Correct output: -66                 | Program output: 50                 
Correct output: -43                 | Program output: 21                 
Correct output: -93                 | Program output: 97                 
Correct output: 18                  | Program output: 71                 
Correct output: -3                  | Program output: 63                 
Correct output: 36                  | Program output: 96                 
Correct output: 4                   | Program output: 20                 
Correct output: -63                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: 22                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -22                 | Program output: 97                 
Correct output: -17                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tag_integer_54} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction -48} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (tag_integer_54 integer_yankdup exec_do*range (integer_dup integer_lte exec_s_when_autoconstructing (boolean_yankdup integer_pop integer_dup_items) (in3 print_integer integer_lt) (exec_noop) integer_mod) integer_eq exec_k_when_autoconstructing () (exec_eq) boolean_or print_newline exec_swap (integer_max integer_add) (boolean_and integer_mod integer_swap) exec_eq boolean_flush exec_k () (integer_min exec_k_when_autoconstructing (exec_flush exec_dup_items exec_flush exec_rot () (integer_add exec_dup (boolean_not integer_add exec_y (exec_if (-48 exec_do*range (exec_pop (boolean_dup integer_min boolean_dup_items))) ()))) ()) ()))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tag_integer_54} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction -48} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (tag_integer_54 integer_yankdup exec_do*range (integer_dup integer_lte exec_s_when_autoconstructing (boolean_yankdup integer_pop integer_dup_items) (in3 print_integer integer_lt) (exec_noop) integer_mod) integer_eq exec_k_when_autoconstructing () (exec_eq) boolean_or print_newline exec_swap (integer_max integer_add) (boolean_and integer_mod integer_swap) exec_eq boolean_flush exec_k () (integer_min exec_k_when_autoconstructing (exec_flush exec_dup_items exec_flush exec_rot () (integer_add exec_dup (boolean_not integer_add exec_y (exec_if (-48 exec_do*range (exec_pop (boolean_dup integer_min boolean_dup_items))) ()))) ()) ()))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (25 9 4 8 20 4 8 8 8 9)
Population mean number of elite cases: 0.10
Count of perfect (error zero) individuals by case: (25 9 4 8 20 4 8 8 8 9)
Population mean number of perfect (error zero) cases: 0.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_newline} {:close 1, :instruction exec_eq} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Best program: (exec_k_when_autoconstructing (exec_do*times (exec_when (integer_div) exec_stackdepth in3) integer_div boolean_dup_times exec_dup_items integer_dec) (boolean_empty boolean_not in1 boolean_swap boolean_flush in4 integer_lt in3 print_integer) exec_flush integer_add exec_shove (boolean_rot exec_do*while (tagged_937 exec_when (boolean_empty print_newline) exec_eq) exec_do*times ()) exec_shove (exec_stackdepth integer_add exec_yank) exec_shove (exec_do*range (integer_mult boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) print_integer in4 exec_noop integer_dup exec_eq boolean_invert_second_then_and boolean_rot) boolean_swap) (integer_yank integer_yank tagged_145 tag_exec_457 (integer_lt boolean_not) exec_s_when_autoconstructing (exec_do*count (boolean_swap boolean_frominteger exec_rot () (boolean_xor exec_if (boolean_dup) (integer_eq exec_dup_times (exec_if () () exec_rot (exec_y_when_autoconstructing (exec_eq)) () ()))) ())) () ()))))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 79
Size: 112
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 9.897
Median total errors in population: 10
Error averages by case: (0.975 0.991 0.996 0.992 0.98 0.996 0.992 0.992 0.992 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.617
Average program size in population (points): 69.935
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 485080
--- Timings ---
Current time: 1559593870783 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.2%
Fitness Testing:      1.8 seconds, 66.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: 74                 
Correct output: -5                  | Program output: -5                 
Correct output: -73                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 95                 
Correct output: 47                  | Program output: 47                 
Correct output: 23                  | Program output: 57                 
Correct output: 15                  | Program output: 65                 
Correct output: 4                   | Program output: 48                 
Correct output: 31                  | Program output: 100                
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 62                 
Correct output: 8                   | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 91                 
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 23                  | Program output: 98                 
Correct output: 21                  | Program output: 36                 
Correct output: -75                 | Program output: 72                 
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: 44                 
Correct output: -98                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -14                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -4                 
Correct output: -50                 | Program output: 14                 
Correct output: -48                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 62                 
Correct output: -85                 | Program output: 70                 
Correct output: -58                 | Program output: 59                 
Correct output: -68                 | Program output: -29                
Correct output: -67                 | Program output: -38                
Correct output: -38                 | Program output: 34                 
Correct output: -37                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: 42                  | Program output: 42                 
Correct output: -7                  | Program output: 73                 
Correct output: -20                 | Program output: 52                 
Correct output: 3                   | Program output: 3                  
Correct output: -85                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: 92                 
Correct output: -99                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -29                
Correct output: -64                 | Program output: -49                
Correct output: -76                 | Program output: 74                 
Correct output: -95                 | Program output: 83                 
Correct output: -22                 | Program output: 90                 
Correct output: -74                 | Program output: 39                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -13                
Correct output: -66                 | Program output: 50                 
Correct output: -43                 | Program output: 21                 
Correct output: -93                 | Program output: 97                 
Correct output: 18                  | Program output: 71                 
Correct output: -3                  | Program output: 63                 
Correct output: 36                  | Program output: 96                 
Correct output: 4                   | Program output: 20                 
Correct output: -63                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: 22                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -22                 | Program output: 97                 
Correct output: -17                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_806} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tagged_384} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_dup_items exec_do*count (exec_do*count (in3 print_integer print_boolean exec_dup (boolean_dup) integer_lt boolean_dup_times)) integer_inc exec_do*count (exec_shove (boolean_swap integer_dup exec_dup_items print_boolean) boolean_xor exec_swap (exec_if (exec_stackdepth print_boolean exec_k (integer_yankdup integer_flush integer_empty) (boolean_or) integer_dup_times integer_sub integer_dup_items tagged_806 integer_lte) (exec_do*count (exec_dup_items exec_k_when_autoconstructing (exec_dup_items in1) (boolean_invert_first_then_and) exec_stackdepth boolean_dup_times tagged_384) in3 boolean_dup_times integer_lt exec_yankdup)) ()))
Lexicase best errors: [0 1 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 60
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_806} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tagged_384} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_dup_items exec_do*count (exec_do*count (in3 print_integer print_boolean exec_dup (boolean_dup) integer_lt boolean_dup_times)) integer_inc exec_do*count (exec_shove (boolean_swap integer_dup exec_dup_items print_boolean) boolean_xor exec_swap (exec_if (exec_stackdepth print_boolean exec_k (integer_yankdup integer_flush integer_empty) (boolean_or) integer_dup_times integer_sub integer_dup_items tagged_806 integer_lte) (exec_do*count (exec_dup_items exec_k_when_autoconstructing (exec_dup_items in1) (boolean_invert_first_then_and) exec_stackdepth boolean_dup_times tagged_384) in3 boolean_dup_times integer_lt exec_yankdup)) ()))
Zero cases best errors: [0 1 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 60
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (457 44 44 459 72 5 455 72 458 6)
Population mean number of elite cases: 2.07
Count of perfect (error zero) individuals by case: (457 44 44 459 72 5 455 72 458 6)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_newline} {:close 1, :instruction exec_eq} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_858} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth in3) integer_div boolean_dup_times exec_dup_items integer_dec) (boolean_empty boolean_not in1 boolean_dup_times boolean_swap boolean_flush in4 integer_lt in3 print_integer) exec_flush integer_add boolean_not exec_shove (boolean_rot exec_do*while (tagged_937 exec_when (boolean_empty print_newline) exec_eq) exec_do*times ()) exec_shove (exec_stackdepth integer_add exec_yank) exec_shove (exec_do*range (integer_mult boolean_shove boolean_dup_items integer_shove tagged_858 integer_dup_items integer_lt exec_k (integer_yankdup boolean_frominteger exec_when (exec_do*count (boolean_yankdup integer_dup) print_integer in4 exec_noop integer_dup exec_eq boolean_invert_second_then_and boolean_rot) boolean_swap) (integer_yank integer_lt boolean_not) exec_s_when_autoconstructing (exec_do*count (boolean_swap exec_rot () (boolean_xor exec_if (boolean_dup) (integer_eq integer_dup_times exec_dup_times (exec_if () () exec_rot (exec_y_when_autoconstructing (exec_eq)) () ()))) ())) () ())))
Errors: [0 1 1 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 75
Size: 106
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.928
Median total errors in population: 8
Error averages by case: (0.543 0.956 0.956 0.541 0.928 0.995 0.545 0.928 0.542 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.517
Average program size in population (points): 74.882
Average percent parens in population: 0.255
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1157791
--- Timings ---
Current time: 1559593873168 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         1.9 seconds, 36.9%
Fitness Testing:      2.7 seconds, 53.2%
Report:               0.4 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -5                  | Program output: 44                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 48                 
Correct output: 16                  | Program output: 16                 
Correct output: 47                  | Program output: 81                 
Correct output: 23                  | Program output: 36                 
Correct output: 15                  | Program output: 42                 
Correct output: 4                   | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 14                  | Program output: 59                 
Correct output: 6                   | Program output: 40                 
Correct output: 8                   | Program output: 13                 
Correct output: 4                   | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 45                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 26                 
Correct output: 10                  | Program output: 44                 
Correct output: 4                   | Program output: 47                 
Correct output: 23                  | Program output: 23                 
Correct output: 21                  | Program output: 51                 
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: 25                 
Correct output: -14                 | Program output: 17                 
Correct output: -79                 | Program output: -75                
Correct output: 5                   | Program output: 47                 
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -91                
Correct output: -42                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: -51                
Correct output: -45                 | Program output: 60                 
Correct output: -93                 | Program output: -71                
Correct output: 42                  | Program output: 50                 
Correct output: -7                  | Program output: -5                 
Correct output: -20                 | Program output: 34                 
Correct output: 3                   | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -34                
Correct output: -69                 | Program output: 4                  
Correct output: -62                 | Program output: -62                
Correct output: -99                 | Program output: -85                
Correct output: -61                 | Program output: 67                 
Correct output: -60                 | Program output: 39                 
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 8                  
Correct output: -82                 | Program output: -9                 
Correct output: -66                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -36                
Correct output: -93                 | Program output: -93                
Correct output: 18                  | Program output: 20                 
Correct output: -3                  | Program output: -3                 
Correct output: 36                  | Program output: 54                 
Correct output: 4                   | Program output: 56                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: 73                 
Correct output: -94                 | Program output: -87                
Correct output: -84                 | Program output: 23                 
Correct output: -97                 | Program output: -6                 
Correct output: -32                 | Program output: -12                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -45                
Correct output: -57                 | Program output: 38                 
Correct output: -22                 | Program output: 9                  
Correct output: -17                 | Program output: -17                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items integer_dec) (exec_shove (boolean_empty boolean_not in1 boolean_swap boolean_flush in4 integer_min) print_integer) exec_flush integer_add exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (print_newline) exec_do*times ()) exec_shove (boolean_not) exec_yank exec_stackdepth integer_add print_integer) (exec_yank) (exec_shove (exec_do*range (integer_mult boolean_rot boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup exec_do*times () exec_eq boolean_invert_second_then_and in1) boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank tagged_145 tag_exec_457 (integer_lt boolean_not) boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_swap boolean_frominteger exec_rot () (boolean_xor exec_if (boolean_dup) (integer_eq exec_dup_times (exec_if () () exec_rot (exec_y_when_autoconstructing (exec_eq)) () ()))) ()) () ())))))
Lexicase best errors: [1 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 118
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items integer_dec) (exec_shove (boolean_empty boolean_not in1 boolean_swap boolean_flush in4 integer_min) print_integer) exec_flush integer_add exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (print_newline) exec_do*times ()) exec_shove (boolean_not) exec_yank exec_stackdepth integer_add print_integer) (exec_yank) (exec_shove (exec_do*range (integer_mult boolean_rot boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup exec_do*times () exec_eq boolean_invert_second_then_and in1) boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank tagged_145 tag_exec_457 (integer_lt boolean_not) boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_swap boolean_frominteger exec_rot () (boolean_xor exec_if (boolean_dup) (integer_eq exec_dup_times (exec_if () () exec_rot (exec_y_when_autoconstructing (exec_eq)) () ()))) ()) () ())))))
Zero cases best errors: [1 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 118
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (251 251 119 106 255 108 110 120 119 99)
Population mean number of elite cases: 1.54
Count of perfect (error zero) individuals by case: (251 251 119 106 255 108 110 120 119 99)
Population mean number of perfect (error zero) cases: 1.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items integer_dec) (exec_shove (boolean_empty boolean_not in1 boolean_swap boolean_flush in4 integer_min) print_integer) exec_flush integer_add exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (print_newline) exec_do*times ()) exec_shove (boolean_not) exec_yank exec_stackdepth integer_add print_integer) (exec_yank) (exec_shove (exec_do*range (integer_mult boolean_rot boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup exec_do*times () exec_eq boolean_invert_second_then_and in1) boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank tagged_145 tag_exec_457 (integer_lt boolean_not) boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_swap boolean_frominteger exec_rot () (boolean_xor exec_if (boolean_dup) (integer_eq exec_dup_times (exec_if () () exec_rot (exec_y_when_autoconstructing (exec_eq)) () ()))) ()) () ())))))
Errors: [1 1 1 0 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 82
Size: 118
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 8.462
Median total errors in population: 8
Error averages by case: (0.749 0.749 0.881 0.894 0.745 0.892 0.89 0.88 0.881 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.291
Average program size in population (points): 75.933
Average percent parens in population: 0.253
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1805182
--- Timings ---
Current time: 1559593875344 milliseconds
Total Time:           7.4 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.1 seconds, 41.5%
Fitness Testing:      3.5 seconds, 47.9%
Report:               0.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: 74                 
Correct output: -5                  | Program output: -5                 
Correct output: -73                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 82                 
Correct output: 47                  | Program output: 47                 
Correct output: 23                  | Program output: 36                 
Correct output: 15                  | Program output: 65                 
Correct output: 4                   | Program output: 48                 
Correct output: 31                  | Program output: 34                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 40                 
Correct output: 8                   | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 23                  | Program output: 53                 
Correct output: 21                  | Program output: 36                 
Correct output: -75                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -14                 | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -4                 
Correct output: -50                 | Program output: 14                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: 42                  | Program output: 42                 
Correct output: -7                  | Program output: -4                 
Correct output: -20                 | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: 1                  
Correct output: -99                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 8                  
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 5                  
Correct output: -93                 | Program output: 61                 
Correct output: 18                  | Program output: 71                 
Correct output: -3                  | Program output: 11                 
Correct output: 36                  | Program output: 73                 
Correct output: 4                   | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -22                 | Program output: 9                  
Correct output: -17                 | Program output: -17                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction 86} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items integer_dec) (boolean_empty boolean_dup_items) boolean_not in1 in3 boolean_swap boolean_flush integer_min print_integer exec_flush exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (print_newline) exec_do*times ()) exec_shove (boolean_not) exec_yank exec_stackdepth integer_add print_integer) (exec_yank) (exec_stackdepth exec_shove (integer_dup_items) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup exec_do*times () exec_eq boolean_invert_second_then_and in1) boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank 86) tagged_145 tag_exec_457 (integer_lt boolean_not) boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_swap boolean_frominteger boolean_yankdup exec_rot () (boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_if () () exec_y_when_autoconstructing (exec_eq)))) ()) ()))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 117
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction 86} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items integer_dec) (boolean_empty boolean_dup_items) boolean_not in1 in3 boolean_swap boolean_flush integer_min print_integer exec_flush exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (print_newline) exec_do*times ()) exec_shove (boolean_not) exec_yank exec_stackdepth integer_add print_integer) (exec_yank) (exec_stackdepth exec_shove (integer_dup_items) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup exec_do*times () exec_eq boolean_invert_second_then_and in1) boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank 86) tagged_145 tag_exec_457 (integer_lt boolean_not) boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_swap boolean_frominteger boolean_yankdup exec_rot () (boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_if () () exec_y_when_autoconstructing (exec_eq)))) ()) ()))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 117
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 192 194 195 205 191 207 206 205 395)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (217 192 194 195 205 191 207 206 205 395)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction 86} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items integer_dec) (boolean_empty boolean_dup_items) boolean_not in1 in3 boolean_swap boolean_flush integer_min print_integer exec_flush exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (print_newline) exec_do*times ()) exec_shove (boolean_not) exec_yank exec_stackdepth integer_add print_integer) (exec_yank) (exec_stackdepth exec_shove (integer_dup_items) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup exec_do*times () exec_eq boolean_invert_second_then_and in1) boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank 86) tagged_145 tag_exec_457 (integer_lt boolean_not) boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_swap boolean_frominteger boolean_yankdup exec_rot () (boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_if () () exec_y_when_autoconstructing (exec_eq)))) ()) ()))
Errors: [1 1 1 0 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 85
Size: 117
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 7.793
Median total errors in population: 7
Error averages by case: (0.783 0.808 0.806 0.805 0.795 0.809 0.793 0.794 0.795 0.605)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.022
Average program size in population (points): 84.623
Average percent parens in population: 0.274
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2346699
--- Timings ---
Current time: 1559593877345 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.2 seconds, 45.1%
Fitness Testing:      4.1 seconds, 44.1%
Report:               0.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: 74                 
Correct output: -5                  | Program output: -5                 
Correct output: -73                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 82                 
Correct output: 47                  | Program output: 47                 
Correct output: 23                  | Program output: 36                 
Correct output: 15                  | Program output: 65                 
Correct output: 4                   | Program output: 48                 
Correct output: 31                  | Program output: 34                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 40                 
Correct output: 8                   | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 23                  | Program output: 53                 
Correct output: 21                  | Program output: 36                 
Correct output: -75                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -14                 | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -4                 
Correct output: -50                 | Program output: 14                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: 42                  | Program output: 42                 
Correct output: -7                  | Program output: -4                 
Correct output: -20                 | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: 1                  
Correct output: -99                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 8                  
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 5                  
Correct output: -93                 | Program output: 61                 
Correct output: 18                  | Program output: 71                 
Correct output: -3                  | Program output: 11                 
Correct output: 36                  | Program output: 73                 
Correct output: 4                   | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -22                 | Program output: 9                  
Correct output: -17                 | Program output: -17                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_div boolean_dup_times exec_dup_items integer_dec) boolean_empty boolean_dup_items) (exec_shove (boolean_not in1 in3 boolean_swap boolean_flush integer_min) print_integer) exec_flush exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_k (exec_when (print_newline) exec_do*times ()) (exec_shove (boolean_not) exec_yank exec_stackdepth integer_add print_integer) exec_yank) exec_stackdepth exec_shove (integer_dup_items) integer_mult boolean_invert_second_then_and) (boolean_rot boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup boolean_rot integer_dup) exec_noop integer_dup exec_do*times () integer_yank exec_eq boolean_invert_second_then_and in1) boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank tagged_145 tag_exec_457 (integer_lt boolean_not) boolean_invert_second_then_and tagged_123) (boolean_swap boolean_frominteger boolean_yankdup exec_rot () (boolean_xor in2 exec_if (exec_dup_times (exec_if () () exec_y_when_autoconstructing (exec_eq))) ()) ())))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 116
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_div boolean_dup_times exec_dup_items integer_dec) boolean_empty boolean_dup_items) (exec_shove (boolean_not in1 in3 boolean_swap boolean_flush integer_min) print_integer) exec_flush exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_k (exec_when (print_newline) exec_do*times ()) (exec_shove (boolean_not) exec_yank exec_stackdepth integer_add print_integer) exec_yank) exec_stackdepth exec_shove (integer_dup_items) integer_mult boolean_invert_second_then_and) (boolean_rot boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup boolean_rot integer_dup) exec_noop integer_dup exec_do*times () integer_yank exec_eq boolean_invert_second_then_and in1) boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank tagged_145 tag_exec_457 (integer_lt boolean_not) boolean_invert_second_then_and tagged_123) (boolean_swap boolean_frominteger boolean_yankdup exec_rot () (boolean_xor in2 exec_if (exec_dup_times (exec_if () () exec_y_when_autoconstructing (exec_eq))) ()) ())))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 116
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (365 188 358 359 373 183 358 376 681 249)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (365 188 358 359 373 183 358 376 681 249)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction 86} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items integer_dec) (boolean_empty boolean_dup_items) boolean_not in1 in3 boolean_flush integer_min integer_gt print_integer exec_flush exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (print_newline) exec_shove (boolean_not) exec_yank exec_stackdepth integer_add print_integer) exec_yank) (exec_stackdepth exec_shove (integer_dup_items) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_shove boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger exec_when (exec_while () exec_do*count (boolean_yankdup integer_min) integer_dup) exec_noop integer_dup exec_eq boolean_invert_second_then_and boolean_shove in1) (integer_mod boolean_rot) boolean_invert_second_then_and boolean_swap) (integer_yank integer_yank 86) tagged_145 tag_exec_457 (integer_lt boolean_not) boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_swap boolean_frominteger boolean_yankdup exec_rot () (boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_if () () exec_y_when_autoconstructing (exec_eq)))) ()) ()))
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 86
Size: 117
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.51
Median total errors in population: 6
Error averages by case: (0.635 0.812 0.642 0.641 0.627 0.817 0.642 0.624 0.319 0.751)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 85.494
Average program size in population (points): 120.447
Average percent parens in population: 0.289
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2668253
--- Timings ---
Current time: 1559593879137 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.4 seconds, 48.4%
Fitness Testing:      4.5 seconds, 40.3%
Report:               1.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: 74                 
Correct output: -5                  | Program output: -5                 
Correct output: -73                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 82                 
Correct output: 47                  | Program output: 47                 
Correct output: 23                  | Program output: 36                 
Correct output: 15                  | Program output: 65                 
Correct output: 4                   | Program output: 48                 
Correct output: 31                  | Program output: 34                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 40                 
Correct output: 8                   | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 23                  | Program output: 53                 
Correct output: 21                  | Program output: 36                 
Correct output: -75                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -14                 | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -4                 
Correct output: -50                 | Program output: 14                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: 42                  | Program output: 42                 
Correct output: -7                  | Program output: -4                 
Correct output: -20                 | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: 1                  
Correct output: -99                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 8                  
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 5                  
Correct output: -93                 | Program output: 61                 
Correct output: 18                  | Program output: 71                 
Correct output: -3                  | Program output: 11                 
Correct output: 36                  | Program output: 73                 
Correct output: 4                   | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -93                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -22                 | Program output: 9                  
Correct output: -17                 | Program output: -17                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 0, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_145} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items boolean_rot integer_dec) (exec_stackdepth) boolean_empty boolean_dup_items boolean_not in1 in3 boolean_swap boolean_flush integer_min print_integer exec_flush exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (print_newline) print_newline exec_do*times ()) exec_shove (boolean_not) boolean_empty exec_yank exec_stackdepth integer_add print_integer) (exec_yank) (exec_stackdepth exec_shove (boolean_pop integer_dup_items) boolean_dup_items exec_do*range (integer_mult boolean_rot boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_dec integer_lt exec_k (boolean_frominteger boolean_yank exec_do*count (boolean_empty boolean_yankdup exec_noop integer_dup exec_empty exec_do*times () exec_eq integer_fromboolean boolean_invert_second_then_and in1) integer_lte boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank tagged_145 integer_lt exec_do*count (boolean_not) boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_swap boolean_frominteger boolean_yankdup boolean_xor exec_k () (exec_if (exec_dup_items exec_dup_times (exec_if () () exec_y_when_autoconstructing (exec_eq boolean_stackdepth))) ())) ()))))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 122
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 0, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_145} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items boolean_rot integer_dec) (exec_stackdepth) boolean_empty boolean_dup_items boolean_not in1 in3 boolean_swap boolean_flush integer_min print_integer exec_flush exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (print_newline) print_newline exec_do*times ()) exec_shove (boolean_not) boolean_empty exec_yank exec_stackdepth integer_add print_integer) (exec_yank) (exec_stackdepth exec_shove (boolean_pop integer_dup_items) boolean_dup_items exec_do*range (integer_mult boolean_rot boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_dec integer_lt exec_k (boolean_frominteger boolean_yank exec_do*count (boolean_empty boolean_yankdup exec_noop integer_dup exec_empty exec_do*times () exec_eq integer_fromboolean boolean_invert_second_then_and in1) integer_lte boolean_rot) (boolean_invert_second_then_and boolean_swap) integer_yank integer_yank tagged_145 integer_lt exec_do*count (boolean_not) boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_swap boolean_frominteger boolean_yankdup boolean_xor exec_k () (exec_if (exec_dup_items exec_dup_times (exec_if () () exec_y_when_autoconstructing (exec_eq boolean_stackdepth))) ())) ()))))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 122
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 344 389 354 342 644 371 345 385 346)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (164 344 389 354 342 644 371 345 385 346)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 1, :instruction tagged_616} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction 86} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_if} {:close 0, :instruction exec_eq})
Best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth integer_inc) integer_div boolean_dup_times exec_dup_items integer_dec) (boolean_empty boolean_dup_items) boolean_not in1 in3 boolean_swap boolean_flush integer_min print_integer exec_flush exec_while () exec_shove (exec_rot (boolean_rot exec_do*while (tagged_937 exec_when (exec_do*times ()) exec_shove (boolean_not) integer_mod)) (exec_yank tagged_616) (exec_stackdepth integer_add exec_do*count (print_integer) exec_yank) exec_stackdepth exec_shove (integer_dup_items) exec_do*range (integer_mult boolean_rot boolean_shove exec_yankdup boolean_dup_items integer_shove boolean_dup_items integer_rot integer_dup_items integer_mod integer_lt exec_k (boolean_frominteger boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup integer_dec)) (exec_eq integer_gte boolean_invert_second_then_and in1) boolean_rot) boolean_invert_second_then_and integer_yank integer_yank 86) tagged_145 tag_exec_457 (integer_shove) integer_lt boolean_not boolean_invert_second_then_and tagged_123 boolean_frominteger boolean_yankdup exec_rot () (exec_if (boolean_dup) (exec_dup_times (exec_if () () exec_eq))) ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 85
Size: 114
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 6.316
Median total errors in population: 7
Error averages by case: (0.836 0.656 0.611 0.646 0.658 0.356 0.629 0.655 0.615 0.654)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.977
Average program size in population (points): 121.343
Average percent parens in population: 0.282
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3003543
--- Timings ---
Current time: 1559593880990 milliseconds
Total Time:          13.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.5 seconds, 50.4%
Fitness Testing:      4.9 seconds, 37.6%
Report:               1.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: 74                 
Correct output: -5                  | Program output: -5                 
Correct output: -73                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 40                 
Correct output: 47                  | Program output: 47                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 31                  | Program output: 36                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 22                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 23                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: 33                 
Correct output: -98                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -60                
Correct output: -50                 | Program output: 14                 
Correct output: -48                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: 33                 
Correct output: -58                 | Program output: -14                
Correct output: -68                 | Program output: -30                
Correct output: -67                 | Program output: -38                
Correct output: -38                 | Program output: -17                
Correct output: -37                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: 42                  | Program output: 42                 
Correct output: -7                  | Program output: -7                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: -85                 | Program output: -76                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -18                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -69                
Correct output: -22                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -13                
Correct output: -66                 | Program output: -59                
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -3                  | Program output: 45                 
Correct output: 36                  | Program output: 36                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: 1                  
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -22                 | Program output: -22                
Correct output: -17                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_679} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction 86} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_457} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth boolean_xor) integer_inc) (integer_div exec_if (boolean_dup_times boolean_invert_second_then_and exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (tagged_937 exec_when (print_newline) exec_do*times ()) (exec_shove (exec_yank integer_add print_integer) tagged_679 exec_yank) exec_shove (print_boolean integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_dup_items integer_shove boolean_dup_items integer_rot exec_k (boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup boolean_yank) exec_do*times () exec_eq integer_dup boolean_invert_second_then_and in1) (boolean_rot) boolean_shove exec_dup_items boolean_swap integer_yank exec_pop (86) integer_lt tagged_145 integer_empty tag_exec_457 (exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger exec_do*count (boolean_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing ())))) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 114
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_679} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction 86} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_457} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth boolean_xor) integer_inc) (integer_div exec_if (boolean_dup_times boolean_invert_second_then_and exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (tagged_937 exec_when (print_newline) exec_do*times ()) (exec_shove (exec_yank integer_add print_integer) tagged_679 exec_yank) exec_shove (print_boolean integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_dup_items integer_shove boolean_dup_items integer_rot exec_k (boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup boolean_yank) exec_do*times () exec_eq integer_dup boolean_invert_second_then_and in1) (boolean_rot) boolean_shove exec_dup_items boolean_swap integer_yank exec_pop (86) integer_lt tagged_145 integer_empty tag_exec_457 (exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger exec_do*count (boolean_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing ())))) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 114
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 712 431 559 414 9 9 430 430 559)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (9 712 431 559 414 9 9 430 430 559)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_679} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction 86} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_457} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_k_when_autoconstructing (exec_do*times (exec_stackdepth boolean_xor) integer_inc) (integer_div exec_if (boolean_dup_times boolean_invert_second_then_and exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (tagged_937 exec_when (print_newline) exec_do*times ()) (exec_shove (exec_yank integer_add print_integer) tagged_679 exec_yank) exec_shove (print_boolean integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_dup_items integer_shove boolean_dup_items integer_rot exec_k (boolean_yank exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup boolean_yank) exec_do*times () exec_eq integer_dup boolean_invert_second_then_and in1) (boolean_rot) boolean_shove exec_dup_items boolean_swap integer_yank exec_pop (86) integer_lt tagged_145 integer_empty tag_exec_457 (exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger exec_do*count (boolean_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing ())))) ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 84
Size: 114
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.438
Median total errors in population: 7
Error averages by case: (0.991 0.288 0.569 0.441 0.586 0.991 0.991 0.57 0.57 0.441)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 85.673
Average program size in population (points): 119.088
Average percent parens in population: 0.279
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3301705
--- Timings ---
Current time: 1559593882791 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.7 seconds, 52.1%
Fitness Testing:      5.2 seconds, 35.2%
Report:               1.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: 74                 
Correct output: -5                  | Program output: -5                 
Correct output: -73                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 40                 
Correct output: 47                  | Program output: 47                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 31                  | Program output: 34                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 23                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -60                
Correct output: -50                 | Program output: 14                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: 42                  | Program output: 42                 
Correct output: -7                  | Program output: -7                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -18                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: -3                  | Program output: 11                 
Correct output: 36                  | Program output: 36                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -22                 | Program output: -22                
Correct output: -17                 | Program output: -17                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_679} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction 86} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (tagged_937 exec_when (print_newline) exec_do*times ()) (exec_shove (integer_shove exec_yank integer_add tagged_679 integer_eq exec_yank) exec_shove (print_boolean boolean_stackdepth integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup) integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup boolean_yank) exec_do*times () exec_eq integer_dup boolean_or boolean_invert_second_then_and in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (boolean_stackdepth integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing ())))))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 123
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_679} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction 86} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (tagged_937 exec_when (print_newline) exec_do*times ()) (exec_shove (integer_shove exec_yank integer_add tagged_679 integer_eq exec_yank) exec_shove (print_boolean boolean_stackdepth integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup) integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (boolean_yankdup integer_dup) exec_noop integer_dup boolean_yank) exec_do*times () exec_eq integer_dup boolean_or boolean_invert_second_then_and in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (boolean_stackdepth integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing ())))))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 123
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 362 422 432 433 362 434 416 328 383)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (8 362 422 432 433 362 434 416 328 383)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Best program: (exec_k_when_autoconstructing (exec_y_when_autoconstructing (integer_max) integer_eq exec_do*times (integer_inc) integer_div boolean_dup_times boolean_yankdup integer_dec) (exec_shove (boolean_not in1 in3 boolean_swap in2) integer_rot) boolean_flush boolean_invert_first_then_and integer_min integer_min print_integer integer_yank exec_flush print_exec (integer_add exec_shove (integer_mult exec_y_when_autoconstructing (exec_yank exec_rot (integer_eq) (boolean_rot exec_do*while (integer_sub boolean_xor exec_when (print_newline) exec_do*times ()) exec_shove (boolean_not) exec_stackdepth integer_add boolean_invert_second_then_and print_integer exec_yank) (exec_shove (boolean_frominteger exec_when (exec_do*range (exec_y () boolean_rot boolean_shove boolean_frominteger integer_shove boolean_yankdup boolean_dup_times integer_dup_items exec_k (tag_boolean_529 boolean_frominteger boolean_yank boolean_dup integer_dup) (print_integer boolean_xor exec_noop exec_y_when_autoconstructing (integer_dup exec_do*times () exec_eq boolean_rot) exec_do*times () boolean_invert_second_then_and boolean_swap) integer_yank boolean_pop tagged_145 tag_exec_457 (integer_lt integer_div boolean_not) boolean_invert_second_then_and exec_s (exec_y (exec_s_when_autoconstructing (exec_while (boolean_swap boolean_frominteger print_newline) exec_rot () (exec_s_when_autoconstructing (boolean_stackdepth exec_s (integer_lt) () (exec_if (boolean_dup) (exec_dup_times (in1 exec_if (exec_if () () exec_rot (exec_y_when_autoconstructing (exec_eq)) () ()) ())))) () ()) ()) () ())) () ()))))))))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 104
Size: 158
Percent parens: 0.342
--- Population Statistics ---
Average total errors in population: 6.42
Median total errors in population: 6
Error averages by case: (0.992 0.638 0.578 0.568 0.567 0.638 0.566 0.584 0.672 0.617)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.234
Average program size in population (points): 119.695
Average percent parens in population: 0.277
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3629832
--- Timings ---
Current time: 1559593884689 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.9 seconds, 53.4%
Fitness Testing:      5.6 seconds, 33.4%
Report:               2.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 219
Test mean error for best: 0.21900
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: 74                 
Correct output: -5                  | Program output: -5                 
Correct output: -73                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 40                 
Correct output: 47                  | Program output: 47                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 31                  | Program output: 34                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 23                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -60                
Correct output: -50                 | Program output: 14                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: 42                  | Program output: 42                 
Correct output: -7                  | Program output: -7                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -18                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: -3                  | Program output: 11                 
Correct output: 36                  | Program output: 36                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -22                 | Program output: -22                
Correct output: -17                 | Program output: -17                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_527} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 3, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_y_when_autoconstructing (integer_max) integer_eq exec_do*times (integer_inc) integer_div tagged_527 boolean_dup_times boolean_yankdup integer_dec exec_shove (boolean_not in1 in3 boolean_swap in2) integer_rot boolean_invert_first_then_and integer_min integer_min print_integer integer_yank exec_flush print_exec (integer_add integer_mult exec_y_when_autoconstructing (exec_yank boolean_flush) integer_eq) boolean_rot exec_do*while (integer_sub exec_empty) boolean_xor integer_dec exec_when (print_newline) exec_do*times () exec_shove (boolean_not) exec_stackdepth exec_noop boolean_invert_second_then_and print_integer exec_yank exec_shove (boolean_frominteger exec_when (exec_do*range (exec_y () boolean_rot boolean_shove integer_sub boolean_frominteger integer_shove boolean_dup_times integer_dup_items exec_k (tag_boolean_529 boolean_frominteger boolean_yank boolean_dup integer_dup) (print_integer boolean_xor exec_noop exec_y_when_autoconstructing (integer_dup integer_empty exec_do*times () exec_eq boolean_rot) exec_do*times () boolean_invert_second_then_and boolean_swap) integer_yank boolean_pop tagged_145 tag_exec_457 (integer_lt integer_div boolean_not) boolean_invert_second_then_and exec_s (exec_y (exec_s_when_autoconstructing (exec_while (boolean_swap boolean_frominteger print_newline) exec_rot () (exec_s_when_autoconstructing (boolean_stackdepth exec_s (integer_lt) () (exec_if (boolean_dup) (in1 exec_if (print_integer exec_if () () exec_rot (exec_y_when_autoconstructing (exec_eq)) () ()) ()))) () ()) ()) () ())) () ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 152
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_527} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 3, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_529} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_145} {:close 0, :instruction tag_exec_457} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 2, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_y_when_autoconstructing (integer_max) integer_eq exec_do*times (integer_inc) integer_div tagged_527 boolean_dup_times boolean_yankdup integer_dec exec_shove (boolean_not in1 in3 boolean_swap in2) integer_rot boolean_invert_first_then_and integer_min integer_min print_integer integer_yank exec_flush print_exec (integer_add integer_mult exec_y_when_autoconstructing (exec_yank boolean_flush) integer_eq) boolean_rot exec_do*while (integer_sub exec_empty) boolean_xor integer_dec exec_when (print_newline) exec_do*times () exec_shove (boolean_not) exec_stackdepth exec_noop boolean_invert_second_then_and print_integer exec_yank exec_shove (boolean_frominteger exec_when (exec_do*range (exec_y () boolean_rot boolean_shove integer_sub boolean_frominteger integer_shove boolean_dup_times integer_dup_items exec_k (tag_boolean_529 boolean_frominteger boolean_yank boolean_dup integer_dup) (print_integer boolean_xor exec_noop exec_y_when_autoconstructing (integer_dup integer_empty exec_do*times () exec_eq boolean_rot) exec_do*times () boolean_invert_second_then_and boolean_swap) integer_yank boolean_pop tagged_145 tag_exec_457 (integer_lt integer_div boolean_not) boolean_invert_second_then_and exec_s (exec_y (exec_s_when_autoconstructing (exec_while (boolean_swap boolean_frominteger print_newline) exec_rot () (exec_s_when_autoconstructing (boolean_stackdepth exec_s (integer_lt) () (exec_if (boolean_dup) (in1 exec_if (print_integer exec_if () () exec_rot (exec_y_when_autoconstructing (exec_eq)) () ()) ()))) () ()) ()) () ())) () ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 152
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (412 439 434 478 531 485 474 642 412 431)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (412 439 434 478 531 485 474 642 412 431)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_937} {:close 0, :instruction exec_when} {:close 1, :instruction print_newline} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_679} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction 86} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_123} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 92
Size: 124
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 5.262
Median total errors in population: 5
Error averages by case: (0.588 0.561 0.566 0.522 0.469 0.515 0.526 0.358 0.588 0.569)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.997
Average program size in population (points): 142.275
Average percent parens in population: 0.308
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4000280
--- Timings ---
Current time: 1559593886699 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.0 seconds, 54.1%
Fitness Testing:      5.9 seconds, 32.2%
Report:               2.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 124


Auto-simplifying with starting size: 124
step: 0
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 500
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 1000
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 1500
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 2000
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 2500
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 3000
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 3500
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 4000
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 4500
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

step: 5000
program: (exec_do*times (exec_stackdepth boolean_xor) exec_dup_times (integer_inc) integer_div exec_if (boolean_dup_times boolean_invert_second_then_and integer_shove exec_dup_items integer_dec) (boolean_empty in1 in3 in2 boolean_swap boolean_flush integer_min) integer_min exec_do*range (print_integer) exec_flush exec_shove (exec_rot (boolean_frominteger) (boolean_empty tagged_937 exec_when (print_newline) exec_do*times ()) (integer_div) exec_shove (integer_shove exec_yank integer_add boolean_and tagged_679 integer_eq exec_yank) exec_shove (integer_dup_items) integer_dup_times) exec_do*range (integer_mult boolean_invert_second_then_and) boolean_rot boolean_yankdup integer_shove boolean_dup_items integer_rot exec_k (exec_when (exec_do*count (exec_noop integer_dup integer_pop) boolean_yank) exec_do*times () exec_eq integer_dup boolean_or integer_inc in1) (boolean_rot) exec_s_when_autoconstructing (boolean_shove) (exec_dup_items boolean_swap) (integer_yank exec_pop (86) integer_lt tagged_145 integer_empty exec_yank boolean_not) integer_dup_times boolean_invert_second_then_and exec_s_when_autoconstructing (tagged_123) (boolean_frominteger integer_gt) (exec_do*count (boolean_yankdup exec_yankdup boolean_xor exec_if (boolean_dup) (exec_dup_times (exec_y_when_autoconstructing (boolean_and))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 124

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 219
Test mean error for best: 0.21900
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: 74                 
Correct output: -5                  | Program output: -5                 
Correct output: -73                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -7                  | Program output: -7                 
Correct output: -67                 | Program output: -67                
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -73                 | Program output: -73                
Correct output: 35                  | Program output: 35                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -11                 | Program output: -11                
Correct output: 19                  | Program output: 19                 
Correct output: 37                  | Program output: 37                 
Correct output: 16                  | Program output: 40                 
Correct output: 47                  | Program output: 47                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 31                  | Program output: 34                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: 23                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -60                
Correct output: -50                 | Program output: 14                 
Correct output: -48                 | Program output: -48                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -67                
Correct output: -38                 | Program output: -38                
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: 42                  | Program output: 42                 
Correct output: -7                  | Program output: -7                 
Correct output: -20                 | Program output: -20                
Correct output: 3                   | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -69                 | Program output: -69                
Correct output: -62                 | Program output: -18                
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: -3                  | Program output: 11                 
Correct output: 36                  | Program output: 36                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -97                 | Program output: -97                
Correct output: -32                 | Program output: -32                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -22                 | Program output: -22                
Correct output: -17                 | Program output: -17                
;;******************************
