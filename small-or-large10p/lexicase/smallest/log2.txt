Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[19 -47 -47 -47] -47] [[23 -7 -7 -7] -7] [[35 -31 35 35] -31] [[-49 -49 -49 48] -49] [[95 95 95 -43] -43] [[-97 -97 -97 -83] -97] [[80 -28 -28 -28] -28] [[-93 93 -93 -93] -93] [[-63 -63 -37 -63] -63] [[6 87 6 6] 6] [(-44 -44 -44 -44) -44] [(21 21 21 21) 21] [(82 82 82 82) 82] [(-81 -81 -81 -81) -81] [(85 85 85 85) 85] [(95 51 96 71) 51] [(89 31 13 34) 13] [(44 10 10 80) 10] [(52 8 82 37) 8] [(80 51 74 57) 51] [(17 16 11 5) 5] [(36 87 32 4) 4] [(92 83 5 55) 5] [(63 34 89 13) 13] [(1 81 21 98) 1] [(24 76 31 96) 24] [(34 7 66 62) 7] [(24 51 63 54) 24] [(48 51 5 22) 5] [(21 82 38 93) 21] [(96 50 23 49) 23] [(67 11 2 1) 1] [(66 49 15 45) 15] [(69 13 60 0) 0] [(78 100 27 32) 27] [(91 5 -64 31) -64] [(-31 -3 -91 -15) -91] [(53 -58 -94 32) -94] [(31 61 -84 79) -84] [(-22 6 -23 76) -23] [(-36 -41 40 -57) -57] [(-30 -27 43 6) -30] [(-18 -88 -27 28) -88] [(11 -98 -45 60) -98] [(29 -100 -94 -82) -100] [(59 14 -14 94) -14] [(-49 92 -37 43) -49] [(-49 50 8 75) -49] [(0 36 90 10) 0] [(-52 17 -22 85) -52] [(-84 -87 -3 10) -87] [(-31 50 -4 -81) -81] [(-79 14 -37 7) -79] [(37 -67 -65 29) -67] [(50 -70 18 -16) -70] [(-68 53 37 -1) -68] [(-4 98 -9 -52) -52] [(13 -2 -52 0) -52] [(72 2 10 -16) -16] [(-23 -49 -46 35) -49] [(15 -79 1 5) -79] [(42 -31 -45 -69) -69] [(-77 -22 -37 74) -77] [(70 -82 46 0) -82] [(27 21 13 -53) -53] [(-96 87 48 -42) -96] [(-23 -1 -82 83) -82] [(-47 59 18 -10) -47] [(85 -87 45 -98) -98] [(59 -36 -4 41) -36] [(-14 96 -44 -5) -44] [(95 22 84 -59) -59] [(-46 33 -67 94) -67] [(-9 100 -15 -88) -88] [(-90 0 -44 92) -90] [(-40 3 -25 21) -40] [(0 -95 17 44) -95] [(-66 -12 10 -82) -82] [(-7 11 -52 -67) -67] [(72 -63 15 -22) -63] [(-37 -10 12 -49) -49] [(-81 -99 56 -100) -100] [(-54 -16 66 62) -54] [(23 -56 49 -39) -56] [(15 -43 90 -47) -47] [(-3 51 -64 20) -64] [(-97 7 -59 82) -97] [(-48 -48 92 -99) -99] [(-74 54 52 7) -74] [(20 11 -58 -29) -58] [(-24 -41 -18 -44) -44] [(-33 83 71 64) -33] [(-87 44 7 77) -87] [(-47 -100 -11 67) -100] [(-72 14 -3 69) -72])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[19 -47 -47 -47] -47]
Train Case:   6 | Input/Output: [[23 -7 -7 -7] -7]
Train Case:   7 | Input/Output: [[35 -31 35 35] -31]
Train Case:   8 | Input/Output: [[-49 -49 -49 48] -49]
Train Case:   9 | Input/Output: [[95 95 95 -43] -43]
Train Case:  10 | Input/Output: [[-97 -97 -97 -83] -97]
Train Case:  11 | Input/Output: [[80 -28 -28 -28] -28]
Train Case:  12 | Input/Output: [[-93 93 -93 -93] -93]
Train Case:  13 | Input/Output: [[-63 -63 -37 -63] -63]
Train Case:  14 | Input/Output: [[6 87 6 6] 6]
Train Case:  15 | Input/Output: [(-44 -44 -44 -44) -44]
Train Case:  16 | Input/Output: [(21 21 21 21) 21]
Train Case:  17 | Input/Output: [(82 82 82 82) 82]
Train Case:  18 | Input/Output: [(-81 -81 -81 -81) -81]
Train Case:  19 | Input/Output: [(85 85 85 85) 85]
Train Case:  20 | Input/Output: [(95 51 96 71) 51]
Train Case:  21 | Input/Output: [(89 31 13 34) 13]
Train Case:  22 | Input/Output: [(44 10 10 80) 10]
Train Case:  23 | Input/Output: [(52 8 82 37) 8]
Train Case:  24 | Input/Output: [(80 51 74 57) 51]
Train Case:  25 | Input/Output: [(17 16 11 5) 5]
Train Case:  26 | Input/Output: [(36 87 32 4) 4]
Train Case:  27 | Input/Output: [(92 83 5 55) 5]
Train Case:  28 | Input/Output: [(63 34 89 13) 13]
Train Case:  29 | Input/Output: [(1 81 21 98) 1]
Train Case:  30 | Input/Output: [(24 76 31 96) 24]
Train Case:  31 | Input/Output: [(34 7 66 62) 7]
Train Case:  32 | Input/Output: [(24 51 63 54) 24]
Train Case:  33 | Input/Output: [(48 51 5 22) 5]
Train Case:  34 | Input/Output: [(21 82 38 93) 21]
Train Case:  35 | Input/Output: [(96 50 23 49) 23]
Train Case:  36 | Input/Output: [(67 11 2 1) 1]
Train Case:  37 | Input/Output: [(66 49 15 45) 15]
Train Case:  38 | Input/Output: [(69 13 60 0) 0]
Train Case:  39 | Input/Output: [(78 100 27 32) 27]
Train Case:  40 | Input/Output: [(91 5 -64 31) -64]
Train Case:  41 | Input/Output: [(-31 -3 -91 -15) -91]
Train Case:  42 | Input/Output: [(53 -58 -94 32) -94]
Train Case:  43 | Input/Output: [(31 61 -84 79) -84]
Train Case:  44 | Input/Output: [(-22 6 -23 76) -23]
Train Case:  45 | Input/Output: [(-36 -41 40 -57) -57]
Train Case:  46 | Input/Output: [(-30 -27 43 6) -30]
Train Case:  47 | Input/Output: [(-18 -88 -27 28) -88]
Train Case:  48 | Input/Output: [(11 -98 -45 60) -98]
Train Case:  49 | Input/Output: [(29 -100 -94 -82) -100]
Train Case:  50 | Input/Output: [(59 14 -14 94) -14]
Train Case:  51 | Input/Output: [(-49 92 -37 43) -49]
Train Case:  52 | Input/Output: [(-49 50 8 75) -49]
Train Case:  53 | Input/Output: [(0 36 90 10) 0]
Train Case:  54 | Input/Output: [(-52 17 -22 85) -52]
Train Case:  55 | Input/Output: [(-84 -87 -3 10) -87]
Train Case:  56 | Input/Output: [(-31 50 -4 -81) -81]
Train Case:  57 | Input/Output: [(-79 14 -37 7) -79]
Train Case:  58 | Input/Output: [(37 -67 -65 29) -67]
Train Case:  59 | Input/Output: [(50 -70 18 -16) -70]
Train Case:  60 | Input/Output: [(-68 53 37 -1) -68]
Train Case:  61 | Input/Output: [(-4 98 -9 -52) -52]
Train Case:  62 | Input/Output: [(13 -2 -52 0) -52]
Train Case:  63 | Input/Output: [(72 2 10 -16) -16]
Train Case:  64 | Input/Output: [(-23 -49 -46 35) -49]
Train Case:  65 | Input/Output: [(15 -79 1 5) -79]
Train Case:  66 | Input/Output: [(42 -31 -45 -69) -69]
Train Case:  67 | Input/Output: [(-77 -22 -37 74) -77]
Train Case:  68 | Input/Output: [(70 -82 46 0) -82]
Train Case:  69 | Input/Output: [(27 21 13 -53) -53]
Train Case:  70 | Input/Output: [(-96 87 48 -42) -96]
Train Case:  71 | Input/Output: [(-23 -1 -82 83) -82]
Train Case:  72 | Input/Output: [(-47 59 18 -10) -47]
Train Case:  73 | Input/Output: [(85 -87 45 -98) -98]
Train Case:  74 | Input/Output: [(59 -36 -4 41) -36]
Train Case:  75 | Input/Output: [(-14 96 -44 -5) -44]
Train Case:  76 | Input/Output: [(95 22 84 -59) -59]
Train Case:  77 | Input/Output: [(-46 33 -67 94) -67]
Train Case:  78 | Input/Output: [(-9 100 -15 -88) -88]
Train Case:  79 | Input/Output: [(-90 0 -44 92) -90]
Train Case:  80 | Input/Output: [(-40 3 -25 21) -40]
Train Case:  81 | Input/Output: [(0 -95 17 44) -95]
Train Case:  82 | Input/Output: [(-66 -12 10 -82) -82]
Train Case:  83 | Input/Output: [(-7 11 -52 -67) -67]
Train Case:  84 | Input/Output: [(72 -63 15 -22) -63]
Train Case:  85 | Input/Output: [(-37 -10 12 -49) -49]
Train Case:  86 | Input/Output: [(-81 -99 56 -100) -100]
Train Case:  87 | Input/Output: [(-54 -16 66 62) -54]
Train Case:  88 | Input/Output: [(23 -56 49 -39) -56]
Train Case:  89 | Input/Output: [(15 -43 90 -47) -47]
Train Case:  90 | Input/Output: [(-3 51 -64 20) -64]
Train Case:  91 | Input/Output: [(-97 7 -59 82) -97]
Train Case:  92 | Input/Output: [(-48 -48 92 -99) -99]
Train Case:  93 | Input/Output: [(-74 54 52 7) -74]
Train Case:  94 | Input/Output: [(20 11 -58 -29) -58]
Train Case:  95 | Input/Output: [(-24 -41 -18 -44) -44]
Train Case:  96 | Input/Output: [(-33 83 71 64) -33]
Train Case:  97 | Input/Output: [(-87 44 7 77) -87]
Train Case:  98 | Input/Output: [(-47 -100 -11 67) -100]
Train Case:  99 | Input/Output: [(-72 14 -3 69) -72]
Test Case:   0 | Input/Output: [[26 -60 26 26] -60]
Test Case:   1 | Input/Output: [[40 40 40 -85] -85]
Test Case:   2 | Input/Output: [[22 22 22 -4] -4]
Test Case:   3 | Input/Output: [[56 56 56 96] 56]
Test Case:   4 | Input/Output: [[71 -56 -56 -56] -56]
Test Case:   5 | Input/Output: [[-48 -48 28 -48] -48]
Test Case:   6 | Input/Output: [[42 18 18 18] 18]
Test Case:   7 | Input/Output: [[71 71 93 71] 71]
Test Case:   8 | Input/Output: [[-77 -77 -77 -12] -77]
Test Case:   9 | Input/Output: [[63 63 -30 63] -30]
Test Case:  10 | Input/Output: [[20 20 20 76] 20]
Test Case:  11 | Input/Output: [[-47 -47 -47 21] -47]
Test Case:  12 | Input/Output: [[-27 -27 -27 -17] -27]
Test Case:  13 | Input/Output: [[60 -6 60 60] -6]
Test Case:  14 | Input/Output: [[16 33 16 16] 16]
Test Case:  15 | Input/Output: [[-67 58 58 58] -67]
Test Case:  16 | Input/Output: [[82 82 -40 82] -40]
Test Case:  17 | Input/Output: [[-30 -30 -20 -30] -30]
Test Case:  18 | Input/Output: [[-40 91 -40 -40] -40]
Test Case:  19 | Input/Output: [[-37 -40 -40 -40] -40]
Test Case:  20 | Input/Output: [[7 7 47 7] 7]
Test Case:  21 | Input/Output: [[-55 71 -55 -55] -55]
Test Case:  22 | Input/Output: [[-80 61 61 61] -80]
Test Case:  23 | Input/Output: [[51 60 60 60] 51]
Test Case:  24 | Input/Output: [[56 18 18 18] 18]
Test Case:  25 | Input/Output: [[-86 -6 -86 -86] -86]
Test Case:  26 | Input/Output: [[-4 -4 34 -4] -4]
Test Case:  27 | Input/Output: [[-67 7 -67 -67] -67]
Test Case:  28 | Input/Output: [[-63 81 -63 -63] -63]
Test Case:  29 | Input/Output: [[-40 -40 -40 -80] -80]
Test Case:  30 | Input/Output: [[59 88 59 59] 59]
Test Case:  31 | Input/Output: [[-26 16 -26 -26] -26]
Test Case:  32 | Input/Output: [[-67 -67 -67 49] -67]
Test Case:  33 | Input/Output: [[30 30 -20 30] -20]
Test Case:  34 | Input/Output: [[-24 75 -24 -24] -24]
Test Case:  35 | Input/Output: [[0 0 -82 0] -82]
Test Case:  36 | Input/Output: [[3 -97 -97 -97] -97]
Test Case:  37 | Input/Output: [[59 28 28 28] 28]
Test Case:  38 | Input/Output: [[-16 -16 -16 23] -16]
Test Case:  39 | Input/Output: [[93 93 93 70] 70]
Test Case:  40 | Input/Output: [[61 -7 -7 -7] -7]
Test Case:  41 | Input/Output: [[94 94 11 94] 11]
Test Case:  42 | Input/Output: [[-56 52 52 52] -56]
Test Case:  43 | Input/Output: [[-4 18 18 18] -4]
Test Case:  44 | Input/Output: [[-70 -70 -60 -70] -70]
Test Case:  45 | Input/Output: [[84 84 -61 84] -61]
Test Case:  46 | Input/Output: [[-33 -33 -92 -33] -92]
Test Case:  47 | Input/Output: [[-42 37 -42 -42] -42]
Test Case:  48 | Input/Output: [[65 -45 65 65] -45]
Test Case:  49 | Input/Output: [[89 89 89 71] 71]
Test Case:  50 | Input/Output: [[-9 -9 -9 -79] -79]
Test Case:  51 | Input/Output: [[14 14 14 100] 14]
Test Case:  52 | Input/Output: [[99 99 -57 99] -57]
Test Case:  53 | Input/Output: [[-1 30 30 30] -1]
Test Case:  54 | Input/Output: [[-39 93 -39 -39] -39]
Test Case:  55 | Input/Output: [[-13 -55 -13 -13] -55]
Test Case:  56 | Input/Output: [[36 36 12 36] 12]
Test Case:  57 | Input/Output: [[-55 -55 84 -55] -55]
Test Case:  58 | Input/Output: [[-18 -83 -83 -83] -83]
Test Case:  59 | Input/Output: [[48 42 48 48] 42]
Test Case:  60 | Input/Output: [[-60 -33 -33 -33] -60]
Test Case:  61 | Input/Output: [[60 61 61 61] 60]
Test Case:  62 | Input/Output: [[-68 4 4 4] -68]
Test Case:  63 | Input/Output: [[-76 50 50 50] -76]
Test Case:  64 | Input/Output: [[34 34 36 34] 34]
Test Case:  65 | Input/Output: [[-27 -27 3 -27] -27]
Test Case:  66 | Input/Output: [[-35 84 84 84] -35]
Test Case:  67 | Input/Output: [[-23 0 -23 -23] -23]
Test Case:  68 | Input/Output: [[-77 -33 -77 -77] -77]
Test Case:  69 | Input/Output: [[-73 -73 -73 -73] -73]
Test Case:  70 | Input/Output: [[99 99 99 38] 38]
Test Case:  71 | Input/Output: [[42 42 42 -7] -7]
Test Case:  72 | Input/Output: [[74 74 74 61] 61]
Test Case:  73 | Input/Output: [[74 65 65 65] 65]
Test Case:  74 | Input/Output: [[44 44 44 53] 44]
Test Case:  75 | Input/Output: [[-86 54 54 54] -86]
Test Case:  76 | Input/Output: [[-86 62 -86 -86] -86]
Test Case:  77 | Input/Output: [[-88 -88 -88 -67] -88]
Test Case:  78 | Input/Output: [[58 3 3 3] 3]
Test Case:  79 | Input/Output: [[-86 -84 -86 -86] -86]
Test Case:  80 | Input/Output: [[36 -73 36 36] -73]
Test Case:  81 | Input/Output: [[22 66 22 22] 22]
Test Case:  82 | Input/Output: [[33 -9 33 33] -9]
Test Case:  83 | Input/Output: [[-41 44 44 44] -41]
Test Case:  84 | Input/Output: [[93 93 93 -99] -99]
Test Case:  85 | Input/Output: [[-77 -77 51 -77] -77]
Test Case:  86 | Input/Output: [[-26 -44 -26 -26] -44]
Test Case:  87 | Input/Output: [[92 70 92 92] 70]
Test Case:  88 | Input/Output: [[63 63 -79 63] -79]
Test Case:  89 | Input/Output: [[5 85 85 85] 5]
Test Case:  90 | Input/Output: [[47 47 -13 47] -13]
Test Case:  91 | Input/Output: [[54 54 95 54] 54]
Test Case:  92 | Input/Output: [[-60 -60 -60 49] -60]
Test Case:  93 | Input/Output: [[-35 -4 -4 -4] -35]
Test Case:  94 | Input/Output: [[-29 -59 -29 -29] -59]
Test Case:  95 | Input/Output: [[6 6 6 5] 5]
Test Case:  96 | Input/Output: [[30 30 -99 30] -99]
Test Case:  97 | Input/Output: [[34 34 34 9] 9]
Test Case:  98 | Input/Output: [[47 -17 47 47] -17]
Test Case:  99 | Input/Output: [[-40 -5 -5 -5] -40]
Test Case: 100 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 101 | Input/Output: [(12 12 12 12) 12]
Test Case: 102 | Input/Output: [(0 0 0 0) 0]
Test Case: 103 | Input/Output: [(8 8 8 8) 8]
Test Case: 104 | Input/Output: [(67 67 67 67) 67]
Test Case: 105 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 106 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 107 | Input/Output: [(45 45 45 45) 45]
Test Case: 108 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 109 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 110 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 111 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 112 | Input/Output: [(93 93 93 93) 93]
Test Case: 113 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 114 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 115 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 116 | Input/Output: [(66 66 66 66) 66]
Test Case: 117 | Input/Output: [(79 79 79 79) 79]
Test Case: 118 | Input/Output: [(26 26 26 26) 26]
Test Case: 119 | Input/Output: [(41 41 41 41) 41]
Test Case: 120 | Input/Output: [(11 11 11 11) 11]
Test Case: 121 | Input/Output: [(78 78 78 78) 78]
Test Case: 122 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 123 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 124 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 125 | Input/Output: [(89 89 89 89) 89]
Test Case: 126 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 127 | Input/Output: [(64 64 64 64) 64]
Test Case: 128 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 129 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 130 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 131 | Input/Output: [(8 8 8 8) 8]
Test Case: 132 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 133 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 134 | Input/Output: [(4 4 4 4) 4]
Test Case: 135 | Input/Output: [(81 81 81 81) 81]
Test Case: 136 | Input/Output: [(51 51 51 51) 51]
Test Case: 137 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 138 | Input/Output: [(66 66 66 66) 66]
Test Case: 139 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 140 | Input/Output: [(22 22 22 22) 22]
Test Case: 141 | Input/Output: [(82 82 82 82) 82]
Test Case: 142 | Input/Output: [(89 89 89 89) 89]
Test Case: 143 | Input/Output: [(79 79 79 79) 79]
Test Case: 144 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 145 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 146 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 147 | Input/Output: [(70 70 70 70) 70]
Test Case: 148 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 149 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 150 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 151 | Input/Output: [(54 54 54 54) 54]
Test Case: 152 | Input/Output: [(50 50 50 50) 50]
Test Case: 153 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 154 | Input/Output: [(83 83 83 83) 83]
Test Case: 155 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 156 | Input/Output: [(68 68 68 68) 68]
Test Case: 157 | Input/Output: [(51 51 51 51) 51]
Test Case: 158 | Input/Output: [(87 87 87 87) 87]
Test Case: 159 | Input/Output: [(78 78 78 78) 78]
Test Case: 160 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 161 | Input/Output: [(52 52 52 52) 52]
Test Case: 162 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 163 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 164 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 165 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 166 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 167 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 168 | Input/Output: [(24 24 24 24) 24]
Test Case: 169 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 170 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 171 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 172 | Input/Output: [(72 72 72 72) 72]
Test Case: 173 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 174 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 175 | Input/Output: [(7 7 7 7) 7]
Test Case: 176 | Input/Output: [(70 70 70 70) 70]
Test Case: 177 | Input/Output: [(95 95 95 95) 95]
Test Case: 178 | Input/Output: [(56 56 56 56) 56]
Test Case: 179 | Input/Output: [(32 32 32 32) 32]
Test Case: 180 | Input/Output: [(25 25 25 25) 25]
Test Case: 181 | Input/Output: [(98 98 98 98) 98]
Test Case: 182 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 183 | Input/Output: [(5 5 5 5) 5]
Test Case: 184 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 185 | Input/Output: [(15 15 15 15) 15]
Test Case: 186 | Input/Output: [(26 26 26 26) 26]
Test Case: 187 | Input/Output: [(10 10 10 10) 10]
Test Case: 188 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 189 | Input/Output: [(46 46 46 46) 46]
Test Case: 190 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 191 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 192 | Input/Output: [(77 77 77 77) 77]
Test Case: 193 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 194 | Input/Output: [(31 31 31 31) 31]
Test Case: 195 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 196 | Input/Output: [(46 46 46 46) 46]
Test Case: 197 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 198 | Input/Output: [(56 56 56 56) 56]
Test Case: 199 | Input/Output: [(82 82 82 82) 82]
Test Case: 200 | Input/Output: [(90 1 87 98) 1]
Test Case: 201 | Input/Output: [(63 20 98 100) 20]
Test Case: 202 | Input/Output: [(22 85 81 81) 22]
Test Case: 203 | Input/Output: [(94 78 88 41) 41]
Test Case: 204 | Input/Output: [(30 64 44 81) 30]
Test Case: 205 | Input/Output: [(5 61 16 77) 5]
Test Case: 206 | Input/Output: [(92 67 7 52) 7]
Test Case: 207 | Input/Output: [(100 35 53 9) 9]
Test Case: 208 | Input/Output: [(47 51 80 41) 41]
Test Case: 209 | Input/Output: [(0 9 84 48) 0]
Test Case: 210 | Input/Output: [(58 87 77 63) 58]
Test Case: 211 | Input/Output: [(60 77 1 79) 1]
Test Case: 212 | Input/Output: [(8 100 58 96) 8]
Test Case: 213 | Input/Output: [(45 98 72 98) 45]
Test Case: 214 | Input/Output: [(12 4 91 49) 4]
Test Case: 215 | Input/Output: [(8 17 85 64) 8]
Test Case: 216 | Input/Output: [(6 90 62 0) 0]
Test Case: 217 | Input/Output: [(56 75 17 49) 17]
Test Case: 218 | Input/Output: [(63 28 3 48) 3]
Test Case: 219 | Input/Output: [(5 75 22 46) 5]
Test Case: 220 | Input/Output: [(24 7 89 59) 7]
Test Case: 221 | Input/Output: [(55 65 60 4) 4]
Test Case: 222 | Input/Output: [(61 22 53 56) 22]
Test Case: 223 | Input/Output: [(40 83 51 90) 40]
Test Case: 224 | Input/Output: [(56 62 31 94) 31]
Test Case: 225 | Input/Output: [(27 52 29 81) 27]
Test Case: 226 | Input/Output: [(36 88 60 64) 36]
Test Case: 227 | Input/Output: [(45 79 54 26) 26]
Test Case: 228 | Input/Output: [(1 71 44 9) 1]
Test Case: 229 | Input/Output: [(20 38 23 87) 20]
Test Case: 230 | Input/Output: [(66 71 79 1) 1]
Test Case: 231 | Input/Output: [(28 49 5 85) 5]
Test Case: 232 | Input/Output: [(27 11 78 98) 11]
Test Case: 233 | Input/Output: [(59 61 56 4) 4]
Test Case: 234 | Input/Output: [(6 62 100 72) 6]
Test Case: 235 | Input/Output: [(18 57 87 50) 18]
Test Case: 236 | Input/Output: [(55 76 11 43) 11]
Test Case: 237 | Input/Output: [(18 75 42 15) 15]
Test Case: 238 | Input/Output: [(18 28 15 29) 15]
Test Case: 239 | Input/Output: [(53 11 38 27) 11]
Test Case: 240 | Input/Output: [(100 11 51 25) 11]
Test Case: 241 | Input/Output: [(11 3 58 90) 3]
Test Case: 242 | Input/Output: [(24 74 89 54) 24]
Test Case: 243 | Input/Output: [(47 2 22 70) 2]
Test Case: 244 | Input/Output: [(41 33 28 12) 12]
Test Case: 245 | Input/Output: [(72 59 71 27) 27]
Test Case: 246 | Input/Output: [(77 99 66 60) 60]
Test Case: 247 | Input/Output: [(18 24 71 62) 18]
Test Case: 248 | Input/Output: [(3 66 6 12) 3]
Test Case: 249 | Input/Output: [(89 50 42 12) 12]
Test Case: 250 | Input/Output: [(83 10 41 59) 10]
Test Case: 251 | Input/Output: [(83 73 96 31) 31]
Test Case: 252 | Input/Output: [(46 31 56 36) 31]
Test Case: 253 | Input/Output: [(70 36 78 47) 36]
Test Case: 254 | Input/Output: [(59 68 44 97) 44]
Test Case: 255 | Input/Output: [(39 84 35 60) 35]
Test Case: 256 | Input/Output: [(98 30 38 17) 17]
Test Case: 257 | Input/Output: [(36 56 65 32) 32]
Test Case: 258 | Input/Output: [(8 38 26 61) 8]
Test Case: 259 | Input/Output: [(18 27 59 23) 18]
Test Case: 260 | Input/Output: [(52 10 63 96) 10]
Test Case: 261 | Input/Output: [(20 60 70 80) 20]
Test Case: 262 | Input/Output: [(6 38 73 34) 6]
Test Case: 263 | Input/Output: [(40 75 27 41) 27]
Test Case: 264 | Input/Output: [(32 8 0 46) 0]
Test Case: 265 | Input/Output: [(89 8 5 54) 5]
Test Case: 266 | Input/Output: [(56 89 52 54) 52]
Test Case: 267 | Input/Output: [(79 50 73 24) 24]
Test Case: 268 | Input/Output: [(45 73 16 1) 1]
Test Case: 269 | Input/Output: [(17 56 13 46) 13]
Test Case: 270 | Input/Output: [(62 46 78 46) 46]
Test Case: 271 | Input/Output: [(74 4 67 79) 4]
Test Case: 272 | Input/Output: [(1 16 96 64) 1]
Test Case: 273 | Input/Output: [(60 69 33 16) 16]
Test Case: 274 | Input/Output: [(81 54 8 38) 8]
Test Case: 275 | Input/Output: [(58 79 4 82) 4]
Test Case: 276 | Input/Output: [(65 59 82 93) 59]
Test Case: 277 | Input/Output: [(12 31 28 96) 12]
Test Case: 278 | Input/Output: [(62 0 50 17) 0]
Test Case: 279 | Input/Output: [(90 24 65 70) 24]
Test Case: 280 | Input/Output: [(52 70 58 78) 52]
Test Case: 281 | Input/Output: [(79 26 78 45) 26]
Test Case: 282 | Input/Output: [(82 9 88 58) 9]
Test Case: 283 | Input/Output: [(16 95 87 84) 16]
Test Case: 284 | Input/Output: [(47 19 26 19) 19]
Test Case: 285 | Input/Output: [(2 94 75 84) 2]
Test Case: 286 | Input/Output: [(67 7 99 14) 7]
Test Case: 287 | Input/Output: [(61 76 52 57) 52]
Test Case: 288 | Input/Output: [(54 85 49 58) 49]
Test Case: 289 | Input/Output: [(65 96 24 50) 24]
Test Case: 290 | Input/Output: [(4 5 27 42) 4]
Test Case: 291 | Input/Output: [(19 71 50 25) 19]
Test Case: 292 | Input/Output: [(8 84 61 70) 8]
Test Case: 293 | Input/Output: [(58 22 95 82) 22]
Test Case: 294 | Input/Output: [(58 22 24 94) 22]
Test Case: 295 | Input/Output: [(22 0 28 30) 0]
Test Case: 296 | Input/Output: [(42 56 90 44) 42]
Test Case: 297 | Input/Output: [(94 7 94 26) 7]
Test Case: 298 | Input/Output: [(86 74 32 90) 32]
Test Case: 299 | Input/Output: [(69 0 63 78) 0]
Test Case: 300 | Input/Output: [(69 27 80 99) 27]
Test Case: 301 | Input/Output: [(93 23 86 89) 23]
Test Case: 302 | Input/Output: [(54 0 12 50) 0]
Test Case: 303 | Input/Output: [(21 65 98 79) 21]
Test Case: 304 | Input/Output: [(7 77 67 60) 7]
Test Case: 305 | Input/Output: [(4 2 19 51) 2]
Test Case: 306 | Input/Output: [(30 20 41 29) 20]
Test Case: 307 | Input/Output: [(13 79 46 51) 13]
Test Case: 308 | Input/Output: [(35 33 9 23) 9]
Test Case: 309 | Input/Output: [(79 61 34 25) 25]
Test Case: 310 | Input/Output: [(77 57 55 48) 48]
Test Case: 311 | Input/Output: [(82 5 88 46) 5]
Test Case: 312 | Input/Output: [(4 13 10 62) 4]
Test Case: 313 | Input/Output: [(2 4 45 18) 2]
Test Case: 314 | Input/Output: [(23 98 53 89) 23]
Test Case: 315 | Input/Output: [(77 92 20 35) 20]
Test Case: 316 | Input/Output: [(2 72 17 74) 2]
Test Case: 317 | Input/Output: [(94 50 25 100) 25]
Test Case: 318 | Input/Output: [(97 5 63 44) 5]
Test Case: 319 | Input/Output: [(0 97 40 29) 0]
Test Case: 320 | Input/Output: [(69 96 34 49) 34]
Test Case: 321 | Input/Output: [(91 75 52 23) 23]
Test Case: 322 | Input/Output: [(21 56 11 22) 11]
Test Case: 323 | Input/Output: [(32 3 47 45) 3]
Test Case: 324 | Input/Output: [(50 43 60 14) 14]
Test Case: 325 | Input/Output: [(27 30 31 49) 27]
Test Case: 326 | Input/Output: [(99 6 70 83) 6]
Test Case: 327 | Input/Output: [(100 14 74 15) 14]
Test Case: 328 | Input/Output: [(86 17 16 40) 16]
Test Case: 329 | Input/Output: [(60 24 29 65) 24]
Test Case: 330 | Input/Output: [(69 62 32 81) 32]
Test Case: 331 | Input/Output: [(88 51 92 48) 48]
Test Case: 332 | Input/Output: [(39 0 93 47) 0]
Test Case: 333 | Input/Output: [(0 39 100 56) 0]
Test Case: 334 | Input/Output: [(42 82 55 18) 18]
Test Case: 335 | Input/Output: [(86 49 56 16) 16]
Test Case: 336 | Input/Output: [(71 22 56 2) 2]
Test Case: 337 | Input/Output: [(5 16 33 97) 5]
Test Case: 338 | Input/Output: [(61 9 32 91) 9]
Test Case: 339 | Input/Output: [(24 26 31 31) 24]
Test Case: 340 | Input/Output: [(76 58 86 61) 58]
Test Case: 341 | Input/Output: [(28 95 78 41) 28]
Test Case: 342 | Input/Output: [(37 8 85 97) 8]
Test Case: 343 | Input/Output: [(59 57 46 66) 46]
Test Case: 344 | Input/Output: [(48 60 87 89) 48]
Test Case: 345 | Input/Output: [(61 5 97 35) 5]
Test Case: 346 | Input/Output: [(75 45 49 82) 45]
Test Case: 347 | Input/Output: [(66 59 90 49) 49]
Test Case: 348 | Input/Output: [(90 98 41 75) 41]
Test Case: 349 | Input/Output: [(73 30 78 46) 30]
Test Case: 350 | Input/Output: [(50 19 38 45) 19]
Test Case: 351 | Input/Output: [(86 66 63 64) 63]
Test Case: 352 | Input/Output: [(75 9 55 48) 9]
Test Case: 353 | Input/Output: [(45 23 31 37) 23]
Test Case: 354 | Input/Output: [(15 84 67 66) 15]
Test Case: 355 | Input/Output: [(30 83 69 52) 30]
Test Case: 356 | Input/Output: [(96 23 45 64) 23]
Test Case: 357 | Input/Output: [(62 1 10 17) 1]
Test Case: 358 | Input/Output: [(19 25 32 91) 19]
Test Case: 359 | Input/Output: [(68 23 37 29) 23]
Test Case: 360 | Input/Output: [(16 28 31 78) 16]
Test Case: 361 | Input/Output: [(33 61 6 79) 6]
Test Case: 362 | Input/Output: [(36 83 99 19) 19]
Test Case: 363 | Input/Output: [(32 41 10 85) 10]
Test Case: 364 | Input/Output: [(95 54 50 61) 50]
Test Case: 365 | Input/Output: [(44 1 32 60) 1]
Test Case: 366 | Input/Output: [(79 88 26 87) 26]
Test Case: 367 | Input/Output: [(92 76 87 38) 38]
Test Case: 368 | Input/Output: [(44 53 67 19) 19]
Test Case: 369 | Input/Output: [(92 38 86 83) 38]
Test Case: 370 | Input/Output: [(98 37 3 49) 3]
Test Case: 371 | Input/Output: [(26 3 44 41) 3]
Test Case: 372 | Input/Output: [(49 40 98 93) 40]
Test Case: 373 | Input/Output: [(26 22 76 96) 22]
Test Case: 374 | Input/Output: [(12 70 86 42) 12]
Test Case: 375 | Input/Output: [(17 73 79 42) 17]
Test Case: 376 | Input/Output: [(12 75 5 9) 5]
Test Case: 377 | Input/Output: [(87 44 37 59) 37]
Test Case: 378 | Input/Output: [(80 5 93 8) 5]
Test Case: 379 | Input/Output: [(40 55 55 94) 40]
Test Case: 380 | Input/Output: [(13 88 68 50) 13]
Test Case: 381 | Input/Output: [(68 63 92 27) 27]
Test Case: 382 | Input/Output: [(19 39 27 37) 19]
Test Case: 383 | Input/Output: [(92 35 37 61) 35]
Test Case: 384 | Input/Output: [(93 94 12 62) 12]
Test Case: 385 | Input/Output: [(100 98 25 21) 21]
Test Case: 386 | Input/Output: [(44 70 100 3) 3]
Test Case: 387 | Input/Output: [(40 68 64 89) 40]
Test Case: 388 | Input/Output: [(19 45 3 6) 3]
Test Case: 389 | Input/Output: [(78 63 37 34) 34]
Test Case: 390 | Input/Output: [(98 0 76 25) 0]
Test Case: 391 | Input/Output: [(9 48 70 51) 9]
Test Case: 392 | Input/Output: [(76 49 46 3) 3]
Test Case: 393 | Input/Output: [(100 63 18 6) 6]
Test Case: 394 | Input/Output: [(79 95 49 73) 49]
Test Case: 395 | Input/Output: [(37 65 55 12) 12]
Test Case: 396 | Input/Output: [(98 55 81 54) 54]
Test Case: 397 | Input/Output: [(74 55 48 98) 48]
Test Case: 398 | Input/Output: [(40 52 24 73) 24]
Test Case: 399 | Input/Output: [(41 94 14 66) 14]
Test Case: 400 | Input/Output: [(9 -90 -74 -81) -90]
Test Case: 401 | Input/Output: [(17 -43 72 -99) -99]
Test Case: 402 | Input/Output: [(93 -11 -77 -46) -77]
Test Case: 403 | Input/Output: [(19 9 -84 -38) -84]
Test Case: 404 | Input/Output: [(-27 -7 -94 96) -94]
Test Case: 405 | Input/Output: [(70 -21 33 9) -21]
Test Case: 406 | Input/Output: [(60 18 -40 -95) -95]
Test Case: 407 | Input/Output: [(25 -15 -21 -88) -88]
Test Case: 408 | Input/Output: [(14 48 -92 77) -92]
Test Case: 409 | Input/Output: [(62 66 53 14) 14]
Test Case: 410 | Input/Output: [(19 -43 -35 -58) -58]
Test Case: 411 | Input/Output: [(-90 75 16 94) -90]
Test Case: 412 | Input/Output: [(90 56 78 76) 56]
Test Case: 413 | Input/Output: [(74 100 -36 62) -36]
Test Case: 414 | Input/Output: [(74 51 37 -42) -42]
Test Case: 415 | Input/Output: [(-58 -45 37 22) -58]
Test Case: 416 | Input/Output: [(-35 55 -86 82) -86]
Test Case: 417 | Input/Output: [(-51 -68 26 -30) -68]
Test Case: 418 | Input/Output: [(80 -99 -13 -27) -99]
Test Case: 419 | Input/Output: [(12 -81 93 -95) -95]
Test Case: 420 | Input/Output: [(66 90 27 -11) -11]
Test Case: 421 | Input/Output: [(94 -1 17 68) -1]
Test Case: 422 | Input/Output: [(86 12 95 -36) -36]
Test Case: 423 | Input/Output: [(89 65 -61 72) -61]
Test Case: 424 | Input/Output: [(35 40 -56 2) -56]
Test Case: 425 | Input/Output: [(38 -12 56 -68) -68]
Test Case: 426 | Input/Output: [(-15 10 80 -72) -72]
Test Case: 427 | Input/Output: [(-92 -22 45 10) -92]
Test Case: 428 | Input/Output: [(33 -42 5 -39) -42]
Test Case: 429 | Input/Output: [(62 -36 -45 -50) -50]
Test Case: 430 | Input/Output: [(-18 -76 -6 -24) -76]
Test Case: 431 | Input/Output: [(-95 21 -13 -46) -95]
Test Case: 432 | Input/Output: [(-76 -46 -34 -60) -76]
Test Case: 433 | Input/Output: [(4 -77 -54 88) -77]
Test Case: 434 | Input/Output: [(-34 15 30 -27) -34]
Test Case: 435 | Input/Output: [(50 31 -56 93) -56]
Test Case: 436 | Input/Output: [(65 -79 27 -56) -79]
Test Case: 437 | Input/Output: [(-23 -12 6 31) -23]
Test Case: 438 | Input/Output: [(-20 -9 85 -2) -20]
Test Case: 439 | Input/Output: [(-84 34 11 -68) -84]
Test Case: 440 | Input/Output: [(71 93 82 -48) -48]
Test Case: 441 | Input/Output: [(51 47 32 -93) -93]
Test Case: 442 | Input/Output: [(36 -1 -69 23) -69]
Test Case: 443 | Input/Output: [(62 -78 84 50) -78]
Test Case: 444 | Input/Output: [(68 -56 54 34) -56]
Test Case: 445 | Input/Output: [(68 23 -70 -26) -70]
Test Case: 446 | Input/Output: [(-34 -3 34 35) -34]
Test Case: 447 | Input/Output: [(26 -94 -38 52) -94]
Test Case: 448 | Input/Output: [(23 -69 94 -2) -69]
Test Case: 449 | Input/Output: [(-14 -69 55 -55) -69]
Test Case: 450 | Input/Output: [(-45 -73 80 -14) -73]
Test Case: 451 | Input/Output: [(-44 28 -85 79) -85]
Test Case: 452 | Input/Output: [(96 23 -40 -87) -87]
Test Case: 453 | Input/Output: [(1 39 30 2) 1]
Test Case: 454 | Input/Output: [(9 -35 37 -44) -44]
Test Case: 455 | Input/Output: [(-70 15 97 16) -70]
Test Case: 456 | Input/Output: [(-3 5 35 -39) -39]
Test Case: 457 | Input/Output: [(-48 44 4 26) -48]
Test Case: 458 | Input/Output: [(17 -66 -25 91) -66]
Test Case: 459 | Input/Output: [(-11 -52 -77 -71) -77]
Test Case: 460 | Input/Output: [(80 -17 18 51) -17]
Test Case: 461 | Input/Output: [(21 -39 63 -79) -79]
Test Case: 462 | Input/Output: [(18 69 46 -70) -70]
Test Case: 463 | Input/Output: [(-65 -2 -77 34) -77]
Test Case: 464 | Input/Output: [(8 -51 71 -7) -51]
Test Case: 465 | Input/Output: [(49 100 -47 -54) -54]
Test Case: 466 | Input/Output: [(-21 -11 31 38) -21]
Test Case: 467 | Input/Output: [(55 17 86 68) 17]
Test Case: 468 | Input/Output: [(92 -58 -1 42) -58]
Test Case: 469 | Input/Output: [(26 64 -7 72) -7]
Test Case: 470 | Input/Output: [(-79 80 34 -86) -86]
Test Case: 471 | Input/Output: [(-44 18 93 -51) -51]
Test Case: 472 | Input/Output: [(0 -24 40 -60) -60]
Test Case: 473 | Input/Output: [(17 84 15 97) 15]
Test Case: 474 | Input/Output: [(21 91 -36 -53) -53]
Test Case: 475 | Input/Output: [(-87 5 100 -13) -87]
Test Case: 476 | Input/Output: [(-92 -41 76 -18) -92]
Test Case: 477 | Input/Output: [(95 99 -20 38) -20]
Test Case: 478 | Input/Output: [(94 -42 5 43) -42]
Test Case: 479 | Input/Output: [(-36 -6 -14 51) -36]
Test Case: 480 | Input/Output: [(87 -99 -91 -6) -99]
Test Case: 481 | Input/Output: [(-29 34 -37 40) -37]
Test Case: 482 | Input/Output: [(24 84 2 -94) -94]
Test Case: 483 | Input/Output: [(91 -98 56 55) -98]
Test Case: 484 | Input/Output: [(86 32 -19 -46) -46]
Test Case: 485 | Input/Output: [(-47 75 6 100) -47]
Test Case: 486 | Input/Output: [(22 32 46 -8) -8]
Test Case: 487 | Input/Output: [(-26 -31 85 -31) -31]
Test Case: 488 | Input/Output: [(-65 -62 -14 -38) -65]
Test Case: 489 | Input/Output: [(65 -61 -62 52) -62]
Test Case: 490 | Input/Output: [(18 -54 -37 2) -54]
Test Case: 491 | Input/Output: [(-6 -61 -96 0) -96]
Test Case: 492 | Input/Output: [(23 42 52 -34) -34]
Test Case: 493 | Input/Output: [(96 -15 -60 3) -60]
Test Case: 494 | Input/Output: [(52 -9 37 -54) -54]
Test Case: 495 | Input/Output: [(-100 77 -11 -99) -100]
Test Case: 496 | Input/Output: [(59 -43 25 57) -43]
Test Case: 497 | Input/Output: [(-43 83 57 78) -43]
Test Case: 498 | Input/Output: [(38 67 -8 13) -8]
Test Case: 499 | Input/Output: [(-9 33 7 -61) -61]
Test Case: 500 | Input/Output: [(-44 -51 -27 -37) -51]
Test Case: 501 | Input/Output: [(-60 -64 -54 3) -64]
Test Case: 502 | Input/Output: [(4 -50 26 -54) -54]
Test Case: 503 | Input/Output: [(-12 74 -22 55) -22]
Test Case: 504 | Input/Output: [(25 87 59 -11) -11]
Test Case: 505 | Input/Output: [(36 46 -53 -74) -74]
Test Case: 506 | Input/Output: [(-55 -83 -36 -42) -83]
Test Case: 507 | Input/Output: [(32 -2 32 75) -2]
Test Case: 508 | Input/Output: [(43 45 -64 47) -64]
Test Case: 509 | Input/Output: [(93 8 -88 29) -88]
Test Case: 510 | Input/Output: [(19 18 -77 -18) -77]
Test Case: 511 | Input/Output: [(63 -54 21 64) -54]
Test Case: 512 | Input/Output: [(-88 -1 2 -33) -88]
Test Case: 513 | Input/Output: [(-33 -95 68 100) -95]
Test Case: 514 | Input/Output: [(-30 24 -99 92) -99]
Test Case: 515 | Input/Output: [(32 0 -96 -17) -96]
Test Case: 516 | Input/Output: [(12 37 56 -45) -45]
Test Case: 517 | Input/Output: [(-44 -88 -14 95) -88]
Test Case: 518 | Input/Output: [(-94 7 47 37) -94]
Test Case: 519 | Input/Output: [(28 74 -38 -29) -38]
Test Case: 520 | Input/Output: [(-48 -51 -57 47) -57]
Test Case: 521 | Input/Output: [(51 27 63 31) 27]
Test Case: 522 | Input/Output: [(-29 10 -98 63) -98]
Test Case: 523 | Input/Output: [(-23 73 13 15) -23]
Test Case: 524 | Input/Output: [(93 66 -85 -57) -85]
Test Case: 525 | Input/Output: [(30 -76 -53 -92) -92]
Test Case: 526 | Input/Output: [(-35 -53 50 68) -53]
Test Case: 527 | Input/Output: [(2 14 10 -87) -87]
Test Case: 528 | Input/Output: [(-49 16 84 3) -49]
Test Case: 529 | Input/Output: [(46 -54 20 7) -54]
Test Case: 530 | Input/Output: [(-6 73 87 69) -6]
Test Case: 531 | Input/Output: [(-92 -1 -72 -38) -92]
Test Case: 532 | Input/Output: [(-57 -64 38 34) -64]
Test Case: 533 | Input/Output: [(47 -5 53 39) -5]
Test Case: 534 | Input/Output: [(-1 -13 74 79) -13]
Test Case: 535 | Input/Output: [(81 -82 93 -73) -82]
Test Case: 536 | Input/Output: [(30 54 -55 53) -55]
Test Case: 537 | Input/Output: [(-39 7 -26 64) -39]
Test Case: 538 | Input/Output: [(-9 24 -59 87) -59]
Test Case: 539 | Input/Output: [(-89 -69 11 56) -89]
Test Case: 540 | Input/Output: [(-69 -56 -57 -16) -69]
Test Case: 541 | Input/Output: [(38 -6 51 6) -6]
Test Case: 542 | Input/Output: [(64 41 -88 -41) -88]
Test Case: 543 | Input/Output: [(79 22 -1 3) -1]
Test Case: 544 | Input/Output: [(-23 -19 -10 66) -23]
Test Case: 545 | Input/Output: [(-78 20 -68 -12) -78]
Test Case: 546 | Input/Output: [(-50 24 37 92) -50]
Test Case: 547 | Input/Output: [(-62 -34 -56 88) -62]
Test Case: 548 | Input/Output: [(-64 -10 3 10) -64]
Test Case: 549 | Input/Output: [(40 79 -44 2) -44]
Test Case: 550 | Input/Output: [(73 98 32 17) 17]
Test Case: 551 | Input/Output: [(60 -18 86 -22) -22]
Test Case: 552 | Input/Output: [(6 81 85 -73) -73]
Test Case: 553 | Input/Output: [(-37 1 -46 -78) -78]
Test Case: 554 | Input/Output: [(-77 67 -42 82) -77]
Test Case: 555 | Input/Output: [(56 -95 91 -95) -95]
Test Case: 556 | Input/Output: [(78 -45 -13 59) -45]
Test Case: 557 | Input/Output: [(37 14 -13 -7) -13]
Test Case: 558 | Input/Output: [(-13 -12 42 64) -13]
Test Case: 559 | Input/Output: [(88 -53 -23 -35) -53]
Test Case: 560 | Input/Output: [(-73 6 -4 -5) -73]
Test Case: 561 | Input/Output: [(40 -41 38 15) -41]
Test Case: 562 | Input/Output: [(-69 19 57 7) -69]
Test Case: 563 | Input/Output: [(17 53 -82 43) -82]
Test Case: 564 | Input/Output: [(-23 54 82 27) -23]
Test Case: 565 | Input/Output: [(78 -43 -99 35) -99]
Test Case: 566 | Input/Output: [(-93 75 21 -41) -93]
Test Case: 567 | Input/Output: [(-67 -52 -38 -44) -67]
Test Case: 568 | Input/Output: [(36 98 -62 -30) -62]
Test Case: 569 | Input/Output: [(9 72 25 42) 9]
Test Case: 570 | Input/Output: [(-88 -38 33 -81) -88]
Test Case: 571 | Input/Output: [(16 4 -44 58) -44]
Test Case: 572 | Input/Output: [(-55 15 11 -59) -59]
Test Case: 573 | Input/Output: [(93 -99 -71 -44) -99]
Test Case: 574 | Input/Output: [(93 41 -66 52) -66]
Test Case: 575 | Input/Output: [(-97 -81 -45 30) -97]
Test Case: 576 | Input/Output: [(-74 26 -25 -92) -92]
Test Case: 577 | Input/Output: [(15 -13 48 61) -13]
Test Case: 578 | Input/Output: [(-9 -22 -67 82) -67]
Test Case: 579 | Input/Output: [(24 76 -97 23) -97]
Test Case: 580 | Input/Output: [(-55 14 46 -31) -55]
Test Case: 581 | Input/Output: [(97 -46 71 -60) -60]
Test Case: 582 | Input/Output: [(41 86 39 96) 39]
Test Case: 583 | Input/Output: [(-32 84 4 -23) -32]
Test Case: 584 | Input/Output: [(-38 -73 -39 5) -73]
Test Case: 585 | Input/Output: [(23 84 -57 38) -57]
Test Case: 586 | Input/Output: [(19 -45 -5 -67) -67]
Test Case: 587 | Input/Output: [(49 -6 -12 4) -12]
Test Case: 588 | Input/Output: [(97 -61 -14 -65) -65]
Test Case: 589 | Input/Output: [(-19 99 -15 48) -19]
Test Case: 590 | Input/Output: [(-75 74 85 -4) -75]
Test Case: 591 | Input/Output: [(27 -54 58 -67) -67]
Test Case: 592 | Input/Output: [(-18 29 -66 -75) -75]
Test Case: 593 | Input/Output: [(4 39 -50 -14) -50]
Test Case: 594 | Input/Output: [(-62 -15 -96 -64) -96]
Test Case: 595 | Input/Output: [(17 -61 -16 -91) -91]
Test Case: 596 | Input/Output: [(-1 -70 46 -25) -70]
Test Case: 597 | Input/Output: [(-9 67 11 -42) -42]
Test Case: 598 | Input/Output: [(75 -16 17 -53) -53]
Test Case: 599 | Input/Output: [(27 -42 -100 -49) -100]
Test Case: 600 | Input/Output: [(-32 17 -52 -69) -69]
Test Case: 601 | Input/Output: [(-71 33 71 20) -71]
Test Case: 602 | Input/Output: [(-2 94 2 -63) -63]
Test Case: 603 | Input/Output: [(-21 37 38 -63) -63]
Test Case: 604 | Input/Output: [(-4 -11 -27 -80) -80]
Test Case: 605 | Input/Output: [(-6 28 64 -13) -13]
Test Case: 606 | Input/Output: [(28 -74 -35 55) -74]
Test Case: 607 | Input/Output: [(61 -37 -94 -67) -94]
Test Case: 608 | Input/Output: [(-20 90 -16 94) -20]
Test Case: 609 | Input/Output: [(64 -51 3 90) -51]
Test Case: 610 | Input/Output: [(-61 78 35 -75) -75]
Test Case: 611 | Input/Output: [(-25 63 -37 -28) -37]
Test Case: 612 | Input/Output: [(39 52 -81 47) -81]
Test Case: 613 | Input/Output: [(-34 -76 -75 71) -76]
Test Case: 614 | Input/Output: [(40 8 37 65) 8]
Test Case: 615 | Input/Output: [(-63 -33 7 -41) -63]
Test Case: 616 | Input/Output: [(38 34 -90 -90) -90]
Test Case: 617 | Input/Output: [(-51 99 -14 59) -51]
Test Case: 618 | Input/Output: [(-45 -91 -92 17) -92]
Test Case: 619 | Input/Output: [(-7 -57 84 16) -57]
Test Case: 620 | Input/Output: [(15 -65 24 97) -65]
Test Case: 621 | Input/Output: [(-92 -14 31 -83) -92]
Test Case: 622 | Input/Output: [(56 -40 -43 83) -43]
Test Case: 623 | Input/Output: [(21 26 -51 -1) -51]
Test Case: 624 | Input/Output: [(2 -32 -96 -63) -96]
Test Case: 625 | Input/Output: [(-65 43 -3 49) -65]
Test Case: 626 | Input/Output: [(-1 -52 -12 70) -52]
Test Case: 627 | Input/Output: [(81 -20 11 8) -20]
Test Case: 628 | Input/Output: [(-4 3 60 15) -4]
Test Case: 629 | Input/Output: [(-64 100 -23 85) -64]
Test Case: 630 | Input/Output: [(-6 -66 -50 -62) -66]
Test Case: 631 | Input/Output: [(-46 92 -86 5) -86]
Test Case: 632 | Input/Output: [(-37 -40 77 -45) -45]
Test Case: 633 | Input/Output: [(-98 74 -3 -1) -98]
Test Case: 634 | Input/Output: [(-50 -66 -99 -87) -99]
Test Case: 635 | Input/Output: [(-35 63 -4 71) -35]
Test Case: 636 | Input/Output: [(71 -76 5 3) -76]
Test Case: 637 | Input/Output: [(69 88 -50 -12) -50]
Test Case: 638 | Input/Output: [(76 42 31 -45) -45]
Test Case: 639 | Input/Output: [(-99 -51 -72 10) -99]
Test Case: 640 | Input/Output: [(67 55 -59 -57) -59]
Test Case: 641 | Input/Output: [(-42 25 -69 40) -69]
Test Case: 642 | Input/Output: [(-59 54 -20 80) -59]
Test Case: 643 | Input/Output: [(-80 -33 43 -69) -80]
Test Case: 644 | Input/Output: [(-3 -99 -81 18) -99]
Test Case: 645 | Input/Output: [(-25 3 51 -53) -53]
Test Case: 646 | Input/Output: [(70 -27 -68 2) -68]
Test Case: 647 | Input/Output: [(-76 -50 -8 77) -76]
Test Case: 648 | Input/Output: [(19 58 45 81) 19]
Test Case: 649 | Input/Output: [(52 76 -8 -10) -10]
Test Case: 650 | Input/Output: [(94 -58 -78 -93) -93]
Test Case: 651 | Input/Output: [(37 -99 24 97) -99]
Test Case: 652 | Input/Output: [(10 -5 -75 39) -75]
Test Case: 653 | Input/Output: [(-49 92 -86 -28) -86]
Test Case: 654 | Input/Output: [(-28 -7 -42 -3) -42]
Test Case: 655 | Input/Output: [(-10 24 -94 -98) -98]
Test Case: 656 | Input/Output: [(86 95 17 -8) -8]
Test Case: 657 | Input/Output: [(16 -68 -28 -38) -68]
Test Case: 658 | Input/Output: [(50 100 -16 -94) -94]
Test Case: 659 | Input/Output: [(-26 -16 84 5) -26]
Test Case: 660 | Input/Output: [(41 92 -43 -38) -43]
Test Case: 661 | Input/Output: [(4 -75 -18 -80) -80]
Test Case: 662 | Input/Output: [(-13 82 -97 -28) -97]
Test Case: 663 | Input/Output: [(-17 -100 9 -69) -100]
Test Case: 664 | Input/Output: [(-48 -1 -80 50) -80]
Test Case: 665 | Input/Output: [(16 85 43 -89) -89]
Test Case: 666 | Input/Output: [(-73 26 23 -88) -88]
Test Case: 667 | Input/Output: [(-9 -22 64 -65) -65]
Test Case: 668 | Input/Output: [(-74 -77 -95 -35) -95]
Test Case: 669 | Input/Output: [(-16 29 -39 68) -39]
Test Case: 670 | Input/Output: [(88 -22 -83 -53) -83]
Test Case: 671 | Input/Output: [(43 -96 12 98) -96]
Test Case: 672 | Input/Output: [(17 -65 30 -54) -65]
Test Case: 673 | Input/Output: [(-13 12 95 -80) -80]
Test Case: 674 | Input/Output: [(-32 -97 -9 -57) -97]
Test Case: 675 | Input/Output: [(50 -66 46 -19) -66]
Test Case: 676 | Input/Output: [(-47 30 44 -54) -54]
Test Case: 677 | Input/Output: [(-59 62 -37 -10) -59]
Test Case: 678 | Input/Output: [(-76 -34 39 -41) -76]
Test Case: 679 | Input/Output: [(-47 52 -9 -38) -47]
Test Case: 680 | Input/Output: [(39 84 -25 -55) -55]
Test Case: 681 | Input/Output: [(-68 -24 86 83) -68]
Test Case: 682 | Input/Output: [(-33 -26 4 58) -33]
Test Case: 683 | Input/Output: [(82 19 22 6) 6]
Test Case: 684 | Input/Output: [(1 88 84 -62) -62]
Test Case: 685 | Input/Output: [(49 14 54 98) 14]
Test Case: 686 | Input/Output: [(96 -43 -45 -85) -85]
Test Case: 687 | Input/Output: [(-67 82 -45 -69) -69]
Test Case: 688 | Input/Output: [(3 -63 -94 -95) -95]
Test Case: 689 | Input/Output: [(92 88 -34 28) -34]
Test Case: 690 | Input/Output: [(25 29 14 70) 14]
Test Case: 691 | Input/Output: [(99 -92 -94 39) -94]
Test Case: 692 | Input/Output: [(72 -90 10 -65) -90]
Test Case: 693 | Input/Output: [(83 -31 -3 52) -31]
Test Case: 694 | Input/Output: [(3 -60 2 -64) -64]
Test Case: 695 | Input/Output: [(-2 -33 13 16) -33]
Test Case: 696 | Input/Output: [(-11 -7 46 -65) -65]
Test Case: 697 | Input/Output: [(-41 71 11 -16) -41]
Test Case: 698 | Input/Output: [(97 -42 13 9) -42]
Test Case: 699 | Input/Output: [(38 -89 -79 94) -89]
Test Case: 700 | Input/Output: [(85 89 85 -53) -53]
Test Case: 701 | Input/Output: [(88 -76 -59 -2) -76]
Test Case: 702 | Input/Output: [(93 -51 -22 14) -51]
Test Case: 703 | Input/Output: [(-88 12 21 69) -88]
Test Case: 704 | Input/Output: [(37 -36 53 -16) -36]
Test Case: 705 | Input/Output: [(96 78 -58 -18) -58]
Test Case: 706 | Input/Output: [(53 32 -62 24) -62]
Test Case: 707 | Input/Output: [(-49 97 -55 29) -55]
Test Case: 708 | Input/Output: [(23 -25 -67 11) -67]
Test Case: 709 | Input/Output: [(63 13 -70 -40) -70]
Test Case: 710 | Input/Output: [(33 33 -6 90) -6]
Test Case: 711 | Input/Output: [(74 -49 -20 94) -49]
Test Case: 712 | Input/Output: [(-24 -57 -58 -45) -58]
Test Case: 713 | Input/Output: [(88 93 -91 56) -91]
Test Case: 714 | Input/Output: [(14 -71 44 22) -71]
Test Case: 715 | Input/Output: [(42 -99 14 100) -99]
Test Case: 716 | Input/Output: [(-49 36 -38 -92) -92]
Test Case: 717 | Input/Output: [(4 92 81 66) 4]
Test Case: 718 | Input/Output: [(96 -60 15 -36) -60]
Test Case: 719 | Input/Output: [(49 -90 1 -67) -90]
Test Case: 720 | Input/Output: [(41 41 7 -44) -44]
Test Case: 721 | Input/Output: [(92 14 1 -64) -64]
Test Case: 722 | Input/Output: [(59 -88 -32 -96) -96]
Test Case: 723 | Input/Output: [(59 77 41 -90) -90]
Test Case: 724 | Input/Output: [(85 -28 10 84) -28]
Test Case: 725 | Input/Output: [(23 3 83 32) 3]
Test Case: 726 | Input/Output: [(-6 90 -52 -89) -89]
Test Case: 727 | Input/Output: [(-29 -41 10 -11) -41]
Test Case: 728 | Input/Output: [(0 75 -84 -20) -84]
Test Case: 729 | Input/Output: [(-9 -79 -29 -78) -79]
Test Case: 730 | Input/Output: [(-72 64 -96 38) -96]
Test Case: 731 | Input/Output: [(59 42 21 -91) -91]
Test Case: 732 | Input/Output: [(-34 -96 -88 -79) -96]
Test Case: 733 | Input/Output: [(-31 -71 81 36) -71]
Test Case: 734 | Input/Output: [(-74 -9 52 -3) -74]
Test Case: 735 | Input/Output: [(-84 71 -53 -54) -84]
Test Case: 736 | Input/Output: [(74 -11 -9 48) -11]
Test Case: 737 | Input/Output: [(-47 87 6 -28) -47]
Test Case: 738 | Input/Output: [(78 66 -15 8) -15]
Test Case: 739 | Input/Output: [(-25 32 -11 -85) -85]
Test Case: 740 | Input/Output: [(76 -7 -95 83) -95]
Test Case: 741 | Input/Output: [(56 19 22 98) 19]
Test Case: 742 | Input/Output: [(51 19 47 47) 19]
Test Case: 743 | Input/Output: [(73 -32 26 -4) -32]
Test Case: 744 | Input/Output: [(57 36 66 64) 36]
Test Case: 745 | Input/Output: [(-43 1 -7 60) -43]
Test Case: 746 | Input/Output: [(61 26 90 -97) -97]
Test Case: 747 | Input/Output: [(-54 -74 24 -99) -99]
Test Case: 748 | Input/Output: [(-64 16 74 -41) -64]
Test Case: 749 | Input/Output: [(99 57 -27 -91) -91]
Test Case: 750 | Input/Output: [(-24 -100 -37 -54) -100]
Test Case: 751 | Input/Output: [(-9 58 9 81) -9]
Test Case: 752 | Input/Output: [(-90 -16 -74 46) -90]
Test Case: 753 | Input/Output: [(-44 -76 93 -77) -77]
Test Case: 754 | Input/Output: [(33 52 79 44) 33]
Test Case: 755 | Input/Output: [(78 -32 -98 -85) -98]
Test Case: 756 | Input/Output: [(-38 31 50 70) -38]
Test Case: 757 | Input/Output: [(-90 31 -42 97) -90]
Test Case: 758 | Input/Output: [(30 10 -74 -5) -74]
Test Case: 759 | Input/Output: [(84 -67 81 77) -67]
Test Case: 760 | Input/Output: [(21 86 -92 -72) -92]
Test Case: 761 | Input/Output: [(-86 47 84 5) -86]
Test Case: 762 | Input/Output: [(87 31 79 82) 31]
Test Case: 763 | Input/Output: [(56 -30 -8 -51) -51]
Test Case: 764 | Input/Output: [(-84 -63 -64 -65) -84]
Test Case: 765 | Input/Output: [(-44 13 -48 14) -48]
Test Case: 766 | Input/Output: [(-36 -18 -60 70) -60]
Test Case: 767 | Input/Output: [(88 -39 -38 -41) -41]
Test Case: 768 | Input/Output: [(94 -89 77 -91) -91]
Test Case: 769 | Input/Output: [(-19 -25 -59 -87) -87]
Test Case: 770 | Input/Output: [(31 30 51 -42) -42]
Test Case: 771 | Input/Output: [(-11 -79 -18 -48) -79]
Test Case: 772 | Input/Output: [(67 -100 -8 58) -100]
Test Case: 773 | Input/Output: [(58 24 10 10) 10]
Test Case: 774 | Input/Output: [(92 -39 -47 -25) -47]
Test Case: 775 | Input/Output: [(-37 -73 -40 -3) -73]
Test Case: 776 | Input/Output: [(-65 11 46 -78) -78]
Test Case: 777 | Input/Output: [(12 3 7 29) 3]
Test Case: 778 | Input/Output: [(-1 70 -17 70) -17]
Test Case: 779 | Input/Output: [(57 -56 -19 90) -56]
Test Case: 780 | Input/Output: [(-39 -90 30 54) -90]
Test Case: 781 | Input/Output: [(18 80 -72 11) -72]
Test Case: 782 | Input/Output: [(10 -57 -30 -59) -59]
Test Case: 783 | Input/Output: [(-49 95 12 7) -49]
Test Case: 784 | Input/Output: [(33 -22 83 -100) -100]
Test Case: 785 | Input/Output: [(-25 86 36 50) -25]
Test Case: 786 | Input/Output: [(19 35 -37 -43) -43]
Test Case: 787 | Input/Output: [(25 25 97 -50) -50]
Test Case: 788 | Input/Output: [(89 -26 12 -12) -26]
Test Case: 789 | Input/Output: [(38 78 55 99) 38]
Test Case: 790 | Input/Output: [(86 -90 68 3) -90]
Test Case: 791 | Input/Output: [(13 25 66 80) 13]
Test Case: 792 | Input/Output: [(40 -41 -92 92) -92]
Test Case: 793 | Input/Output: [(92 -57 -92 -81) -92]
Test Case: 794 | Input/Output: [(-53 6 77 43) -53]
Test Case: 795 | Input/Output: [(18 -71 -51 -74) -74]
Test Case: 796 | Input/Output: [(20 -92 -67 2) -92]
Test Case: 797 | Input/Output: [(-34 36 -33 -21) -34]
Test Case: 798 | Input/Output: [(26 48 -81 58) -81]
Test Case: 799 | Input/Output: [(-14 88 77 78) -14]
Test Case: 800 | Input/Output: [(-27 13 54 14) -27]
Test Case: 801 | Input/Output: [(94 -47 -55 95) -55]
Test Case: 802 | Input/Output: [(-18 20 -79 -80) -80]
Test Case: 803 | Input/Output: [(29 -64 66 3) -64]
Test Case: 804 | Input/Output: [(71 -35 -7 -36) -36]
Test Case: 805 | Input/Output: [(-24 4 -84 -70) -84]
Test Case: 806 | Input/Output: [(25 -45 -29 96) -45]
Test Case: 807 | Input/Output: [(-24 -17 -56 92) -56]
Test Case: 808 | Input/Output: [(27 23 31 75) 23]
Test Case: 809 | Input/Output: [(-22 97 3 -19) -22]
Test Case: 810 | Input/Output: [(67 64 3 38) 3]
Test Case: 811 | Input/Output: [(25 -97 12 -30) -97]
Test Case: 812 | Input/Output: [(-75 93 -70 78) -75]
Test Case: 813 | Input/Output: [(71 -51 9 58) -51]
Test Case: 814 | Input/Output: [(58 86 -61 7) -61]
Test Case: 815 | Input/Output: [(88 3 -13 19) -13]
Test Case: 816 | Input/Output: [(-11 78 -4 55) -11]
Test Case: 817 | Input/Output: [(-32 -13 38 69) -32]
Test Case: 818 | Input/Output: [(-85 -78 47 -66) -85]
Test Case: 819 | Input/Output: [(36 80 -73 -11) -73]
Test Case: 820 | Input/Output: [(-43 -96 -16 45) -96]
Test Case: 821 | Input/Output: [(76 -79 -76 87) -79]
Test Case: 822 | Input/Output: [(-48 38 76 93) -48]
Test Case: 823 | Input/Output: [(44 96 70 45) 44]
Test Case: 824 | Input/Output: [(72 97 -72 16) -72]
Test Case: 825 | Input/Output: [(56 48 -21 94) -21]
Test Case: 826 | Input/Output: [(-71 87 -62 15) -71]
Test Case: 827 | Input/Output: [(10 50 -41 88) -41]
Test Case: 828 | Input/Output: [(63 33 -44 -31) -44]
Test Case: 829 | Input/Output: [(66 10 12 46) 10]
Test Case: 830 | Input/Output: [(-70 50 54 -48) -70]
Test Case: 831 | Input/Output: [(-3 -92 9 -7) -92]
Test Case: 832 | Input/Output: [(-76 77 100 -97) -97]
Test Case: 833 | Input/Output: [(15 24 -25 -7) -25]
Test Case: 834 | Input/Output: [(8 -92 -22 -73) -92]
Test Case: 835 | Input/Output: [(-59 20 23 86) -59]
Test Case: 836 | Input/Output: [(-31 16 20 -77) -77]
Test Case: 837 | Input/Output: [(88 64 51 -56) -56]
Test Case: 838 | Input/Output: [(21 64 -11 50) -11]
Test Case: 839 | Input/Output: [(-11 -34 25 -1) -34]
Test Case: 840 | Input/Output: [(-40 -21 5 -42) -42]
Test Case: 841 | Input/Output: [(-5 74 -74 19) -74]
Test Case: 842 | Input/Output: [(25 -94 70 13) -94]
Test Case: 843 | Input/Output: [(-25 54 -36 -86) -86]
Test Case: 844 | Input/Output: [(-58 -25 -76 -60) -76]
Test Case: 845 | Input/Output: [(-97 -50 6 84) -97]
Test Case: 846 | Input/Output: [(-18 -87 -92 -63) -92]
Test Case: 847 | Input/Output: [(-97 -38 1 -72) -97]
Test Case: 848 | Input/Output: [(77 58 -14 73) -14]
Test Case: 849 | Input/Output: [(12 30 -78 -86) -86]
Test Case: 850 | Input/Output: [(-3 -62 26 79) -62]
Test Case: 851 | Input/Output: [(8 -93 -21 55) -93]
Test Case: 852 | Input/Output: [(76 42 26 -63) -63]
Test Case: 853 | Input/Output: [(-25 -95 -23 -39) -95]
Test Case: 854 | Input/Output: [(37 -35 -33 -8) -35]
Test Case: 855 | Input/Output: [(75 57 68 10) 10]
Test Case: 856 | Input/Output: [(42 -43 -20 -60) -60]
Test Case: 857 | Input/Output: [(-46 -2 93 9) -46]
Test Case: 858 | Input/Output: [(-71 87 -89 23) -89]
Test Case: 859 | Input/Output: [(74 -31 37 97) -31]
Test Case: 860 | Input/Output: [(-53 -88 3 -31) -88]
Test Case: 861 | Input/Output: [(-40 -19 98 58) -40]
Test Case: 862 | Input/Output: [(-41 -51 -32 -21) -51]
Test Case: 863 | Input/Output: [(-7 60 94 75) -7]
Test Case: 864 | Input/Output: [(62 27 43 87) 27]
Test Case: 865 | Input/Output: [(-17 -32 -31 34) -32]
Test Case: 866 | Input/Output: [(47 -63 -61 2) -63]
Test Case: 867 | Input/Output: [(-65 -85 -52 15) -85]
Test Case: 868 | Input/Output: [(14 31 -77 -74) -77]
Test Case: 869 | Input/Output: [(27 -72 54 46) -72]
Test Case: 870 | Input/Output: [(93 7 -28 70) -28]
Test Case: 871 | Input/Output: [(0 72 34 -31) -31]
Test Case: 872 | Input/Output: [(82 91 16 30) 16]
Test Case: 873 | Input/Output: [(-37 28 -57 -55) -57]
Test Case: 874 | Input/Output: [(-67 -29 70 -24) -67]
Test Case: 875 | Input/Output: [(-73 -71 -83 32) -83]
Test Case: 876 | Input/Output: [(-94 -22 1 68) -94]
Test Case: 877 | Input/Output: [(37 3 -7 -44) -44]
Test Case: 878 | Input/Output: [(-95 78 -62 -12) -95]
Test Case: 879 | Input/Output: [(14 60 69 19) 14]
Test Case: 880 | Input/Output: [(-95 3 -29 -72) -95]
Test Case: 881 | Input/Output: [(-17 -42 77 93) -42]
Test Case: 882 | Input/Output: [(0 50 -91 -98) -98]
Test Case: 883 | Input/Output: [(7 60 10 -64) -64]
Test Case: 884 | Input/Output: [(98 -10 -65 -14) -65]
Test Case: 885 | Input/Output: [(55 -21 -35 45) -35]
Test Case: 886 | Input/Output: [(-1 -79 23 -30) -79]
Test Case: 887 | Input/Output: [(28 38 -6 -86) -86]
Test Case: 888 | Input/Output: [(45 82 -99 84) -99]
Test Case: 889 | Input/Output: [(-100 -100 16 50) -100]
Test Case: 890 | Input/Output: [(86 -94 -54 37) -94]
Test Case: 891 | Input/Output: [(-87 27 -81 0) -87]
Test Case: 892 | Input/Output: [(97 75 -40 -13) -40]
Test Case: 893 | Input/Output: [(63 10 -5 93) -5]
Test Case: 894 | Input/Output: [(-7 54 -49 -62) -62]
Test Case: 895 | Input/Output: [(89 -41 -84 -20) -84]
Test Case: 896 | Input/Output: [(-33 -65 55 24) -65]
Test Case: 897 | Input/Output: [(81 -50 8 85) -50]
Test Case: 898 | Input/Output: [(41 -26 60 -80) -80]
Test Case: 899 | Input/Output: [(82 -4 49 56) -4]
Test Case: 900 | Input/Output: [(-28 0 -18 -73) -73]
Test Case: 901 | Input/Output: [(46 24 -40 56) -40]
Test Case: 902 | Input/Output: [(-21 -23 -51 57) -51]
Test Case: 903 | Input/Output: [(-44 -73 94 71) -73]
Test Case: 904 | Input/Output: [(97 1 -88 55) -88]
Test Case: 905 | Input/Output: [(37 75 44 -46) -46]
Test Case: 906 | Input/Output: [(-30 36 -24 7) -30]
Test Case: 907 | Input/Output: [(27 -11 16 -10) -11]
Test Case: 908 | Input/Output: [(22 -94 65 -56) -94]
Test Case: 909 | Input/Output: [(38 5 54 60) 5]
Test Case: 910 | Input/Output: [(-26 16 23 2) -26]
Test Case: 911 | Input/Output: [(-94 48 -91 91) -94]
Test Case: 912 | Input/Output: [(-85 -92 -89 60) -92]
Test Case: 913 | Input/Output: [(1 1 -22 12) -22]
Test Case: 914 | Input/Output: [(-24 15 -82 54) -82]
Test Case: 915 | Input/Output: [(80 -52 -14 88) -52]
Test Case: 916 | Input/Output: [(85 25 -29 60) -29]
Test Case: 917 | Input/Output: [(86 -25 -84 76) -84]
Test Case: 918 | Input/Output: [(58 -95 11 -93) -95]
Test Case: 919 | Input/Output: [(60 -91 -18 -21) -91]
Test Case: 920 | Input/Output: [(-99 -93 65 65) -99]
Test Case: 921 | Input/Output: [(-90 52 10 -9) -90]
Test Case: 922 | Input/Output: [(93 93 82 -83) -83]
Test Case: 923 | Input/Output: [(-49 10 56 32) -49]
Test Case: 924 | Input/Output: [(27 -87 60 86) -87]
Test Case: 925 | Input/Output: [(-48 60 -43 11) -48]
Test Case: 926 | Input/Output: [(-9 74 37 -83) -83]
Test Case: 927 | Input/Output: [(68 -14 -30 63) -30]
Test Case: 928 | Input/Output: [(39 -9 -29 87) -29]
Test Case: 929 | Input/Output: [(-1 -74 -98 -82) -98]
Test Case: 930 | Input/Output: [(-72 -47 -14 -1) -72]
Test Case: 931 | Input/Output: [(-66 87 -30 39) -66]
Test Case: 932 | Input/Output: [(-69 -41 -40 40) -69]
Test Case: 933 | Input/Output: [(-91 -68 -66 -44) -91]
Test Case: 934 | Input/Output: [(-97 -69 -45 93) -97]
Test Case: 935 | Input/Output: [(96 -11 -71 41) -71]
Test Case: 936 | Input/Output: [(22 -5 -37 -5) -37]
Test Case: 937 | Input/Output: [(-74 -52 30 -8) -74]
Test Case: 938 | Input/Output: [(21 -72 69 -45) -72]
Test Case: 939 | Input/Output: [(28 98 91 -26) -26]
Test Case: 940 | Input/Output: [(-4 -91 96 97) -91]
Test Case: 941 | Input/Output: [(-11 55 -13 6) -13]
Test Case: 942 | Input/Output: [(-90 50 27 -84) -90]
Test Case: 943 | Input/Output: [(-50 -74 46 -34) -74]
Test Case: 944 | Input/Output: [(70 37 2 -41) -41]
Test Case: 945 | Input/Output: [(51 -42 87 -17) -42]
Test Case: 946 | Input/Output: [(93 -49 95 -62) -62]
Test Case: 947 | Input/Output: [(64 -80 -21 56) -80]
Test Case: 948 | Input/Output: [(78 14 40 -2) -2]
Test Case: 949 | Input/Output: [(63 3 -69 28) -69]
Test Case: 950 | Input/Output: [(98 37 65 96) 37]
Test Case: 951 | Input/Output: [(13 86 -91 50) -91]
Test Case: 952 | Input/Output: [(34 17 83 77) 17]
Test Case: 953 | Input/Output: [(-40 -59 -70 -54) -70]
Test Case: 954 | Input/Output: [(78 88 30 6) 6]
Test Case: 955 | Input/Output: [(18 13 94 -2) -2]
Test Case: 956 | Input/Output: [(73 0 64 -81) -81]
Test Case: 957 | Input/Output: [(-83 70 17 -52) -83]
Test Case: 958 | Input/Output: [(29 -71 94 -5) -71]
Test Case: 959 | Input/Output: [(99 14 84 -32) -32]
Test Case: 960 | Input/Output: [(-42 67 -11 0) -42]
Test Case: 961 | Input/Output: [(52 16 -70 64) -70]
Test Case: 962 | Input/Output: [(80 -40 -72 29) -72]
Test Case: 963 | Input/Output: [(-3 -50 9 -58) -58]
Test Case: 964 | Input/Output: [(-97 -53 37 80) -97]
Test Case: 965 | Input/Output: [(-15 -96 -44 -16) -96]
Test Case: 966 | Input/Output: [(-39 -84 -39 84) -84]
Test Case: 967 | Input/Output: [(99 8 -33 -50) -50]
Test Case: 968 | Input/Output: [(-60 -20 98 -100) -100]
Test Case: 969 | Input/Output: [(11 -74 69 -94) -94]
Test Case: 970 | Input/Output: [(54 -42 83 -46) -46]
Test Case: 971 | Input/Output: [(25 -87 -35 33) -87]
Test Case: 972 | Input/Output: [(-62 -31 -77 -20) -77]
Test Case: 973 | Input/Output: [(70 42 -84 -93) -93]
Test Case: 974 | Input/Output: [(61 -80 -60 -35) -80]
Test Case: 975 | Input/Output: [(-99 -24 94 -59) -99]
Test Case: 976 | Input/Output: [(-97 51 39 39) -97]
Test Case: 977 | Input/Output: [(-14 12 -51 80) -51]
Test Case: 978 | Input/Output: [(89 56 37 -94) -94]
Test Case: 979 | Input/Output: [(89 -41 54 46) -41]
Test Case: 980 | Input/Output: [(86 -76 77 80) -76]
Test Case: 981 | Input/Output: [(-90 -81 82 -44) -90]
Test Case: 982 | Input/Output: [(46 -76 62 88) -76]
Test Case: 983 | Input/Output: [(-47 -46 -78 -91) -91]
Test Case: 984 | Input/Output: [(25 -14 88 -59) -59]
Test Case: 985 | Input/Output: [(-49 -24 94 -8) -49]
Test Case: 986 | Input/Output: [(-77 -54 69 -87) -87]
Test Case: 987 | Input/Output: [(57 -98 17 59) -98]
Test Case: 988 | Input/Output: [(-83 84 65 -51) -83]
Test Case: 989 | Input/Output: [(-100 -73 -35 57) -100]
Test Case: 990 | Input/Output: [(63 23 68 -49) -49]
Test Case: 991 | Input/Output: [(-69 100 63 49) -69]
Test Case: 992 | Input/Output: [(-51 67 27 47) -51]
Test Case: 993 | Input/Output: [(82 66 -100 11) -100]
Test Case: 994 | Input/Output: [(-31 63 -9 -69) -69]
Test Case: 995 | Input/Output: [(57 -14 65 15) -14]
Test Case: 996 | Input/Output: [(58 54 51 78) 51]
Test Case: 997 | Input/Output: [(-41 -99 -55 -55) -99]
Test Case: 998 | Input/Output: [(-67 42 -28 -1) -67]
Test Case: 999 | Input/Output: [(-50 -44 98 -81) -81]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 14 76 74 82 76 -52 104 -104 99 -103 -47 -12 -105 39 -128 8
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[19 -47 -47 -47] -47] [[23 -7 -7 -7] -7] [[35 -31 35 35] -31] [[-49 -49 -49 48] -49] [[95 95 95 -43] -43] [[-97 -97 -97 -83] -97] [[80 -28 -28 -28] -28] [[-93 93 -93 -93] -93] [[-63 -63 -37 -63] -63] [[6 87 6 6] 6] [(-44 -44 -44 -44) -44] [(21 21 21 21) 21] [(82 82 82 82) 82] [(-81 -81 -81 -81) -81] [(85 85 85 85) 85] [(95 51 96 71) 51] [(89 31 13 34) 13] [(44 10 10 80) 10] [(52 8 82 37) 8] [(80 51 74 57) 51] [(17 16 11 5) 5] [(36 87 32 4) 4] [(92 83 5 55) 5] [(63 34 89 13) 13] [(1 81 21 98) 1] [(24 76 31 96) 24] [(34 7 66 62) 7] [(24 51 63 54) 24] [(48 51 5 22) 5] [(21 82 38 93) 21] [(96 50 23 49) 23] [(67 11 2 1) 1] [(66 49 15 45) 15] [(69 13 60 0) 0] [(78 100 27 32) 27] [(91 5 -64 31) -64] [(-31 -3 -91 -15) -91] [(53 -58 -94 32) -94] [(31 61 -84 79) -84] [(-22 6 -23 76) -23] [(-36 -41 40 -57) -57] [(-30 -27 43 6) -30] [(-18 -88 -27 28) -88] [(11 -98 -45 60) -98] [(29 -100 -94 -82) -100] [(59 14 -14 94) -14] [(-49 92 -37 43) -49] [(-49 50 8 75) -49] [(0 36 90 10) 0] [(-52 17 -22 85) -52] [(-84 -87 -3 10) -87] [(-31 50 -4 -81) -81] [(-79 14 -37 7) -79] [(37 -67 -65 29) -67] [(50 -70 18 -16) -70] [(-68 53 37 -1) -68] [(-4 98 -9 -52) -52] [(13 -2 -52 0) -52] [(72 2 10 -16) -16] [(-23 -49 -46 35) -49] [(15 -79 1 5) -79] [(42 -31 -45 -69) -69] [(-77 -22 -37 74) -77] [(70 -82 46 0) -82] [(27 21 13 -53) -53] [(-96 87 48 -42) -96] [(-23 -1 -82 83) -82] [(-47 59 18 -10) -47] [(85 -87 45 -98) -98] [(59 -36 -4 41) -36] [(-14 96 -44 -5) -44] [(95 22 84 -59) -59] [(-46 33 -67 94) -67] [(-9 100 -15 -88) -88] [(-90 0 -44 92) -90] [(-40 3 -25 21) -40] [(0 -95 17 44) -95] [(-66 -12 10 -82) -82] [(-7 11 -52 -67) -67] [(72 -63 15 -22) -63] [(-37 -10 12 -49) -49] [(-81 -99 56 -100) -100] [(-54 -16 66 62) -54] [(23 -56 49 -39) -56] [(15 -43 90 -47) -47] [(-3 51 -64 20) -64] [(-97 7 -59 82) -97] [(-48 -48 92 -99) -99] [(-74 54 52 7) -74] [(20 11 -58 -29) -58] [(-24 -41 -18 -44) -44] [(-33 83 71 64) -33] [(-87 44 7 77) -87] [(-47 -100 -11 67) -100] [(-72 14 -3 69) -72])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: 93                 
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 87                 
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 16                 
Correct output: 4                   | Program output: 87                 
Correct output: 5                   | Program output: 83                 
Correct output: 13                  | Program output: 34                 
Correct output: 1                   | Program output: 81                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 51                 
Correct output: 21                  | Program output: 82                 
Correct output: 23                  | Program output: 50                 
Correct output: 1                   | Program output: 11                 
Correct output: 15                  | Program output: 49                 
Correct output: 0                   | Program output: 13                 
Correct output: 27                  | Program output: 100                
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -3                 
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 61                 
Correct output: -23                 | Program output: 6                  
Correct output: -57                 | Program output: -41                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: 92                 
Correct output: -49                 | Program output: 50                 
Correct output: 0                   | Program output: 36                 
Correct output: -52                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: 50                 
Correct output: -79                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 53                 
Correct output: -52                 | Program output: 98                 
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -31                
Correct output: -77                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: 21                 
Correct output: -96                 | Program output: 87                 
Correct output: -82                 | Program output: -1                 
Correct output: -47                 | Program output: 59                 
Correct output: -98                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: 96                 
Correct output: -59                 | Program output: 22                 
Correct output: -67                 | Program output: 33                 
Correct output: -88                 | Program output: 100                
Correct output: -90                 | Program output: 0                  
Correct output: -40                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -12                
Correct output: -67                 | Program output: 11                 
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -99                
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -43                
Correct output: -64                 | Program output: 51                 
Correct output: -97                 | Program output: 7                  
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: 54                 
Correct output: -58                 | Program output: 11                 
Correct output: -44                 | Program output: -41                
Correct output: -33                 | Program output: 83                 
Correct output: -87                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (exec_rot (exec_swap (boolean_dup in2 boolean_dup_times print_integer print_integer exec_y (exec_s_when_autoconstructing () (integer_rot integer_mult integer_dup_times) (integer_swap integer_div boolean_not) exec_do*range () boolean_xor exec_do*times (boolean_frominteger) integer_fromboolean)) ()) () ())
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (exec_rot (exec_swap (boolean_dup in2 boolean_dup_times print_integer print_integer exec_y (exec_s_when_autoconstructing () (integer_rot integer_mult integer_dup_times) (integer_swap integer_div boolean_not) exec_do*range () boolean_xor exec_do*times (boolean_frominteger) integer_fromboolean)) ()) () ())
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 2 4 6 13 2 1 2 9 4)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (6 2 4 6 13 2 1 2 9 4)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction tag_integer_205} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction tag_boolean_609} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction tag_boolean_360} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_456} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger})
Best program: (in2 integer_yank integer_div integer_gte boolean_not exec_dup (exec_s (print_integer) (tag_integer_205 integer_pop) (exec_s_when_autoconstructing (exec_eq exec_when (exec_dup_times (exec_do*while (boolean_dup_items integer_dup_items) exec_s_when_autoconstructing () (integer_mult exec_do*while (boolean_invert_first_then_and boolean_xor boolean_invert_second_then_and integer_dup integer_sub)) (integer_div print_newline tag_boolean_609 exec_dup_items boolean_empty) exec_noop exec_rot (exec_s_when_autoconstructing (exec_dup_items boolean_dup exec_k_when_autoconstructing (exec_s (boolean_dup integer_min integer_stackdepth) (in3 exec_do*times ()) (integer_shove) boolean_dup_times boolean_flush exec_rot (integer_mod integer_rot integer_fromboolean boolean_and) (boolean_empty integer_sub exec_stackdepth) (integer_gt integer_lt boolean_not integer_add) exec_swap () (integer_empty integer_eq in3) boolean_rot) (boolean_frominteger exec_eq) boolean_frominteger boolean_dup_items) (exec_when (integer_swap exec_pop (exec_stackdepth boolean_dup_times exec_dup_items boolean_eq exec_shove (boolean_swap exec_shove (tag_boolean_360) integer_yankdup tagged_456 exec_flush) boolean_dup boolean_dup_times exec_flush integer_dec boolean_dup in1 integer_stackdepth) boolean_frominteger)) ()) () ()))) () ())))
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 88
Size: 124
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 9.951
Median total errors in population: 10
Error averages by case: (0.994 0.998 0.996 0.994 0.987 0.998 0.999 0.998 0.991 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.88
Average program size in population (points): 69.946
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 477005
--- Timings ---
Current time: 1559593734265 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.9 seconds, 33.6%
Fitness Testing:      1.6 seconds, 62.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 34                 
Correct output: 1                   | Program output: 21                 
Correct output: 24                  | Program output: 31                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 38                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -41                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: 8                  
Correct output: 0                   | Program output: 36                 
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -4                 
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 37                 
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 48                 
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: 18                 
Correct output: -98                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 22                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -12                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -99                
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -41                
Correct output: -33                 | Program output: 71                 
Correct output: -87                 | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_pop (integer_mod) integer_gt in1 integer_sub exec_noop exec_s_when_autoconstructing () () (boolean_swap exec_dup () exec_do*range () integer_min integer_pop) exec_if (boolean_dup_items exec_eq exec_if (integer_mod) () integer_flush exec_y_when_autoconstructing () integer_dec exec_s_when_autoconstructing (exec_do*range (exec_swap (exec_rot (in3 exec_while (boolean_dup integer_pop integer_dup_items in4) integer_lte exec_k_when_autoconstructing (in2 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup integer_inc exec_eq exec_dup_times (exec_eq) integer_inc integer_pop boolean_yank) in1 exec_s () (integer_yankdup exec_s (exec_while (integer_rot) integer_sub) (integer_swap boolean_pop integer_dup boolean_flush) ()) ())))) ()) ()) () ()) ())) () ()) ())
Lexicase best errors: [0 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.398
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_pop (integer_mod) integer_gt in1 integer_sub exec_noop exec_s_when_autoconstructing () () (boolean_swap exec_dup () exec_do*range () integer_min integer_pop) exec_if (boolean_dup_items exec_eq exec_if (integer_mod) () integer_flush exec_y_when_autoconstructing () integer_dec exec_s_when_autoconstructing (exec_do*range (exec_swap (exec_rot (in3 exec_while (boolean_dup integer_pop integer_dup_items in4) integer_lte exec_k_when_autoconstructing (in2 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup integer_inc exec_eq exec_dup_times (exec_eq) integer_inc integer_pop boolean_yank) in1 exec_s () (integer_yankdup exec_s (exec_while (integer_rot) integer_sub) (integer_swap boolean_pop integer_dup boolean_flush) ()) ())))) ()) ()) () ()) ())) () ()) ())
Zero cases best errors: [0 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.398
--- Lexicase Population Statistics ---
Count of elite individuals by case: (507 156 564 66 286 285 284 55 171 69)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (507 156 564 66 286 285 284 55 171 69)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Best program: (exec_pop (integer_mod) integer_gt in1 integer_sub exec_noop exec_s_when_autoconstructing () () (boolean_swap exec_dup () exec_do*range () integer_min integer_pop) exec_if (boolean_dup_items exec_eq exec_if (integer_mod) () integer_flush exec_y_when_autoconstructing () integer_dec exec_s_when_autoconstructing (exec_do*range (exec_swap (exec_rot (in3 exec_while (boolean_dup integer_pop integer_dup_items in4) integer_lte exec_k_when_autoconstructing (in2 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup integer_inc exec_eq exec_dup_times (exec_eq) integer_inc integer_pop boolean_yank) in1 exec_s () (integer_yankdup exec_s (exec_while (integer_rot) integer_sub) (integer_swap boolean_pop integer_dup boolean_flush) ()) ())))) ()) ()) () ()) ())) () ()) ())
Errors: [0 1 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 62
Size: 103
Percent parens: 0.398
--- Population Statistics ---
Average total errors in population: 7.557
Median total errors in population: 6
Error averages by case: (0.493 0.844 0.436 0.934 0.714 0.715 0.716 0.945 0.829 0.931)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.305
Average program size in population (points): 88.141
Average percent parens in population: 0.303
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1210311
--- Timings ---
Current time: 1559593736782 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         1.8 seconds, 37.3%
Fitness Testing:      2.4 seconds, 48.2%
Report:               0.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 34                 
Correct output: 1                   | Program output: 21                 
Correct output: 24                  | Program output: 31                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 38                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -41                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: 8                  
Correct output: 0                   | Program output: 36                 
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -4                 
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 37                 
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 48                 
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: 18                 
Correct output: -98                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 22                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -12                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -99                
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -41                
Correct output: -33                 | Program output: 71                 
Correct output: -87                 | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 2, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_mod integer_gt in1 integer_sub exec_noop exec_s_when_autoconstructing () () (exec_dup () exec_do*range () integer_pop) exec_if (boolean_dup_items exec_eq exec_if (exec_dup_items) (integer_mod)) (exec_y_when_autoconstructing () integer_dec exec_s_when_autoconstructing (exec_do*range (exec_dup_items) exec_rot (in3 exec_while (boolean_dup integer_pop in4) integer_lte in2 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup integer_inc exec_eq exec_eq) integer_pop boolean_yank) in1 exec_s () (integer_yankdup exec_s (exec_while (integer_rot) integer_sub) (boolean_pop integer_dup boolean_flush) ()) ()))) ()) () ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 89
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 2, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_mod integer_gt in1 integer_sub exec_noop exec_s_when_autoconstructing () () (exec_dup () exec_do*range () integer_pop) exec_if (boolean_dup_items exec_eq exec_if (exec_dup_items) (integer_mod)) (exec_y_when_autoconstructing () integer_dec exec_s_when_autoconstructing (exec_do*range (exec_dup_items) exec_rot (in3 exec_while (boolean_dup integer_pop in4) integer_lte in2 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup integer_inc exec_eq exec_eq) integer_pop boolean_yank) in1 exec_s () (integer_yankdup exec_s (exec_while (integer_rot) integer_sub) (boolean_pop integer_dup boolean_flush) ()) ()))) ()) () ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 89
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 170 173 173 326 128 127 127 183 179)
Population mean number of elite cases: 1.76
Count of perfect (error zero) individuals by case: (174 170 173 173 326 128 127 127 183 179)
Population mean number of perfect (error zero) cases: 1.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush})
Best program: (integer_mod integer_gt in1 integer_sub exec_noop exec_s_when_autoconstructing () () (integer_pop exec_dup () exec_do*range () integer_min boolean_shove integer_pop) exec_if (boolean_dup_items exec_eq exec_if (integer_mod) () integer_flush exec_y_when_autoconstructing () integer_dec exec_s_when_autoconstructing (exec_do*range (exec_swap (exec_rot (in3 exec_while (boolean_dup integer_pop integer_dup_items in1 in4) integer_lte exec_k_when_autoconstructing (in2 integer_min exec_s () (exec_s (exec_s (integer_div print_integer) () (exec_do*count (boolean_flush) exec_y_when_autoconstructing (exec_while (integer_max exec_do*count (boolean_yankdup integer_inc exec_eq exec_dup_times (exec_eq) integer_inc integer_pop boolean_yank) in1 integer_yankdup exec_swap (exec_s (exec_while (integer_rot) integer_swap boolean_pop boolean_flush) () ()) ())))) () ()) ()) ()) () ()) ())) () ()) ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 63
Size: 106
Percent parens: 0.406
--- Population Statistics ---
Average total errors in population: 8.24
Median total errors in population: 9
Error averages by case: (0.826 0.83 0.827 0.827 0.674 0.872 0.873 0.873 0.817 0.821)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.308
Average program size in population (points): 105.673
Average percent parens in population: 0.336
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1806572
--- Timings ---
Current time: 1559593739152 milliseconds
Total Time:           7.5 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.0 seconds, 40.3%
Fitness Testing:      3.0 seconds, 39.8%
Report:               1.4 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 404
Test mean error for best: 0.40400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 16                 
Correct output: 4                   | Program output: 36                 
Correct output: 5                   | Program output: 83                 
Correct output: 13                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 50                 
Correct output: 1                   | Program output: 11                 
Correct output: 15                  | Program output: 49                 
Correct output: 0                   | Program output: 13                 
Correct output: 27                  | Program output: 78                 
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -31                
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 31                 
Correct output: -23                 | Program output: -22                
Correct output: -57                 | Program output: -41                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -4                 
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: 21                 
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -14                
Correct output: -59                 | Program output: 22                 
Correct output: -67                 | Program output: -46                
Correct output: -88                 | Program output: -9                 
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -66                
Correct output: -67                 | Program output: -7                 
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -37                
Correct output: -100                | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -43                
Correct output: -64                 | Program output: -3                 
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: 11                 
Correct output: -44                 | Program output: -41                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_pop (integer_mod) integer_swap integer_gt in1 integer_sub exec_s_when_autoconstructing () () (boolean_swap exec_dup () exec_do*range () integer_max integer_min integer_pop) exec_if (integer_mult) (exec_eq exec_if (integer_mod) () integer_flush exec_y_when_autoconstructing () integer_dec exec_yankdup) exec_do*range (integer_mult exec_do*while (integer_dup exec_while (boolean_dup integer_pop integer_dup_items in4) integer_lte exec_k_when_autoconstructing (in2 in1 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_while (exec_while () integer_max boolean_yankdup exec_eq exec_dup_times (exec_eq) integer_inc integer_pop boolean_yank) integer_inc in1 exec_s () (integer_yankdup exec_s (exec_while (integer_rot) integer_sub) (integer_swap integer_dup boolean_flush) ()) ()))) ()) ())))
Lexicase best errors: [0 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 97
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_pop (integer_mod) integer_swap integer_gt in1 integer_sub exec_s_when_autoconstructing () () (boolean_swap exec_dup () exec_do*range () integer_max integer_min integer_pop) exec_if (integer_mult) (exec_eq exec_if (integer_mod) () integer_flush exec_y_when_autoconstructing () integer_dec exec_yankdup) exec_do*range (integer_mult exec_do*while (integer_dup exec_while (boolean_dup integer_pop integer_dup_items in4) integer_lte exec_k_when_autoconstructing (in2 in1 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_while (exec_while () integer_max boolean_yankdup exec_eq exec_dup_times (exec_eq) integer_inc integer_pop boolean_yank) integer_inc in1 exec_s () (integer_yankdup exec_s (exec_while (integer_rot) integer_sub) (integer_swap integer_dup boolean_flush) ()) ()))) ()) ())))
Zero cases best errors: [0 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 97
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 29 29 366 336 139 301 443 138 29)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (134 29 29 366 336 139 301 443 138 29)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Best program: (exec_pop (integer_mod) integer_swap integer_gt in1 integer_sub exec_s_when_autoconstructing () () (boolean_swap exec_dup () exec_do*range () integer_max integer_min integer_pop) exec_if (integer_mult) (exec_eq exec_if (integer_mod) () integer_flush exec_y_when_autoconstructing () integer_dec exec_yankdup) exec_do*range (integer_mult exec_do*while (integer_dup exec_while (boolean_dup integer_pop integer_dup_items in4) integer_lte exec_k_when_autoconstructing (in2 in1 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_while (exec_while () integer_max boolean_yankdup exec_eq exec_dup_times (exec_eq) integer_inc integer_pop boolean_yank) integer_inc in1 exec_s () (integer_yankdup exec_s (exec_while (integer_rot) integer_sub) (integer_swap integer_dup boolean_flush) ()) ()))) ()) ())))
Errors: [0 1 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 63
Size: 97
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 8.056
Median total errors in population: 10
Error averages by case: (0.866 0.971 0.971 0.634 0.664 0.861 0.699 0.557 0.862 0.971)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.004
Average program size in population (points): 102.106
Average percent parens in population: 0.364
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2315482
--- Timings ---
Current time: 1559593741532 milliseconds
Total Time:           9.6 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.1 seconds, 42.6%
Fitness Testing:      3.5 seconds, 36.2%
Report:               1.9 seconds, 20.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 81                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 82                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -15                
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 61                 
Correct output: -23                 | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: 43                 
Correct output: -49                 | Program output: 50                 
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -1                 
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 0                  
Correct output: -40                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 20                 
Correct output: -97                 | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_563} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_276} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_pop (exec_when () integer_mod) boolean_invert_first_then_and exec_s_when_autoconstructing () () (boolean_pop exec_dup () integer_flush exec_do*range () integer_min integer_pop) boolean_stackdepth integer_inc boolean_frominteger boolean_dup_items exec_eq integer_dec exec_if (integer_dup_items integer_mod) () exec_do*while (integer_flush exec_y_when_autoconstructing () exec_do*range (exec_swap (exec_rot (tagged_563) (boolean_dup exec_shove (integer_pop integer_dup_items in4) exec_k_when_autoconstructing (in2 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (boolean_eq exec_do*count (exec_s () (integer_max tag_integer_276 integer_inc exec_eq exec_eq) (integer_inc integer_pop boolean_yank) in1 exec_s () (exec_s (exec_while (integer_rot) integer_sub) (boolean_pop integer_dup boolean_flush) ()) ()))) ()) ()) ()) ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 98
Percent parens: 0.388
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_563} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_276} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_pop (exec_when () integer_mod) boolean_invert_first_then_and exec_s_when_autoconstructing () () (boolean_pop exec_dup () integer_flush exec_do*range () integer_min integer_pop) boolean_stackdepth integer_inc boolean_frominteger boolean_dup_items exec_eq integer_dec exec_if (integer_dup_items integer_mod) () exec_do*while (integer_flush exec_y_when_autoconstructing () exec_do*range (exec_swap (exec_rot (tagged_563) (boolean_dup exec_shove (integer_pop integer_dup_items in4) exec_k_when_autoconstructing (in2 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (boolean_eq exec_do*count (exec_s () (integer_max tag_integer_276 integer_inc exec_eq exec_eq) (integer_inc integer_pop boolean_yank) in1 exec_s () (exec_s (exec_while (integer_rot) integer_sub) (boolean_pop integer_dup boolean_flush) ()) ()))) ()) ()) ()) ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 98
Percent parens: 0.388
--- Lexicase Population Statistics ---
Count of elite individuals by case: (389 182 152 153 10 150 10 153 359 389)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (389 182 152 153 10 150 10 153 359 389)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup})
Best program: (exec_pop (integer_mod) integer_gt in1 integer_sub exec_noop exec_s_when_autoconstructing () () (integer_yank boolean_invert_first_then_and) integer_min exec_if (integer_fromboolean exec_if (integer_mod) () exec_empty) (exec_y_when_autoconstructing () integer_dec exec_s_when_autoconstructing (exec_do*range (exec_swap (boolean_pop exec_rot (in3 boolean_shove boolean_dup integer_max integer_dup_items in4) (boolean_eq exec_k_when_autoconstructing (in2 integer_min exec_s (integer_stackdepth) (integer_div print_integer) () exec_do*count (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup integer_inc exec_k_when_autoconstructing (exec_eq exec_eq) (boolean_yank) boolean_dup_items in1 exec_s () (integer_yankdup exec_s (exec_while (integer_swap boolean_pop integer_dup)) () ()) ())))) ()) ()) ())) () ()))
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 55
Size: 91
Percent parens: 0.396
--- Population Statistics ---
Average total errors in population: 8.053
Median total errors in population: 10
Error averages by case: (0.611 0.818 0.848 0.847 0.99 0.85 0.99 0.847 0.641 0.611)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.857
Average program size in population (points): 98.055
Average percent parens in population: 0.358
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2962399
--- Timings ---
Current time: 1559593743718 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.2 seconds, 43.1%
Fitness Testing:      4.1 seconds, 33.7%
Report:               2.7 seconds, 22.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 71                 
Correct output: 13                  | Program output: 34                 
Correct output: 10                  | Program output: 44                 
Correct output: 8                   | Program output: 37                 
Correct output: 51                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 34                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 21                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 31                 
Correct output: -91                 | Program output: -31                
Correct output: -94                 | Program output: 32                 
Correct output: -84                 | Program output: 31                 
Correct output: -23                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -30                
Correct output: -88                 | Program output: -18                
Correct output: -98                 | Program output: 11                 
Correct output: -100                | Program output: -82                
Correct output: -14                 | Program output: 59                 
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -84                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -67                 | Program output: 29                 
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 0                  
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -23                
Correct output: -79                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: 41                 
Correct output: -44                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -46                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -3                 
Correct output: -97                 | Program output: -97                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -100                | Program output: -47                
Correct output: -72                 | Program output: -72                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_pop (integer_mod) integer_swap integer_gt in1 integer_sub integer_shove exec_do*range () integer_max exec_empty integer_min integer_pop exec_if (integer_mult) (exec_if (integer_mod) () integer_flush integer_yankdup integer_dec exec_yankdup) exec_do*range (integer_dup exec_while (boolean_dup integer_pop integer_dup) integer_dup_items in4) integer_lte in1 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_while (exec_while () integer_max boolean_yankdup exec_eq boolean_swap exec_dup_times (exec_eq) integer_inc integer_yank) integer_pop exec_s () (integer_yankdup boolean_shove exec_s (exec_while (integer_rot) integer_swap integer_dup boolean_flush) () ()) ()))) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 83
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_pop (integer_mod) integer_swap integer_gt in1 integer_sub integer_shove exec_do*range () integer_max exec_empty integer_min integer_pop exec_if (integer_mult) (exec_if (integer_mod) () integer_flush integer_yankdup integer_dec exec_yankdup) exec_do*range (integer_dup exec_while (boolean_dup integer_pop integer_dup) integer_dup_items in4) integer_lte in1 integer_min exec_s (integer_stackdepth) (exec_s (integer_div print_integer) () (exec_do*count (exec_while (exec_while () integer_max boolean_yankdup exec_eq boolean_swap exec_dup_times (exec_eq) integer_inc integer_yank) integer_pop exec_s () (integer_yankdup boolean_shove exec_s (exec_while (integer_rot) integer_swap integer_dup boolean_flush) () ()) ()))) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 83
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (71 379 396 218 71 222 197 229 158 228)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (71 379 396 218 71 222 197 229 158 228)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 2, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult})
Best program: (boolean_invert_second_then_and exec_pop (integer_mod) integer_swap integer_gt in1 integer_sub exec_s_when_autoconstructing () () (boolean_swap exec_dup () exec_do*range () integer_shove) integer_empty integer_max integer_min integer_pop exec_if (exec_eq exec_while () exec_if (integer_mod) () integer_flush exec_y_when_autoconstructing () integer_dec exec_yankdup) () boolean_dup_items exec_do*range (integer_mult exec_do*while (boolean_dup integer_pop boolean_dup_items integer_dup_items boolean_not) in4) integer_lte exec_k_when_autoconstructing (in1 integer_min exec_s (integer_stackdepth) (exec_s (integer_div integer_gte) (print_integer) () exec_k_when_autoconstructing (exec_do*count (print_boolean exec_while (exec_while () integer_max boolean_yankdup exec_eq exec_dup_times (integer_inc integer_pop boolean_yank) integer_inc in1 exec_s () (integer_yankdup exec_do*range (exec_s (in2 exec_while (integer_rot) integer_sub) (integer_swap integer_dup boolean_flush integer_mult) ())) ()))) ()) ()) ())
Errors: [1 0 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 71
Size: 108
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 7.831
Median total errors in population: 10
Error averages by case: (0.929 0.621 0.604 0.782 0.929 0.778 0.803 0.771 0.842 0.772)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.49
Average program size in population (points): 98.39
Average percent parens in population: 0.354
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3559341
--- Timings ---
Current time: 1559593745830 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.4 seconds, 44.6%
Fitness Testing:      4.7 seconds, 32.7%
Report:               3.1 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 81                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 82                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -15                
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 61                 
Correct output: -23                 | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: 43                 
Correct output: -49                 | Program output: 50                 
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -1                 
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 0                  
Correct output: -40                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 20                 
Correct output: -97                 | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_pop (integer_mod) integer_sub exec_noop exec_s_when_autoconstructing () () (integer_yank exec_dup () exec_do*range () exec_swap () (integer_dec exec_s_when_autoconstructing (exec_swap (integer_mult exec_rot (integer_max in4) (exec_k_when_autoconstructing (in2 integer_min exec_s (integer_stackdepth) (integer_div print_integer) () exec_y_when_autoconstructing (boolean_yankdup exec_stackdepth integer_inc exec_empty exec_eq exec_eq) boolean_yank) (in1 exec_s () (exec_eq integer_yankdup exec_s (boolean_pop integer_dup) () ()) ())) ()) ()) () ())))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.433
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_pop (integer_mod) integer_sub exec_noop exec_s_when_autoconstructing () () (integer_yank exec_dup () exec_do*range () exec_swap () (integer_dec exec_s_when_autoconstructing (exec_swap (integer_mult exec_rot (integer_max in4) (exec_k_when_autoconstructing (in2 integer_min exec_s (integer_stackdepth) (integer_div print_integer) () exec_y_when_autoconstructing (boolean_yankdup exec_stackdepth integer_inc exec_empty exec_eq exec_eq) boolean_yank) (in1 exec_s () (exec_eq integer_yankdup exec_s (boolean_pop integer_dup) () ()) ())) ()) ()) () ())))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.433
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 209 239 213 99 207 216 212 209 236)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (207 209 239 213 99 207 216 212 209 236)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_452} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte})
Best program: (exec_pop (integer_mod) integer_gt in1 boolean_swap exec_s_when_autoconstructing () () (boolean_swap exec_do*range () integer_min boolean_xor integer_pop) exec_eq exec_if (integer_flush integer_mod) () integer_flush integer_inc exec_y_when_autoconstructing () integer_dec exec_s_when_autoconstructing (in3 boolean_dup tagged_452 integer_dup_items in4) (integer_lte boolean_and in2 integer_min integer_stackdepth) (exec_s (integer_div print_integer) () (integer_sub) exec_do*count (integer_gt) exec_y_when_autoconstructing (exec_while (exec_k (integer_max boolean_yankdup exec_eq) (integer_inc boolean_yank) in1 exec_s () (exec_s (exec_while (integer_rot) integer_sub) (in2) (integer_swap integer_swap boolean_pop exec_s_when_autoconstructing (integer_dup exec_do*count (boolean_flush integer_gte)) () ())) ()))))
Errors: [0 0 1 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 59
Size: 90
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 7.953
Median total errors in population: 10
Error averages by case: (0.793 0.791 0.761 0.787 0.901 0.793 0.784 0.788 0.791 0.764)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.444
Average program size in population (points): 97.135
Average percent parens in population: 0.346
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4193572
--- Timings ---
Current time: 1559593747902 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.5 seconds, 45.5%
Fitness Testing:      5.2 seconds, 32.0%
Report:               3.6 seconds, 21.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 81                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 82                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -15                
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 61                 
Correct output: -23                 | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: 43                 
Correct output: -49                 | Program output: 50                 
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -1                 
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 0                  
Correct output: -40                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 20                 
Correct output: -97                 | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_mod boolean_shove integer_gt integer_sub exec_s_when_autoconstructing () () (print_integer boolean_swap boolean_invert_first_then_and exec_if (integer_min exec_if (boolean_dup_items exec_eq boolean_or) (exec_yank integer_mod)) (integer_flush exec_do*times (integer_dec integer_inc exec_shove (in3 integer_empty boolean_invert_first_then_and) integer_dup_items in4) exec_k_when_autoconstructing (in2 integer_min exec_s (integer_dup_times integer_stackdepth) (exec_s (integer_shove integer_div print_integer) () (integer_inc exec_do*count (exec_k (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup exec_eq boolean_eq exec_dup_times (-98 in3 boolean_dup exec_eq) boolean_rot in1 integer_yankdup exec_s (exec_while (integer_rot) exec_empty) (integer_swap in4 boolean_pop integer_lte boolean_flush) ()))) ()))) ()) ())))
Lexicase best errors: [0 0 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_mod boolean_shove integer_gt integer_sub exec_s_when_autoconstructing () () (print_integer boolean_swap boolean_invert_first_then_and exec_if (integer_min exec_if (boolean_dup_items exec_eq boolean_or) (exec_yank integer_mod)) (integer_flush exec_do*times (integer_dec integer_inc exec_shove (in3 integer_empty boolean_invert_first_then_and) integer_dup_items in4) exec_k_when_autoconstructing (in2 integer_min exec_s (integer_dup_times integer_stackdepth) (exec_s (integer_shove integer_div print_integer) () (integer_inc exec_do*count (exec_k (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup exec_eq boolean_eq exec_dup_times (-98 in3 boolean_dup exec_eq) boolean_rot in1 integer_yankdup exec_s (exec_while (integer_rot) exec_empty) (integer_swap in4 boolean_pop integer_lte boolean_flush) ()))) ()))) ()) ())))
Zero cases best errors: [0 0 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 199 200 198 172 280 174 56 57 277)
Population mean number of elite cases: 1.81
Count of perfect (error zero) individuals by case: (198 199 200 198 172 280 174 56 57 277)
Population mean number of perfect (error zero) cases: 1.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_410} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_305} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap})
Best program: (boolean_swap exec_pop (in1 integer_mod) integer_gt print_boolean in1 integer_sub exec_swap (integer_yank exec_s_when_autoconstructing () () (exec_y (exec_eq) exec_dup_items in1 exec_dup () boolean_flush integer_min integer_pop) exec_if (boolean_dup_items exec_shove (integer_mod)) (boolean_empty exec_y_when_autoconstructing () integer_dec tagged_410 integer_max boolean_not) integer_lte exec_swap (exec_k_when_autoconstructing () () exec_rot (in3 boolean_stackdepth exec_dup_times (integer_pop exec_dup () integer_dup_items in4) integer_lte tagged_305 exec_k_when_autoconstructing (in2 integer_min exec_s (integer_swap integer_stackdepth) (exec_s (integer_div print_integer) () (integer_max exec_do*count (exec_y_when_autoconstructing (exec_while (integer_rot integer_dec integer_inc integer_add exec_eq exec_dup_times (boolean_flush integer_pop boolean_yank) in1 exec_s () (exec_dup_times (integer_yankdup exec_s (exec_while (exec_y_when_autoconstructing () exec_yank) integer_rot) (integer_swap exec_empty) (boolean_shove integer_dup integer_max exec_swap () ()))) ()))))) ()) ()) () ()) ()) ())
Errors: [0 0 0 0 1 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 79
Size: 124
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 8.189
Median total errors in population: 10
Error averages by case: (0.802 0.801 0.8 0.802 0.828 0.72 0.826 0.944 0.943 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.906
Average program size in population (points): 95.909
Average percent parens in population: 0.343
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4766241
--- Timings ---
Current time: 1559593750079 milliseconds
Total Time:          18.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.5 seconds, 46.4%
Fitness Testing:      5.8 seconds, 31.3%
Report:               4.0 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 37                 
Correct output: 51                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: 24                  | Program output: 31                 
Correct output: 7                   | Program output: 62                 
Correct output: 24                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 38                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: 6                  
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: 8                  
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: 17                 
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: 62                 
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 7                  
Correct output: -100                | Program output: -11                
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_mod boolean_shove integer_sub exec_s_when_autoconstructing () () (print_integer boolean_swap boolean_invert_first_then_and exec_if (exec_shove (integer_min exec_if (boolean_dup_items exec_eq exec_when (boolean_or) exec_yank integer_mod) () integer_flush exec_do*times (boolean_or) integer_dec integer_inc exec_shove (boolean_flush in3 integer_empty boolean_invert_first_then_and) in4) exec_k_when_autoconstructing (integer_min exec_s (integer_dup_times integer_stackdepth) (exec_s (integer_shove integer_div print_integer) () (integer_inc exec_do*count (exec_k (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup exec_eq boolean_eq exec_dup_times (-98 in3 boolean_dup exec_eq) boolean_rot in1 exec_s (exec_while (integer_rot) exec_empty) (integer_swap in4 boolean_pop integer_lte boolean_flush) ()))) ()))) ()) ()) ()))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 92
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_mod boolean_shove integer_sub exec_s_when_autoconstructing () () (print_integer boolean_swap boolean_invert_first_then_and exec_if (exec_shove (integer_min exec_if (boolean_dup_items exec_eq exec_when (boolean_or) exec_yank integer_mod) () integer_flush exec_do*times (boolean_or) integer_dec integer_inc exec_shove (boolean_flush in3 integer_empty boolean_invert_first_then_and) in4) exec_k_when_autoconstructing (integer_min exec_s (integer_dup_times integer_stackdepth) (exec_s (integer_shove integer_div print_integer) () (integer_inc exec_do*count (exec_k (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup exec_eq boolean_eq exec_dup_times (-98 in3 boolean_dup exec_eq) boolean_rot in1 exec_s (exec_while (integer_rot) exec_empty) (integer_swap in4 boolean_pop integer_lte boolean_flush) ()))) ()))) ()) ()) ()))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 92
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 203 232 81 215 241 184 82 81 65)
Population mean number of elite cases: 1.59
Count of perfect (error zero) individuals by case: (203 203 232 81 215 241 184 82 81 65)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush})
Best program: (integer_mod boolean_shove integer_sub exec_s_when_autoconstructing () () (print_integer boolean_swap boolean_invert_first_then_and exec_if (exec_shove (integer_min exec_if (boolean_dup_items exec_eq exec_when (boolean_or) exec_yank integer_mod) () integer_flush exec_do*times (boolean_or) integer_dec integer_inc exec_shove (boolean_flush in3 integer_empty boolean_invert_first_then_and) in4) exec_k_when_autoconstructing (integer_min exec_s (integer_dup_times integer_stackdepth) (exec_s (integer_shove integer_div print_integer) () (integer_inc exec_do*count (exec_k (exec_y_when_autoconstructing (exec_while (integer_max boolean_yankdup exec_eq boolean_eq exec_dup_times (-98 in3 boolean_dup exec_eq) boolean_rot in1 exec_s (exec_while (integer_rot) exec_empty) (integer_swap in4 boolean_pop integer_lte boolean_flush) ()))) ()))) ()) ()) ()))
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 62
Size: 92
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 8.413
Median total errors in population: 10
Error averages by case: (0.797 0.797 0.768 0.919 0.785 0.759 0.816 0.918 0.919 0.935)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.294
Average program size in population (points): 97.534
Average percent parens in population: 0.329
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5387162
--- Timings ---
Current time: 1559593752179 milliseconds
Total Time:          20.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.6 seconds, 46.8%
Fitness Testing:      6.3 seconds, 30.6%
Report:               4.5 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 81                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 82                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -15                
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 61                 
Correct output: -23                 | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: 43                 
Correct output: -49                 | Program output: 50                 
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -1                 
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 0                  
Correct output: -40                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 20                 
Correct output: -97                 | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_178} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_pop (boolean_swap boolean_invert_second_then_and exec_do*while (integer_gt integer_mod)) integer_div integer_gt exec_dup (exec_s_when_autoconstructing () () (boolean_invert_first_then_and) integer_sub boolean_or exec_yankdup exec_dup () exec_do*range () boolean_not) integer_pop boolean_frominteger integer_fromboolean exec_if (exec_y_when_autoconstructing () boolean_swap integer_dec exec_do*range (exec_swap (integer_gt boolean_pop exec_rot (integer_dec exec_do*count (boolean_dup integer_dup_items in4) integer_lte exec_k_when_autoconstructing (in2 integer_min integer_stackdepth) (integer_div print_integer)) (boolean_frominteger integer_dup_times exec_do*count (exec_while (integer_max integer_gt integer_swap boolean_yankdup tag_integer_178 exec_k_when_autoconstructing (exec_eq boolean_dup_items boolean_dup_items) (integer_pop exec_noop boolean_yank) exec_y (integer_fromboolean) boolean_dup_items exec_dup_items) integer_gte integer_swap boolean_pop integer_dup)) ()) ())) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 91
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_178} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_pop (boolean_swap boolean_invert_second_then_and exec_do*while (integer_gt integer_mod)) integer_div integer_gt exec_dup (exec_s_when_autoconstructing () () (boolean_invert_first_then_and) integer_sub boolean_or exec_yankdup exec_dup () exec_do*range () boolean_not) integer_pop boolean_frominteger integer_fromboolean exec_if (exec_y_when_autoconstructing () boolean_swap integer_dec exec_do*range (exec_swap (integer_gt boolean_pop exec_rot (integer_dec exec_do*count (boolean_dup integer_dup_items in4) integer_lte exec_k_when_autoconstructing (in2 integer_min integer_stackdepth) (integer_div print_integer)) (boolean_frominteger integer_dup_times exec_do*count (exec_while (integer_max integer_gt integer_swap boolean_yankdup tag_integer_178 exec_k_when_autoconstructing (exec_eq boolean_dup_items boolean_dup_items) (integer_pop exec_noop boolean_yank) exec_y (integer_fromboolean) boolean_dup_items exec_dup_items) integer_gte integer_swap boolean_pop integer_dup)) ()) ())) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 91
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 109 248 254 432 255 104 104 151 534)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (208 109 248 254 432 255 104 104 151 534)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 2, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_410} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_swap})
Best program: (exec_pop (in1 integer_mod) print_boolean in1 integer_sub integer_dec print_boolean integer_yank exec_s_when_autoconstructing () () (exec_y (exec_eq) exec_dup_items in1 exec_dup () integer_min integer_pop) exec_if (boolean_dup_items exec_shove (integer_mod)) (integer_lt boolean_empty exec_y_when_autoconstructing () integer_dec tagged_410 boolean_dup_items boolean_not) in2 integer_mod integer_lte exec_swap (exec_shove (exec_k_when_autoconstructing () () exec_rot (in3 boolean_stackdepth exec_dup_times (integer_dup_times boolean_dup integer_pop integer_gte in4) integer_lte exec_k_when_autoconstructing (exec_dup () in2 integer_min exec_empty exec_s (integer_swap integer_stackdepth) (integer_div print_integer) () integer_max in1 exec_do*count (exec_y_when_autoconstructing (exec_while (integer_rot integer_mult)) integer_add exec_dup_times (boolean_flush integer_pop boolean_yank) boolean_eq integer_max in1 exec_s () (integer_yankdup in3 integer_flush exec_s (exec_while (exec_yank) integer_swap integer_pop integer_dup exec_while (boolean_flush exec_swap () ())) () ()) ())) ()) () ())) ())
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 82
Size: 122
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 7.601
Median total errors in population: 9
Error averages by case: (0.792 0.891 0.752 0.746 0.568 0.745 0.896 0.896 0.849 0.466)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.066
Average program size in population (points): 96.04
Average percent parens in population: 0.321
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5995619
--- Timings ---
Current time: 1559593754578 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.7 seconds, 47.2%
Fitness Testing:      6.9 seconds, 30.2%
Report:               5.0 seconds, 22.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: 95                 
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 11                 
Correct output: 4                   | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 34                 
Correct output: 1                   | Program output: 21                 
Correct output: 24                  | Program output: 31                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 38                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -41                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: 8                  
Correct output: 0                   | Program output: 36                 
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -4                 
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: 37                 
Correct output: -52                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: 2                  
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -45                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 48                 
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: 18                 
Correct output: -98                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: 22                 
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -15                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -12                
Correct output: -67                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -10                
Correct output: -100                | Program output: -99                
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: -48                
Correct output: -74                 | Program output: 52                 
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -41                
Correct output: -33                 | Program output: 71                 
Correct output: -87                 | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_shove (exec_noop integer_sub boolean_empty boolean_swap exec_do*range () integer_pop) boolean_dup_items exec_eq boolean_flush exec_yank exec_if (exec_do*while (integer_pop exec_yankdup integer_mod)) (integer_lt) integer_shove integer_add exec_while () exec_y_when_autoconstructing () integer_dec exec_dup (exec_s_when_autoconstructing (in3 exec_while (integer_dup_items integer_max in4) integer_lte exec_k_when_autoconstructing (in2 integer_min integer_stackdepth) (integer_div print_integer)) (exec_flush exec_while (boolean_empty integer_max boolean_rot) integer_inc boolean_yank) (in1 exec_s () (exec_s (integer_dup_times integer_dup exec_while (integer_gte integer_sub) integer_dup exec_do*count (integer_swap) integer_gte boolean_flush) () ()) ())))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 80
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_shove (exec_noop integer_sub boolean_empty boolean_swap exec_do*range () integer_pop) boolean_dup_items exec_eq boolean_flush exec_yank exec_if (exec_do*while (integer_pop exec_yankdup integer_mod)) (integer_lt) integer_shove integer_add exec_while () exec_y_when_autoconstructing () integer_dec exec_dup (exec_s_when_autoconstructing (in3 exec_while (integer_dup_items integer_max in4) integer_lte exec_k_when_autoconstructing (in2 integer_min integer_stackdepth) (integer_div print_integer)) (exec_flush exec_while (boolean_empty integer_max boolean_rot) integer_inc boolean_yank) (in1 exec_s () (exec_s (integer_dup_times integer_dup exec_while (integer_gte integer_sub) integer_dup exec_do*count (integer_swap) integer_gte boolean_flush) () ()) ())))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 80
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 67 183 367 248 318 67 188 245 246)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (244 67 183 367 248 318 67 188 245 246)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 1, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 1, :instruction tag_boolean_756} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Best program: (integer_pop exec_pop (exec_noop exec_do*range () boolean_yank integer_min integer_pop) boolean_dup_items exec_eq exec_yank exec_if (integer_dec integer_pop exec_yankdup integer_mod) () exec_empty integer_flush integer_add integer_yankdup integer_dec exec_s_when_autoconstructing (exec_rot (in3 exec_while (integer_dup_items in4) integer_lte in2 integer_min integer_stackdepth) (integer_div print_integer) () exec_do*count (boolean_eq exec_while (integer_inc integer_rot boolean_rot) exec_eq) boolean_or) (integer_inc boolean_yank) (in1 exec_s () (exec_s () (integer_gte) (exec_s (tag_boolean_756) (exec_yankdup in4 exec_while (boolean_eq integer_rot) integer_gte integer_sub) (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_dup boolean_flush) () ()))) ()))
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 59
Size: 86
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 7.827
Median total errors in population: 10
Error averages by case: (0.756 0.933 0.817 0.633 0.752 0.682 0.933 0.812 0.755 0.754)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.291
Average program size in population (points): 96.217
Average percent parens in population: 0.320
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6677212
--- Timings ---
Current time: 1559593756852 milliseconds
Total Time:          25.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.8 seconds, 47.0%
Fitness Testing:      7.4 seconds, 29.6%
Report:               5.8 seconds, 23.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 37                 
Correct output: 51                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: 24                  | Program output: 31                 
Correct output: 7                   | Program output: 62                 
Correct output: 24                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 38                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: 6                  
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: 8                  
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: 17                 
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: 62                 
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 7                  
Correct output: -100                | Program output: -11                
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction 70} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_empty boolean_shove integer_sub print_integer boolean_swap boolean_invert_first_then_and exec_if (exec_shove (exec_if (boolean_pop boolean_dup_items boolean_xor exec_when (boolean_or) exec_yank integer_flush boolean_or) (integer_min exec_do*times (integer_inc in3 integer_empty in4) exec_k_when_autoconstructing (integer_min exec_s (70 integer_dup_times integer_stackdepth) (exec_s (integer_shove boolean_not print_integer) () (integer_inc exec_do*count (in1 exec_k (exec_while (integer_add boolean_yankdup exec_eq boolean_eq integer_empty exec_dup_times (-98 in3 boolean_dup exec_eq) boolean_rot boolean_flush in1 exec_s (exec_while (integer_rot) exec_empty) (integer_swap in4 boolean_pop integer_lte) ())) ()))) ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 84
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction 70} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_empty boolean_shove integer_sub print_integer boolean_swap boolean_invert_first_then_and exec_if (exec_shove (exec_if (boolean_pop boolean_dup_items boolean_xor exec_when (boolean_or) exec_yank integer_flush boolean_or) (integer_min exec_do*times (integer_inc in3 integer_empty in4) exec_k_when_autoconstructing (integer_min exec_s (70 integer_dup_times integer_stackdepth) (exec_s (integer_shove boolean_not print_integer) () (integer_inc exec_do*count (in1 exec_k (exec_while (integer_add boolean_yankdup exec_eq boolean_eq integer_empty exec_dup_times (-98 in3 boolean_dup exec_eq) boolean_rot boolean_flush in1 exec_s (exec_while (integer_rot) exec_empty) (integer_swap in4 boolean_pop integer_lte) ())) ()))) ()) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 84
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 171 176 176 210 209 208 319 172 405)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (202 171 176 176 210 209 208 319 172 405)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove})
Best program: (boolean_empty integer_yankdup integer_sub print_integer boolean_swap boolean_invert_first_then_and exec_if (exec_shove (exec_if (boolean_pop boolean_dup_items exec_when (boolean_or) exec_yank integer_flush exec_do*times (boolean_or) integer_dec integer_min integer_inc exec_shove (in3 in4) integer_min exec_s (integer_dup_times exec_s (integer_stackdepth) (exec_s (integer_shove print_integer) () (integer_inc exec_do*count (in1 exec_k (exec_while (integer_max boolean_yankdup exec_eq boolean_eq integer_empty exec_dup_times (-98 in3 boolean_dup exec_eq) boolean_flush exec_do*times (in1 exec_s (exec_while (exec_do*range (integer_rot) integer_inc) exec_empty) (integer_swap in4 exec_stackdepth boolean_pop integer_lte exec_shove ()) ()))) ()))) ()) () ()) ())) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 61
Size: 91
Percent parens: 0.330
--- Population Statistics ---
Average total errors in population: 7.752
Median total errors in population: 10
Error averages by case: (0.798 0.829 0.824 0.824 0.79 0.791 0.792 0.681 0.828 0.595)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.159
Average program size in population (points): 91.624
Average percent parens in population: 0.308
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.218
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7245167
--- Timings ---
Current time: 1559593759097 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.9 seconds, 47.2%
Fitness Testing:      8.0 seconds, 29.1%
Report:               6.4 seconds, 23.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: 35                 
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 71                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 37                 
Correct output: 51                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: 24                  | Program output: 31                 
Correct output: 7                   | Program output: 62                 
Correct output: 24                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 38                 
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: 6                  
Correct output: -88                 | Program output: -27                
Correct output: -98                 | Program output: -45                
Correct output: -100                | Program output: -94                
Correct output: -14                 | Program output: -14                
Correct output: -49                 | Program output: -37                
Correct output: -49                 | Program output: 8                  
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: -22                
Correct output: -87                 | Program output: -3                 
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -37                
Correct output: -67                 | Program output: -65                
Correct output: -70                 | Program output: -16                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -46                
Correct output: -79                 | Program output: 1                  
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -37                
Correct output: -82                 | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -82                
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -4                 
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: -44                
Correct output: -40                 | Program output: -25                
Correct output: -95                 | Program output: 17                 
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -22                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: 62                 
Correct output: -56                 | Program output: -39                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -97                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 7                  
Correct output: -100                | Program output: -11                
Correct output: -72                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction 58} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_pop (integer_mod) integer_gt boolean_not boolean_flush boolean_yankdup boolean_rot in1 boolean_yank boolean_swap integer_mult boolean_empty boolean_swap exec_do*range () integer_min exec_when (boolean_dup_items exec_eq exec_if (boolean_flush exec_y_when_autoconstructing () 58) (in4 boolean_dup in4) integer_shove integer_lt exec_k_when_autoconstructing (in2 boolean_and integer_min exec_s (print_integer) () (exec_when () exec_while (integer_max boolean_yankdup integer_inc in2) integer_flush exec_eq) exec_do*times (integer_sub integer_inc in1 in1 exec_s (integer_dup) (integer_rot) (integer_dup exec_do*count ()))) ()))
Lexicase best errors: [0 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction 58} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_pop (integer_mod) integer_gt boolean_not boolean_flush boolean_yankdup boolean_rot in1 boolean_yank boolean_swap integer_mult boolean_empty boolean_swap exec_do*range () integer_min exec_when (boolean_dup_items exec_eq exec_if (boolean_flush exec_y_when_autoconstructing () 58) (in4 boolean_dup in4) integer_shove integer_lt exec_k_when_autoconstructing (in2 boolean_and integer_min exec_s (print_integer) () (exec_when () exec_while (integer_max boolean_yankdup integer_inc in2) integer_flush exec_eq) exec_do*times (integer_sub integer_inc in1 in1 exec_s (integer_dup) (integer_rot) (integer_dup exec_do*count ()))) ()))
Zero cases best errors: [0 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (342 5 115 282 296 307 302 4 4 303)
Population mean number of elite cases: 1.96
Count of perfect (error zero) individuals by case: (342 5 115 282 296 307 302 4 4 303)
Population mean number of perfect (error zero) cases: 1.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -98} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline})
Best program: (integer_min boolean_empty exec_when (boolean_shove print_integer boolean_invert_first_then_and integer_dup_items exec_shove (exec_if (boolean_dup_items exec_eq boolean_xor exec_when (exec_yank boolean_or integer_mod)) (integer_flush exec_do*times (boolean_xor integer_rot boolean_or) integer_dec integer_min integer_inc exec_empty exec_shove (in3 integer_empty in4) exec_k_when_autoconstructing (integer_min boolean_invert_second_then_and exec_s (integer_dup_times exec_s (integer_div print_integer) () (boolean_dup_items exec_do*count (boolean_and exec_stackdepth exec_y_when_autoconstructing (exec_while (integer_add boolean_yankdup integer_shove boolean_eq integer_empty exec_dup_times (-98 in3 in3 boolean_dup exec_eq) integer_swap in1 exec_s (exec_while (integer_rot) exec_empty) (integer_swap exec_dup_times (in4 boolean_pop integer_lte print_newline)) ()))))) () ()) ()))))
Errors: [0 1 1 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 91
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 8.04
Median total errors in population: 10
Error averages by case: (0.658 0.995 0.885 0.718 0.704 0.693 0.698 0.996 0.996 0.697)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.377
Average program size in population (points): 89.187
Average percent parens in population: 0.299
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7892255
--- Timings ---
Current time: 1559593761173 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.0 seconds, 47.2%
Fitness Testing:      8.5 seconds, 28.7%
Report:               7.0 seconds, 23.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 81                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 82                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -15                
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 61                 
Correct output: -23                 | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: 43                 
Correct output: -49                 | Program output: 50                 
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -1                 
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 0                  
Correct output: -40                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 20                 
Correct output: -97                 | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 2, :instruction print_integer} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_54} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_pop (integer_gt integer_shove exec_noop boolean_frominteger boolean_empty boolean_flush) integer_sub boolean_swap integer_min integer_min integer_pop boolean_dup_items boolean_not exec_yank integer_pop exec_yank exec_yankdup exec_empty integer_flush integer_rot integer_add print_integer exec_y_when_autoconstructing () integer_eq boolean_shove integer_dec integer_mult exec_rot (in3 boolean_yankdup integer_empty in4) (integer_lte in2 integer_min exec_do*range () print_integer) () integer_div integer_dup exec_do*count (integer_max tag_boolean_54 boolean_rot) exec_eq print_exec (integer_inc exec_k (boolean_yank) (exec_y_when_autoconstructing (integer_mod exec_s () (exec_s (exec_yankdup integer_dec exec_while (exec_shove (integer_rot) integer_yankdup) exec_s_when_autoconstructing (integer_dup boolean_flush) () ()) () ()) ()))))
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 85
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 2, :instruction print_integer} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_54} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_pop (integer_gt integer_shove exec_noop boolean_frominteger boolean_empty boolean_flush) integer_sub boolean_swap integer_min integer_min integer_pop boolean_dup_items boolean_not exec_yank integer_pop exec_yank exec_yankdup exec_empty integer_flush integer_rot integer_add print_integer exec_y_when_autoconstructing () integer_eq boolean_shove integer_dec integer_mult exec_rot (in3 boolean_yankdup integer_empty in4) (integer_lte in2 integer_min exec_do*range () print_integer) () integer_div integer_dup exec_do*count (integer_max tag_boolean_54 boolean_rot) exec_eq print_exec (integer_inc exec_k (boolean_yank) (exec_y_when_autoconstructing (integer_mod exec_s () (exec_s (exec_yankdup integer_dec exec_while (exec_shove (integer_rot) integer_yankdup) exec_s_when_autoconstructing (integer_dup boolean_flush) () ()) () ()) ()))))
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 85
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 208 206 414 432 83 118 204 272 257)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (208 208 206 414 432 83 118 204 272 257)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove})
Best program: (integer_pop exec_y_when_autoconstructing (integer_gt integer_shove) integer_empty boolean_invert_first_then_and exec_yank integer_max boolean_or integer_empty exec_dup () boolean_flush integer_empty integer_max integer_pop exec_rot (boolean_shove) (integer_flush integer_dec exec_rot (exec_yankdup) () (exec_do*range (boolean_or boolean_flush) integer_mult integer_shove exec_if (boolean_dup in4) (in2 integer_min boolean_dup exec_s (exec_s (integer_div print_integer) () (exec_while (exec_while () exec_dup_times (boolean_swap exec_eq) boolean_eq exec_s (boolean_swap) (print_boolean exec_shove (integer_shove exec_if () (boolean_yank) integer_yankdup exec_s (exec_swap (exec_while (integer_rot) boolean_invert_second_then_and integer_swap boolean_yank) (integer_rot boolean_flush integer_yank integer_sub boolean_shove)) () ())) ()))) () ()))) ())
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 62
Size: 95
Percent parens: 0.347
--- Population Statistics ---
Average total errors in population: 7.598
Median total errors in population: 10
Error averages by case: (0.792 0.792 0.794 0.586 0.568 0.917 0.882 0.796 0.728 0.743)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.027
Average program size in population (points): 81.96
Average percent parens in population: 0.303
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8455206
--- Timings ---
Current time: 1559593763114 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.0 seconds, 47.5%
Fitness Testing:      9.0 seconds, 28.5%
Report:               7.5 seconds, 23.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 419
Test mean error for best: 0.41900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 1
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 1
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 81                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 82                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -15                
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 61                 
Correct output: -23                 | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: 43                 
Correct output: -49                 | Program output: 50                 
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -1                 
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 0                  
Correct output: -40                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 20                 
Correct output: -97                 | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction tag_exec_982} {:close 1, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tagged_529} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction -11} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_pop (integer_dup_times exec_stackdepth integer_mod) integer_gt in1 exec_noop exec_s_when_autoconstructing () () (integer_yank) integer_lte integer_pop integer_pop integer_dec exec_s_when_autoconstructing (integer_max exec_yankdup exec_pop (integer_sub)) (tag_exec_982 (exec_do*while () in4) in2 tagged_529 integer_min integer_stackdepth) (exec_s (integer_div print_integer) () (integer_dec exec_while (integer_max integer_inc exec_k_when_autoconstructing (integer_pop boolean_frominteger in1 boolean_shove integer_mult exec_s () (exec_k (boolean_xor exec_s () (exec_dup_items exec_y_when_autoconstructing (exec_do*while (-11 exec_while (integer_rot) integer_sub) exec_if (boolean_invert_second_then_and boolean_flush) ())) ()) ()) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 82
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction tag_exec_982} {:close 1, :instruction exec_do*while} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction tagged_529} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction -11} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_pop (integer_dup_times exec_stackdepth integer_mod) integer_gt in1 exec_noop exec_s_when_autoconstructing () () (integer_yank) integer_lte integer_pop integer_pop integer_dec exec_s_when_autoconstructing (integer_max exec_yankdup exec_pop (integer_sub)) (tag_exec_982 (exec_do*while () in4) in2 tagged_529 integer_min integer_stackdepth) (exec_s (integer_div print_integer) () (integer_dec exec_while (integer_max integer_inc exec_k_when_autoconstructing (integer_pop boolean_frominteger in1 boolean_shove integer_mult exec_s () (exec_k (boolean_xor exec_s () (exec_dup_items exec_y_when_autoconstructing (exec_do*while (-11 exec_while (integer_rot) integer_sub) exec_if (boolean_invert_second_then_and boolean_flush) ())) ()) ()) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 82
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 254 254 427 290 464 282 244 254 272)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (249 254 254 427 290 464 282 244 254 272)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup})
Best program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 43
Size: 62
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 7.01
Median total errors in population: 10
Error averages by case: (0.751 0.746 0.746 0.573 0.71 0.536 0.718 0.756 0.746 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.345
Average program size in population (points): 79.546
Average percent parens in population: 0.290
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9009174
--- Timings ---
Current time: 1559593765039 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.1 seconds, 48.0%
Fitness Testing:      9.5 seconds, 28.3%
Report:               7.9 seconds, 23.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 62


Auto-simplifying with starting size: 62
step: 0
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 500
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 1000
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 1500
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 2000
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 2500
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 3000
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 3500
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 4000
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 4500
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 5000
program: (exec_pop (integer_gt integer_gt integer_empty) boolean_not integer_sub exec_noop boolean_invert_first_then_and boolean_empty exec_dup () exec_do*range () boolean_invert_second_then_and integer_lte exec_s_when_autoconstructing (exec_swap (exec_rot (boolean_dup integer_max in4) (exec_k_when_autoconstructing (in2 integer_min print_integer) () exec_do*count (exec_while (boolean_yankdup integer_eq) integer_inc exec_k_when_autoconstructing (in2) (exec_eq boolean_dup_items) integer_pop integer_pop boolean_yank) boolean_dup_items integer_dec integer_div exec_flush exec_while (boolean_pop print_newline integer_dup)) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 419
Test mean error for best: 0.41900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 1
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 1
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -7                  | Program output: -7                 
Correct output: -31                 | Program output: -31                
Correct output: -49                 | Program output: -49                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -28                 | Program output: -28                
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: 6                   | Program output: 6                  
Correct output: -44                 | Program output: -44                
Correct output: 21                  | Program output: 21                 
Correct output: 82                  | Program output: 82                 
Correct output: -81                 | Program output: -81                
Correct output: 85                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 31                 
Correct output: 10                  | Program output: 10                 
Correct output: 8                   | Program output: 8                  
Correct output: 51                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 81                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 51                 
Correct output: 5                   | Program output: 22                 
Correct output: 21                  | Program output: 82                 
Correct output: 23                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 32                 
Correct output: -64                 | Program output: 5                  
Correct output: -91                 | Program output: -15                
Correct output: -94                 | Program output: -58                
Correct output: -84                 | Program output: 61                 
Correct output: -23                 | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -30                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: 14                 
Correct output: -49                 | Program output: 43                 
Correct output: -49                 | Program output: 50                 
Correct output: 0                   | Program output: 10                 
Correct output: -52                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -68                 | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -2                 
Correct output: -16                 | Program output: -16                
Correct output: -49                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -42                
Correct output: -82                 | Program output: -1                 
Correct output: -47                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -44                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -67                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -90                 | Program output: 0                  
Correct output: -40                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -16                
Correct output: -56                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 20                 
Correct output: -97                 | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -74                 | Program output: 7                  
Correct output: -58                 | Program output: -29                
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 64                 
Correct output: -87                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: 14                 
;;******************************
