Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[52 52 52 40] 40] [[38 76 76 76] 38] [[-92 -17 -17 -17] -92] [[-12 -12 32 -12] -12] [[-80 -80 -11 -80] -80] [[-12 89 89 89] -12] [[-98 -98 41 -98] -98] [[-98 8 -98 -98] -98] [[94 72 94 94] 72] [[61 -76 -76 -76] -76] [(-11 -11 -11 -11) -11] [(2 2 2 2) 2] [(-14 -14 -14 -14) -14] [(26 26 26 26) 26] [(-95 -95 -95 -95) -95] [(18 95 74 52) 18] [(90 38 43 39) 38] [(28 15 28 28) 15] [(10 12 31 60) 10] [(73 17 16 55) 16] [(92 30 39 85) 30] [(24 81 69 54) 24] [(60 73 90 99) 60] [(96 100 39 17) 17] [(44 92 68 60) 44] [(3 21 50 78) 3] [(37 93 28 84) 28] [(37 79 39 9) 9] [(96 2 40 70) 2] [(99 87 70 5) 5] [(70 68 99 0) 0] [(92 31 83 43) 31] [(12 76 67 60) 12] [(87 90 75 26) 26] [(13 64 76 68) 13] [(44 6 -76 -66) -76] [(-66 93 -31 40) -66] [(-86 45 -43 -3) -86] [(-85 -20 -60 44) -85] [(8 -73 50 -30) -73] [(-60 76 -76 -30) -76] [(21 44 -9 9) -9] [(42 10 -25 89) -25] [(-7 -78 -16 -30) -78] [(-17 -8 86 -70) -70] [(-62 29 76 59) -62] [(68 -13 48 -9) -13] [(-24 -8 -29 9) -29] [(96 -7 -19 38) -19] [(69 95 -6 29) -6] [(-90 -77 94 67) -90] [(-62 -39 49 19) -62] [(29 -52 -15 13) -52] [(-91 75 1 -59) -91] [(94 47 -73 -96) -96] [(-10 -54 -27 3) -54] [(-60 -81 -81 47) -81] [(79 88 -35 -95) -95] [(-12 95 0 -17) -17] [(-24 -94 48 -57) -94] [(-99 91 -76 -14) -99] [(1 -36 -39 25) -39] [(3 40 36 87) 3] [(44 83 -52 -96) -96] [(45 88 4 13) 4] [(-29 -25 -65 -82) -82] [(91 -50 -18 -70) -70] [(-49 95 -9 -63) -63] [(-51 49 -58 21) -58] [(-90 44 64 75) -90] [(-68 -71 49 -18) -71] [(23 79 72 -58) -58] [(-95 74 17 93) -95] [(94 -36 -67 -9) -67] [(-62 -14 12 62) -62] [(-8 100 95 96) -8] [(76 75 53 14) 14] [(-75 90 -31 73) -75] [(-100 -37 -84 -65) -100] [(83 6 55 -39) -39] [(74 -11 88 -63) -63] [(-6 -57 -31 6) -57] [(59 -74 80 -91) -91] [(34 33 87 64) 33] [(-43 -3 -21 23) -43] [(89 24 51 4) 4] [(-52 85 -82 -90) -90] [(82 98 -96 -78) -96] [(70 75 21 85) 21] [(90 -39 75 12) -39] [(15 -38 63 38) -38] [(-86 69 9 -97) -97] [(-40 71 -66 47) -66] [(41 -62 -40 -49) -62] [(-20 23 13 -51) -51])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[52 52 52 40] 40]
Train Case:   6 | Input/Output: [[38 76 76 76] 38]
Train Case:   7 | Input/Output: [[-92 -17 -17 -17] -92]
Train Case:   8 | Input/Output: [[-12 -12 32 -12] -12]
Train Case:   9 | Input/Output: [[-80 -80 -11 -80] -80]
Train Case:  10 | Input/Output: [[-12 89 89 89] -12]
Train Case:  11 | Input/Output: [[-98 -98 41 -98] -98]
Train Case:  12 | Input/Output: [[-98 8 -98 -98] -98]
Train Case:  13 | Input/Output: [[94 72 94 94] 72]
Train Case:  14 | Input/Output: [[61 -76 -76 -76] -76]
Train Case:  15 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  16 | Input/Output: [(2 2 2 2) 2]
Train Case:  17 | Input/Output: [(-14 -14 -14 -14) -14]
Train Case:  18 | Input/Output: [(26 26 26 26) 26]
Train Case:  19 | Input/Output: [(-95 -95 -95 -95) -95]
Train Case:  20 | Input/Output: [(18 95 74 52) 18]
Train Case:  21 | Input/Output: [(90 38 43 39) 38]
Train Case:  22 | Input/Output: [(28 15 28 28) 15]
Train Case:  23 | Input/Output: [(10 12 31 60) 10]
Train Case:  24 | Input/Output: [(73 17 16 55) 16]
Train Case:  25 | Input/Output: [(92 30 39 85) 30]
Train Case:  26 | Input/Output: [(24 81 69 54) 24]
Train Case:  27 | Input/Output: [(60 73 90 99) 60]
Train Case:  28 | Input/Output: [(96 100 39 17) 17]
Train Case:  29 | Input/Output: [(44 92 68 60) 44]
Train Case:  30 | Input/Output: [(3 21 50 78) 3]
Train Case:  31 | Input/Output: [(37 93 28 84) 28]
Train Case:  32 | Input/Output: [(37 79 39 9) 9]
Train Case:  33 | Input/Output: [(96 2 40 70) 2]
Train Case:  34 | Input/Output: [(99 87 70 5) 5]
Train Case:  35 | Input/Output: [(70 68 99 0) 0]
Train Case:  36 | Input/Output: [(92 31 83 43) 31]
Train Case:  37 | Input/Output: [(12 76 67 60) 12]
Train Case:  38 | Input/Output: [(87 90 75 26) 26]
Train Case:  39 | Input/Output: [(13 64 76 68) 13]
Train Case:  40 | Input/Output: [(44 6 -76 -66) -76]
Train Case:  41 | Input/Output: [(-66 93 -31 40) -66]
Train Case:  42 | Input/Output: [(-86 45 -43 -3) -86]
Train Case:  43 | Input/Output: [(-85 -20 -60 44) -85]
Train Case:  44 | Input/Output: [(8 -73 50 -30) -73]
Train Case:  45 | Input/Output: [(-60 76 -76 -30) -76]
Train Case:  46 | Input/Output: [(21 44 -9 9) -9]
Train Case:  47 | Input/Output: [(42 10 -25 89) -25]
Train Case:  48 | Input/Output: [(-7 -78 -16 -30) -78]
Train Case:  49 | Input/Output: [(-17 -8 86 -70) -70]
Train Case:  50 | Input/Output: [(-62 29 76 59) -62]
Train Case:  51 | Input/Output: [(68 -13 48 -9) -13]
Train Case:  52 | Input/Output: [(-24 -8 -29 9) -29]
Train Case:  53 | Input/Output: [(96 -7 -19 38) -19]
Train Case:  54 | Input/Output: [(69 95 -6 29) -6]
Train Case:  55 | Input/Output: [(-90 -77 94 67) -90]
Train Case:  56 | Input/Output: [(-62 -39 49 19) -62]
Train Case:  57 | Input/Output: [(29 -52 -15 13) -52]
Train Case:  58 | Input/Output: [(-91 75 1 -59) -91]
Train Case:  59 | Input/Output: [(94 47 -73 -96) -96]
Train Case:  60 | Input/Output: [(-10 -54 -27 3) -54]
Train Case:  61 | Input/Output: [(-60 -81 -81 47) -81]
Train Case:  62 | Input/Output: [(79 88 -35 -95) -95]
Train Case:  63 | Input/Output: [(-12 95 0 -17) -17]
Train Case:  64 | Input/Output: [(-24 -94 48 -57) -94]
Train Case:  65 | Input/Output: [(-99 91 -76 -14) -99]
Train Case:  66 | Input/Output: [(1 -36 -39 25) -39]
Train Case:  67 | Input/Output: [(3 40 36 87) 3]
Train Case:  68 | Input/Output: [(44 83 -52 -96) -96]
Train Case:  69 | Input/Output: [(45 88 4 13) 4]
Train Case:  70 | Input/Output: [(-29 -25 -65 -82) -82]
Train Case:  71 | Input/Output: [(91 -50 -18 -70) -70]
Train Case:  72 | Input/Output: [(-49 95 -9 -63) -63]
Train Case:  73 | Input/Output: [(-51 49 -58 21) -58]
Train Case:  74 | Input/Output: [(-90 44 64 75) -90]
Train Case:  75 | Input/Output: [(-68 -71 49 -18) -71]
Train Case:  76 | Input/Output: [(23 79 72 -58) -58]
Train Case:  77 | Input/Output: [(-95 74 17 93) -95]
Train Case:  78 | Input/Output: [(94 -36 -67 -9) -67]
Train Case:  79 | Input/Output: [(-62 -14 12 62) -62]
Train Case:  80 | Input/Output: [(-8 100 95 96) -8]
Train Case:  81 | Input/Output: [(76 75 53 14) 14]
Train Case:  82 | Input/Output: [(-75 90 -31 73) -75]
Train Case:  83 | Input/Output: [(-100 -37 -84 -65) -100]
Train Case:  84 | Input/Output: [(83 6 55 -39) -39]
Train Case:  85 | Input/Output: [(74 -11 88 -63) -63]
Train Case:  86 | Input/Output: [(-6 -57 -31 6) -57]
Train Case:  87 | Input/Output: [(59 -74 80 -91) -91]
Train Case:  88 | Input/Output: [(34 33 87 64) 33]
Train Case:  89 | Input/Output: [(-43 -3 -21 23) -43]
Train Case:  90 | Input/Output: [(89 24 51 4) 4]
Train Case:  91 | Input/Output: [(-52 85 -82 -90) -90]
Train Case:  92 | Input/Output: [(82 98 -96 -78) -96]
Train Case:  93 | Input/Output: [(70 75 21 85) 21]
Train Case:  94 | Input/Output: [(90 -39 75 12) -39]
Train Case:  95 | Input/Output: [(15 -38 63 38) -38]
Train Case:  96 | Input/Output: [(-86 69 9 -97) -97]
Train Case:  97 | Input/Output: [(-40 71 -66 47) -66]
Train Case:  98 | Input/Output: [(41 -62 -40 -49) -62]
Train Case:  99 | Input/Output: [(-20 23 13 -51) -51]
Test Case:   0 | Input/Output: [[20 20 20 -15] -15]
Test Case:   1 | Input/Output: [[20 -44 20 20] -44]
Test Case:   2 | Input/Output: [[85 43 43 43] 43]
Test Case:   3 | Input/Output: [[16 66 66 66] 16]
Test Case:   4 | Input/Output: [[-24 -24 -13 -24] -24]
Test Case:   5 | Input/Output: [[65 65 96 65] 65]
Test Case:   6 | Input/Output: [[-64 -94 -94 -94] -94]
Test Case:   7 | Input/Output: [[45 45 43 45] 43]
Test Case:   8 | Input/Output: [[94 83 94 94] 83]
Test Case:   9 | Input/Output: [[-28 -28 -28 -75] -75]
Test Case:  10 | Input/Output: [[82 26 26 26] 26]
Test Case:  11 | Input/Output: [[46 96 46 46] 46]
Test Case:  12 | Input/Output: [[-15 -15 -44 -15] -44]
Test Case:  13 | Input/Output: [[59 -59 -59 -59] -59]
Test Case:  14 | Input/Output: [[-71 -71 -71 -86] -86]
Test Case:  15 | Input/Output: [[15 70 70 70] 15]
Test Case:  16 | Input/Output: [[40 70 70 70] 40]
Test Case:  17 | Input/Output: [[70 70 70 -67] -67]
Test Case:  18 | Input/Output: [[30 -84 30 30] -84]
Test Case:  19 | Input/Output: [[21 12 12 12] 12]
Test Case:  20 | Input/Output: [[-93 -93 -47 -93] -93]
Test Case:  21 | Input/Output: [[-94 73 -94 -94] -94]
Test Case:  22 | Input/Output: [[-55 -48 -48 -48] -55]
Test Case:  23 | Input/Output: [[59 59 -2 59] -2]
Test Case:  24 | Input/Output: [[58 8 8 8] 8]
Test Case:  25 | Input/Output: [[-48 -48 39 -48] -48]
Test Case:  26 | Input/Output: [[57 9 57 57] 9]
Test Case:  27 | Input/Output: [[95 95 95 -92] -92]
Test Case:  28 | Input/Output: [[-65 -12 -12 -12] -65]
Test Case:  29 | Input/Output: [[43 43 -53 43] -53]
Test Case:  30 | Input/Output: [[23 36 36 36] 23]
Test Case:  31 | Input/Output: [[-16 -16 -16 20] -16]
Test Case:  32 | Input/Output: [[-84 -84 60 -84] -84]
Test Case:  33 | Input/Output: [[-79 -46 -79 -79] -79]
Test Case:  34 | Input/Output: [[68 -12 68 68] -12]
Test Case:  35 | Input/Output: [[27 27 27 -21] -21]
Test Case:  36 | Input/Output: [[80 36 36 36] 36]
Test Case:  37 | Input/Output: [[19 22 22 22] 19]
Test Case:  38 | Input/Output: [[-78 11 11 11] -78]
Test Case:  39 | Input/Output: [[31 31 31 5] 5]
Test Case:  40 | Input/Output: [[37 -9 -9 -9] -9]
Test Case:  41 | Input/Output: [[-100 -73 -100 -100] -100]
Test Case:  42 | Input/Output: [[-46 -91 -46 -46] -91]
Test Case:  43 | Input/Output: [[47 -56 -56 -56] -56]
Test Case:  44 | Input/Output: [[-9 -9 -40 -9] -40]
Test Case:  45 | Input/Output: [[-100 81 -100 -100] -100]
Test Case:  46 | Input/Output: [[-28 34 34 34] -28]
Test Case:  47 | Input/Output: [[-50 -50 -85 -50] -85]
Test Case:  48 | Input/Output: [[0 0 -59 0] -59]
Test Case:  49 | Input/Output: [[-43 87 -43 -43] -43]
Test Case:  50 | Input/Output: [[-58 40 -58 -58] -58]
Test Case:  51 | Input/Output: [[71 33 33 33] 33]
Test Case:  52 | Input/Output: [[67 67 67 -1] -1]
Test Case:  53 | Input/Output: [[31 31 -21 31] -21]
Test Case:  54 | Input/Output: [[-37 -37 -37 -19] -37]
Test Case:  55 | Input/Output: [[18 26 18 18] 18]
Test Case:  56 | Input/Output: [[7 8 7 7] 7]
Test Case:  57 | Input/Output: [[27 27 27 29] 27]
Test Case:  58 | Input/Output: [[-95 55 -95 -95] -95]
Test Case:  59 | Input/Output: [[53 -100 53 53] -100]
Test Case:  60 | Input/Output: [[84 -48 84 84] -48]
Test Case:  61 | Input/Output: [[-50 69 -50 -50] -50]
Test Case:  62 | Input/Output: [[37 -92 37 37] -92]
Test Case:  63 | Input/Output: [[9 9 9 6] 6]
Test Case:  64 | Input/Output: [[-64 -36 -36 -36] -64]
Test Case:  65 | Input/Output: [[77 87 77 77] 77]
Test Case:  66 | Input/Output: [[44 -87 -87 -87] -87]
Test Case:  67 | Input/Output: [[75 75 75 -57] -57]
Test Case:  68 | Input/Output: [[28 -28 28 28] -28]
Test Case:  69 | Input/Output: [[62 -66 -66 -66] -66]
Test Case:  70 | Input/Output: [[-37 -35 -35 -35] -37]
Test Case:  71 | Input/Output: [[95 95 -87 95] -87]
Test Case:  72 | Input/Output: [[-74 -72 -74 -74] -74]
Test Case:  73 | Input/Output: [[-19 -15 -15 -15] -19]
Test Case:  74 | Input/Output: [[-75 -75 -75 7] -75]
Test Case:  75 | Input/Output: [[92 92 -43 92] -43]
Test Case:  76 | Input/Output: [[-40 -68 -40 -40] -68]
Test Case:  77 | Input/Output: [[-58 -58 76 -58] -58]
Test Case:  78 | Input/Output: [[35 35 35 75] 35]
Test Case:  79 | Input/Output: [[67 67 -46 67] -46]
Test Case:  80 | Input/Output: [[-77 -77 58 -77] -77]
Test Case:  81 | Input/Output: [[46 -82 46 46] -82]
Test Case:  82 | Input/Output: [[-74 48 48 48] -74]
Test Case:  83 | Input/Output: [[65 65 65 81] 65]
Test Case:  84 | Input/Output: [[-6 -62 -62 -62] -62]
Test Case:  85 | Input/Output: [[63 -84 63 63] -84]
Test Case:  86 | Input/Output: [[54 54 54 89] 54]
Test Case:  87 | Input/Output: [[18 2 18 18] 2]
Test Case:  88 | Input/Output: [[-35 -35 -28 -35] -35]
Test Case:  89 | Input/Output: [[-52 -52 -100 -52] -100]
Test Case:  90 | Input/Output: [[-75 68 -75 -75] -75]
Test Case:  91 | Input/Output: [[-35 -35 -35 -61] -61]
Test Case:  92 | Input/Output: [[-67 -50 -67 -67] -67]
Test Case:  93 | Input/Output: [[-17 -63 -17 -17] -63]
Test Case:  94 | Input/Output: [[-35 -72 -72 -72] -72]
Test Case:  95 | Input/Output: [[97 -79 97 97] -79]
Test Case:  96 | Input/Output: [[85 74 85 85] 74]
Test Case:  97 | Input/Output: [[70 43 70 70] 43]
Test Case:  98 | Input/Output: [[36 36 41 36] 36]
Test Case:  99 | Input/Output: [[-3 67 67 67] -3]
Test Case: 100 | Input/Output: [(92 92 92 92) 92]
Test Case: 101 | Input/Output: [(57 57 57 57) 57]
Test Case: 102 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 103 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 104 | Input/Output: [(37 37 37 37) 37]
Test Case: 105 | Input/Output: [(43 43 43 43) 43]
Test Case: 106 | Input/Output: [(94 94 94 94) 94]
Test Case: 107 | Input/Output: [(13 13 13 13) 13]
Test Case: 108 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 109 | Input/Output: [(97 97 97 97) 97]
Test Case: 110 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 111 | Input/Output: [(35 35 35 35) 35]
Test Case: 112 | Input/Output: [(66 66 66 66) 66]
Test Case: 113 | Input/Output: [(50 50 50 50) 50]
Test Case: 114 | Input/Output: [(45 45 45 45) 45]
Test Case: 115 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 116 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 117 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 118 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 119 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 120 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 121 | Input/Output: [(27 27 27 27) 27]
Test Case: 122 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 123 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 124 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 125 | Input/Output: [(40 40 40 40) 40]
Test Case: 126 | Input/Output: [(52 52 52 52) 52]
Test Case: 127 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 128 | Input/Output: [(59 59 59 59) 59]
Test Case: 129 | Input/Output: [(8 8 8 8) 8]
Test Case: 130 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 131 | Input/Output: [(33 33 33 33) 33]
Test Case: 132 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 133 | Input/Output: [(12 12 12 12) 12]
Test Case: 134 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 135 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 136 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 137 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 138 | Input/Output: [(100 100 100 100) 100]
Test Case: 139 | Input/Output: [(6 6 6 6) 6]
Test Case: 140 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 141 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 142 | Input/Output: [(59 59 59 59) 59]
Test Case: 143 | Input/Output: [(83 83 83 83) 83]
Test Case: 144 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 145 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 146 | Input/Output: [(59 59 59 59) 59]
Test Case: 147 | Input/Output: [(72 72 72 72) 72]
Test Case: 148 | Input/Output: [(66 66 66 66) 66]
Test Case: 149 | Input/Output: [(9 9 9 9) 9]
Test Case: 150 | Input/Output: [(40 40 40 40) 40]
Test Case: 151 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 152 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 153 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 154 | Input/Output: [(31 31 31 31) 31]
Test Case: 155 | Input/Output: [(82 82 82 82) 82]
Test Case: 156 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 157 | Input/Output: [(77 77 77 77) 77]
Test Case: 158 | Input/Output: [(88 88 88 88) 88]
Test Case: 159 | Input/Output: [(62 62 62 62) 62]
Test Case: 160 | Input/Output: [(35 35 35 35) 35]
Test Case: 161 | Input/Output: [(59 59 59 59) 59]
Test Case: 162 | Input/Output: [(14 14 14 14) 14]
Test Case: 163 | Input/Output: [(73 73 73 73) 73]
Test Case: 164 | Input/Output: [(55 55 55 55) 55]
Test Case: 165 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 166 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 167 | Input/Output: [(8 8 8 8) 8]
Test Case: 168 | Input/Output: [(50 50 50 50) 50]
Test Case: 169 | Input/Output: [(91 91 91 91) 91]
Test Case: 170 | Input/Output: [(93 93 93 93) 93]
Test Case: 171 | Input/Output: [(11 11 11 11) 11]
Test Case: 172 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 173 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 174 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 175 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 176 | Input/Output: [(30 30 30 30) 30]
Test Case: 177 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 178 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 179 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 180 | Input/Output: [(75 75 75 75) 75]
Test Case: 181 | Input/Output: [(20 20 20 20) 20]
Test Case: 182 | Input/Output: [(14 14 14 14) 14]
Test Case: 183 | Input/Output: [(75 75 75 75) 75]
Test Case: 184 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 185 | Input/Output: [(39 39 39 39) 39]
Test Case: 186 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 187 | Input/Output: [(59 59 59 59) 59]
Test Case: 188 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 189 | Input/Output: [(13 13 13 13) 13]
Test Case: 190 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 191 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 192 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 193 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 194 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 195 | Input/Output: [(53 53 53 53) 53]
Test Case: 196 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 197 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 198 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 199 | Input/Output: [(44 44 44 44) 44]
Test Case: 200 | Input/Output: [(75 58 50 47) 47]
Test Case: 201 | Input/Output: [(19 15 73 86) 15]
Test Case: 202 | Input/Output: [(10 92 12 6) 6]
Test Case: 203 | Input/Output: [(82 98 44 87) 44]
Test Case: 204 | Input/Output: [(54 45 48 53) 45]
Test Case: 205 | Input/Output: [(9 60 75 89) 9]
Test Case: 206 | Input/Output: [(13 68 43 35) 13]
Test Case: 207 | Input/Output: [(11 86 20 77) 11]
Test Case: 208 | Input/Output: [(97 71 65 75) 65]
Test Case: 209 | Input/Output: [(6 75 92 85) 6]
Test Case: 210 | Input/Output: [(33 81 44 20) 20]
Test Case: 211 | Input/Output: [(75 10 0 66) 0]
Test Case: 212 | Input/Output: [(21 23 97 85) 21]
Test Case: 213 | Input/Output: [(48 54 36 99) 36]
Test Case: 214 | Input/Output: [(21 41 66 12) 12]
Test Case: 215 | Input/Output: [(12 97 23 18) 12]
Test Case: 216 | Input/Output: [(11 36 13 53) 11]
Test Case: 217 | Input/Output: [(100 59 52 32) 32]
Test Case: 218 | Input/Output: [(55 88 57 88) 55]
Test Case: 219 | Input/Output: [(40 97 96 45) 40]
Test Case: 220 | Input/Output: [(63 26 77 40) 26]
Test Case: 221 | Input/Output: [(26 32 86 51) 26]
Test Case: 222 | Input/Output: [(19 100 49 50) 19]
Test Case: 223 | Input/Output: [(100 4 78 0) 0]
Test Case: 224 | Input/Output: [(7 72 68 82) 7]
Test Case: 225 | Input/Output: [(83 23 2 46) 2]
Test Case: 226 | Input/Output: [(88 25 17 27) 17]
Test Case: 227 | Input/Output: [(7 24 43 28) 7]
Test Case: 228 | Input/Output: [(22 93 21 26) 21]
Test Case: 229 | Input/Output: [(97 12 72 90) 12]
Test Case: 230 | Input/Output: [(88 70 13 82) 13]
Test Case: 231 | Input/Output: [(56 16 74 14) 14]
Test Case: 232 | Input/Output: [(81 13 5 23) 5]
Test Case: 233 | Input/Output: [(48 54 70 46) 46]
Test Case: 234 | Input/Output: [(35 61 12 67) 12]
Test Case: 235 | Input/Output: [(69 12 89 91) 12]
Test Case: 236 | Input/Output: [(80 1 83 38) 1]
Test Case: 237 | Input/Output: [(19 53 51 8) 8]
Test Case: 238 | Input/Output: [(15 33 67 37) 15]
Test Case: 239 | Input/Output: [(38 61 47 94) 38]
Test Case: 240 | Input/Output: [(13 52 77 84) 13]
Test Case: 241 | Input/Output: [(62 4 97 87) 4]
Test Case: 242 | Input/Output: [(90 79 11 49) 11]
Test Case: 243 | Input/Output: [(13 14 42 29) 13]
Test Case: 244 | Input/Output: [(13 25 38 28) 13]
Test Case: 245 | Input/Output: [(26 51 70 77) 26]
Test Case: 246 | Input/Output: [(34 12 91 11) 11]
Test Case: 247 | Input/Output: [(9 98 4 21) 4]
Test Case: 248 | Input/Output: [(85 51 17 89) 17]
Test Case: 249 | Input/Output: [(58 16 100 48) 16]
Test Case: 250 | Input/Output: [(53 4 78 12) 4]
Test Case: 251 | Input/Output: [(46 24 2 50) 2]
Test Case: 252 | Input/Output: [(92 51 67 4) 4]
Test Case: 253 | Input/Output: [(14 87 30 67) 14]
Test Case: 254 | Input/Output: [(32 65 79 61) 32]
Test Case: 255 | Input/Output: [(47 88 21 37) 21]
Test Case: 256 | Input/Output: [(30 86 60 27) 27]
Test Case: 257 | Input/Output: [(33 19 20 12) 12]
Test Case: 258 | Input/Output: [(63 67 80 81) 63]
Test Case: 259 | Input/Output: [(75 84 66 2) 2]
Test Case: 260 | Input/Output: [(67 90 34 59) 34]
Test Case: 261 | Input/Output: [(28 90 86 90) 28]
Test Case: 262 | Input/Output: [(84 16 64 2) 2]
Test Case: 263 | Input/Output: [(21 16 32 27) 16]
Test Case: 264 | Input/Output: [(25 8 37 45) 8]
Test Case: 265 | Input/Output: [(79 84 35 66) 35]
Test Case: 266 | Input/Output: [(54 16 84 56) 16]
Test Case: 267 | Input/Output: [(60 41 74 55) 41]
Test Case: 268 | Input/Output: [(65 99 84 71) 65]
Test Case: 269 | Input/Output: [(34 89 2 41) 2]
Test Case: 270 | Input/Output: [(27 54 54 19) 19]
Test Case: 271 | Input/Output: [(50 9 15 100) 9]
Test Case: 272 | Input/Output: [(69 77 78 59) 59]
Test Case: 273 | Input/Output: [(2 92 92 58) 2]
Test Case: 274 | Input/Output: [(97 100 46 26) 26]
Test Case: 275 | Input/Output: [(17 80 8 15) 8]
Test Case: 276 | Input/Output: [(49 94 2 45) 2]
Test Case: 277 | Input/Output: [(15 38 71 17) 15]
Test Case: 278 | Input/Output: [(4 90 66 19) 4]
Test Case: 279 | Input/Output: [(59 54 62 48) 48]
Test Case: 280 | Input/Output: [(31 92 28 88) 28]
Test Case: 281 | Input/Output: [(2 57 24 22) 2]
Test Case: 282 | Input/Output: [(87 17 62 51) 17]
Test Case: 283 | Input/Output: [(87 10 74 22) 10]
Test Case: 284 | Input/Output: [(16 39 39 74) 16]
Test Case: 285 | Input/Output: [(51 24 64 30) 24]
Test Case: 286 | Input/Output: [(68 40 73 0) 0]
Test Case: 287 | Input/Output: [(85 67 74 41) 41]
Test Case: 288 | Input/Output: [(9 39 24 15) 9]
Test Case: 289 | Input/Output: [(28 29 40 16) 16]
Test Case: 290 | Input/Output: [(40 6 64 39) 6]
Test Case: 291 | Input/Output: [(71 86 29 87) 29]
Test Case: 292 | Input/Output: [(13 26 68 20) 13]
Test Case: 293 | Input/Output: [(5 53 76 80) 5]
Test Case: 294 | Input/Output: [(31 21 47 74) 21]
Test Case: 295 | Input/Output: [(0 20 4 67) 0]
Test Case: 296 | Input/Output: [(17 42 91 47) 17]
Test Case: 297 | Input/Output: [(48 84 69 90) 48]
Test Case: 298 | Input/Output: [(28 80 72 68) 28]
Test Case: 299 | Input/Output: [(29 57 31 39) 29]
Test Case: 300 | Input/Output: [(12 24 73 21) 12]
Test Case: 301 | Input/Output: [(2 17 8 50) 2]
Test Case: 302 | Input/Output: [(66 60 62 22) 22]
Test Case: 303 | Input/Output: [(54 70 55 93) 54]
Test Case: 304 | Input/Output: [(77 53 95 88) 53]
Test Case: 305 | Input/Output: [(47 68 62 47) 47]
Test Case: 306 | Input/Output: [(28 40 22 60) 22]
Test Case: 307 | Input/Output: [(95 10 20 40) 10]
Test Case: 308 | Input/Output: [(11 84 18 65) 11]
Test Case: 309 | Input/Output: [(28 42 0 84) 0]
Test Case: 310 | Input/Output: [(33 30 91 49) 30]
Test Case: 311 | Input/Output: [(24 5 95 29) 5]
Test Case: 312 | Input/Output: [(78 55 84 32) 32]
Test Case: 313 | Input/Output: [(64 66 50 53) 50]
Test Case: 314 | Input/Output: [(22 48 35 59) 22]
Test Case: 315 | Input/Output: [(52 99 62 59) 52]
Test Case: 316 | Input/Output: [(19 71 13 87) 13]
Test Case: 317 | Input/Output: [(16 28 4 52) 4]
Test Case: 318 | Input/Output: [(14 76 47 82) 14]
Test Case: 319 | Input/Output: [(33 24 39 29) 24]
Test Case: 320 | Input/Output: [(6 39 31 57) 6]
Test Case: 321 | Input/Output: [(15 87 32 47) 15]
Test Case: 322 | Input/Output: [(45 38 81 63) 38]
Test Case: 323 | Input/Output: [(36 75 75 100) 36]
Test Case: 324 | Input/Output: [(84 86 94 46) 46]
Test Case: 325 | Input/Output: [(75 66 67 25) 25]
Test Case: 326 | Input/Output: [(85 47 85 52) 47]
Test Case: 327 | Input/Output: [(36 66 95 71) 36]
Test Case: 328 | Input/Output: [(99 95 47 75) 47]
Test Case: 329 | Input/Output: [(57 48 38 63) 38]
Test Case: 330 | Input/Output: [(56 48 13 18) 13]
Test Case: 331 | Input/Output: [(38 65 41 58) 38]
Test Case: 332 | Input/Output: [(22 86 37 55) 22]
Test Case: 333 | Input/Output: [(58 32 35 77) 32]
Test Case: 334 | Input/Output: [(9 61 25 50) 9]
Test Case: 335 | Input/Output: [(20 25 46 92) 20]
Test Case: 336 | Input/Output: [(49 28 96 33) 28]
Test Case: 337 | Input/Output: [(61 21 81 51) 21]
Test Case: 338 | Input/Output: [(93 91 40 14) 14]
Test Case: 339 | Input/Output: [(93 58 33 92) 33]
Test Case: 340 | Input/Output: [(77 5 2 33) 2]
Test Case: 341 | Input/Output: [(29 42 31 26) 26]
Test Case: 342 | Input/Output: [(49 81 4 41) 4]
Test Case: 343 | Input/Output: [(15 25 80 17) 15]
Test Case: 344 | Input/Output: [(9 79 99 64) 9]
Test Case: 345 | Input/Output: [(100 71 84 9) 9]
Test Case: 346 | Input/Output: [(27 41 84 29) 27]
Test Case: 347 | Input/Output: [(0 77 85 19) 0]
Test Case: 348 | Input/Output: [(85 95 23 45) 23]
Test Case: 349 | Input/Output: [(16 64 77 28) 16]
Test Case: 350 | Input/Output: [(22 35 96 7) 7]
Test Case: 351 | Input/Output: [(88 95 86 7) 7]
Test Case: 352 | Input/Output: [(76 41 51 63) 41]
Test Case: 353 | Input/Output: [(68 3 16 65) 3]
Test Case: 354 | Input/Output: [(46 99 3 1) 1]
Test Case: 355 | Input/Output: [(33 21 82 75) 21]
Test Case: 356 | Input/Output: [(51 53 65 18) 18]
Test Case: 357 | Input/Output: [(23 88 23 24) 23]
Test Case: 358 | Input/Output: [(44 56 17 52) 17]
Test Case: 359 | Input/Output: [(95 73 31 39) 31]
Test Case: 360 | Input/Output: [(46 85 2 21) 2]
Test Case: 361 | Input/Output: [(2 94 65 61) 2]
Test Case: 362 | Input/Output: [(55 62 22 6) 6]
Test Case: 363 | Input/Output: [(81 7 37 72) 7]
Test Case: 364 | Input/Output: [(29 86 44 11) 11]
Test Case: 365 | Input/Output: [(55 57 86 8) 8]
Test Case: 366 | Input/Output: [(82 90 96 43) 43]
Test Case: 367 | Input/Output: [(55 79 23 70) 23]
Test Case: 368 | Input/Output: [(68 54 78 81) 54]
Test Case: 369 | Input/Output: [(10 70 32 86) 10]
Test Case: 370 | Input/Output: [(52 70 98 69) 52]
Test Case: 371 | Input/Output: [(74 52 85 93) 52]
Test Case: 372 | Input/Output: [(51 81 1 80) 1]
Test Case: 373 | Input/Output: [(18 100 82 27) 18]
Test Case: 374 | Input/Output: [(28 36 41 67) 28]
Test Case: 375 | Input/Output: [(92 33 26 8) 8]
Test Case: 376 | Input/Output: [(34 46 69 71) 34]
Test Case: 377 | Input/Output: [(81 27 51 20) 20]
Test Case: 378 | Input/Output: [(72 55 71 81) 55]
Test Case: 379 | Input/Output: [(85 4 74 60) 4]
Test Case: 380 | Input/Output: [(1 28 44 30) 1]
Test Case: 381 | Input/Output: [(19 83 97 50) 19]
Test Case: 382 | Input/Output: [(73 66 32 44) 32]
Test Case: 383 | Input/Output: [(58 51 49 24) 24]
Test Case: 384 | Input/Output: [(15 86 27 19) 15]
Test Case: 385 | Input/Output: [(43 29 4 47) 4]
Test Case: 386 | Input/Output: [(24 15 32 19) 15]
Test Case: 387 | Input/Output: [(12 78 12 92) 12]
Test Case: 388 | Input/Output: [(52 8 54 47) 8]
Test Case: 389 | Input/Output: [(71 19 44 55) 19]
Test Case: 390 | Input/Output: [(94 75 6 47) 6]
Test Case: 391 | Input/Output: [(91 59 83 68) 59]
Test Case: 392 | Input/Output: [(44 57 73 36) 36]
Test Case: 393 | Input/Output: [(84 36 62 92) 36]
Test Case: 394 | Input/Output: [(6 18 17 88) 6]
Test Case: 395 | Input/Output: [(24 10 94 100) 10]
Test Case: 396 | Input/Output: [(71 78 11 79) 11]
Test Case: 397 | Input/Output: [(75 69 79 71) 69]
Test Case: 398 | Input/Output: [(100 32 19 56) 19]
Test Case: 399 | Input/Output: [(80 79 59 52) 52]
Test Case: 400 | Input/Output: [(40 -63 69 -32) -63]
Test Case: 401 | Input/Output: [(-48 -14 -81 64) -81]
Test Case: 402 | Input/Output: [(65 -31 34 -80) -80]
Test Case: 403 | Input/Output: [(-87 60 -1 -51) -87]
Test Case: 404 | Input/Output: [(59 6 -55 -90) -90]
Test Case: 405 | Input/Output: [(63 -91 57 -35) -91]
Test Case: 406 | Input/Output: [(55 -68 -12 -65) -68]
Test Case: 407 | Input/Output: [(75 -77 33 80) -77]
Test Case: 408 | Input/Output: [(48 -25 79 37) -25]
Test Case: 409 | Input/Output: [(-67 -20 -66 60) -67]
Test Case: 410 | Input/Output: [(54 48 96 -21) -21]
Test Case: 411 | Input/Output: [(-90 -68 -43 80) -90]
Test Case: 412 | Input/Output: [(61 -70 -66 -54) -70]
Test Case: 413 | Input/Output: [(-68 29 -3 -79) -79]
Test Case: 414 | Input/Output: [(-82 -59 10 24) -82]
Test Case: 415 | Input/Output: [(62 -65 34 97) -65]
Test Case: 416 | Input/Output: [(-79 80 73 59) -79]
Test Case: 417 | Input/Output: [(25 24 -86 17) -86]
Test Case: 418 | Input/Output: [(-74 40 -40 -58) -74]
Test Case: 419 | Input/Output: [(-34 90 -49 87) -49]
Test Case: 420 | Input/Output: [(81 70 -78 -23) -78]
Test Case: 421 | Input/Output: [(-100 51 80 -77) -100]
Test Case: 422 | Input/Output: [(-26 52 67 80) -26]
Test Case: 423 | Input/Output: [(-75 -71 46 81) -75]
Test Case: 424 | Input/Output: [(-54 4 31 -7) -54]
Test Case: 425 | Input/Output: [(89 54 -46 -54) -54]
Test Case: 426 | Input/Output: [(92 -44 -66 -66) -66]
Test Case: 427 | Input/Output: [(-60 6 -14 -64) -64]
Test Case: 428 | Input/Output: [(-1 73 93 22) -1]
Test Case: 429 | Input/Output: [(85 49 -52 34) -52]
Test Case: 430 | Input/Output: [(-22 55 -40 -59) -59]
Test Case: 431 | Input/Output: [(10 -65 -51 46) -65]
Test Case: 432 | Input/Output: [(-69 55 29 22) -69]
Test Case: 433 | Input/Output: [(-65 83 -3 76) -65]
Test Case: 434 | Input/Output: [(84 -2 -28 11) -28]
Test Case: 435 | Input/Output: [(-36 22 54 95) -36]
Test Case: 436 | Input/Output: [(46 22 7 -32) -32]
Test Case: 437 | Input/Output: [(41 70 -17 -17) -17]
Test Case: 438 | Input/Output: [(-44 -7 -47 16) -47]
Test Case: 439 | Input/Output: [(-78 -92 64 74) -92]
Test Case: 440 | Input/Output: [(48 98 -66 -19) -66]
Test Case: 441 | Input/Output: [(-62 -95 -59 -40) -95]
Test Case: 442 | Input/Output: [(100 -16 27 -51) -51]
Test Case: 443 | Input/Output: [(97 62 80 99) 62]
Test Case: 444 | Input/Output: [(-98 44 13 -19) -98]
Test Case: 445 | Input/Output: [(-36 40 30 62) -36]
Test Case: 446 | Input/Output: [(-30 -79 -21 12) -79]
Test Case: 447 | Input/Output: [(13 -59 -4 -40) -59]
Test Case: 448 | Input/Output: [(60 -91 -94 61) -94]
Test Case: 449 | Input/Output: [(-36 31 -15 92) -36]
Test Case: 450 | Input/Output: [(-60 85 4 49) -60]
Test Case: 451 | Input/Output: [(-76 51 59 -57) -76]
Test Case: 452 | Input/Output: [(57 4 -99 -37) -99]
Test Case: 453 | Input/Output: [(46 43 67 78) 43]
Test Case: 454 | Input/Output: [(-56 -38 36 69) -56]
Test Case: 455 | Input/Output: [(-1 91 66 -67) -67]
Test Case: 456 | Input/Output: [(-87 -64 100 77) -87]
Test Case: 457 | Input/Output: [(-9 -34 22 -47) -47]
Test Case: 458 | Input/Output: [(51 90 -46 -30) -46]
Test Case: 459 | Input/Output: [(58 -94 40 25) -94]
Test Case: 460 | Input/Output: [(41 71 56 0) 0]
Test Case: 461 | Input/Output: [(77 68 29 96) 29]
Test Case: 462 | Input/Output: [(6 33 79 31) 6]
Test Case: 463 | Input/Output: [(-28 -98 -94 -19) -98]
Test Case: 464 | Input/Output: [(-51 -20 66 -71) -71]
Test Case: 465 | Input/Output: [(-98 50 68 87) -98]
Test Case: 466 | Input/Output: [(-35 10 -78 23) -78]
Test Case: 467 | Input/Output: [(84 91 -80 76) -80]
Test Case: 468 | Input/Output: [(-61 21 -26 100) -61]
Test Case: 469 | Input/Output: [(25 1 60 -40) -40]
Test Case: 470 | Input/Output: [(27 17 74 7) 7]
Test Case: 471 | Input/Output: [(-58 20 43 63) -58]
Test Case: 472 | Input/Output: [(100 -98 57 30) -98]
Test Case: 473 | Input/Output: [(-36 88 48 70) -36]
Test Case: 474 | Input/Output: [(-17 -42 -24 43) -42]
Test Case: 475 | Input/Output: [(-82 -42 10 14) -82]
Test Case: 476 | Input/Output: [(-64 12 18 80) -64]
Test Case: 477 | Input/Output: [(-21 84 69 -72) -72]
Test Case: 478 | Input/Output: [(-93 -29 -59 57) -93]
Test Case: 479 | Input/Output: [(-4 76 5 -60) -60]
Test Case: 480 | Input/Output: [(-97 -81 92 -41) -97]
Test Case: 481 | Input/Output: [(-47 86 97 49) -47]
Test Case: 482 | Input/Output: [(43 10 6 -55) -55]
Test Case: 483 | Input/Output: [(-54 -66 96 76) -66]
Test Case: 484 | Input/Output: [(24 75 -11 40) -11]
Test Case: 485 | Input/Output: [(-46 56 -82 -7) -82]
Test Case: 486 | Input/Output: [(1 37 31 39) 1]
Test Case: 487 | Input/Output: [(-17 -18 -94 45) -94]
Test Case: 488 | Input/Output: [(78 -73 -18 -80) -80]
Test Case: 489 | Input/Output: [(70 -85 76 -28) -85]
Test Case: 490 | Input/Output: [(-97 -26 -89 -47) -97]
Test Case: 491 | Input/Output: [(58 32 -43 41) -43]
Test Case: 492 | Input/Output: [(-49 -87 -64 46) -87]
Test Case: 493 | Input/Output: [(-95 16 67 -79) -95]
Test Case: 494 | Input/Output: [(23 85 85 -5) -5]
Test Case: 495 | Input/Output: [(94 38 45 33) 33]
Test Case: 496 | Input/Output: [(-21 42 70 -16) -21]
Test Case: 497 | Input/Output: [(71 58 38 -29) -29]
Test Case: 498 | Input/Output: [(16 -86 55 -28) -86]
Test Case: 499 | Input/Output: [(96 -9 73 23) -9]
Test Case: 500 | Input/Output: [(44 -63 39 31) -63]
Test Case: 501 | Input/Output: [(95 23 36 -85) -85]
Test Case: 502 | Input/Output: [(-21 67 11 -1) -21]
Test Case: 503 | Input/Output: [(10 -55 20 -88) -88]
Test Case: 504 | Input/Output: [(63 34 -82 83) -82]
Test Case: 505 | Input/Output: [(-12 19 99 100) -12]
Test Case: 506 | Input/Output: [(-66 -48 -69 -9) -69]
Test Case: 507 | Input/Output: [(-49 -53 15 56) -53]
Test Case: 508 | Input/Output: [(-93 -30 -64 97) -93]
Test Case: 509 | Input/Output: [(0 56 -73 41) -73]
Test Case: 510 | Input/Output: [(-25 89 56 -54) -54]
Test Case: 511 | Input/Output: [(78 85 -66 -82) -82]
Test Case: 512 | Input/Output: [(59 -30 63 81) -30]
Test Case: 513 | Input/Output: [(-24 4 51 10) -24]
Test Case: 514 | Input/Output: [(-16 58 -18 38) -18]
Test Case: 515 | Input/Output: [(-36 -2 98 -91) -91]
Test Case: 516 | Input/Output: [(54 -52 42 -98) -98]
Test Case: 517 | Input/Output: [(-38 -91 39 61) -91]
Test Case: 518 | Input/Output: [(-55 -67 29 7) -67]
Test Case: 519 | Input/Output: [(-75 14 87 81) -75]
Test Case: 520 | Input/Output: [(-51 -44 -96 70) -96]
Test Case: 521 | Input/Output: [(20 -25 -39 81) -39]
Test Case: 522 | Input/Output: [(31 -85 -100 58) -100]
Test Case: 523 | Input/Output: [(65 74 -71 -54) -71]
Test Case: 524 | Input/Output: [(-36 5 -62 70) -62]
Test Case: 525 | Input/Output: [(36 -28 -34 -92) -92]
Test Case: 526 | Input/Output: [(44 -31 55 -54) -54]
Test Case: 527 | Input/Output: [(-2 55 0 77) -2]
Test Case: 528 | Input/Output: [(20 -33 77 -71) -71]
Test Case: 529 | Input/Output: [(-28 48 -28 -41) -41]
Test Case: 530 | Input/Output: [(94 40 89 55) 40]
Test Case: 531 | Input/Output: [(92 44 -28 -58) -58]
Test Case: 532 | Input/Output: [(-84 3 88 14) -84]
Test Case: 533 | Input/Output: [(36 34 -65 -18) -65]
Test Case: 534 | Input/Output: [(7 -31 -42 64) -42]
Test Case: 535 | Input/Output: [(67 -43 97 83) -43]
Test Case: 536 | Input/Output: [(-54 -95 100 -64) -95]
Test Case: 537 | Input/Output: [(60 95 18 30) 18]
Test Case: 538 | Input/Output: [(-100 63 -84 -64) -100]
Test Case: 539 | Input/Output: [(-32 67 29 -68) -68]
Test Case: 540 | Input/Output: [(99 -85 78 -4) -85]
Test Case: 541 | Input/Output: [(15 23 45 84) 15]
Test Case: 542 | Input/Output: [(-76 -16 71 -30) -76]
Test Case: 543 | Input/Output: [(16 -86 -89 13) -89]
Test Case: 544 | Input/Output: [(-45 -12 55 -21) -45]
Test Case: 545 | Input/Output: [(-94 12 -74 -97) -97]
Test Case: 546 | Input/Output: [(-99 -47 8 17) -99]
Test Case: 547 | Input/Output: [(17 17 62 47) 17]
Test Case: 548 | Input/Output: [(-37 0 38 -86) -86]
Test Case: 549 | Input/Output: [(-2 58 -4 -55) -55]
Test Case: 550 | Input/Output: [(-70 -90 53 7) -90]
Test Case: 551 | Input/Output: [(36 13 7 0) 0]
Test Case: 552 | Input/Output: [(28 73 -7 69) -7]
Test Case: 553 | Input/Output: [(-82 -86 14 34) -86]
Test Case: 554 | Input/Output: [(31 91 -73 75) -73]
Test Case: 555 | Input/Output: [(-44 66 -55 87) -55]
Test Case: 556 | Input/Output: [(33 -87 35 11) -87]
Test Case: 557 | Input/Output: [(-100 62 82 -56) -100]
Test Case: 558 | Input/Output: [(33 87 32 -45) -45]
Test Case: 559 | Input/Output: [(8 -87 72 64) -87]
Test Case: 560 | Input/Output: [(95 -18 11 66) -18]
Test Case: 561 | Input/Output: [(-10 -9 -81 16) -81]
Test Case: 562 | Input/Output: [(-91 -23 -37 5) -91]
Test Case: 563 | Input/Output: [(21 7 61 -76) -76]
Test Case: 564 | Input/Output: [(84 -8 80 -22) -22]
Test Case: 565 | Input/Output: [(-93 54 -76 -14) -93]
Test Case: 566 | Input/Output: [(-73 -86 -44 -93) -93]
Test Case: 567 | Input/Output: [(61 63 -100 33) -100]
Test Case: 568 | Input/Output: [(-7 93 30 88) -7]
Test Case: 569 | Input/Output: [(88 -15 58 -33) -33]
Test Case: 570 | Input/Output: [(-52 -7 81 -78) -78]
Test Case: 571 | Input/Output: [(-54 68 -64 46) -64]
Test Case: 572 | Input/Output: [(-44 -52 -23 54) -52]
Test Case: 573 | Input/Output: [(-52 -84 -60 88) -84]
Test Case: 574 | Input/Output: [(-81 90 -67 55) -81]
Test Case: 575 | Input/Output: [(95 28 71 16) 16]
Test Case: 576 | Input/Output: [(55 46 85 55) 46]
Test Case: 577 | Input/Output: [(4 56 -70 -17) -70]
Test Case: 578 | Input/Output: [(44 56 59 -49) -49]
Test Case: 579 | Input/Output: [(-49 -100 46 48) -100]
Test Case: 580 | Input/Output: [(-50 35 40 -53) -53]
Test Case: 581 | Input/Output: [(-93 25 65 -92) -93]
Test Case: 582 | Input/Output: [(-77 -15 -64 -48) -77]
Test Case: 583 | Input/Output: [(-8 40 -46 97) -46]
Test Case: 584 | Input/Output: [(56 93 66 -82) -82]
Test Case: 585 | Input/Output: [(-30 -64 36 85) -64]
Test Case: 586 | Input/Output: [(29 -87 50 12) -87]
Test Case: 587 | Input/Output: [(52 -37 -50 3) -50]
Test Case: 588 | Input/Output: [(47 -76 92 94) -76]
Test Case: 589 | Input/Output: [(31 -33 10 67) -33]
Test Case: 590 | Input/Output: [(61 -53 -4 -63) -63]
Test Case: 591 | Input/Output: [(49 0 37 14) 0]
Test Case: 592 | Input/Output: [(-80 54 26 -100) -100]
Test Case: 593 | Input/Output: [(18 -2 -44 -90) -90]
Test Case: 594 | Input/Output: [(-53 -96 -45 -21) -96]
Test Case: 595 | Input/Output: [(-69 -36 91 -50) -69]
Test Case: 596 | Input/Output: [(51 15 -36 -41) -41]
Test Case: 597 | Input/Output: [(-97 -84 -60 -99) -99]
Test Case: 598 | Input/Output: [(92 4 74 -100) -100]
Test Case: 599 | Input/Output: [(-4 98 -5 -38) -38]
Test Case: 600 | Input/Output: [(-17 -100 90 -88) -100]
Test Case: 601 | Input/Output: [(-10 8 29 31) -10]
Test Case: 602 | Input/Output: [(-78 19 -75 -39) -78]
Test Case: 603 | Input/Output: [(4 -82 29 51) -82]
Test Case: 604 | Input/Output: [(-69 58 -2 -51) -69]
Test Case: 605 | Input/Output: [(-100 -41 41 -46) -100]
Test Case: 606 | Input/Output: [(-40 14 -16 -82) -82]
Test Case: 607 | Input/Output: [(-10 -19 33 -62) -62]
Test Case: 608 | Input/Output: [(-39 94 47 -88) -88]
Test Case: 609 | Input/Output: [(-90 33 81 48) -90]
Test Case: 610 | Input/Output: [(45 -3 -74 11) -74]
Test Case: 611 | Input/Output: [(-9 -88 73 66) -88]
Test Case: 612 | Input/Output: [(-29 29 1 -66) -66]
Test Case: 613 | Input/Output: [(-43 -65 -43 -44) -65]
Test Case: 614 | Input/Output: [(-89 93 42 -48) -89]
Test Case: 615 | Input/Output: [(-21 65 6 -14) -21]
Test Case: 616 | Input/Output: [(-32 -71 -75 70) -75]
Test Case: 617 | Input/Output: [(-33 -98 -68 -8) -98]
Test Case: 618 | Input/Output: [(-34 14 74 75) -34]
Test Case: 619 | Input/Output: [(3 -38 46 13) -38]
Test Case: 620 | Input/Output: [(88 -26 68 -88) -88]
Test Case: 621 | Input/Output: [(-49 2 25 3) -49]
Test Case: 622 | Input/Output: [(32 62 25 33) 25]
Test Case: 623 | Input/Output: [(21 32 -48 -28) -48]
Test Case: 624 | Input/Output: [(-41 45 31 27) -41]
Test Case: 625 | Input/Output: [(80 34 -47 -98) -98]
Test Case: 626 | Input/Output: [(-85 -94 18 88) -94]
Test Case: 627 | Input/Output: [(43 79 -2 -83) -83]
Test Case: 628 | Input/Output: [(-88 32 -65 26) -88]
Test Case: 629 | Input/Output: [(-89 -50 -82 -48) -89]
Test Case: 630 | Input/Output: [(33 57 91 -78) -78]
Test Case: 631 | Input/Output: [(26 -100 84 13) -100]
Test Case: 632 | Input/Output: [(78 -84 55 1) -84]
Test Case: 633 | Input/Output: [(-29 -60 -86 -29) -86]
Test Case: 634 | Input/Output: [(-40 76 3 -8) -40]
Test Case: 635 | Input/Output: [(-6 -15 89 20) -15]
Test Case: 636 | Input/Output: [(6 78 59 85) 6]
Test Case: 637 | Input/Output: [(-90 -10 38 -41) -90]
Test Case: 638 | Input/Output: [(62 59 56 74) 56]
Test Case: 639 | Input/Output: [(22 62 -77 88) -77]
Test Case: 640 | Input/Output: [(-45 -15 82 -98) -98]
Test Case: 641 | Input/Output: [(-81 97 -32 -72) -81]
Test Case: 642 | Input/Output: [(31 16 -37 67) -37]
Test Case: 643 | Input/Output: [(74 58 68 -44) -44]
Test Case: 644 | Input/Output: [(-23 -49 -92 23) -92]
Test Case: 645 | Input/Output: [(-6 -51 -92 -62) -92]
Test Case: 646 | Input/Output: [(-21 -49 8 -4) -49]
Test Case: 647 | Input/Output: [(-90 38 -45 -46) -90]
Test Case: 648 | Input/Output: [(-69 -29 -91 -75) -91]
Test Case: 649 | Input/Output: [(-63 -83 39 71) -83]
Test Case: 650 | Input/Output: [(97 -9 -88 33) -88]
Test Case: 651 | Input/Output: [(69 -14 41 -14) -14]
Test Case: 652 | Input/Output: [(-67 -36 62 -20) -67]
Test Case: 653 | Input/Output: [(79 29 -100 -58) -100]
Test Case: 654 | Input/Output: [(-46 -83 3 35) -83]
Test Case: 655 | Input/Output: [(-7 79 -20 92) -20]
Test Case: 656 | Input/Output: [(46 96 92 -50) -50]
Test Case: 657 | Input/Output: [(98 33 -59 -31) -59]
Test Case: 658 | Input/Output: [(59 -67 -5 33) -67]
Test Case: 659 | Input/Output: [(22 -46 -78 5) -78]
Test Case: 660 | Input/Output: [(27 87 47 -80) -80]
Test Case: 661 | Input/Output: [(85 -16 44 -55) -55]
Test Case: 662 | Input/Output: [(-90 9 76 -52) -90]
Test Case: 663 | Input/Output: [(-44 80 -54 35) -54]
Test Case: 664 | Input/Output: [(-22 -77 -21 -58) -77]
Test Case: 665 | Input/Output: [(-43 69 -98 22) -98]
Test Case: 666 | Input/Output: [(15 73 -9 -36) -36]
Test Case: 667 | Input/Output: [(67 30 -11 -6) -11]
Test Case: 668 | Input/Output: [(94 1 10 -66) -66]
Test Case: 669 | Input/Output: [(55 8 -83 -59) -83]
Test Case: 670 | Input/Output: [(-7 81 88 91) -7]
Test Case: 671 | Input/Output: [(50 95 -68 -81) -81]
Test Case: 672 | Input/Output: [(91 59 -32 12) -32]
Test Case: 673 | Input/Output: [(-58 79 -8 4) -58]
Test Case: 674 | Input/Output: [(-94 99 83 -15) -94]
Test Case: 675 | Input/Output: [(-96 17 21 -60) -96]
Test Case: 676 | Input/Output: [(33 98 33 59) 33]
Test Case: 677 | Input/Output: [(-3 30 45 21) -3]
Test Case: 678 | Input/Output: [(-15 -53 24 64) -53]
Test Case: 679 | Input/Output: [(-96 -8 -42 14) -96]
Test Case: 680 | Input/Output: [(-22 51 76 54) -22]
Test Case: 681 | Input/Output: [(-7 49 48 -46) -46]
Test Case: 682 | Input/Output: [(-92 38 46 -69) -92]
Test Case: 683 | Input/Output: [(45 49 -79 -32) -79]
Test Case: 684 | Input/Output: [(-67 92 -63 -80) -80]
Test Case: 685 | Input/Output: [(88 -38 60 55) -38]
Test Case: 686 | Input/Output: [(21 -74 38 65) -74]
Test Case: 687 | Input/Output: [(68 41 -42 17) -42]
Test Case: 688 | Input/Output: [(1 85 -24 91) -24]
Test Case: 689 | Input/Output: [(-69 -68 -41 82) -69]
Test Case: 690 | Input/Output: [(-94 -21 -57 65) -94]
Test Case: 691 | Input/Output: [(80 48 30 99) 30]
Test Case: 692 | Input/Output: [(35 23 -8 -58) -58]
Test Case: 693 | Input/Output: [(1 -22 96 96) -22]
Test Case: 694 | Input/Output: [(48 -16 20 77) -16]
Test Case: 695 | Input/Output: [(70 -59 -7 -94) -94]
Test Case: 696 | Input/Output: [(-3 36 28 -14) -14]
Test Case: 697 | Input/Output: [(89 52 51 96) 51]
Test Case: 698 | Input/Output: [(60 -20 43 95) -20]
Test Case: 699 | Input/Output: [(-41 -56 71 -79) -79]
Test Case: 700 | Input/Output: [(-66 23 85 -12) -66]
Test Case: 701 | Input/Output: [(67 -32 -18 13) -32]
Test Case: 702 | Input/Output: [(-16 -1 78 -49) -49]
Test Case: 703 | Input/Output: [(-30 55 -9 -91) -91]
Test Case: 704 | Input/Output: [(-85 -57 -51 91) -85]
Test Case: 705 | Input/Output: [(13 36 -44 74) -44]
Test Case: 706 | Input/Output: [(-78 -20 -82 -100) -100]
Test Case: 707 | Input/Output: [(-84 -12 39 -41) -84]
Test Case: 708 | Input/Output: [(-15 -43 85 45) -43]
Test Case: 709 | Input/Output: [(25 -43 8 33) -43]
Test Case: 710 | Input/Output: [(-11 -57 -67 33) -67]
Test Case: 711 | Input/Output: [(83 48 -18 31) -18]
Test Case: 712 | Input/Output: [(-14 -34 24 -20) -34]
Test Case: 713 | Input/Output: [(-79 -72 -64 58) -79]
Test Case: 714 | Input/Output: [(-56 -45 -42 44) -56]
Test Case: 715 | Input/Output: [(-80 -51 55 -95) -95]
Test Case: 716 | Input/Output: [(53 79 9 -55) -55]
Test Case: 717 | Input/Output: [(-93 -86 -36 -26) -93]
Test Case: 718 | Input/Output: [(-57 17 -83 -1) -83]
Test Case: 719 | Input/Output: [(23 59 -41 -69) -69]
Test Case: 720 | Input/Output: [(21 -74 -52 81) -74]
Test Case: 721 | Input/Output: [(78 58 -8 -22) -22]
Test Case: 722 | Input/Output: [(1 -83 44 62) -83]
Test Case: 723 | Input/Output: [(66 -19 -29 -61) -61]
Test Case: 724 | Input/Output: [(-19 83 -32 81) -32]
Test Case: 725 | Input/Output: [(-29 65 11 65) -29]
Test Case: 726 | Input/Output: [(-76 -92 -55 46) -92]
Test Case: 727 | Input/Output: [(50 54 99 38) 38]
Test Case: 728 | Input/Output: [(-47 -17 -100 42) -100]
Test Case: 729 | Input/Output: [(-52 -92 -79 -20) -92]
Test Case: 730 | Input/Output: [(-84 -99 20 -3) -99]
Test Case: 731 | Input/Output: [(-53 -31 -17 -40) -53]
Test Case: 732 | Input/Output: [(-53 -77 59 94) -77]
Test Case: 733 | Input/Output: [(79 18 -29 -40) -40]
Test Case: 734 | Input/Output: [(91 0 -17 30) -17]
Test Case: 735 | Input/Output: [(34 -47 -22 -29) -47]
Test Case: 736 | Input/Output: [(-83 -63 9 7) -83]
Test Case: 737 | Input/Output: [(-10 74 9 16) -10]
Test Case: 738 | Input/Output: [(86 22 -58 -73) -73]
Test Case: 739 | Input/Output: [(39 96 20 31) 20]
Test Case: 740 | Input/Output: [(-45 38 -78 -11) -78]
Test Case: 741 | Input/Output: [(77 -91 -23 4) -91]
Test Case: 742 | Input/Output: [(-39 -80 -39 25) -80]
Test Case: 743 | Input/Output: [(54 50 33 -60) -60]
Test Case: 744 | Input/Output: [(85 -28 40 -38) -38]
Test Case: 745 | Input/Output: [(-17 85 -54 -96) -96]
Test Case: 746 | Input/Output: [(96 71 -42 77) -42]
Test Case: 747 | Input/Output: [(-48 -52 -58 -80) -80]
Test Case: 748 | Input/Output: [(72 13 46 -73) -73]
Test Case: 749 | Input/Output: [(53 12 -88 50) -88]
Test Case: 750 | Input/Output: [(-66 -20 -5 91) -66]
Test Case: 751 | Input/Output: [(68 -85 52 -78) -85]
Test Case: 752 | Input/Output: [(36 -12 -63 50) -63]
Test Case: 753 | Input/Output: [(81 -55 -64 -2) -64]
Test Case: 754 | Input/Output: [(-42 -2 61 16) -42]
Test Case: 755 | Input/Output: [(52 -4 44 17) -4]
Test Case: 756 | Input/Output: [(87 -46 -92 -40) -92]
Test Case: 757 | Input/Output: [(-9 -97 46 -73) -97]
Test Case: 758 | Input/Output: [(-31 90 29 41) -31]
Test Case: 759 | Input/Output: [(2 60 87 13) 2]
Test Case: 760 | Input/Output: [(-61 9 17 50) -61]
Test Case: 761 | Input/Output: [(31 -7 -45 100) -45]
Test Case: 762 | Input/Output: [(-71 -92 51 32) -92]
Test Case: 763 | Input/Output: [(91 -31 8 -73) -73]
Test Case: 764 | Input/Output: [(3 -96 -10 -48) -96]
Test Case: 765 | Input/Output: [(68 -78 -61 17) -78]
Test Case: 766 | Input/Output: [(-72 -58 -16 -62) -72]
Test Case: 767 | Input/Output: [(41 -27 78 57) -27]
Test Case: 768 | Input/Output: [(78 40 -90 25) -90]
Test Case: 769 | Input/Output: [(-62 25 -48 60) -62]
Test Case: 770 | Input/Output: [(-89 46 -80 21) -89]
Test Case: 771 | Input/Output: [(61 69 -57 -69) -69]
Test Case: 772 | Input/Output: [(-84 7 -87 -16) -87]
Test Case: 773 | Input/Output: [(-64 -55 -96 -44) -96]
Test Case: 774 | Input/Output: [(30 25 -62 68) -62]
Test Case: 775 | Input/Output: [(-4 86 -12 -38) -38]
Test Case: 776 | Input/Output: [(4 0 -88 72) -88]
Test Case: 777 | Input/Output: [(5 68 -77 -62) -77]
Test Case: 778 | Input/Output: [(90 0 7 -47) -47]
Test Case: 779 | Input/Output: [(88 -33 28 0) -33]
Test Case: 780 | Input/Output: [(75 55 40 -81) -81]
Test Case: 781 | Input/Output: [(-84 -85 99 -42) -85]
Test Case: 782 | Input/Output: [(-94 -65 21 -58) -94]
Test Case: 783 | Input/Output: [(-29 77 -20 -46) -46]
Test Case: 784 | Input/Output: [(45 -30 -31 92) -31]
Test Case: 785 | Input/Output: [(-22 75 -51 -97) -97]
Test Case: 786 | Input/Output: [(26 54 -56 11) -56]
Test Case: 787 | Input/Output: [(39 5 63 33) 5]
Test Case: 788 | Input/Output: [(22 -97 100 81) -97]
Test Case: 789 | Input/Output: [(-40 -16 -44 26) -44]
Test Case: 790 | Input/Output: [(80 -72 -85 -50) -85]
Test Case: 791 | Input/Output: [(-22 69 52 98) -22]
Test Case: 792 | Input/Output: [(43 31 -78 -76) -78]
Test Case: 793 | Input/Output: [(61 -3 -42 93) -42]
Test Case: 794 | Input/Output: [(25 -58 49 -98) -98]
Test Case: 795 | Input/Output: [(6 -31 -16 6) -31]
Test Case: 796 | Input/Output: [(-55 -48 41 77) -55]
Test Case: 797 | Input/Output: [(-22 -17 -40 97) -40]
Test Case: 798 | Input/Output: [(29 82 100 -15) -15]
Test Case: 799 | Input/Output: [(-58 -78 37 25) -78]
Test Case: 800 | Input/Output: [(-13 75 53 -96) -96]
Test Case: 801 | Input/Output: [(-37 99 -80 -78) -80]
Test Case: 802 | Input/Output: [(-59 56 -81 82) -81]
Test Case: 803 | Input/Output: [(-2 73 -38 -56) -56]
Test Case: 804 | Input/Output: [(94 -75 -17 -6) -75]
Test Case: 805 | Input/Output: [(33 -3 -99 -24) -99]
Test Case: 806 | Input/Output: [(-14 -52 -92 58) -92]
Test Case: 807 | Input/Output: [(-88 -4 61 48) -88]
Test Case: 808 | Input/Output: [(100 14 76 92) 14]
Test Case: 809 | Input/Output: [(-14 -70 -7 73) -70]
Test Case: 810 | Input/Output: [(-53 8 -83 59) -83]
Test Case: 811 | Input/Output: [(-65 2 3 98) -65]
Test Case: 812 | Input/Output: [(-12 -45 -85 -48) -85]
Test Case: 813 | Input/Output: [(84 -89 31 -17) -89]
Test Case: 814 | Input/Output: [(-24 -75 -57 67) -75]
Test Case: 815 | Input/Output: [(46 36 12 -41) -41]
Test Case: 816 | Input/Output: [(-15 51 66 -55) -55]
Test Case: 817 | Input/Output: [(-76 0 -89 -80) -89]
Test Case: 818 | Input/Output: [(34 -30 -88 61) -88]
Test Case: 819 | Input/Output: [(-49 -41 60 6) -49]
Test Case: 820 | Input/Output: [(99 -86 46 41) -86]
Test Case: 821 | Input/Output: [(98 10 12 3) 3]
Test Case: 822 | Input/Output: [(2 -13 64 77) -13]
Test Case: 823 | Input/Output: [(-56 30 22 -62) -62]
Test Case: 824 | Input/Output: [(-80 -19 -79 46) -80]
Test Case: 825 | Input/Output: [(-54 51 93 -65) -65]
Test Case: 826 | Input/Output: [(41 -86 26 87) -86]
Test Case: 827 | Input/Output: [(-11 89 -14 -59) -59]
Test Case: 828 | Input/Output: [(-29 -27 -28 27) -29]
Test Case: 829 | Input/Output: [(-75 35 98 3) -75]
Test Case: 830 | Input/Output: [(-83 93 9 -61) -83]
Test Case: 831 | Input/Output: [(-59 -66 1 72) -66]
Test Case: 832 | Input/Output: [(72 -85 62 -12) -85]
Test Case: 833 | Input/Output: [(-71 2 37 -39) -71]
Test Case: 834 | Input/Output: [(61 77 -39 -94) -94]
Test Case: 835 | Input/Output: [(72 -64 35 -71) -71]
Test Case: 836 | Input/Output: [(-45 -51 -11 -98) -98]
Test Case: 837 | Input/Output: [(1 -68 49 99) -68]
Test Case: 838 | Input/Output: [(96 52 72 7) 7]
Test Case: 839 | Input/Output: [(-7 76 -19 -12) -19]
Test Case: 840 | Input/Output: [(19 -15 -82 65) -82]
Test Case: 841 | Input/Output: [(-80 70 8 28) -80]
Test Case: 842 | Input/Output: [(-59 -69 -18 -64) -69]
Test Case: 843 | Input/Output: [(-90 50 79 -91) -91]
Test Case: 844 | Input/Output: [(65 -34 -42 -69) -69]
Test Case: 845 | Input/Output: [(38 -28 -97 -15) -97]
Test Case: 846 | Input/Output: [(-54 -97 -76 20) -97]
Test Case: 847 | Input/Output: [(47 -95 3 56) -95]
Test Case: 848 | Input/Output: [(-19 -37 -44 -87) -87]
Test Case: 849 | Input/Output: [(-52 -70 55 84) -70]
Test Case: 850 | Input/Output: [(31 -79 84 4) -79]
Test Case: 851 | Input/Output: [(2 9 62 1) 1]
Test Case: 852 | Input/Output: [(-70 20 40 -12) -70]
Test Case: 853 | Input/Output: [(-27 -19 13 55) -27]
Test Case: 854 | Input/Output: [(-41 82 54 -16) -41]
Test Case: 855 | Input/Output: [(-7 56 -33 40) -33]
Test Case: 856 | Input/Output: [(-71 -61 -99 -54) -99]
Test Case: 857 | Input/Output: [(-1 -52 -30 -75) -75]
Test Case: 858 | Input/Output: [(31 -1 79 -19) -19]
Test Case: 859 | Input/Output: [(-27 74 -39 49) -39]
Test Case: 860 | Input/Output: [(43 -86 -81 58) -86]
Test Case: 861 | Input/Output: [(10 -34 37 -69) -69]
Test Case: 862 | Input/Output: [(49 83 95 89) 49]
Test Case: 863 | Input/Output: [(-90 39 34 51) -90]
Test Case: 864 | Input/Output: [(-66 -51 -8 36) -66]
Test Case: 865 | Input/Output: [(36 7 68 31) 7]
Test Case: 866 | Input/Output: [(44 76 -82 -49) -82]
Test Case: 867 | Input/Output: [(45 -34 80 96) -34]
Test Case: 868 | Input/Output: [(69 56 -26 89) -26]
Test Case: 869 | Input/Output: [(62 -65 73 -61) -65]
Test Case: 870 | Input/Output: [(-71 85 97 56) -71]
Test Case: 871 | Input/Output: [(-69 -22 -88 52) -88]
Test Case: 872 | Input/Output: [(-38 -30 99 32) -38]
Test Case: 873 | Input/Output: [(-76 -75 54 -69) -76]
Test Case: 874 | Input/Output: [(-10 -71 4 76) -71]
Test Case: 875 | Input/Output: [(-30 91 13 -39) -39]
Test Case: 876 | Input/Output: [(43 -14 -35 -29) -35]
Test Case: 877 | Input/Output: [(-3 -6 -95 -51) -95]
Test Case: 878 | Input/Output: [(81 79 -24 -38) -38]
Test Case: 879 | Input/Output: [(70 -5 -65 -57) -65]
Test Case: 880 | Input/Output: [(-60 -66 -93 94) -93]
Test Case: 881 | Input/Output: [(-22 77 -57 -28) -57]
Test Case: 882 | Input/Output: [(-95 41 -5 55) -95]
Test Case: 883 | Input/Output: [(0 72 -70 11) -70]
Test Case: 884 | Input/Output: [(-16 -2 74 -73) -73]
Test Case: 885 | Input/Output: [(80 -75 90 -50) -75]
Test Case: 886 | Input/Output: [(9 -65 65 26) -65]
Test Case: 887 | Input/Output: [(-21 -87 -46 -16) -87]
Test Case: 888 | Input/Output: [(34 51 4 3) 3]
Test Case: 889 | Input/Output: [(3 -46 14 -81) -81]
Test Case: 890 | Input/Output: [(-93 76 14 -44) -93]
Test Case: 891 | Input/Output: [(16 29 8 -69) -69]
Test Case: 892 | Input/Output: [(-83 70 77 7) -83]
Test Case: 893 | Input/Output: [(57 -7 -12 65) -12]
Test Case: 894 | Input/Output: [(-48 20 -29 52) -48]
Test Case: 895 | Input/Output: [(26 30 16 -11) -11]
Test Case: 896 | Input/Output: [(13 -21 -52 -86) -86]
Test Case: 897 | Input/Output: [(-40 57 62 33) -40]
Test Case: 898 | Input/Output: [(25 -29 75 4) -29]
Test Case: 899 | Input/Output: [(-23 52 0 -42) -42]
Test Case: 900 | Input/Output: [(-46 21 0 -2) -46]
Test Case: 901 | Input/Output: [(32 24 79 9) 9]
Test Case: 902 | Input/Output: [(57 -95 18 80) -95]
Test Case: 903 | Input/Output: [(-11 -3 -36 -98) -98]
Test Case: 904 | Input/Output: [(33 84 -22 -59) -59]
Test Case: 905 | Input/Output: [(58 -58 -28 -11) -58]
Test Case: 906 | Input/Output: [(-13 33 17 -95) -95]
Test Case: 907 | Input/Output: [(-75 -95 -43 13) -95]
Test Case: 908 | Input/Output: [(-73 -89 -70 57) -89]
Test Case: 909 | Input/Output: [(-77 91 7 96) -77]
Test Case: 910 | Input/Output: [(90 -33 1 -16) -33]
Test Case: 911 | Input/Output: [(41 28 22 -8) -8]
Test Case: 912 | Input/Output: [(93 89 -27 -64) -64]
Test Case: 913 | Input/Output: [(-57 -21 80 71) -57]
Test Case: 914 | Input/Output: [(-100 92 60 64) -100]
Test Case: 915 | Input/Output: [(-98 23 19 -23) -98]
Test Case: 916 | Input/Output: [(-19 43 52 68) -19]
Test Case: 917 | Input/Output: [(89 -96 17 -99) -99]
Test Case: 918 | Input/Output: [(17 79 -98 34) -98]
Test Case: 919 | Input/Output: [(27 -28 -22 -31) -31]
Test Case: 920 | Input/Output: [(23 9 -16 -93) -93]
Test Case: 921 | Input/Output: [(77 7 64 84) 7]
Test Case: 922 | Input/Output: [(82 -74 38 -28) -74]
Test Case: 923 | Input/Output: [(-42 58 -42 90) -42]
Test Case: 924 | Input/Output: [(61 70 -37 33) -37]
Test Case: 925 | Input/Output: [(19 -12 23 95) -12]
Test Case: 926 | Input/Output: [(-26 -74 69 -27) -74]
Test Case: 927 | Input/Output: [(87 37 87 44) 37]
Test Case: 928 | Input/Output: [(-18 -64 -41 -15) -64]
Test Case: 929 | Input/Output: [(-67 66 -1 -9) -67]
Test Case: 930 | Input/Output: [(45 56 61 -59) -59]
Test Case: 931 | Input/Output: [(65 -84 -93 -35) -93]
Test Case: 932 | Input/Output: [(-93 -3 -83 54) -93]
Test Case: 933 | Input/Output: [(-83 -40 42 -89) -89]
Test Case: 934 | Input/Output: [(33 67 82 -43) -43]
Test Case: 935 | Input/Output: [(4 25 58 55) 4]
Test Case: 936 | Input/Output: [(-7 -28 7 66) -28]
Test Case: 937 | Input/Output: [(-17 -93 -99 34) -99]
Test Case: 938 | Input/Output: [(61 46 -58 31) -58]
Test Case: 939 | Input/Output: [(33 -15 54 91) -15]
Test Case: 940 | Input/Output: [(-29 19 88 42) -29]
Test Case: 941 | Input/Output: [(-11 -1 -34 82) -34]
Test Case: 942 | Input/Output: [(-51 19 56 47) -51]
Test Case: 943 | Input/Output: [(-32 -11 71 43) -32]
Test Case: 944 | Input/Output: [(19 -5 -29 -41) -41]
Test Case: 945 | Input/Output: [(-43 10 -12 83) -43]
Test Case: 946 | Input/Output: [(-74 -6 2 54) -74]
Test Case: 947 | Input/Output: [(94 -28 -94 -98) -98]
Test Case: 948 | Input/Output: [(60 68 86 -56) -56]
Test Case: 949 | Input/Output: [(53 -40 -74 -12) -74]
Test Case: 950 | Input/Output: [(-10 14 -44 -33) -44]
Test Case: 951 | Input/Output: [(-44 98 -48 96) -48]
Test Case: 952 | Input/Output: [(44 2 -36 -71) -71]
Test Case: 953 | Input/Output: [(-99 48 63 11) -99]
Test Case: 954 | Input/Output: [(46 60 -47 -93) -93]
Test Case: 955 | Input/Output: [(84 82 13 88) 13]
Test Case: 956 | Input/Output: [(57 81 27 -33) -33]
Test Case: 957 | Input/Output: [(-23 -61 36 -12) -61]
Test Case: 958 | Input/Output: [(-32 -2 -78 -86) -86]
Test Case: 959 | Input/Output: [(-84 -37 78 5) -84]
Test Case: 960 | Input/Output: [(87 -80 10 68) -80]
Test Case: 961 | Input/Output: [(76 89 -60 43) -60]
Test Case: 962 | Input/Output: [(-65 85 -7 27) -65]
Test Case: 963 | Input/Output: [(26 44 -24 -7) -24]
Test Case: 964 | Input/Output: [(94 -64 27 -95) -95]
Test Case: 965 | Input/Output: [(-93 -45 40 90) -93]
Test Case: 966 | Input/Output: [(95 -26 -31 -84) -84]
Test Case: 967 | Input/Output: [(-57 -55 32 -79) -79]
Test Case: 968 | Input/Output: [(-36 62 -25 57) -36]
Test Case: 969 | Input/Output: [(43 51 -59 -31) -59]
Test Case: 970 | Input/Output: [(29 87 -16 -78) -78]
Test Case: 971 | Input/Output: [(36 -13 -73 75) -73]
Test Case: 972 | Input/Output: [(-96 -85 71 3) -96]
Test Case: 973 | Input/Output: [(81 23 11 -25) -25]
Test Case: 974 | Input/Output: [(13 -82 -7 -31) -82]
Test Case: 975 | Input/Output: [(72 -81 9 22) -81]
Test Case: 976 | Input/Output: [(8 -49 -12 27) -49]
Test Case: 977 | Input/Output: [(-35 -26 98 -50) -50]
Test Case: 978 | Input/Output: [(89 -67 21 66) -67]
Test Case: 979 | Input/Output: [(-64 -85 -61 -56) -85]
Test Case: 980 | Input/Output: [(9 89 -21 91) -21]
Test Case: 981 | Input/Output: [(64 -43 17 -32) -43]
Test Case: 982 | Input/Output: [(-36 74 -68 24) -68]
Test Case: 983 | Input/Output: [(31 -79 39 28) -79]
Test Case: 984 | Input/Output: [(43 17 30 39) 17]
Test Case: 985 | Input/Output: [(47 -96 65 -53) -96]
Test Case: 986 | Input/Output: [(12 -17 -12 63) -17]
Test Case: 987 | Input/Output: [(21 29 42 56) 21]
Test Case: 988 | Input/Output: [(-93 6 39 -85) -93]
Test Case: 989 | Input/Output: [(-35 70 41 6) -35]
Test Case: 990 | Input/Output: [(-11 -97 24 -21) -97]
Test Case: 991 | Input/Output: [(98 45 -13 21) -13]
Test Case: 992 | Input/Output: [(57 20 22 -62) -62]
Test Case: 993 | Input/Output: [(87 99 42 -80) -80]
Test Case: 994 | Input/Output: [(-70 22 34 63) -70]
Test Case: 995 | Input/Output: [(-12 61 13 -10) -12]
Test Case: 996 | Input/Output: [(83 -94 -76 -16) -94]
Test Case: 997 | Input/Output: [(-27 89 62 84) -27]
Test Case: 998 | Input/Output: [(-6 -82 -70 57) -82]
Test Case: 999 | Input/Output: [(25 82 48 -26) -26]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -91 9 -18 -128 37 41 62 -74 75 40 35 -47 -61 -119 69 34
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[52 52 52 40] 40] [[38 76 76 76] 38] [[-92 -17 -17 -17] -92] [[-12 -12 32 -12] -12] [[-80 -80 -11 -80] -80] [[-12 89 89 89] -12] [[-98 -98 41 -98] -98] [[-98 8 -98 -98] -98] [[94 72 94 94] 72] [[61 -76 -76 -76] -76] [(-11 -11 -11 -11) -11] [(2 2 2 2) 2] [(-14 -14 -14 -14) -14] [(26 26 26 26) 26] [(-95 -95 -95 -95) -95] [(18 95 74 52) 18] [(90 38 43 39) 38] [(28 15 28 28) 15] [(10 12 31 60) 10] [(73 17 16 55) 16] [(92 30 39 85) 30] [(24 81 69 54) 24] [(60 73 90 99) 60] [(96 100 39 17) 17] [(44 92 68 60) 44] [(3 21 50 78) 3] [(37 93 28 84) 28] [(37 79 39 9) 9] [(96 2 40 70) 2] [(99 87 70 5) 5] [(70 68 99 0) 0] [(92 31 83 43) 31] [(12 76 67 60) 12] [(87 90 75 26) 26] [(13 64 76 68) 13] [(44 6 -76 -66) -76] [(-66 93 -31 40) -66] [(-86 45 -43 -3) -86] [(-85 -20 -60 44) -85] [(8 -73 50 -30) -73] [(-60 76 -76 -30) -76] [(21 44 -9 9) -9] [(42 10 -25 89) -25] [(-7 -78 -16 -30) -78] [(-17 -8 86 -70) -70] [(-62 29 76 59) -62] [(68 -13 48 -9) -13] [(-24 -8 -29 9) -29] [(96 -7 -19 38) -19] [(69 95 -6 29) -6] [(-90 -77 94 67) -90] [(-62 -39 49 19) -62] [(29 -52 -15 13) -52] [(-91 75 1 -59) -91] [(94 47 -73 -96) -96] [(-10 -54 -27 3) -54] [(-60 -81 -81 47) -81] [(79 88 -35 -95) -95] [(-12 95 0 -17) -17] [(-24 -94 48 -57) -94] [(-99 91 -76 -14) -99] [(1 -36 -39 25) -39] [(3 40 36 87) 3] [(44 83 -52 -96) -96] [(45 88 4 13) 4] [(-29 -25 -65 -82) -82] [(91 -50 -18 -70) -70] [(-49 95 -9 -63) -63] [(-51 49 -58 21) -58] [(-90 44 64 75) -90] [(-68 -71 49 -18) -71] [(23 79 72 -58) -58] [(-95 74 17 93) -95] [(94 -36 -67 -9) -67] [(-62 -14 12 62) -62] [(-8 100 95 96) -8] [(76 75 53 14) 14] [(-75 90 -31 73) -75] [(-100 -37 -84 -65) -100] [(83 6 55 -39) -39] [(74 -11 88 -63) -63] [(-6 -57 -31 6) -57] [(59 -74 80 -91) -91] [(34 33 87 64) 33] [(-43 -3 -21 23) -43] [(89 24 51 4) 4] [(-52 85 -82 -90) -90] [(82 98 -96 -78) -96] [(70 75 21 85) 21] [(90 -39 75 12) -39] [(15 -38 63 38) -38] [(-86 69 9 -97) -97] [(-40 71 -66 47) -66] [(41 -62 -40 -49) -62] [(-20 23 13 -51) -51])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 52                 
Correct output: 38                  | Program output: 76                 
Correct output: -92                 | Program output: -17                
Correct output: -12                 | Program output: 32                 
Correct output: -80                 | Program output: -11                
Correct output: -12                 | Program output: 89                 
Correct output: -98                 | Program output: 41                 
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 74                 
Correct output: 38                  | Program output: 43                 
Correct output: 15                  | Program output: 28                 
Correct output: 10                  | Program output: 31                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 39                 
Correct output: 24                  | Program output: 69                 
Correct output: 60                  | Program output: 90                 
Correct output: 17                  | Program output: 39                 
Correct output: 44                  | Program output: 68                 
Correct output: 3                   | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 39                 
Correct output: 2                   | Program output: 40                 
Correct output: 5                   | Program output: 70                 
Correct output: 0                   | Program output: 99                 
Correct output: 31                  | Program output: 83                 
Correct output: 12                  | Program output: 67                 
Correct output: 26                  | Program output: 75                 
Correct output: 13                  | Program output: 76                 
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -31                
Correct output: -86                 | Program output: -43                
Correct output: -85                 | Program output: -60                
Correct output: -73                 | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -25                 | Program output: -25                
Correct output: -78                 | Program output: -16                
Correct output: -70                 | Program output: 86                 
Correct output: -62                 | Program output: 76                 
Correct output: -13                 | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -6                  | Program output: -6                 
Correct output: -90                 | Program output: 94                 
Correct output: -62                 | Program output: 49                 
Correct output: -52                 | Program output: -15                
Correct output: -91                 | Program output: 1                  
Correct output: -96                 | Program output: -73                
Correct output: -54                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -35                
Correct output: -17                 | Program output: 0                  
Correct output: -94                 | Program output: 48                 
Correct output: -99                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: 3                   | Program output: 36                 
Correct output: -96                 | Program output: -52                
Correct output: 4                   | Program output: 4                  
Correct output: -82                 | Program output: -65                
Correct output: -70                 | Program output: -18                
Correct output: -63                 | Program output: -9                 
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: 64                 
Correct output: -71                 | Program output: 49                 
Correct output: -58                 | Program output: 72                 
Correct output: -95                 | Program output: 17                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 12                 
Correct output: -8                  | Program output: 95                 
Correct output: 14                  | Program output: 53                 
Correct output: -75                 | Program output: -31                
Correct output: -100                | Program output: -84                
Correct output: -39                 | Program output: 55                 
Correct output: -63                 | Program output: 88                 
Correct output: -57                 | Program output: -31                
Correct output: -91                 | Program output: 80                 
Correct output: 33                  | Program output: 87                 
Correct output: -43                 | Program output: -21                
Correct output: 4                   | Program output: 51                 
Correct output: -90                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: 21                  | Program output: 21                 
Correct output: -39                 | Program output: 75                 
Correct output: -38                 | Program output: 63                 
Correct output: -97                 | Program output: 9                  
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -40                
Correct output: -51                 | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_357} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_do*times (exec_k_when_autoconstructing (boolean_invert_second_then_and) (in3 print_integer exec_yank boolean_and exec_k_when_autoconstructing (integer_pop in3 exec_stackdepth) (exec_eq boolean_rot print_boolean boolean_xor integer_sub integer_add tagged_357 integer_dup_times) integer_sub integer_dup_times exec_do*times ())))
Lexicase best errors: [0 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_357} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_do*times (exec_k_when_autoconstructing (boolean_invert_second_then_and) (in3 print_integer exec_yank boolean_and exec_k_when_autoconstructing (integer_pop in3 exec_stackdepth) (exec_eq boolean_rot print_boolean boolean_xor integer_sub integer_add tagged_357 integer_dup_times) integer_sub integer_dup_times exec_do*times ())))
Zero cases best errors: [0 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 1 1 5 9 1 6 1 1 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (5 1 1 5 9 1 6 1 1 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction 91} {:close 2, :instruction exec_do*times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction 90} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_empty})
Best program: (boolean_and exec_if (integer_eq in3) (boolean_not) print_integer exec_dup_items integer_dup_items exec_do*times (boolean_or exec_do*range () boolean_pop exec_dup_items integer_stackdepth integer_yank in4 integer_div) exec_stackdepth integer_empty boolean_stackdepth exec_eq exec_do*count (exec_stackdepth integer_mult integer_add boolean_shove boolean_invert_second_then_and exec_when (exec_rot () (boolean_rot) (in4 integer_eq in3 exec_while (boolean_dup_times boolean_dup in1 integer_flush exec_empty integer_inc boolean_dup_items exec_s (boolean_rot 91) (exec_do*times ()) (exec_shove () exec_do*count (in1 exec_yank) exec_yankdup boolean_invert_first_then_and) exec_shove (exec_dup_items) integer_dec exec_do*while (integer_gt) integer_eq exec_when (in3 exec_do*count (print_boolean exec_do*range (exec_y_when_autoconstructing (integer_add exec_while (exec_dup_times (exec_y_when_autoconstructing (integer_pop integer_swap exec_do*range (exec_k_when_autoconstructing (exec_eq) (exec_empty in2 exec_empty print_boolean print_newline 90 integer_stackdepth exec_noop boolean_yank boolean_flush integer_div exec_rot (boolean_pop boolean_stackdepth in1 integer_flush integer_dup_times boolean_empty) () ()))))))))))))))
Errors: [0 1 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 90
Size: 122
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 9.965
Median total errors in population: 10
Error averages by case: (0.995 0.999 0.999 0.995 0.991 0.999 0.994 0.999 0.999 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.748
Average program size in population (points): 70.085
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 480309
--- Timings ---
Current time: 1559594161362 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 30.6%
Fitness Testing:      1.7 seconds, 65.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 52                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -12                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 94                 
Correct output: -76                 | Program output: 61                 
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 18                 
Correct output: 38                  | Program output: 90                 
Correct output: 15                  | Program output: 28                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 73                 
Correct output: 30                  | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: 60                  | Program output: 60                 
Correct output: 17                  | Program output: 96                 
Correct output: 44                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 37                 
Correct output: 9                   | Program output: 37                 
Correct output: 2                   | Program output: 96                 
Correct output: 5                   | Program output: 99                 
Correct output: 0                   | Program output: 70                 
Correct output: 31                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 87                 
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: 8                  
Correct output: -76                 | Program output: -60                
Correct output: -9                  | Program output: 21                 
Correct output: -25                 | Program output: 42                 
Correct output: -78                 | Program output: -7                 
Correct output: -70                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -13                 | Program output: 68                 
Correct output: -29                 | Program output: -24                
Correct output: -19                 | Program output: 96                 
Correct output: -6                  | Program output: 69                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -52                 | Program output: 29                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: 94                 
Correct output: -54                 | Program output: -10                
Correct output: -81                 | Program output: -60                
Correct output: -95                 | Program output: 79                 
Correct output: -17                 | Program output: -12                
Correct output: -94                 | Program output: -24                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: 44                 
Correct output: 4                   | Program output: 45                 
Correct output: -82                 | Program output: -29                
Correct output: -70                 | Program output: 91                 
Correct output: -63                 | Program output: -49                
Correct output: -58                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -68                
Correct output: -58                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 94                 
Correct output: -62                 | Program output: -62                
Correct output: -8                  | Program output: -8                 
Correct output: 14                  | Program output: 76                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 83                 
Correct output: -63                 | Program output: 74                 
Correct output: -57                 | Program output: -6                 
Correct output: -91                 | Program output: 59                 
Correct output: 33                  | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: 4                   | Program output: 89                 
Correct output: -90                 | Program output: -52                
Correct output: -96                 | Program output: 82                 
Correct output: 21                  | Program output: 70                 
Correct output: -39                 | Program output: 90                 
Correct output: -38                 | Program output: 15                 
Correct output: -97                 | Program output: -86                
Correct output: -66                 | Program output: -40                
Correct output: -62                 | Program output: 41                 
Correct output: -51                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction tag_boolean_177} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 63} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 2, :instruction integer_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt})
Lexicase best program: (in1 integer_gte integer_mod print_integer boolean_swap integer_max exec_dup (boolean_swap exec_pop (boolean_stackdepth exec_dup_times (integer_eq in4 boolean_invert_first_then_and exec_do*count (integer_max print_exec (print_boolean exec_k (integer_sub) (tag_boolean_177) boolean_rot integer_fromboolean boolean_xor exec_s () (in4 exec_pop (integer_yank boolean_swap boolean_flush integer_dup_items 63 integer_inc integer_dec boolean_frominteger boolean_dup) boolean_and in1 exec_pop (exec_do*count (integer_min) integer_eq integer_lt) boolean_xor exec_do*while (exec_empty) integer_empty) (exec_s (integer_rot) () (boolean_or) boolean_dup_items) boolean_rot integer_gte exec_s_when_autoconstructing (exec_dup_items exec_dup (boolean_invert_first_then_and exec_shove (exec_flush) integer_gt integer_rot exec_do*times (integer_div) exec_do*while (boolean_dup_items boolean_frominteger) exec_y_when_autoconstructing (exec_do*times (integer_inc integer_pop integer_flush in2) print_boolean) boolean_invert_second_then_and exec_if (integer_mult) (exec_s_when_autoconstructing () () (boolean_frominteger print_boolean boolean_yankdup in3) exec_shove (boolean_swap integer_stackdepth integer_add integer_lt)))) () ()))))))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 119
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction tag_boolean_177} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 63} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 2, :instruction integer_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_mult} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt})
Zero cases best program: (in1 integer_gte integer_mod print_integer boolean_swap integer_max exec_dup (boolean_swap exec_pop (boolean_stackdepth exec_dup_times (integer_eq in4 boolean_invert_first_then_and exec_do*count (integer_max print_exec (print_boolean exec_k (integer_sub) (tag_boolean_177) boolean_rot integer_fromboolean boolean_xor exec_s () (in4 exec_pop (integer_yank boolean_swap boolean_flush integer_dup_items 63 integer_inc integer_dec boolean_frominteger boolean_dup) boolean_and in1 exec_pop (exec_do*count (integer_min) integer_eq integer_lt) boolean_xor exec_do*while (exec_empty) integer_empty) (exec_s (integer_rot) () (boolean_or) boolean_dup_items) boolean_rot integer_gte exec_s_when_autoconstructing (exec_dup_items exec_dup (boolean_invert_first_then_and exec_shove (exec_flush) integer_gt integer_rot exec_do*times (integer_div) exec_do*while (boolean_dup_items boolean_frominteger) exec_y_when_autoconstructing (exec_do*times (integer_inc integer_pop integer_flush in2) print_boolean) boolean_invert_second_then_and exec_if (integer_mult) (exec_s_when_autoconstructing () () (boolean_frominteger print_boolean boolean_yankdup in3) exec_shove (boolean_swap integer_stackdepth integer_add integer_lt)))) () ()))))))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 119
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 336 277 336 62 339 336 336 686 693)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (341 336 277 336 62 339 336 336 686 693)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction tag_boolean_177} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 63} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 2, :instruction integer_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt})
Best program: (in1 integer_gte integer_mod print_integer exec_y (boolean_swap) exec_dup (boolean_swap exec_pop (boolean_stackdepth integer_empty exec_dup_times (integer_eq in4 boolean_invert_first_then_and exec_do*count (integer_yankdup integer_max print_exec (exec_empty exec_dup_items exec_k (integer_sub) (tag_boolean_177) boolean_rot integer_fromboolean boolean_xor exec_s () (exec_dup_items in4 exec_pop (boolean_yankdup) integer_yank boolean_swap boolean_flush integer_dup_items 63 integer_inc integer_dec boolean_frominteger exec_y_when_autoconstructing (boolean_dup) in1 exec_pop (integer_min) integer_eq integer_lt) (boolean_xor exec_do*while (exec_pop (integer_shove exec_empty) exec_k (integer_empty) (exec_s (integer_rot) () (boolean_or) integer_stackdepth) boolean_dup_items) boolean_rot exec_s_when_autoconstructing (exec_dup_items boolean_not exec_dup (boolean_invert_first_then_and exec_noop exec_shove (exec_pop (exec_flush) integer_gt integer_rot exec_do*times (integer_div) boolean_dup_items boolean_frominteger) exec_k (integer_inc integer_pop integer_flush in2) (print_boolean) boolean_invert_second_then_and exec_if (integer_swap integer_mult) (exec_s_when_autoconstructing () () (print_boolean integer_empty boolean_yankdup boolean_or) in3) exec_shove (integer_stackdepth integer_lt))) () ())))))))
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 94
Size: 131
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.258
Median total errors in population: 7
Error averages by case: (0.659 0.664 0.723 0.664 0.938 0.661 0.664 0.664 0.314 0.307)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.074
Average program size in population (points): 94.584
Average percent parens in population: 0.279
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1133778
--- Timings ---
Current time: 1559594163967 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         1.9 seconds, 37.8%
Fitness Testing:      2.6 seconds, 52.9%
Report:               0.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 40                 
Correct output: 38                  | Program output: 76                 
Correct output: -92                 | Program output: -17                
Correct output: -12                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -12                 | Program output: 89                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 52                 
Correct output: 38                  | Program output: 39                 
Correct output: 15                  | Program output: 28                 
Correct output: 10                  | Program output: 31                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 39                 
Correct output: 24                  | Program output: 54                 
Correct output: 60                  | Program output: 90                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 60                 
Correct output: 3                   | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 31                  | Program output: 43                 
Correct output: 12                  | Program output: 60                 
Correct output: 26                  | Program output: 26                 
Correct output: 13                  | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -31                
Correct output: -86                 | Program output: -43                
Correct output: -85                 | Program output: -60                
Correct output: -73                 | Program output: -30                
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -25                 | Program output: -25                
Correct output: -78                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: 59                 
Correct output: -13                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -6                  | Program output: -6                 
Correct output: -90                 | Program output: 67                 
Correct output: -62                 | Program output: 19                 
Correct output: -52                 | Program output: -15                
Correct output: -91                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: -99                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: 3                   | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 4                  
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: 64                 
Correct output: -71                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: 17                 
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: 12                 
Correct output: -8                  | Program output: 95                 
Correct output: 14                  | Program output: 14                 
Correct output: -75                 | Program output: -31                
Correct output: -100                | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -57                 | Program output: -31                
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 64                 
Correct output: -43                 | Program output: -21                
Correct output: 4                   | Program output: 4                  
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: 21                  | Program output: 21                 
Correct output: -39                 | Program output: 12                 
Correct output: -38                 | Program output: 38                 
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -49                
Correct output: -51                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Lexicase best program: (exec_when () exec_k_when_autoconstructing () () exec_pop (boolean_and exec_dup_times () boolean_yankdup integer_dup_times) exec_yank integer_dup_times in4 integer_swap exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (boolean_yankdup boolean_flush exec_s_when_autoconstructing (boolean_not boolean_pop in3 exec_y_when_autoconstructing () integer_min) (exec_do*while () integer_eq) (print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (exec_rot (integer_flush boolean_eq boolean_invert_second_then_and exec_while ()) () ()))) ()) ())))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 62
Percent parens: 0.387
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Zero cases best program: (exec_when () exec_k_when_autoconstructing () () exec_pop (boolean_and exec_dup_times () boolean_yankdup integer_dup_times) exec_yank integer_dup_times in4 integer_swap exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (boolean_yankdup boolean_flush exec_s_when_autoconstructing (boolean_not boolean_pop in3 exec_y_when_autoconstructing () integer_min) (exec_do*while () integer_eq) (print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (exec_rot (integer_flush boolean_eq boolean_invert_second_then_and exec_while ()) () ()))) ()) ())))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 62
Percent parens: 0.387
--- Lexicase Population Statistics ---
Count of elite individuals by case: (513 65 63 91 64 76 90 91 515 64)
Population mean number of elite cases: 1.63
Count of perfect (error zero) individuals by case: (513 65 63 91 64 76 90 91 515 64)
Population mean number of perfect (error zero) cases: 1.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Best program: (exec_when () exec_k_when_autoconstructing () () exec_pop (boolean_and exec_dup_times () boolean_yankdup integer_dup_times) exec_yank integer_dup_times in4 integer_swap exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (boolean_yankdup boolean_flush exec_s_when_autoconstructing (boolean_not boolean_pop in3 exec_y_when_autoconstructing () integer_min) (exec_do*while () integer_eq) (print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (exec_rot (integer_flush boolean_eq boolean_invert_second_then_and exec_while ()) () ()))) ()) ())))
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 38
Size: 62
Percent parens: 0.387
--- Population Statistics ---
Average total errors in population: 8.368
Median total errors in population: 8
Error averages by case: (0.487 0.935 0.937 0.909 0.936 0.924 0.91 0.909 0.485 0.936)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.076
Average program size in population (points): 112.166
Average percent parens in population: 0.273
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1930214
--- Timings ---
Current time: 1559594166693 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.1 seconds, 39.3%
Fitness Testing:      3.7 seconds, 46.9%
Report:               1.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 52                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -12                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 18                 
Correct output: 38                  | Program output: 43                 
Correct output: 15                  | Program output: 28                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 39                 
Correct output: 24                  | Program output: 24                 
Correct output: 60                  | Program output: 60                 
Correct output: 17                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 37                 
Correct output: 2                   | Program output: 40                 
Correct output: 5                   | Program output: 70                 
Correct output: 0                   | Program output: 70                 
Correct output: 31                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 75                 
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -25                 | Program output: -25                
Correct output: -78                 | Program output: -16                
Correct output: -70                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -13                 | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -6                  | Program output: -6                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -52                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -73                
Correct output: -54                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -35                
Correct output: -17                 | Program output: -12                
Correct output: -94                 | Program output: -24                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -52                
Correct output: 4                   | Program output: 4                  
Correct output: -82                 | Program output: -65                
Correct output: -70                 | Program output: -18                
Correct output: -63                 | Program output: -49                
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -68                
Correct output: -58                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -8                  | Program output: -8                 
Correct output: 14                  | Program output: 53                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 55                 
Correct output: -63                 | Program output: 74                 
Correct output: -57                 | Program output: -31                
Correct output: -91                 | Program output: 59                 
Correct output: 33                  | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: 4                   | Program output: 51                 
Correct output: -90                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: 21                  | Program output: 21                 
Correct output: -39                 | Program output: 75                 
Correct output: -38                 | Program output: 15                 
Correct output: -97                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -40                
Correct output: -51                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction integer_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Lexicase best program: (exec_when () exec_k_when_autoconstructing () () boolean_invert_first_then_and exec_pop (boolean_and boolean_yankdup exec_yank integer_dup_times in4) integer_swap print_boolean exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup boolean_flush exec_s_when_autoconstructing (boolean_not boolean_pop in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) () exec_do*while () print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (integer_flush boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 58
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction integer_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Zero cases best program: (exec_when () exec_k_when_autoconstructing () () boolean_invert_first_then_and exec_pop (boolean_and boolean_yankdup exec_yank integer_dup_times in4) integer_swap print_boolean exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup boolean_flush exec_s_when_autoconstructing (boolean_not boolean_pop in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) () exec_do*while () print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (integer_flush boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 58
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (147 462 147 147 445 308 461 423 614 6)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (147 462 147 147 445 308 461 423 614 6)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tagged_694} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while})
Best program: (exec_when () exec_k_when_autoconstructing () () tagged_694 boolean_and integer_div exec_dup_times () in1 boolean_yankdup integer_empty integer_dup_times integer_dup_times in4 boolean_dup_items integer_swap exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (boolean_yankdup boolean_flush exec_s_when_autoconstructing (boolean_pop in3 exec_y_when_autoconstructing () exec_if (integer_min) (integer_lt exec_do*while () integer_eq) print_boolean print_integer exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (integer_flush boolean_eq exec_while ()))) ()) ()) () ()))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 39
Size: 61
Percent parens: 0.361
--- Population Statistics ---
Average total errors in population: 6.84
Median total errors in population: 7
Error averages by case: (0.853 0.538 0.853 0.853 0.555 0.692 0.539 0.577 0.386 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.582
Average program size in population (points): 74.294
Average percent parens in population: 0.359
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2444265
--- Timings ---
Current time: 1559594168810 milliseconds
Total Time:          10.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.3 seconds, 42.9%
Fitness Testing:      4.3 seconds, 42.8%
Report:               1.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 52                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -12                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 18                 
Correct output: 38                  | Program output: 43                 
Correct output: 15                  | Program output: 28                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 39                 
Correct output: 24                  | Program output: 24                 
Correct output: 60                  | Program output: 60                 
Correct output: 17                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 37                 
Correct output: 2                   | Program output: 40                 
Correct output: 5                   | Program output: 70                 
Correct output: 0                   | Program output: 70                 
Correct output: 31                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 75                 
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -25                 | Program output: -25                
Correct output: -78                 | Program output: -16                
Correct output: -70                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -13                 | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -6                  | Program output: -6                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -52                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -73                
Correct output: -54                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -35                
Correct output: -17                 | Program output: -12                
Correct output: -94                 | Program output: -24                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -52                
Correct output: 4                   | Program output: 4                  
Correct output: -82                 | Program output: -65                
Correct output: -70                 | Program output: -18                
Correct output: -63                 | Program output: -49                
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -68                
Correct output: -58                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -8                  | Program output: -8                 
Correct output: 14                  | Program output: 53                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 55                 
Correct output: -63                 | Program output: 74                 
Correct output: -57                 | Program output: -31                
Correct output: -91                 | Program output: 59                 
Correct output: 33                  | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: 4                   | Program output: 51                 
Correct output: -90                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: 21                  | Program output: 21                 
Correct output: -39                 | Program output: 75                 
Correct output: -38                 | Program output: 15                 
Correct output: -97                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -40                
Correct output: -51                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction in4} {:close 1, :instruction integer_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Lexicase best program: (exec_when () exec_k_when_autoconstructing () () boolean_invert_first_then_and exec_pop (boolean_and boolean_yankdup exec_yank in4) integer_swap print_boolean exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup boolean_flush exec_s_when_autoconstructing (boolean_not boolean_pop in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) () exec_do*while () print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (integer_flush boolean_invert_second_then_and exec_while ()))) ()) ()))
Lexicase best errors: [1 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 2, :instruction in4} {:close 1, :instruction integer_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Zero cases best program: (exec_when () exec_k_when_autoconstructing () () boolean_invert_first_then_and exec_pop (boolean_and boolean_yankdup exec_yank in4) integer_swap print_boolean exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup boolean_flush exec_s_when_autoconstructing (boolean_not boolean_pop in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) () exec_do*while () print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (integer_flush boolean_invert_second_then_and exec_while ()))) ()) ()))
Zero cases best errors: [1 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 306 70 196 301 312 292 300 293 71)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (73 306 70 196 301 312 292 300 293 71)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_381} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_while})
Best program: (exec_when () exec_k_when_autoconstructing () () boolean_invert_first_then_and exec_pop (boolean_and boolean_yankdup exec_yank integer_dup_times integer_swap) print_boolean exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup boolean_flush exec_s_when_autoconstructing (boolean_not boolean_pop in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) () exec_do*while () print_boolean tagged_381 print_integer boolean_dup boolean_invert_first_then_and exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (integer_flush integer_mod) boolean_invert_second_then_and in2) exec_while ()) ()) ()))
Errors: [1 0 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 60
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.786
Median total errors in population: 8
Error averages by case: (0.927 0.694 0.93 0.804 0.699 0.688 0.708 0.7 0.707 0.929)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.222
Average program size in population (points): 59.859
Average percent parens in population: 0.361
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2943209
--- Timings ---
Current time: 1559594170725 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.5 seconds, 45.5%
Fitness Testing:      4.8 seconds, 39.9%
Report:               1.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 52                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -12                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 18                 
Correct output: 38                  | Program output: 43                 
Correct output: 15                  | Program output: 28                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 39                 
Correct output: 24                  | Program output: 24                 
Correct output: 60                  | Program output: 60                 
Correct output: 17                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 37                 
Correct output: 2                   | Program output: 40                 
Correct output: 5                   | Program output: 70                 
Correct output: 0                   | Program output: 70                 
Correct output: 31                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 75                 
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -25                 | Program output: -25                
Correct output: -78                 | Program output: -16                
Correct output: -70                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -13                 | Program output: 48                 
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -6                  | Program output: -6                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -52                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -73                
Correct output: -54                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -35                
Correct output: -17                 | Program output: -12                
Correct output: -94                 | Program output: -24                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -52                
Correct output: 4                   | Program output: 4                  
Correct output: -82                 | Program output: -65                
Correct output: -70                 | Program output: -18                
Correct output: -63                 | Program output: -49                
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -68                
Correct output: -58                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -8                  | Program output: -8                 
Correct output: 14                  | Program output: 53                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 55                 
Correct output: -63                 | Program output: 74                 
Correct output: -57                 | Program output: -31                
Correct output: -91                 | Program output: 59                 
Correct output: 33                  | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: 4                   | Program output: 51                 
Correct output: -90                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: 21                  | Program output: 21                 
Correct output: -39                 | Program output: 75                 
Correct output: -38                 | Program output: 15                 
Correct output: -97                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -40                
Correct output: -51                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_694} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while})
Lexicase best program: (exec_when () exec_k_when_autoconstructing () () boolean_invert_second_then_and tagged_694 boolean_and integer_div exec_dup_times () in1 boolean_yankdup boolean_stackdepth exec_yank integer_dup_times in4 boolean_dup_items integer_swap exec_do*range (boolean_not integer_mod boolean_flush) boolean_not exec_y_when_autoconstructing (boolean_yankdup exec_s_when_autoconstructing (boolean_pop in3 exec_y_when_autoconstructing () exec_if (integer_min) (integer_lt exec_do*while () integer_eq) print_integer exec_k_when_autoconstructing (exec_rot () (exec_do*times (boolean_invert_second_then_and) integer_flush boolean_eq exec_while ()) ()) ()) () ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_694} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while})
Zero cases best program: (exec_when () exec_k_when_autoconstructing () () boolean_invert_second_then_and tagged_694 boolean_and integer_div exec_dup_times () in1 boolean_yankdup boolean_stackdepth exec_yank integer_dup_times in4 boolean_dup_items integer_swap exec_do*range (boolean_not integer_mod boolean_flush) boolean_not exec_y_when_autoconstructing (boolean_yankdup exec_s_when_autoconstructing (boolean_pop in3 exec_y_when_autoconstructing () exec_if (integer_min) (integer_lt exec_do*while () integer_eq) print_integer exec_k_when_autoconstructing (exec_rot () (exec_do*times (boolean_invert_second_then_and) integer_flush boolean_eq exec_while ()) ()) ()) () ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 222 157 208 300 254 226 219 250 228)
Population mean number of elite cases: 2.32
Count of perfect (error zero) individuals by case: (252 222 157 208 300 254 226 219 250 228)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 2, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while})
Best program: (exec_when () exec_k_when_autoconstructing () () exec_k (integer_div) () exec_dup_times () in1 boolean_yankdup integer_empty integer_shove integer_dup_times in4 boolean_dup_items integer_swap exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (boolean_yankdup boolean_flush boolean_pop in3 exec_y_when_autoconstructing () exec_if (integer_min) (integer_lt integer_eq) exec_swap (print_boolean print_integer exec_rot () (exec_when (integer_flush boolean_eq exec_while ())) ()) ()))
Errors: [0 1 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 35
Size: 54
Percent parens: 0.352
--- Population Statistics ---
Average total errors in population: 7.684
Median total errors in population: 8
Error averages by case: (0.748 0.778 0.843 0.792 0.7 0.746 0.774 0.781 0.75 0.772)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.128
Average program size in population (points): 57.582
Average percent parens in population: 0.355
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.227
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3421396
--- Timings ---
Current time: 1559594172597 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.6 seconds, 47.6%
Fitness Testing:      5.3 seconds, 37.8%
Report:               1.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 40                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -12                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 18                 
Correct output: 38                  | Program output: 39                 
Correct output: 15                  | Program output: 28                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 55                 
Correct output: 30                  | Program output: 85                 
Correct output: 24                  | Program output: 24                 
Correct output: 60                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 70                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 31                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -66                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -30                
Correct output: -76                 | Program output: -60                
Correct output: -9                  | Program output: 9                  
Correct output: -25                 | Program output: 42                 
Correct output: -78                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -62                
Correct output: -13                 | Program output: -9                 
Correct output: -29                 | Program output: -24                
Correct output: -19                 | Program output: 38                 
Correct output: -6                  | Program output: 29                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -52                 | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -10                
Correct output: -81                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 13                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -8                  | Program output: -8                 
Correct output: 14                  | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -57                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: 4                   | Program output: 4                  
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -78                
Correct output: 21                  | Program output: 70                 
Correct output: -39                 | Program output: 12                 
Correct output: -38                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -40                
Correct output: -62                 | Program output: -49                
Correct output: -51                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 2, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_when () exec_k_when_autoconstructing () () exec_pop (boolean_yankdup boolean_and boolean_yankdup integer_rot integer_dec integer_dup_times) exec_dup_items exec_yank in4 integer_swap exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (exec_eq boolean_flush exec_s_when_autoconstructing (boolean_not integer_div boolean_pop integer_empty in1 exec_y_when_autoconstructing () integer_min) (exec_do*while () integer_eq) (print_boolean print_integer exec_rot () (exec_do*times (exec_when (exec_do*times (exec_k_when_autoconstructing (boolean_eq boolean_invert_second_then_and) ())))) ())))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 59
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 2, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_when () exec_k_when_autoconstructing () () exec_pop (boolean_yankdup boolean_and boolean_yankdup integer_rot integer_dec integer_dup_times) exec_dup_items exec_yank in4 integer_swap exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (exec_eq boolean_flush exec_s_when_autoconstructing (boolean_not integer_div boolean_pop integer_empty in1 exec_y_when_autoconstructing () integer_min) (exec_do*while () integer_eq) (print_boolean print_integer exec_rot () (exec_do*times (exec_when (exec_do*times (exec_k_when_autoconstructing (boolean_eq boolean_invert_second_then_and) ())))) ())))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 59
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 232 119 232 119 203 200 111 235 205)
Population mean number of elite cases: 1.89
Count of perfect (error zero) individuals by case: (232 232 119 232 119 203 200 111 235 205)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_do*while (exec_when () exec_k_when_autoconstructing () () boolean_invert_second_then_and exec_pop (boolean_yankdup exec_dup_times () boolean_yankdup integer_dup_times) exec_yank integer_dup_times in4) boolean_not integer_mod exec_s_when_autoconstructing (boolean_flush) (boolean_yankdup exec_s_when_autoconstructing (boolean_pop boolean_dup integer_max integer_empty in1 exec_y_when_autoconstructing () integer_min) (boolean_swap exec_do*while () boolean_empty) (print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (exec_rot () (exec_do*times (exec_when (exec_rot (integer_flush boolean_eq boolean_invert_second_then_and) () ()))) ()) ())) ())
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 63
Percent parens: 0.397
--- Population Statistics ---
Average total errors in population: 8.112
Median total errors in population: 10
Error averages by case: (0.768 0.768 0.881 0.768 0.881 0.797 0.8 0.889 0.765 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.089
Average program size in population (points): 56.234
Average percent parens in population: 0.339
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.233
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3900674
--- Timings ---
Current time: 1559594174455 milliseconds
Total Time:          15.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.8 seconds, 49.1%
Fitness Testing:      5.7 seconds, 36.3%
Report:               2.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 40                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -12                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 18                 
Correct output: 38                  | Program output: 39                 
Correct output: 15                  | Program output: 28                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 39                 
Correct output: 24                  | Program output: 24                 
Correct output: 60                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 31                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -30                
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -25                 | Program output: -25                
Correct output: -78                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -62                
Correct output: -13                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -6                  | Program output: -6                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -52                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 4                  
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -8                  | Program output: -8                 
Correct output: 14                  | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -57                 | Program output: -31                
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: 4                   | Program output: 4                  
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: 21                  | Program output: 21                 
Correct output: -39                 | Program output: 12                 
Correct output: -38                 | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -49                
Correct output: -51                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Lexicase best program: (exec_when () boolean_invert_first_then_and exec_pop (boolean_and exec_stackdepth exec_yank print_boolean) in4 print_boolean exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) boolean_flush exec_s_when_autoconstructing (integer_shove) (exec_s (boolean_not in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) () exec_do*while () boolean_rot print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (integer_min exec_do*while (exec_rot () (boolean_and exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ())) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 66
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Zero cases best program: (exec_when () boolean_invert_first_then_and exec_pop (boolean_and exec_stackdepth exec_yank print_boolean) in4 print_boolean exec_do*range (boolean_not integer_mod boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) boolean_flush exec_s_when_autoconstructing (integer_shove) (exec_s (boolean_not in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) () exec_do*while () boolean_rot print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (integer_min exec_do*while (exec_rot () (boolean_and exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ())) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 66
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 486 307 261 597 271 138 292 267 308)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (141 486 307 261 597 271 138 292 267 308)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Best program: (exec_when () boolean_invert_first_then_and exec_pop (integer_dup_items) boolean_and exec_stackdepth exec_yank integer_dup_times in4 print_boolean exec_do*range (integer_mod boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) boolean_flush exec_s_when_autoconstructing (integer_shove) (boolean_not in3 integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (integer_min print_integer exec_do*while (exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ())) ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 39
Size: 59
Percent parens: 0.339
--- Population Statistics ---
Average total errors in population: 6.932
Median total errors in population: 7
Error averages by case: (0.859 0.514 0.693 0.739 0.403 0.729 0.862 0.708 0.733 0.692)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.759
Average program size in population (points): 55.922
Average percent parens in population: 0.342
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4360609
--- Timings ---
Current time: 1559594176405 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.9 seconds, 50.5%
Fitness Testing:      6.2 seconds, 34.9%
Report:               2.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 40                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -12                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 72                 
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 18                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 60                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -25                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -62                
Correct output: -13                 | Program output: -13                
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -6                  | Program output: -6                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -52                 | Program output: -52                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 4                  
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -8                  | Program output: -8                 
Correct output: 14                  | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -43                 | Program output: -43                
Correct output: 4                   | Program output: 4                  
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: 21                  | Program output: 21                 
Correct output: -39                 | Program output: -39                
Correct output: -38                 | Program output: -38                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Lexicase best program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 66
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Zero cases best program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 66
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 256 171 467 476 320 264 255 348 262)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (262 256 171 467 476 320 264 255 348 262)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 2, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while})
Best program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 45
Size: 66
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.919
Median total errors in population: 8
Error averages by case: (0.738 0.744 0.829 0.533 0.524 0.68 0.736 0.745 0.652 0.738)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.24
Average program size in population (points): 57.338
Average percent parens in population: 0.329
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4916907
--- Timings ---
Current time: 1559594178491 milliseconds
Total Time:          19.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 51.2%
Fitness Testing:      6.7 seconds, 34.1%
Report:               2.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 66


Auto-simplifying with starting size: 66
step: 0
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 500
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 1000
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 1500
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 2000
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 2500
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 3000
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 3500
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 4000
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 4500
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

step: 5000
program: (exec_when () integer_shove in2 boolean_invert_first_then_and exec_pop (boolean_dup_times) integer_swap boolean_and exec_stackdepth exec_yank integer_dup_times in4 integer_min exec_do*range (exec_pop () boolean_not boolean_flush) exec_y_when_autoconstructing (in1 boolean_yankdup integer_min) exec_s_when_autoconstructing (integer_rot integer_shove) (boolean_not in4 integer_dup_items in3 exec_y_when_autoconstructing () integer_min) (boolean_empty) exec_do*while () print_boolean print_integer boolean_invert_first_then_and integer_lt exec_k_when_autoconstructing (integer_min exec_rot () (exec_k (exec_do*times (exec_when (boolean_eq boolean_invert_second_then_and exec_while ()))) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 66

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 40                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -12                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -12                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: 72                  | Program output: 72                 
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -14                 | Program output: -14                
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: 18                  | Program output: 18                 
Correct output: 38                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 10                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 60                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -9                  | Program output: -9                 
Correct output: -25                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -62                
Correct output: -13                 | Program output: -13                
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -6                  | Program output: -6                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -52                 | Program output: -52                
Correct output: -91                 | Program output: -91                
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: -54                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: 4                   | Program output: 4                  
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -8                  | Program output: -8                 
Correct output: 14                  | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -57                 | Program output: -57                
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -43                 | Program output: -43                
Correct output: 4                   | Program output: 4                  
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: 21                  | Program output: 21                 
Correct output: -39                 | Program output: -39                
Correct output: -38                 | Program output: -38                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
;;******************************
