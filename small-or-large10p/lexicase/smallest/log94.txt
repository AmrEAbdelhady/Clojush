Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-84 -84 -84 2] -84] [[79 85 85 85] 79] [[-6 -6 -6 19] -6] [[3 -8 -8 -8] -8] [[49 49 49 9] 9] [[8 -64 8 8] -64] [[-67 -16 -16 -16] -67] [[95 72 72 72] 72] [[-32 -32 -32 24] -32] [[-40 -35 -40 -40] -40] [(-93 -93 -93 -93) -93] [(-34 -34 -34 -34) -34] [(55 55 55 55) 55] [(-7 -7 -7 -7) -7] [(35 35 35 35) 35] [(42 54 90 8) 8] [(0 11 72 17) 0] [(64 79 50 61) 50] [(55 42 51 38) 38] [(17 63 50 20) 17] [(21 19 32 20) 19] [(38 73 43 75) 38] [(72 64 12 80) 12] [(27 60 92 74) 27] [(53 1 9 38) 1] [(44 38 90 14) 14] [(91 99 75 40) 40] [(50 96 79 45) 45] [(97 25 16 48) 16] [(42 89 97 30) 30] [(68 84 42 84) 42] [(52 91 64 90) 52] [(24 46 88 79) 24] [(80 97 100 8) 8] [(63 26 11 39) 11] [(-48 75 42 14) -48] [(-3 -10 62 -23) -23] [(-20 10 82 -56) -56] [(82 4 35 53) 4] [(31 -79 4 -60) -79] [(55 -11 75 -40) -40] [(35 -55 -7 -53) -55] [(64 -22 34 94) -22] [(-59 -54 76 50) -59] [(-23 -24 -45 -85) -85] [(66 -85 32 29) -85] [(45 0 -2 9) -2] [(99 10 -48 81) -48] [(-17 -45 37 -83) -83] [(-8 -97 -32 46) -97] [(-40 -6 50 -23) -40] [(1 -56 22 30) -56] [(29 97 -26 88) -26] [(5 50 44 -3) -3] [(28 -73 18 -74) -74] [(98 -62 3 41) -62] [(79 37 98 -62) -62] [(100 6 10 23) 6] [(-59 -63 77 25) -63] [(56 43 9 4) 4] [(13 63 91 -60) -60] [(83 -97 -29 86) -97] [(13 88 98 91) 13] [(71 -2 -29 50) -29] [(48 -86 26 -57) -86] [(89 18 80 -39) -39] [(73 23 86 -45) -45] [(24 50 -4 -38) -38] [(63 -11 34 54) -11] [(-2 87 98 -73) -73] [(-53 -39 78 -100) -100] [(-77 -6 41 56) -77] [(-62 -13 9 -28) -62] [(7 83 -99 -97) -99] [(-47 83 65 -86) -86] [(46 26 -18 75) -18] [(-54 -82 48 77) -82] [(70 -73 1 -56) -73] [(78 70 -41 -33) -41] [(-58 -28 -35 88) -58] [(45 29 55 -29) -29] [(-69 -75 -58 36) -75] [(39 36 6 -14) -14] [(-93 3 -2 -47) -93] [(-99 86 32 7) -99] [(7 17 -10 -46) -46] [(-43 -68 -34 80) -68] [(33 20 53 61) 20] [(-11 -24 23 35) -24] [(45 67 -77 -39) -77] [(-1 -26 -62 -59) -62] [(41 -48 -3 39) -48] [(-69 -87 85 -36) -87] [(51 -89 -35 32) -89] [(64 -83 -91 49) -91])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-84 -84 -84 2] -84]
Train Case:   6 | Input/Output: [[79 85 85 85] 79]
Train Case:   7 | Input/Output: [[-6 -6 -6 19] -6]
Train Case:   8 | Input/Output: [[3 -8 -8 -8] -8]
Train Case:   9 | Input/Output: [[49 49 49 9] 9]
Train Case:  10 | Input/Output: [[8 -64 8 8] -64]
Train Case:  11 | Input/Output: [[-67 -16 -16 -16] -67]
Train Case:  12 | Input/Output: [[95 72 72 72] 72]
Train Case:  13 | Input/Output: [[-32 -32 -32 24] -32]
Train Case:  14 | Input/Output: [[-40 -35 -40 -40] -40]
Train Case:  15 | Input/Output: [(-93 -93 -93 -93) -93]
Train Case:  16 | Input/Output: [(-34 -34 -34 -34) -34]
Train Case:  17 | Input/Output: [(55 55 55 55) 55]
Train Case:  18 | Input/Output: [(-7 -7 -7 -7) -7]
Train Case:  19 | Input/Output: [(35 35 35 35) 35]
Train Case:  20 | Input/Output: [(42 54 90 8) 8]
Train Case:  21 | Input/Output: [(0 11 72 17) 0]
Train Case:  22 | Input/Output: [(64 79 50 61) 50]
Train Case:  23 | Input/Output: [(55 42 51 38) 38]
Train Case:  24 | Input/Output: [(17 63 50 20) 17]
Train Case:  25 | Input/Output: [(21 19 32 20) 19]
Train Case:  26 | Input/Output: [(38 73 43 75) 38]
Train Case:  27 | Input/Output: [(72 64 12 80) 12]
Train Case:  28 | Input/Output: [(27 60 92 74) 27]
Train Case:  29 | Input/Output: [(53 1 9 38) 1]
Train Case:  30 | Input/Output: [(44 38 90 14) 14]
Train Case:  31 | Input/Output: [(91 99 75 40) 40]
Train Case:  32 | Input/Output: [(50 96 79 45) 45]
Train Case:  33 | Input/Output: [(97 25 16 48) 16]
Train Case:  34 | Input/Output: [(42 89 97 30) 30]
Train Case:  35 | Input/Output: [(68 84 42 84) 42]
Train Case:  36 | Input/Output: [(52 91 64 90) 52]
Train Case:  37 | Input/Output: [(24 46 88 79) 24]
Train Case:  38 | Input/Output: [(80 97 100 8) 8]
Train Case:  39 | Input/Output: [(63 26 11 39) 11]
Train Case:  40 | Input/Output: [(-48 75 42 14) -48]
Train Case:  41 | Input/Output: [(-3 -10 62 -23) -23]
Train Case:  42 | Input/Output: [(-20 10 82 -56) -56]
Train Case:  43 | Input/Output: [(82 4 35 53) 4]
Train Case:  44 | Input/Output: [(31 -79 4 -60) -79]
Train Case:  45 | Input/Output: [(55 -11 75 -40) -40]
Train Case:  46 | Input/Output: [(35 -55 -7 -53) -55]
Train Case:  47 | Input/Output: [(64 -22 34 94) -22]
Train Case:  48 | Input/Output: [(-59 -54 76 50) -59]
Train Case:  49 | Input/Output: [(-23 -24 -45 -85) -85]
Train Case:  50 | Input/Output: [(66 -85 32 29) -85]
Train Case:  51 | Input/Output: [(45 0 -2 9) -2]
Train Case:  52 | Input/Output: [(99 10 -48 81) -48]
Train Case:  53 | Input/Output: [(-17 -45 37 -83) -83]
Train Case:  54 | Input/Output: [(-8 -97 -32 46) -97]
Train Case:  55 | Input/Output: [(-40 -6 50 -23) -40]
Train Case:  56 | Input/Output: [(1 -56 22 30) -56]
Train Case:  57 | Input/Output: [(29 97 -26 88) -26]
Train Case:  58 | Input/Output: [(5 50 44 -3) -3]
Train Case:  59 | Input/Output: [(28 -73 18 -74) -74]
Train Case:  60 | Input/Output: [(98 -62 3 41) -62]
Train Case:  61 | Input/Output: [(79 37 98 -62) -62]
Train Case:  62 | Input/Output: [(100 6 10 23) 6]
Train Case:  63 | Input/Output: [(-59 -63 77 25) -63]
Train Case:  64 | Input/Output: [(56 43 9 4) 4]
Train Case:  65 | Input/Output: [(13 63 91 -60) -60]
Train Case:  66 | Input/Output: [(83 -97 -29 86) -97]
Train Case:  67 | Input/Output: [(13 88 98 91) 13]
Train Case:  68 | Input/Output: [(71 -2 -29 50) -29]
Train Case:  69 | Input/Output: [(48 -86 26 -57) -86]
Train Case:  70 | Input/Output: [(89 18 80 -39) -39]
Train Case:  71 | Input/Output: [(73 23 86 -45) -45]
Train Case:  72 | Input/Output: [(24 50 -4 -38) -38]
Train Case:  73 | Input/Output: [(63 -11 34 54) -11]
Train Case:  74 | Input/Output: [(-2 87 98 -73) -73]
Train Case:  75 | Input/Output: [(-53 -39 78 -100) -100]
Train Case:  76 | Input/Output: [(-77 -6 41 56) -77]
Train Case:  77 | Input/Output: [(-62 -13 9 -28) -62]
Train Case:  78 | Input/Output: [(7 83 -99 -97) -99]
Train Case:  79 | Input/Output: [(-47 83 65 -86) -86]
Train Case:  80 | Input/Output: [(46 26 -18 75) -18]
Train Case:  81 | Input/Output: [(-54 -82 48 77) -82]
Train Case:  82 | Input/Output: [(70 -73 1 -56) -73]
Train Case:  83 | Input/Output: [(78 70 -41 -33) -41]
Train Case:  84 | Input/Output: [(-58 -28 -35 88) -58]
Train Case:  85 | Input/Output: [(45 29 55 -29) -29]
Train Case:  86 | Input/Output: [(-69 -75 -58 36) -75]
Train Case:  87 | Input/Output: [(39 36 6 -14) -14]
Train Case:  88 | Input/Output: [(-93 3 -2 -47) -93]
Train Case:  89 | Input/Output: [(-99 86 32 7) -99]
Train Case:  90 | Input/Output: [(7 17 -10 -46) -46]
Train Case:  91 | Input/Output: [(-43 -68 -34 80) -68]
Train Case:  92 | Input/Output: [(33 20 53 61) 20]
Train Case:  93 | Input/Output: [(-11 -24 23 35) -24]
Train Case:  94 | Input/Output: [(45 67 -77 -39) -77]
Train Case:  95 | Input/Output: [(-1 -26 -62 -59) -62]
Train Case:  96 | Input/Output: [(41 -48 -3 39) -48]
Train Case:  97 | Input/Output: [(-69 -87 85 -36) -87]
Train Case:  98 | Input/Output: [(51 -89 -35 32) -89]
Train Case:  99 | Input/Output: [(64 -83 -91 49) -91]
Test Case:   0 | Input/Output: [[-87 -87 -84 -87] -87]
Test Case:   1 | Input/Output: [[33 -6 33 33] -6]
Test Case:   2 | Input/Output: [[5 5 5 -30] -30]
Test Case:   3 | Input/Output: [[4 38 38 38] 4]
Test Case:   4 | Input/Output: [[-28 28 28 28] -28]
Test Case:   5 | Input/Output: [[-51 -51 -51 95] -51]
Test Case:   6 | Input/Output: [[21 21 21 96] 21]
Test Case:   7 | Input/Output: [[27 43 27 27] 27]
Test Case:   8 | Input/Output: [[-100 -100 -100 45] -100]
Test Case:   9 | Input/Output: [[-29 94 -29 -29] -29]
Test Case:  10 | Input/Output: [[74 74 74 -33] -33]
Test Case:  11 | Input/Output: [[-26 -26 13 -26] -26]
Test Case:  12 | Input/Output: [[-59 -59 31 -59] -59]
Test Case:  13 | Input/Output: [[-4 -54 -54 -54] -54]
Test Case:  14 | Input/Output: [[-1 -1 73 -1] -1]
Test Case:  15 | Input/Output: [[82 82 82 76] 76]
Test Case:  16 | Input/Output: [[-51 -51 -51 -72] -72]
Test Case:  17 | Input/Output: [[63 63 63 91] 63]
Test Case:  18 | Input/Output: [[99 -99 99 99] -99]
Test Case:  19 | Input/Output: [[19 19 2 19] 2]
Test Case:  20 | Input/Output: [[-23 -23 -23 24] -23]
Test Case:  21 | Input/Output: [[99 -47 99 99] -47]
Test Case:  22 | Input/Output: [[-68 -68 8 -68] -68]
Test Case:  23 | Input/Output: [[-72 -72 53 -72] -72]
Test Case:  24 | Input/Output: [[48 48 4 48] 4]
Test Case:  25 | Input/Output: [[48 29 29 29] 29]
Test Case:  26 | Input/Output: [[-20 -20 26 -20] -20]
Test Case:  27 | Input/Output: [[88 88 -87 88] -87]
Test Case:  28 | Input/Output: [[5 5 5 64] 5]
Test Case:  29 | Input/Output: [[2 2 2 -39] -39]
Test Case:  30 | Input/Output: [[89 23 89 89] 23]
Test Case:  31 | Input/Output: [[-30 39 39 39] -30]
Test Case:  32 | Input/Output: [[-53 -53 -53 76] -53]
Test Case:  33 | Input/Output: [[-67 -67 -67 -22] -67]
Test Case:  34 | Input/Output: [[41 41 6 41] 6]
Test Case:  35 | Input/Output: [[78 53 53 53] 53]
Test Case:  36 | Input/Output: [[85 6 85 85] 6]
Test Case:  37 | Input/Output: [[-30 50 -30 -30] -30]
Test Case:  38 | Input/Output: [[-93 -93 -93 -20] -93]
Test Case:  39 | Input/Output: [[18 24 24 24] 18]
Test Case:  40 | Input/Output: [[-90 -90 -90 -88] -90]
Test Case:  41 | Input/Output: [[45 16 16 16] 16]
Test Case:  42 | Input/Output: [[-10 -10 -10 70] -10]
Test Case:  43 | Input/Output: [[-62 -62 -62 -51] -62]
Test Case:  44 | Input/Output: [[89 89 89 39] 39]
Test Case:  45 | Input/Output: [[44 -34 44 44] -34]
Test Case:  46 | Input/Output: [[60 60 28 60] 28]
Test Case:  47 | Input/Output: [[-35 -35 -35 47] -35]
Test Case:  48 | Input/Output: [[-74 -74 -36 -74] -74]
Test Case:  49 | Input/Output: [[-87 -87 -87 -27] -87]
Test Case:  50 | Input/Output: [[21 31 31 31] 21]
Test Case:  51 | Input/Output: [[-5 -5 -62 -5] -62]
Test Case:  52 | Input/Output: [[-23 -23 -23 22] -23]
Test Case:  53 | Input/Output: [[-23 -23 -4 -23] -23]
Test Case:  54 | Input/Output: [[-90 -90 14 -90] -90]
Test Case:  55 | Input/Output: [[-5 -74 -74 -74] -74]
Test Case:  56 | Input/Output: [[-54 22 22 22] -54]
Test Case:  57 | Input/Output: [[-46 -46 39 -46] -46]
Test Case:  58 | Input/Output: [[-23 -23 -60 -23] -60]
Test Case:  59 | Input/Output: [[-45 -45 -32 -45] -45]
Test Case:  60 | Input/Output: [[46 46 46 89] 46]
Test Case:  61 | Input/Output: [[-62 -62 87 -62] -62]
Test Case:  62 | Input/Output: [[76 -19 -19 -19] -19]
Test Case:  63 | Input/Output: [[9 9 76 9] 9]
Test Case:  64 | Input/Output: [[36 36 -28 36] -28]
Test Case:  65 | Input/Output: [[-88 76 -88 -88] -88]
Test Case:  66 | Input/Output: [[76 -100 -100 -100] -100]
Test Case:  67 | Input/Output: [[15 -62 -62 -62] -62]
Test Case:  68 | Input/Output: [[-20 -49 -49 -49] -49]
Test Case:  69 | Input/Output: [[22 66 22 22] 22]
Test Case:  70 | Input/Output: [[-31 -31 89 -31] -31]
Test Case:  71 | Input/Output: [[-31 18 -31 -31] -31]
Test Case:  72 | Input/Output: [[-55 -55 -55 -97] -97]
Test Case:  73 | Input/Output: [[-96 17 -96 -96] -96]
Test Case:  74 | Input/Output: [[67 67 -39 67] -39]
Test Case:  75 | Input/Output: [[-39 19 19 19] -39]
Test Case:  76 | Input/Output: [[3 3 -69 3] -69]
Test Case:  77 | Input/Output: [[59 -21 59 59] -21]
Test Case:  78 | Input/Output: [[61 61 30 61] 30]
Test Case:  79 | Input/Output: [[-73 -73 89 -73] -73]
Test Case:  80 | Input/Output: [[-90 -17 -17 -17] -90]
Test Case:  81 | Input/Output: [[-72 -72 -72 72] -72]
Test Case:  82 | Input/Output: [[-23 -23 -23 -87] -87]
Test Case:  83 | Input/Output: [[58 -99 -99 -99] -99]
Test Case:  84 | Input/Output: [[-1 53 53 53] -1]
Test Case:  85 | Input/Output: [[96 96 -77 96] -77]
Test Case:  86 | Input/Output: [[-77 -77 19 -77] -77]
Test Case:  87 | Input/Output: [[-3 25 -3 -3] -3]
Test Case:  88 | Input/Output: [[18 -50 18 18] -50]
Test Case:  89 | Input/Output: [[56 56 56 -75] -75]
Test Case:  90 | Input/Output: [[-29 -13 -29 -29] -29]
Test Case:  91 | Input/Output: [[29 -60 29 29] -60]
Test Case:  92 | Input/Output: [[-77 95 95 95] -77]
Test Case:  93 | Input/Output: [[-69 -69 15 -69] -69]
Test Case:  94 | Input/Output: [[-53 -14 -14 -14] -53]
Test Case:  95 | Input/Output: [[-89 -89 6 -89] -89]
Test Case:  96 | Input/Output: [[-54 86 86 86] -54]
Test Case:  97 | Input/Output: [[-67 -67 -67 -12] -67]
Test Case:  98 | Input/Output: [[-28 36 36 36] -28]
Test Case:  99 | Input/Output: [[-7 -7 -15 -7] -15]
Test Case: 100 | Input/Output: [(7 7 7 7) 7]
Test Case: 101 | Input/Output: [(48 48 48 48) 48]
Test Case: 102 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 103 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 104 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 105 | Input/Output: [(31 31 31 31) 31]
Test Case: 106 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 107 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 108 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 109 | Input/Output: [(26 26 26 26) 26]
Test Case: 110 | Input/Output: [(91 91 91 91) 91]
Test Case: 111 | Input/Output: [(84 84 84 84) 84]
Test Case: 112 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 113 | Input/Output: [(62 62 62 62) 62]
Test Case: 114 | Input/Output: [(19 19 19 19) 19]
Test Case: 115 | Input/Output: [(90 90 90 90) 90]
Test Case: 116 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 117 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 118 | Input/Output: [(65 65 65 65) 65]
Test Case: 119 | Input/Output: [(81 81 81 81) 81]
Test Case: 120 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 121 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 122 | Input/Output: [(13 13 13 13) 13]
Test Case: 123 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 124 | Input/Output: [(42 42 42 42) 42]
Test Case: 125 | Input/Output: [(28 28 28 28) 28]
Test Case: 126 | Input/Output: [(3 3 3 3) 3]
Test Case: 127 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 128 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 129 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 130 | Input/Output: [(22 22 22 22) 22]
Test Case: 131 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 132 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 133 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 134 | Input/Output: [(9 9 9 9) 9]
Test Case: 135 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 136 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 137 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 138 | Input/Output: [(24 24 24 24) 24]
Test Case: 139 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 140 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 141 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 142 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 143 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 144 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 145 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 146 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 147 | Input/Output: [(0 0 0 0) 0]
Test Case: 148 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 149 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 150 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 151 | Input/Output: [(77 77 77 77) 77]
Test Case: 152 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 153 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 154 | Input/Output: [(59 59 59 59) 59]
Test Case: 155 | Input/Output: [(18 18 18 18) 18]
Test Case: 156 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 157 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 158 | Input/Output: [(95 95 95 95) 95]
Test Case: 159 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 160 | Input/Output: [(38 38 38 38) 38]
Test Case: 161 | Input/Output: [(64 64 64 64) 64]
Test Case: 162 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 163 | Input/Output: [(16 16 16 16) 16]
Test Case: 164 | Input/Output: [(56 56 56 56) 56]
Test Case: 165 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 166 | Input/Output: [(16 16 16 16) 16]
Test Case: 167 | Input/Output: [(11 11 11 11) 11]
Test Case: 168 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 169 | Input/Output: [(26 26 26 26) 26]
Test Case: 170 | Input/Output: [(76 76 76 76) 76]
Test Case: 171 | Input/Output: [(37 37 37 37) 37]
Test Case: 172 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 173 | Input/Output: [(2 2 2 2) 2]
Test Case: 174 | Input/Output: [(88 88 88 88) 88]
Test Case: 175 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 176 | Input/Output: [(80 80 80 80) 80]
Test Case: 177 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 178 | Input/Output: [(68 68 68 68) 68]
Test Case: 179 | Input/Output: [(70 70 70 70) 70]
Test Case: 180 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 181 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 182 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 183 | Input/Output: [(54 54 54 54) 54]
Test Case: 184 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 185 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 186 | Input/Output: [(53 53 53 53) 53]
Test Case: 187 | Input/Output: [(5 5 5 5) 5]
Test Case: 188 | Input/Output: [(66 66 66 66) 66]
Test Case: 189 | Input/Output: [(42 42 42 42) 42]
Test Case: 190 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 191 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 192 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 193 | Input/Output: [(80 80 80 80) 80]
Test Case: 194 | Input/Output: [(36 36 36 36) 36]
Test Case: 195 | Input/Output: [(83 83 83 83) 83]
Test Case: 196 | Input/Output: [(66 66 66 66) 66]
Test Case: 197 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 198 | Input/Output: [(37 37 37 37) 37]
Test Case: 199 | Input/Output: [(39 39 39 39) 39]
Test Case: 200 | Input/Output: [(1 69 65 30) 1]
Test Case: 201 | Input/Output: [(62 59 22 10) 10]
Test Case: 202 | Input/Output: [(84 68 9 29) 9]
Test Case: 203 | Input/Output: [(4 43 9 66) 4]
Test Case: 204 | Input/Output: [(70 80 86 43) 43]
Test Case: 205 | Input/Output: [(9 28 37 26) 9]
Test Case: 206 | Input/Output: [(36 44 53 42) 36]
Test Case: 207 | Input/Output: [(88 8 38 57) 8]
Test Case: 208 | Input/Output: [(46 83 17 91) 17]
Test Case: 209 | Input/Output: [(86 96 16 85) 16]
Test Case: 210 | Input/Output: [(79 26 11 30) 11]
Test Case: 211 | Input/Output: [(12 90 99 44) 12]
Test Case: 212 | Input/Output: [(40 41 9 1) 1]
Test Case: 213 | Input/Output: [(27 51 29 63) 27]
Test Case: 214 | Input/Output: [(35 12 100 77) 12]
Test Case: 215 | Input/Output: [(72 78 86 17) 17]
Test Case: 216 | Input/Output: [(67 23 97 64) 23]
Test Case: 217 | Input/Output: [(82 81 61 90) 61]
Test Case: 218 | Input/Output: [(52 10 26 59) 10]
Test Case: 219 | Input/Output: [(46 92 1 59) 1]
Test Case: 220 | Input/Output: [(7 89 44 49) 7]
Test Case: 221 | Input/Output: [(91 97 48 9) 9]
Test Case: 222 | Input/Output: [(79 79 37 89) 37]
Test Case: 223 | Input/Output: [(47 3 74 43) 3]
Test Case: 224 | Input/Output: [(96 92 90 7) 7]
Test Case: 225 | Input/Output: [(67 77 80 98) 67]
Test Case: 226 | Input/Output: [(98 60 4 18) 4]
Test Case: 227 | Input/Output: [(55 66 80 63) 55]
Test Case: 228 | Input/Output: [(44 65 98 74) 44]
Test Case: 229 | Input/Output: [(33 27 65 35) 27]
Test Case: 230 | Input/Output: [(64 98 31 2) 2]
Test Case: 231 | Input/Output: [(1 19 34 99) 1]
Test Case: 232 | Input/Output: [(50 17 47 11) 11]
Test Case: 233 | Input/Output: [(28 81 56 89) 28]
Test Case: 234 | Input/Output: [(40 20 72 40) 20]
Test Case: 235 | Input/Output: [(63 7 24 91) 7]
Test Case: 236 | Input/Output: [(79 90 34 82) 34]
Test Case: 237 | Input/Output: [(38 9 35 44) 9]
Test Case: 238 | Input/Output: [(71 80 75 80) 71]
Test Case: 239 | Input/Output: [(44 60 20 32) 20]
Test Case: 240 | Input/Output: [(52 93 24 14) 14]
Test Case: 241 | Input/Output: [(4 1 32 60) 1]
Test Case: 242 | Input/Output: [(66 96 32 46) 32]
Test Case: 243 | Input/Output: [(23 68 21 66) 21]
Test Case: 244 | Input/Output: [(19 32 62 39) 19]
Test Case: 245 | Input/Output: [(79 89 85 32) 32]
Test Case: 246 | Input/Output: [(7 91 17 10) 7]
Test Case: 247 | Input/Output: [(76 25 46 69) 25]
Test Case: 248 | Input/Output: [(48 54 94 46) 46]
Test Case: 249 | Input/Output: [(93 12 98 86) 12]
Test Case: 250 | Input/Output: [(89 32 17 55) 17]
Test Case: 251 | Input/Output: [(61 87 89 39) 39]
Test Case: 252 | Input/Output: [(68 69 0 69) 0]
Test Case: 253 | Input/Output: [(91 60 51 7) 7]
Test Case: 254 | Input/Output: [(76 53 89 5) 5]
Test Case: 255 | Input/Output: [(69 41 2 35) 2]
Test Case: 256 | Input/Output: [(82 61 1 2) 1]
Test Case: 257 | Input/Output: [(27 33 69 43) 27]
Test Case: 258 | Input/Output: [(14 84 9 17) 9]
Test Case: 259 | Input/Output: [(53 93 29 41) 29]
Test Case: 260 | Input/Output: [(96 28 8 98) 8]
Test Case: 261 | Input/Output: [(12 53 57 70) 12]
Test Case: 262 | Input/Output: [(72 3 42 13) 3]
Test Case: 263 | Input/Output: [(44 21 25 67) 21]
Test Case: 264 | Input/Output: [(79 9 69 95) 9]
Test Case: 265 | Input/Output: [(27 80 68 31) 27]
Test Case: 266 | Input/Output: [(94 99 83 19) 19]
Test Case: 267 | Input/Output: [(67 6 24 67) 6]
Test Case: 268 | Input/Output: [(27 77 64 30) 27]
Test Case: 269 | Input/Output: [(76 62 56 43) 43]
Test Case: 270 | Input/Output: [(99 9 57 72) 9]
Test Case: 271 | Input/Output: [(92 33 15 35) 15]
Test Case: 272 | Input/Output: [(43 92 95 17) 17]
Test Case: 273 | Input/Output: [(10 9 23 20) 9]
Test Case: 274 | Input/Output: [(73 0 49 93) 0]
Test Case: 275 | Input/Output: [(55 95 61 99) 55]
Test Case: 276 | Input/Output: [(19 68 100 19) 19]
Test Case: 277 | Input/Output: [(100 23 14 23) 14]
Test Case: 278 | Input/Output: [(95 10 7 24) 7]
Test Case: 279 | Input/Output: [(14 56 60 72) 14]
Test Case: 280 | Input/Output: [(29 29 33 45) 29]
Test Case: 281 | Input/Output: [(70 12 99 52) 12]
Test Case: 282 | Input/Output: [(65 83 23 65) 23]
Test Case: 283 | Input/Output: [(52 13 52 35) 13]
Test Case: 284 | Input/Output: [(5 6 18 45) 5]
Test Case: 285 | Input/Output: [(79 64 48 36) 36]
Test Case: 286 | Input/Output: [(70 36 76 52) 36]
Test Case: 287 | Input/Output: [(67 57 40 20) 20]
Test Case: 288 | Input/Output: [(59 40 78 54) 40]
Test Case: 289 | Input/Output: [(75 100 75 99) 75]
Test Case: 290 | Input/Output: [(55 97 89 59) 55]
Test Case: 291 | Input/Output: [(63 77 11 56) 11]
Test Case: 292 | Input/Output: [(49 56 55 92) 49]
Test Case: 293 | Input/Output: [(100 6 97 19) 6]
Test Case: 294 | Input/Output: [(18 94 6 87) 6]
Test Case: 295 | Input/Output: [(97 80 52 2) 2]
Test Case: 296 | Input/Output: [(90 93 70 33) 33]
Test Case: 297 | Input/Output: [(68 92 75 2) 2]
Test Case: 298 | Input/Output: [(2 97 37 55) 2]
Test Case: 299 | Input/Output: [(79 93 80 28) 28]
Test Case: 300 | Input/Output: [(27 53 28 31) 27]
Test Case: 301 | Input/Output: [(66 90 57 12) 12]
Test Case: 302 | Input/Output: [(18 87 20 65) 18]
Test Case: 303 | Input/Output: [(62 61 99 31) 31]
Test Case: 304 | Input/Output: [(96 69 78 11) 11]
Test Case: 305 | Input/Output: [(96 1 30 63) 1]
Test Case: 306 | Input/Output: [(90 81 13 21) 13]
Test Case: 307 | Input/Output: [(98 79 80 5) 5]
Test Case: 308 | Input/Output: [(1 14 75 17) 1]
Test Case: 309 | Input/Output: [(95 40 10 18) 10]
Test Case: 310 | Input/Output: [(75 29 45 25) 25]
Test Case: 311 | Input/Output: [(65 9 46 30) 9]
Test Case: 312 | Input/Output: [(86 35 30 77) 30]
Test Case: 313 | Input/Output: [(11 0 65 94) 0]
Test Case: 314 | Input/Output: [(20 15 36 36) 15]
Test Case: 315 | Input/Output: [(11 40 95 32) 11]
Test Case: 316 | Input/Output: [(2 5 96 87) 2]
Test Case: 317 | Input/Output: [(29 85 35 41) 29]
Test Case: 318 | Input/Output: [(76 94 16 96) 16]
Test Case: 319 | Input/Output: [(86 80 51 32) 32]
Test Case: 320 | Input/Output: [(98 39 49 72) 39]
Test Case: 321 | Input/Output: [(35 38 0 40) 0]
Test Case: 322 | Input/Output: [(2 38 7 54) 2]
Test Case: 323 | Input/Output: [(19 57 3 31) 3]
Test Case: 324 | Input/Output: [(66 26 25 99) 25]
Test Case: 325 | Input/Output: [(82 63 20 91) 20]
Test Case: 326 | Input/Output: [(100 88 22 67) 22]
Test Case: 327 | Input/Output: [(95 27 79 40) 27]
Test Case: 328 | Input/Output: [(68 53 98 1) 1]
Test Case: 329 | Input/Output: [(88 81 92 12) 12]
Test Case: 330 | Input/Output: [(24 22 19 76) 19]
Test Case: 331 | Input/Output: [(32 49 68 49) 32]
Test Case: 332 | Input/Output: [(54 73 39 94) 39]
Test Case: 333 | Input/Output: [(19 62 16 13) 13]
Test Case: 334 | Input/Output: [(83 22 38 79) 22]
Test Case: 335 | Input/Output: [(47 74 0 63) 0]
Test Case: 336 | Input/Output: [(24 44 77 27) 24]
Test Case: 337 | Input/Output: [(42 93 66 86) 42]
Test Case: 338 | Input/Output: [(2 2 35 62) 2]
Test Case: 339 | Input/Output: [(57 57 32 6) 6]
Test Case: 340 | Input/Output: [(51 72 28 97) 28]
Test Case: 341 | Input/Output: [(3 68 70 100) 3]
Test Case: 342 | Input/Output: [(16 93 63 81) 16]
Test Case: 343 | Input/Output: [(81 38 25 6) 6]
Test Case: 344 | Input/Output: [(2 17 19 75) 2]
Test Case: 345 | Input/Output: [(98 65 72 86) 65]
Test Case: 346 | Input/Output: [(40 68 74 21) 21]
Test Case: 347 | Input/Output: [(26 57 45 52) 26]
Test Case: 348 | Input/Output: [(4 57 66 72) 4]
Test Case: 349 | Input/Output: [(61 24 31 2) 2]
Test Case: 350 | Input/Output: [(73 68 69 33) 33]
Test Case: 351 | Input/Output: [(61 96 93 84) 61]
Test Case: 352 | Input/Output: [(12 53 77 4) 4]
Test Case: 353 | Input/Output: [(32 37 3 26) 3]
Test Case: 354 | Input/Output: [(71 26 43 28) 26]
Test Case: 355 | Input/Output: [(59 61 40 36) 36]
Test Case: 356 | Input/Output: [(92 30 34 47) 30]
Test Case: 357 | Input/Output: [(6 40 47 75) 6]
Test Case: 358 | Input/Output: [(17 65 92 54) 17]
Test Case: 359 | Input/Output: [(81 24 18 91) 18]
Test Case: 360 | Input/Output: [(17 48 82 25) 17]
Test Case: 361 | Input/Output: [(15 39 25 3) 3]
Test Case: 362 | Input/Output: [(68 27 74 87) 27]
Test Case: 363 | Input/Output: [(10 78 79 14) 10]
Test Case: 364 | Input/Output: [(77 80 43 81) 43]
Test Case: 365 | Input/Output: [(84 89 31 92) 31]
Test Case: 366 | Input/Output: [(36 26 25 30) 25]
Test Case: 367 | Input/Output: [(58 76 11 56) 11]
Test Case: 368 | Input/Output: [(55 13 65 94) 13]
Test Case: 369 | Input/Output: [(29 80 71 32) 29]
Test Case: 370 | Input/Output: [(55 65 77 30) 30]
Test Case: 371 | Input/Output: [(19 36 12 96) 12]
Test Case: 372 | Input/Output: [(94 80 98 78) 78]
Test Case: 373 | Input/Output: [(53 85 88 48) 48]
Test Case: 374 | Input/Output: [(34 1 96 73) 1]
Test Case: 375 | Input/Output: [(58 68 71 83) 58]
Test Case: 376 | Input/Output: [(33 31 4 34) 4]
Test Case: 377 | Input/Output: [(12 39 90 80) 12]
Test Case: 378 | Input/Output: [(45 60 9 64) 9]
Test Case: 379 | Input/Output: [(83 4 31 54) 4]
Test Case: 380 | Input/Output: [(22 7 18 62) 7]
Test Case: 381 | Input/Output: [(1 71 86 60) 1]
Test Case: 382 | Input/Output: [(47 88 95 83) 47]
Test Case: 383 | Input/Output: [(39 15 69 6) 6]
Test Case: 384 | Input/Output: [(71 53 65 94) 53]
Test Case: 385 | Input/Output: [(28 45 67 12) 12]
Test Case: 386 | Input/Output: [(55 12 4 100) 4]
Test Case: 387 | Input/Output: [(19 77 96 4) 4]
Test Case: 388 | Input/Output: [(31 34 43 45) 31]
Test Case: 389 | Input/Output: [(39 24 33 48) 24]
Test Case: 390 | Input/Output: [(3 78 45 78) 3]
Test Case: 391 | Input/Output: [(67 20 66 35) 20]
Test Case: 392 | Input/Output: [(45 21 90 31) 21]
Test Case: 393 | Input/Output: [(81 1 13 69) 1]
Test Case: 394 | Input/Output: [(69 22 47 46) 22]
Test Case: 395 | Input/Output: [(70 91 47 82) 47]
Test Case: 396 | Input/Output: [(68 60 10 1) 1]
Test Case: 397 | Input/Output: [(91 16 60 25) 16]
Test Case: 398 | Input/Output: [(86 61 63 43) 43]
Test Case: 399 | Input/Output: [(94 66 21 51) 21]
Test Case: 400 | Input/Output: [(-2 -47 69 71) -47]
Test Case: 401 | Input/Output: [(79 55 -74 6) -74]
Test Case: 402 | Input/Output: [(37 87 -8 -77) -77]
Test Case: 403 | Input/Output: [(-90 6 -10 -73) -90]
Test Case: 404 | Input/Output: [(-32 9 72 96) -32]
Test Case: 405 | Input/Output: [(-52 50 -87 23) -87]
Test Case: 406 | Input/Output: [(64 71 -23 52) -23]
Test Case: 407 | Input/Output: [(8 7 15 45) 7]
Test Case: 408 | Input/Output: [(-42 67 100 -4) -42]
Test Case: 409 | Input/Output: [(56 -36 -8 31) -36]
Test Case: 410 | Input/Output: [(87 72 -100 -72) -100]
Test Case: 411 | Input/Output: [(-41 99 -74 -29) -74]
Test Case: 412 | Input/Output: [(-65 32 25 58) -65]
Test Case: 413 | Input/Output: [(36 99 -80 59) -80]
Test Case: 414 | Input/Output: [(30 97 98 -82) -82]
Test Case: 415 | Input/Output: [(-6 -12 -63 24) -63]
Test Case: 416 | Input/Output: [(-45 -4 14 -78) -78]
Test Case: 417 | Input/Output: [(-2 -26 34 19) -26]
Test Case: 418 | Input/Output: [(-90 55 26 16) -90]
Test Case: 419 | Input/Output: [(92 -41 -42 95) -42]
Test Case: 420 | Input/Output: [(-18 60 78 57) -18]
Test Case: 421 | Input/Output: [(-43 99 98 3) -43]
Test Case: 422 | Input/Output: [(-86 59 -71 32) -86]
Test Case: 423 | Input/Output: [(-15 -35 -61 96) -61]
Test Case: 424 | Input/Output: [(43 76 2 -36) -36]
Test Case: 425 | Input/Output: [(-18 -51 -40 -64) -64]
Test Case: 426 | Input/Output: [(52 -7 16 89) -7]
Test Case: 427 | Input/Output: [(35 83 -63 89) -63]
Test Case: 428 | Input/Output: [(29 78 -59 -72) -72]
Test Case: 429 | Input/Output: [(5 86 -49 10) -49]
Test Case: 430 | Input/Output: [(45 18 -26 -24) -26]
Test Case: 431 | Input/Output: [(-44 -14 5 -65) -65]
Test Case: 432 | Input/Output: [(85 -46 -43 -72) -72]
Test Case: 433 | Input/Output: [(-74 65 57 -20) -74]
Test Case: 434 | Input/Output: [(91 -52 75 67) -52]
Test Case: 435 | Input/Output: [(-76 28 -29 10) -76]
Test Case: 436 | Input/Output: [(-84 66 -91 -20) -91]
Test Case: 437 | Input/Output: [(85 67 -100 19) -100]
Test Case: 438 | Input/Output: [(98 -59 70 45) -59]
Test Case: 439 | Input/Output: [(9 79 28 31) 9]
Test Case: 440 | Input/Output: [(7 -74 -58 -14) -74]
Test Case: 441 | Input/Output: [(-92 -2 99 18) -92]
Test Case: 442 | Input/Output: [(12 -16 -54 53) -54]
Test Case: 443 | Input/Output: [(-21 -29 -58 -1) -58]
Test Case: 444 | Input/Output: [(85 -22 -11 -21) -22]
Test Case: 445 | Input/Output: [(10 -45 -69 -56) -69]
Test Case: 446 | Input/Output: [(26 52 -78 -18) -78]
Test Case: 447 | Input/Output: [(53 -2 2 -90) -90]
Test Case: 448 | Input/Output: [(8 -67 -87 34) -87]
Test Case: 449 | Input/Output: [(64 76 -53 -26) -53]
Test Case: 450 | Input/Output: [(44 -90 21 46) -90]
Test Case: 451 | Input/Output: [(29 71 16 -19) -19]
Test Case: 452 | Input/Output: [(-3 -84 -55 -41) -84]
Test Case: 453 | Input/Output: [(-83 -55 -38 -29) -83]
Test Case: 454 | Input/Output: [(70 27 45 14) 14]
Test Case: 455 | Input/Output: [(-15 -86 69 53) -86]
Test Case: 456 | Input/Output: [(95 49 62 48) 48]
Test Case: 457 | Input/Output: [(-22 -58 4 -47) -58]
Test Case: 458 | Input/Output: [(15 32 -17 86) -17]
Test Case: 459 | Input/Output: [(71 -69 -72 -18) -72]
Test Case: 460 | Input/Output: [(-97 -79 23 51) -97]
Test Case: 461 | Input/Output: [(31 -1 -43 65) -43]
Test Case: 462 | Input/Output: [(3 -48 -63 -97) -97]
Test Case: 463 | Input/Output: [(79 51 -44 93) -44]
Test Case: 464 | Input/Output: [(-29 -34 19 -43) -43]
Test Case: 465 | Input/Output: [(-39 52 -32 23) -39]
Test Case: 466 | Input/Output: [(15 -81 -14 59) -81]
Test Case: 467 | Input/Output: [(-29 19 -69 56) -69]
Test Case: 468 | Input/Output: [(-93 -48 -79 -81) -93]
Test Case: 469 | Input/Output: [(-74 40 -92 -6) -92]
Test Case: 470 | Input/Output: [(42 7 93 91) 7]
Test Case: 471 | Input/Output: [(-68 42 -77 31) -77]
Test Case: 472 | Input/Output: [(52 -26 -63 15) -63]
Test Case: 473 | Input/Output: [(91 -90 5 17) -90]
Test Case: 474 | Input/Output: [(-68 62 46 -53) -68]
Test Case: 475 | Input/Output: [(88 98 -99 -81) -99]
Test Case: 476 | Input/Output: [(-58 -38 -85 33) -85]
Test Case: 477 | Input/Output: [(-63 7 -67 -14) -67]
Test Case: 478 | Input/Output: [(24 53 40 -83) -83]
Test Case: 479 | Input/Output: [(-64 -69 -81 17) -81]
Test Case: 480 | Input/Output: [(-52 45 28 -89) -89]
Test Case: 481 | Input/Output: [(13 27 85 -59) -59]
Test Case: 482 | Input/Output: [(67 92 -49 -84) -84]
Test Case: 483 | Input/Output: [(84 -79 28 -14) -79]
Test Case: 484 | Input/Output: [(-14 29 89 24) -14]
Test Case: 485 | Input/Output: [(86 -22 2 94) -22]
Test Case: 486 | Input/Output: [(7 21 -72 -50) -72]
Test Case: 487 | Input/Output: [(-94 48 -91 -36) -94]
Test Case: 488 | Input/Output: [(87 -26 77 17) -26]
Test Case: 489 | Input/Output: [(18 -36 58 -25) -36]
Test Case: 490 | Input/Output: [(40 1 -98 35) -98]
Test Case: 491 | Input/Output: [(-92 42 83 -86) -92]
Test Case: 492 | Input/Output: [(47 -94 14 45) -94]
Test Case: 493 | Input/Output: [(66 66 -73 52) -73]
Test Case: 494 | Input/Output: [(-28 82 -70 70) -70]
Test Case: 495 | Input/Output: [(11 7 64 -90) -90]
Test Case: 496 | Input/Output: [(91 41 -67 -93) -93]
Test Case: 497 | Input/Output: [(58 -54 -65 87) -65]
Test Case: 498 | Input/Output: [(-67 77 -54 87) -67]
Test Case: 499 | Input/Output: [(-6 -16 54 -89) -89]
Test Case: 500 | Input/Output: [(95 -92 46 90) -92]
Test Case: 501 | Input/Output: [(-1 -2 -43 36) -43]
Test Case: 502 | Input/Output: [(-85 69 56 -39) -85]
Test Case: 503 | Input/Output: [(23 90 -95 2) -95]
Test Case: 504 | Input/Output: [(-17 29 69 20) -17]
Test Case: 505 | Input/Output: [(29 -71 -99 -49) -99]
Test Case: 506 | Input/Output: [(54 27 -97 -44) -97]
Test Case: 507 | Input/Output: [(62 -5 47 -44) -44]
Test Case: 508 | Input/Output: [(-6 0 -60 -74) -74]
Test Case: 509 | Input/Output: [(100 -82 -54 74) -82]
Test Case: 510 | Input/Output: [(11 59 -41 90) -41]
Test Case: 511 | Input/Output: [(-49 -78 80 -49) -78]
Test Case: 512 | Input/Output: [(-48 88 -93 61) -93]
Test Case: 513 | Input/Output: [(7 62 -4 -98) -98]
Test Case: 514 | Input/Output: [(26 -49 -83 -70) -83]
Test Case: 515 | Input/Output: [(-7 75 66 -77) -77]
Test Case: 516 | Input/Output: [(82 29 -65 -15) -65]
Test Case: 517 | Input/Output: [(41 11 -1 -5) -5]
Test Case: 518 | Input/Output: [(-31 -47 93 33) -47]
Test Case: 519 | Input/Output: [(-23 -91 -70 29) -91]
Test Case: 520 | Input/Output: [(-61 54 77 46) -61]
Test Case: 521 | Input/Output: [(-76 -27 16 45) -76]
Test Case: 522 | Input/Output: [(17 31 -80 76) -80]
Test Case: 523 | Input/Output: [(7 -14 -16 -55) -55]
Test Case: 524 | Input/Output: [(-42 -52 -6 78) -52]
Test Case: 525 | Input/Output: [(17 -40 -94 48) -94]
Test Case: 526 | Input/Output: [(-3 -70 -36 -1) -70]
Test Case: 527 | Input/Output: [(72 72 -91 -84) -91]
Test Case: 528 | Input/Output: [(-45 -98 98 -37) -98]
Test Case: 529 | Input/Output: [(79 2 73 -27) -27]
Test Case: 530 | Input/Output: [(-51 71 93 21) -51]
Test Case: 531 | Input/Output: [(-22 47 -83 85) -83]
Test Case: 532 | Input/Output: [(13 -67 -96 -67) -96]
Test Case: 533 | Input/Output: [(14 -14 -31 -17) -31]
Test Case: 534 | Input/Output: [(40 80 -25 98) -25]
Test Case: 535 | Input/Output: [(-85 -63 65 -72) -85]
Test Case: 536 | Input/Output: [(42 80 -70 74) -70]
Test Case: 537 | Input/Output: [(23 -78 41 -70) -78]
Test Case: 538 | Input/Output: [(-35 71 63 19) -35]
Test Case: 539 | Input/Output: [(86 41 -66 19) -66]
Test Case: 540 | Input/Output: [(-21 -57 -12 -79) -79]
Test Case: 541 | Input/Output: [(86 98 23 -3) -3]
Test Case: 542 | Input/Output: [(-76 -34 -85 1) -85]
Test Case: 543 | Input/Output: [(60 83 -100 -24) -100]
Test Case: 544 | Input/Output: [(-60 -82 39 -41) -82]
Test Case: 545 | Input/Output: [(12 17 -32 12) -32]
Test Case: 546 | Input/Output: [(-35 16 -74 -81) -81]
Test Case: 547 | Input/Output: [(-39 -81 -80 57) -81]
Test Case: 548 | Input/Output: [(-5 -39 -41 -17) -41]
Test Case: 549 | Input/Output: [(-34 60 50 -16) -34]
Test Case: 550 | Input/Output: [(-43 62 -34 89) -43]
Test Case: 551 | Input/Output: [(-31 -22 -59 -98) -98]
Test Case: 552 | Input/Output: [(89 9 39 99) 9]
Test Case: 553 | Input/Output: [(-8 60 7 -17) -17]
Test Case: 554 | Input/Output: [(-85 -3 28 45) -85]
Test Case: 555 | Input/Output: [(24 -31 -57 91) -57]
Test Case: 556 | Input/Output: [(-97 71 -65 74) -97]
Test Case: 557 | Input/Output: [(61 28 57 77) 28]
Test Case: 558 | Input/Output: [(-70 27 -29 97) -70]
Test Case: 559 | Input/Output: [(87 43 -4 -76) -76]
Test Case: 560 | Input/Output: [(-97 28 37 12) -97]
Test Case: 561 | Input/Output: [(54 93 41 -43) -43]
Test Case: 562 | Input/Output: [(-70 -9 -22 -10) -70]
Test Case: 563 | Input/Output: [(48 -86 -90 91) -90]
Test Case: 564 | Input/Output: [(51 -31 -73 73) -73]
Test Case: 565 | Input/Output: [(52 -2 -95 -61) -95]
Test Case: 566 | Input/Output: [(27 -47 19 11) -47]
Test Case: 567 | Input/Output: [(33 -84 96 90) -84]
Test Case: 568 | Input/Output: [(28 60 28 -4) -4]
Test Case: 569 | Input/Output: [(75 -80 -55 25) -80]
Test Case: 570 | Input/Output: [(-68 -98 -42 81) -98]
Test Case: 571 | Input/Output: [(61 -44 -15 48) -44]
Test Case: 572 | Input/Output: [(-12 89 44 -71) -71]
Test Case: 573 | Input/Output: [(-54 -87 33 42) -87]
Test Case: 574 | Input/Output: [(6 41 75 89) 6]
Test Case: 575 | Input/Output: [(-43 69 -22 10) -43]
Test Case: 576 | Input/Output: [(-73 60 20 27) -73]
Test Case: 577 | Input/Output: [(-43 48 -74 -97) -97]
Test Case: 578 | Input/Output: [(49 -49 47 41) -49]
Test Case: 579 | Input/Output: [(-100 -60 45 -23) -100]
Test Case: 580 | Input/Output: [(-64 -100 37 -61) -100]
Test Case: 581 | Input/Output: [(5 88 3 -12) -12]
Test Case: 582 | Input/Output: [(7 92 22 -70) -70]
Test Case: 583 | Input/Output: [(-31 -9 63 -22) -31]
Test Case: 584 | Input/Output: [(68 -47 43 34) -47]
Test Case: 585 | Input/Output: [(76 -22 9 43) -22]
Test Case: 586 | Input/Output: [(-23 51 17 41) -23]
Test Case: 587 | Input/Output: [(49 -58 -62 66) -62]
Test Case: 588 | Input/Output: [(-61 84 14 -98) -98]
Test Case: 589 | Input/Output: [(-91 -54 -96 72) -96]
Test Case: 590 | Input/Output: [(70 -69 51 89) -69]
Test Case: 591 | Input/Output: [(48 83 40 29) 29]
Test Case: 592 | Input/Output: [(96 32 74 100) 32]
Test Case: 593 | Input/Output: [(-65 87 -78 16) -78]
Test Case: 594 | Input/Output: [(-12 78 -9 63) -12]
Test Case: 595 | Input/Output: [(67 -32 53 -42) -42]
Test Case: 596 | Input/Output: [(-21 -59 -27 90) -59]
Test Case: 597 | Input/Output: [(-96 -21 -66 93) -96]
Test Case: 598 | Input/Output: [(97 45 -62 56) -62]
Test Case: 599 | Input/Output: [(38 -83 54 -74) -83]
Test Case: 600 | Input/Output: [(-97 -86 12 22) -97]
Test Case: 601 | Input/Output: [(32 -29 23 -36) -36]
Test Case: 602 | Input/Output: [(-51 -37 -82 76) -82]
Test Case: 603 | Input/Output: [(-86 -47 -51 -11) -86]
Test Case: 604 | Input/Output: [(94 22 -18 -51) -51]
Test Case: 605 | Input/Output: [(24 78 33 -55) -55]
Test Case: 606 | Input/Output: [(33 -39 -66 -97) -97]
Test Case: 607 | Input/Output: [(-81 -100 24 -64) -100]
Test Case: 608 | Input/Output: [(63 -14 17 -53) -53]
Test Case: 609 | Input/Output: [(-99 44 -76 39) -99]
Test Case: 610 | Input/Output: [(-12 -45 -21 -92) -92]
Test Case: 611 | Input/Output: [(55 5 -91 -59) -91]
Test Case: 612 | Input/Output: [(-64 87 -83 -17) -83]
Test Case: 613 | Input/Output: [(16 -35 -27 97) -35]
Test Case: 614 | Input/Output: [(19 -13 36 77) -13]
Test Case: 615 | Input/Output: [(69 57 -95 -57) -95]
Test Case: 616 | Input/Output: [(32 25 76 -87) -87]
Test Case: 617 | Input/Output: [(53 5 49 14) 5]
Test Case: 618 | Input/Output: [(19 -99 -26 32) -99]
Test Case: 619 | Input/Output: [(98 42 -55 -38) -55]
Test Case: 620 | Input/Output: [(-78 -79 -23 -38) -79]
Test Case: 621 | Input/Output: [(-52 87 -88 -21) -88]
Test Case: 622 | Input/Output: [(-29 29 47 35) -29]
Test Case: 623 | Input/Output: [(-51 -47 -49 -9) -51]
Test Case: 624 | Input/Output: [(31 -75 93 -61) -75]
Test Case: 625 | Input/Output: [(-76 95 50 75) -76]
Test Case: 626 | Input/Output: [(96 25 84 60) 25]
Test Case: 627 | Input/Output: [(-6 14 -51 7) -51]
Test Case: 628 | Input/Output: [(99 34 88 82) 34]
Test Case: 629 | Input/Output: [(-2 40 28 98) -2]
Test Case: 630 | Input/Output: [(-62 1 27 -1) -62]
Test Case: 631 | Input/Output: [(16 60 58 70) 16]
Test Case: 632 | Input/Output: [(70 -96 99 94) -96]
Test Case: 633 | Input/Output: [(-60 76 -2 -26) -60]
Test Case: 634 | Input/Output: [(89 61 -83 27) -83]
Test Case: 635 | Input/Output: [(48 -82 -16 -61) -82]
Test Case: 636 | Input/Output: [(-45 -68 59 -9) -68]
Test Case: 637 | Input/Output: [(-24 71 -91 -66) -91]
Test Case: 638 | Input/Output: [(63 -74 -17 42) -74]
Test Case: 639 | Input/Output: [(63 78 99 -92) -92]
Test Case: 640 | Input/Output: [(94 19 -2 24) -2]
Test Case: 641 | Input/Output: [(26 25 7 -42) -42]
Test Case: 642 | Input/Output: [(-16 89 -35 64) -35]
Test Case: 643 | Input/Output: [(-26 -26 36 -100) -100]
Test Case: 644 | Input/Output: [(-29 99 84 -35) -35]
Test Case: 645 | Input/Output: [(-43 -80 -86 11) -86]
Test Case: 646 | Input/Output: [(36 94 -64 -77) -77]
Test Case: 647 | Input/Output: [(-30 -83 12 76) -83]
Test Case: 648 | Input/Output: [(-14 69 22 -45) -45]
Test Case: 649 | Input/Output: [(-70 98 -43 31) -70]
Test Case: 650 | Input/Output: [(87 55 -24 25) -24]
Test Case: 651 | Input/Output: [(-58 -100 96 -84) -100]
Test Case: 652 | Input/Output: [(3 -72 -75 98) -75]
Test Case: 653 | Input/Output: [(-34 89 -22 72) -34]
Test Case: 654 | Input/Output: [(4 13 -79 73) -79]
Test Case: 655 | Input/Output: [(54 -26 0 -82) -82]
Test Case: 656 | Input/Output: [(43 50 -29 -23) -29]
Test Case: 657 | Input/Output: [(20 32 -75 -1) -75]
Test Case: 658 | Input/Output: [(-15 44 71 70) -15]
Test Case: 659 | Input/Output: [(-58 97 -83 94) -83]
Test Case: 660 | Input/Output: [(-50 -24 78 -44) -50]
Test Case: 661 | Input/Output: [(56 63 -53 -37) -53]
Test Case: 662 | Input/Output: [(-70 -64 98 5) -70]
Test Case: 663 | Input/Output: [(92 37 59 -48) -48]
Test Case: 664 | Input/Output: [(5 88 -59 45) -59]
Test Case: 665 | Input/Output: [(89 41 -31 48) -31]
Test Case: 666 | Input/Output: [(-100 -35 -98 -17) -100]
Test Case: 667 | Input/Output: [(-68 -45 57 -27) -68]
Test Case: 668 | Input/Output: [(-8 69 32 20) -8]
Test Case: 669 | Input/Output: [(89 44 -31 52) -31]
Test Case: 670 | Input/Output: [(15 53 60 -81) -81]
Test Case: 671 | Input/Output: [(15 -21 73 23) -21]
Test Case: 672 | Input/Output: [(-58 90 -73 57) -73]
Test Case: 673 | Input/Output: [(85 18 -27 65) -27]
Test Case: 674 | Input/Output: [(95 -96 -44 -63) -96]
Test Case: 675 | Input/Output: [(-74 -50 -18 -83) -83]
Test Case: 676 | Input/Output: [(-38 -25 -12 -89) -89]
Test Case: 677 | Input/Output: [(-20 -52 -30 81) -52]
Test Case: 678 | Input/Output: [(6 51 -71 -76) -76]
Test Case: 679 | Input/Output: [(92 16 -67 29) -67]
Test Case: 680 | Input/Output: [(0 82 -1 -86) -86]
Test Case: 681 | Input/Output: [(-77 11 -81 -62) -81]
Test Case: 682 | Input/Output: [(-22 -55 23 -10) -55]
Test Case: 683 | Input/Output: [(0 74 34 -66) -66]
Test Case: 684 | Input/Output: [(-25 57 -30 34) -30]
Test Case: 685 | Input/Output: [(77 -43 -47 -19) -47]
Test Case: 686 | Input/Output: [(-96 83 -42 -91) -96]
Test Case: 687 | Input/Output: [(-81 -17 9 -82) -82]
Test Case: 688 | Input/Output: [(-73 -11 83 29) -73]
Test Case: 689 | Input/Output: [(-49 45 43 -70) -70]
Test Case: 690 | Input/Output: [(8 47 -79 11) -79]
Test Case: 691 | Input/Output: [(44 48 -70 -7) -70]
Test Case: 692 | Input/Output: [(58 44 -96 -63) -96]
Test Case: 693 | Input/Output: [(-60 -4 -74 -66) -74]
Test Case: 694 | Input/Output: [(-27 98 7 -32) -32]
Test Case: 695 | Input/Output: [(-11 -98 -84 -16) -98]
Test Case: 696 | Input/Output: [(49 -93 -28 -43) -93]
Test Case: 697 | Input/Output: [(9 21 24 -5) -5]
Test Case: 698 | Input/Output: [(-41 -78 -73 -51) -78]
Test Case: 699 | Input/Output: [(82 -11 -50 -12) -50]
Test Case: 700 | Input/Output: [(11 -95 -85 16) -95]
Test Case: 701 | Input/Output: [(46 17 -10 51) -10]
Test Case: 702 | Input/Output: [(15 -89 -13 -59) -89]
Test Case: 703 | Input/Output: [(-92 11 6 -76) -92]
Test Case: 704 | Input/Output: [(68 -40 59 -51) -51]
Test Case: 705 | Input/Output: [(26 -59 77 92) -59]
Test Case: 706 | Input/Output: [(48 -72 81 -90) -90]
Test Case: 707 | Input/Output: [(-53 47 -15 -14) -53]
Test Case: 708 | Input/Output: [(39 18 -54 50) -54]
Test Case: 709 | Input/Output: [(-80 -29 -12 -64) -80]
Test Case: 710 | Input/Output: [(39 6 64 -46) -46]
Test Case: 711 | Input/Output: [(-42 46 -22 56) -42]
Test Case: 712 | Input/Output: [(-54 -27 52 -71) -71]
Test Case: 713 | Input/Output: [(91 -87 -4 -21) -87]
Test Case: 714 | Input/Output: [(-12 93 -80 -71) -80]
Test Case: 715 | Input/Output: [(52 -56 -47 34) -56]
Test Case: 716 | Input/Output: [(12 77 -73 -98) -98]
Test Case: 717 | Input/Output: [(81 27 -24 -97) -97]
Test Case: 718 | Input/Output: [(93 97 96 22) 22]
Test Case: 719 | Input/Output: [(33 -18 -34 49) -34]
Test Case: 720 | Input/Output: [(-92 -100 81 -80) -100]
Test Case: 721 | Input/Output: [(8 87 39 -67) -67]
Test Case: 722 | Input/Output: [(31 44 -19 53) -19]
Test Case: 723 | Input/Output: [(69 -75 16 -32) -75]
Test Case: 724 | Input/Output: [(91 -76 70 20) -76]
Test Case: 725 | Input/Output: [(-52 87 48 91) -52]
Test Case: 726 | Input/Output: [(-84 -46 -2 -56) -84]
Test Case: 727 | Input/Output: [(-44 -44 -50 38) -50]
Test Case: 728 | Input/Output: [(-79 81 54 -17) -79]
Test Case: 729 | Input/Output: [(95 11 -74 -9) -74]
Test Case: 730 | Input/Output: [(-73 -76 79 36) -76]
Test Case: 731 | Input/Output: [(-97 24 -60 56) -97]
Test Case: 732 | Input/Output: [(-12 47 99 -69) -69]
Test Case: 733 | Input/Output: [(12 -25 45 -61) -61]
Test Case: 734 | Input/Output: [(-41 6 -17 58) -41]
Test Case: 735 | Input/Output: [(-86 99 68 -15) -86]
Test Case: 736 | Input/Output: [(8 15 2 44) 2]
Test Case: 737 | Input/Output: [(56 98 73 79) 56]
Test Case: 738 | Input/Output: [(37 -29 -35 -69) -69]
Test Case: 739 | Input/Output: [(32 72 -42 53) -42]
Test Case: 740 | Input/Output: [(37 -65 3 -90) -90]
Test Case: 741 | Input/Output: [(81 52 25 -41) -41]
Test Case: 742 | Input/Output: [(-19 -19 34 64) -19]
Test Case: 743 | Input/Output: [(-99 -95 -89 -35) -99]
Test Case: 744 | Input/Output: [(12 74 -55 50) -55]
Test Case: 745 | Input/Output: [(29 -64 -32 69) -64]
Test Case: 746 | Input/Output: [(-23 25 44 -20) -23]
Test Case: 747 | Input/Output: [(-21 81 35 -42) -42]
Test Case: 748 | Input/Output: [(-80 34 -16 22) -80]
Test Case: 749 | Input/Output: [(-75 -13 78 -33) -75]
Test Case: 750 | Input/Output: [(-16 7 -72 55) -72]
Test Case: 751 | Input/Output: [(-76 29 56 -51) -76]
Test Case: 752 | Input/Output: [(78 -66 92 -50) -66]
Test Case: 753 | Input/Output: [(59 -18 39 -2) -18]
Test Case: 754 | Input/Output: [(-41 60 71 -37) -41]
Test Case: 755 | Input/Output: [(28 1 1 -46) -46]
Test Case: 756 | Input/Output: [(-38 -31 -97 -23) -97]
Test Case: 757 | Input/Output: [(18 96 91 47) 18]
Test Case: 758 | Input/Output: [(5 -64 58 -93) -93]
Test Case: 759 | Input/Output: [(92 -90 90 -10) -90]
Test Case: 760 | Input/Output: [(-80 -26 -61 -88) -88]
Test Case: 761 | Input/Output: [(-30 100 98 89) -30]
Test Case: 762 | Input/Output: [(69 5 65 -22) -22]
Test Case: 763 | Input/Output: [(-15 -75 91 -80) -80]
Test Case: 764 | Input/Output: [(74 -80 47 41) -80]
Test Case: 765 | Input/Output: [(-4 -46 -64 13) -64]
Test Case: 766 | Input/Output: [(-29 -58 84 -86) -86]
Test Case: 767 | Input/Output: [(44 45 30 -100) -100]
Test Case: 768 | Input/Output: [(-43 -84 -75 -100) -100]
Test Case: 769 | Input/Output: [(78 -31 -36 9) -36]
Test Case: 770 | Input/Output: [(-13 9 -68 -2) -68]
Test Case: 771 | Input/Output: [(28 -73 -29 -21) -73]
Test Case: 772 | Input/Output: [(-43 -20 -66 26) -66]
Test Case: 773 | Input/Output: [(-30 24 -48 -69) -69]
Test Case: 774 | Input/Output: [(5 80 0 50) 0]
Test Case: 775 | Input/Output: [(-32 -34 -38 78) -38]
Test Case: 776 | Input/Output: [(6 -14 78 66) -14]
Test Case: 777 | Input/Output: [(13 -15 -48 -5) -48]
Test Case: 778 | Input/Output: [(-34 50 3 66) -34]
Test Case: 779 | Input/Output: [(-13 -22 -25 50) -25]
Test Case: 780 | Input/Output: [(-27 37 -29 7) -29]
Test Case: 781 | Input/Output: [(-37 -51 -99 -71) -99]
Test Case: 782 | Input/Output: [(71 -43 50 -20) -43]
Test Case: 783 | Input/Output: [(-52 -1 -91 -94) -94]
Test Case: 784 | Input/Output: [(14 26 -6 -71) -71]
Test Case: 785 | Input/Output: [(76 -79 53 57) -79]
Test Case: 786 | Input/Output: [(-15 69 -93 -65) -93]
Test Case: 787 | Input/Output: [(17 -30 99 -73) -73]
Test Case: 788 | Input/Output: [(42 15 76 13) 13]
Test Case: 789 | Input/Output: [(75 20 82 -51) -51]
Test Case: 790 | Input/Output: [(-6 70 1 -53) -53]
Test Case: 791 | Input/Output: [(-3 38 -71 68) -71]
Test Case: 792 | Input/Output: [(26 -40 -4 -99) -99]
Test Case: 793 | Input/Output: [(61 79 -33 41) -33]
Test Case: 794 | Input/Output: [(48 22 -83 -30) -83]
Test Case: 795 | Input/Output: [(-56 -38 65 -11) -56]
Test Case: 796 | Input/Output: [(-54 35 95 -23) -54]
Test Case: 797 | Input/Output: [(-46 -47 100 -47) -47]
Test Case: 798 | Input/Output: [(59 -39 75 39) -39]
Test Case: 799 | Input/Output: [(-84 -35 32 -96) -96]
Test Case: 800 | Input/Output: [(-94 -48 79 76) -94]
Test Case: 801 | Input/Output: [(29 -77 -41 100) -77]
Test Case: 802 | Input/Output: [(13 37 78 29) 13]
Test Case: 803 | Input/Output: [(37 57 -37 28) -37]
Test Case: 804 | Input/Output: [(66 26 -89 -38) -89]
Test Case: 805 | Input/Output: [(69 -41 3 -68) -68]
Test Case: 806 | Input/Output: [(-17 14 41 -33) -33]
Test Case: 807 | Input/Output: [(-87 -15 96 -65) -87]
Test Case: 808 | Input/Output: [(85 -63 27 58) -63]
Test Case: 809 | Input/Output: [(-28 -16 100 -26) -28]
Test Case: 810 | Input/Output: [(-3 -70 -23 -33) -70]
Test Case: 811 | Input/Output: [(99 -30 16 -95) -95]
Test Case: 812 | Input/Output: [(-5 -15 -35 -83) -83]
Test Case: 813 | Input/Output: [(-11 -77 52 -63) -77]
Test Case: 814 | Input/Output: [(-65 57 44 -44) -65]
Test Case: 815 | Input/Output: [(35 59 52 35) 35]
Test Case: 816 | Input/Output: [(2 -18 91 77) -18]
Test Case: 817 | Input/Output: [(97 -93 62 -57) -93]
Test Case: 818 | Input/Output: [(2 53 13 -48) -48]
Test Case: 819 | Input/Output: [(94 -67 44 82) -67]
Test Case: 820 | Input/Output: [(31 40 30 10) 10]
Test Case: 821 | Input/Output: [(-82 -10 90 -88) -88]
Test Case: 822 | Input/Output: [(-82 7 -93 -43) -93]
Test Case: 823 | Input/Output: [(-28 100 -4 -67) -67]
Test Case: 824 | Input/Output: [(-30 -20 41 10) -30]
Test Case: 825 | Input/Output: [(-63 34 -14 -56) -63]
Test Case: 826 | Input/Output: [(-10 -34 -42 28) -42]
Test Case: 827 | Input/Output: [(63 87 42 -37) -37]
Test Case: 828 | Input/Output: [(49 13 13 58) 13]
Test Case: 829 | Input/Output: [(-28 -95 69 -26) -95]
Test Case: 830 | Input/Output: [(-59 75 -72 -69) -72]
Test Case: 831 | Input/Output: [(100 1 96 28) 1]
Test Case: 832 | Input/Output: [(-7 -47 20 46) -47]
Test Case: 833 | Input/Output: [(-17 76 -78 6) -78]
Test Case: 834 | Input/Output: [(-75 -17 -55 -16) -75]
Test Case: 835 | Input/Output: [(-99 80 -3 39) -99]
Test Case: 836 | Input/Output: [(74 -77 -6 -2) -77]
Test Case: 837 | Input/Output: [(-62 34 -80 -36) -80]
Test Case: 838 | Input/Output: [(35 -99 -40 3) -99]
Test Case: 839 | Input/Output: [(-14 -19 -91 21) -91]
Test Case: 840 | Input/Output: [(-20 26 -39 -38) -39]
Test Case: 841 | Input/Output: [(32 -40 -56 -49) -56]
Test Case: 842 | Input/Output: [(1 30 72 -61) -61]
Test Case: 843 | Input/Output: [(47 58 -6 15) -6]
Test Case: 844 | Input/Output: [(-1 -72 41 61) -72]
Test Case: 845 | Input/Output: [(-88 22 -90 56) -90]
Test Case: 846 | Input/Output: [(65 11 -72 -10) -72]
Test Case: 847 | Input/Output: [(86 -62 -67 -80) -80]
Test Case: 848 | Input/Output: [(15 -19 -34 -15) -34]
Test Case: 849 | Input/Output: [(20 -33 -53 -78) -78]
Test Case: 850 | Input/Output: [(-75 68 37 17) -75]
Test Case: 851 | Input/Output: [(-57 -78 -42 10) -78]
Test Case: 852 | Input/Output: [(25 92 -57 76) -57]
Test Case: 853 | Input/Output: [(-17 -31 17 -94) -94]
Test Case: 854 | Input/Output: [(-27 52 33 -99) -99]
Test Case: 855 | Input/Output: [(86 -48 70 -14) -48]
Test Case: 856 | Input/Output: [(60 42 70 -55) -55]
Test Case: 857 | Input/Output: [(17 -38 86 25) -38]
Test Case: 858 | Input/Output: [(85 -76 -84 -32) -84]
Test Case: 859 | Input/Output: [(-68 -91 -79 -20) -91]
Test Case: 860 | Input/Output: [(-38 13 -2 84) -38]
Test Case: 861 | Input/Output: [(-3 80 -44 47) -44]
Test Case: 862 | Input/Output: [(79 10 16 77) 10]
Test Case: 863 | Input/Output: [(-75 64 9 -69) -75]
Test Case: 864 | Input/Output: [(-6 -28 40 36) -28]
Test Case: 865 | Input/Output: [(-70 -69 42 -17) -70]
Test Case: 866 | Input/Output: [(90 -72 28 10) -72]
Test Case: 867 | Input/Output: [(3 -66 33 0) -66]
Test Case: 868 | Input/Output: [(49 -11 -99 -30) -99]
Test Case: 869 | Input/Output: [(-54 75 72 79) -54]
Test Case: 870 | Input/Output: [(-13 -84 67 17) -84]
Test Case: 871 | Input/Output: [(-48 -34 15 25) -48]
Test Case: 872 | Input/Output: [(9 -32 67 -84) -84]
Test Case: 873 | Input/Output: [(-45 -99 56 -77) -99]
Test Case: 874 | Input/Output: [(-82 3 59 9) -82]
Test Case: 875 | Input/Output: [(-22 44 43 -27) -27]
Test Case: 876 | Input/Output: [(6 86 -21 -12) -21]
Test Case: 877 | Input/Output: [(79 -7 -74 -34) -74]
Test Case: 878 | Input/Output: [(-97 -46 -25 46) -97]
Test Case: 879 | Input/Output: [(100 34 13 -19) -19]
Test Case: 880 | Input/Output: [(-39 -66 91 -99) -99]
Test Case: 881 | Input/Output: [(21 19 36 -31) -31]
Test Case: 882 | Input/Output: [(27 -74 88 3) -74]
Test Case: 883 | Input/Output: [(20 -94 -74 -39) -94]
Test Case: 884 | Input/Output: [(-98 -28 9 73) -98]
Test Case: 885 | Input/Output: [(-92 87 70 -46) -92]
Test Case: 886 | Input/Output: [(15 -19 -70 -21) -70]
Test Case: 887 | Input/Output: [(-83 33 -36 -32) -83]
Test Case: 888 | Input/Output: [(75 2 26 -53) -53]
Test Case: 889 | Input/Output: [(-14 100 -82 -77) -82]
Test Case: 890 | Input/Output: [(-34 30 -53 -80) -80]
Test Case: 891 | Input/Output: [(1 34 17 -51) -51]
Test Case: 892 | Input/Output: [(62 48 -62 -44) -62]
Test Case: 893 | Input/Output: [(-15 -80 -54 13) -80]
Test Case: 894 | Input/Output: [(-71 -14 62 -88) -88]
Test Case: 895 | Input/Output: [(-9 85 -16 8) -16]
Test Case: 896 | Input/Output: [(-71 33 33 54) -71]
Test Case: 897 | Input/Output: [(21 95 76 89) 21]
Test Case: 898 | Input/Output: [(-39 -99 97 94) -99]
Test Case: 899 | Input/Output: [(-16 60 96 58) -16]
Test Case: 900 | Input/Output: [(-17 -80 22 -98) -98]
Test Case: 901 | Input/Output: [(11 -8 -31 69) -31]
Test Case: 902 | Input/Output: [(17 27 35 3) 3]
Test Case: 903 | Input/Output: [(-48 -24 -96 40) -96]
Test Case: 904 | Input/Output: [(-87 98 85 -42) -87]
Test Case: 905 | Input/Output: [(-38 95 95 69) -38]
Test Case: 906 | Input/Output: [(63 -73 -16 -99) -99]
Test Case: 907 | Input/Output: [(79 11 -51 21) -51]
Test Case: 908 | Input/Output: [(-81 10 67 77) -81]
Test Case: 909 | Input/Output: [(-82 89 32 -14) -82]
Test Case: 910 | Input/Output: [(43 -68 -44 93) -68]
Test Case: 911 | Input/Output: [(-92 -59 87 -63) -92]
Test Case: 912 | Input/Output: [(19 -92 51 75) -92]
Test Case: 913 | Input/Output: [(-54 -46 -64 -14) -64]
Test Case: 914 | Input/Output: [(83 48 77 -52) -52]
Test Case: 915 | Input/Output: [(-13 64 -84 5) -84]
Test Case: 916 | Input/Output: [(11 6 -90 -63) -90]
Test Case: 917 | Input/Output: [(-35 -89 -69 28) -89]
Test Case: 918 | Input/Output: [(-40 32 37 25) -40]
Test Case: 919 | Input/Output: [(-14 -87 10 81) -87]
Test Case: 920 | Input/Output: [(-65 -96 78 -23) -96]
Test Case: 921 | Input/Output: [(-39 -43 -73 30) -73]
Test Case: 922 | Input/Output: [(-29 34 -75 -9) -75]
Test Case: 923 | Input/Output: [(57 91 -87 89) -87]
Test Case: 924 | Input/Output: [(2 -10 64 -32) -32]
Test Case: 925 | Input/Output: [(-69 -71 -22 29) -71]
Test Case: 926 | Input/Output: [(79 -54 88 44) -54]
Test Case: 927 | Input/Output: [(-79 2 -12 -14) -79]
Test Case: 928 | Input/Output: [(-87 -53 -48 74) -87]
Test Case: 929 | Input/Output: [(23 -44 72 79) -44]
Test Case: 930 | Input/Output: [(-94 -77 -3 60) -94]
Test Case: 931 | Input/Output: [(72 -34 -69 -56) -69]
Test Case: 932 | Input/Output: [(14 47 -52 -9) -52]
Test Case: 933 | Input/Output: [(-27 52 30 4) -27]
Test Case: 934 | Input/Output: [(82 33 -16 -18) -18]
Test Case: 935 | Input/Output: [(17 -24 -63 7) -63]
Test Case: 936 | Input/Output: [(25 -31 98 -21) -31]
Test Case: 937 | Input/Output: [(-57 7 3 -45) -57]
Test Case: 938 | Input/Output: [(52 36 85 -48) -48]
Test Case: 939 | Input/Output: [(-55 74 -31 -56) -56]
Test Case: 940 | Input/Output: [(12 -70 61 -75) -75]
Test Case: 941 | Input/Output: [(54 -29 80 93) -29]
Test Case: 942 | Input/Output: [(-62 83 77 -25) -62]
Test Case: 943 | Input/Output: [(4 -70 -95 87) -95]
Test Case: 944 | Input/Output: [(-87 93 -84 91) -87]
Test Case: 945 | Input/Output: [(-16 77 87 -74) -74]
Test Case: 946 | Input/Output: [(-4 38 81 -31) -31]
Test Case: 947 | Input/Output: [(-26 -46 7 11) -46]
Test Case: 948 | Input/Output: [(-18 4 -45 49) -45]
Test Case: 949 | Input/Output: [(-99 -8 94 21) -99]
Test Case: 950 | Input/Output: [(0 94 39 -55) -55]
Test Case: 951 | Input/Output: [(-10 70 -76 -84) -84]
Test Case: 952 | Input/Output: [(-43 11 -21 -2) -43]
Test Case: 953 | Input/Output: [(-47 27 -20 69) -47]
Test Case: 954 | Input/Output: [(-67 -46 -56 36) -67]
Test Case: 955 | Input/Output: [(81 8 -75 69) -75]
Test Case: 956 | Input/Output: [(-80 -35 -48 59) -80]
Test Case: 957 | Input/Output: [(-34 -74 84 -22) -74]
Test Case: 958 | Input/Output: [(-81 -79 33 31) -81]
Test Case: 959 | Input/Output: [(18 2 -54 -44) -54]
Test Case: 960 | Input/Output: [(-10 -57 63 -62) -62]
Test Case: 961 | Input/Output: [(-60 64 45 -44) -60]
Test Case: 962 | Input/Output: [(-42 87 -38 68) -42]
Test Case: 963 | Input/Output: [(63 -44 49 -23) -44]
Test Case: 964 | Input/Output: [(44 -30 94 40) -30]
Test Case: 965 | Input/Output: [(36 -4 -86 41) -86]
Test Case: 966 | Input/Output: [(53 -44 60 -56) -56]
Test Case: 967 | Input/Output: [(-33 8 -78 -26) -78]
Test Case: 968 | Input/Output: [(61 96 -58 33) -58]
Test Case: 969 | Input/Output: [(-45 -68 52 -67) -68]
Test Case: 970 | Input/Output: [(-21 -46 -44 4) -46]
Test Case: 971 | Input/Output: [(2 30 53 -59) -59]
Test Case: 972 | Input/Output: [(53 31 -70 28) -70]
Test Case: 973 | Input/Output: [(18 -99 -2 -52) -99]
Test Case: 974 | Input/Output: [(-7 100 -11 -32) -32]
Test Case: 975 | Input/Output: [(-89 -2 -35 15) -89]
Test Case: 976 | Input/Output: [(56 -59 -4 73) -59]
Test Case: 977 | Input/Output: [(80 25 -64 -57) -64]
Test Case: 978 | Input/Output: [(26 95 -65 -22) -65]
Test Case: 979 | Input/Output: [(59 3 10 -28) -28]
Test Case: 980 | Input/Output: [(-52 -57 -2 17) -57]
Test Case: 981 | Input/Output: [(3 96 -56 -50) -56]
Test Case: 982 | Input/Output: [(2 -68 36 57) -68]
Test Case: 983 | Input/Output: [(-95 37 -72 -70) -95]
Test Case: 984 | Input/Output: [(41 24 52 98) 24]
Test Case: 985 | Input/Output: [(3 -40 -79 87) -79]
Test Case: 986 | Input/Output: [(-91 -57 18 -52) -91]
Test Case: 987 | Input/Output: [(51 18 10 -73) -73]
Test Case: 988 | Input/Output: [(-11 18 -2 -22) -22]
Test Case: 989 | Input/Output: [(-31 92 -46 91) -46]
Test Case: 990 | Input/Output: [(-96 14 73 43) -96]
Test Case: 991 | Input/Output: [(-80 -41 4 -25) -80]
Test Case: 992 | Input/Output: [(96 -61 -13 -3) -61]
Test Case: 993 | Input/Output: [(-81 16 -35 61) -81]
Test Case: 994 | Input/Output: [(9 -5 39 14) -5]
Test Case: 995 | Input/Output: [(-46 -71 5 -4) -71]
Test Case: 996 | Input/Output: [(50 12 -14 98) -14]
Test Case: 997 | Input/Output: [(92 -36 -84 59) -84]
Test Case: 998 | Input/Output: [(-41 79 -6 87) -41]
Test Case: 999 | Input/Output: [(-78 -83 -71 -76) -83]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 12 10 -79 102 108 66 60 -32 63 -6 -122 -45 61 122 51 9
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-84 -84 -84 2] -84] [[79 85 85 85] 79] [[-6 -6 -6 19] -6] [[3 -8 -8 -8] -8] [[49 49 49 9] 9] [[8 -64 8 8] -64] [[-67 -16 -16 -16] -67] [[95 72 72 72] 72] [[-32 -32 -32 24] -32] [[-40 -35 -40 -40] -40] [(-93 -93 -93 -93) -93] [(-34 -34 -34 -34) -34] [(55 55 55 55) 55] [(-7 -7 -7 -7) -7] [(35 35 35 35) 35] [(42 54 90 8) 8] [(0 11 72 17) 0] [(64 79 50 61) 50] [(55 42 51 38) 38] [(17 63 50 20) 17] [(21 19 32 20) 19] [(38 73 43 75) 38] [(72 64 12 80) 12] [(27 60 92 74) 27] [(53 1 9 38) 1] [(44 38 90 14) 14] [(91 99 75 40) 40] [(50 96 79 45) 45] [(97 25 16 48) 16] [(42 89 97 30) 30] [(68 84 42 84) 42] [(52 91 64 90) 52] [(24 46 88 79) 24] [(80 97 100 8) 8] [(63 26 11 39) 11] [(-48 75 42 14) -48] [(-3 -10 62 -23) -23] [(-20 10 82 -56) -56] [(82 4 35 53) 4] [(31 -79 4 -60) -79] [(55 -11 75 -40) -40] [(35 -55 -7 -53) -55] [(64 -22 34 94) -22] [(-59 -54 76 50) -59] [(-23 -24 -45 -85) -85] [(66 -85 32 29) -85] [(45 0 -2 9) -2] [(99 10 -48 81) -48] [(-17 -45 37 -83) -83] [(-8 -97 -32 46) -97] [(-40 -6 50 -23) -40] [(1 -56 22 30) -56] [(29 97 -26 88) -26] [(5 50 44 -3) -3] [(28 -73 18 -74) -74] [(98 -62 3 41) -62] [(79 37 98 -62) -62] [(100 6 10 23) 6] [(-59 -63 77 25) -63] [(56 43 9 4) 4] [(13 63 91 -60) -60] [(83 -97 -29 86) -97] [(13 88 98 91) 13] [(71 -2 -29 50) -29] [(48 -86 26 -57) -86] [(89 18 80 -39) -39] [(73 23 86 -45) -45] [(24 50 -4 -38) -38] [(63 -11 34 54) -11] [(-2 87 98 -73) -73] [(-53 -39 78 -100) -100] [(-77 -6 41 56) -77] [(-62 -13 9 -28) -62] [(7 83 -99 -97) -99] [(-47 83 65 -86) -86] [(46 26 -18 75) -18] [(-54 -82 48 77) -82] [(70 -73 1 -56) -73] [(78 70 -41 -33) -41] [(-58 -28 -35 88) -58] [(45 29 55 -29) -29] [(-69 -75 -58 36) -75] [(39 36 6 -14) -14] [(-93 3 -2 -47) -93] [(-99 86 32 7) -99] [(7 17 -10 -46) -46] [(-43 -68 -34 80) -68] [(33 20 53 61) 20] [(-11 -24 23 35) -24] [(45 67 -77 -39) -77] [(-1 -26 -62 -59) -62] [(41 -48 -3 39) -48] [(-69 -87 85 -36) -87] [(51 -89 -35 32) -89] [(64 -83 -91 49) -91])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -84                 | Program output: 2                  
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: 19                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 9                  
Correct output: -64                 | Program output: 8                  
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 17                 
Correct output: 50                  | Program output: 61                 
Correct output: 38                  | Program output: 38                 
Correct output: 17                  | Program output: 20                 
Correct output: 19                  | Program output: 20                 
Correct output: 38                  | Program output: 75                 
Correct output: 12                  | Program output: 80                 
Correct output: 27                  | Program output: 74                 
Correct output: 1                   | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 45                  | Program output: 45                 
Correct output: 16                  | Program output: 48                 
Correct output: 30                  | Program output: 30                 
Correct output: 42                  | Program output: 84                 
Correct output: 52                  | Program output: 90                 
Correct output: 24                  | Program output: 79                 
Correct output: 8                   | Program output: 8                  
Correct output: 11                  | Program output: 39                 
Correct output: -48                 | Program output: 14                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: -56                
Correct output: 4                   | Program output: 53                 
Correct output: -79                 | Program output: -60                
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: -53                
Correct output: -22                 | Program output: 94                 
Correct output: -59                 | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: 29                 
Correct output: -2                  | Program output: 9                  
Correct output: -48                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: 46                 
Correct output: -40                 | Program output: -23                
Correct output: -56                 | Program output: 30                 
Correct output: -26                 | Program output: 88                 
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 23                 
Correct output: -63                 | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 86                 
Correct output: 13                  | Program output: 91                 
Correct output: -29                 | Program output: 50                 
Correct output: -86                 | Program output: -57                
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -38                 | Program output: -38                
Correct output: -11                 | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 56                 
Correct output: -62                 | Program output: -28                
Correct output: -99                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -18                 | Program output: 75                 
Correct output: -82                 | Program output: 77                 
Correct output: -73                 | Program output: -56                
Correct output: -41                 | Program output: -33                
Correct output: -58                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: 36                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -47                
Correct output: -99                 | Program output: 7                  
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 80                 
Correct output: 20                  | Program output: 61                 
Correct output: -24                 | Program output: 35                 
Correct output: -77                 | Program output: -39                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 39                 
Correct output: -87                 | Program output: -36                
Correct output: -89                 | Program output: 32                 
Correct output: -91                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction tag_exec_853} {:close 0, :instruction integer_min} {:close 1, :instruction print_newline} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction -66} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_while (integer_gt) boolean_empty boolean_invert_second_then_and integer_fromboolean integer_div integer_eq integer_shove boolean_xor exec_when () tag_exec_853 (integer_min print_newline) exec_stackdepth boolean_frominteger integer_swap boolean_not integer_yankdup -66 exec_yank exec_do*count (boolean_invert_first_then_and exec_k_when_autoconstructing (integer_dup_times in4 boolean_rot exec_y_when_autoconstructing (exec_empty) print_integer exec_y_when_autoconstructing ()) ()))
Lexicase best errors: [0 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction tag_exec_853} {:close 0, :instruction integer_min} {:close 1, :instruction print_newline} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction -66} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_while (integer_gt) boolean_empty boolean_invert_second_then_and integer_fromboolean integer_div integer_eq integer_shove boolean_xor exec_when () tag_exec_853 (integer_min print_newline) exec_stackdepth boolean_frominteger integer_swap boolean_not integer_yankdup -66 exec_yank exec_do*count (boolean_invert_first_then_and exec_k_when_autoconstructing (integer_dup_times in4 boolean_rot exec_y_when_autoconstructing (exec_empty) print_integer exec_y_when_autoconstructing ()) ()))
Zero cases best errors: [0 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 2 13 7 7 2 1 15 2 1)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (8 2 13 7 7 2 1 15 2 1)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction 22})
Best program: (exec_if (in4) (print_integer boolean_eq integer_flush 22))
Errors: [0 1 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 6
Size: 9
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 9.942
Median total errors in population: 10
Error averages by case: (0.992 0.998 0.987 0.993 0.993 0.998 0.999 0.985 0.998 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.655
Average program size in population (points): 69.954
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 456638
--- Timings ---
Current time: 1559594138124 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 31.5%
Fitness Testing:      1.5 seconds, 64.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 54                 
Correct output: 0                   | Program output: 11                 
Correct output: 50                  | Program output: 79                 
Correct output: 38                  | Program output: 42                 
Correct output: 17                  | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 38                  | Program output: 73                 
Correct output: 12                  | Program output: 64                 
Correct output: 27                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 38                 
Correct output: 40                  | Program output: 99                 
Correct output: 45                  | Program output: 96                 
Correct output: 16                  | Program output: 25                 
Correct output: 30                  | Program output: 89                 
Correct output: 42                  | Program output: 84                 
Correct output: 52                  | Program output: 91                 
Correct output: 24                  | Program output: 46                 
Correct output: 8                   | Program output: 97                 
Correct output: 11                  | Program output: 26                 
Correct output: -48                 | Program output: 75                 
Correct output: -23                 | Program output: -10                
Correct output: -56                 | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -54                
Correct output: -85                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: 0                  
Correct output: -48                 | Program output: 10                 
Correct output: -83                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -6                 
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: 97                 
Correct output: -3                  | Program output: 50                 
Correct output: -74                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 43                 
Correct output: -60                 | Program output: 63                 
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 88                 
Correct output: -29                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 18                 
Correct output: -45                 | Program output: 23                 
Correct output: -38                 | Program output: 50                 
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: 87                 
Correct output: -100                | Program output: -39                
Correct output: -77                 | Program output: -6                 
Correct output: -62                 | Program output: -13                
Correct output: -99                 | Program output: 83                 
Correct output: -86                 | Program output: 83                 
Correct output: -18                 | Program output: 26                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: 70                 
Correct output: -58                 | Program output: -28                
Correct output: -29                 | Program output: 29                 
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: 36                 
Correct output: -93                 | Program output: 3                  
Correct output: -99                 | Program output: 86                 
Correct output: -46                 | Program output: 17                 
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: 67                 
Correct output: -62                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_177} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_786} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_571} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_518} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_309} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction 77})
Lexicase best program: (tagged_177 boolean_dup_items exec_eq in4 print_integer tagged_786 integer_inc exec_if (integer_gte print_exec (integer_lte print_exec (integer_yank) boolean_yank exec_eq exec_do*while (integer_dup_times) boolean_dup integer_eq exec_dup_items exec_swap () () integer_mod) boolean_invert_second_then_and exec_dup (integer_fromboolean integer_sub integer_sub)) (boolean_dup_items tagged_571 boolean_eq in2 boolean_yank print_integer exec_flush) exec_y_when_autoconstructing () boolean_yank print_integer integer_empty exec_dup_items print_newline integer_lte integer_pop integer_dup_items integer_yankdup integer_mult integer_gt exec_s () (integer_gte) (integer_mult exec_do*while (integer_pop) exec_rot (exec_while (exec_yankdup) exec_do*while () integer_gt) (exec_k_when_autoconstructing (exec_if (exec_noop in1 integer_empty exec_empty exec_swap (exec_yankdup boolean_invert_second_then_and) (boolean_stackdepth exec_do*times (exec_shove (integer_empty tagged_518) integer_dup_items integer_stackdepth exec_shove (boolean_eq boolean_yank integer_gte exec_do*while (tagged_309 exec_noop exec_while () boolean_yankdup integer_mult) print_integer integer_lt) in1 77))) ()) ()) ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 116
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_177} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_786} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_571} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_518} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_309} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction 77})
Zero cases best program: (tagged_177 boolean_dup_items exec_eq in4 print_integer tagged_786 integer_inc exec_if (integer_gte print_exec (integer_lte print_exec (integer_yank) boolean_yank exec_eq exec_do*while (integer_dup_times) boolean_dup integer_eq exec_dup_items exec_swap () () integer_mod) boolean_invert_second_then_and exec_dup (integer_fromboolean integer_sub integer_sub)) (boolean_dup_items tagged_571 boolean_eq in2 boolean_yank print_integer exec_flush) exec_y_when_autoconstructing () boolean_yank print_integer integer_empty exec_dup_items print_newline integer_lte integer_pop integer_dup_items integer_yankdup integer_mult integer_gt exec_s () (integer_gte) (integer_mult exec_do*while (integer_pop) exec_rot (exec_while (exec_yankdup) exec_do*while () integer_gt) (exec_k_when_autoconstructing (exec_if (exec_noop in1 integer_empty exec_empty exec_swap (exec_yankdup boolean_invert_second_then_and) (boolean_stackdepth exec_do*times (exec_shove (integer_empty tagged_518) integer_dup_items integer_stackdepth exec_shove (boolean_eq boolean_yank integer_gte exec_do*while (tagged_309 exec_noop exec_while () boolean_yankdup integer_mult) print_integer integer_lt) in1 77))) ()) ()) ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 116
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 171 141 316 316 141 141 141 2 3)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (3 171 141 316 316 141 141 141 2 3)
Population mean number of perfect (error zero) cases: 1.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_177} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_786} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_571} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction tagged_518} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_309} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction 77})
Best program: (tagged_177 boolean_dup_items exec_eq in4 print_integer tagged_786 exec_yankdup exec_if (integer_gte print_exec (boolean_swap integer_lte print_exec (integer_yank) boolean_swap exec_do*while (integer_dup_times) boolean_dup integer_eq exec_swap () () integer_gt integer_mod) boolean_invert_second_then_and exec_dup (integer_fromboolean integer_sub integer_mod) integer_sub) () boolean_dup_items boolean_and tagged_571 exec_y_when_autoconstructing (boolean_eq in2 boolean_yank print_integer exec_flush) boolean_yank print_integer integer_dup exec_dup_items integer_lte integer_pop integer_shove integer_dup_items exec_do*while (integer_yankdup integer_mult integer_gt) exec_s () (integer_sub) (integer_gte) exec_do*while (integer_pop) exec_rot (exec_yankdup) (exec_do*while () integer_gt) (exec_k_when_autoconstructing (exec_if (integer_dup_times exec_noop integer_empty exec_empty exec_yankdup boolean_invert_second_then_and) (boolean_stackdepth exec_do*times (tagged_518) integer_dup_items integer_stackdepth exec_shove (boolean_eq boolean_yank integer_gte exec_do*while (tagged_309 exec_noop exec_while () boolean_yankdup print_integer in1 77)))) ()))
Errors: [1 1 0 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 83
Size: 110
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 8.625
Median total errors in population: 10
Error averages by case: (0.997 0.829 0.859 0.684 0.684 0.859 0.859 0.859 0.998 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.28
Average program size in population (points): 85.945
Average percent parens in population: 0.279
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.97
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.97
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 835747
--- Timings ---
Current time: 1559594139990 milliseconds
Total Time:           4.3 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         1.8 seconds, 42.3%
Fitness Testing:      2.1 seconds, 48.7%
Report:               0.3 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -35                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 54                 
Correct output: 0                   | Program output: 11                 
Correct output: 50                  | Program output: 79                 
Correct output: 38                  | Program output: 42                 
Correct output: 17                  | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 38                  | Program output: 73                 
Correct output: 12                  | Program output: 64                 
Correct output: 27                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 38                 
Correct output: 40                  | Program output: 99                 
Correct output: 45                  | Program output: 96                 
Correct output: 16                  | Program output: 25                 
Correct output: 30                  | Program output: 89                 
Correct output: 42                  | Program output: 84                 
Correct output: 52                  | Program output: 91                 
Correct output: 24                  | Program output: 46                 
Correct output: 8                   | Program output: 97                 
Correct output: 11                  | Program output: 26                 
Correct output: -48                 | Program output: 75                 
Correct output: -23                 | Program output: -10                
Correct output: -56                 | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -54                
Correct output: -85                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: 0                  
Correct output: -48                 | Program output: 10                 
Correct output: -83                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -6                 
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: 97                 
Correct output: -3                  | Program output: 50                 
Correct output: -74                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 43                 
Correct output: -60                 | Program output: 63                 
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 88                 
Correct output: -29                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 18                 
Correct output: -45                 | Program output: 23                 
Correct output: -38                 | Program output: 50                 
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: 87                 
Correct output: -100                | Program output: -39                
Correct output: -77                 | Program output: -6                 
Correct output: -62                 | Program output: -13                
Correct output: -99                 | Program output: 83                 
Correct output: -86                 | Program output: 83                 
Correct output: -18                 | Program output: 26                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: 70                 
Correct output: -58                 | Program output: -28                
Correct output: -29                 | Program output: 29                 
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: 36                 
Correct output: -93                 | Program output: 3                  
Correct output: -99                 | Program output: 86                 
Correct output: -46                 | Program output: 17                 
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: 67                 
Correct output: -62                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_177} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_786} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_571} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction tagged_518} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_309} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction 77})
Lexicase best program: (tagged_177 boolean_dup_items exec_eq print_integer tagged_786 integer_inc exec_if (integer_gte integer_min print_exec (integer_lte integer_yank) exec_do*while (integer_dup_times) boolean_dup integer_eq exec_dup_items integer_gt integer_mod) (boolean_invert_second_then_and exec_shove (exec_dup (integer_sub integer_mod) integer_sub)) boolean_dup_items boolean_dup_items boolean_and tagged_571 exec_y_when_autoconstructing (boolean_eq in2 boolean_yank print_integer exec_flush) boolean_yank boolean_or integer_dup exec_stackdepth exec_do*count (integer_lte integer_pop) integer_dup_items exec_do*while (integer_yankdup integer_mult exec_s () (boolean_yankdup integer_gte) (integer_mult integer_mult exec_do*while (integer_pop) exec_yankdup) integer_gt) exec_if (integer_lt integer_dup_times integer_empty integer_mod integer_empty) (exec_swap (exec_yankdup boolean_invert_second_then_and) (boolean_dup boolean_stackdepth exec_do*times (exec_shove (tagged_518) exec_shove (boolean_stackdepth integer_dup_items boolean_yank integer_gte exec_do*while (tagged_309 exec_noop print_boolean in1 boolean_yankdup integer_mult) print_integer in1 exec_flush) 77))))
Lexicase best errors: [1 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 107
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_177} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_786} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_571} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction tagged_518} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_309} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction 77})
Zero cases best program: (tagged_177 boolean_dup_items exec_eq print_integer tagged_786 integer_inc exec_if (integer_gte integer_min print_exec (integer_lte integer_yank) exec_do*while (integer_dup_times) boolean_dup integer_eq exec_dup_items integer_gt integer_mod) (boolean_invert_second_then_and exec_shove (exec_dup (integer_sub integer_mod) integer_sub)) boolean_dup_items boolean_dup_items boolean_and tagged_571 exec_y_when_autoconstructing (boolean_eq in2 boolean_yank print_integer exec_flush) boolean_yank boolean_or integer_dup exec_stackdepth exec_do*count (integer_lte integer_pop) integer_dup_items exec_do*while (integer_yankdup integer_mult exec_s () (boolean_yankdup integer_gte) (integer_mult integer_mult exec_do*while (integer_pop) exec_yankdup) integer_gt) exec_if (integer_lt integer_dup_times integer_empty integer_mod integer_empty) (exec_swap (exec_yankdup boolean_invert_second_then_and) (boolean_dup boolean_stackdepth exec_do*times (exec_shove (tagged_518) exec_shove (boolean_stackdepth integer_dup_items boolean_yank integer_gte exec_do*while (tagged_309 exec_noop print_boolean in1 boolean_yankdup integer_mult) print_integer in1 exec_flush) 77))))
Zero cases best errors: [1 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 107
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 14 83 198 15 222 199 83 198 198)
Population mean number of elite cases: 1.29
Count of perfect (error zero) individuals by case: (85 14 83 198 15 222 199 83 198 198)
Population mean number of perfect (error zero) cases: 1.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_177} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_786} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_571} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 1, :instruction tagged_518} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 0, :instruction 77})
Best program: (tagged_177 boolean_dup_items exec_eq integer_inc in4 integer_shove tagged_786 exec_if (integer_gte print_exec (integer_lte print_exec (integer_yank) exec_do*while (integer_dup_times) boolean_dup integer_eq exec_dup_items exec_swap () () integer_gt boolean_invert_second_then_and exec_dup (integer_fromboolean integer_sub integer_gt integer_rot integer_mod) integer_sub)) (boolean_dup_items boolean_and integer_eq tagged_571 exec_y_when_autoconstructing (in2 boolean_yank print_integer exec_flush) boolean_yank print_integer integer_dup integer_empty exec_dup_items) integer_lte integer_pop integer_dup_items exec_swap (exec_do*while (integer_mult integer_gt) exec_s () (integer_gte) (integer_mult exec_do*while (integer_dup_items integer_pop) exec_rot (exec_yankdup) (exec_do*while () exec_k_when_autoconstructing (integer_dup_times exec_noop integer_empty exec_empty exec_swap (exec_yankdup boolean_invert_second_then_and) (boolean_stackdepth exec_do*times (exec_shove (print_newline tagged_518) integer_dup_items exec_yankdup integer_stackdepth boolean_eq boolean_yank integer_gte exec_do*while (print_boolean exec_while () boolean_yankdup integer_mult) print_integer integer_lt) 77)) ()) ())) ())
Errors: [1 1 1 0 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 85
Size: 114
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 8.705
Median total errors in population: 9
Error averages by case: (0.915 0.986 0.917 0.802 0.985 0.778 0.801 0.917 0.802 0.802)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 84.28
Average program size in population (points): 114.183
Average percent parens in population: 0.262
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.204
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1294632
--- Timings ---
Current time: 1559594141958 milliseconds
Total Time:           6.2 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         3.0 seconds, 47.4%
Fitness Testing:      2.6 seconds, 42.4%
Report:               0.5 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 79                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: 3                  
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: 72                  | Program output: 95                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 64                 
Correct output: 38                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 12                  | Program output: 72                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 53                 
Correct output: 14                  | Program output: 44                 
Correct output: 40                  | Program output: 91                 
Correct output: 45                  | Program output: 50                 
Correct output: 16                  | Program output: 97                 
Correct output: 30                  | Program output: 42                 
Correct output: 42                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 80                 
Correct output: 11                  | Program output: 63                 
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -3                 
Correct output: -56                 | Program output: -20                
Correct output: 4                   | Program output: 82                 
Correct output: -79                 | Program output: 31                 
Correct output: -40                 | Program output: 55                 
Correct output: -55                 | Program output: 35                 
Correct output: -22                 | Program output: 64                 
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -23                
Correct output: -85                 | Program output: 66                 
Correct output: -2                  | Program output: 45                 
Correct output: -48                 | Program output: 99                 
Correct output: -83                 | Program output: -17                
Correct output: -97                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 1                  
Correct output: -26                 | Program output: 29                 
Correct output: -3                  | Program output: 5                  
Correct output: -74                 | Program output: 28                 
Correct output: -62                 | Program output: 98                 
Correct output: -62                 | Program output: 79                 
Correct output: 6                   | Program output: 100                
Correct output: -63                 | Program output: -59                
Correct output: 4                   | Program output: 56                 
Correct output: -60                 | Program output: 13                 
Correct output: -97                 | Program output: 83                 
Correct output: 13                  | Program output: 13                 
Correct output: -29                 | Program output: 71                 
Correct output: -86                 | Program output: 48                 
Correct output: -39                 | Program output: 89                 
Correct output: -45                 | Program output: 73                 
Correct output: -38                 | Program output: 24                 
Correct output: -11                 | Program output: 63                 
Correct output: -73                 | Program output: -2                 
Correct output: -100                | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -99                 | Program output: 7                  
Correct output: -86                 | Program output: -47                
Correct output: -18                 | Program output: 46                 
Correct output: -82                 | Program output: -54                
Correct output: -73                 | Program output: 70                 
Correct output: -41                 | Program output: 78                 
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 45                 
Correct output: -75                 | Program output: -69                
Correct output: -14                 | Program output: 39                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -46                 | Program output: 7                  
Correct output: -68                 | Program output: -43                
Correct output: 20                  | Program output: 33                 
Correct output: -24                 | Program output: -11                
Correct output: -77                 | Program output: 45                 
Correct output: -62                 | Program output: -1                 
Correct output: -48                 | Program output: 41                 
Correct output: -87                 | Program output: -69                
Correct output: -89                 | Program output: 51                 
Correct output: -91                 | Program output: 64                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_177} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_786} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_245} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction -36} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_882} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction tagged_518} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction 77})
Lexicase best program: (integer_sub tagged_177 integer_sub integer_swap boolean_dup_items exec_eq in4 integer_pop exec_s_when_autoconstructing (print_integer tagged_786 integer_inc tag_integer_245 integer_gte integer_yank) (exec_do*while (in3) boolean_dup integer_eq exec_dup_items exec_swap () () integer_gt integer_mod) (boolean_invert_second_then_and boolean_stackdepth exec_dup (integer_fromboolean integer_sub integer_mod) integer_sub) boolean_dup_items boolean_and exec_y_when_autoconstructing (boolean_eq in2 boolean_yank print_integer exec_flush) boolean_yank print_integer integer_dup integer_lte boolean_and exec_dup_items integer_div boolean_eq integer_pop integer_yankdup integer_mult integer_gt integer_gte integer_mult integer_pop exec_rot (-36 exec_yankdup) (integer_dup exec_do*while () integer_gt) (exec_if (exec_shove (integer_dup_times exec_noop exec_empty exec_swap (print_integer exec_yankdup boolean_stackdepth tagged_882) (exec_do*times (exec_shove (tagged_518) integer_dup_items integer_stackdepth exec_shove (boolean_yank exec_swap (integer_gte exec_do*while (exec_while () integer_dec) boolean_yankdup integer_eq integer_mult) (print_integer integer_add) integer_lt) in1 77)))) ()))
Lexicase best errors: [1 1 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 114
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_177} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_786} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_245} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction -36} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_882} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction tagged_518} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction 77})
Zero cases best program: (integer_sub tagged_177 integer_sub integer_swap boolean_dup_items exec_eq in4 integer_pop exec_s_when_autoconstructing (print_integer tagged_786 integer_inc tag_integer_245 integer_gte integer_yank) (exec_do*while (in3) boolean_dup integer_eq exec_dup_items exec_swap () () integer_gt integer_mod) (boolean_invert_second_then_and boolean_stackdepth exec_dup (integer_fromboolean integer_sub integer_mod) integer_sub) boolean_dup_items boolean_and exec_y_when_autoconstructing (boolean_eq in2 boolean_yank print_integer exec_flush) boolean_yank print_integer integer_dup integer_lte boolean_and exec_dup_items integer_div boolean_eq integer_pop integer_yankdup integer_mult integer_gt integer_gte integer_mult integer_pop exec_rot (-36 exec_yankdup) (integer_dup exec_do*while () integer_gt) (exec_if (exec_shove (integer_dup_times exec_noop exec_empty exec_swap (print_integer exec_yankdup boolean_stackdepth tagged_882) (exec_do*times (exec_shove (tagged_518) integer_dup_items integer_stackdepth exec_shove (boolean_yank exec_swap (integer_gte exec_do*while (exec_while () integer_dec) boolean_yankdup integer_eq integer_mult) (print_integer integer_add) integer_lt) in1 77)))) ()))
Zero cases best errors: [1 1 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 114
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 64 238 120 161 238 237 161 161 120)
Population mean number of elite cases: 1.62
Count of perfect (error zero) individuals by case: (119 64 238 120 161 238 237 161 161 120)
Population mean number of perfect (error zero) cases: 1.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_sub} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction integer_pop} {:close 2, :instruction boolean_swap})
Best program: (exec_do*while (integer_gte integer_lt in1 print_integer) exec_eq integer_empty integer_yankdup integer_dec exec_yankdup exec_yank exec_flush exec_yank integer_sub exec_y_when_autoconstructing (exec_when (exec_s () (boolean_invert_second_then_and boolean_dup) (integer_yankdup exec_yank) exec_k_when_autoconstructing (integer_dec integer_min exec_do*range (in3 integer_gte exec_rot () (integer_mult integer_dec integer_sub) () exec_swap () () boolean_yank) boolean_yankdup boolean_empty exec_do*count (boolean_yank)) (boolean_dup exec_shove (in2 in2) integer_pop boolean_swap))))
Errors: [1 1 0 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 43
Size: 60
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 8.381
Median total errors in population: 7
Error averages by case: (0.881 0.936 0.762 0.88 0.839 0.762 0.763 0.839 0.839 0.88)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.474
Average program size in population (points): 101.486
Average percent parens in population: 0.266
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1659529
--- Timings ---
Current time: 1559594143892 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.3 seconds, 51.8%
Fitness Testing:      3.1 seconds, 37.2%
Report:               0.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: 8                  
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 90                 
Correct output: 0                   | Program output: 72                 
Correct output: 50                  | Program output: 50                 
Correct output: 38                  | Program output: 51                 
Correct output: 17                  | Program output: 50                 
Correct output: 19                  | Program output: 32                 
Correct output: 38                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 92                 
Correct output: 1                   | Program output: 9                  
Correct output: 14                  | Program output: 90                 
Correct output: 40                  | Program output: 75                 
Correct output: 45                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 97                 
Correct output: 42                  | Program output: 42                 
Correct output: 52                  | Program output: 64                 
Correct output: 24                  | Program output: 88                 
Correct output: 8                   | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -48                 | Program output: 42                 
Correct output: -23                 | Program output: 62                 
Correct output: -56                 | Program output: 82                 
Correct output: 4                   | Program output: 35                 
Correct output: -79                 | Program output: 4                  
Correct output: -40                 | Program output: 75                 
Correct output: -55                 | Program output: -7                 
Correct output: -22                 | Program output: 34                 
Correct output: -59                 | Program output: 76                 
Correct output: -85                 | Program output: -45                
Correct output: -85                 | Program output: 32                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 37                 
Correct output: -97                 | Program output: -32                
Correct output: -40                 | Program output: 50                 
Correct output: -56                 | Program output: 22                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: 44                 
Correct output: -74                 | Program output: 18                 
Correct output: -62                 | Program output: 3                  
Correct output: -62                 | Program output: 98                 
Correct output: 6                   | Program output: 10                 
Correct output: -63                 | Program output: 77                 
Correct output: 4                   | Program output: 9                  
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -29                
Correct output: 13                  | Program output: 98                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: 26                 
Correct output: -39                 | Program output: 80                 
Correct output: -45                 | Program output: 86                 
Correct output: -38                 | Program output: -4                 
Correct output: -11                 | Program output: 34                 
Correct output: -73                 | Program output: 98                 
Correct output: -100                | Program output: 78                 
Correct output: -77                 | Program output: 41                 
Correct output: -62                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 65                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 48                 
Correct output: -73                 | Program output: 1                  
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -35                
Correct output: -29                 | Program output: 55                 
Correct output: -75                 | Program output: -58                
Correct output: -14                 | Program output: 6                  
Correct output: -93                 | Program output: -2                 
Correct output: -99                 | Program output: 32                 
Correct output: -46                 | Program output: -10                
Correct output: -68                 | Program output: -34                
Correct output: 20                  | Program output: 53                 
Correct output: -24                 | Program output: 23                 
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -3                 
Correct output: -87                 | Program output: 85                 
Correct output: -89                 | Program output: -35                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction -8} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_575} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_when} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_stackdepth exec_k_when_autoconstructing () () in3 print_integer -8 integer_dup_items integer_shove integer_swap exec_flush in3 integer_gt exec_dup_items integer_mult boolean_flush exec_dup (integer_fromboolean boolean_eq exec_when (integer_gte boolean_eq) integer_swap) exec_flush integer_dec exec_rot (exec_while (print_boolean exec_do*count () boolean_eq) print_newline integer_dup_items integer_dup_items print_newline integer_add boolean_dup_items) (exec_empty integer_flush integer_sub boolean_xor tag_integer_575 exec_when (integer_gte boolean_swap boolean_dup_times integer_eq exec_do*times (integer_add boolean_not in1 exec_dup_times () exec_dup (exec_swap (exec_do*times (exec_k_when_autoconstructing (boolean_shove integer_gte integer_flush boolean_frominteger exec_do*times () integer_mult) (exec_dup (boolean_swap) boolean_dup_times exec_y_when_autoconstructing (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_xor exec_when ()) (tag_exec_470 (in1 boolean_frominteger exec_dup (exec_dup_items integer_yank exec_dup_times () exec_stackdepth integer_lt integer_gte integer_rot integer_fromboolean boolean_frominteger exec_y () boolean_rot integer_pop integer_rot integer_gt exec_yankdup exec_eq integer_max) exec_yank boolean_eq integer_gt) in3 exec_pop (boolean_swap) boolean_dup_times) (exec_k_when_autoconstructing (print_integer integer_stackdepth) ()))))) ())))) ())
Lexicase best errors: [1 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 131
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction -8} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_575} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_when} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_stackdepth exec_k_when_autoconstructing () () in3 print_integer -8 integer_dup_items integer_shove integer_swap exec_flush in3 integer_gt exec_dup_items integer_mult boolean_flush exec_dup (integer_fromboolean boolean_eq exec_when (integer_gte boolean_eq) integer_swap) exec_flush integer_dec exec_rot (exec_while (print_boolean exec_do*count () boolean_eq) print_newline integer_dup_items integer_dup_items print_newline integer_add boolean_dup_items) (exec_empty integer_flush integer_sub boolean_xor tag_integer_575 exec_when (integer_gte boolean_swap boolean_dup_times integer_eq exec_do*times (integer_add boolean_not in1 exec_dup_times () exec_dup (exec_swap (exec_do*times (exec_k_when_autoconstructing (boolean_shove integer_gte integer_flush boolean_frominteger exec_do*times () integer_mult) (exec_dup (boolean_swap) boolean_dup_times exec_y_when_autoconstructing (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_xor exec_when ()) (tag_exec_470 (in1 boolean_frominteger exec_dup (exec_dup_items integer_yank exec_dup_times () exec_stackdepth integer_lt integer_gte integer_rot integer_fromboolean boolean_frominteger exec_y () boolean_rot integer_pop integer_rot integer_gt exec_yankdup exec_eq integer_max) exec_yank boolean_eq integer_gt) in3 exec_pop (boolean_swap) boolean_dup_times) (exec_k_when_autoconstructing (print_integer integer_stackdepth) ()))))) ())))) ())
Zero cases best errors: [1 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 131
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 230 69 442 66 196 197 66 443 145)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (196 230 69 442 66 196 197 66 443 145)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Best program: (exec_s (integer_max exec_stackdepth integer_gt in4 in3 print_integer integer_dup_items) (integer_shove exec_dup_times ()) (integer_swap integer_gt exec_dup_items exec_k_when_autoconstructing (integer_sub exec_dup (exec_k (boolean_empty boolean_yank) (boolean_eq) integer_swap) exec_k_when_autoconstructing (exec_flush) (integer_mult exec_dup (integer_dec boolean_pop exec_rot (boolean_yankdup) () (exec_while (exec_do*count () print_newline integer_dup_items integer_dup_items exec_swap (integer_add in3) (in2 integer_sub boolean_xor exec_rot (exec_when (integer_gt boolean_swap integer_eq in2 in1 exec_dup (exec_do*times (exec_k_when_autoconstructing (integer_dec print_boolean) (integer_sub) integer_dup_times boolean_invert_first_then_and exec_do*times () integer_mult) exec_yank boolean_swap) exec_k (exec_y_when_autoconstructing (boolean_invert_second_then_and exec_s_when_autoconstructing () (in3 boolean_shove) (boolean_xor tag_exec_470 (in1 integer_min boolean_frominteger integer_yank exec_dup_times () exec_dup_times (boolean_not) exec_s (exec_noop integer_rot exec_empty integer_rot) (integer_rot boolean_yankdup integer_fromboolean boolean_shove exec_y () integer_sub boolean_yankdup boolean_rot integer_pop exec_stackdepth integer_gt exec_yankdup exec_yank boolean_eq integer_gt) (exec_pop (boolean_dup_times) integer_stackdepth))))) ())) () ())))))) ()))
Errors: [1 1 0 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 97
Size: 140
Percent parens: 0.307
--- Population Statistics ---
Average total errors in population: 7.95
Median total errors in population: 7
Error averages by case: (0.804 0.77 0.931 0.558 0.934 0.804 0.803 0.934 0.557 0.855)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.567
Average program size in population (points): 103.253
Average percent parens in population: 0.265
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1990801
--- Timings ---
Current time: 1559594146148 milliseconds
Total Time:          10.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.8 seconds, 55.9%
Fitness Testing:      3.4 seconds, 33.1%
Report:               1.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -84                 | Program output: 2                  
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: 19                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 9                  
Correct output: -64                 | Program output: 8                  
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 17                 
Correct output: 50                  | Program output: 61                 
Correct output: 38                  | Program output: 38                 
Correct output: 17                  | Program output: 20                 
Correct output: 19                  | Program output: 20                 
Correct output: 38                  | Program output: 75                 
Correct output: 12                  | Program output: 80                 
Correct output: 27                  | Program output: 74                 
Correct output: 1                   | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 45                  | Program output: 45                 
Correct output: 16                  | Program output: 48                 
Correct output: 30                  | Program output: 30                 
Correct output: 42                  | Program output: 84                 
Correct output: 52                  | Program output: 90                 
Correct output: 24                  | Program output: 79                 
Correct output: 8                   | Program output: 8                  
Correct output: 11                  | Program output: 39                 
Correct output: -48                 | Program output: 14                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: -56                
Correct output: 4                   | Program output: 53                 
Correct output: -79                 | Program output: -60                
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: -53                
Correct output: -22                 | Program output: 94                 
Correct output: -59                 | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: 29                 
Correct output: -2                  | Program output: 9                  
Correct output: -48                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: 46                 
Correct output: -40                 | Program output: -23                
Correct output: -56                 | Program output: 30                 
Correct output: -26                 | Program output: 88                 
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: 41                 
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 23                 
Correct output: -63                 | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 86                 
Correct output: 13                  | Program output: 91                 
Correct output: -29                 | Program output: 50                 
Correct output: -86                 | Program output: -57                
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -38                 | Program output: -38                
Correct output: -11                 | Program output: 54                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 56                 
Correct output: -62                 | Program output: -28                
Correct output: -99                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -18                 | Program output: 75                 
Correct output: -82                 | Program output: 77                 
Correct output: -73                 | Program output: -56                
Correct output: -41                 | Program output: -33                
Correct output: -58                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: 36                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -47                
Correct output: -99                 | Program output: 7                  
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 80                 
Correct output: 20                  | Program output: 61                 
Correct output: -24                 | Program output: 35                 
Correct output: -77                 | Program output: -39                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 39                 
Correct output: -87                 | Program output: -36                
Correct output: -89                 | Program output: 32                 
Correct output: -91                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_s (integer_max exec_stackdepth integer_gt in4 print_integer integer_dup_items) (integer_shove exec_dup_times ()) (integer_swap integer_gt exec_dup_items exec_k_when_autoconstructing (integer_sub exec_dup (exec_k (boolean_empty boolean_yank) (exec_s (boolean_eq) (integer_swap) (exec_flush) integer_mult exec_dup (integer_dec boolean_pop exec_rot (boolean_yankdup) () (exec_while (boolean_rot) exec_do*count () integer_dup_items exec_swap (integer_add in3) (in2 integer_sub boolean_xor exec_rot (exec_when (integer_gt boolean_swap integer_eq in2 in1 integer_rot exec_dup (exec_do*times (boolean_or exec_k_when_autoconstructing (integer_dec print_boolean) (integer_sub) boolean_invert_first_then_and integer_mult) exec_yank boolean_swap) integer_dec exec_y_when_autoconstructing (exec_s_when_autoconstructing () (in3 boolean_shove) (boolean_xor tag_exec_470 (in1 integer_min boolean_frominteger integer_yank exec_dup_times () exec_dup_times (exec_do*range (boolean_not) exec_s (exec_noop integer_rot exec_empty integer_rot) (integer_rot boolean_yankdup integer_fromboolean boolean_shove exec_y () exec_pop (integer_sub boolean_yankdup boolean_rot integer_pop exec_stackdepth integer_gt exec_yankdup exec_yank boolean_eq integer_gt) exec_pop (boolean_dup_times) integer_stackdepth) ())))))) () ())))))) ()))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 139
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_s (integer_max exec_stackdepth integer_gt in4 print_integer integer_dup_items) (integer_shove exec_dup_times ()) (integer_swap integer_gt exec_dup_items exec_k_when_autoconstructing (integer_sub exec_dup (exec_k (boolean_empty boolean_yank) (exec_s (boolean_eq) (integer_swap) (exec_flush) integer_mult exec_dup (integer_dec boolean_pop exec_rot (boolean_yankdup) () (exec_while (boolean_rot) exec_do*count () integer_dup_items exec_swap (integer_add in3) (in2 integer_sub boolean_xor exec_rot (exec_when (integer_gt boolean_swap integer_eq in2 in1 integer_rot exec_dup (exec_do*times (boolean_or exec_k_when_autoconstructing (integer_dec print_boolean) (integer_sub) boolean_invert_first_then_and integer_mult) exec_yank boolean_swap) integer_dec exec_y_when_autoconstructing (exec_s_when_autoconstructing () (in3 boolean_shove) (boolean_xor tag_exec_470 (in1 integer_min boolean_frominteger integer_yank exec_dup_times () exec_dup_times (exec_do*range (boolean_not) exec_s (exec_noop integer_rot exec_empty integer_rot) (integer_rot boolean_yankdup integer_fromboolean boolean_shove exec_y () exec_pop (integer_sub boolean_yankdup boolean_rot integer_pop exec_stackdepth integer_gt exec_yankdup exec_yank boolean_eq integer_gt) exec_pop (boolean_dup_times) integer_stackdepth) ())))))) () ())))))) ()))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 139
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (335 99 334 218 99 99 699 218 217 217)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (335 99 334 218 99 99 699 218 217 217)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction -8} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction 97} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_when} {:close 0, :instruction tag_exec_470} {:close 2, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth})
Best program: (exec_stackdepth in4 print_integer -8 integer_dup_items integer_shove integer_swap exec_flush exec_empty exec_do*times (integer_gt integer_mult) integer_inc integer_sub exec_dup (boolean_eq exec_when (integer_inc) boolean_invert_first_then_and) boolean_empty integer_gte boolean_eq integer_swap boolean_invert_first_then_and exec_flush exec_dup (integer_dec exec_rot (exec_s (97 exec_while (exec_do*count () integer_dup_items exec_swap (boolean_eq exec_empty integer_flush exec_pop (integer_sub boolean_xor boolean_invert_first_then_and integer_gt boolean_swap integer_eq in2 in1 exec_dup_times () exec_dup (exec_do*times (exec_k_when_autoconstructing (integer_sub) (integer_dup_times exec_k_when_autoconstructing () (boolean_shove integer_flush boolean_invert_first_then_and integer_swap integer_dup_times boolean_frominteger exec_noop exec_do*times () integer_mult) exec_dup (boolean_swap) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing () (exec_dup () boolean_dup exec_when ()) (tag_exec_470 (exec_k () () in1 print_boolean exec_dup (integer_yank exec_dup_times () exec_dup_times (exec_s (exec_do*range (integer_swap) exec_while (exec_noop exec_empty integer_rot boolean_yankdup integer_dec) boolean_rot integer_pop integer_rot exec_eq exec_yank boolean_or boolean_eq integer_gt) (exec_pop (boolean_dup_times) exec_k_when_autoconstructing (integer_stackdepth) ()) ()))))) () ()))))) ())) () ()) () ()))
Errors: [1 1 1 0 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 99
Size: 146
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 7.465
Median total errors in population: 7
Error averages by case: (0.665 0.901 0.666 0.782 0.901 0.901 0.301 0.782 0.783 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 85.491
Average program size in population (points): 118.116
Average percent parens in population: 0.274
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2316835
--- Timings ---
Current time: 1559594148014 milliseconds
Total Time:          12.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.1 seconds, 57.3%
Fitness Testing:      3.8 seconds, 30.6%
Report:               1.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: 8                  
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 90                 
Correct output: 0                   | Program output: 72                 
Correct output: 50                  | Program output: 50                 
Correct output: 38                  | Program output: 51                 
Correct output: 17                  | Program output: 50                 
Correct output: 19                  | Program output: 32                 
Correct output: 38                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 92                 
Correct output: 1                   | Program output: 9                  
Correct output: 14                  | Program output: 90                 
Correct output: 40                  | Program output: 75                 
Correct output: 45                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 97                 
Correct output: 42                  | Program output: 42                 
Correct output: 52                  | Program output: 64                 
Correct output: 24                  | Program output: 88                 
Correct output: 8                   | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -48                 | Program output: 42                 
Correct output: -23                 | Program output: 62                 
Correct output: -56                 | Program output: 82                 
Correct output: 4                   | Program output: 35                 
Correct output: -79                 | Program output: 4                  
Correct output: -40                 | Program output: 75                 
Correct output: -55                 | Program output: -7                 
Correct output: -22                 | Program output: 34                 
Correct output: -59                 | Program output: 76                 
Correct output: -85                 | Program output: -45                
Correct output: -85                 | Program output: 32                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 37                 
Correct output: -97                 | Program output: -32                
Correct output: -40                 | Program output: 50                 
Correct output: -56                 | Program output: 22                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: 44                 
Correct output: -74                 | Program output: 18                 
Correct output: -62                 | Program output: 3                  
Correct output: -62                 | Program output: 98                 
Correct output: 6                   | Program output: 10                 
Correct output: -63                 | Program output: 77                 
Correct output: 4                   | Program output: 9                  
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -29                
Correct output: 13                  | Program output: 98                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: 26                 
Correct output: -39                 | Program output: 80                 
Correct output: -45                 | Program output: 86                 
Correct output: -38                 | Program output: -4                 
Correct output: -11                 | Program output: 34                 
Correct output: -73                 | Program output: 98                 
Correct output: -100                | Program output: 78                 
Correct output: -77                 | Program output: 41                 
Correct output: -62                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 65                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 48                 
Correct output: -73                 | Program output: 1                  
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -35                
Correct output: -29                 | Program output: 55                 
Correct output: -75                 | Program output: -58                
Correct output: -14                 | Program output: 6                  
Correct output: -93                 | Program output: -2                 
Correct output: -99                 | Program output: 32                 
Correct output: -46                 | Program output: -10                
Correct output: -68                 | Program output: -34                
Correct output: 20                  | Program output: 53                 
Correct output: -24                 | Program output: 23                 
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -3                 
Correct output: -87                 | Program output: 85                 
Correct output: -89                 | Program output: -35                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction -8} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_575} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_394} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_when} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_stackdepth in3 print_integer exec_do*times (-8 in4 integer_dup_items) in2 integer_pop integer_dup integer_pop integer_yank exec_flush integer_gte integer_gt exec_dup_items exec_if (integer_sub boolean_and integer_yank) (boolean_empty exec_dup (exec_when (boolean_eq) exec_flush) exec_dup (integer_dec boolean_dup_times exec_while (boolean_dup_items) integer_dup_items exec_swap (integer_add integer_sub tag_integer_575 exec_rot (integer_gt boolean_swap exec_k_when_autoconstructing (in2 integer_stackdepth in1 boolean_pop exec_dup_times () tag_boolean_303 exec_dup (exec_k_when_autoconstructing (print_newline tagged_394 integer_sub) (integer_dup_times exec_noop in1 print_integer boolean_invert_first_then_and exec_noop boolean_frominteger integer_mult) integer_dup_times exec_dup (boolean_swap) print_integer exec_y_when_autoconstructing (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_empty) (exec_s_when_autoconstructing () (boolean_xor boolean_yank exec_when ()) (tag_exec_470 (in1 exec_dup (integer_yank exec_dup_times () boolean_frominteger exec_dup_times (boolean_yank) exec_s (integer_lt exec_when (integer_rot integer_fromboolean boolean_yankdup exec_y () exec_pop () boolean_rot integer_yankdup) integer_pop integer_dup_items exec_when (integer_pop integer_gt exec_yankdup exec_eq boolean_eq in4 boolean_dup_times) integer_stackdepth) () ())))) ()))) ()) () ()) ())))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 138
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction -8} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_575} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_394} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_when} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_stackdepth in3 print_integer exec_do*times (-8 in4 integer_dup_items) in2 integer_pop integer_dup integer_pop integer_yank exec_flush integer_gte integer_gt exec_dup_items exec_if (integer_sub boolean_and integer_yank) (boolean_empty exec_dup (exec_when (boolean_eq) exec_flush) exec_dup (integer_dec boolean_dup_times exec_while (boolean_dup_items) integer_dup_items exec_swap (integer_add integer_sub tag_integer_575 exec_rot (integer_gt boolean_swap exec_k_when_autoconstructing (in2 integer_stackdepth in1 boolean_pop exec_dup_times () tag_boolean_303 exec_dup (exec_k_when_autoconstructing (print_newline tagged_394 integer_sub) (integer_dup_times exec_noop in1 print_integer boolean_invert_first_then_and exec_noop boolean_frominteger integer_mult) integer_dup_times exec_dup (boolean_swap) print_integer exec_y_when_autoconstructing (boolean_invert_second_then_and exec_s_when_autoconstructing (boolean_empty) (exec_s_when_autoconstructing () (boolean_xor boolean_yank exec_when ()) (tag_exec_470 (in1 exec_dup (integer_yank exec_dup_times () boolean_frominteger exec_dup_times (boolean_yank) exec_s (integer_lt exec_when (integer_rot integer_fromboolean boolean_yankdup exec_y () exec_pop () boolean_rot integer_yankdup) integer_pop integer_dup_items exec_when (integer_pop integer_gt exec_yankdup exec_eq boolean_eq in4 boolean_dup_times) integer_stackdepth) () ())))) ()))) ()) () ()) ())))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 138
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 175 324 251 175 172 752 251 173 6)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (175 175 324 251 175 172 752 251 173 6)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -8} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction 97} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_integer_575} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_470} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in3 print_integer integer_fromboolean -8 boolean_yank integer_dec exec_s (integer_dup_items) (exec_k_when_autoconstructing (in2 exec_yankdup exec_flush integer_gt exec_dup_items integer_mult) (integer_sub integer_dec exec_dup (boolean_eq exec_when (boolean_empty integer_swap) integer_yankdup exec_flush) exec_dup (integer_dec integer_min exec_rot (97 exec_do*count () print_newline integer_dup_items integer_dup_items exec_swap (exec_empty integer_sub boolean_xor exec_do*count (boolean_eq boolean_or tag_integer_575 integer_gt boolean_dup in1 print_integer exec_do*while () exec_dup_times () exec_dup_times (exec_dup (exec_do*times (exec_k_when_autoconstructing (integer_sub) (boolean_shove in3 boolean_invert_first_then_and integer_div)) in1 print_integer exec_do*range (boolean_frominteger exec_dup (exec_y_when_autoconstructing (boolean_yank boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s_when_autoconstructing () (exec_shove () boolean_xor exec_yank tag_exec_470 (boolean_frominteger boolean_or exec_dup (exec_empty integer_yank exec_dup_times (boolean_not) exec_s (exec_noop boolean_rot exec_empty integer_eq integer_rot) (integer_rot integer_fromboolean exec_y () boolean_yankdup integer_gt exec_yankdup exec_eq integer_max) (exec_yank integer_max boolean_eq integer_gt) exec_pop (exec_k_when_autoconstructing () ())))) ()) () ()))))))) ()) () ()))) ())
Errors: [0 0 1 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 97
Size: 140
Percent parens: 0.307
--- Population Statistics ---
Average total errors in population: 7.546
Median total errors in population: 8
Error averages by case: (0.825 0.825 0.676 0.749 0.825 0.828 0.248 0.749 0.827 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.338
Average program size in population (points): 104.089
Average percent parens in population: 0.271
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2634240
--- Timings ---
Current time: 1559594150070 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.4 seconds, 58.9%
Fitness Testing:      4.1 seconds, 28.9%
Report:               1.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: 8                  
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 90                 
Correct output: 0                   | Program output: 72                 
Correct output: 50                  | Program output: 50                 
Correct output: 38                  | Program output: 51                 
Correct output: 17                  | Program output: 50                 
Correct output: 19                  | Program output: 32                 
Correct output: 38                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 92                 
Correct output: 1                   | Program output: 9                  
Correct output: 14                  | Program output: 90                 
Correct output: 40                  | Program output: 75                 
Correct output: 45                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 97                 
Correct output: 42                  | Program output: 42                 
Correct output: 52                  | Program output: 64                 
Correct output: 24                  | Program output: 88                 
Correct output: 8                   | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -48                 | Program output: 42                 
Correct output: -23                 | Program output: 62                 
Correct output: -56                 | Program output: 82                 
Correct output: 4                   | Program output: 35                 
Correct output: -79                 | Program output: 4                  
Correct output: -40                 | Program output: 75                 
Correct output: -55                 | Program output: -7                 
Correct output: -22                 | Program output: 34                 
Correct output: -59                 | Program output: 76                 
Correct output: -85                 | Program output: -45                
Correct output: -85                 | Program output: 32                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: 37                 
Correct output: -97                 | Program output: -32                
Correct output: -40                 | Program output: 50                 
Correct output: -56                 | Program output: 22                 
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: 44                 
Correct output: -74                 | Program output: 18                 
Correct output: -62                 | Program output: 3                  
Correct output: -62                 | Program output: 98                 
Correct output: 6                   | Program output: 10                 
Correct output: -63                 | Program output: 77                 
Correct output: 4                   | Program output: 9                  
Correct output: -60                 | Program output: 91                 
Correct output: -97                 | Program output: -29                
Correct output: 13                  | Program output: 98                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: 26                 
Correct output: -39                 | Program output: 80                 
Correct output: -45                 | Program output: 86                 
Correct output: -38                 | Program output: -4                 
Correct output: -11                 | Program output: 34                 
Correct output: -73                 | Program output: 98                 
Correct output: -100                | Program output: 78                 
Correct output: -77                 | Program output: 41                 
Correct output: -62                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 65                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 48                 
Correct output: -73                 | Program output: 1                  
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -35                
Correct output: -29                 | Program output: 55                 
Correct output: -75                 | Program output: -58                
Correct output: -14                 | Program output: 6                  
Correct output: -93                 | Program output: -2                 
Correct output: -99                 | Program output: 32                 
Correct output: -46                 | Program output: -10                
Correct output: -68                 | Program output: -34                
Correct output: 20                  | Program output: 53                 
Correct output: -24                 | Program output: 23                 
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -3                 
Correct output: -87                 | Program output: 85                 
Correct output: -89                 | Program output: -35                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction -8} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction -60} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_flush} {:close 1, :instruction -1} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_865} {:close 0, :instruction 97} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction 51} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_stackdepth in3 print_integer -8 integer_dup_items integer_swap exec_flush integer_eq integer_mult -60 exec_dup (boolean_eq exec_when (exec_if (boolean_swap boolean_empty integer_swap) (boolean_empty exec_flush) -1) integer_inc) integer_dec tag_exec_865 (97 boolean_dup_times boolean_stackdepth exec_while (print_newline boolean_shove integer_dup_items integer_add integer_flush integer_shove) integer_sub integer_gt integer_eq integer_dup in2 exec_when (in1 exec_do*times (exec_do*times () boolean_invert_first_then_and integer_dup_times boolean_shove boolean_frominteger integer_mult) exec_dup (exec_do*times () exec_dup (exec_y_when_autoconstructing (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (exec_when ()) (in1 exec_eq in1 integer_lt) integer_sub exec_dup (integer_yank exec_dup_times () boolean_not) exec_dup_times (exec_noop in1 exec_empty integer_rot) integer_dup integer_fromboolean integer_pop integer_rot integer_gt boolean_pop exec_eq exec_k_when_autoconstructing (integer_dup_items integer_max) (integer_min 51 exec_if (integer_gt) (exec_pop (integer_flush exec_k_when_autoconstructing (integer_stackdepth) ())))) () ()))))))
Lexicase best errors: [0 0 1 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 117
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction -8} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction -60} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_flush} {:close 1, :instruction -1} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_865} {:close 0, :instruction 97} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction 51} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_stackdepth in3 print_integer -8 integer_dup_items integer_swap exec_flush integer_eq integer_mult -60 exec_dup (boolean_eq exec_when (exec_if (boolean_swap boolean_empty integer_swap) (boolean_empty exec_flush) -1) integer_inc) integer_dec tag_exec_865 (97 boolean_dup_times boolean_stackdepth exec_while (print_newline boolean_shove integer_dup_items integer_add integer_flush integer_shove) integer_sub integer_gt integer_eq integer_dup in2 exec_when (in1 exec_do*times (exec_do*times () boolean_invert_first_then_and integer_dup_times boolean_shove boolean_frominteger integer_mult) exec_dup (exec_do*times () exec_dup (exec_y_when_autoconstructing (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (exec_when ()) (in1 exec_eq in1 integer_lt) integer_sub exec_dup (integer_yank exec_dup_times () boolean_not) exec_dup_times (exec_noop in1 exec_empty integer_rot) integer_dup integer_fromboolean integer_pop integer_rot integer_gt boolean_pop exec_eq exec_k_when_autoconstructing (integer_dup_items integer_max) (integer_min 51 exec_if (integer_gt) (exec_pop (integer_flush exec_k_when_autoconstructing (integer_stackdepth) ())))) () ()))))))
Zero cases best errors: [0 0 1 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 117
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (544 376 104 375 163 104 164 379 106 57)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (544 376 104 375 163 104 164 379 106 57)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction -8} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 97} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Best program: (in3 print_integer integer_yankdup boolean_flush -8 integer_dup_items in2 integer_swap integer_swap integer_dup_times exec_flush print_newline integer_gt integer_swap exec_do*while (boolean_frominteger integer_eq) exec_dup_items integer_yankdup integer_sub exec_dup (exec_dup (integer_shove exec_when (boolean_eq) boolean_rot exec_dup (exec_rot (exec_do*times (integer_yankdup 97 exec_dup_items exec_do*count () boolean_or) boolean_yankdup boolean_flush) (print_newline exec_yank) (exec_s (integer_dup_items exec_swap (exec_empty integer_flush integer_sub boolean_xor in1 integer_eq in1 integer_inc boolean_and exec_dup (boolean_xor exec_k_when_autoconstructing (in3 integer_dup_times exec_noop integer_flush boolean_frominteger exec_dup_times (integer_dup) exec_do*times () integer_gte) (boolean_swap) exec_y_when_autoconstructing (boolean_invert_second_then_and boolean_yank boolean_yankdup print_exec (tag_exec_470 (in1 boolean_xor boolean_frominteger boolean_frominteger) boolean_and exec_dup (exec_dup_times () exec_dup_times (exec_k (boolean_not) (integer_pop) in3 integer_lt exec_empty integer_rot exec_while () integer_fromboolean exec_y () exec_dup_items integer_dup integer_mod integer_pop integer_rot integer_fromboolean integer_gt exec_yankdup exec_eq integer_max) exec_yank exec_pop (integer_mod boolean_dup_times) integer_stackdepth))))) ()) () ())))))
Errors: [0 0 1 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 102
Size: 134
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 7.628
Median total errors in population: 7
Error averages by case: (0.456 0.624 0.896 0.625 0.837 0.896 0.836 0.621 0.894 0.943)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.026
Average program size in population (points): 104.91
Average percent parens in population: 0.272
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2988704
--- Timings ---
Current time: 1559594151974 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.7 seconds, 59.2%
Fitness Testing:      4.6 seconds, 27.9%
Report:               2.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 54                 
Correct output: 0                   | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 38                  | Program output: 42                 
Correct output: 17                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 38                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 38                 
Correct output: 40                  | Program output: 75                 
Correct output: 45                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 89                 
Correct output: 42                  | Program output: 42                 
Correct output: 52                  | Program output: 64                 
Correct output: 24                  | Program output: 46                 
Correct output: 8                   | Program output: 97                 
Correct output: 11                  | Program output: 11                 
Correct output: -48                 | Program output: 42                 
Correct output: -23                 | Program output: -10                
Correct output: -56                 | Program output: 10                 
Correct output: 4                   | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -54                
Correct output: -85                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -6                 
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: 44                 
Correct output: -74                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 9                  
Correct output: -60                 | Program output: 63                 
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 18                 
Correct output: -45                 | Program output: 23                 
Correct output: -38                 | Program output: -4                 
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: 87                 
Correct output: -100                | Program output: -39                
Correct output: -77                 | Program output: -6                 
Correct output: -62                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 65                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -35                
Correct output: -29                 | Program output: 29                 
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: 6                  
Correct output: -93                 | Program output: -2                 
Correct output: -99                 | Program output: 32                 
Correct output: -46                 | Program output: -10                
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction -8} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_681} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction 97} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_304} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (in2 in4 in3 exec_yank print_integer -8 integer_swap integer_dup_items in2 integer_swap exec_dup_items integer_mult boolean_not integer_sub exec_dup (integer_add boolean_eq boolean_empty tag_integer_681 exec_flush in2 print_integer boolean_stackdepth integer_swap) exec_dup (integer_dec 97 integer_add boolean_frominteger) exec_while (boolean_frominteger) exec_do*count () in4 print_newline exec_when (boolean_or) integer_dup_items integer_eq exec_swap (exec_empty boolean_frominteger boolean_not) (exec_dup (integer_eq)) integer_flush integer_sub boolean_and integer_yank integer_gte in2 integer_rot exec_dup_items exec_when (integer_eq boolean_or in2 in1 print_newline) integer_div boolean_or exec_swap (integer_sub) (integer_pop integer_flush boolean_invert_first_then_and exec_do*times () exec_yankdup exec_dup (boolean_swap) exec_y_when_autoconstructing (integer_flush)) integer_min boolean_empty boolean_xor integer_mult boolean_empty exec_s_when_autoconstructing () (tag_exec_470 (in1 integer_min exec_dup (exec_stackdepth exec_s (integer_lt tagged_304 integer_rot) (integer_rot integer_fromboolean exec_y () boolean_yankdup boolean_rot integer_gt exec_yankdup exec_eq integer_max) (integer_yank boolean_empty in4 integer_dup_items boolean_eq exec_k_when_autoconstructing (integer_stackdepth) ())))) ())
Lexicase best errors: [1 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 128
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction -8} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_681} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction 97} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_470} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_304} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (in2 in4 in3 exec_yank print_integer -8 integer_swap integer_dup_items in2 integer_swap exec_dup_items integer_mult boolean_not integer_sub exec_dup (integer_add boolean_eq boolean_empty tag_integer_681 exec_flush in2 print_integer boolean_stackdepth integer_swap) exec_dup (integer_dec 97 integer_add boolean_frominteger) exec_while (boolean_frominteger) exec_do*count () in4 print_newline exec_when (boolean_or) integer_dup_items integer_eq exec_swap (exec_empty boolean_frominteger boolean_not) (exec_dup (integer_eq)) integer_flush integer_sub boolean_and integer_yank integer_gte in2 integer_rot exec_dup_items exec_when (integer_eq boolean_or in2 in1 print_newline) integer_div boolean_or exec_swap (integer_sub) (integer_pop integer_flush boolean_invert_first_then_and exec_do*times () exec_yankdup exec_dup (boolean_swap) exec_y_when_autoconstructing (integer_flush)) integer_min boolean_empty boolean_xor integer_mult boolean_empty exec_s_when_autoconstructing () (tag_exec_470 (in1 integer_min exec_dup (exec_stackdepth exec_s (integer_lt tagged_304 integer_rot) (integer_rot integer_fromboolean exec_y () boolean_yankdup boolean_rot integer_gt exec_yankdup exec_eq integer_max) (integer_yank boolean_empty in4 integer_dup_items boolean_eq exec_k_when_autoconstructing (integer_stackdepth) ())))) ())
Zero cases best errors: [1 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 128
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 211 193 214 61 58 63 58 512 210)
Population mean number of elite cases: 1.83
Count of perfect (error zero) individuals by case: (248 211 193 214 61 58 63 58 512 210)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap} {:close 1, :instruction boolean_empty})
Best program: (in3 integer_dup_times integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 integer_min print_integer integer_empty exec_yankdup exec_flush exec_yank boolean_invert_second_then_and exec_s (integer_sub integer_rot boolean_frominteger boolean_swap) (boolean_dup) (exec_yank) integer_dec exec_when () integer_dup_times integer_min integer_gte in3 exec_dup_times (integer_mult integer_dec integer_dup boolean_dup integer_lte boolean_swap in3 exec_swap () () exec_yank) boolean_empty integer_add exec_do*count (exec_while (exec_k_when_autoconstructing () (exec_s (exec_yankdup) (boolean_invert_first_then_and boolean_swap) () boolean_empty))))
Errors: [0 1 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 62
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 8.172
Median total errors in population: 8
Error averages by case: (0.752 0.789 0.807 0.786 0.939 0.942 0.937 0.942 0.488 0.79)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.218
Average program size in population (points): 105.406
Average percent parens in population: 0.271
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3334525
--- Timings ---
Current time: 1559594153861 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.9 seconds, 60.1%
Fitness Testing:      4.9 seconds, 27.1%
Report:               2.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 79                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 64                 
Correct output: 38                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 12                  | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 38                 
Correct output: 40                  | Program output: 91                 
Correct output: 45                  | Program output: 50                 
Correct output: 16                  | Program output: 25                 
Correct output: 30                  | Program output: 42                 
Correct output: 42                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 80                 
Correct output: 11                  | Program output: 26                 
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -10                
Correct output: -56                 | Program output: -20                
Correct output: 4                   | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: 0                  
Correct output: -48                 | Program output: 10                 
Correct output: -83                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: 29                 
Correct output: -3                  | Program output: 5                  
Correct output: -74                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 43                 
Correct output: -60                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 13                 
Correct output: -29                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 18                 
Correct output: -45                 | Program output: 23                 
Correct output: -38                 | Program output: 24                 
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: -2                 
Correct output: -100                | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -99                 | Program output: 7                  
Correct output: -86                 | Program output: -47                
Correct output: -18                 | Program output: 26                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: 70                 
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 29                 
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: 36                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -46                 | Program output: 7                  
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: 45                 
Correct output: -62                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_281} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap} {:close 1, :instruction boolean_empty})
Lexicase best program: (in3 integer_stackdepth exec_dup_times (boolean_yank boolean_invert_first_then_and) in1 in2 integer_min print_integer integer_empty tagged_281 exec_yankdup exec_flush exec_yank boolean_invert_second_then_and integer_sub integer_rot boolean_frominteger boolean_and boolean_swap boolean_dup exec_yank integer_dec exec_when () integer_dup_times integer_min integer_gte in3 exec_dup_times (integer_mult integer_dec integer_dup boolean_dup integer_lte boolean_swap in3 exec_swap () () exec_yank) boolean_empty integer_add exec_while (exec_k_when_autoconstructing () (exec_s (exec_yankdup) (boolean_invert_first_then_and boolean_swap) () boolean_empty)))
Lexicase best errors: [0 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_281} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap} {:close 1, :instruction boolean_empty})
Zero cases best program: (in3 integer_stackdepth exec_dup_times (boolean_yank boolean_invert_first_then_and) in1 in2 integer_min print_integer integer_empty tagged_281 exec_yankdup exec_flush exec_yank boolean_invert_second_then_and integer_sub integer_rot boolean_frominteger boolean_and boolean_swap boolean_dup exec_yank integer_dec exec_when () integer_dup_times integer_min integer_gte in3 exec_dup_times (integer_mult integer_dec integer_dup boolean_dup integer_lte boolean_swap in3 exec_swap () () exec_yank) boolean_empty integer_add exec_while (exec_k_when_autoconstructing () (exec_s (exec_yankdup) (boolean_invert_first_then_and boolean_swap) () boolean_empty)))
Zero cases best errors: [0 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (54 275 276 175 176 21 333 395 373 21)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (54 275 276 175 176 21 333 395 373 21)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap})
Best program: (in3 integer_dup_times in1 integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 integer_min print_integer integer_empty integer_lt exec_yankdup exec_flush exec_yank exec_s (integer_sub integer_rot boolean_frominteger in4 boolean_swap) (boolean_dup) (exec_yank) integer_dec exec_when () integer_min integer_gte in3 exec_dup_times (integer_mult integer_dec integer_dup integer_lte integer_shove integer_lte boolean_swap in3 exec_swap () () exec_yank) boolean_empty integer_add exec_do*count (exec_pop (exec_k_when_autoconstructing () (exec_s (exec_yankdup) (boolean_invert_first_then_and boolean_swap) ()))))
Errors: [0 1 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 47
Size: 63
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.901
Median total errors in population: 8
Error averages by case: (0.946 0.725 0.724 0.825 0.824 0.979 0.667 0.605 0.627 0.979)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.138
Average program size in population (points): 91.667
Average percent parens in population: 0.245
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3717450
--- Timings ---
Current time: 1559594155794 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.2 seconds, 60.6%
Fitness Testing:      5.3 seconds, 26.6%
Report:               2.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 321
Test mean error for best: 0.32100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 79                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 38                  | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 9                  
Correct output: 14                  | Program output: 44                 
Correct output: 40                  | Program output: 75                 
Correct output: 45                  | Program output: 50                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 42                 
Correct output: 42                  | Program output: 42                 
Correct output: 52                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 80                 
Correct output: 11                  | Program output: 11                 
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -10                
Correct output: -56                 | Program output: -20                
Correct output: 4                   | Program output: 35                 
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: 0                  
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: 5                  
Correct output: -74                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: 79                 
Correct output: 6                   | Program output: 10                 
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 9                  
Correct output: -60                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 13                 
Correct output: -29                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -45                 | Program output: 73                 
Correct output: -38                 | Program output: -4                 
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: -2                 
Correct output: -100                | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 45                 
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -46                 | Program output: -10                
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 33                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap})
Lexicase best program: (in3 boolean_shove integer_dup_times in1 integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 exec_do*times (integer_min print_integer) integer_empty integer_lt exec_yankdup exec_flush exec_yank exec_s (integer_sub integer_rot boolean_frominteger in4 boolean_swap) (boolean_dup) (exec_yank) integer_dec exec_when () integer_gte exec_if (exec_dup_times (integer_mult integer_dec integer_dup integer_lte boolean_yankdup integer_shove integer_lte boolean_swap in3 exec_yank) boolean_empty integer_add exec_do*count (exec_pop (exec_k_when_autoconstructing () (exec_s (exec_yankdup) (boolean_invert_first_then_and boolean_swap) ())))) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap})
Zero cases best program: (in3 boolean_shove integer_dup_times in1 integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 exec_do*times (integer_min print_integer) integer_empty integer_lt exec_yankdup exec_flush exec_yank exec_s (integer_sub integer_rot boolean_frominteger in4 boolean_swap) (boolean_dup) (exec_yank) integer_dec exec_when () integer_gte exec_if (exec_dup_times (integer_mult integer_dec integer_dup integer_lte boolean_yankdup integer_shove integer_lte boolean_swap in3 exec_yank) boolean_empty integer_add exec_do*count (exec_pop (exec_k_when_autoconstructing () (exec_s (exec_yankdup) (boolean_invert_first_then_and boolean_swap) ())))) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 234 253 512 249 768 245 237 79 64)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (533 234 253 512 249 768 245 237 79 64)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap})
Best program: (in3 boolean_shove integer_dup_times in1 integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 exec_do*times (integer_min print_integer) integer_empty integer_lt exec_yankdup exec_flush exec_yank exec_s (integer_sub integer_rot boolean_frominteger in4 boolean_swap) (boolean_dup) (exec_yank) integer_dec exec_when () integer_gte exec_if (exec_dup_times (integer_mult integer_dec integer_dup integer_lte boolean_yankdup integer_shove integer_lte boolean_swap in3 exec_yank) boolean_empty integer_add exec_do*count (exec_pop (exec_k_when_autoconstructing () (exec_s (exec_yankdup) (boolean_invert_first_then_and boolean_swap) ())))) ())
Errors: [0 0 0 1 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 48
Size: 65
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.826
Median total errors in population: 7
Error averages by case: (0.467 0.766 0.747 0.488 0.751 0.232 0.755 0.763 0.921 0.936)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.807
Average program size in population (points): 80.81
Average percent parens in population: 0.238
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4041656
--- Timings ---
Current time: 1559594157759 milliseconds
Total Time:          21.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.4 seconds, 61.0%
Fitness Testing:      5.7 seconds, 26.1%
Report:               2.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 79                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 64                 
Correct output: 38                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 12                  | Program output: 64                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 38                 
Correct output: 40                  | Program output: 91                 
Correct output: 45                  | Program output: 50                 
Correct output: 16                  | Program output: 25                 
Correct output: 30                  | Program output: 42                 
Correct output: 42                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 80                 
Correct output: 11                  | Program output: 26                 
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -10                
Correct output: -56                 | Program output: -20                
Correct output: 4                   | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: 0                  
Correct output: -48                 | Program output: 10                 
Correct output: -83                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: 29                 
Correct output: -3                  | Program output: 5                  
Correct output: -74                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 43                 
Correct output: -60                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 13                 
Correct output: -29                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 18                 
Correct output: -45                 | Program output: 23                 
Correct output: -38                 | Program output: 24                 
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: -2                 
Correct output: -100                | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -99                 | Program output: 7                  
Correct output: -86                 | Program output: -47                
Correct output: -18                 | Program output: 26                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: 70                 
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 29                 
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: 36                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -46                 | Program output: 7                  
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: 45                 
Correct output: -62                 | Program output: -26                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap})
Lexicase best program: (in3 boolean_shove integer_dup_times in1 integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 integer_min print_integer integer_empty integer_lt exec_yankdup exec_flush exec_yank exec_s (integer_sub integer_rot boolean_frominteger in4 boolean_swap) (boolean_dup) (exec_yank) integer_dec exec_when () integer_gte exec_if (exec_dup_times (integer_mult integer_dec integer_dup integer_lte boolean_yankdup integer_shove integer_lte boolean_swap exec_yank) boolean_empty exec_do*count (integer_sub exec_pop (exec_k_when_autoconstructing () (exec_yankdup) boolean_invert_first_then_and boolean_swap))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 58
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap})
Zero cases best program: (in3 boolean_shove integer_dup_times in1 integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 integer_min print_integer integer_empty integer_lt exec_yankdup exec_flush exec_yank exec_s (integer_sub integer_rot boolean_frominteger in4 boolean_swap) (boolean_dup) (exec_yank) integer_dec exec_when () integer_gte exec_if (exec_dup_times (integer_mult integer_dec integer_dup integer_lte boolean_yankdup integer_shove integer_lte boolean_swap exec_yank) boolean_empty exec_do*count (integer_sub exec_pop (exec_k_when_autoconstructing () (exec_yankdup) boolean_invert_first_then_and boolean_swap))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 58
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (793 672 269 272 612 388 307 386 665 178)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (793 672 269 272 612 388 307 386 665 178)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_swap})
Best program: (in3 integer_yank integer_dup_times in1 integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 integer_min print_integer integer_empty exec_yankdup exec_pop (exec_yank) exec_s (integer_sub integer_eq exec_s_when_autoconstructing (integer_rot boolean_frominteger in4 integer_yankdup) (boolean_swap) (boolean_dup) exec_yank) (integer_dec exec_when () integer_min integer_gte exec_dup (in3 boolean_pop exec_dup_times (integer_mult integer_dec integer_dup integer_lte integer_shove integer_pop integer_lte boolean_swap in3 exec_swap () () exec_yank) integer_add exec_do*count (exec_pop (exec_k_when_autoconstructing () (exec_s (exec_yankdup) (boolean_invert_first_then_and boolean_stackdepth boolean_swap) ()))))) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 53
Size: 74
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 5.458
Median total errors in population: 5
Error averages by case: (0.207 0.328 0.731 0.728 0.388 0.612 0.693 0.614 0.335 0.822)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.815
Average program size in population (points): 60.846
Average percent parens in population: 0.245
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.202
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4811840
--- Timings ---
Current time: 1559594160249 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.5 seconds, 60.1%
Fitness Testing:      6.4 seconds, 26.5%
Report:               3.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 200
Test mean error for best: 0.20000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 79                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 50                  | Program output: 50                 
Correct output: 38                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 38                  | Program output: 38                 
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 38                 
Correct output: 40                  | Program output: 75                 
Correct output: 45                  | Program output: 50                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 42                 
Correct output: 42                  | Program output: 42                 
Correct output: 52                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 80                 
Correct output: 11                  | Program output: 11                 
Correct output: -48                 | Program output: -48                
Correct output: -23                 | Program output: -10                
Correct output: -56                 | Program output: -20                
Correct output: 4                   | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: 5                  
Correct output: -74                 | Program output: -73                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 9                  
Correct output: -60                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 13                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 18                 
Correct output: -45                 | Program output: 23                 
Correct output: -38                 | Program output: -4                 
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: -2                 
Correct output: -100                | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 29                 
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -46                 | Program output: -10                
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 2, :instruction boolean_swap} {:close 1, :instruction in1})
Lexicase best program: (in3 boolean_shove integer_dup_times in1 integer_min integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 integer_min print_integer integer_empty integer_lt exec_s (exec_yankdup exec_flush exec_yank) (exec_s (exec_yank integer_sub integer_rot boolean_frominteger in4 integer_pop) (boolean_swap) (boolean_dup) exec_yank) (integer_dec exec_noop exec_y () integer_gte exec_if (exec_dup_times (integer_mult integer_dup integer_lte boolean_yankdup integer_shove boolean_swap in3 boolean_empty integer_add exec_do*count (integer_sub exec_pop (exec_k_when_autoconstructing () (exec_yankdup) boolean_swap)) in1)) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 65
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 2, :instruction boolean_swap} {:close 1, :instruction in1})
Zero cases best program: (in3 boolean_shove integer_dup_times in1 integer_min integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 integer_min print_integer integer_empty integer_lt exec_s (exec_yankdup exec_flush exec_yank) (exec_s (exec_yank integer_sub integer_rot boolean_frominteger in4 integer_pop) (boolean_swap) (boolean_dup) exec_yank) (integer_dec exec_noop exec_y () integer_gte exec_if (exec_dup_times (integer_mult integer_dup integer_lte boolean_yankdup integer_shove boolean_swap in3 boolean_empty integer_add exec_do*count (integer_sub exec_pop (exec_k_when_autoconstructing () (exec_yankdup) boolean_swap)) in1)) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 65
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (610 123 408 427 755 421 423 88 132 87)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (610 123 408 427 755 421 423 88 132 87)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 2, :instruction boolean_swap} {:close 1, :instruction in1})
Best program: (in3 boolean_shove integer_dup_times in1 integer_min integer_stackdepth exec_dup_times (boolean_invert_first_then_and) in2 integer_min print_integer integer_empty integer_lt exec_s (exec_yankdup exec_flush exec_yank) (exec_s (exec_yank integer_sub integer_rot boolean_frominteger in4 integer_pop) (boolean_swap) (boolean_dup) exec_yank) (integer_dec exec_noop exec_y () integer_gte exec_if (exec_dup_times (integer_mult integer_dup integer_lte boolean_yankdup integer_shove boolean_swap in3 boolean_empty integer_add exec_do*count (integer_sub exec_pop (exec_k_when_autoconstructing () (exec_yankdup) boolean_swap)) in1)) ()))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 49
Size: 65
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.526
Median total errors in population: 6
Error averages by case: (0.39 0.877 0.592 0.573 0.245 0.579 0.577 0.912 0.868 0.913)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.957
Average program size in population (points): 60.069
Average percent parens in population: 0.233
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5330890
--- Timings ---
Current time: 1559594162124 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.7 seconds, 59.2%
Fitness Testing:      6.9 seconds, 26.0%
Report:               3.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 324
Test mean error for best: 0.32400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 9                  
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 38                  | Program output: 38                 
Correct output: 17                  | Program output: 20                 
Correct output: 19                  | Program output: 20                 
Correct output: 38                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 74                 
Correct output: 1                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 45                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 30                 
Correct output: 42                  | Program output: 42                 
Correct output: 52                  | Program output: 64                 
Correct output: 24                  | Program output: 79                 
Correct output: 8                   | Program output: 8                  
Correct output: 11                  | Program output: 11                 
Correct output: -48                 | Program output: 14                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: -56                
Correct output: 4                   | Program output: 35                 
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: 0                  
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -23                
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 10                 
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 4                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 91                 
Correct output: -29                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -38                 | Program output: -38                
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -6                 
Correct output: -62                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -28                
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -47                
Correct output: -99                 | Program output: 7                  
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 53                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_802} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty})
Lexicase best program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 exec_do*times (integer_min print_integer) integer_empty exec_dup_times (exec_yank) boolean_frominteger boolean_swap boolean_dup exec_yank exec_when () integer_sub integer_dup_times integer_min exec_dup () in3 exec_dup_times (boolean_dup_items integer_mult integer_inc integer_dec exec_dup_items integer_dec) integer_dup integer_min integer_dec boolean_eq boolean_swap boolean_not exec_swap () () exec_yank boolean_empty integer_add boolean_empty exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop exec_yankdup) (integer_mult tag_integer_802 boolean_invert_first_then_and boolean_empty) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_802} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty})
Zero cases best program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 exec_do*times (integer_min print_integer) integer_empty exec_dup_times (exec_yank) boolean_frominteger boolean_swap boolean_dup exec_yank exec_when () integer_sub integer_dup_times integer_min exec_dup () in3 exec_dup_times (boolean_dup_items integer_mult integer_inc integer_dec exec_dup_items integer_dec) integer_dup integer_min integer_dec boolean_eq boolean_swap boolean_not exec_swap () () exec_yank boolean_empty integer_add boolean_empty exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop exec_yankdup) (integer_mult tag_integer_802 boolean_invert_first_then_and boolean_empty) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (412 308 288 413 421 303 729 726 311 452)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (412 308 288 413 421 303 729 726 311 452)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_802} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty})
Best program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 exec_do*times (integer_min print_integer) integer_empty exec_yank integer_sub boolean_frominteger boolean_swap boolean_dup exec_yank exec_when () integer_sub integer_dup_times integer_min in3 exec_dup_times (integer_mult integer_inc integer_dec integer_dup integer_min integer_dec) boolean_eq boolean_swap boolean_not exec_swap () () exec_yank boolean_empty integer_add exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop exec_yankdup) (integer_mult tag_integer_802 boolean_invert_first_then_and boolean_empty) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 44
Size: 57
Percent parens: 0.228
--- Population Statistics ---
Average total errors in population: 5.637
Median total errors in population: 5
Error averages by case: (0.588 0.692 0.712 0.587 0.579 0.697 0.271 0.274 0.689 0.548)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.409
Average program size in population (points): 64.119
Average percent parens in population: 0.244
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5978285
--- Timings ---
Current time: 1559594164494 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.8 seconds, 59.0%
Fitness Testing:      7.6 seconds, 26.6%
Report:               4.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 320
Test mean error for best: 0.32000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 90                 
Correct output: 0                   | Program output: 72                 
Correct output: 50                  | Program output: 50                 
Correct output: 38                  | Program output: 51                 
Correct output: 17                  | Program output: 50                 
Correct output: 19                  | Program output: 32                 
Correct output: 38                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 92                 
Correct output: 1                   | Program output: 9                  
Correct output: 14                  | Program output: 90                 
Correct output: 40                  | Program output: 75                 
Correct output: 45                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 97                 
Correct output: 42                  | Program output: 42                 
Correct output: 52                  | Program output: 64                 
Correct output: 24                  | Program output: 88                 
Correct output: 8                   | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -48                 | Program output: 42                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: -56                
Correct output: 4                   | Program output: 35                 
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -23                
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 10                 
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 9                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 98                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -38                 | Program output: -38                
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -6                 
Correct output: -62                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -35                
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -47                
Correct output: -99                 | Program output: 32                 
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 53                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction -68} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_802} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty})
Lexicase best program: (in3 integer_stackdepth exec_dup_times (in4) in2 integer_min exec_do*times (integer_min integer_dup) print_integer integer_empty integer_fromboolean integer_sub boolean_frominteger boolean_swap boolean_dup exec_yank exec_when () integer_sub integer_dup_times integer_min in3 exec_dup_times (integer_mult integer_inc integer_dec integer_dup integer_min integer_dec) -68 boolean_eq boolean_swap boolean_not exec_swap () () boolean_dup_items exec_yank boolean_empty exec_rot (integer_add exec_k_when_autoconstructing () (exec_s (boolean_pop exec_yankdup) (integer_mult integer_inc tag_integer_802 boolean_invert_first_then_and boolean_empty) ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 63
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction -68} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_802} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty})
Zero cases best program: (in3 integer_stackdepth exec_dup_times (in4) in2 integer_min exec_do*times (integer_min integer_dup) print_integer integer_empty integer_fromboolean integer_sub boolean_frominteger boolean_swap boolean_dup exec_yank exec_when () integer_sub integer_dup_times integer_min in3 exec_dup_times (integer_mult integer_inc integer_dec integer_dup integer_min integer_dec) -68 boolean_eq boolean_swap boolean_not exec_swap () () boolean_dup_items exec_yank boolean_empty exec_rot (integer_add exec_k_when_autoconstructing () (exec_s (boolean_pop exec_yankdup) (integer_mult integer_inc tag_integer_802 boolean_invert_first_then_and boolean_empty) ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 63
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (443 359 639 767 443 641 162 360 643 473)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (443 359 639 767 443 641 162 360 643 473)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty})
Best program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 44
Size: 60
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.07
Median total errors in population: 5
Error averages by case: (0.557 0.641 0.361 0.233 0.557 0.359 0.838 0.64 0.357 0.527)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.898
Average program size in population (points): 63.561
Average percent parens in population: 0.245
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.224
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6767049
--- Timings ---
Current time: 1559594166912 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.0 seconds, 58.2%
Fitness Testing:      8.3 seconds, 26.9%
Report:               4.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 60


Auto-simplifying with starting size: 60
step: 0
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 500
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 1000
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 1500
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 2000
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 2500
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 3000
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 3500
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 4000
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 4500
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 5000
program: (in3 integer_stackdepth exec_dup_times (in4) boolean_invert_first_then_and in2 integer_min exec_do*times (integer_min print_integer) integer_empty exec_yank boolean_swap exec_yank exec_when () integer_sub integer_min in3 exec_dup_times (boolean_dup_items integer_mult exec_rot (integer_dec integer_dup integer_min integer_dec) (boolean_eq boolean_swap boolean_not exec_swap () () exec_yank) (integer_sub boolean_empty integer_add print_integer exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_s (boolean_pop boolean_dup_items exec_yankdup) (integer_mult boolean_invert_first_then_and boolean_empty) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 320
Test mean error for best: 0.32000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: 79                  | Program output: 85                 
Correct output: -6                  | Program output: -6                 
Correct output: -8                  | Program output: -8                 
Correct output: 9                   | Program output: 49                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -16                
Correct output: 72                  | Program output: 72                 
Correct output: -32                 | Program output: -32                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: 55                  | Program output: 55                 
Correct output: -7                  | Program output: -7                 
Correct output: 35                  | Program output: 35                 
Correct output: 8                   | Program output: 90                 
Correct output: 0                   | Program output: 72                 
Correct output: 50                  | Program output: 50                 
Correct output: 38                  | Program output: 51                 
Correct output: 17                  | Program output: 50                 
Correct output: 19                  | Program output: 32                 
Correct output: 38                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 27                  | Program output: 92                 
Correct output: 1                   | Program output: 9                  
Correct output: 14                  | Program output: 90                 
Correct output: 40                  | Program output: 75                 
Correct output: 45                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 30                  | Program output: 97                 
Correct output: 42                  | Program output: 42                 
Correct output: 52                  | Program output: 64                 
Correct output: 24                  | Program output: 88                 
Correct output: 8                   | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -48                 | Program output: 42                 
Correct output: -23                 | Program output: -23                
Correct output: -56                 | Program output: -56                
Correct output: 4                   | Program output: 35                 
Correct output: -79                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: -55                
Correct output: -22                 | Program output: -22                
Correct output: -59                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -23                
Correct output: -56                 | Program output: -56                
Correct output: -26                 | Program output: -26                
Correct output: -3                  | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 10                 
Correct output: -63                 | Program output: -63                
Correct output: 4                   | Program output: 9                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: 13                  | Program output: 98                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -38                 | Program output: -38                
Correct output: -11                 | Program output: -11                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -6                 
Correct output: -62                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -41                 | Program output: -41                
Correct output: -58                 | Program output: -35                
Correct output: -29                 | Program output: -29                
Correct output: -75                 | Program output: -75                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -47                
Correct output: -99                 | Program output: 32                 
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
Correct output: 20                  | Program output: 53                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
;;******************************
