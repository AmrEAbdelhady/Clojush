Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-85 72 -85 -85] -85] [[-53 -59 -53 -53] -59] [[30 30 44 30] 30] [[-76 -76 -76 42] -76] [[23 23 23 -10] -10] [[-26 -26 -26 46] -26] [[22 22 92 22] 22] [[57 57 57 -41] -41] [[76 76 76 8] 8] [[-29 -29 -29 -85] -85] [(-60 -60 -60 -60) -60] [(63 63 63 63) 63] [(-38 -38 -38 -38) -38] [(-72 -72 -72 -72) -72] [(-63 -63 -63 -63) -63] [(70 27 86 1) 1] [(69 58 24 48) 24] [(20 3 53 32) 3] [(38 19 6 30) 6] [(88 10 48 79) 10] [(79 81 88 96) 79] [(96 35 1 51) 1] [(28 99 0 25) 0] [(29 16 43 84) 16] [(3 63 80 57) 3] [(61 76 19 27) 19] [(85 46 63 65) 46] [(94 95 60 82) 60] [(36 74 35 91) 35] [(8 2 30 41) 2] [(20 2 11 89) 2] [(36 24 60 62) 24] [(42 59 83 37) 37] [(89 55 75 70) 55] [(81 96 20 56) 20] [(-3 -34 -58 -28) -58] [(-47 31 15 85) -47] [(-100 64 17 78) -100] [(-3 -75 -36 -54) -75] [(-28 -79 1 -78) -79] [(21 40 -99 29) -99] [(-32 1 -72 -36) -72] [(89 21 68 85) 21] [(-57 65 26 -69) -69] [(-21 -20 -21 64) -21] [(-60 -32 100 -47) -60] [(-74 -19 32 -34) -74] [(-57 -23 19 -71) -71] [(45 77 -19 18) -19] [(-20 75 -28 98) -28] [(-85 -15 -32 39) -85] [(-40 -68 95 -62) -68] [(-5 -28 -25 19) -28] [(-36 3 4 -91) -91] [(-50 70 30 -38) -50] [(-75 -1 -58 82) -75] [(47 53 90 46) 46] [(-44 -6 80 -53) -53] [(44 -73 -51 -83) -83] [(-53 39 46 71) -53] [(83 -59 -41 -54) -59] [(-37 -14 -98 -36) -98] [(65 -31 50 -48) -48] [(3 -79 4 12) -79] [(-51 -95 100 71) -95] [(-62 82 73 80) -62] [(98 58 -69 -92) -92] [(86 -47 80 87) -47] [(89 -95 -87 73) -95] [(41 -6 -23 -63) -63] [(94 1 85 0) 0] [(-56 -48 0 -79) -79] [(-34 -88 49 7) -88] [(-10 -36 35 0) -36] [(-1 -92 -59 -97) -97] [(-14 9 61 -68) -68] [(55 -90 68 71) -90] [(-54 45 42 5) -54] [(-5 -36 43 -42) -42] [(62 -70 82 52) -70] [(56 -47 -36 89) -47] [(29 55 24 62) 24] [(76 -6 -23 24) -23] [(-33 30 -53 61) -53] [(-12 83 84 34) -12] [(97 -27 -52 45) -52] [(12 12 18 -47) -47] [(-83 55 88 -21) -83] [(63 -62 -100 6) -100] [(-1 8 -68 -71) -71] [(-38 36 51 56) -38] [(45 -47 -18 87) -47] [(39 -33 68 -90) -90] [(70 84 -90 52) -90] [(94 96 4 1) 1])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-85 72 -85 -85] -85]
Train Case:   6 | Input/Output: [[-53 -59 -53 -53] -59]
Train Case:   7 | Input/Output: [[30 30 44 30] 30]
Train Case:   8 | Input/Output: [[-76 -76 -76 42] -76]
Train Case:   9 | Input/Output: [[23 23 23 -10] -10]
Train Case:  10 | Input/Output: [[-26 -26 -26 46] -26]
Train Case:  11 | Input/Output: [[22 22 92 22] 22]
Train Case:  12 | Input/Output: [[57 57 57 -41] -41]
Train Case:  13 | Input/Output: [[76 76 76 8] 8]
Train Case:  14 | Input/Output: [[-29 -29 -29 -85] -85]
Train Case:  15 | Input/Output: [(-60 -60 -60 -60) -60]
Train Case:  16 | Input/Output: [(63 63 63 63) 63]
Train Case:  17 | Input/Output: [(-38 -38 -38 -38) -38]
Train Case:  18 | Input/Output: [(-72 -72 -72 -72) -72]
Train Case:  19 | Input/Output: [(-63 -63 -63 -63) -63]
Train Case:  20 | Input/Output: [(70 27 86 1) 1]
Train Case:  21 | Input/Output: [(69 58 24 48) 24]
Train Case:  22 | Input/Output: [(20 3 53 32) 3]
Train Case:  23 | Input/Output: [(38 19 6 30) 6]
Train Case:  24 | Input/Output: [(88 10 48 79) 10]
Train Case:  25 | Input/Output: [(79 81 88 96) 79]
Train Case:  26 | Input/Output: [(96 35 1 51) 1]
Train Case:  27 | Input/Output: [(28 99 0 25) 0]
Train Case:  28 | Input/Output: [(29 16 43 84) 16]
Train Case:  29 | Input/Output: [(3 63 80 57) 3]
Train Case:  30 | Input/Output: [(61 76 19 27) 19]
Train Case:  31 | Input/Output: [(85 46 63 65) 46]
Train Case:  32 | Input/Output: [(94 95 60 82) 60]
Train Case:  33 | Input/Output: [(36 74 35 91) 35]
Train Case:  34 | Input/Output: [(8 2 30 41) 2]
Train Case:  35 | Input/Output: [(20 2 11 89) 2]
Train Case:  36 | Input/Output: [(36 24 60 62) 24]
Train Case:  37 | Input/Output: [(42 59 83 37) 37]
Train Case:  38 | Input/Output: [(89 55 75 70) 55]
Train Case:  39 | Input/Output: [(81 96 20 56) 20]
Train Case:  40 | Input/Output: [(-3 -34 -58 -28) -58]
Train Case:  41 | Input/Output: [(-47 31 15 85) -47]
Train Case:  42 | Input/Output: [(-100 64 17 78) -100]
Train Case:  43 | Input/Output: [(-3 -75 -36 -54) -75]
Train Case:  44 | Input/Output: [(-28 -79 1 -78) -79]
Train Case:  45 | Input/Output: [(21 40 -99 29) -99]
Train Case:  46 | Input/Output: [(-32 1 -72 -36) -72]
Train Case:  47 | Input/Output: [(89 21 68 85) 21]
Train Case:  48 | Input/Output: [(-57 65 26 -69) -69]
Train Case:  49 | Input/Output: [(-21 -20 -21 64) -21]
Train Case:  50 | Input/Output: [(-60 -32 100 -47) -60]
Train Case:  51 | Input/Output: [(-74 -19 32 -34) -74]
Train Case:  52 | Input/Output: [(-57 -23 19 -71) -71]
Train Case:  53 | Input/Output: [(45 77 -19 18) -19]
Train Case:  54 | Input/Output: [(-20 75 -28 98) -28]
Train Case:  55 | Input/Output: [(-85 -15 -32 39) -85]
Train Case:  56 | Input/Output: [(-40 -68 95 -62) -68]
Train Case:  57 | Input/Output: [(-5 -28 -25 19) -28]
Train Case:  58 | Input/Output: [(-36 3 4 -91) -91]
Train Case:  59 | Input/Output: [(-50 70 30 -38) -50]
Train Case:  60 | Input/Output: [(-75 -1 -58 82) -75]
Train Case:  61 | Input/Output: [(47 53 90 46) 46]
Train Case:  62 | Input/Output: [(-44 -6 80 -53) -53]
Train Case:  63 | Input/Output: [(44 -73 -51 -83) -83]
Train Case:  64 | Input/Output: [(-53 39 46 71) -53]
Train Case:  65 | Input/Output: [(83 -59 -41 -54) -59]
Train Case:  66 | Input/Output: [(-37 -14 -98 -36) -98]
Train Case:  67 | Input/Output: [(65 -31 50 -48) -48]
Train Case:  68 | Input/Output: [(3 -79 4 12) -79]
Train Case:  69 | Input/Output: [(-51 -95 100 71) -95]
Train Case:  70 | Input/Output: [(-62 82 73 80) -62]
Train Case:  71 | Input/Output: [(98 58 -69 -92) -92]
Train Case:  72 | Input/Output: [(86 -47 80 87) -47]
Train Case:  73 | Input/Output: [(89 -95 -87 73) -95]
Train Case:  74 | Input/Output: [(41 -6 -23 -63) -63]
Train Case:  75 | Input/Output: [(94 1 85 0) 0]
Train Case:  76 | Input/Output: [(-56 -48 0 -79) -79]
Train Case:  77 | Input/Output: [(-34 -88 49 7) -88]
Train Case:  78 | Input/Output: [(-10 -36 35 0) -36]
Train Case:  79 | Input/Output: [(-1 -92 -59 -97) -97]
Train Case:  80 | Input/Output: [(-14 9 61 -68) -68]
Train Case:  81 | Input/Output: [(55 -90 68 71) -90]
Train Case:  82 | Input/Output: [(-54 45 42 5) -54]
Train Case:  83 | Input/Output: [(-5 -36 43 -42) -42]
Train Case:  84 | Input/Output: [(62 -70 82 52) -70]
Train Case:  85 | Input/Output: [(56 -47 -36 89) -47]
Train Case:  86 | Input/Output: [(29 55 24 62) 24]
Train Case:  87 | Input/Output: [(76 -6 -23 24) -23]
Train Case:  88 | Input/Output: [(-33 30 -53 61) -53]
Train Case:  89 | Input/Output: [(-12 83 84 34) -12]
Train Case:  90 | Input/Output: [(97 -27 -52 45) -52]
Train Case:  91 | Input/Output: [(12 12 18 -47) -47]
Train Case:  92 | Input/Output: [(-83 55 88 -21) -83]
Train Case:  93 | Input/Output: [(63 -62 -100 6) -100]
Train Case:  94 | Input/Output: [(-1 8 -68 -71) -71]
Train Case:  95 | Input/Output: [(-38 36 51 56) -38]
Train Case:  96 | Input/Output: [(45 -47 -18 87) -47]
Train Case:  97 | Input/Output: [(39 -33 68 -90) -90]
Train Case:  98 | Input/Output: [(70 84 -90 52) -90]
Train Case:  99 | Input/Output: [(94 96 4 1) 1]
Test Case:   0 | Input/Output: [[-56 -56 -56 95] -56]
Test Case:   1 | Input/Output: [[-5 -5 39 -5] -5]
Test Case:   2 | Input/Output: [[14 -90 -90 -90] -90]
Test Case:   3 | Input/Output: [[57 4 57 57] 4]
Test Case:   4 | Input/Output: [[-97 -97 -97 -80] -97]
Test Case:   5 | Input/Output: [[81 -44 -44 -44] -44]
Test Case:   6 | Input/Output: [[90 94 94 94] 90]
Test Case:   7 | Input/Output: [[55 55 55 -16] -16]
Test Case:   8 | Input/Output: [[37 37 37 1] 1]
Test Case:   9 | Input/Output: [[5 5 45 5] 5]
Test Case:  10 | Input/Output: [[-91 -88 -91 -91] -91]
Test Case:  11 | Input/Output: [[-89 71 -89 -89] -89]
Test Case:  12 | Input/Output: [[64 64 64 -54] -54]
Test Case:  13 | Input/Output: [[-45 -45 8 -45] -45]
Test Case:  14 | Input/Output: [[41 41 -34 41] -34]
Test Case:  15 | Input/Output: [[5 5 5 76] 5]
Test Case:  16 | Input/Output: [[-87 -45 -87 -87] -87]
Test Case:  17 | Input/Output: [[-1 -1 -1 53] -1]
Test Case:  18 | Input/Output: [[-91 -10 -91 -91] -91]
Test Case:  19 | Input/Output: [[-77 -77 -77 67] -77]
Test Case:  20 | Input/Output: [[57 98 57 57] 57]
Test Case:  21 | Input/Output: [[83 83 83 -30] -30]
Test Case:  22 | Input/Output: [[26 53 26 26] 26]
Test Case:  23 | Input/Output: [[18 18 20 18] 18]
Test Case:  24 | Input/Output: [[2 2 22 2] 2]
Test Case:  25 | Input/Output: [[0 0 66 0] 0]
Test Case:  26 | Input/Output: [[9 33 9 9] 9]
Test Case:  27 | Input/Output: [[75 95 75 75] 75]
Test Case:  28 | Input/Output: [[-80 -80 -29 -80] -80]
Test Case:  29 | Input/Output: [[-32 -32 -32 -30] -32]
Test Case:  30 | Input/Output: [[-78 -82 -82 -82] -82]
Test Case:  31 | Input/Output: [[-5 -5 -5 -9] -9]
Test Case:  32 | Input/Output: [[-35 -65 -65 -65] -65]
Test Case:  33 | Input/Output: [[96 96 7 96] 7]
Test Case:  34 | Input/Output: [[52 33 33 33] 33]
Test Case:  35 | Input/Output: [[-90 -90 10 -90] -90]
Test Case:  36 | Input/Output: [[-40 -68 -40 -40] -68]
Test Case:  37 | Input/Output: [[16 -96 16 16] -96]
Test Case:  38 | Input/Output: [[-69 19 19 19] -69]
Test Case:  39 | Input/Output: [[-67 -67 -67 -67] -67]
Test Case:  40 | Input/Output: [[-92 -92 -92 -21] -92]
Test Case:  41 | Input/Output: [[66 -34 -34 -34] -34]
Test Case:  42 | Input/Output: [[-56 79 -56 -56] -56]
Test Case:  43 | Input/Output: [[66 66 66 -5] -5]
Test Case:  44 | Input/Output: [[-34 100 -34 -34] -34]
Test Case:  45 | Input/Output: [[-20 -20 45 -20] -20]
Test Case:  46 | Input/Output: [[18 18 22 18] 18]
Test Case:  47 | Input/Output: [[93 93 29 93] 29]
Test Case:  48 | Input/Output: [[-6 -6 88 -6] -6]
Test Case:  49 | Input/Output: [[93 -91 -91 -91] -91]
Test Case:  50 | Input/Output: [[46 46 -44 46] -44]
Test Case:  51 | Input/Output: [[-19 -19 90 -19] -19]
Test Case:  52 | Input/Output: [[27 27 27 77] 27]
Test Case:  53 | Input/Output: [[0 0 47 0] 0]
Test Case:  54 | Input/Output: [[-77 -18 -18 -18] -77]
Test Case:  55 | Input/Output: [[4 4 -2 4] -2]
Test Case:  56 | Input/Output: [[37 -39 37 37] -39]
Test Case:  57 | Input/Output: [[-86 8 -86 -86] -86]
Test Case:  58 | Input/Output: [[-7 -7 -58 -7] -58]
Test Case:  59 | Input/Output: [[81 59 81 81] 59]
Test Case:  60 | Input/Output: [[63 59 63 63] 59]
Test Case:  61 | Input/Output: [[-37 -37 -37 44] -37]
Test Case:  62 | Input/Output: [[-68 -17 -17 -17] -68]
Test Case:  63 | Input/Output: [[-81 -81 -81 -7] -81]
Test Case:  64 | Input/Output: [[41 41 26 41] 26]
Test Case:  65 | Input/Output: [[17 17 -48 17] -48]
Test Case:  66 | Input/Output: [[-29 -86 -86 -86] -86]
Test Case:  67 | Input/Output: [[-91 33 -91 -91] -91]
Test Case:  68 | Input/Output: [[-1 -30 -1 -1] -30]
Test Case:  69 | Input/Output: [[-82 -82 -82 13] -82]
Test Case:  70 | Input/Output: [[-76 -76 -76 66] -76]
Test Case:  71 | Input/Output: [[-1 -1 -81 -1] -81]
Test Case:  72 | Input/Output: [[-17 32 32 32] -17]
Test Case:  73 | Input/Output: [[11 11 11 -31] -31]
Test Case:  74 | Input/Output: [[94 94 94 0] 0]
Test Case:  75 | Input/Output: [[67 67 67 -9] -9]
Test Case:  76 | Input/Output: [[-20 -20 39 -20] -20]
Test Case:  77 | Input/Output: [[60 60 5 60] 5]
Test Case:  78 | Input/Output: [[66 7 7 7] 7]
Test Case:  79 | Input/Output: [[-89 60 -89 -89] -89]
Test Case:  80 | Input/Output: [[62 62 62 -81] -81]
Test Case:  81 | Input/Output: [[29 29 29 -98] -98]
Test Case:  82 | Input/Output: [[60 60 -92 60] -92]
Test Case:  83 | Input/Output: [[-46 -46 -46 47] -46]
Test Case:  84 | Input/Output: [[-18 -18 -18 -5] -18]
Test Case:  85 | Input/Output: [[16 16 -73 16] -73]
Test Case:  86 | Input/Output: [[-68 -68 -78 -68] -78]
Test Case:  87 | Input/Output: [[31 -15 -15 -15] -15]
Test Case:  88 | Input/Output: [[-49 -49 -3 -49] -49]
Test Case:  89 | Input/Output: [[58 58 58 92] 58]
Test Case:  90 | Input/Output: [[2 2 -50 2] -50]
Test Case:  91 | Input/Output: [[61 61 -54 61] -54]
Test Case:  92 | Input/Output: [[-1 48 48 48] -1]
Test Case:  93 | Input/Output: [[-20 -20 -20 -82] -82]
Test Case:  94 | Input/Output: [[21 -11 -11 -11] -11]
Test Case:  95 | Input/Output: [[77 77 77 -4] -4]
Test Case:  96 | Input/Output: [[58 -23 58 58] -23]
Test Case:  97 | Input/Output: [[-32 -65 -32 -32] -65]
Test Case:  98 | Input/Output: [[13 70 70 70] 13]
Test Case:  99 | Input/Output: [[11 55 55 55] 11]
Test Case: 100 | Input/Output: [(40 40 40 40) 40]
Test Case: 101 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 102 | Input/Output: [(96 96 96 96) 96]
Test Case: 103 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 104 | Input/Output: [(82 82 82 82) 82]
Test Case: 105 | Input/Output: [(90 90 90 90) 90]
Test Case: 106 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 107 | Input/Output: [(98 98 98 98) 98]
Test Case: 108 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 109 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 110 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 111 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 112 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 113 | Input/Output: [(99 99 99 99) 99]
Test Case: 114 | Input/Output: [(76 76 76 76) 76]
Test Case: 115 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 116 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 117 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 118 | Input/Output: [(96 96 96 96) 96]
Test Case: 119 | Input/Output: [(65 65 65 65) 65]
Test Case: 120 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 121 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 122 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 123 | Input/Output: [(60 60 60 60) 60]
Test Case: 124 | Input/Output: [(23 23 23 23) 23]
Test Case: 125 | Input/Output: [(91 91 91 91) 91]
Test Case: 126 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 127 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 128 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 129 | Input/Output: [(6 6 6 6) 6]
Test Case: 130 | Input/Output: [(45 45 45 45) 45]
Test Case: 131 | Input/Output: [(3 3 3 3) 3]
Test Case: 132 | Input/Output: [(83 83 83 83) 83]
Test Case: 133 | Input/Output: [(74 74 74 74) 74]
Test Case: 134 | Input/Output: [(62 62 62 62) 62]
Test Case: 135 | Input/Output: [(82 82 82 82) 82]
Test Case: 136 | Input/Output: [(57 57 57 57) 57]
Test Case: 137 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 138 | Input/Output: [(54 54 54 54) 54]
Test Case: 139 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 140 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 141 | Input/Output: [(63 63 63 63) 63]
Test Case: 142 | Input/Output: [(47 47 47 47) 47]
Test Case: 143 | Input/Output: [(84 84 84 84) 84]
Test Case: 144 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 145 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 146 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 147 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 148 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 149 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 150 | Input/Output: [(58 58 58 58) 58]
Test Case: 151 | Input/Output: [(21 21 21 21) 21]
Test Case: 152 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 153 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 154 | Input/Output: [(83 83 83 83) 83]
Test Case: 155 | Input/Output: [(22 22 22 22) 22]
Test Case: 156 | Input/Output: [(17 17 17 17) 17]
Test Case: 157 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 158 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 159 | Input/Output: [(7 7 7 7) 7]
Test Case: 160 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 161 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 162 | Input/Output: [(62 62 62 62) 62]
Test Case: 163 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 164 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 165 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 166 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 167 | Input/Output: [(14 14 14 14) 14]
Test Case: 168 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 169 | Input/Output: [(47 47 47 47) 47]
Test Case: 170 | Input/Output: [(29 29 29 29) 29]
Test Case: 171 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 172 | Input/Output: [(22 22 22 22) 22]
Test Case: 173 | Input/Output: [(22 22 22 22) 22]
Test Case: 174 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 175 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 176 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 177 | Input/Output: [(33 33 33 33) 33]
Test Case: 178 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 179 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 180 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 181 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 182 | Input/Output: [(26 26 26 26) 26]
Test Case: 183 | Input/Output: [(71 71 71 71) 71]
Test Case: 184 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 185 | Input/Output: [(22 22 22 22) 22]
Test Case: 186 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 187 | Input/Output: [(61 61 61 61) 61]
Test Case: 188 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 189 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 190 | Input/Output: [(0 0 0 0) 0]
Test Case: 191 | Input/Output: [(70 70 70 70) 70]
Test Case: 192 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 193 | Input/Output: [(34 34 34 34) 34]
Test Case: 194 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 195 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 196 | Input/Output: [(91 91 91 91) 91]
Test Case: 197 | Input/Output: [(91 91 91 91) 91]
Test Case: 198 | Input/Output: [(54 54 54 54) 54]
Test Case: 199 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 200 | Input/Output: [(3 18 100 22) 3]
Test Case: 201 | Input/Output: [(6 4 60 96) 4]
Test Case: 202 | Input/Output: [(61 53 61 90) 53]
Test Case: 203 | Input/Output: [(79 21 75 49) 21]
Test Case: 204 | Input/Output: [(83 72 87 4) 4]
Test Case: 205 | Input/Output: [(70 91 53 27) 27]
Test Case: 206 | Input/Output: [(13 7 33 52) 7]
Test Case: 207 | Input/Output: [(62 29 35 8) 8]
Test Case: 208 | Input/Output: [(29 97 76 61) 29]
Test Case: 209 | Input/Output: [(43 48 1 4) 1]
Test Case: 210 | Input/Output: [(69 18 3 11) 3]
Test Case: 211 | Input/Output: [(37 81 2 1) 1]
Test Case: 212 | Input/Output: [(28 22 62 11) 11]
Test Case: 213 | Input/Output: [(31 13 24 24) 13]
Test Case: 214 | Input/Output: [(87 0 61 23) 0]
Test Case: 215 | Input/Output: [(28 20 44 33) 20]
Test Case: 216 | Input/Output: [(64 71 22 6) 6]
Test Case: 217 | Input/Output: [(74 95 17 26) 17]
Test Case: 218 | Input/Output: [(13 43 13 82) 13]
Test Case: 219 | Input/Output: [(27 47 74 85) 27]
Test Case: 220 | Input/Output: [(64 48 18 70) 18]
Test Case: 221 | Input/Output: [(48 23 95 58) 23]
Test Case: 222 | Input/Output: [(38 8 25 94) 8]
Test Case: 223 | Input/Output: [(55 42 53 73) 42]
Test Case: 224 | Input/Output: [(32 22 39 29) 22]
Test Case: 225 | Input/Output: [(78 94 33 26) 26]
Test Case: 226 | Input/Output: [(11 16 16 88) 11]
Test Case: 227 | Input/Output: [(43 19 39 5) 5]
Test Case: 228 | Input/Output: [(20 27 99 21) 20]
Test Case: 229 | Input/Output: [(27 54 32 99) 27]
Test Case: 230 | Input/Output: [(84 59 42 17) 17]
Test Case: 231 | Input/Output: [(56 2 68 69) 2]
Test Case: 232 | Input/Output: [(6 66 11 17) 6]
Test Case: 233 | Input/Output: [(22 81 26 18) 18]
Test Case: 234 | Input/Output: [(68 46 10 62) 10]
Test Case: 235 | Input/Output: [(83 72 46 69) 46]
Test Case: 236 | Input/Output: [(53 25 10 27) 10]
Test Case: 237 | Input/Output: [(36 94 96 6) 6]
Test Case: 238 | Input/Output: [(23 77 3 66) 3]
Test Case: 239 | Input/Output: [(25 20 31 44) 20]
Test Case: 240 | Input/Output: [(59 69 21 16) 16]
Test Case: 241 | Input/Output: [(37 60 2 87) 2]
Test Case: 242 | Input/Output: [(65 92 41 96) 41]
Test Case: 243 | Input/Output: [(81 28 73 58) 28]
Test Case: 244 | Input/Output: [(48 26 72 80) 26]
Test Case: 245 | Input/Output: [(14 87 88 48) 14]
Test Case: 246 | Input/Output: [(34 17 44 59) 17]
Test Case: 247 | Input/Output: [(4 87 61 8) 4]
Test Case: 248 | Input/Output: [(68 73 73 92) 68]
Test Case: 249 | Input/Output: [(94 64 28 94) 28]
Test Case: 250 | Input/Output: [(5 33 47 44) 5]
Test Case: 251 | Input/Output: [(98 52 64 23) 23]
Test Case: 252 | Input/Output: [(58 0 75 20) 0]
Test Case: 253 | Input/Output: [(30 69 33 80) 30]
Test Case: 254 | Input/Output: [(97 50 55 12) 12]
Test Case: 255 | Input/Output: [(23 12 17 26) 12]
Test Case: 256 | Input/Output: [(14 37 8 27) 8]
Test Case: 257 | Input/Output: [(98 11 99 89) 11]
Test Case: 258 | Input/Output: [(94 82 23 29) 23]
Test Case: 259 | Input/Output: [(99 68 26 59) 26]
Test Case: 260 | Input/Output: [(3 50 28 75) 3]
Test Case: 261 | Input/Output: [(74 46 68 66) 46]
Test Case: 262 | Input/Output: [(98 17 49 77) 17]
Test Case: 263 | Input/Output: [(76 92 25 100) 25]
Test Case: 264 | Input/Output: [(61 50 71 30) 30]
Test Case: 265 | Input/Output: [(76 84 80 55) 55]
Test Case: 266 | Input/Output: [(35 100 73 100) 35]
Test Case: 267 | Input/Output: [(7 71 25 8) 7]
Test Case: 268 | Input/Output: [(71 48 90 20) 20]
Test Case: 269 | Input/Output: [(3 98 67 63) 3]
Test Case: 270 | Input/Output: [(28 80 59 48) 28]
Test Case: 271 | Input/Output: [(66 68 11 85) 11]
Test Case: 272 | Input/Output: [(7 6 46 20) 6]
Test Case: 273 | Input/Output: [(81 40 41 80) 40]
Test Case: 274 | Input/Output: [(23 16 17 85) 16]
Test Case: 275 | Input/Output: [(33 55 77 49) 33]
Test Case: 276 | Input/Output: [(14 91 86 79) 14]
Test Case: 277 | Input/Output: [(79 72 7 4) 4]
Test Case: 278 | Input/Output: [(65 90 48 2) 2]
Test Case: 279 | Input/Output: [(52 65 10 66) 10]
Test Case: 280 | Input/Output: [(12 82 21 76) 12]
Test Case: 281 | Input/Output: [(50 62 7 79) 7]
Test Case: 282 | Input/Output: [(57 26 78 86) 26]
Test Case: 283 | Input/Output: [(76 83 66 5) 5]
Test Case: 284 | Input/Output: [(9 89 85 55) 9]
Test Case: 285 | Input/Output: [(38 33 49 78) 33]
Test Case: 286 | Input/Output: [(71 70 76 50) 50]
Test Case: 287 | Input/Output: [(87 85 34 15) 15]
Test Case: 288 | Input/Output: [(74 84 12 41) 12]
Test Case: 289 | Input/Output: [(86 62 23 73) 23]
Test Case: 290 | Input/Output: [(49 27 88 52) 27]
Test Case: 291 | Input/Output: [(63 62 32 62) 32]
Test Case: 292 | Input/Output: [(76 91 13 73) 13]
Test Case: 293 | Input/Output: [(62 77 78 19) 19]
Test Case: 294 | Input/Output: [(90 78 47 99) 47]
Test Case: 295 | Input/Output: [(60 65 0 28) 0]
Test Case: 296 | Input/Output: [(40 56 69 44) 40]
Test Case: 297 | Input/Output: [(94 17 74 12) 12]
Test Case: 298 | Input/Output: [(59 56 21 62) 21]
Test Case: 299 | Input/Output: [(16 32 53 5) 5]
Test Case: 300 | Input/Output: [(68 90 65 33) 33]
Test Case: 301 | Input/Output: [(88 66 92 20) 20]
Test Case: 302 | Input/Output: [(94 42 46 5) 5]
Test Case: 303 | Input/Output: [(17 58 77 23) 17]
Test Case: 304 | Input/Output: [(30 90 67 55) 30]
Test Case: 305 | Input/Output: [(78 98 76 86) 76]
Test Case: 306 | Input/Output: [(97 41 69 59) 41]
Test Case: 307 | Input/Output: [(97 25 22 22) 22]
Test Case: 308 | Input/Output: [(32 63 96 48) 32]
Test Case: 309 | Input/Output: [(87 48 61 99) 48]
Test Case: 310 | Input/Output: [(79 63 90 20) 20]
Test Case: 311 | Input/Output: [(44 31 24 40) 24]
Test Case: 312 | Input/Output: [(59 9 26 38) 9]
Test Case: 313 | Input/Output: [(52 27 10 99) 10]
Test Case: 314 | Input/Output: [(12 96 60 54) 12]
Test Case: 315 | Input/Output: [(17 41 83 91) 17]
Test Case: 316 | Input/Output: [(82 69 53 66) 53]
Test Case: 317 | Input/Output: [(0 39 21 44) 0]
Test Case: 318 | Input/Output: [(36 83 14 49) 14]
Test Case: 319 | Input/Output: [(73 84 2 86) 2]
Test Case: 320 | Input/Output: [(69 6 45 18) 6]
Test Case: 321 | Input/Output: [(63 81 73 80) 63]
Test Case: 322 | Input/Output: [(94 23 14 52) 14]
Test Case: 323 | Input/Output: [(9 56 6 32) 6]
Test Case: 324 | Input/Output: [(30 84 97 25) 25]
Test Case: 325 | Input/Output: [(47 64 57 63) 47]
Test Case: 326 | Input/Output: [(88 65 98 77) 65]
Test Case: 327 | Input/Output: [(72 32 97 22) 22]
Test Case: 328 | Input/Output: [(69 91 52 15) 15]
Test Case: 329 | Input/Output: [(63 11 60 88) 11]
Test Case: 330 | Input/Output: [(88 72 52 91) 52]
Test Case: 331 | Input/Output: [(77 38 54 55) 38]
Test Case: 332 | Input/Output: [(12 38 5 36) 5]
Test Case: 333 | Input/Output: [(27 32 2 15) 2]
Test Case: 334 | Input/Output: [(52 72 48 9) 9]
Test Case: 335 | Input/Output: [(91 66 20 42) 20]
Test Case: 336 | Input/Output: [(18 29 5 19) 5]
Test Case: 337 | Input/Output: [(55 24 11 36) 11]
Test Case: 338 | Input/Output: [(60 88 71 68) 60]
Test Case: 339 | Input/Output: [(61 85 44 21) 21]
Test Case: 340 | Input/Output: [(36 91 56 34) 34]
Test Case: 341 | Input/Output: [(90 93 58 26) 26]
Test Case: 342 | Input/Output: [(16 55 47 4) 4]
Test Case: 343 | Input/Output: [(28 47 87 70) 28]
Test Case: 344 | Input/Output: [(85 16 17 73) 16]
Test Case: 345 | Input/Output: [(34 56 73 54) 34]
Test Case: 346 | Input/Output: [(64 39 87 13) 13]
Test Case: 347 | Input/Output: [(4 70 30 51) 4]
Test Case: 348 | Input/Output: [(60 54 38 69) 38]
Test Case: 349 | Input/Output: [(96 28 18 35) 18]
Test Case: 350 | Input/Output: [(71 30 28 55) 28]
Test Case: 351 | Input/Output: [(19 42 9 56) 9]
Test Case: 352 | Input/Output: [(46 3 62 88) 3]
Test Case: 353 | Input/Output: [(74 36 92 34) 34]
Test Case: 354 | Input/Output: [(79 26 3 92) 3]
Test Case: 355 | Input/Output: [(11 70 79 33) 11]
Test Case: 356 | Input/Output: [(70 16 21 27) 16]
Test Case: 357 | Input/Output: [(28 88 27 10) 10]
Test Case: 358 | Input/Output: [(91 70 10 66) 10]
Test Case: 359 | Input/Output: [(1 55 26 60) 1]
Test Case: 360 | Input/Output: [(44 97 38 13) 13]
Test Case: 361 | Input/Output: [(4 86 56 89) 4]
Test Case: 362 | Input/Output: [(90 89 74 72) 72]
Test Case: 363 | Input/Output: [(87 3 47 71) 3]
Test Case: 364 | Input/Output: [(49 64 61 85) 49]
Test Case: 365 | Input/Output: [(82 13 49 14) 13]
Test Case: 366 | Input/Output: [(99 34 80 62) 34]
Test Case: 367 | Input/Output: [(21 55 50 36) 21]
Test Case: 368 | Input/Output: [(27 17 50 76) 17]
Test Case: 369 | Input/Output: [(92 86 74 6) 6]
Test Case: 370 | Input/Output: [(63 35 7 87) 7]
Test Case: 371 | Input/Output: [(78 54 14 59) 14]
Test Case: 372 | Input/Output: [(30 29 62 91) 29]
Test Case: 373 | Input/Output: [(43 84 70 85) 43]
Test Case: 374 | Input/Output: [(93 75 99 85) 75]
Test Case: 375 | Input/Output: [(15 6 64 50) 6]
Test Case: 376 | Input/Output: [(10 61 14 97) 10]
Test Case: 377 | Input/Output: [(73 31 33 91) 31]
Test Case: 378 | Input/Output: [(81 13 90 95) 13]
Test Case: 379 | Input/Output: [(42 98 98 94) 42]
Test Case: 380 | Input/Output: [(39 60 70 10) 10]
Test Case: 381 | Input/Output: [(68 37 81 28) 28]
Test Case: 382 | Input/Output: [(30 20 21 7) 7]
Test Case: 383 | Input/Output: [(87 34 98 75) 34]
Test Case: 384 | Input/Output: [(64 38 51 31) 31]
Test Case: 385 | Input/Output: [(36 63 15 32) 15]
Test Case: 386 | Input/Output: [(26 80 71 58) 26]
Test Case: 387 | Input/Output: [(0 55 59 13) 0]
Test Case: 388 | Input/Output: [(92 92 10 39) 10]
Test Case: 389 | Input/Output: [(96 70 53 27) 27]
Test Case: 390 | Input/Output: [(98 83 68 100) 68]
Test Case: 391 | Input/Output: [(59 27 43 26) 26]
Test Case: 392 | Input/Output: [(2 17 84 20) 2]
Test Case: 393 | Input/Output: [(49 6 78 39) 6]
Test Case: 394 | Input/Output: [(7 90 55 65) 7]
Test Case: 395 | Input/Output: [(96 39 63 39) 39]
Test Case: 396 | Input/Output: [(60 34 20 64) 20]
Test Case: 397 | Input/Output: [(13 5 30 30) 5]
Test Case: 398 | Input/Output: [(75 76 72 48) 48]
Test Case: 399 | Input/Output: [(81 62 31 18) 18]
Test Case: 400 | Input/Output: [(-36 -91 36 79) -91]
Test Case: 401 | Input/Output: [(62 -52 -57 39) -57]
Test Case: 402 | Input/Output: [(34 -8 -65 -42) -65]
Test Case: 403 | Input/Output: [(-48 5 2 -61) -61]
Test Case: 404 | Input/Output: [(-87 30 74 54) -87]
Test Case: 405 | Input/Output: [(-78 -10 89 55) -78]
Test Case: 406 | Input/Output: [(83 -81 65 -8) -81]
Test Case: 407 | Input/Output: [(12 58 -70 92) -70]
Test Case: 408 | Input/Output: [(45 66 7 -88) -88]
Test Case: 409 | Input/Output: [(-28 69 -41 23) -41]
Test Case: 410 | Input/Output: [(62 -71 -81 87) -81]
Test Case: 411 | Input/Output: [(-64 49 86 -21) -64]
Test Case: 412 | Input/Output: [(-40 81 96 28) -40]
Test Case: 413 | Input/Output: [(-92 -22 1 47) -92]
Test Case: 414 | Input/Output: [(-57 -33 -39 100) -57]
Test Case: 415 | Input/Output: [(-50 -75 -34 50) -75]
Test Case: 416 | Input/Output: [(-96 85 19 -70) -96]
Test Case: 417 | Input/Output: [(-33 34 1 88) -33]
Test Case: 418 | Input/Output: [(-95 86 -47 85) -95]
Test Case: 419 | Input/Output: [(-21 33 -76 58) -76]
Test Case: 420 | Input/Output: [(-2 90 2 -49) -49]
Test Case: 421 | Input/Output: [(-38 -61 55 -80) -80]
Test Case: 422 | Input/Output: [(-79 -84 29 -74) -84]
Test Case: 423 | Input/Output: [(26 -51 -76 34) -76]
Test Case: 424 | Input/Output: [(20 56 76 -28) -28]
Test Case: 425 | Input/Output: [(-42 -59 -25 18) -59]
Test Case: 426 | Input/Output: [(39 -27 -72 26) -72]
Test Case: 427 | Input/Output: [(-19 5 -74 -23) -74]
Test Case: 428 | Input/Output: [(-9 23 25 -82) -82]
Test Case: 429 | Input/Output: [(32 92 -84 30) -84]
Test Case: 430 | Input/Output: [(-99 55 -97 28) -99]
Test Case: 431 | Input/Output: [(-5 -8 -97 -30) -97]
Test Case: 432 | Input/Output: [(39 81 83 -25) -25]
Test Case: 433 | Input/Output: [(-68 -3 -43 29) -68]
Test Case: 434 | Input/Output: [(-97 -14 21 -47) -97]
Test Case: 435 | Input/Output: [(-93 70 -85 37) -93]
Test Case: 436 | Input/Output: [(-8 -38 -88 15) -88]
Test Case: 437 | Input/Output: [(35 70 10 8) 8]
Test Case: 438 | Input/Output: [(22 77 -40 87) -40]
Test Case: 439 | Input/Output: [(89 86 -88 75) -88]
Test Case: 440 | Input/Output: [(10 42 -25 -40) -40]
Test Case: 441 | Input/Output: [(-80 94 -91 5) -91]
Test Case: 442 | Input/Output: [(-49 16 16 60) -49]
Test Case: 443 | Input/Output: [(56 -15 16 -94) -94]
Test Case: 444 | Input/Output: [(-40 95 -72 -4) -72]
Test Case: 445 | Input/Output: [(-31 75 -42 -48) -48]
Test Case: 446 | Input/Output: [(-72 26 -100 48) -100]
Test Case: 447 | Input/Output: [(-36 -74 27 -55) -74]
Test Case: 448 | Input/Output: [(87 -43 -1 -63) -63]
Test Case: 449 | Input/Output: [(82 -12 11 76) -12]
Test Case: 450 | Input/Output: [(-96 65 17 -56) -96]
Test Case: 451 | Input/Output: [(-27 -82 -33 26) -82]
Test Case: 452 | Input/Output: [(-69 -4 -77 -37) -77]
Test Case: 453 | Input/Output: [(92 55 37 100) 37]
Test Case: 454 | Input/Output: [(54 -63 -68 -76) -76]
Test Case: 455 | Input/Output: [(83 95 -58 8) -58]
Test Case: 456 | Input/Output: [(-82 17 -50 14) -82]
Test Case: 457 | Input/Output: [(29 99 -76 97) -76]
Test Case: 458 | Input/Output: [(-34 -50 -21 13) -50]
Test Case: 459 | Input/Output: [(-65 -94 -37 -85) -94]
Test Case: 460 | Input/Output: [(-79 91 95 -84) -84]
Test Case: 461 | Input/Output: [(99 2 -25 50) -25]
Test Case: 462 | Input/Output: [(40 38 -65 5) -65]
Test Case: 463 | Input/Output: [(-69 60 96 55) -69]
Test Case: 464 | Input/Output: [(-61 -72 3 -10) -72]
Test Case: 465 | Input/Output: [(64 62 -76 3) -76]
Test Case: 466 | Input/Output: [(48 -70 -43 12) -70]
Test Case: 467 | Input/Output: [(98 -32 -97 -67) -97]
Test Case: 468 | Input/Output: [(34 -59 -74 -45) -74]
Test Case: 469 | Input/Output: [(56 37 -24 10) -24]
Test Case: 470 | Input/Output: [(-28 13 -60 -64) -64]
Test Case: 471 | Input/Output: [(-82 -74 -32 98) -82]
Test Case: 472 | Input/Output: [(43 -68 -84 -94) -94]
Test Case: 473 | Input/Output: [(-93 2 -89 -37) -93]
Test Case: 474 | Input/Output: [(80 76 -56 34) -56]
Test Case: 475 | Input/Output: [(-62 64 -81 47) -81]
Test Case: 476 | Input/Output: [(-66 -83 -81 -54) -83]
Test Case: 477 | Input/Output: [(34 -100 -34 24) -100]
Test Case: 478 | Input/Output: [(-87 -79 -51 78) -87]
Test Case: 479 | Input/Output: [(91 51 42 58) 42]
Test Case: 480 | Input/Output: [(-81 26 -70 -65) -81]
Test Case: 481 | Input/Output: [(-4 -72 71 -21) -72]
Test Case: 482 | Input/Output: [(35 1 -58 -75) -75]
Test Case: 483 | Input/Output: [(-67 46 -15 50) -67]
Test Case: 484 | Input/Output: [(50 91 -28 31) -28]
Test Case: 485 | Input/Output: [(-7 -25 -66 44) -66]
Test Case: 486 | Input/Output: [(10 24 -7 -29) -29]
Test Case: 487 | Input/Output: [(81 -22 81 -41) -41]
Test Case: 488 | Input/Output: [(-43 -36 -29 -80) -80]
Test Case: 489 | Input/Output: [(37 -44 -47 -66) -66]
Test Case: 490 | Input/Output: [(19 -98 11 16) -98]
Test Case: 491 | Input/Output: [(-16 74 72 -48) -48]
Test Case: 492 | Input/Output: [(-63 -85 -92 -22) -92]
Test Case: 493 | Input/Output: [(91 7 -78 84) -78]
Test Case: 494 | Input/Output: [(41 -43 -99 99) -99]
Test Case: 495 | Input/Output: [(9 80 -63 3) -63]
Test Case: 496 | Input/Output: [(-78 -18 -65 27) -78]
Test Case: 497 | Input/Output: [(96 7 -94 64) -94]
Test Case: 498 | Input/Output: [(19 -95 39 -26) -95]
Test Case: 499 | Input/Output: [(-30 6 62 -89) -89]
Test Case: 500 | Input/Output: [(-7 34 -25 76) -25]
Test Case: 501 | Input/Output: [(-19 -31 -79 -45) -79]
Test Case: 502 | Input/Output: [(97 31 -66 -27) -66]
Test Case: 503 | Input/Output: [(-24 -14 -87 -14) -87]
Test Case: 504 | Input/Output: [(-52 44 31 -33) -52]
Test Case: 505 | Input/Output: [(-84 -87 -16 -97) -97]
Test Case: 506 | Input/Output: [(76 47 22 -91) -91]
Test Case: 507 | Input/Output: [(-8 98 -21 32) -21]
Test Case: 508 | Input/Output: [(89 3 30 -94) -94]
Test Case: 509 | Input/Output: [(5 -94 53 -59) -94]
Test Case: 510 | Input/Output: [(55 -52 56 -16) -52]
Test Case: 511 | Input/Output: [(39 -56 31 2) -56]
Test Case: 512 | Input/Output: [(32 99 -75 -72) -75]
Test Case: 513 | Input/Output: [(-77 54 44 96) -77]
Test Case: 514 | Input/Output: [(98 29 65 21) 21]
Test Case: 515 | Input/Output: [(26 86 39 -39) -39]
Test Case: 516 | Input/Output: [(8 -8 9 -5) -8]
Test Case: 517 | Input/Output: [(-83 16 32 24) -83]
Test Case: 518 | Input/Output: [(-48 -19 51 54) -48]
Test Case: 519 | Input/Output: [(84 -50 34 73) -50]
Test Case: 520 | Input/Output: [(58 24 3 82) 3]
Test Case: 521 | Input/Output: [(-62 -2 61 40) -62]
Test Case: 522 | Input/Output: [(-23 12 78 -71) -71]
Test Case: 523 | Input/Output: [(71 -15 39 20) -15]
Test Case: 524 | Input/Output: [(-91 -77 90 -19) -91]
Test Case: 525 | Input/Output: [(-41 81 -60 -10) -60]
Test Case: 526 | Input/Output: [(-58 -75 -22 -28) -75]
Test Case: 527 | Input/Output: [(-27 -55 50 17) -55]
Test Case: 528 | Input/Output: [(-50 87 60 -1) -50]
Test Case: 529 | Input/Output: [(66 -31 75 53) -31]
Test Case: 530 | Input/Output: [(19 36 9 -84) -84]
Test Case: 531 | Input/Output: [(-4 100 -50 -46) -50]
Test Case: 532 | Input/Output: [(76 -80 63 -80) -80]
Test Case: 533 | Input/Output: [(-3 14 50 -26) -26]
Test Case: 534 | Input/Output: [(-87 58 -12 -69) -87]
Test Case: 535 | Input/Output: [(-73 -42 -21 73) -73]
Test Case: 536 | Input/Output: [(84 30 21 -80) -80]
Test Case: 537 | Input/Output: [(-18 5 -19 96) -19]
Test Case: 538 | Input/Output: [(66 -95 -52 11) -95]
Test Case: 539 | Input/Output: [(-37 98 -36 67) -37]
Test Case: 540 | Input/Output: [(34 97 -93 -49) -93]
Test Case: 541 | Input/Output: [(58 -79 86 80) -79]
Test Case: 542 | Input/Output: [(-36 21 -86 13) -86]
Test Case: 543 | Input/Output: [(46 -93 95 -29) -93]
Test Case: 544 | Input/Output: [(83 48 53 -6) -6]
Test Case: 545 | Input/Output: [(48 83 78 -21) -21]
Test Case: 546 | Input/Output: [(24 -95 -68 -91) -95]
Test Case: 547 | Input/Output: [(-33 87 -52 42) -52]
Test Case: 548 | Input/Output: [(0 61 43 -15) -15]
Test Case: 549 | Input/Output: [(-40 -85 87 -60) -85]
Test Case: 550 | Input/Output: [(-57 9 14 19) -57]
Test Case: 551 | Input/Output: [(-34 -30 -82 89) -82]
Test Case: 552 | Input/Output: [(-65 -57 63 2) -65]
Test Case: 553 | Input/Output: [(1 -60 86 -76) -76]
Test Case: 554 | Input/Output: [(-45 54 -47 -69) -69]
Test Case: 555 | Input/Output: [(-6 78 -6 73) -6]
Test Case: 556 | Input/Output: [(30 26 20 -49) -49]
Test Case: 557 | Input/Output: [(-12 -65 5 58) -65]
Test Case: 558 | Input/Output: [(-38 -89 -98 12) -98]
Test Case: 559 | Input/Output: [(-82 -19 15 -56) -82]
Test Case: 560 | Input/Output: [(55 38 56 -17) -17]
Test Case: 561 | Input/Output: [(76 6 -51 4) -51]
Test Case: 562 | Input/Output: [(-28 17 -51 -41) -51]
Test Case: 563 | Input/Output: [(50 -73 -61 47) -73]
Test Case: 564 | Input/Output: [(-56 27 -21 -77) -77]
Test Case: 565 | Input/Output: [(86 -78 -11 -93) -93]
Test Case: 566 | Input/Output: [(88 84 -60 -88) -88]
Test Case: 567 | Input/Output: [(-13 -8 -13 -19) -19]
Test Case: 568 | Input/Output: [(50 -62 88 53) -62]
Test Case: 569 | Input/Output: [(17 -9 33 -69) -69]
Test Case: 570 | Input/Output: [(45 -14 78 91) -14]
Test Case: 571 | Input/Output: [(19 49 -23 -95) -95]
Test Case: 572 | Input/Output: [(-38 -88 87 -81) -88]
Test Case: 573 | Input/Output: [(-56 -83 22 63) -83]
Test Case: 574 | Input/Output: [(-37 -92 -30 -86) -92]
Test Case: 575 | Input/Output: [(11 23 -46 -60) -60]
Test Case: 576 | Input/Output: [(95 45 -21 89) -21]
Test Case: 577 | Input/Output: [(-7 -59 -32 35) -59]
Test Case: 578 | Input/Output: [(3 34 93 66) 3]
Test Case: 579 | Input/Output: [(-15 -23 7 -63) -63]
Test Case: 580 | Input/Output: [(-71 10 -29 -97) -97]
Test Case: 581 | Input/Output: [(39 -95 100 -21) -95]
Test Case: 582 | Input/Output: [(40 43 40 86) 40]
Test Case: 583 | Input/Output: [(39 74 96 -80) -80]
Test Case: 584 | Input/Output: [(-32 -38 -71 55) -71]
Test Case: 585 | Input/Output: [(54 -58 -86 1) -86]
Test Case: 586 | Input/Output: [(88 42 -17 74) -17]
Test Case: 587 | Input/Output: [(91 52 -31 -7) -31]
Test Case: 588 | Input/Output: [(-91 -6 49 33) -91]
Test Case: 589 | Input/Output: [(-35 83 -69 -42) -69]
Test Case: 590 | Input/Output: [(61 23 29 43) 23]
Test Case: 591 | Input/Output: [(-21 36 -54 -81) -81]
Test Case: 592 | Input/Output: [(82 84 25 -98) -98]
Test Case: 593 | Input/Output: [(-36 -64 71 87) -64]
Test Case: 594 | Input/Output: [(79 -41 52 5) -41]
Test Case: 595 | Input/Output: [(91 -54 13 90) -54]
Test Case: 596 | Input/Output: [(-66 65 84 99) -66]
Test Case: 597 | Input/Output: [(-8 63 63 -49) -49]
Test Case: 598 | Input/Output: [(-63 93 -82 21) -82]
Test Case: 599 | Input/Output: [(-77 76 -43 24) -77]
Test Case: 600 | Input/Output: [(84 -37 16 -32) -37]
Test Case: 601 | Input/Output: [(71 45 -30 -86) -86]
Test Case: 602 | Input/Output: [(74 -42 -5 -73) -73]
Test Case: 603 | Input/Output: [(-47 20 -51 27) -51]
Test Case: 604 | Input/Output: [(-7 -58 77 -24) -58]
Test Case: 605 | Input/Output: [(22 -61 -15 -50) -61]
Test Case: 606 | Input/Output: [(15 -77 -13 -76) -77]
Test Case: 607 | Input/Output: [(13 66 11 -61) -61]
Test Case: 608 | Input/Output: [(30 -92 12 16) -92]
Test Case: 609 | Input/Output: [(60 38 -49 -18) -49]
Test Case: 610 | Input/Output: [(-53 -28 81 35) -53]
Test Case: 611 | Input/Output: [(-83 -57 -39 71) -83]
Test Case: 612 | Input/Output: [(-6 -17 45 -85) -85]
Test Case: 613 | Input/Output: [(-69 -76 73 -32) -76]
Test Case: 614 | Input/Output: [(16 12 4 -9) -9]
Test Case: 615 | Input/Output: [(-22 17 -75 -89) -89]
Test Case: 616 | Input/Output: [(-73 -59 56 87) -73]
Test Case: 617 | Input/Output: [(-52 80 -98 75) -98]
Test Case: 618 | Input/Output: [(-17 96 -17 75) -17]
Test Case: 619 | Input/Output: [(-85 27 18 34) -85]
Test Case: 620 | Input/Output: [(46 -7 -91 -80) -91]
Test Case: 621 | Input/Output: [(-90 -98 90 -47) -98]
Test Case: 622 | Input/Output: [(-43 49 -47 39) -47]
Test Case: 623 | Input/Output: [(-79 13 -8 -43) -79]
Test Case: 624 | Input/Output: [(60 -15 35 90) -15]
Test Case: 625 | Input/Output: [(65 -33 3 34) -33]
Test Case: 626 | Input/Output: [(54 18 -29 -20) -29]
Test Case: 627 | Input/Output: [(95 -22 28 -99) -99]
Test Case: 628 | Input/Output: [(44 -72 -83 9) -83]
Test Case: 629 | Input/Output: [(28 44 1 62) 1]
Test Case: 630 | Input/Output: [(-13 34 -9 16) -13]
Test Case: 631 | Input/Output: [(2 91 -96 9) -96]
Test Case: 632 | Input/Output: [(82 -75 30 25) -75]
Test Case: 633 | Input/Output: [(84 20 -14 -95) -95]
Test Case: 634 | Input/Output: [(-47 -26 47 -75) -75]
Test Case: 635 | Input/Output: [(-80 3 -41 -99) -99]
Test Case: 636 | Input/Output: [(83 -79 -53 -70) -79]
Test Case: 637 | Input/Output: [(-70 -76 -32 36) -76]
Test Case: 638 | Input/Output: [(-37 -1 -37 77) -37]
Test Case: 639 | Input/Output: [(-59 95 -93 -35) -93]
Test Case: 640 | Input/Output: [(-82 -60 -11 -18) -82]
Test Case: 641 | Input/Output: [(-86 -91 50 -34) -91]
Test Case: 642 | Input/Output: [(83 49 2 45) 2]
Test Case: 643 | Input/Output: [(65 33 48 -29) -29]
Test Case: 644 | Input/Output: [(-15 43 73 96) -15]
Test Case: 645 | Input/Output: [(35 -40 -30 -40) -40]
Test Case: 646 | Input/Output: [(-86 -23 -11 -51) -86]
Test Case: 647 | Input/Output: [(-20 -37 93 93) -37]
Test Case: 648 | Input/Output: [(74 20 43 -51) -51]
Test Case: 649 | Input/Output: [(-63 -21 2 -60) -63]
Test Case: 650 | Input/Output: [(80 19 42 2) 2]
Test Case: 651 | Input/Output: [(-16 74 -55 -75) -75]
Test Case: 652 | Input/Output: [(53 80 -64 91) -64]
Test Case: 653 | Input/Output: [(-77 -55 99 -7) -77]
Test Case: 654 | Input/Output: [(-9 9 14 38) -9]
Test Case: 655 | Input/Output: [(-60 -25 66 -60) -60]
Test Case: 656 | Input/Output: [(-8 85 -43 -69) -69]
Test Case: 657 | Input/Output: [(35 1 71 0) 0]
Test Case: 658 | Input/Output: [(69 42 30 69) 30]
Test Case: 659 | Input/Output: [(73 50 80 83) 50]
Test Case: 660 | Input/Output: [(-43 6 30 34) -43]
Test Case: 661 | Input/Output: [(59 -36 -26 99) -36]
Test Case: 662 | Input/Output: [(53 -58 -34 -23) -58]
Test Case: 663 | Input/Output: [(-24 8 -2 -64) -64]
Test Case: 664 | Input/Output: [(17 -50 -18 81) -50]
Test Case: 665 | Input/Output: [(34 67 20 77) 20]
Test Case: 666 | Input/Output: [(45 -55 -58 18) -58]
Test Case: 667 | Input/Output: [(-95 30 34 -6) -95]
Test Case: 668 | Input/Output: [(39 26 14 -50) -50]
Test Case: 669 | Input/Output: [(-35 4 85 43) -35]
Test Case: 670 | Input/Output: [(-37 6 23 61) -37]
Test Case: 671 | Input/Output: [(-87 -91 67 -56) -91]
Test Case: 672 | Input/Output: [(79 25 -63 -28) -63]
Test Case: 673 | Input/Output: [(-78 30 81 -95) -95]
Test Case: 674 | Input/Output: [(95 -98 -92 -28) -98]
Test Case: 675 | Input/Output: [(-22 -31 58 -36) -36]
Test Case: 676 | Input/Output: [(-73 81 -81 43) -81]
Test Case: 677 | Input/Output: [(-62 -29 18 -23) -62]
Test Case: 678 | Input/Output: [(-29 37 54 2) -29]
Test Case: 679 | Input/Output: [(-13 23 -83 46) -83]
Test Case: 680 | Input/Output: [(92 80 45 70) 45]
Test Case: 681 | Input/Output: [(46 -57 45 41) -57]
Test Case: 682 | Input/Output: [(96 95 -55 -95) -95]
Test Case: 683 | Input/Output: [(93 -89 -72 -40) -89]
Test Case: 684 | Input/Output: [(-99 -86 24 39) -99]
Test Case: 685 | Input/Output: [(66 80 99 81) 66]
Test Case: 686 | Input/Output: [(-62 57 -13 9) -62]
Test Case: 687 | Input/Output: [(-19 25 7 -22) -22]
Test Case: 688 | Input/Output: [(-87 -36 -78 74) -87]
Test Case: 689 | Input/Output: [(-12 -33 -37 -13) -37]
Test Case: 690 | Input/Output: [(-57 89 40 21) -57]
Test Case: 691 | Input/Output: [(25 100 -45 -55) -55]
Test Case: 692 | Input/Output: [(-3 -39 -2 -36) -39]
Test Case: 693 | Input/Output: [(100 76 -35 -5) -35]
Test Case: 694 | Input/Output: [(-60 -97 31 31) -97]
Test Case: 695 | Input/Output: [(-54 21 -48 -62) -62]
Test Case: 696 | Input/Output: [(27 73 -96 -42) -96]
Test Case: 697 | Input/Output: [(-22 68 -36 -2) -36]
Test Case: 698 | Input/Output: [(-63 26 -25 -15) -63]
Test Case: 699 | Input/Output: [(40 86 -61 -16) -61]
Test Case: 700 | Input/Output: [(73 -60 -56 31) -60]
Test Case: 701 | Input/Output: [(-76 57 50 -37) -76]
Test Case: 702 | Input/Output: [(-44 96 -66 100) -66]
Test Case: 703 | Input/Output: [(60 -68 15 -95) -95]
Test Case: 704 | Input/Output: [(24 -38 -58 73) -58]
Test Case: 705 | Input/Output: [(98 -5 -63 -90) -90]
Test Case: 706 | Input/Output: [(-33 18 31 -94) -94]
Test Case: 707 | Input/Output: [(57 38 16 -16) -16]
Test Case: 708 | Input/Output: [(96 89 92 27) 27]
Test Case: 709 | Input/Output: [(-75 89 61 81) -75]
Test Case: 710 | Input/Output: [(98 -81 1 14) -81]
Test Case: 711 | Input/Output: [(-89 29 -34 7) -89]
Test Case: 712 | Input/Output: [(-65 38 -20 27) -65]
Test Case: 713 | Input/Output: [(-23 80 41 29) -23]
Test Case: 714 | Input/Output: [(-76 -34 -11 -22) -76]
Test Case: 715 | Input/Output: [(16 83 92 58) 16]
Test Case: 716 | Input/Output: [(-71 -70 90 10) -71]
Test Case: 717 | Input/Output: [(19 66 -75 55) -75]
Test Case: 718 | Input/Output: [(-68 -82 21 95) -82]
Test Case: 719 | Input/Output: [(31 -58 87 95) -58]
Test Case: 720 | Input/Output: [(-36 21 74 -88) -88]
Test Case: 721 | Input/Output: [(31 -81 -10 83) -81]
Test Case: 722 | Input/Output: [(50 -35 -76 -70) -76]
Test Case: 723 | Input/Output: [(-33 -52 100 20) -52]
Test Case: 724 | Input/Output: [(-42 -28 33 82) -42]
Test Case: 725 | Input/Output: [(-28 63 -65 -52) -65]
Test Case: 726 | Input/Output: [(-9 3 -30 -13) -30]
Test Case: 727 | Input/Output: [(38 -28 9 4) -28]
Test Case: 728 | Input/Output: [(19 -9 -55 13) -55]
Test Case: 729 | Input/Output: [(100 -3 -77 17) -77]
Test Case: 730 | Input/Output: [(8 -60 66 -43) -60]
Test Case: 731 | Input/Output: [(40 79 73 63) 40]
Test Case: 732 | Input/Output: [(-42 91 -39 45) -42]
Test Case: 733 | Input/Output: [(-64 -70 65 95) -70]
Test Case: 734 | Input/Output: [(96 90 72 46) 46]
Test Case: 735 | Input/Output: [(0 21 -60 -67) -67]
Test Case: 736 | Input/Output: [(97 91 3 36) 3]
Test Case: 737 | Input/Output: [(42 37 -29 66) -29]
Test Case: 738 | Input/Output: [(88 29 -13 95) -13]
Test Case: 739 | Input/Output: [(-91 6 -1 97) -91]
Test Case: 740 | Input/Output: [(-25 -67 -4 -55) -67]
Test Case: 741 | Input/Output: [(-50 91 24 70) -50]
Test Case: 742 | Input/Output: [(46 -42 71 -18) -42]
Test Case: 743 | Input/Output: [(62 17 -47 -73) -73]
Test Case: 744 | Input/Output: [(22 85 -96 37) -96]
Test Case: 745 | Input/Output: [(-15 97 36 86) -15]
Test Case: 746 | Input/Output: [(-46 -40 -100 6) -100]
Test Case: 747 | Input/Output: [(-67 -96 95 -82) -96]
Test Case: 748 | Input/Output: [(-35 -7 33 14) -35]
Test Case: 749 | Input/Output: [(-25 -30 49 -6) -30]
Test Case: 750 | Input/Output: [(-73 46 -73 100) -73]
Test Case: 751 | Input/Output: [(61 64 -52 47) -52]
Test Case: 752 | Input/Output: [(47 29 33 54) 29]
Test Case: 753 | Input/Output: [(75 -67 -11 36) -67]
Test Case: 754 | Input/Output: [(32 -24 16 10) -24]
Test Case: 755 | Input/Output: [(55 -59 -84 -53) -84]
Test Case: 756 | Input/Output: [(54 80 61 16) 16]
Test Case: 757 | Input/Output: [(-19 47 67 6) -19]
Test Case: 758 | Input/Output: [(-87 9 -71 -88) -88]
Test Case: 759 | Input/Output: [(-82 -85 87 80) -85]
Test Case: 760 | Input/Output: [(-78 38 22 32) -78]
Test Case: 761 | Input/Output: [(-1 -30 -78 26) -78]
Test Case: 762 | Input/Output: [(-3 -90 -56 15) -90]
Test Case: 763 | Input/Output: [(-99 63 -30 42) -99]
Test Case: 764 | Input/Output: [(-16 -92 17 74) -92]
Test Case: 765 | Input/Output: [(13 65 -45 22) -45]
Test Case: 766 | Input/Output: [(-25 -89 -57 -68) -89]
Test Case: 767 | Input/Output: [(-10 -77 -61 -83) -83]
Test Case: 768 | Input/Output: [(-88 -98 -84 -15) -98]
Test Case: 769 | Input/Output: [(93 -18 -54 54) -54]
Test Case: 770 | Input/Output: [(-47 90 81 -9) -47]
Test Case: 771 | Input/Output: [(45 53 -23 67) -23]
Test Case: 772 | Input/Output: [(88 -9 -41 28) -41]
Test Case: 773 | Input/Output: [(98 -83 -84 -58) -84]
Test Case: 774 | Input/Output: [(66 -18 -49 39) -49]
Test Case: 775 | Input/Output: [(-6 35 -41 -35) -41]
Test Case: 776 | Input/Output: [(-18 -91 -95 -76) -95]
Test Case: 777 | Input/Output: [(24 -21 10 -49) -49]
Test Case: 778 | Input/Output: [(64 19 71 -51) -51]
Test Case: 779 | Input/Output: [(50 -9 -83 17) -83]
Test Case: 780 | Input/Output: [(-85 -43 -34 49) -85]
Test Case: 781 | Input/Output: [(-90 -58 64 -14) -90]
Test Case: 782 | Input/Output: [(58 49 -36 47) -36]
Test Case: 783 | Input/Output: [(-70 -13 84 93) -70]
Test Case: 784 | Input/Output: [(86 39 57 65) 39]
Test Case: 785 | Input/Output: [(-21 -69 31 -55) -69]
Test Case: 786 | Input/Output: [(-66 -71 -14 -53) -71]
Test Case: 787 | Input/Output: [(78 72 -37 80) -37]
Test Case: 788 | Input/Output: [(-57 -36 65 -35) -57]
Test Case: 789 | Input/Output: [(42 -48 24 16) -48]
Test Case: 790 | Input/Output: [(83 47 -32 82) -32]
Test Case: 791 | Input/Output: [(66 18 15 -95) -95]
Test Case: 792 | Input/Output: [(-34 24 -83 22) -83]
Test Case: 793 | Input/Output: [(-22 33 51 69) -22]
Test Case: 794 | Input/Output: [(-89 74 -25 -29) -89]
Test Case: 795 | Input/Output: [(-57 27 -13 89) -57]
Test Case: 796 | Input/Output: [(-18 -21 -2 58) -21]
Test Case: 797 | Input/Output: [(-40 -45 -13 40) -45]
Test Case: 798 | Input/Output: [(-27 47 -33 -40) -40]
Test Case: 799 | Input/Output: [(-23 -84 27 -59) -84]
Test Case: 800 | Input/Output: [(43 -59 -63 68) -63]
Test Case: 801 | Input/Output: [(30 18 77 -34) -34]
Test Case: 802 | Input/Output: [(-65 48 91 -81) -81]
Test Case: 803 | Input/Output: [(-37 -50 6 -69) -69]
Test Case: 804 | Input/Output: [(27 -70 -65 57) -70]
Test Case: 805 | Input/Output: [(-59 90 -94 67) -94]
Test Case: 806 | Input/Output: [(-78 28 -84 24) -84]
Test Case: 807 | Input/Output: [(86 8 -6 -86) -86]
Test Case: 808 | Input/Output: [(24 -9 -52 99) -52]
Test Case: 809 | Input/Output: [(-7 -24 -16 65) -24]
Test Case: 810 | Input/Output: [(58 -78 65 13) -78]
Test Case: 811 | Input/Output: [(19 79 -91 72) -91]
Test Case: 812 | Input/Output: [(-82 91 -93 -47) -93]
Test Case: 813 | Input/Output: [(100 63 5 -52) -52]
Test Case: 814 | Input/Output: [(31 72 70 33) 31]
Test Case: 815 | Input/Output: [(-48 -65 -80 -37) -80]
Test Case: 816 | Input/Output: [(-42 -24 22 28) -42]
Test Case: 817 | Input/Output: [(-52 13 23 30) -52]
Test Case: 818 | Input/Output: [(30 -98 5 -32) -98]
Test Case: 819 | Input/Output: [(-91 36 23 -65) -91]
Test Case: 820 | Input/Output: [(63 -79 -52 76) -79]
Test Case: 821 | Input/Output: [(-72 19 1 -89) -89]
Test Case: 822 | Input/Output: [(-41 4 32 68) -41]
Test Case: 823 | Input/Output: [(-36 1 -52 -100) -100]
Test Case: 824 | Input/Output: [(1 10 34 -85) -85]
Test Case: 825 | Input/Output: [(-5 -99 92 -67) -99]
Test Case: 826 | Input/Output: [(-51 29 90 -34) -51]
Test Case: 827 | Input/Output: [(-29 -30 -2 -50) -50]
Test Case: 828 | Input/Output: [(-92 -87 -39 40) -92]
Test Case: 829 | Input/Output: [(-24 -6 -77 75) -77]
Test Case: 830 | Input/Output: [(44 45 -28 -19) -28]
Test Case: 831 | Input/Output: [(-87 2 -10 86) -87]
Test Case: 832 | Input/Output: [(-53 -86 -57 69) -86]
Test Case: 833 | Input/Output: [(71 -62 -24 -85) -85]
Test Case: 834 | Input/Output: [(63 5 -1 -27) -27]
Test Case: 835 | Input/Output: [(-62 -61 -28 -35) -62]
Test Case: 836 | Input/Output: [(2 53 -23 59) -23]
Test Case: 837 | Input/Output: [(-17 97 50 -61) -61]
Test Case: 838 | Input/Output: [(-21 53 -2 38) -21]
Test Case: 839 | Input/Output: [(-7 -25 33 -52) -52]
Test Case: 840 | Input/Output: [(9 2 30 95) 2]
Test Case: 841 | Input/Output: [(75 19 91 7) 7]
Test Case: 842 | Input/Output: [(-1 -5 -21 0) -21]
Test Case: 843 | Input/Output: [(-31 54 -46 91) -46]
Test Case: 844 | Input/Output: [(0 -17 -69 79) -69]
Test Case: 845 | Input/Output: [(-62 83 -58 82) -62]
Test Case: 846 | Input/Output: [(27 -87 -44 -39) -87]
Test Case: 847 | Input/Output: [(67 16 -94 42) -94]
Test Case: 848 | Input/Output: [(-67 10 64 -8) -67]
Test Case: 849 | Input/Output: [(52 -60 -21 68) -60]
Test Case: 850 | Input/Output: [(1 -46 -62 36) -62]
Test Case: 851 | Input/Output: [(-24 3 -10 -44) -44]
Test Case: 852 | Input/Output: [(-25 22 100 -60) -60]
Test Case: 853 | Input/Output: [(36 -96 -92 49) -96]
Test Case: 854 | Input/Output: [(-87 0 56 43) -87]
Test Case: 855 | Input/Output: [(-67 90 35 -51) -67]
Test Case: 856 | Input/Output: [(45 -91 7 -94) -94]
Test Case: 857 | Input/Output: [(31 36 63 64) 31]
Test Case: 858 | Input/Output: [(-45 -71 -67 25) -71]
Test Case: 859 | Input/Output: [(22 -50 43 -12) -50]
Test Case: 860 | Input/Output: [(-60 -4 74 -89) -89]
Test Case: 861 | Input/Output: [(-74 -85 -64 12) -85]
Test Case: 862 | Input/Output: [(59 50 18 -32) -32]
Test Case: 863 | Input/Output: [(-75 -80 100 -42) -80]
Test Case: 864 | Input/Output: [(-26 -32 -11 99) -32]
Test Case: 865 | Input/Output: [(74 32 99 -12) -12]
Test Case: 866 | Input/Output: [(-67 -12 -29 -32) -67]
Test Case: 867 | Input/Output: [(-33 22 91 72) -33]
Test Case: 868 | Input/Output: [(90 86 56 -24) -24]
Test Case: 869 | Input/Output: [(98 -48 83 -31) -48]
Test Case: 870 | Input/Output: [(14 -86 51 13) -86]
Test Case: 871 | Input/Output: [(-94 7 -22 -17) -94]
Test Case: 872 | Input/Output: [(-85 88 -62 91) -85]
Test Case: 873 | Input/Output: [(-27 -37 33 -58) -58]
Test Case: 874 | Input/Output: [(-8 -48 61 -15) -48]
Test Case: 875 | Input/Output: [(-63 -48 -48 67) -63]
Test Case: 876 | Input/Output: [(50 -91 -56 17) -91]
Test Case: 877 | Input/Output: [(64 28 96 95) 28]
Test Case: 878 | Input/Output: [(-79 -1 42 42) -79]
Test Case: 879 | Input/Output: [(100 -41 -5 86) -41]
Test Case: 880 | Input/Output: [(39 -32 77 96) -32]
Test Case: 881 | Input/Output: [(-55 37 43 44) -55]
Test Case: 882 | Input/Output: [(65 6 70 -3) -3]
Test Case: 883 | Input/Output: [(-64 -41 22 38) -64]
Test Case: 884 | Input/Output: [(-67 -100 -9 94) -100]
Test Case: 885 | Input/Output: [(-48 -34 -70 99) -70]
Test Case: 886 | Input/Output: [(-95 -66 -24 4) -95]
Test Case: 887 | Input/Output: [(60 -79 -12 -59) -79]
Test Case: 888 | Input/Output: [(0 31 -79 -59) -79]
Test Case: 889 | Input/Output: [(37 54 -26 -31) -31]
Test Case: 890 | Input/Output: [(51 -64 41 55) -64]
Test Case: 891 | Input/Output: [(-12 50 9 91) -12]
Test Case: 892 | Input/Output: [(6 -89 67 -52) -89]
Test Case: 893 | Input/Output: [(-1 41 -49 -25) -49]
Test Case: 894 | Input/Output: [(-76 -43 -94 -38) -94]
Test Case: 895 | Input/Output: [(22 -40 -9 5) -40]
Test Case: 896 | Input/Output: [(-85 -93 -1 88) -93]
Test Case: 897 | Input/Output: [(-68 65 -33 47) -68]
Test Case: 898 | Input/Output: [(-81 -67 55 -80) -81]
Test Case: 899 | Input/Output: [(-83 -19 15 64) -83]
Test Case: 900 | Input/Output: [(-66 -92 -20 -4) -92]
Test Case: 901 | Input/Output: [(-98 -6 -62 53) -98]
Test Case: 902 | Input/Output: [(-62 -36 -2 8) -62]
Test Case: 903 | Input/Output: [(-62 100 32 -1) -62]
Test Case: 904 | Input/Output: [(-22 94 -34 37) -34]
Test Case: 905 | Input/Output: [(-32 93 51 2) -32]
Test Case: 906 | Input/Output: [(90 -56 -85 -98) -98]
Test Case: 907 | Input/Output: [(-68 99 80 64) -68]
Test Case: 908 | Input/Output: [(-76 -66 21 -57) -76]
Test Case: 909 | Input/Output: [(4 -70 30 11) -70]
Test Case: 910 | Input/Output: [(27 -72 -70 56) -72]
Test Case: 911 | Input/Output: [(31 26 5 71) 5]
Test Case: 912 | Input/Output: [(-34 -82 15 -45) -82]
Test Case: 913 | Input/Output: [(-76 73 60 66) -76]
Test Case: 914 | Input/Output: [(-36 -3 59 52) -36]
Test Case: 915 | Input/Output: [(31 -46 43 -100) -100]
Test Case: 916 | Input/Output: [(-9 -72 38 19) -72]
Test Case: 917 | Input/Output: [(74 -38 79 -35) -38]
Test Case: 918 | Input/Output: [(-57 -63 -6 17) -63]
Test Case: 919 | Input/Output: [(10 76 80 -51) -51]
Test Case: 920 | Input/Output: [(-98 81 29 -20) -98]
Test Case: 921 | Input/Output: [(-76 9 -50 -60) -76]
Test Case: 922 | Input/Output: [(52 24 -80 50) -80]
Test Case: 923 | Input/Output: [(-36 37 5 95) -36]
Test Case: 924 | Input/Output: [(92 -75 -53 -21) -75]
Test Case: 925 | Input/Output: [(59 32 -48 18) -48]
Test Case: 926 | Input/Output: [(57 19 1 67) 1]
Test Case: 927 | Input/Output: [(-64 -36 -2 -69) -69]
Test Case: 928 | Input/Output: [(-92 -50 -12 -22) -92]
Test Case: 929 | Input/Output: [(-44 -53 -20 -66) -66]
Test Case: 930 | Input/Output: [(-27 -33 25 90) -33]
Test Case: 931 | Input/Output: [(9 -42 -96 63) -96]
Test Case: 932 | Input/Output: [(-22 69 90 78) -22]
Test Case: 933 | Input/Output: [(43 1 28 18) 1]
Test Case: 934 | Input/Output: [(-49 88 -47 81) -49]
Test Case: 935 | Input/Output: [(-61 27 -42 48) -61]
Test Case: 936 | Input/Output: [(-21 21 -66 -87) -87]
Test Case: 937 | Input/Output: [(-67 -80 -54 62) -80]
Test Case: 938 | Input/Output: [(-60 88 75 -7) -60]
Test Case: 939 | Input/Output: [(70 -83 96 -46) -83]
Test Case: 940 | Input/Output: [(-27 92 18 100) -27]
Test Case: 941 | Input/Output: [(88 -48 -15 -16) -48]
Test Case: 942 | Input/Output: [(-1 54 56 -92) -92]
Test Case: 943 | Input/Output: [(-94 -99 26 72) -99]
Test Case: 944 | Input/Output: [(0 13 -68 -29) -68]
Test Case: 945 | Input/Output: [(-28 12 -33 -7) -33]
Test Case: 946 | Input/Output: [(-70 72 -49 -43) -70]
Test Case: 947 | Input/Output: [(-51 -69 81 7) -69]
Test Case: 948 | Input/Output: [(-32 -36 -78 -72) -78]
Test Case: 949 | Input/Output: [(-62 -74 42 -99) -99]
Test Case: 950 | Input/Output: [(-55 16 -40 96) -55]
Test Case: 951 | Input/Output: [(0 7 49 72) 0]
Test Case: 952 | Input/Output: [(-7 -22 -60 -21) -60]
Test Case: 953 | Input/Output: [(67 -6 93 49) -6]
Test Case: 954 | Input/Output: [(45 25 80 6) 6]
Test Case: 955 | Input/Output: [(-38 70 88 -86) -86]
Test Case: 956 | Input/Output: [(94 -17 -1 54) -17]
Test Case: 957 | Input/Output: [(-54 -34 -34 23) -54]
Test Case: 958 | Input/Output: [(-72 40 -19 -82) -82]
Test Case: 959 | Input/Output: [(-53 67 -85 91) -85]
Test Case: 960 | Input/Output: [(64 88 5 -33) -33]
Test Case: 961 | Input/Output: [(94 92 -81 -3) -81]
Test Case: 962 | Input/Output: [(-92 -62 -70 86) -92]
Test Case: 963 | Input/Output: [(64 23 -93 42) -93]
Test Case: 964 | Input/Output: [(29 -74 57 -2) -74]
Test Case: 965 | Input/Output: [(-52 -20 91 -16) -52]
Test Case: 966 | Input/Output: [(57 58 19 42) 19]
Test Case: 967 | Input/Output: [(39 -44 -40 -33) -44]
Test Case: 968 | Input/Output: [(70 -35 94 -90) -90]
Test Case: 969 | Input/Output: [(-91 -41 -69 -77) -91]
Test Case: 970 | Input/Output: [(94 12 67 83) 12]
Test Case: 971 | Input/Output: [(66 35 -47 91) -47]
Test Case: 972 | Input/Output: [(-65 -21 82 96) -65]
Test Case: 973 | Input/Output: [(12 34 -35 -82) -82]
Test Case: 974 | Input/Output: [(81 99 -36 41) -36]
Test Case: 975 | Input/Output: [(-76 -79 15 45) -79]
Test Case: 976 | Input/Output: [(-77 -3 -32 -5) -77]
Test Case: 977 | Input/Output: [(-21 -15 4 77) -21]
Test Case: 978 | Input/Output: [(79 -63 -99 51) -99]
Test Case: 979 | Input/Output: [(-5 -27 49 -58) -58]
Test Case: 980 | Input/Output: [(-56 64 -22 82) -56]
Test Case: 981 | Input/Output: [(72 55 -47 -80) -80]
Test Case: 982 | Input/Output: [(84 68 46 -83) -83]
Test Case: 983 | Input/Output: [(-78 13 67 22) -78]
Test Case: 984 | Input/Output: [(63 49 92 -18) -18]
Test Case: 985 | Input/Output: [(52 -52 -97 85) -97]
Test Case: 986 | Input/Output: [(85 -21 37 -15) -21]
Test Case: 987 | Input/Output: [(-1 -5 11 63) -5]
Test Case: 988 | Input/Output: [(-43 50 -75 7) -75]
Test Case: 989 | Input/Output: [(68 22 -53 24) -53]
Test Case: 990 | Input/Output: [(-6 95 47 -44) -44]
Test Case: 991 | Input/Output: [(33 12 9 96) 9]
Test Case: 992 | Input/Output: [(89 30 -47 17) -47]
Test Case: 993 | Input/Output: [(90 -77 27 -96) -96]
Test Case: 994 | Input/Output: [(51 -47 15 -56) -56]
Test Case: 995 | Input/Output: [(-2 28 24 50) -2]
Test Case: 996 | Input/Output: [(-100 -57 -76 -98) -100]
Test Case: 997 | Input/Output: [(-72 -82 95 -1) -82]
Test Case: 998 | Input/Output: [(21 -85 91 64) -85]
Test Case: 999 | Input/Output: [(92 9 -39 70) -39]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 80 -5 -26 124 8 11 53 91 -97 79 -30 -15 15 30 74 18
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-85 72 -85 -85] -85] [[-53 -59 -53 -53] -59] [[30 30 44 30] 30] [[-76 -76 -76 42] -76] [[23 23 23 -10] -10] [[-26 -26 -26 46] -26] [[22 22 92 22] 22] [[57 57 57 -41] -41] [[76 76 76 8] 8] [[-29 -29 -29 -85] -85] [(-60 -60 -60 -60) -60] [(63 63 63 63) 63] [(-38 -38 -38 -38) -38] [(-72 -72 -72 -72) -72] [(-63 -63 -63 -63) -63] [(70 27 86 1) 1] [(69 58 24 48) 24] [(20 3 53 32) 3] [(38 19 6 30) 6] [(88 10 48 79) 10] [(79 81 88 96) 79] [(96 35 1 51) 1] [(28 99 0 25) 0] [(29 16 43 84) 16] [(3 63 80 57) 3] [(61 76 19 27) 19] [(85 46 63 65) 46] [(94 95 60 82) 60] [(36 74 35 91) 35] [(8 2 30 41) 2] [(20 2 11 89) 2] [(36 24 60 62) 24] [(42 59 83 37) 37] [(89 55 75 70) 55] [(81 96 20 56) 20] [(-3 -34 -58 -28) -58] [(-47 31 15 85) -47] [(-100 64 17 78) -100] [(-3 -75 -36 -54) -75] [(-28 -79 1 -78) -79] [(21 40 -99 29) -99] [(-32 1 -72 -36) -72] [(89 21 68 85) 21] [(-57 65 26 -69) -69] [(-21 -20 -21 64) -21] [(-60 -32 100 -47) -60] [(-74 -19 32 -34) -74] [(-57 -23 19 -71) -71] [(45 77 -19 18) -19] [(-20 75 -28 98) -28] [(-85 -15 -32 39) -85] [(-40 -68 95 -62) -68] [(-5 -28 -25 19) -28] [(-36 3 4 -91) -91] [(-50 70 30 -38) -50] [(-75 -1 -58 82) -75] [(47 53 90 46) 46] [(-44 -6 80 -53) -53] [(44 -73 -51 -83) -83] [(-53 39 46 71) -53] [(83 -59 -41 -54) -59] [(-37 -14 -98 -36) -98] [(65 -31 50 -48) -48] [(3 -79 4 12) -79] [(-51 -95 100 71) -95] [(-62 82 73 80) -62] [(98 58 -69 -92) -92] [(86 -47 80 87) -47] [(89 -95 -87 73) -95] [(41 -6 -23 -63) -63] [(94 1 85 0) 0] [(-56 -48 0 -79) -79] [(-34 -88 49 7) -88] [(-10 -36 35 0) -36] [(-1 -92 -59 -97) -97] [(-14 9 61 -68) -68] [(55 -90 68 71) -90] [(-54 45 42 5) -54] [(-5 -36 43 -42) -42] [(62 -70 82 52) -70] [(56 -47 -36 89) -47] [(29 55 24 62) 24] [(76 -6 -23 24) -23] [(-33 30 -53 61) -53] [(-12 83 84 34) -12] [(97 -27 -52 45) -52] [(12 12 18 -47) -47] [(-83 55 88 -21) -83] [(63 -62 -100 6) -100] [(-1 8 -68 -71) -71] [(-38 36 51 56) -38] [(45 -47 -18 87) -47] [(39 -33 68 -90) -90] [(70 84 -90 52) -90] [(94 96 4 1) 1])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: 72                 
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 95                 
Correct output: 35                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 96                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: 31                 
Correct output: -100                | Program output: 64                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 40                 
Correct output: -72                 | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 65                 
Correct output: -21                 | Program output: -20                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: 77                 
Correct output: -28                 | Program output: 75                 
Correct output: -85                 | Program output: -15                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 70                 
Correct output: -75                 | Program output: -1                 
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -14                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 82                 
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 45                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 55                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: 30                 
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: 8                  
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 84                 
Correct output: 1                   | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction 99} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_807} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_dec integer_dup_times boolean_pop exec_do*while (in2) exec_do*range () boolean_pop integer_empty integer_fromboolean boolean_invert_second_then_and integer_max exec_dup_times () in3 99 integer_min boolean_invert_second_then_and boolean_flush tag_boolean_487 boolean_eq boolean_invert_second_then_and print_integer exec_do*count (boolean_dup_items boolean_eq exec_eq print_newline in1 boolean_dup_items integer_flush) tagged_807 integer_mult exec_if (exec_yankdup) (integer_empty exec_swap (integer_flush integer_dec exec_dup (boolean_dup_items exec_yank integer_eq) integer_fromboolean) ()))
Lexicase best errors: [1 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction 99} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_807} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_dec integer_dup_times boolean_pop exec_do*while (in2) exec_do*range () boolean_pop integer_empty integer_fromboolean boolean_invert_second_then_and integer_max exec_dup_times () in3 99 integer_min boolean_invert_second_then_and boolean_flush tag_boolean_487 boolean_eq boolean_invert_second_then_and print_integer exec_do*count (boolean_dup_items boolean_eq exec_eq print_newline in1 boolean_dup_items integer_flush) tagged_807 integer_mult exec_if (exec_yankdup) (integer_empty exec_swap (integer_flush integer_dec exec_dup (boolean_dup_items exec_yank integer_eq) integer_fromboolean) ()))
Zero cases best errors: [1 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 4 2 10 4 5 5 7 4 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (2 4 2 10 4 5 5 7 4 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 93} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction 17} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction in2} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop})
Best program: (93 integer_gte exec_k (exec_s_when_autoconstructing (exec_dup (exec_noop 17 integer_lt) integer_flush boolean_shove) (exec_k_when_autoconstructing (boolean_dup) (integer_mod) integer_swap exec_swap () (integer_shove integer_dup_times integer_empty) in2 integer_gte) () exec_k_when_autoconstructing (print_integer exec_y (exec_noop integer_gt) integer_eq boolean_pop) ()) ())
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 41
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 9.955
Median total errors in population: 10
Error averages by case: (0.998 0.996 0.998 0.99 0.996 0.995 0.995 0.993 0.996 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.726
Average program size in population (points): 69.768
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 463610
--- Timings ---
Current time: 1559593839817 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 28.8%
Fitness Testing:      1.8 seconds, 67.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: 42                 
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: 46                 
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 48                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 30                 
Correct output: 10                  | Program output: 79                 
Correct output: 79                  | Program output: 96                 
Correct output: 1                   | Program output: 51                 
Correct output: 0                   | Program output: 25                 
Correct output: 16                  | Program output: 84                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 27                 
Correct output: 46                  | Program output: 65                 
Correct output: 60                  | Program output: 82                 
Correct output: 35                  | Program output: 91                 
Correct output: 2                   | Program output: 41                 
Correct output: 2                   | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 56                 
Correct output: -58                 | Program output: -28                
Correct output: -47                 | Program output: 85                 
Correct output: -100                | Program output: 78                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: 29                 
Correct output: -72                 | Program output: -36                
Correct output: 21                  | Program output: 85                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: 64                 
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: 18                 
Correct output: -28                 | Program output: 98                 
Correct output: -85                 | Program output: 39                 
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: 82                 
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 71                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -36                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 12                 
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 80                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: 73                 
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 71                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: 89                 
Correct output: 24                  | Program output: 62                 
Correct output: -23                 | Program output: 24                 
Correct output: -53                 | Program output: 61                 
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: 45                 
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 56                 
Correct output: -47                 | Program output: 87                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 52                 
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_integer_248} {:close 1, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_261} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_inc} {:close 2, :instruction boolean_rot})
Lexicase best program: (boolean_yank exec_y_when_autoconstructing () exec_dup (exec_do*count () tagged_917 boolean_dup tag_integer_248 in4) exec_when (print_integer) exec_rot () (boolean_or tag_boolean_261) (boolean_shove exec_flush) in4 exec_eq boolean_flush integer_inc boolean_rot)
Lexicase best errors: [1 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_integer_248} {:close 1, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_boolean_261} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_inc} {:close 2, :instruction boolean_rot})
Zero cases best program: (boolean_yank exec_y_when_autoconstructing () exec_dup (exec_do*count () tagged_917 boolean_dup tag_integer_248 in4) exec_when (print_integer) exec_rot () (boolean_or tag_boolean_261) (boolean_shove exec_flush) in4 exec_eq boolean_flush integer_inc boolean_rot)
Zero cases best errors: [1 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 355 537 158 177 178 356 175 177 189)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (175 355 537 158 177 178 356 175 177 189)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_500} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_921} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 2, :instruction print_exec} {:close 1, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_618} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_47} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_115} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_swap})
Best program: (exec_do*range () exec_s (integer_dec) (integer_div exec_noop exec_do*while (boolean_dup boolean_invert_first_then_and integer_stackdepth tagged_500 exec_k_when_autoconstructing (integer_pop exec_s (integer_max tag_boolean_921 boolean_invert_first_then_and) (in1 exec_when (boolean_eq in4 exec_if (boolean_invert_second_then_and print_integer exec_k (integer_flush boolean_yankdup integer_mult) (integer_lt) boolean_xor boolean_stackdepth integer_dup exec_do*count (integer_div) exec_do*range (exec_while (exec_k_when_autoconstructing (in2 exec_yankdup integer_dup_times integer_flush integer_empty exec_rot (exec_do*while (exec_yankdup print_exec ()) exec_while () integer_gte integer_flush exec_if (boolean_empty exec_empty) (integer_pop) boolean_dup_items in3 boolean_yank integer_sub integer_min exec_eq boolean_invert_first_then_and exec_k_when_autoconstructing (integer_dec tagged_618 boolean_shove exec_eq exec_pop (exec_empty boolean_stackdepth integer_gte)) (exec_swap (exec_y (boolean_shove exec_if (exec_s_when_autoconstructing () (tag_integer_47 integer_lt exec_dup_items) () integer_flush boolean_or exec_eq in4 print_integer) (tagged_115 boolean_or boolean_flush exec_do*while (integer_swap)))) ())) () ()) ()))) ())) ()) ())) ())
Errors: [1 1 0 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 86
Size: 127
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 7.523
Median total errors in population: 6
Error averages by case: (0.825 0.645 0.463 0.842 0.823 0.822 0.644 0.825 0.823 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.159
Average program size in population (points): 54.907
Average percent parens in population: 0.264
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 983239
--- Timings ---
Current time: 1559593842095 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.9 seconds, 34.9%
Fitness Testing:      2.5 seconds, 47.2%
Report:               0.8 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_dec integer_dup_times boolean_pop exec_do*while (in2) exec_do*range () boolean_pop integer_empty integer_fromboolean exec_dup_times () boolean_invert_first_then_and in3 integer_min boolean_invert_second_then_and boolean_flush tag_boolean_487 boolean_swap boolean_eq boolean_invert_second_then_and print_integer exec_do*count (integer_dec boolean_dup_items boolean_eq exec_eq in1 boolean_dup_items integer_flush) tagged_807 boolean_not integer_mult exec_if (exec_yankdup) (integer_empty integer_flush exec_dup_times (exec_dup (boolean_dup_items integer_eq) integer_fromboolean)))
Lexicase best errors: [0 0 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_dec integer_dup_times boolean_pop exec_do*while (in2) exec_do*range () boolean_pop integer_empty integer_fromboolean exec_dup_times () boolean_invert_first_then_and in3 integer_min boolean_invert_second_then_and boolean_flush tag_boolean_487 boolean_swap boolean_eq boolean_invert_second_then_and print_integer exec_do*count (integer_dec boolean_dup_items boolean_eq exec_eq in1 boolean_dup_items integer_flush) tagged_807 boolean_not integer_mult exec_if (exec_yankdup) (integer_empty integer_flush exec_dup_times (exec_dup (boolean_dup_items integer_eq) integer_fromboolean)))
Zero cases best errors: [0 0 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (639 153 155 288 155 9 154 126 8 336)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (639 153 155 288 155 9 154 126 8 336)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Best program: (integer_dec integer_dup_times boolean_pop exec_do*while (in2) exec_do*range () boolean_pop integer_empty integer_fromboolean exec_dup_times () boolean_invert_first_then_and in3 integer_min boolean_invert_second_then_and boolean_flush tag_boolean_487 boolean_swap boolean_eq boolean_invert_second_then_and print_integer exec_do*count (integer_dec boolean_dup_items boolean_eq exec_eq in1 boolean_dup_items integer_flush) tagged_807 boolean_not integer_mult exec_if (exec_yankdup) (integer_empty integer_flush exec_dup_times (exec_dup (boolean_dup_items integer_eq) integer_fromboolean)))
Errors: [0 0 0 1 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 49
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 7.977
Median total errors in population: 8
Error averages by case: (0.361 0.847 0.845 0.712 0.845 0.991 0.846 0.874 0.992 0.664)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.711
Average program size in population (points): 44.331
Average percent parens in population: 0.250
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1412673
--- Timings ---
Current time: 1559593844104 milliseconds
Total Time:           7.6 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.1 seconds, 40.7%
Fitness Testing:      3.1 seconds, 40.5%
Report:               1.3 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_71} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_dec integer_dup_times exec_do*while (boolean_pop boolean_dup_times exec_do*while (in2) exec_do*range () boolean_pop integer_empty integer_fromboolean) exec_dup_times () boolean_invert_first_then_and in3 integer_min boolean_invert_second_then_and boolean_flush tag_boolean_487 boolean_swap boolean_eq boolean_invert_second_then_and print_integer exec_do*count (integer_dec boolean_dup_items boolean_eq exec_eq tag_integer_71 in1 boolean_dup_items integer_flush) tagged_807 boolean_not integer_mult exec_if (exec_yankdup) (integer_empty integer_flush exec_dup_times (in2) exec_dup (boolean_dup_items integer_eq) integer_fromboolean))
Lexicase best errors: [0 1 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_71} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_dec integer_dup_times exec_do*while (boolean_pop boolean_dup_times exec_do*while (in2) exec_do*range () boolean_pop integer_empty integer_fromboolean) exec_dup_times () boolean_invert_first_then_and in3 integer_min boolean_invert_second_then_and boolean_flush tag_boolean_487 boolean_swap boolean_eq boolean_invert_second_then_and print_integer exec_do*count (integer_dec boolean_dup_items boolean_eq exec_eq tag_integer_71 in1 boolean_dup_items integer_flush) tagged_807 boolean_not integer_mult exec_if (exec_yankdup) (integer_empty integer_flush exec_dup_times (in2) exec_dup (boolean_dup_items integer_eq) integer_fromboolean))
Zero cases best errors: [0 1 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 152 153 278 227 191 225 90 153 272)
Population mean number of elite cases: 2.00
Count of perfect (error zero) individuals by case: (260 152 153 278 227 191 225 90 153 272)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Best program: (integer_dec integer_dup_times boolean_pop exec_do*while (in2) exec_do*range () boolean_pop integer_empty integer_fromboolean exec_dup_times () in3 integer_min boolean_invert_second_then_and boolean_flush boolean_swap boolean_eq boolean_invert_second_then_and print_integer exec_do*count (integer_dec exec_s (exec_eq in1 boolean_dup_items integer_flush) (tagged_807 boolean_not integer_mult exec_if (exec_yankdup) (integer_empty integer_flush exec_dup_times (exec_dup (integer_yankdup boolean_dup_items integer_eq) integer_fromboolean))) ()))
Errors: [0 1 1 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 7.999
Median total errors in population: 9
Error averages by case: (0.74 0.848 0.847 0.722 0.773 0.809 0.775 0.91 0.847 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.745
Average program size in population (points): 73.942
Average percent parens in population: 0.237
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.006
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.234
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1881840
--- Timings ---
Current time: 1559593846198 milliseconds
Total Time:           9.6 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.3 seconds, 44.6%
Fitness Testing:      3.7 seconds, 37.9%
Report:               1.6 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 35                 
Correct output: 0                   | Program output: 28                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 61                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 94                 
Correct output: 35                  | Program output: 36                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 81                 
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 21                 
Correct output: -72                 | Program output: -32                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: 45                 
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 29                 
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 70                 
Correct output: 1                   | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 2, :instruction -98} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 2, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_integer_644} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_618} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_47} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in1})
Lexicase best program: (exec_do*range () integer_dec in2 integer_div integer_mult exec_noop boolean_xor exec_do*while (exec_if (boolean_dup integer_gt boolean_invert_first_then_and integer_stackdepth exec_s_when_autoconstructing (boolean_pop integer_dup_items exec_s (integer_max boolean_invert_first_then_and) (in1 exec_do*while (integer_min) in4 integer_shove exec_if (print_integer boolean_yankdup integer_lt) (integer_sub boolean_xor integer_sub) boolean_stackdepth boolean_frominteger integer_dup integer_div) (exec_do*range (exec_while (exec_k_when_autoconstructing (exec_k (exec_yankdup exec_swap (-98) () exec_k_when_autoconstructing (integer_dup_times integer_dec) (integer_flush exec_rot (exec_do*while (integer_swap) boolean_dup_items integer_yank exec_yankdup exec_while () integer_gte integer_flush print_integer exec_if (exec_y ()) (exec_dup_times (exec_yankdup boolean_empty exec_empty) tag_integer_644 integer_pop) in3 boolean_yank exec_eq boolean_not exec_s (exec_pop (integer_min exec_k_when_autoconstructing (integer_dec tagged_618 exec_empty boolean_empty boolean_shove exec_eq exec_pop (exec_if (exec_dup_items exec_eq exec_empty integer_rot) (boolean_shove integer_min exec_s_when_autoconstructing () (integer_dec tag_integer_47 exec_dup_items) () in4 integer_lte boolean_flush exec_do*while (boolean_not integer_dec integer_swap) print_integer in1))) ())) () ()) () ())) ()) ())))) () ()) ()))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 145
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 2, :instruction -98} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 2, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_integer_644} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_618} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_47} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in1})
Zero cases best program: (exec_do*range () integer_dec in2 integer_div integer_mult exec_noop boolean_xor exec_do*while (exec_if (boolean_dup integer_gt boolean_invert_first_then_and integer_stackdepth exec_s_when_autoconstructing (boolean_pop integer_dup_items exec_s (integer_max boolean_invert_first_then_and) (in1 exec_do*while (integer_min) in4 integer_shove exec_if (print_integer boolean_yankdup integer_lt) (integer_sub boolean_xor integer_sub) boolean_stackdepth boolean_frominteger integer_dup integer_div) (exec_do*range (exec_while (exec_k_when_autoconstructing (exec_k (exec_yankdup exec_swap (-98) () exec_k_when_autoconstructing (integer_dup_times integer_dec) (integer_flush exec_rot (exec_do*while (integer_swap) boolean_dup_items integer_yank exec_yankdup exec_while () integer_gte integer_flush print_integer exec_if (exec_y ()) (exec_dup_times (exec_yankdup boolean_empty exec_empty) tag_integer_644 integer_pop) in3 boolean_yank exec_eq boolean_not exec_s (exec_pop (integer_min exec_k_when_autoconstructing (integer_dec tagged_618 exec_empty boolean_empty boolean_shove exec_eq exec_pop (exec_if (exec_dup_items exec_eq exec_empty integer_rot) (boolean_shove integer_min exec_s_when_autoconstructing () (integer_dec tag_integer_47 exec_dup_items) () in4 integer_lte boolean_flush exec_do*while (boolean_not integer_dec integer_swap) print_integer in1))) ())) () ()) () ())) ()) ())))) () ()) ()))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 145
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 106 409 515 103 102 236 577 194 195)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (188 106 409 515 103 102 236 577 194 195)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 2, :instruction print_exec} {:close 1, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 2, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_618} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_47} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction in1})
Best program: (exec_do*range () integer_dec in2 integer_div exec_noop boolean_yankdup integer_div boolean_xor exec_k (exec_do*while (exec_if (integer_yank integer_gt boolean_invert_first_then_and integer_stackdepth boolean_pop integer_dup_items exec_s (integer_max boolean_invert_first_then_and) (boolean_yank) (in1 boolean_eq integer_min) in4 integer_shove exec_if (print_integer boolean_yankdup integer_lt) (integer_sub exec_yankdup boolean_xor integer_sub) boolean_frominteger boolean_yank integer_div) (exec_do*range (exec_while (exec_k_when_autoconstructing (boolean_swap) (in2 exec_k (exec_yankdup boolean_eq exec_k_when_autoconstructing (integer_dup_times integer_flush exec_rot (exec_do*while (boolean_dup_items integer_yank exec_yankdup print_exec ()) exec_while () integer_gte exec_if (exec_y ()) (exec_yankdup boolean_empty exec_empty) print_newline integer_pop) (boolean_yank exec_eq integer_gte integer_sub exec_s (exec_pop (integer_min exec_k_when_autoconstructing (integer_dec tagged_618 boolean_empty boolean_shove exec_pop (exec_if (integer_sub exec_dup_items boolean_eq exec_empty integer_rot) (boolean_shove integer_min exec_s_when_autoconstructing () (integer_dec tag_integer_47 in4 integer_lte boolean_flush exec_empty) (exec_do*while (integer_dec integer_lt print_integer in1))))) ())) () ()) ()) ()) ())))))) ())
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 96
Size: 138
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 7.375
Median total errors in population: 7
Error averages by case: (0.812 0.894 0.591 0.485 0.897 0.898 0.764 0.423 0.806 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.704
Average program size in population (points): 66.775
Average percent parens in population: 0.213
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2543996
--- Timings ---
Current time: 1559593848468 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.5 seconds, 46.6%
Fitness Testing:      4.3 seconds, 36.8%
Report:               1.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 594
Test mean error for best: 0.59400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 0                  
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 0                  
Correct output: -41                 | Program output: 0                  
Correct output: 8                   | Program output: 0                  
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 0                  
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 0                  
Correct output: 24                  | Program output: 0                  
Correct output: 3                   | Program output: 0                  
Correct output: 6                   | Program output: 0                  
Correct output: 10                  | Program output: 0                  
Correct output: 79                  | Program output: 0                  
Correct output: 1                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 0                  
Correct output: 3                   | Program output: 0                  
Correct output: 19                  | Program output: 0                  
Correct output: 46                  | Program output: 0                  
Correct output: 60                  | Program output: 0                  
Correct output: 35                  | Program output: 0                  
Correct output: 2                   | Program output: 0                  
Correct output: 2                   | Program output: 0                  
Correct output: 24                  | Program output: 0                  
Correct output: 37                  | Program output: 0                  
Correct output: 55                  | Program output: 0                  
Correct output: 20                  | Program output: 0                  
Correct output: -58                 | Program output: -34                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: 0                  
Correct output: -72                 | Program output: -32                
Correct output: 21                  | Program output: 0                  
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: 0                  
Correct output: -28                 | Program output: -20                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 0                  
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -37                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 0                  
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -6                 
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 0                  
Correct output: -23                 | Program output: -6                 
Correct output: -53                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -27                
Correct output: -47                 | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -62                
Correct output: -71                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: 0                  
Correct output: 1                   | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 2, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_618} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_47} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1})
Lexicase best program: (exec_do*range () integer_dec in2 integer_div exec_noop integer_yank boolean_xor exec_if (boolean_dup integer_gt boolean_invert_first_then_and integer_stackdepth boolean_pop integer_dup_items exec_s (integer_max boolean_invert_first_then_and) (in1 exec_when (integer_min) in4 integer_shove print_integer boolean_yankdup integer_lt) (integer_sub boolean_xor boolean_stackdepth integer_min) boolean_frominteger integer_dup boolean_yank integer_div) (exec_do*range (exec_while (exec_k_when_autoconstructing (in2 exec_yankdup integer_dup_times) (exec_k_when_autoconstructing (exec_s (exec_rot (exec_do*while (boolean_dup_items integer_yank exec_yankdup print_exec ()) integer_flush exec_if (exec_y ()) (exec_yankdup boolean_empty exec_empty) in3 boolean_yank exec_eq integer_gte exec_s (exec_pop (integer_min exec_k_when_autoconstructing (exec_do*while (tagged_618 boolean_empty exec_eq integer_eq exec_pop (exec_if (exec_dup_items exec_empty integer_rot) (boolean_frominteger boolean_shove integer_min exec_s_when_autoconstructing () (integer_dec tag_integer_47 exec_dup_items) () in4 integer_lte boolean_flush exec_do*while (integer_dec in1) integer_swap) exec_dup_items in1))) ())) () ()) () ()) () ()) ())))))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 126
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 2, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_618} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_47} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1})
Zero cases best program: (exec_do*range () integer_dec in2 integer_div exec_noop integer_yank boolean_xor exec_if (boolean_dup integer_gt boolean_invert_first_then_and integer_stackdepth boolean_pop integer_dup_items exec_s (integer_max boolean_invert_first_then_and) (in1 exec_when (integer_min) in4 integer_shove print_integer boolean_yankdup integer_lt) (integer_sub boolean_xor boolean_stackdepth integer_min) boolean_frominteger integer_dup boolean_yank integer_div) (exec_do*range (exec_while (exec_k_when_autoconstructing (in2 exec_yankdup integer_dup_times) (exec_k_when_autoconstructing (exec_s (exec_rot (exec_do*while (boolean_dup_items integer_yank exec_yankdup print_exec ()) integer_flush exec_if (exec_y ()) (exec_yankdup boolean_empty exec_empty) in3 boolean_yank exec_eq integer_gte exec_s (exec_pop (integer_min exec_k_when_autoconstructing (exec_do*while (tagged_618 boolean_empty exec_eq integer_eq exec_pop (exec_if (exec_dup_items exec_empty integer_rot) (boolean_frominteger boolean_shove integer_min exec_s_when_autoconstructing () (integer_dec tag_integer_47 exec_dup_items) () in4 integer_lte boolean_flush exec_do*while (integer_dec in1) integer_swap) exec_dup_items in1))) ())) () ()) () ()) () ()) ())))))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 126
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 154 300 155 289 266 270 272 267 188)
Population mean number of elite cases: 2.42
Count of perfect (error zero) individuals by case: (263 154 300 155 289 266 270 272 267 188)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 2, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_618} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_47} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1})
Best program: (exec_do*range () integer_dec in2 integer_div exec_noop integer_yank boolean_xor exec_if (boolean_dup integer_gt boolean_invert_first_then_and integer_stackdepth boolean_pop integer_dup_items exec_s (integer_max boolean_invert_first_then_and) (in1 exec_when (integer_min) in4 integer_shove print_integer boolean_yankdup integer_lt) (integer_sub boolean_xor boolean_stackdepth integer_min) boolean_frominteger integer_dup boolean_yank integer_div) (exec_do*range (exec_while (exec_k_when_autoconstructing (in2 exec_yankdup integer_dup_times) (exec_k_when_autoconstructing (exec_s (exec_rot (exec_do*while (boolean_dup_items integer_yank exec_yankdup print_exec ()) integer_flush exec_if (exec_y ()) (exec_yankdup boolean_empty exec_empty) in3 boolean_yank exec_eq integer_gte exec_s (exec_pop (integer_min exec_k_when_autoconstructing (exec_do*while (tagged_618 boolean_empty exec_eq integer_eq exec_pop (exec_if (exec_dup_items exec_empty integer_rot) (boolean_frominteger boolean_shove integer_min exec_s_when_autoconstructing () (integer_dec tag_integer_47 exec_dup_items) () in4 integer_lte boolean_flush exec_do*while (integer_dec in1) integer_swap) exec_dup_items in1))) ())) () ()) () ()) () ()) ())))))
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 87
Size: 126
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.576
Median total errors in population: 8
Error averages by case: (0.737 0.846 0.7 0.845 0.711 0.734 0.73 0.728 0.733 0.812)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.717
Average program size in population (points): 88.339
Average percent parens in population: 0.241
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3107234
--- Timings ---
Current time: 1559593850651 milliseconds
Total Time:          14.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 48.0%
Fitness Testing:      5.0 seconds, 35.4%
Report:               2.2 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -53                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: -41                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 1                  
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 48                 
Correct output: 79                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 43                 
Correct output: 3                   | Program output: 57                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 63                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 11                 
Correct output: 24                  | Program output: 60                 
Correct output: 37                  | Program output: 37                 
Correct output: 55                  | Program output: 70                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -54                
Correct output: -79                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 68                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -47                
Correct output: -74                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: -62                
Correct output: -28                 | Program output: -25                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -38                
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: 46                 
Correct output: -59                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 4                  
Correct output: -95                 | Program output: 71                 
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -92                
Correct output: -47                 | Program output: 80                 
Correct output: -95                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: 7                  
Correct output: -36                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: 68                 
Correct output: -54                 | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: -70                 | Program output: 52                 
Correct output: -47                 | Program output: -36                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 34                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: -47                
Correct output: -83                 | Program output: -21                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -38                 | Program output: 51                 
Correct output: -47                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (in2 integer_empty integer_fromboolean boolean_invert_first_then_and in4 in3 integer_min boolean_invert_second_then_and boolean_flush boolean_swap boolean_eq print_integer exec_do*count (integer_dec boolean_eq exec_eq boolean_dup_items exec_flush integer_flush) exec_s_when_autoconstructing (tagged_807 boolean_xor exec_rot () (integer_max boolean_not integer_mult exec_if (exec_yankdup) (boolean_or integer_empty integer_flush exec_dup_times (in3 exec_dup (boolean_dup_items integer_eq) integer_fromboolean))) ()) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (in2 integer_empty integer_fromboolean boolean_invert_first_then_and in4 in3 integer_min boolean_invert_second_then_and boolean_flush boolean_swap boolean_eq print_integer exec_do*count (integer_dec boolean_eq exec_eq boolean_dup_items exec_flush integer_flush) exec_s_when_autoconstructing (tagged_807 boolean_xor exec_rot () (integer_max boolean_not integer_mult exec_if (exec_yankdup) (boolean_or integer_empty integer_flush exec_dup_times (in3 exec_dup (boolean_dup_items integer_eq) integer_fromboolean))) ()) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 258 347 184 168 139 256 170 254 541)
Population mean number of elite cases: 2.50
Count of perfect (error zero) individuals by case: (180 258 347 184 168 139 256 170 254 541)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction -52} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_807} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction tag_exec_560} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Best program: (integer_dec -52 exec_do*while (in2) boolean_pop boolean_invert_second_then_and boolean_yankdup integer_empty integer_dup_items integer_fromboolean boolean_invert_first_then_and in4 in3 integer_min boolean_invert_second_then_and tag_boolean_487 boolean_shove boolean_invert_second_then_and print_integer integer_shove exec_do*count (integer_dec boolean_dup_items integer_max exec_eq in1 integer_flush) tagged_807 boolean_not exec_s () (integer_mult exec_swap (integer_dup exec_if (exec_yankdup) (integer_empty tag_exec_560 () integer_flush exec_dup_times (exec_dup (boolean_dup_items integer_eq) integer_fromboolean))) ()) ())
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 43
Size: 56
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 7.503
Median total errors in population: 8
Error averages by case: (0.82 0.742 0.653 0.816 0.832 0.861 0.744 0.83 0.746 0.459)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.347
Average program size in population (points): 90.865
Average percent parens in population: 0.256
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3683820
--- Timings ---
Current time: 1559593852819 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.9 seconds, 48.9%
Fitness Testing:      5.6 seconds, 34.6%
Report:               2.6 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 59                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 15                 
Correct output: -100                | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -32                
Correct output: -74                 | Program output: -19                
Correct output: -71                 | Program output: -23                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -32                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: 3                  
Correct output: -50                 | Program output: 30                 
Correct output: -75                 | Program output: -58                
Correct output: 46                  | Program output: 53                 
Correct output: -53                 | Program output: -6                 
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: 39                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: 73                 
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: 42                 
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: 83                 
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_dec integer_dup_times boolean_pop exec_do*while (integer_pop in2) in1 integer_fromboolean exec_dup_times () boolean_invert_first_then_and in3 integer_min boolean_pop boolean_invert_second_then_and boolean_flush tag_boolean_487 boolean_swap exec_if (boolean_invert_second_then_and exec_s_when_autoconstructing (print_integer exec_do*count (integer_dup_items) integer_dec boolean_dup_items boolean_eq in1 boolean_dup_items in3 exec_k () (integer_flush) integer_mult exec_yankdup) (exec_dup_times (exec_dup (boolean_dup_items))) ()) ())
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_487} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_dec integer_dup_times boolean_pop exec_do*while (integer_pop in2) in1 integer_fromboolean exec_dup_times () boolean_invert_first_then_and in3 integer_min boolean_pop boolean_invert_second_then_and boolean_flush tag_boolean_487 boolean_swap exec_if (boolean_invert_second_then_and exec_s_when_autoconstructing (print_integer exec_do*count (integer_dup_items) integer_dec boolean_dup_items boolean_eq in1 boolean_dup_items in3 exec_k () (integer_flush) integer_mult exec_yankdup) (exec_dup_times (exec_dup (boolean_dup_items))) ()) ())
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 18 406 448 532 229 347 229 379 221)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (372 18 406 448 532 229 347 229 379 221)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean})
Best program: (integer_dec integer_dup_times integer_gt boolean_pop integer_gte in2 exec_do*range () boolean_pop boolean_invert_first_then_and in3 integer_min boolean_and boolean_invert_second_then_and boolean_eq print_integer exec_do*count (integer_dec exec_eq in1 integer_flush) boolean_not exec_if (integer_empty integer_flush exec_dup_times (exec_dup (boolean_dup_items integer_eq) integer_fromboolean)) ())
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.819
Median total errors in population: 7
Error averages by case: (0.628 0.982 0.594 0.552 0.468 0.771 0.653 0.771 0.621 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.6
Average program size in population (points): 53.06
Average percent parens in population: 0.204
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.218
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4283374
--- Timings ---
Current time: 1559593854798 milliseconds
Total Time:          18.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 49.5%
Fitness Testing:      6.2 seconds, 34.1%
Report:               2.9 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_eq})
Lexicase best program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_first_then_and in1 in3 in2 exec_dup () integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap integer_min) exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times boolean_not exec_if (integer_empty integer_flush boolean_dup_items exec_do*range () integer_gt) (integer_eq)) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_eq})
Zero cases best program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_first_then_and in1 in3 in2 exec_dup () integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap integer_min) exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times boolean_not exec_if (integer_empty integer_flush boolean_dup_items exec_do*range () integer_gt) (integer_eq)) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (349 106 257 370 253 121 353 638 249 249)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (349 106 257 370 253 121 353 638 249 249)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_eq})
Best program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_first_then_and in1 in3 in2 exec_dup () integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap integer_min) exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times boolean_not exec_if (integer_empty integer_flush boolean_dup_items exec_do*range () integer_gt) (integer_eq)) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 7.055
Median total errors in population: 6
Error averages by case: (0.651 0.894 0.743 0.63 0.747 0.879 0.647 0.362 0.751 0.751)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.79
Average program size in population (points): 57.209
Average percent parens in population: 0.216
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4849155
--- Timings ---
Current time: 1559593856839 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.2 seconds, 50.3%
Fitness Testing:      6.8 seconds, 33.7%
Report:               3.1 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_eq})
Lexicase best program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean boolean_invert_first_then_and in1 in3 in2 exec_dup () integer_min boolean_eq boolean_invert_second_then_and integer_min integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap integer_min) exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_flush integer_sub boolean_dup_items exec_do*range () integer_gt) (integer_eq)) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_eq})
Zero cases best program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean boolean_invert_first_then_and in1 in3 in2 exec_dup () integer_min boolean_eq boolean_invert_second_then_and integer_min integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap integer_min) exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_flush integer_sub boolean_dup_items exec_do*range () integer_gt) (integer_eq)) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (489 501 428 481 427 490 148 497 643 149)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (489 501 428 481 427 490 148 497 643 149)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_eq})
Best program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () boolean_invert_first_then_and print_boolean in1 in3 in2 exec_dup () integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup in2 integer_dec integer_swap integer_min exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times boolean_not exec_if (integer_empty integer_flush boolean_dup_items exec_do*range () integer_gt) (integer_eq)) ())
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.747
Median total errors in population: 6
Error averages by case: (0.511 0.499 0.572 0.519 0.573 0.51 0.852 0.503 0.357 0.851)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.149
Average program size in population (points): 51.428
Average percent parens in population: 0.218
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5445562
--- Timings ---
Current time: 1559593858912 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.4 seconds, 50.8%
Fitness Testing:      7.4 seconds, 33.3%
Report:               3.4 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 201
Test mean error for best: 0.20100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_pop exec_do*range () exec_dup_times () boolean_invert_first_then_and in1 integer_lte in3 in2 exec_dup () integer_min boolean_eq integer_min print_integer boolean_swap boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap integer_min) exec_do*range (exec_dup_items integer_mod) boolean_eq boolean_dup_items exec_if (exec_do*times (boolean_not exec_if (integer_empty boolean_dup_items exec_do*range () integer_gt) (integer_eq) integer_dec)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_pop exec_do*range () exec_dup_times () boolean_invert_first_then_and in1 integer_lte in3 in2 exec_dup () integer_min boolean_eq integer_min print_integer boolean_swap boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap integer_min) exec_do*range (exec_dup_items integer_mod) boolean_eq boolean_dup_items exec_if (exec_do*times (boolean_not exec_if (integer_empty boolean_dup_items exec_do*range () integer_gt) (integer_eq) integer_dec)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (506 417 415 542 418 414 494 698 413 541)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (506 417 415 542 418 414 494 698 413 541)
Population mean number of perfect (error zero) cases: 4.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*range})
Best program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 5.142
Median total errors in population: 5
Error averages by case: (0.494 0.583 0.585 0.458 0.582 0.586 0.506 0.302 0.587 0.459)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.359
Average program size in population (points): 52.667
Average percent parens in population: 0.212
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6005234
--- Timings ---
Current time: 1559593860952 milliseconds
Total Time:          24.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.5 seconds, 51.5%
Fitness Testing:      8.0 seconds, 32.8%
Report:               3.7 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 51


Auto-simplifying with starting size: 51
step: 0
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 500
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1000
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1500
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2000
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2500
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3000
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3500
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4000
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4500
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 5000
program: (integer_dup_times exec_noop boolean_pop in2 exec_do*range () integer_fromboolean exec_dup_times () boolean_invert_second_then_and boolean_invert_first_then_and in1 in3 in2 exec_dup () boolean_dup_times integer_min boolean_eq boolean_invert_second_then_and integer_min print_integer boolean_yankdup exec_do*count (in2 integer_flush integer_lte integer_dec integer_swap exec_dup_items exec_rot (integer_mod) (boolean_eq in1 boolean_dup_items integer_dup_times exec_if (integer_empty integer_max integer_flush exec_flush) (boolean_dup_items exec_do*range ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 201
Test mean error for best: 0.20100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: 30                  | Program output: 30                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 23                 
Correct output: -26                 | Program output: -26                
Correct output: 22                  | Program output: 22                 
Correct output: -41                 | Program output: 57                 
Correct output: 8                   | Program output: 76                 
Correct output: -85                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: 63                  | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: 1                   | Program output: 27                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 79                  | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 46                  | Program output: 46                 
Correct output: 60                  | Program output: 60                 
Correct output: 35                  | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 37                  | Program output: 42                 
Correct output: 55                  | Program output: 55                 
Correct output: 20                  | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -57                
Correct output: -19                 | Program output: -19                
Correct output: -28                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -91                 | Program output: -36                
Correct output: -50                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: 46                  | Program output: 47                 
Correct output: -53                 | Program output: -44                
Correct output: -83                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -48                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -23                
Correct output: 0                   | Program output: 1                  
Correct output: -79                 | Program output: -56                
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -92                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -42                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: 24                  | Program output: 24                 
Correct output: -23                 | Program output: -23                
Correct output: -53                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -47                 | Program output: 12                 
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -68                
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 4                  
;;******************************
