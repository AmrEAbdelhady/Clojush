Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[37 22 37 37] 22] [[-2 -2 -2 -87] -87] [[-39 -39 -39 2] -39] [[100 100 23 100] 23] [[66 66 84 66] 66] [[-87 -87 -87 22] -87] [[-54 5 5 5] -54] [[57 -19 57 57] -19] [[-27 55 55 55] -27] [[94 42 94 94] 42] [(19 19 19 19) 19] [(-57 -57 -57 -57) -57] [(22 22 22 22) 22] [(-52 -52 -52 -52) -52] [(72 72 72 72) 72] [(6 76 27 12) 6] [(28 0 5 31) 0] [(57 68 89 83) 57] [(90 34 81 95) 34] [(91 40 39 97) 39] [(54 35 24 37) 24] [(94 85 2 78) 2] [(96 93 10 38) 10] [(6 89 50 62) 6] [(83 91 77 21) 21] [(50 66 26 49) 26] [(56 81 96 66) 56] [(16 8 37 34) 8] [(55 26 45 12) 12] [(4 77 16 46) 4] [(50 65 7 24) 7] [(15 62 68 4) 4] [(23 39 71 90) 23] [(39 69 46 59) 39] [(4 16 96 76) 4] [(-85 87 78 69) -85] [(65 25 16 -100) -100] [(-51 4 -46 -90) -90] [(20 47 30 36) 20] [(71 60 -8 -80) -80] [(24 17 -62 -76) -76] [(17 -73 6 83) -73] [(-9 -60 49 -97) -97] [(88 -49 66 -12) -49] [(-70 91 86 -55) -70] [(35 -64 88 90) -64] [(-66 -23 -29 40) -66] [(-42 86 73 82) -42] [(9 -78 -88 87) -88] [(-27 -6 3 52) -27] [(-69 -7 -59 -2) -69] [(-76 -40 61 -39) -76] [(-14 -9 46 6) -14] [(41 77 61 70) 41] [(51 83 1 72) 1] [(-94 -85 61 -58) -94] [(-19 -46 -45 -21) -46] [(21 76 23 -4) -4] [(-32 -81 -37 -72) -81] [(4 68 -58 83) -58] [(89 98 -38 -41) -41] [(-12 -58 52 9) -58] [(-55 -34 -5 95) -55] [(31 40 90 15) 15] [(-77 68 28 61) -77] [(-51 97 -19 87) -51] [(38 -39 -48 -84) -84] [(13 35 34 -65) -65] [(-61 20 19 14) -61] [(2 -46 55 -30) -46] [(13 36 -39 -49) -49] [(28 97 5 48) 5] [(71 6 -97 -22) -97] [(-61 86 -32 -55) -61] [(29 -23 -31 -26) -31] [(-22 -90 73 -15) -90] [(40 -55 51 47) -55] [(67 14 52 50) 14] [(63 15 41 -67) -67] [(76 11 87 94) 11] [(-98 7 15 -66) -98] [(-19 -10 64 65) -19] [(-15 14 -19 28) -19] [(83 76 46 61) 46] [(46 91 99 -90) -90] [(13 -2 -82 20) -82] [(-69 98 -57 -7) -69] [(23 6 -98 72) -98] [(-75 -67 -33 6) -75] [(93 -9 -72 -1) -72] [(92 28 90 6) 6] [(88 -7 20 -72) -72] [(-87 -9 54 72) -87] [(-75 -39 18 -4) -75] [(-52 73 22 28) -52])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[37 22 37 37] 22]
Train Case:   6 | Input/Output: [[-2 -2 -2 -87] -87]
Train Case:   7 | Input/Output: [[-39 -39 -39 2] -39]
Train Case:   8 | Input/Output: [[100 100 23 100] 23]
Train Case:   9 | Input/Output: [[66 66 84 66] 66]
Train Case:  10 | Input/Output: [[-87 -87 -87 22] -87]
Train Case:  11 | Input/Output: [[-54 5 5 5] -54]
Train Case:  12 | Input/Output: [[57 -19 57 57] -19]
Train Case:  13 | Input/Output: [[-27 55 55 55] -27]
Train Case:  14 | Input/Output: [[94 42 94 94] 42]
Train Case:  15 | Input/Output: [(19 19 19 19) 19]
Train Case:  16 | Input/Output: [(-57 -57 -57 -57) -57]
Train Case:  17 | Input/Output: [(22 22 22 22) 22]
Train Case:  18 | Input/Output: [(-52 -52 -52 -52) -52]
Train Case:  19 | Input/Output: [(72 72 72 72) 72]
Train Case:  20 | Input/Output: [(6 76 27 12) 6]
Train Case:  21 | Input/Output: [(28 0 5 31) 0]
Train Case:  22 | Input/Output: [(57 68 89 83) 57]
Train Case:  23 | Input/Output: [(90 34 81 95) 34]
Train Case:  24 | Input/Output: [(91 40 39 97) 39]
Train Case:  25 | Input/Output: [(54 35 24 37) 24]
Train Case:  26 | Input/Output: [(94 85 2 78) 2]
Train Case:  27 | Input/Output: [(96 93 10 38) 10]
Train Case:  28 | Input/Output: [(6 89 50 62) 6]
Train Case:  29 | Input/Output: [(83 91 77 21) 21]
Train Case:  30 | Input/Output: [(50 66 26 49) 26]
Train Case:  31 | Input/Output: [(56 81 96 66) 56]
Train Case:  32 | Input/Output: [(16 8 37 34) 8]
Train Case:  33 | Input/Output: [(55 26 45 12) 12]
Train Case:  34 | Input/Output: [(4 77 16 46) 4]
Train Case:  35 | Input/Output: [(50 65 7 24) 7]
Train Case:  36 | Input/Output: [(15 62 68 4) 4]
Train Case:  37 | Input/Output: [(23 39 71 90) 23]
Train Case:  38 | Input/Output: [(39 69 46 59) 39]
Train Case:  39 | Input/Output: [(4 16 96 76) 4]
Train Case:  40 | Input/Output: [(-85 87 78 69) -85]
Train Case:  41 | Input/Output: [(65 25 16 -100) -100]
Train Case:  42 | Input/Output: [(-51 4 -46 -90) -90]
Train Case:  43 | Input/Output: [(20 47 30 36) 20]
Train Case:  44 | Input/Output: [(71 60 -8 -80) -80]
Train Case:  45 | Input/Output: [(24 17 -62 -76) -76]
Train Case:  46 | Input/Output: [(17 -73 6 83) -73]
Train Case:  47 | Input/Output: [(-9 -60 49 -97) -97]
Train Case:  48 | Input/Output: [(88 -49 66 -12) -49]
Train Case:  49 | Input/Output: [(-70 91 86 -55) -70]
Train Case:  50 | Input/Output: [(35 -64 88 90) -64]
Train Case:  51 | Input/Output: [(-66 -23 -29 40) -66]
Train Case:  52 | Input/Output: [(-42 86 73 82) -42]
Train Case:  53 | Input/Output: [(9 -78 -88 87) -88]
Train Case:  54 | Input/Output: [(-27 -6 3 52) -27]
Train Case:  55 | Input/Output: [(-69 -7 -59 -2) -69]
Train Case:  56 | Input/Output: [(-76 -40 61 -39) -76]
Train Case:  57 | Input/Output: [(-14 -9 46 6) -14]
Train Case:  58 | Input/Output: [(41 77 61 70) 41]
Train Case:  59 | Input/Output: [(51 83 1 72) 1]
Train Case:  60 | Input/Output: [(-94 -85 61 -58) -94]
Train Case:  61 | Input/Output: [(-19 -46 -45 -21) -46]
Train Case:  62 | Input/Output: [(21 76 23 -4) -4]
Train Case:  63 | Input/Output: [(-32 -81 -37 -72) -81]
Train Case:  64 | Input/Output: [(4 68 -58 83) -58]
Train Case:  65 | Input/Output: [(89 98 -38 -41) -41]
Train Case:  66 | Input/Output: [(-12 -58 52 9) -58]
Train Case:  67 | Input/Output: [(-55 -34 -5 95) -55]
Train Case:  68 | Input/Output: [(31 40 90 15) 15]
Train Case:  69 | Input/Output: [(-77 68 28 61) -77]
Train Case:  70 | Input/Output: [(-51 97 -19 87) -51]
Train Case:  71 | Input/Output: [(38 -39 -48 -84) -84]
Train Case:  72 | Input/Output: [(13 35 34 -65) -65]
Train Case:  73 | Input/Output: [(-61 20 19 14) -61]
Train Case:  74 | Input/Output: [(2 -46 55 -30) -46]
Train Case:  75 | Input/Output: [(13 36 -39 -49) -49]
Train Case:  76 | Input/Output: [(28 97 5 48) 5]
Train Case:  77 | Input/Output: [(71 6 -97 -22) -97]
Train Case:  78 | Input/Output: [(-61 86 -32 -55) -61]
Train Case:  79 | Input/Output: [(29 -23 -31 -26) -31]
Train Case:  80 | Input/Output: [(-22 -90 73 -15) -90]
Train Case:  81 | Input/Output: [(40 -55 51 47) -55]
Train Case:  82 | Input/Output: [(67 14 52 50) 14]
Train Case:  83 | Input/Output: [(63 15 41 -67) -67]
Train Case:  84 | Input/Output: [(76 11 87 94) 11]
Train Case:  85 | Input/Output: [(-98 7 15 -66) -98]
Train Case:  86 | Input/Output: [(-19 -10 64 65) -19]
Train Case:  87 | Input/Output: [(-15 14 -19 28) -19]
Train Case:  88 | Input/Output: [(83 76 46 61) 46]
Train Case:  89 | Input/Output: [(46 91 99 -90) -90]
Train Case:  90 | Input/Output: [(13 -2 -82 20) -82]
Train Case:  91 | Input/Output: [(-69 98 -57 -7) -69]
Train Case:  92 | Input/Output: [(23 6 -98 72) -98]
Train Case:  93 | Input/Output: [(-75 -67 -33 6) -75]
Train Case:  94 | Input/Output: [(93 -9 -72 -1) -72]
Train Case:  95 | Input/Output: [(92 28 90 6) 6]
Train Case:  96 | Input/Output: [(88 -7 20 -72) -72]
Train Case:  97 | Input/Output: [(-87 -9 54 72) -87]
Train Case:  98 | Input/Output: [(-75 -39 18 -4) -75]
Train Case:  99 | Input/Output: [(-52 73 22 28) -52]
Test Case:   0 | Input/Output: [[23 23 23 -23] -23]
Test Case:   1 | Input/Output: [[-89 88 88 88] -89]
Test Case:   2 | Input/Output: [[-87 -87 -55 -87] -87]
Test Case:   3 | Input/Output: [[29 -21 29 29] -21]
Test Case:   4 | Input/Output: [[93 -34 93 93] -34]
Test Case:   5 | Input/Output: [[-92 -92 45 -92] -92]
Test Case:   6 | Input/Output: [[-15 -15 -15 62] -15]
Test Case:   7 | Input/Output: [[-33 -33 -62 -33] -62]
Test Case:   8 | Input/Output: [[-14 -14 -24 -14] -24]
Test Case:   9 | Input/Output: [[-1 -77 -1 -1] -77]
Test Case:  10 | Input/Output: [[25 -77 25 25] -77]
Test Case:  11 | Input/Output: [[96 96 96 26] 26]
Test Case:  12 | Input/Output: [[59 59 48 59] 48]
Test Case:  13 | Input/Output: [[-63 100 -63 -63] -63]
Test Case:  14 | Input/Output: [[-15 -80 -15 -15] -80]
Test Case:  15 | Input/Output: [[57 78 78 78] 57]
Test Case:  16 | Input/Output: [[-95 -2 -2 -2] -95]
Test Case:  17 | Input/Output: [[100 100 45 100] 45]
Test Case:  18 | Input/Output: [[80 -66 -66 -66] -66]
Test Case:  19 | Input/Output: [[78 -97 -97 -97] -97]
Test Case:  20 | Input/Output: [[73 2 2 2] 2]
Test Case:  21 | Input/Output: [[7 7 40 7] 7]
Test Case:  22 | Input/Output: [[-57 33 -57 -57] -57]
Test Case:  23 | Input/Output: [[59 59 95 59] 59]
Test Case:  24 | Input/Output: [[-81 -81 -83 -81] -83]
Test Case:  25 | Input/Output: [[-24 -94 -94 -94] -94]
Test Case:  26 | Input/Output: [[94 52 52 52] 52]
Test Case:  27 | Input/Output: [[-76 -76 -76 5] -76]
Test Case:  28 | Input/Output: [[-60 15 -60 -60] -60]
Test Case:  29 | Input/Output: [[14 -24 14 14] -24]
Test Case:  30 | Input/Output: [[62 62 -73 62] -73]
Test Case:  31 | Input/Output: [[-24 24 24 24] -24]
Test Case:  32 | Input/Output: [[37 -54 37 37] -54]
Test Case:  33 | Input/Output: [[11 11 11 65] 11]
Test Case:  34 | Input/Output: [[-67 48 -67 -67] -67]
Test Case:  35 | Input/Output: [[11 -99 -99 -99] -99]
Test Case:  36 | Input/Output: [[76 76 76 -46] -46]
Test Case:  37 | Input/Output: [[58 75 58 58] 58]
Test Case:  38 | Input/Output: [[-42 -42 -42 94] -42]
Test Case:  39 | Input/Output: [[0 0 -28 0] -28]
Test Case:  40 | Input/Output: [[35 35 35 -42] -42]
Test Case:  41 | Input/Output: [[-88 -88 -88 30] -88]
Test Case:  42 | Input/Output: [[5 5 86 5] 5]
Test Case:  43 | Input/Output: [[-37 -8 -8 -8] -37]
Test Case:  44 | Input/Output: [[43 43 43 94] 43]
Test Case:  45 | Input/Output: [[37 37 -61 37] -61]
Test Case:  46 | Input/Output: [[-2 18 -2 -2] -2]
Test Case:  47 | Input/Output: [[85 85 62 85] 62]
Test Case:  48 | Input/Output: [[20 43 20 20] 20]
Test Case:  49 | Input/Output: [[-93 -93 -93 -95] -95]
Test Case:  50 | Input/Output: [[-3 -3 -92 -3] -92]
Test Case:  51 | Input/Output: [[-99 -99 67 -99] -99]
Test Case:  52 | Input/Output: [[81 81 -96 81] -96]
Test Case:  53 | Input/Output: [[-80 -30 -30 -30] -80]
Test Case:  54 | Input/Output: [[50 50 50 69] 50]
Test Case:  55 | Input/Output: [[20 20 -93 20] -93]
Test Case:  56 | Input/Output: [[51 25 51 51] 25]
Test Case:  57 | Input/Output: [[91 91 40 91] 40]
Test Case:  58 | Input/Output: [[87 87 87 -14] -14]
Test Case:  59 | Input/Output: [[-38 88 -38 -38] -38]
Test Case:  60 | Input/Output: [[-2 85 85 85] -2]
Test Case:  61 | Input/Output: [[-90 22 22 22] -90]
Test Case:  62 | Input/Output: [[19 19 19 26] 19]
Test Case:  63 | Input/Output: [[-41 -41 -41 67] -41]
Test Case:  64 | Input/Output: [[-44 -10 -10 -10] -44]
Test Case:  65 | Input/Output: [[-28 -28 -20 -28] -28]
Test Case:  66 | Input/Output: [[2 21 2 2] 2]
Test Case:  67 | Input/Output: [[90 -4 -4 -4] -4]
Test Case:  68 | Input/Output: [[-98 -98 22 -98] -98]
Test Case:  69 | Input/Output: [[89 89 21 89] 21]
Test Case:  70 | Input/Output: [[6 6 6 -18] -18]
Test Case:  71 | Input/Output: [[91 12 91 91] 12]
Test Case:  72 | Input/Output: [[-41 -98 -98 -98] -98]
Test Case:  73 | Input/Output: [[15 15 15 -96] -96]
Test Case:  74 | Input/Output: [[-3 -3 -3 -47] -47]
Test Case:  75 | Input/Output: [[-57 -57 -64 -57] -64]
Test Case:  76 | Input/Output: [[-38 -38 -38 60] -38]
Test Case:  77 | Input/Output: [[30 30 -7 30] -7]
Test Case:  78 | Input/Output: [[-78 -78 -78 -37] -78]
Test Case:  79 | Input/Output: [[19 12 19 19] 12]
Test Case:  80 | Input/Output: [[79 79 79 23] 23]
Test Case:  81 | Input/Output: [[-60 -81 -81 -81] -81]
Test Case:  82 | Input/Output: [[84 84 84 87] 84]
Test Case:  83 | Input/Output: [[-96 -96 -52 -96] -96]
Test Case:  84 | Input/Output: [[-46 -46 -49 -46] -49]
Test Case:  85 | Input/Output: [[60 -39 60 60] -39]
Test Case:  86 | Input/Output: [[-44 -44 -44 79] -44]
Test Case:  87 | Input/Output: [[-2 97 -2 -2] -2]
Test Case:  88 | Input/Output: [[91 67 91 91] 67]
Test Case:  89 | Input/Output: [[52 52 52 -97] -97]
Test Case:  90 | Input/Output: [[47 47 -44 47] -44]
Test Case:  91 | Input/Output: [[-44 -44 -44 -21] -44]
Test Case:  92 | Input/Output: [[83 73 83 83] 73]
Test Case:  93 | Input/Output: [[-40 -14 -14 -14] -40]
Test Case:  94 | Input/Output: [[54 -51 54 54] -51]
Test Case:  95 | Input/Output: [[-5 -5 -1 -5] -5]
Test Case:  96 | Input/Output: [[-5 -40 -5 -5] -40]
Test Case:  97 | Input/Output: [[98 98 98 -8] -8]
Test Case:  98 | Input/Output: [[-13 77 -13 -13] -13]
Test Case:  99 | Input/Output: [[-37 36 -37 -37] -37]
Test Case: 100 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 101 | Input/Output: [(64 64 64 64) 64]
Test Case: 102 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 103 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 104 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 105 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 106 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 107 | Input/Output: [(48 48 48 48) 48]
Test Case: 108 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 109 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 110 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 111 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 112 | Input/Output: [(77 77 77 77) 77]
Test Case: 113 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 114 | Input/Output: [(54 54 54 54) 54]
Test Case: 115 | Input/Output: [(92 92 92 92) 92]
Test Case: 116 | Input/Output: [(3 3 3 3) 3]
Test Case: 117 | Input/Output: [(37 37 37 37) 37]
Test Case: 118 | Input/Output: [(75 75 75 75) 75]
Test Case: 119 | Input/Output: [(9 9 9 9) 9]
Test Case: 120 | Input/Output: [(6 6 6 6) 6]
Test Case: 121 | Input/Output: [(97 97 97 97) 97]
Test Case: 122 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 123 | Input/Output: [(13 13 13 13) 13]
Test Case: 124 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 125 | Input/Output: [(31 31 31 31) 31]
Test Case: 126 | Input/Output: [(32 32 32 32) 32]
Test Case: 127 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 128 | Input/Output: [(20 20 20 20) 20]
Test Case: 129 | Input/Output: [(64 64 64 64) 64]
Test Case: 130 | Input/Output: [(79 79 79 79) 79]
Test Case: 131 | Input/Output: [(71 71 71 71) 71]
Test Case: 132 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 133 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 134 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 135 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 136 | Input/Output: [(54 54 54 54) 54]
Test Case: 137 | Input/Output: [(49 49 49 49) 49]
Test Case: 138 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 139 | Input/Output: [(2 2 2 2) 2]
Test Case: 140 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 141 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 142 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 143 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 144 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 145 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 146 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 147 | Input/Output: [(14 14 14 14) 14]
Test Case: 148 | Input/Output: [(61 61 61 61) 61]
Test Case: 149 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 150 | Input/Output: [(64 64 64 64) 64]
Test Case: 151 | Input/Output: [(61 61 61 61) 61]
Test Case: 152 | Input/Output: [(61 61 61 61) 61]
Test Case: 153 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 154 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 155 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 156 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 157 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 158 | Input/Output: [(39 39 39 39) 39]
Test Case: 159 | Input/Output: [(37 37 37 37) 37]
Test Case: 160 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 161 | Input/Output: [(50 50 50 50) 50]
Test Case: 162 | Input/Output: [(75 75 75 75) 75]
Test Case: 163 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 164 | Input/Output: [(87 87 87 87) 87]
Test Case: 165 | Input/Output: [(68 68 68 68) 68]
Test Case: 166 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 167 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 168 | Input/Output: [(21 21 21 21) 21]
Test Case: 169 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 170 | Input/Output: [(13 13 13 13) 13]
Test Case: 171 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 172 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 173 | Input/Output: [(0 0 0 0) 0]
Test Case: 174 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 175 | Input/Output: [(100 100 100 100) 100]
Test Case: 176 | Input/Output: [(68 68 68 68) 68]
Test Case: 177 | Input/Output: [(6 6 6 6) 6]
Test Case: 178 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 179 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 180 | Input/Output: [(81 81 81 81) 81]
Test Case: 181 | Input/Output: [(27 27 27 27) 27]
Test Case: 182 | Input/Output: [(99 99 99 99) 99]
Test Case: 183 | Input/Output: [(64 64 64 64) 64]
Test Case: 184 | Input/Output: [(34 34 34 34) 34]
Test Case: 185 | Input/Output: [(39 39 39 39) 39]
Test Case: 186 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 187 | Input/Output: [(26 26 26 26) 26]
Test Case: 188 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 189 | Input/Output: [(97 97 97 97) 97]
Test Case: 190 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 191 | Input/Output: [(14 14 14 14) 14]
Test Case: 192 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 193 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 194 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 195 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 196 | Input/Output: [(69 69 69 69) 69]
Test Case: 197 | Input/Output: [(16 16 16 16) 16]
Test Case: 198 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 199 | Input/Output: [(82 82 82 82) 82]
Test Case: 200 | Input/Output: [(75 15 65 10) 10]
Test Case: 201 | Input/Output: [(55 63 58 92) 55]
Test Case: 202 | Input/Output: [(63 72 94 54) 54]
Test Case: 203 | Input/Output: [(54 31 32 88) 31]
Test Case: 204 | Input/Output: [(97 67 89 1) 1]
Test Case: 205 | Input/Output: [(77 55 94 3) 3]
Test Case: 206 | Input/Output: [(96 59 59 6) 6]
Test Case: 207 | Input/Output: [(70 81 14 98) 14]
Test Case: 208 | Input/Output: [(87 84 42 19) 19]
Test Case: 209 | Input/Output: [(76 1 52 40) 1]
Test Case: 210 | Input/Output: [(69 9 52 67) 9]
Test Case: 211 | Input/Output: [(5 46 47 39) 5]
Test Case: 212 | Input/Output: [(46 16 18 70) 16]
Test Case: 213 | Input/Output: [(80 65 4 23) 4]
Test Case: 214 | Input/Output: [(11 81 81 38) 11]
Test Case: 215 | Input/Output: [(89 35 28 52) 28]
Test Case: 216 | Input/Output: [(68 77 41 85) 41]
Test Case: 217 | Input/Output: [(7 58 36 66) 7]
Test Case: 218 | Input/Output: [(2 10 12 53) 2]
Test Case: 219 | Input/Output: [(26 39 78 69) 26]
Test Case: 220 | Input/Output: [(71 75 83 43) 43]
Test Case: 221 | Input/Output: [(4 2 15 81) 2]
Test Case: 222 | Input/Output: [(7 53 43 46) 7]
Test Case: 223 | Input/Output: [(52 61 30 88) 30]
Test Case: 224 | Input/Output: [(95 21 11 67) 11]
Test Case: 225 | Input/Output: [(64 30 45 62) 30]
Test Case: 226 | Input/Output: [(29 83 20 55) 20]
Test Case: 227 | Input/Output: [(62 41 96 94) 41]
Test Case: 228 | Input/Output: [(44 20 21 36) 20]
Test Case: 229 | Input/Output: [(19 91 94 26) 19]
Test Case: 230 | Input/Output: [(96 99 79 14) 14]
Test Case: 231 | Input/Output: [(9 90 6 79) 6]
Test Case: 232 | Input/Output: [(62 24 73 7) 7]
Test Case: 233 | Input/Output: [(75 94 37 8) 8]
Test Case: 234 | Input/Output: [(80 48 44 28) 28]
Test Case: 235 | Input/Output: [(37 55 42 35) 35]
Test Case: 236 | Input/Output: [(35 53 64 67) 35]
Test Case: 237 | Input/Output: [(13 49 7 85) 7]
Test Case: 238 | Input/Output: [(91 61 84 80) 61]
Test Case: 239 | Input/Output: [(0 40 93 38) 0]
Test Case: 240 | Input/Output: [(11 28 39 65) 11]
Test Case: 241 | Input/Output: [(13 56 36 37) 13]
Test Case: 242 | Input/Output: [(31 16 93 16) 16]
Test Case: 243 | Input/Output: [(80 83 91 1) 1]
Test Case: 244 | Input/Output: [(45 71 59 41) 41]
Test Case: 245 | Input/Output: [(17 81 69 75) 17]
Test Case: 246 | Input/Output: [(26 67 99 75) 26]
Test Case: 247 | Input/Output: [(59 42 80 16) 16]
Test Case: 248 | Input/Output: [(45 84 1 86) 1]
Test Case: 249 | Input/Output: [(53 96 43 8) 8]
Test Case: 250 | Input/Output: [(71 91 52 28) 28]
Test Case: 251 | Input/Output: [(72 45 19 10) 10]
Test Case: 252 | Input/Output: [(31 54 100 9) 9]
Test Case: 253 | Input/Output: [(83 83 62 80) 62]
Test Case: 254 | Input/Output: [(87 76 81 57) 57]
Test Case: 255 | Input/Output: [(63 34 24 17) 17]
Test Case: 256 | Input/Output: [(67 18 69 89) 18]
Test Case: 257 | Input/Output: [(99 15 16 90) 15]
Test Case: 258 | Input/Output: [(54 98 10 81) 10]
Test Case: 259 | Input/Output: [(89 40 79 60) 40]
Test Case: 260 | Input/Output: [(33 57 29 71) 29]
Test Case: 261 | Input/Output: [(61 73 5 57) 5]
Test Case: 262 | Input/Output: [(50 34 64 78) 34]
Test Case: 263 | Input/Output: [(64 88 92 42) 42]
Test Case: 264 | Input/Output: [(32 43 13 38) 13]
Test Case: 265 | Input/Output: [(88 61 60 66) 60]
Test Case: 266 | Input/Output: [(26 7 50 2) 2]
Test Case: 267 | Input/Output: [(82 2 97 56) 2]
Test Case: 268 | Input/Output: [(36 2 10 25) 2]
Test Case: 269 | Input/Output: [(80 71 33 58) 33]
Test Case: 270 | Input/Output: [(38 80 8 77) 8]
Test Case: 271 | Input/Output: [(92 91 79 82) 79]
Test Case: 272 | Input/Output: [(0 43 10 57) 0]
Test Case: 273 | Input/Output: [(30 18 62 96) 18]
Test Case: 274 | Input/Output: [(35 14 90 67) 14]
Test Case: 275 | Input/Output: [(35 53 86 43) 35]
Test Case: 276 | Input/Output: [(27 35 15 53) 15]
Test Case: 277 | Input/Output: [(21 30 83 5) 5]
Test Case: 278 | Input/Output: [(90 3 60 75) 3]
Test Case: 279 | Input/Output: [(62 91 43 52) 43]
Test Case: 280 | Input/Output: [(72 44 14 38) 14]
Test Case: 281 | Input/Output: [(31 81 30 14) 14]
Test Case: 282 | Input/Output: [(23 2 24 45) 2]
Test Case: 283 | Input/Output: [(91 22 20 7) 7]
Test Case: 284 | Input/Output: [(75 54 91 36) 36]
Test Case: 285 | Input/Output: [(51 48 11 40) 11]
Test Case: 286 | Input/Output: [(58 15 49 33) 15]
Test Case: 287 | Input/Output: [(86 41 81 44) 41]
Test Case: 288 | Input/Output: [(7 8 44 58) 7]
Test Case: 289 | Input/Output: [(66 67 49 4) 4]
Test Case: 290 | Input/Output: [(80 1 79 31) 1]
Test Case: 291 | Input/Output: [(6 52 69 38) 6]
Test Case: 292 | Input/Output: [(79 98 2 0) 0]
Test Case: 293 | Input/Output: [(77 79 31 87) 31]
Test Case: 294 | Input/Output: [(64 22 25 52) 22]
Test Case: 295 | Input/Output: [(55 94 40 40) 40]
Test Case: 296 | Input/Output: [(75 87 66 94) 66]
Test Case: 297 | Input/Output: [(42 7 43 51) 7]
Test Case: 298 | Input/Output: [(74 94 81 69) 69]
Test Case: 299 | Input/Output: [(15 69 74 78) 15]
Test Case: 300 | Input/Output: [(68 36 74 73) 36]
Test Case: 301 | Input/Output: [(42 38 84 48) 38]
Test Case: 302 | Input/Output: [(84 17 17 19) 17]
Test Case: 303 | Input/Output: [(65 98 96 87) 65]
Test Case: 304 | Input/Output: [(80 81 14 44) 14]
Test Case: 305 | Input/Output: [(31 69 25 89) 25]
Test Case: 306 | Input/Output: [(61 82 50 65) 50]
Test Case: 307 | Input/Output: [(97 55 92 3) 3]
Test Case: 308 | Input/Output: [(13 31 11 23) 11]
Test Case: 309 | Input/Output: [(54 42 99 54) 42]
Test Case: 310 | Input/Output: [(28 98 20 98) 20]
Test Case: 311 | Input/Output: [(13 3 56 90) 3]
Test Case: 312 | Input/Output: [(25 62 57 2) 2]
Test Case: 313 | Input/Output: [(29 55 92 54) 29]
Test Case: 314 | Input/Output: [(99 83 28 62) 28]
Test Case: 315 | Input/Output: [(67 2 7 70) 2]
Test Case: 316 | Input/Output: [(15 14 43 64) 14]
Test Case: 317 | Input/Output: [(28 73 73 100) 28]
Test Case: 318 | Input/Output: [(43 5 10 90) 5]
Test Case: 319 | Input/Output: [(35 98 39 96) 35]
Test Case: 320 | Input/Output: [(38 10 11 66) 10]
Test Case: 321 | Input/Output: [(72 63 73 26) 26]
Test Case: 322 | Input/Output: [(34 69 62 47) 34]
Test Case: 323 | Input/Output: [(14 3 29 88) 3]
Test Case: 324 | Input/Output: [(51 100 22 83) 22]
Test Case: 325 | Input/Output: [(49 93 83 49) 49]
Test Case: 326 | Input/Output: [(9 76 8 99) 8]
Test Case: 327 | Input/Output: [(23 15 94 74) 15]
Test Case: 328 | Input/Output: [(99 64 34 89) 34]
Test Case: 329 | Input/Output: [(41 81 17 43) 17]
Test Case: 330 | Input/Output: [(30 41 21 42) 21]
Test Case: 331 | Input/Output: [(63 7 60 15) 7]
Test Case: 332 | Input/Output: [(15 57 38 55) 15]
Test Case: 333 | Input/Output: [(90 2 31 71) 2]
Test Case: 334 | Input/Output: [(6 5 77 89) 5]
Test Case: 335 | Input/Output: [(49 47 44 63) 44]
Test Case: 336 | Input/Output: [(10 88 28 76) 10]
Test Case: 337 | Input/Output: [(34 55 97 27) 27]
Test Case: 338 | Input/Output: [(2 56 95 16) 2]
Test Case: 339 | Input/Output: [(36 25 89 48) 25]
Test Case: 340 | Input/Output: [(57 81 37 96) 37]
Test Case: 341 | Input/Output: [(45 90 30 17) 17]
Test Case: 342 | Input/Output: [(54 71 10 59) 10]
Test Case: 343 | Input/Output: [(18 67 41 20) 18]
Test Case: 344 | Input/Output: [(41 7 24 70) 7]
Test Case: 345 | Input/Output: [(0 73 76 42) 0]
Test Case: 346 | Input/Output: [(69 65 94 81) 65]
Test Case: 347 | Input/Output: [(56 90 48 75) 48]
Test Case: 348 | Input/Output: [(97 68 58 18) 18]
Test Case: 349 | Input/Output: [(81 25 25 65) 25]
Test Case: 350 | Input/Output: [(92 53 54 20) 20]
Test Case: 351 | Input/Output: [(38 32 14 84) 14]
Test Case: 352 | Input/Output: [(29 55 66 33) 29]
Test Case: 353 | Input/Output: [(90 41 37 14) 14]
Test Case: 354 | Input/Output: [(48 73 51 85) 48]
Test Case: 355 | Input/Output: [(80 52 0 8) 0]
Test Case: 356 | Input/Output: [(88 41 82 48) 41]
Test Case: 357 | Input/Output: [(28 99 79 44) 28]
Test Case: 358 | Input/Output: [(55 74 5 81) 5]
Test Case: 359 | Input/Output: [(6 56 69 44) 6]
Test Case: 360 | Input/Output: [(69 79 22 87) 22]
Test Case: 361 | Input/Output: [(4 6 76 9) 4]
Test Case: 362 | Input/Output: [(41 18 88 41) 18]
Test Case: 363 | Input/Output: [(66 87 97 12) 12]
Test Case: 364 | Input/Output: [(77 77 71 71) 71]
Test Case: 365 | Input/Output: [(52 87 7 55) 7]
Test Case: 366 | Input/Output: [(89 83 77 76) 76]
Test Case: 367 | Input/Output: [(29 16 86 16) 16]
Test Case: 368 | Input/Output: [(93 8 79 68) 8]
Test Case: 369 | Input/Output: [(30 28 24 53) 24]
Test Case: 370 | Input/Output: [(46 34 45 67) 34]
Test Case: 371 | Input/Output: [(35 17 3 92) 3]
Test Case: 372 | Input/Output: [(82 70 12 33) 12]
Test Case: 373 | Input/Output: [(16 16 86 88) 16]
Test Case: 374 | Input/Output: [(9 39 16 76) 9]
Test Case: 375 | Input/Output: [(24 49 30 48) 24]
Test Case: 376 | Input/Output: [(58 66 43 100) 43]
Test Case: 377 | Input/Output: [(57 47 74 38) 38]
Test Case: 378 | Input/Output: [(77 43 77 10) 10]
Test Case: 379 | Input/Output: [(37 87 100 37) 37]
Test Case: 380 | Input/Output: [(4 6 12 82) 4]
Test Case: 381 | Input/Output: [(35 28 26 22) 22]
Test Case: 382 | Input/Output: [(71 0 1 39) 0]
Test Case: 383 | Input/Output: [(26 64 40 35) 26]
Test Case: 384 | Input/Output: [(94 61 45 90) 45]
Test Case: 385 | Input/Output: [(27 61 68 21) 21]
Test Case: 386 | Input/Output: [(68 33 43 61) 33]
Test Case: 387 | Input/Output: [(60 30 77 15) 15]
Test Case: 388 | Input/Output: [(36 15 15 94) 15]
Test Case: 389 | Input/Output: [(66 66 89 35) 35]
Test Case: 390 | Input/Output: [(20 62 54 56) 20]
Test Case: 391 | Input/Output: [(31 82 36 32) 31]
Test Case: 392 | Input/Output: [(30 56 61 63) 30]
Test Case: 393 | Input/Output: [(14 33 13 10) 10]
Test Case: 394 | Input/Output: [(31 44 84 100) 31]
Test Case: 395 | Input/Output: [(92 1 0 48) 0]
Test Case: 396 | Input/Output: [(48 55 79 81) 48]
Test Case: 397 | Input/Output: [(68 56 91 90) 56]
Test Case: 398 | Input/Output: [(10 91 40 81) 10]
Test Case: 399 | Input/Output: [(48 47 59 98) 47]
Test Case: 400 | Input/Output: [(47 -70 -78 -65) -78]
Test Case: 401 | Input/Output: [(-43 86 -29 29) -43]
Test Case: 402 | Input/Output: [(46 -33 84 -90) -90]
Test Case: 403 | Input/Output: [(-51 28 -38 62) -51]
Test Case: 404 | Input/Output: [(-18 15 77 -78) -78]
Test Case: 405 | Input/Output: [(56 -4 -1 7) -4]
Test Case: 406 | Input/Output: [(-31 -68 -91 67) -91]
Test Case: 407 | Input/Output: [(64 14 50 38) 14]
Test Case: 408 | Input/Output: [(44 -14 -77 12) -77]
Test Case: 409 | Input/Output: [(85 13 21 -1) -1]
Test Case: 410 | Input/Output: [(97 -29 47 -31) -31]
Test Case: 411 | Input/Output: [(70 11 -71 -49) -71]
Test Case: 412 | Input/Output: [(-8 19 71 57) -8]
Test Case: 413 | Input/Output: [(18 -4 -90 -36) -90]
Test Case: 414 | Input/Output: [(0 71 65 54) 0]
Test Case: 415 | Input/Output: [(0 90 100 10) 0]
Test Case: 416 | Input/Output: [(90 -20 94 23) -20]
Test Case: 417 | Input/Output: [(84 -3 55 -33) -33]
Test Case: 418 | Input/Output: [(65 80 73 -96) -96]
Test Case: 419 | Input/Output: [(-97 -78 51 -53) -97]
Test Case: 420 | Input/Output: [(-52 85 64 48) -52]
Test Case: 421 | Input/Output: [(70 -75 13 44) -75]
Test Case: 422 | Input/Output: [(-84 41 64 93) -84]
Test Case: 423 | Input/Output: [(-1 65 -27 64) -27]
Test Case: 424 | Input/Output: [(-25 23 46 13) -25]
Test Case: 425 | Input/Output: [(-73 98 37 -59) -73]
Test Case: 426 | Input/Output: [(-20 68 27 9) -20]
Test Case: 427 | Input/Output: [(-63 97 83 21) -63]
Test Case: 428 | Input/Output: [(42 -1 64 20) -1]
Test Case: 429 | Input/Output: [(-72 -37 33 9) -72]
Test Case: 430 | Input/Output: [(-57 -49 -7 -46) -57]
Test Case: 431 | Input/Output: [(38 -74 -33 38) -74]
Test Case: 432 | Input/Output: [(91 18 14 -94) -94]
Test Case: 433 | Input/Output: [(-79 -31 -72 -16) -79]
Test Case: 434 | Input/Output: [(-59 -8 34 -33) -59]
Test Case: 435 | Input/Output: [(79 62 -64 73) -64]
Test Case: 436 | Input/Output: [(18 32 -74 -65) -74]
Test Case: 437 | Input/Output: [(20 1 55 43) 1]
Test Case: 438 | Input/Output: [(84 -17 43 -82) -82]
Test Case: 439 | Input/Output: [(98 32 1 -93) -93]
Test Case: 440 | Input/Output: [(29 -52 16 15) -52]
Test Case: 441 | Input/Output: [(-85 -47 -1 -84) -85]
Test Case: 442 | Input/Output: [(24 74 35 59) 24]
Test Case: 443 | Input/Output: [(35 9 68 34) 9]
Test Case: 444 | Input/Output: [(57 16 17 -46) -46]
Test Case: 445 | Input/Output: [(1 89 9 66) 1]
Test Case: 446 | Input/Output: [(-70 -39 21 80) -70]
Test Case: 447 | Input/Output: [(12 14 42 71) 12]
Test Case: 448 | Input/Output: [(30 35 -18 43) -18]
Test Case: 449 | Input/Output: [(-5 -51 79 -89) -89]
Test Case: 450 | Input/Output: [(-55 -9 -16 18) -55]
Test Case: 451 | Input/Output: [(66 -52 -26 7) -52]
Test Case: 452 | Input/Output: [(-3 9 56 78) -3]
Test Case: 453 | Input/Output: [(40 100 84 97) 40]
Test Case: 454 | Input/Output: [(-45 -35 53 1) -45]
Test Case: 455 | Input/Output: [(-96 -32 47 39) -96]
Test Case: 456 | Input/Output: [(-38 87 -83 2) -83]
Test Case: 457 | Input/Output: [(-21 57 19 1) -21]
Test Case: 458 | Input/Output: [(-4 4 13 91) -4]
Test Case: 459 | Input/Output: [(54 100 -57 -77) -77]
Test Case: 460 | Input/Output: [(74 7 21 41) 7]
Test Case: 461 | Input/Output: [(19 5 -22 -82) -82]
Test Case: 462 | Input/Output: [(-2 -79 74 4) -79]
Test Case: 463 | Input/Output: [(79 70 -1 -82) -82]
Test Case: 464 | Input/Output: [(-55 -14 43 -4) -55]
Test Case: 465 | Input/Output: [(-17 99 -92 -61) -92]
Test Case: 466 | Input/Output: [(92 50 -34 -98) -98]
Test Case: 467 | Input/Output: [(14 35 53 -84) -84]
Test Case: 468 | Input/Output: [(-95 4 43 87) -95]
Test Case: 469 | Input/Output: [(68 66 -6 32) -6]
Test Case: 470 | Input/Output: [(1 51 38 40) 1]
Test Case: 471 | Input/Output: [(100 -13 -86 50) -86]
Test Case: 472 | Input/Output: [(50 -70 86 -52) -70]
Test Case: 473 | Input/Output: [(54 -74 39 -20) -74]
Test Case: 474 | Input/Output: [(59 -81 49 96) -81]
Test Case: 475 | Input/Output: [(-84 -48 40 -16) -84]
Test Case: 476 | Input/Output: [(-30 20 74 87) -30]
Test Case: 477 | Input/Output: [(63 -80 -69 -81) -81]
Test Case: 478 | Input/Output: [(-10 77 63 -66) -66]
Test Case: 479 | Input/Output: [(87 19 -53 6) -53]
Test Case: 480 | Input/Output: [(12 -83 -43 -56) -83]
Test Case: 481 | Input/Output: [(-50 68 -51 20) -51]
Test Case: 482 | Input/Output: [(57 63 56 -19) -19]
Test Case: 483 | Input/Output: [(67 -81 -33 -70) -81]
Test Case: 484 | Input/Output: [(-58 72 -56 -68) -68]
Test Case: 485 | Input/Output: [(84 61 -5 95) -5]
Test Case: 486 | Input/Output: [(4 7 65 -34) -34]
Test Case: 487 | Input/Output: [(-3 -77 -6 100) -77]
Test Case: 488 | Input/Output: [(-80 -88 -73 31) -88]
Test Case: 489 | Input/Output: [(32 -77 -98 89) -98]
Test Case: 490 | Input/Output: [(-66 20 53 -22) -66]
Test Case: 491 | Input/Output: [(72 -82 -13 -6) -82]
Test Case: 492 | Input/Output: [(-66 58 -74 76) -74]
Test Case: 493 | Input/Output: [(0 -59 73 -8) -59]
Test Case: 494 | Input/Output: [(-24 80 -45 64) -45]
Test Case: 495 | Input/Output: [(-49 76 56 11) -49]
Test Case: 496 | Input/Output: [(51 66 -56 -55) -56]
Test Case: 497 | Input/Output: [(-97 -35 79 -2) -97]
Test Case: 498 | Input/Output: [(41 -81 63 -50) -81]
Test Case: 499 | Input/Output: [(22 -66 -19 -95) -95]
Test Case: 500 | Input/Output: [(52 60 -41 -74) -74]
Test Case: 501 | Input/Output: [(20 96 -1 -87) -87]
Test Case: 502 | Input/Output: [(-60 66 91 -27) -60]
Test Case: 503 | Input/Output: [(4 60 -89 -28) -89]
Test Case: 504 | Input/Output: [(-52 -43 -71 -1) -71]
Test Case: 505 | Input/Output: [(27 -49 50 80) -49]
Test Case: 506 | Input/Output: [(-17 52 -54 -32) -54]
Test Case: 507 | Input/Output: [(85 1 -8 25) -8]
Test Case: 508 | Input/Output: [(5 18 -31 68) -31]
Test Case: 509 | Input/Output: [(-50 41 -8 -64) -64]
Test Case: 510 | Input/Output: [(52 -93 -81 61) -93]
Test Case: 511 | Input/Output: [(-95 54 -81 52) -95]
Test Case: 512 | Input/Output: [(-58 60 -86 28) -86]
Test Case: 513 | Input/Output: [(-28 -39 -92 -39) -92]
Test Case: 514 | Input/Output: [(-33 -21 -57 -80) -80]
Test Case: 515 | Input/Output: [(23 35 16 -66) -66]
Test Case: 516 | Input/Output: [(88 -98 12 50) -98]
Test Case: 517 | Input/Output: [(-96 36 41 -62) -96]
Test Case: 518 | Input/Output: [(-4 25 16 -77) -77]
Test Case: 519 | Input/Output: [(-86 13 -33 -94) -94]
Test Case: 520 | Input/Output: [(-35 -85 -28 -2) -85]
Test Case: 521 | Input/Output: [(99 -89 -65 73) -89]
Test Case: 522 | Input/Output: [(-66 11 46 77) -66]
Test Case: 523 | Input/Output: [(-6 77 -4 -69) -69]
Test Case: 524 | Input/Output: [(-68 50 -4 -46) -68]
Test Case: 525 | Input/Output: [(1 90 40 -47) -47]
Test Case: 526 | Input/Output: [(-87 26 70 45) -87]
Test Case: 527 | Input/Output: [(56 -53 -27 -13) -53]
Test Case: 528 | Input/Output: [(93 10 51 17) 10]
Test Case: 529 | Input/Output: [(64 6 -52 -28) -52]
Test Case: 530 | Input/Output: [(54 -51 53 -48) -51]
Test Case: 531 | Input/Output: [(-67 -5 -28 94) -67]
Test Case: 532 | Input/Output: [(6 21 35 -28) -28]
Test Case: 533 | Input/Output: [(-40 95 59 65) -40]
Test Case: 534 | Input/Output: [(75 70 -7 67) -7]
Test Case: 535 | Input/Output: [(-54 -17 -32 81) -54]
Test Case: 536 | Input/Output: [(-72 30 1 -91) -91]
Test Case: 537 | Input/Output: [(29 -95 -79 11) -95]
Test Case: 538 | Input/Output: [(58 -100 -18 -29) -100]
Test Case: 539 | Input/Output: [(-22 -31 -56 -23) -56]
Test Case: 540 | Input/Output: [(27 -23 36 58) -23]
Test Case: 541 | Input/Output: [(-95 -38 85 89) -95]
Test Case: 542 | Input/Output: [(72 86 -11 -48) -48]
Test Case: 543 | Input/Output: [(71 20 32 96) 20]
Test Case: 544 | Input/Output: [(-61 51 31 57) -61]
Test Case: 545 | Input/Output: [(-42 -71 -76 34) -76]
Test Case: 546 | Input/Output: [(-64 57 89 -48) -64]
Test Case: 547 | Input/Output: [(71 -57 21 -4) -57]
Test Case: 548 | Input/Output: [(3 28 94 15) 3]
Test Case: 549 | Input/Output: [(87 -67 -6 33) -67]
Test Case: 550 | Input/Output: [(-14 63 -37 -12) -37]
Test Case: 551 | Input/Output: [(-96 -62 66 -67) -96]
Test Case: 552 | Input/Output: [(42 46 75 57) 42]
Test Case: 553 | Input/Output: [(7 -10 50 43) -10]
Test Case: 554 | Input/Output: [(6 55 -98 29) -98]
Test Case: 555 | Input/Output: [(73 59 -92 -50) -92]
Test Case: 556 | Input/Output: [(21 -26 -29 -98) -98]
Test Case: 557 | Input/Output: [(67 -19 42 -3) -19]
Test Case: 558 | Input/Output: [(22 -66 61 -21) -66]
Test Case: 559 | Input/Output: [(-75 -39 -76 -75) -76]
Test Case: 560 | Input/Output: [(-55 -91 -15 77) -91]
Test Case: 561 | Input/Output: [(6 -90 75 82) -90]
Test Case: 562 | Input/Output: [(45 66 -19 22) -19]
Test Case: 563 | Input/Output: [(36 -5 -1 39) -5]
Test Case: 564 | Input/Output: [(-52 -31 32 10) -52]
Test Case: 565 | Input/Output: [(-85 -38 -83 57) -85]
Test Case: 566 | Input/Output: [(-97 27 -66 -80) -97]
Test Case: 567 | Input/Output: [(72 -78 -8 -81) -81]
Test Case: 568 | Input/Output: [(-18 76 79 -16) -18]
Test Case: 569 | Input/Output: [(-95 -65 52 -47) -95]
Test Case: 570 | Input/Output: [(-89 99 57 -82) -89]
Test Case: 571 | Input/Output: [(96 33 57 -94) -94]
Test Case: 572 | Input/Output: [(9 65 -29 -79) -79]
Test Case: 573 | Input/Output: [(-96 63 -46 18) -96]
Test Case: 574 | Input/Output: [(83 54 32 -76) -76]
Test Case: 575 | Input/Output: [(-54 35 96 -11) -54]
Test Case: 576 | Input/Output: [(82 33 89 50) 33]
Test Case: 577 | Input/Output: [(29 35 72 -61) -61]
Test Case: 578 | Input/Output: [(35 74 -57 -3) -57]
Test Case: 579 | Input/Output: [(-36 31 -18 -88) -88]
Test Case: 580 | Input/Output: [(74 -74 -97 -29) -97]
Test Case: 581 | Input/Output: [(64 -99 -46 90) -99]
Test Case: 582 | Input/Output: [(60 70 -70 -52) -70]
Test Case: 583 | Input/Output: [(-60 -48 -57 -10) -60]
Test Case: 584 | Input/Output: [(54 94 -94 12) -94]
Test Case: 585 | Input/Output: [(71 40 -29 -82) -82]
Test Case: 586 | Input/Output: [(37 -5 2 -77) -77]
Test Case: 587 | Input/Output: [(-87 -16 24 -54) -87]
Test Case: 588 | Input/Output: [(-85 45 83 -93) -93]
Test Case: 589 | Input/Output: [(55 -69 -1 -33) -69]
Test Case: 590 | Input/Output: [(21 -64 19 20) -64]
Test Case: 591 | Input/Output: [(61 -33 71 -30) -33]
Test Case: 592 | Input/Output: [(20 8 -25 69) -25]
Test Case: 593 | Input/Output: [(-65 -41 53 27) -65]
Test Case: 594 | Input/Output: [(-25 -15 -97 31) -97]
Test Case: 595 | Input/Output: [(-65 -67 56 -90) -90]
Test Case: 596 | Input/Output: [(-13 -12 30 38) -13]
Test Case: 597 | Input/Output: [(53 -74 -66 -22) -74]
Test Case: 598 | Input/Output: [(22 -44 49 -100) -100]
Test Case: 599 | Input/Output: [(0 -12 49 -37) -37]
Test Case: 600 | Input/Output: [(92 52 -6 4) -6]
Test Case: 601 | Input/Output: [(-85 5 -74 60) -85]
Test Case: 602 | Input/Output: [(90 -99 -53 -29) -99]
Test Case: 603 | Input/Output: [(-63 -3 86 61) -63]
Test Case: 604 | Input/Output: [(53 79 -23 -45) -45]
Test Case: 605 | Input/Output: [(79 -59 90 77) -59]
Test Case: 606 | Input/Output: [(-6 -79 8 22) -79]
Test Case: 607 | Input/Output: [(-51 -96 45 34) -96]
Test Case: 608 | Input/Output: [(59 -100 18 -67) -100]
Test Case: 609 | Input/Output: [(78 -19 86 -79) -79]
Test Case: 610 | Input/Output: [(-43 13 26 -79) -79]
Test Case: 611 | Input/Output: [(-23 -50 23 -94) -94]
Test Case: 612 | Input/Output: [(6 80 98 27) 6]
Test Case: 613 | Input/Output: [(-30 13 95 -52) -52]
Test Case: 614 | Input/Output: [(5 28 -9 -30) -30]
Test Case: 615 | Input/Output: [(-84 70 -46 -15) -84]
Test Case: 616 | Input/Output: [(94 52 -68 -68) -68]
Test Case: 617 | Input/Output: [(77 -11 16 -65) -65]
Test Case: 618 | Input/Output: [(-69 -73 -82 91) -82]
Test Case: 619 | Input/Output: [(-57 -61 67 62) -61]
Test Case: 620 | Input/Output: [(-3 -54 35 12) -54]
Test Case: 621 | Input/Output: [(-49 64 -52 -80) -80]
Test Case: 622 | Input/Output: [(-7 -24 -16 83) -24]
Test Case: 623 | Input/Output: [(-35 -38 -71 41) -71]
Test Case: 624 | Input/Output: [(30 26 -99 -87) -99]
Test Case: 625 | Input/Output: [(-53 -54 51 -68) -68]
Test Case: 626 | Input/Output: [(9 1 65 -56) -56]
Test Case: 627 | Input/Output: [(76 -98 -48 -25) -98]
Test Case: 628 | Input/Output: [(-90 58 84 79) -90]
Test Case: 629 | Input/Output: [(32 46 52 -47) -47]
Test Case: 630 | Input/Output: [(31 -84 -62 -6) -84]
Test Case: 631 | Input/Output: [(37 51 54 71) 37]
Test Case: 632 | Input/Output: [(12 -27 -97 -58) -97]
Test Case: 633 | Input/Output: [(25 -76 -67 -78) -78]
Test Case: 634 | Input/Output: [(-40 43 -10 21) -40]
Test Case: 635 | Input/Output: [(-98 -39 67 -16) -98]
Test Case: 636 | Input/Output: [(-91 89 93 -62) -91]
Test Case: 637 | Input/Output: [(-83 64 -34 94) -83]
Test Case: 638 | Input/Output: [(-92 -2 59 -12) -92]
Test Case: 639 | Input/Output: [(-97 -99 -93 -12) -99]
Test Case: 640 | Input/Output: [(-71 -28 -54 -16) -71]
Test Case: 641 | Input/Output: [(-51 -14 98 -19) -51]
Test Case: 642 | Input/Output: [(-73 83 -68 52) -73]
Test Case: 643 | Input/Output: [(-31 49 -46 44) -46]
Test Case: 644 | Input/Output: [(81 11 -95 58) -95]
Test Case: 645 | Input/Output: [(-90 -87 42 61) -90]
Test Case: 646 | Input/Output: [(-49 19 78 51) -49]
Test Case: 647 | Input/Output: [(-28 37 -36 -77) -77]
Test Case: 648 | Input/Output: [(-36 54 -53 66) -53]
Test Case: 649 | Input/Output: [(3 17 -69 -59) -69]
Test Case: 650 | Input/Output: [(38 9 -98 4) -98]
Test Case: 651 | Input/Output: [(-6 -100 -11 -33) -100]
Test Case: 652 | Input/Output: [(-52 -80 34 -98) -98]
Test Case: 653 | Input/Output: [(-90 85 -64 80) -90]
Test Case: 654 | Input/Output: [(78 -61 -92 -83) -92]
Test Case: 655 | Input/Output: [(-4 12 42 -42) -42]
Test Case: 656 | Input/Output: [(99 27 25 9) 9]
Test Case: 657 | Input/Output: [(-24 9 -71 -58) -71]
Test Case: 658 | Input/Output: [(19 -75 86 -34) -75]
Test Case: 659 | Input/Output: [(-41 -91 13 6) -91]
Test Case: 660 | Input/Output: [(-85 -7 -87 -37) -87]
Test Case: 661 | Input/Output: [(-75 -86 -51 -23) -86]
Test Case: 662 | Input/Output: [(60 25 -40 -94) -94]
Test Case: 663 | Input/Output: [(78 56 39 24) 24]
Test Case: 664 | Input/Output: [(-37 -79 -90 -49) -90]
Test Case: 665 | Input/Output: [(-41 15 -71 -83) -83]
Test Case: 666 | Input/Output: [(-31 -57 40 76) -57]
Test Case: 667 | Input/Output: [(30 -15 75 -77) -77]
Test Case: 668 | Input/Output: [(78 46 -24 -59) -59]
Test Case: 669 | Input/Output: [(-57 37 -45 55) -57]
Test Case: 670 | Input/Output: [(-41 26 -16 -95) -95]
Test Case: 671 | Input/Output: [(-50 76 -40 -63) -63]
Test Case: 672 | Input/Output: [(-64 -79 64 59) -79]
Test Case: 673 | Input/Output: [(92 26 -14 71) -14]
Test Case: 674 | Input/Output: [(28 -87 -65 72) -87]
Test Case: 675 | Input/Output: [(60 53 -21 -12) -21]
Test Case: 676 | Input/Output: [(44 59 -6 33) -6]
Test Case: 677 | Input/Output: [(-51 93 71 -29) -51]
Test Case: 678 | Input/Output: [(-9 47 47 -1) -9]
Test Case: 679 | Input/Output: [(47 -1 -92 -57) -92]
Test Case: 680 | Input/Output: [(94 21 -81 29) -81]
Test Case: 681 | Input/Output: [(-4 45 -41 60) -41]
Test Case: 682 | Input/Output: [(73 33 50 -77) -77]
Test Case: 683 | Input/Output: [(-26 -11 -55 -67) -67]
Test Case: 684 | Input/Output: [(8 84 56 -99) -99]
Test Case: 685 | Input/Output: [(79 83 -14 96) -14]
Test Case: 686 | Input/Output: [(71 -86 29 -75) -86]
Test Case: 687 | Input/Output: [(9 -79 88 -21) -79]
Test Case: 688 | Input/Output: [(-44 82 9 -70) -70]
Test Case: 689 | Input/Output: [(57 -55 -72 38) -72]
Test Case: 690 | Input/Output: [(1 93 -12 -72) -72]
Test Case: 691 | Input/Output: [(99 69 31 56) 31]
Test Case: 692 | Input/Output: [(81 -52 -97 25) -97]
Test Case: 693 | Input/Output: [(93 80 41 -46) -46]
Test Case: 694 | Input/Output: [(-93 50 13 57) -93]
Test Case: 695 | Input/Output: [(-96 83 60 83) -96]
Test Case: 696 | Input/Output: [(55 -86 98 -80) -86]
Test Case: 697 | Input/Output: [(-12 58 -98 1) -98]
Test Case: 698 | Input/Output: [(-13 -97 -14 -75) -97]
Test Case: 699 | Input/Output: [(-81 98 76 64) -81]
Test Case: 700 | Input/Output: [(25 54 96 -83) -83]
Test Case: 701 | Input/Output: [(-87 89 28 61) -87]
Test Case: 702 | Input/Output: [(23 -92 50 88) -92]
Test Case: 703 | Input/Output: [(88 43 -89 -51) -89]
Test Case: 704 | Input/Output: [(-9 -49 92 14) -49]
Test Case: 705 | Input/Output: [(-34 -29 80 77) -34]
Test Case: 706 | Input/Output: [(-87 -52 39 -16) -87]
Test Case: 707 | Input/Output: [(81 -28 13 -48) -48]
Test Case: 708 | Input/Output: [(40 56 69 30) 30]
Test Case: 709 | Input/Output: [(-31 -61 -48 -56) -61]
Test Case: 710 | Input/Output: [(-57 85 96 84) -57]
Test Case: 711 | Input/Output: [(-2 -82 -95 55) -95]
Test Case: 712 | Input/Output: [(-33 -28 -81 76) -81]
Test Case: 713 | Input/Output: [(-9 31 -89 21) -89]
Test Case: 714 | Input/Output: [(28 69 74 54) 28]
Test Case: 715 | Input/Output: [(-86 -70 100 -27) -86]
Test Case: 716 | Input/Output: [(-26 58 -2 -75) -75]
Test Case: 717 | Input/Output: [(-96 -47 -24 -50) -96]
Test Case: 718 | Input/Output: [(-90 91 64 44) -90]
Test Case: 719 | Input/Output: [(-59 74 -66 64) -66]
Test Case: 720 | Input/Output: [(10 -46 -99 -70) -99]
Test Case: 721 | Input/Output: [(-68 12 95 77) -68]
Test Case: 722 | Input/Output: [(77 -75 -24 35) -75]
Test Case: 723 | Input/Output: [(-100 -48 10 -67) -100]
Test Case: 724 | Input/Output: [(-80 -80 98 77) -80]
Test Case: 725 | Input/Output: [(80 -89 90 -46) -89]
Test Case: 726 | Input/Output: [(-50 -82 53 84) -82]
Test Case: 727 | Input/Output: [(34 -26 11 -70) -70]
Test Case: 728 | Input/Output: [(-39 78 12 83) -39]
Test Case: 729 | Input/Output: [(-67 -84 -31 -46) -84]
Test Case: 730 | Input/Output: [(-100 17 48 -21) -100]
Test Case: 731 | Input/Output: [(27 82 36 -100) -100]
Test Case: 732 | Input/Output: [(-93 67 -66 83) -93]
Test Case: 733 | Input/Output: [(-34 41 -38 82) -38]
Test Case: 734 | Input/Output: [(93 -44 18 90) -44]
Test Case: 735 | Input/Output: [(-56 -28 82 -35) -56]
Test Case: 736 | Input/Output: [(91 -52 2 74) -52]
Test Case: 737 | Input/Output: [(-62 -84 81 -78) -84]
Test Case: 738 | Input/Output: [(79 20 17 77) 17]
Test Case: 739 | Input/Output: [(-43 -28 -79 -19) -79]
Test Case: 740 | Input/Output: [(-54 -82 4 -17) -82]
Test Case: 741 | Input/Output: [(23 54 -11 57) -11]
Test Case: 742 | Input/Output: [(-15 -24 45 72) -24]
Test Case: 743 | Input/Output: [(48 -95 47 9) -95]
Test Case: 744 | Input/Output: [(33 81 -62 94) -62]
Test Case: 745 | Input/Output: [(-58 -85 53 98) -85]
Test Case: 746 | Input/Output: [(52 -9 -12 -78) -78]
Test Case: 747 | Input/Output: [(31 -61 -35 -9) -61]
Test Case: 748 | Input/Output: [(76 -30 57 86) -30]
Test Case: 749 | Input/Output: [(-20 91 60 15) -20]
Test Case: 750 | Input/Output: [(99 97 77 86) 77]
Test Case: 751 | Input/Output: [(68 78 35 100) 35]
Test Case: 752 | Input/Output: [(-17 -79 84 69) -79]
Test Case: 753 | Input/Output: [(-18 42 44 13) -18]
Test Case: 754 | Input/Output: [(-21 92 -75 -78) -78]
Test Case: 755 | Input/Output: [(29 15 -55 -20) -55]
Test Case: 756 | Input/Output: [(8 -80 55 -60) -80]
Test Case: 757 | Input/Output: [(-30 -14 -34 76) -34]
Test Case: 758 | Input/Output: [(23 26 -25 65) -25]
Test Case: 759 | Input/Output: [(19 92 31 -46) -46]
Test Case: 760 | Input/Output: [(-5 40 -56 63) -56]
Test Case: 761 | Input/Output: [(-36 52 -36 -85) -85]
Test Case: 762 | Input/Output: [(22 39 2 -16) -16]
Test Case: 763 | Input/Output: [(65 -72 -11 -49) -72]
Test Case: 764 | Input/Output: [(-14 28 -40 -11) -40]
Test Case: 765 | Input/Output: [(-28 49 42 -47) -47]
Test Case: 766 | Input/Output: [(52 -25 24 -96) -96]
Test Case: 767 | Input/Output: [(-68 -44 23 45) -68]
Test Case: 768 | Input/Output: [(-48 -90 -74 97) -90]
Test Case: 769 | Input/Output: [(52 47 67 -96) -96]
Test Case: 770 | Input/Output: [(19 91 53 -50) -50]
Test Case: 771 | Input/Output: [(24 -15 87 -71) -71]
Test Case: 772 | Input/Output: [(64 -1 -84 82) -84]
Test Case: 773 | Input/Output: [(66 49 -89 93) -89]
Test Case: 774 | Input/Output: [(-91 74 62 -11) -91]
Test Case: 775 | Input/Output: [(-66 -86 73 48) -86]
Test Case: 776 | Input/Output: [(-10 -49 73 -59) -59]
Test Case: 777 | Input/Output: [(-64 -13 -23 67) -64]
Test Case: 778 | Input/Output: [(-97 93 28 29) -97]
Test Case: 779 | Input/Output: [(28 90 50 14) 14]
Test Case: 780 | Input/Output: [(-82 -39 68 60) -82]
Test Case: 781 | Input/Output: [(-38 -82 98 -99) -99]
Test Case: 782 | Input/Output: [(-83 94 65 94) -83]
Test Case: 783 | Input/Output: [(61 25 -13 42) -13]
Test Case: 784 | Input/Output: [(46 22 -45 -62) -62]
Test Case: 785 | Input/Output: [(58 59 -49 74) -49]
Test Case: 786 | Input/Output: [(74 -40 0 68) -40]
Test Case: 787 | Input/Output: [(9 34 4 -18) -18]
Test Case: 788 | Input/Output: [(62 -90 23 79) -90]
Test Case: 789 | Input/Output: [(-84 -17 -60 4) -84]
Test Case: 790 | Input/Output: [(2 -41 78 -10) -41]
Test Case: 791 | Input/Output: [(87 65 65 56) 56]
Test Case: 792 | Input/Output: [(-2 99 32 76) -2]
Test Case: 793 | Input/Output: [(62 66 -30 -32) -32]
Test Case: 794 | Input/Output: [(27 55 -45 47) -45]
Test Case: 795 | Input/Output: [(-13 95 -42 51) -42]
Test Case: 796 | Input/Output: [(61 -37 -90 14) -90]
Test Case: 797 | Input/Output: [(0 -6 -72 -9) -72]
Test Case: 798 | Input/Output: [(-81 -68 20 -19) -81]
Test Case: 799 | Input/Output: [(68 -22 42 -14) -22]
Test Case: 800 | Input/Output: [(5 57 31 -16) -16]
Test Case: 801 | Input/Output: [(-7 71 11 76) -7]
Test Case: 802 | Input/Output: [(15 -41 -92 -87) -92]
Test Case: 803 | Input/Output: [(-72 -8 50 -80) -80]
Test Case: 804 | Input/Output: [(-75 16 -3 78) -75]
Test Case: 805 | Input/Output: [(81 82 -10 71) -10]
Test Case: 806 | Input/Output: [(-47 47 -80 23) -80]
Test Case: 807 | Input/Output: [(66 18 2 -21) -21]
Test Case: 808 | Input/Output: [(-25 18 -92 -85) -92]
Test Case: 809 | Input/Output: [(-38 -79 -62 -45) -79]
Test Case: 810 | Input/Output: [(45 -83 4 67) -83]
Test Case: 811 | Input/Output: [(-71 -24 -19 -8) -71]
Test Case: 812 | Input/Output: [(52 -13 -7 -52) -52]
Test Case: 813 | Input/Output: [(-63 55 -28 42) -63]
Test Case: 814 | Input/Output: [(-69 17 46 -42) -69]
Test Case: 815 | Input/Output: [(36 -26 3 22) -26]
Test Case: 816 | Input/Output: [(2 74 1 64) 1]
Test Case: 817 | Input/Output: [(-76 -62 8 80) -76]
Test Case: 818 | Input/Output: [(100 61 -53 -9) -53]
Test Case: 819 | Input/Output: [(-65 16 76 13) -65]
Test Case: 820 | Input/Output: [(79 75 34 -67) -67]
Test Case: 821 | Input/Output: [(-8 99 65 75) -8]
Test Case: 822 | Input/Output: [(-7 26 83 -76) -76]
Test Case: 823 | Input/Output: [(-27 -43 10 56) -43]
Test Case: 824 | Input/Output: [(-75 99 -22 81) -75]
Test Case: 825 | Input/Output: [(-60 -24 1 0) -60]
Test Case: 826 | Input/Output: [(5 95 66 100) 5]
Test Case: 827 | Input/Output: [(6 57 -93 26) -93]
Test Case: 828 | Input/Output: [(52 -87 83 64) -87]
Test Case: 829 | Input/Output: [(-94 66 -54 -36) -94]
Test Case: 830 | Input/Output: [(-95 -25 65 84) -95]
Test Case: 831 | Input/Output: [(-27 35 11 43) -27]
Test Case: 832 | Input/Output: [(0 -73 -81 -2) -81]
Test Case: 833 | Input/Output: [(98 -20 22 -75) -75]
Test Case: 834 | Input/Output: [(51 68 -32 -96) -96]
Test Case: 835 | Input/Output: [(-71 -81 52 35) -81]
Test Case: 836 | Input/Output: [(89 34 -27 3) -27]
Test Case: 837 | Input/Output: [(-20 63 -15 21) -20]
Test Case: 838 | Input/Output: [(41 -4 -10 89) -10]
Test Case: 839 | Input/Output: [(-48 73 -13 -20) -48]
Test Case: 840 | Input/Output: [(-15 -31 -33 -72) -72]
Test Case: 841 | Input/Output: [(98 -98 -5 -33) -98]
Test Case: 842 | Input/Output: [(67 41 -61 68) -61]
Test Case: 843 | Input/Output: [(22 99 -28 53) -28]
Test Case: 844 | Input/Output: [(6 -81 -22 21) -81]
Test Case: 845 | Input/Output: [(-19 31 -16 70) -19]
Test Case: 846 | Input/Output: [(26 32 87 82) 26]
Test Case: 847 | Input/Output: [(-44 46 100 94) -44]
Test Case: 848 | Input/Output: [(-76 -21 -52 17) -76]
Test Case: 849 | Input/Output: [(-39 -9 35 -26) -39]
Test Case: 850 | Input/Output: [(4 -39 59 14) -39]
Test Case: 851 | Input/Output: [(41 87 75 42) 41]
Test Case: 852 | Input/Output: [(-20 -15 96 29) -20]
Test Case: 853 | Input/Output: [(-37 -37 16 -8) -37]
Test Case: 854 | Input/Output: [(-69 -93 -5 67) -93]
Test Case: 855 | Input/Output: [(90 -22 6 -1) -22]
Test Case: 856 | Input/Output: [(-60 40 -80 -100) -100]
Test Case: 857 | Input/Output: [(88 21 37 99) 21]
Test Case: 858 | Input/Output: [(39 80 -44 21) -44]
Test Case: 859 | Input/Output: [(-5 70 -42 51) -42]
Test Case: 860 | Input/Output: [(87 8 -2 86) -2]
Test Case: 861 | Input/Output: [(-18 -45 -51 67) -51]
Test Case: 862 | Input/Output: [(-24 89 49 60) -24]
Test Case: 863 | Input/Output: [(-66 -27 46 -27) -66]
Test Case: 864 | Input/Output: [(-34 -54 -3 47) -54]
Test Case: 865 | Input/Output: [(29 -46 -53 -62) -62]
Test Case: 866 | Input/Output: [(59 11 -34 -68) -68]
Test Case: 867 | Input/Output: [(91 91 75 30) 30]
Test Case: 868 | Input/Output: [(-94 4 36 67) -94]
Test Case: 869 | Input/Output: [(-88 38 -31 -2) -88]
Test Case: 870 | Input/Output: [(-4 14 -30 22) -30]
Test Case: 871 | Input/Output: [(-47 31 17 -88) -88]
Test Case: 872 | Input/Output: [(83 91 -59 100) -59]
Test Case: 873 | Input/Output: [(67 18 -98 -61) -98]
Test Case: 874 | Input/Output: [(-58 -95 -2 56) -95]
Test Case: 875 | Input/Output: [(91 -81 -50 -49) -81]
Test Case: 876 | Input/Output: [(65 -96 38 81) -96]
Test Case: 877 | Input/Output: [(27 -93 -76 -94) -94]
Test Case: 878 | Input/Output: [(-59 49 58 -79) -79]
Test Case: 879 | Input/Output: [(-16 45 -6 -70) -70]
Test Case: 880 | Input/Output: [(75 -37 -76 3) -76]
Test Case: 881 | Input/Output: [(8 -74 -48 -44) -74]
Test Case: 882 | Input/Output: [(-36 -94 -66 85) -94]
Test Case: 883 | Input/Output: [(48 44 -64 31) -64]
Test Case: 884 | Input/Output: [(17 -80 99 -46) -80]
Test Case: 885 | Input/Output: [(83 -15 -58 75) -58]
Test Case: 886 | Input/Output: [(-83 -57 88 10) -83]
Test Case: 887 | Input/Output: [(12 95 60 5) 5]
Test Case: 888 | Input/Output: [(47 35 98 -66) -66]
Test Case: 889 | Input/Output: [(56 32 3 71) 3]
Test Case: 890 | Input/Output: [(37 99 34 42) 34]
Test Case: 891 | Input/Output: [(-5 2 38 58) -5]
Test Case: 892 | Input/Output: [(-1 58 98 -81) -81]
Test Case: 893 | Input/Output: [(-15 -40 -39 -60) -60]
Test Case: 894 | Input/Output: [(-31 17 -56 65) -56]
Test Case: 895 | Input/Output: [(2 -14 -33 -90) -90]
Test Case: 896 | Input/Output: [(-93 61 -24 9) -93]
Test Case: 897 | Input/Output: [(56 89 29 47) 29]
Test Case: 898 | Input/Output: [(46 59 -26 -62) -62]
Test Case: 899 | Input/Output: [(-12 23 96 41) -12]
Test Case: 900 | Input/Output: [(-43 -41 -25 30) -43]
Test Case: 901 | Input/Output: [(-28 85 97 47) -28]
Test Case: 902 | Input/Output: [(-54 92 -89 56) -89]
Test Case: 903 | Input/Output: [(64 -21 39 -85) -85]
Test Case: 904 | Input/Output: [(-49 -12 -70 -35) -70]
Test Case: 905 | Input/Output: [(29 -69 75 -81) -81]
Test Case: 906 | Input/Output: [(-68 39 -98 81) -98]
Test Case: 907 | Input/Output: [(-21 -96 -82 -48) -96]
Test Case: 908 | Input/Output: [(34 10 -79 -7) -79]
Test Case: 909 | Input/Output: [(40 -25 -98 -25) -98]
Test Case: 910 | Input/Output: [(-62 21 11 -84) -84]
Test Case: 911 | Input/Output: [(-32 81 45 22) -32]
Test Case: 912 | Input/Output: [(-99 45 -46 50) -99]
Test Case: 913 | Input/Output: [(13 83 63 51) 13]
Test Case: 914 | Input/Output: [(-15 -68 -31 -37) -68]
Test Case: 915 | Input/Output: [(-74 92 4 -63) -74]
Test Case: 916 | Input/Output: [(-89 -13 -61 92) -89]
Test Case: 917 | Input/Output: [(66 46 94 -13) -13]
Test Case: 918 | Input/Output: [(-27 82 -6 53) -27]
Test Case: 919 | Input/Output: [(-12 88 -38 -69) -69]
Test Case: 920 | Input/Output: [(-7 79 -87 57) -87]
Test Case: 921 | Input/Output: [(-10 -99 -88 20) -99]
Test Case: 922 | Input/Output: [(-22 -77 -67 26) -77]
Test Case: 923 | Input/Output: [(-41 65 43 -67) -67]
Test Case: 924 | Input/Output: [(-17 -43 -87 -96) -96]
Test Case: 925 | Input/Output: [(-26 -18 -46 -22) -46]
Test Case: 926 | Input/Output: [(-74 78 22 55) -74]
Test Case: 927 | Input/Output: [(87 -58 20 -88) -88]
Test Case: 928 | Input/Output: [(-83 63 53 22) -83]
Test Case: 929 | Input/Output: [(-76 -80 29 -44) -80]
Test Case: 930 | Input/Output: [(-47 -42 11 -43) -47]
Test Case: 931 | Input/Output: [(-36 41 92 -26) -36]
Test Case: 932 | Input/Output: [(45 12 -46 -56) -56]
Test Case: 933 | Input/Output: [(26 -19 -10 49) -19]
Test Case: 934 | Input/Output: [(5 -28 -52 -20) -52]
Test Case: 935 | Input/Output: [(15 -40 69 42) -40]
Test Case: 936 | Input/Output: [(43 11 94 -53) -53]
Test Case: 937 | Input/Output: [(62 -30 -37 -59) -59]
Test Case: 938 | Input/Output: [(64 21 53 30) 21]
Test Case: 939 | Input/Output: [(-45 -46 45 -92) -92]
Test Case: 940 | Input/Output: [(72 -23 0 -11) -23]
Test Case: 941 | Input/Output: [(-1 41 -24 -58) -58]
Test Case: 942 | Input/Output: [(9 -68 16 -43) -68]
Test Case: 943 | Input/Output: [(31 -52 -20 39) -52]
Test Case: 944 | Input/Output: [(73 60 92 61) 60]
Test Case: 945 | Input/Output: [(80 23 -35 -63) -63]
Test Case: 946 | Input/Output: [(80 57 -56 40) -56]
Test Case: 947 | Input/Output: [(40 -13 29 -90) -90]
Test Case: 948 | Input/Output: [(-6 -55 -31 -55) -55]
Test Case: 949 | Input/Output: [(-73 92 -14 38) -73]
Test Case: 950 | Input/Output: [(92 58 19 -65) -65]
Test Case: 951 | Input/Output: [(12 -3 -4 2) -4]
Test Case: 952 | Input/Output: [(58 25 -60 13) -60]
Test Case: 953 | Input/Output: [(-49 -21 -93 -54) -93]
Test Case: 954 | Input/Output: [(65 -90 21 -71) -90]
Test Case: 955 | Input/Output: [(-4 48 -64 55) -64]
Test Case: 956 | Input/Output: [(-1 -15 0 -76) -76]
Test Case: 957 | Input/Output: [(-47 -59 -39 32) -59]
Test Case: 958 | Input/Output: [(-45 -85 -12 39) -85]
Test Case: 959 | Input/Output: [(-64 85 -29 -35) -64]
Test Case: 960 | Input/Output: [(-13 33 -88 -7) -88]
Test Case: 961 | Input/Output: [(-35 -35 32 30) -35]
Test Case: 962 | Input/Output: [(-12 -76 39 -92) -92]
Test Case: 963 | Input/Output: [(14 26 -22 66) -22]
Test Case: 964 | Input/Output: [(-61 51 -46 98) -61]
Test Case: 965 | Input/Output: [(90 -5 -46 -85) -85]
Test Case: 966 | Input/Output: [(-58 27 -85 29) -85]
Test Case: 967 | Input/Output: [(-97 27 -96 36) -97]
Test Case: 968 | Input/Output: [(38 2 -70 -9) -70]
Test Case: 969 | Input/Output: [(25 -33 77 -25) -33]
Test Case: 970 | Input/Output: [(41 -87 53 55) -87]
Test Case: 971 | Input/Output: [(44 -35 30 -20) -35]
Test Case: 972 | Input/Output: [(-100 84 61 85) -100]
Test Case: 973 | Input/Output: [(-2 -36 6 -56) -56]
Test Case: 974 | Input/Output: [(90 5 -100 14) -100]
Test Case: 975 | Input/Output: [(26 27 -28 -56) -56]
Test Case: 976 | Input/Output: [(-15 -6 -31 9) -31]
Test Case: 977 | Input/Output: [(48 16 -82 15) -82]
Test Case: 978 | Input/Output: [(38 -97 -92 -82) -97]
Test Case: 979 | Input/Output: [(-36 -11 -75 -1) -75]
Test Case: 980 | Input/Output: [(44 -49 -59 22) -59]
Test Case: 981 | Input/Output: [(-92 -72 31 48) -92]
Test Case: 982 | Input/Output: [(71 33 32 50) 32]
Test Case: 983 | Input/Output: [(-21 1 30 3) -21]
Test Case: 984 | Input/Output: [(-88 66 54 -56) -88]
Test Case: 985 | Input/Output: [(-49 67 3 -41) -49]
Test Case: 986 | Input/Output: [(-15 -15 99 79) -15]
Test Case: 987 | Input/Output: [(-95 80 43 -66) -95]
Test Case: 988 | Input/Output: [(-90 -50 -29 99) -90]
Test Case: 989 | Input/Output: [(-53 -48 -78 -6) -78]
Test Case: 990 | Input/Output: [(69 70 72 86) 69]
Test Case: 991 | Input/Output: [(-26 -12 35 5) -26]
Test Case: 992 | Input/Output: [(15 20 -89 43) -89]
Test Case: 993 | Input/Output: [(57 -12 -53 -4) -53]
Test Case: 994 | Input/Output: [(-1 0 -42 -10) -42]
Test Case: 995 | Input/Output: [(-85 96 82 -13) -85]
Test Case: 996 | Input/Output: [(-63 -82 -95 -43) -95]
Test Case: 997 | Input/Output: [(-78 11 -8 42) -78]
Test Case: 998 | Input/Output: [(-48 -26 -20 67) -48]
Test Case: 999 | Input/Output: [(-26 28 45 46) -26]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -57 10 18 -114 -71 -13 127 -17 -8 40 28 85 94 120 98 59
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[37 22 37 37] 22] [[-2 -2 -2 -87] -87] [[-39 -39 -39 2] -39] [[100 100 23 100] 23] [[66 66 84 66] 66] [[-87 -87 -87 22] -87] [[-54 5 5 5] -54] [[57 -19 57 57] -19] [[-27 55 55 55] -27] [[94 42 94 94] 42] [(19 19 19 19) 19] [(-57 -57 -57 -57) -57] [(22 22 22 22) 22] [(-52 -52 -52 -52) -52] [(72 72 72 72) 72] [(6 76 27 12) 6] [(28 0 5 31) 0] [(57 68 89 83) 57] [(90 34 81 95) 34] [(91 40 39 97) 39] [(54 35 24 37) 24] [(94 85 2 78) 2] [(96 93 10 38) 10] [(6 89 50 62) 6] [(83 91 77 21) 21] [(50 66 26 49) 26] [(56 81 96 66) 56] [(16 8 37 34) 8] [(55 26 45 12) 12] [(4 77 16 46) 4] [(50 65 7 24) 7] [(15 62 68 4) 4] [(23 39 71 90) 23] [(39 69 46 59) 39] [(4 16 96 76) 4] [(-85 87 78 69) -85] [(65 25 16 -100) -100] [(-51 4 -46 -90) -90] [(20 47 30 36) 20] [(71 60 -8 -80) -80] [(24 17 -62 -76) -76] [(17 -73 6 83) -73] [(-9 -60 49 -97) -97] [(88 -49 66 -12) -49] [(-70 91 86 -55) -70] [(35 -64 88 90) -64] [(-66 -23 -29 40) -66] [(-42 86 73 82) -42] [(9 -78 -88 87) -88] [(-27 -6 3 52) -27] [(-69 -7 -59 -2) -69] [(-76 -40 61 -39) -76] [(-14 -9 46 6) -14] [(41 77 61 70) 41] [(51 83 1 72) 1] [(-94 -85 61 -58) -94] [(-19 -46 -45 -21) -46] [(21 76 23 -4) -4] [(-32 -81 -37 -72) -81] [(4 68 -58 83) -58] [(89 98 -38 -41) -41] [(-12 -58 52 9) -58] [(-55 -34 -5 95) -55] [(31 40 90 15) 15] [(-77 68 28 61) -77] [(-51 97 -19 87) -51] [(38 -39 -48 -84) -84] [(13 35 34 -65) -65] [(-61 20 19 14) -61] [(2 -46 55 -30) -46] [(13 36 -39 -49) -49] [(28 97 5 48) 5] [(71 6 -97 -22) -97] [(-61 86 -32 -55) -61] [(29 -23 -31 -26) -31] [(-22 -90 73 -15) -90] [(40 -55 51 47) -55] [(67 14 52 50) 14] [(63 15 41 -67) -67] [(76 11 87 94) 11] [(-98 7 15 -66) -98] [(-19 -10 64 65) -19] [(-15 14 -19 28) -19] [(83 76 46 61) 46] [(46 91 99 -90) -90] [(13 -2 -82 20) -82] [(-69 98 -57 -7) -69] [(23 6 -98 72) -98] [(-75 -67 -33 6) -75] [(93 -9 -72 -1) -72] [(92 28 90 6) 6] [(88 -7 20 -72) -72] [(-87 -9 54 72) -87] [(-75 -39 18 -4) -75] [(-52 73 22 28) -52])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 22                  | Program output: 22                 
Correct output: -87                 | Program output: -2                 
Correct output: -39                 | Program output: -39                
Correct output: 23                  | Program output: 100                
Correct output: 66                  | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 5                  
Correct output: -19                 | Program output: -19                
Correct output: -27                 | Program output: 55                 
Correct output: 42                  | Program output: 42                 
Correct output: 19                  | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: 22                  | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: 72                  | Program output: 72                 
Correct output: 6                   | Program output: 76                 
Correct output: 0                   | Program output: 0                  
Correct output: 57                  | Program output: 68                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 40                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 85                 
Correct output: 10                  | Program output: 93                 
Correct output: 6                   | Program output: 89                 
Correct output: 21                  | Program output: 91                 
Correct output: 26                  | Program output: 66                 
Correct output: 56                  | Program output: 81                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 26                 
Correct output: 4                   | Program output: 77                 
Correct output: 7                   | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 23                  | Program output: 39                 
Correct output: 39                  | Program output: 69                 
Correct output: 4                   | Program output: 16                 
Correct output: -85                 | Program output: 87                 
Correct output: -100                | Program output: 25                 
Correct output: -90                 | Program output: 4                  
Correct output: 20                  | Program output: 47                 
Correct output: -80                 | Program output: 60                 
Correct output: -76                 | Program output: 17                 
Correct output: -73                 | Program output: -73                
Correct output: -97                 | Program output: -60                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -23                
Correct output: -42                 | Program output: 86                 
Correct output: -88                 | Program output: -78                
Correct output: -27                 | Program output: -6                 
Correct output: -69                 | Program output: -7                 
Correct output: -76                 | Program output: -40                
Correct output: -14                 | Program output: -9                 
Correct output: 41                  | Program output: 77                 
Correct output: 1                   | Program output: 83                 
Correct output: -94                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 76                 
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: 68                 
Correct output: -41                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -34                
Correct output: 15                  | Program output: 40                 
Correct output: -77                 | Program output: 68                 
Correct output: -51                 | Program output: 97                 
Correct output: -84                 | Program output: -39                
Correct output: -65                 | Program output: 35                 
Correct output: -61                 | Program output: 20                 
Correct output: -46                 | Program output: -46                
Correct output: -49                 | Program output: 36                 
Correct output: 5                   | Program output: 97                 
Correct output: -97                 | Program output: 6                  
Correct output: -61                 | Program output: 86                 
Correct output: -31                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 14                 
Correct output: -67                 | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: 7                  
Correct output: -19                 | Program output: -10                
Correct output: -19                 | Program output: 14                 
Correct output: 46                  | Program output: 76                 
Correct output: -90                 | Program output: 91                 
Correct output: -82                 | Program output: -2                 
Correct output: -69                 | Program output: 98                 
Correct output: -98                 | Program output: 6                  
Correct output: -75                 | Program output: -67                
Correct output: -72                 | Program output: -9                 
Correct output: 6                   | Program output: 28                 
Correct output: -72                 | Program output: -7                 
Correct output: -87                 | Program output: -9                 
Correct output: -75                 | Program output: -39                
Correct output: -52                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_36} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 3, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction in1})
Lexicase best program: (integer_yankdup tagged_36 boolean_invert_second_then_and integer_max exec_eq exec_yank exec_do*range (exec_empty exec_do*times (boolean_not)) integer_max boolean_invert_first_then_and exec_do*range (integer_lt) boolean_or in2 exec_if () (exec_if (print_integer exec_dup (integer_shove integer_mod integer_gt) exec_do*range (boolean_invert_second_then_and) boolean_not exec_empty exec_dup_items integer_dup_items) (exec_stackdepth integer_lte exec_flush exec_pop (integer_gt) exec_do*range (integer_dup_times boolean_dup boolean_xor boolean_stackdepth boolean_xor) exec_stackdepth integer_div) integer_fromboolean integer_gte exec_stackdepth) exec_if (boolean_not boolean_dup_items exec_while () in1) ())
Lexicase best errors: [0 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_36} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 3, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction in1})
Zero cases best program: (integer_yankdup tagged_36 boolean_invert_second_then_and integer_max exec_eq exec_yank exec_do*range (exec_empty exec_do*times (boolean_not)) integer_max boolean_invert_first_then_and exec_do*range (integer_lt) boolean_or in2 exec_if () (exec_if (print_integer exec_dup (integer_shove integer_mod integer_gt) exec_do*range (boolean_invert_second_then_and) boolean_not exec_empty exec_dup_items integer_dup_items) (exec_stackdepth integer_lte exec_flush exec_pop (integer_gt) exec_do*range (integer_dup_times boolean_dup boolean_xor boolean_stackdepth boolean_xor) exec_stackdepth integer_div) integer_fromboolean integer_gte exec_stackdepth) exec_if (boolean_not boolean_dup_items exec_while () in1) ())
Zero cases best errors: [0 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 2 2 1 1 2 5 11 10 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (5 2 2 1 1 2 5 11 10 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction tag_exec_498} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop})
Best program: (integer_flush boolean_dup_times integer_stackdepth in2 print_integer in1 boolean_xor boolean_not exec_flush boolean_yank integer_swap boolean_frominteger integer_swap exec_do*times () integer_yankdup exec_noop exec_yankdup integer_eq exec_when (integer_pop exec_yankdup) boolean_invert_second_then_and exec_y () integer_lt exec_while (exec_eq print_integer boolean_and) exec_while () exec_k (exec_if (integer_dup exec_dup () exec_y_when_autoconstructing () integer_dup integer_dup_items exec_rot (tag_exec_498 () exec_if (exec_y_when_autoconstructing (exec_noop integer_yank)) (boolean_not exec_yank in4) exec_do*times () integer_rot exec_flush) (exec_s_when_autoconstructing (in2 exec_flush integer_swap exec_yankdup boolean_stackdepth) (integer_eq in3 boolean_flush integer_sub exec_dup_items) (boolean_pop in1 in1 boolean_frominteger integer_eq integer_max integer_empty integer_lte exec_yankdup integer_pop)) ()) ()) ())
Errors: [0 1 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 69
Size: 92
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.995 0.998 0.998 0.999 0.999 0.998 0.995 0.989 0.99 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.475
Average program size in population (points): 69.551
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 494422
--- Timings ---
Current time: 1559594109683 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.7 seconds, 30.0%
Fitness Testing:      1.6 seconds, 65.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 22                  | Program output: 37                 
Correct output: -87                 | Program output: -2                 
Correct output: -39                 | Program output: -39                
Correct output: 23                  | Program output: 23                 
Correct output: 66                  | Program output: 84                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 5                  
Correct output: -19                 | Program output: 57                 
Correct output: -27                 | Program output: 55                 
Correct output: 42                  | Program output: 94                 
Correct output: 19                  | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: 22                  | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: 72                  | Program output: 72                 
Correct output: 6                   | Program output: 27                 
Correct output: 0                   | Program output: 5                  
Correct output: 57                  | Program output: 89                 
Correct output: 34                  | Program output: 81                 
Correct output: 39                  | Program output: 39                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 50                 
Correct output: 21                  | Program output: 77                 
Correct output: 26                  | Program output: 26                 
Correct output: 56                  | Program output: 96                 
Correct output: 8                   | Program output: 37                 
Correct output: 12                  | Program output: 45                 
Correct output: 4                   | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 68                 
Correct output: 23                  | Program output: 71                 
Correct output: 39                  | Program output: 46                 
Correct output: 4                   | Program output: 96                 
Correct output: -85                 | Program output: 87                 
Correct output: -100                | Program output: 16                 
Correct output: -90                 | Program output: 4                  
Correct output: 20                  | Program output: 30                 
Correct output: -80                 | Program output: -8                 
Correct output: -76                 | Program output: -62                
Correct output: -73                 | Program output: 6                  
Correct output: -97                 | Program output: -60                
Correct output: -49                 | Program output: 66                 
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 88                 
Correct output: -66                 | Program output: -23                
Correct output: -42                 | Program output: 86                 
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -6                 
Correct output: -69                 | Program output: -7                 
Correct output: -76                 | Program output: -40                
Correct output: -14                 | Program output: -9                 
Correct output: 41                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 23                 
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -34                
Correct output: 15                  | Program output: 90                 
Correct output: -77                 | Program output: 68                 
Correct output: -51                 | Program output: 97                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 34                 
Correct output: -61                 | Program output: 20                 
Correct output: -46                 | Program output: 55                 
Correct output: -49                 | Program output: -39                
Correct output: 5                   | Program output: 5                  
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: 86                 
Correct output: -31                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: 51                 
Correct output: 14                  | Program output: 52                 
Correct output: -67                 | Program output: 41                 
Correct output: 11                  | Program output: 87                 
Correct output: -98                 | Program output: 7                  
Correct output: -19                 | Program output: -10                
Correct output: -19                 | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -90                 | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: -69                 | Program output: 98                 
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 90                 
Correct output: -72                 | Program output: 20                 
Correct output: -87                 | Program output: -9                 
Correct output: -75                 | Program output: -39                
Correct output: -52                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_empty exec_dup () in1 integer_stackdepth boolean_empty integer_flush exec_do*count (exec_swap () (integer_gte boolean_flush boolean_frominteger exec_do*while () exec_do*count (boolean_xor exec_rot (boolean_dup_times in1) () (in2 in3 exec_stackdepth boolean_not exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap print_integer exec_flush boolean_eq) (boolean_dup) integer_pop)) exec_flush integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_dup_times (exec_stackdepth) exec_pop () exec_do*count (exec_do*range (exec_k () (exec_s (integer_gte) (print_newline) (integer_min boolean_and boolean_swap -85 exec_yankdup 36 boolean_invert_first_then_and) exec_if (integer_flush integer_fromboolean boolean_or) ()))))))) () ()))
Lexicase best errors: [0 1 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 95
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_empty exec_dup () in1 integer_stackdepth boolean_empty integer_flush exec_do*count (exec_swap () (integer_gte boolean_flush boolean_frominteger exec_do*while () exec_do*count (boolean_xor exec_rot (boolean_dup_times in1) () (in2 in3 exec_stackdepth boolean_not exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap print_integer exec_flush boolean_eq) (boolean_dup) integer_pop)) exec_flush integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_dup_times (exec_stackdepth) exec_pop () exec_do*count (exec_do*range (exec_k () (exec_s (integer_gte) (print_newline) (integer_min boolean_and boolean_swap -85 exec_yankdup 36 boolean_invert_first_then_and) exec_if (integer_flush integer_fromboolean boolean_or) ()))))))) () ()))
Zero cases best errors: [0 1 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 95
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 4 133 434 100 100 133 129 59 59)
Population mean number of elite cases: 1.41
Count of perfect (error zero) individuals by case: (262 4 133 434 100 100 133 129 59 59)
Population mean number of perfect (error zero) cases: 1.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or})
Best program: (integer_empty exec_dup () in1 integer_stackdepth boolean_empty integer_flush exec_do*count (exec_swap () (integer_gte boolean_flush boolean_frominteger exec_do*while () exec_do*count (boolean_xor exec_rot (boolean_dup_times in1) () (in2 in3 exec_stackdepth boolean_not exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap print_integer exec_flush boolean_eq) (boolean_dup) integer_pop)) exec_flush integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_dup_times (exec_stackdepth) exec_pop () exec_do*count (exec_do*range (exec_k () (exec_s (integer_gte) (print_newline) (integer_min boolean_and boolean_swap -85 exec_yankdup 36 boolean_invert_first_then_and) exec_if (integer_flush integer_fromboolean boolean_or) ()))))))) () ()))
Errors: [0 1 0 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 64
Size: 95
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 8.587
Median total errors in population: 8
Error averages by case: (0.738 0.996 0.867 0.566 0.9 0.9 0.867 0.871 0.941 0.941)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.156
Average program size in population (points): 74.226
Average percent parens in population: 0.276
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.99
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.99
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 904558
--- Timings ---
Current time: 1559594111614 milliseconds
Total Time:           4.3 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         1.8 seconds, 41.8%
Fitness Testing:      2.1 seconds, 49.1%
Report:               0.3 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 22                  | Program output: 37                 
Correct output: -87                 | Program output: -2                 
Correct output: -39                 | Program output: -39                
Correct output: 23                  | Program output: 23                 
Correct output: 66                  | Program output: 84                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 5                  
Correct output: -19                 | Program output: 57                 
Correct output: -27                 | Program output: 55                 
Correct output: 42                  | Program output: 94                 
Correct output: 19                  | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: 22                  | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: 72                  | Program output: 72                 
Correct output: 6                   | Program output: 27                 
Correct output: 0                   | Program output: 5                  
Correct output: 57                  | Program output: 89                 
Correct output: 34                  | Program output: 81                 
Correct output: 39                  | Program output: 39                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 50                 
Correct output: 21                  | Program output: 77                 
Correct output: 26                  | Program output: 26                 
Correct output: 56                  | Program output: 96                 
Correct output: 8                   | Program output: 37                 
Correct output: 12                  | Program output: 45                 
Correct output: 4                   | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 68                 
Correct output: 23                  | Program output: 71                 
Correct output: 39                  | Program output: 46                 
Correct output: 4                   | Program output: 96                 
Correct output: -85                 | Program output: 87                 
Correct output: -100                | Program output: 16                 
Correct output: -90                 | Program output: 4                  
Correct output: 20                  | Program output: 30                 
Correct output: -80                 | Program output: -8                 
Correct output: -76                 | Program output: -62                
Correct output: -73                 | Program output: 6                  
Correct output: -97                 | Program output: -60                
Correct output: -49                 | Program output: 66                 
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 88                 
Correct output: -66                 | Program output: -23                
Correct output: -42                 | Program output: 86                 
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -6                 
Correct output: -69                 | Program output: -7                 
Correct output: -76                 | Program output: -40                
Correct output: -14                 | Program output: -9                 
Correct output: 41                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 23                 
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -34                
Correct output: 15                  | Program output: 90                 
Correct output: -77                 | Program output: 68                 
Correct output: -51                 | Program output: 97                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 34                 
Correct output: -61                 | Program output: 20                 
Correct output: -46                 | Program output: 55                 
Correct output: -49                 | Program output: -39                
Correct output: 5                   | Program output: 5                  
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: 86                 
Correct output: -31                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: 51                 
Correct output: 14                  | Program output: 52                 
Correct output: -67                 | Program output: 41                 
Correct output: 11                  | Program output: 87                 
Correct output: -98                 | Program output: 7                  
Correct output: -19                 | Program output: -10                
Correct output: -19                 | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -90                 | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: -69                 | Program output: 98                 
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 90                 
Correct output: -72                 | Program output: 20                 
Correct output: -87                 | Program output: -9                 
Correct output: -75                 | Program output: -39                
Correct output: -52                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_empty exec_dup () in1 integer_stackdepth boolean_empty integer_flush exec_do*count (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (boolean_xor boolean_yank exec_rot (boolean_dup_times in1) () (in2 in3 exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap print_integer exec_flush boolean_eq) (boolean_dup) integer_pop)) exec_flush integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (exec_y_when_autoconstructing (boolean_yank exec_stackdepth) boolean_rot) exec_pop () exec_do*count (exec_when (exec_k () (exec_s (integer_gte) (print_newline) (integer_min boolean_and boolean_swap exec_yankdup 36 boolean_invert_first_then_and) exec_if (integer_fromboolean integer_eq boolean_or) ())))))) () ()))
Lexicase best errors: [0 1 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 94
Percent parens: 0.330
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_empty exec_dup () in1 integer_stackdepth boolean_empty integer_flush exec_do*count (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (boolean_xor boolean_yank exec_rot (boolean_dup_times in1) () (in2 in3 exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap print_integer exec_flush boolean_eq) (boolean_dup) integer_pop)) exec_flush integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (exec_y_when_autoconstructing (boolean_yank exec_stackdepth) boolean_rot) exec_pop () exec_do*count (exec_when (exec_k () (exec_s (integer_gte) (print_newline) (integer_min boolean_and boolean_swap exec_yankdup 36 boolean_invert_first_then_and) exec_if (integer_fromboolean integer_eq boolean_or) ())))))) () ()))
Zero cases best errors: [0 1 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 94
Percent parens: 0.330
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 71 72 69 163 160 194 156 163 162)
Population mean number of elite cases: 1.61
Count of perfect (error zero) individuals by case: (403 71 72 69 163 160 194 156 163 162)
Population mean number of perfect (error zero) cases: 1.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction tag_exec_377} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction -85} {:close 0, :instruction 36} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or})
Best program: (integer_empty exec_dup () in1 integer_stackdepth boolean_empty integer_flush exec_y_when_autoconstructing (exec_do*count (exec_swap () (integer_gte boolean_flush boolean_frominteger exec_do*while () exec_do*count (boolean_xor exec_rot (boolean_dup_times in1) () (in2 in3 boolean_dup_times exec_stackdepth boolean_not exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap print_integer exec_flush boolean_eq) (boolean_dup) integer_pop)) exec_flush integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_dup_times (exec_stackdepth) exec_pop () exec_do*count (exec_y_when_autoconstructing ()) exec_do*range (exec_k () (exec_s (integer_gte) (print_newline) (tag_exec_377 (integer_min boolean_and -85 36 exec_if (integer_flush boolean_dup boolean_not integer_fromboolean boolean_or) ())))))))) () ())))
Errors: [0 1 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 67
Size: 101
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 8.387
Median total errors in population: 9
Error averages by case: (0.597 0.929 0.928 0.931 0.837 0.84 0.806 0.844 0.837 0.838)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.519
Average program size in population (points): 91.398
Average percent parens in population: 0.301
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1279629
--- Timings ---
Current time: 1559594113613 milliseconds
Total Time:           6.3 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         3.0 seconds, 47.8%
Fitness Testing:      2.6 seconds, 40.9%
Report:               0.6 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 522
Test mean error for best: 0.52200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 22                  | Program output: 37                 
Correct output: -87                 | Program output: -2                 
Correct output: -39                 | Program output: -39                
Correct output: 23                  | Program output: 100                
Correct output: 66                  | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: 5                  
Correct output: -19                 | Program output: 57                 
Correct output: -27                 | Program output: -27                
Correct output: 42                  | Program output: 94                 
Correct output: 19                  | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: 22                  | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: 72                  | Program output: 72                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 5                  
Correct output: 57                  | Program output: 57                 
Correct output: 34                  | Program output: 90                 
Correct output: 39                  | Program output: 91                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 83                 
Correct output: 26                  | Program output: 50                 
Correct output: 56                  | Program output: 56                 
Correct output: 8                   | Program output: 16                 
Correct output: 12                  | Program output: 55                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 65                 
Correct output: -90                 | Program output: -46                
Correct output: 20                  | Program output: 20                 
Correct output: -80                 | Program output: -8                 
Correct output: -76                 | Program output: -62                
Correct output: -73                 | Program output: 6                  
Correct output: -97                 | Program output: -9                 
Correct output: -49                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: 35                 
Correct output: -66                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 3                  
Correct output: -69                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: 41                  | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -45                
Correct output: -4                  | Program output: 21                 
Correct output: -81                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -38                
Correct output: -58                 | Program output: -12                
Correct output: -55                 | Program output: -5                 
Correct output: 15                  | Program output: 31                 
Correct output: -77                 | Program output: -77                
Correct output: -51                 | Program output: -19                
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -46                 | Program output: 2                  
Correct output: -49                 | Program output: -39                
Correct output: 5                   | Program output: 5                  
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -32                
Correct output: -31                 | Program output: -31                
Correct output: -90                 | Program output: -22                
Correct output: -55                 | Program output: 40                 
Correct output: 14                  | Program output: 67                 
Correct output: -67                 | Program output: 63                 
Correct output: 11                  | Program output: 76                 
Correct output: -98                 | Program output: -98                
Correct output: -19                 | Program output: -19                
Correct output: -19                 | Program output: -19                
Correct output: 46                  | Program output: 83                 
Correct output: -90                 | Program output: 46                 
Correct output: -82                 | Program output: -82                
Correct output: -69                 | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -33                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 92                 
Correct output: -72                 | Program output: 88                 
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_empty exec_dup () in1 integer_stackdepth integer_flush exec_do*count (exec_swap () (integer_dup boolean_flush boolean_frominteger exec_do*while () boolean_xor boolean_dup_times in1)) in2 in3 exec_stackdepth boolean_not exec_empty exec_rot () (integer_dup_times boolean_eq integer_yankdup boolean_swap print_integer exec_flush boolean_eq) (boolean_dup) integer_pop exec_flush in4 boolean_pop exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove integer_yankdup) boolean_pop exec_k_when_autoconstructing (boolean_stackdepth exec_dup_times (exec_stackdepth) exec_pop () exec_do*count (exec_do*range (exec_k () (exec_s (integer_gte) (print_newline) (integer_min integer_eq) boolean_and -85 exec_yankdup 36 boolean_invert_first_then_and) exec_if (exec_shove (integer_flush boolean_or)) ()))) ()) () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 87
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_empty exec_dup () in1 integer_stackdepth integer_flush exec_do*count (exec_swap () (integer_dup boolean_flush boolean_frominteger exec_do*while () boolean_xor boolean_dup_times in1)) in2 in3 exec_stackdepth boolean_not exec_empty exec_rot () (integer_dup_times boolean_eq integer_yankdup boolean_swap print_integer exec_flush boolean_eq) (boolean_dup) integer_pop exec_flush in4 boolean_pop exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove integer_yankdup) boolean_pop exec_k_when_autoconstructing (boolean_stackdepth exec_dup_times (exec_stackdepth) exec_pop () exec_do*count (exec_do*range (exec_k () (exec_s (integer_gte) (print_newline) (integer_min integer_eq) boolean_and -85 exec_yankdup 36 boolean_invert_first_then_and) exec_if (exec_shove (integer_flush boolean_or)) ()))) ()) () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 87
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (561 354 171 152 140 186 243 213 183 248)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (561 354 171 152 140 186 243 213 183 248)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or})
Best program: (integer_empty exec_dup () in1 integer_stackdepth boolean_empty integer_flush exec_do*count (exec_swap () (integer_gte integer_dup exec_do*times (boolean_flush boolean_frominteger exec_do*while () boolean_xor boolean_dup_times in1)) in3 exec_stackdepth boolean_not exec_empty) exec_rot () (integer_dup_times boolean_eq integer_yankdup boolean_swap print_integer exec_flush boolean_eq) (boolean_dup) integer_pop exec_flush integer_max in4 exec_rot (integer_inc integer_swap exec_y_when_autoconstructing (exec_while (integer_yankdup) boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_dup_times (exec_stackdepth) exec_pop () exec_do*count (exec_do*range (exec_k () (exec_s (integer_gte) (print_newline) (integer_min integer_eq) integer_shove boolean_and -85 exec_yankdup 36 boolean_invert_first_then_and) exec_if (integer_fromboolean boolean_or) ()))))) () ())
Errors: [0 0 0 0 0 1 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 65
Size: 93
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 7.549
Median total errors in population: 8
Error averages by case: (0.439 0.646 0.829 0.848 0.86 0.814 0.757 0.787 0.817 0.752)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.54
Average program size in population (points): 97.103
Average percent parens in population: 0.304
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1636892
--- Timings ---
Current time: 1559594115677 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.3 seconds, 51.3%
Fitness Testing:      3.0 seconds, 36.2%
Report:               0.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 202
Test mean error for best: 0.20200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 22                  | Program output: 22                 
Correct output: -87                 | Program output: -2                 
Correct output: -39                 | Program output: -39                
Correct output: 23                  | Program output: 23                 
Correct output: 66                  | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -19                 | Program output: -19                
Correct output: -27                 | Program output: -27                
Correct output: 42                  | Program output: 42                 
Correct output: 19                  | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: 22                  | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: 72                  | Program output: 72                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 57                  | Program output: 57                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 77                 
Correct output: 26                  | Program output: 26                 
Correct output: 56                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 16                 
Correct output: -90                 | Program output: -51                
Correct output: 20                  | Program output: 20                 
Correct output: -80                 | Program output: -8                 
Correct output: -76                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -97                 | Program output: -60                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -66                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: 41                  | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 21                 
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 31                 
Correct output: -77                 | Program output: -77                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -46                 | Program output: -46                
Correct output: -49                 | Program output: -39                
Correct output: 5                   | Program output: 5                  
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 14                 
Correct output: -67                 | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -19                 | Program output: -19                
Correct output: -19                 | Program output: -19                
Correct output: 46                  | Program output: 46                 
Correct output: -90                 | Program output: 46                 
Correct output: -82                 | Program output: -82                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 28                 
Correct output: -72                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_dup () in1 exec_eq in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_pop integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_pop () exec_do*count (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times print_newline) integer_min boolean_and in3 boolean_swap in1 -85 exec_yankdup integer_max) 36 boolean_invert_first_then_and) exec_if (integer_flush integer_fromboolean boolean_or) ())))) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 101
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_dup () in1 exec_eq in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_pop integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_pop () exec_do*count (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times print_newline) integer_min boolean_and in3 boolean_swap in1 -85 exec_yankdup integer_max) 36 boolean_invert_first_then_and) exec_if (integer_flush integer_fromboolean boolean_or) ())))) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 101
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (155 263 208 7 313 183 222 199 7 529)
Population mean number of elite cases: 2.09
Count of perfect (error zero) individuals by case: (155 263 208 7 313 183 222 199 7 529)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or})
Best program: (exec_dup () in1 exec_eq in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_pop integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_pop () exec_do*count (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times print_newline) integer_min boolean_and in3 boolean_swap in1 -85 exec_yankdup integer_max) 36 boolean_invert_first_then_and) exec_if (integer_flush integer_fromboolean boolean_or) ())))) () ())
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 71
Size: 101
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.914
Median total errors in population: 8
Error averages by case: (0.845 0.737 0.792 0.993 0.687 0.817 0.778 0.801 0.993 0.471)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.832
Average program size in population (points): 94.585
Average percent parens in population: 0.293
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2187417
--- Timings ---
Current time: 1559594117761 milliseconds
Total Time:          10.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.5 seconds, 52.5%
Fitness Testing:      3.6 seconds, 34.3%
Report:               1.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 22                  | Program output: 22                 
Correct output: -87                 | Program output: -2                 
Correct output: -39                 | Program output: -39                
Correct output: 23                  | Program output: 23                 
Correct output: 66                  | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -19                 | Program output: -19                
Correct output: -27                 | Program output: -27                
Correct output: 42                  | Program output: 42                 
Correct output: 19                  | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: 22                  | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: 72                  | Program output: 72                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 57                  | Program output: 57                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 77                 
Correct output: 26                  | Program output: 26                 
Correct output: 56                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 16                 
Correct output: -90                 | Program output: -51                
Correct output: 20                  | Program output: 20                 
Correct output: -80                 | Program output: -8                 
Correct output: -76                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -97                 | Program output: -60                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -66                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: 41                  | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 21                 
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 31                 
Correct output: -77                 | Program output: -77                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -46                 | Program output: -46                
Correct output: -49                 | Program output: -39                
Correct output: 5                   | Program output: 5                  
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 14                 
Correct output: -67                 | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -19                 | Program output: -19                
Correct output: -19                 | Program output: -19                
Correct output: 46                  | Program output: 46                 
Correct output: -90                 | Program output: 46                 
Correct output: -82                 | Program output: -82                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 28                 
Correct output: -72                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_dup () in1 exec_eq integer_dup_times in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (integer_div boolean_frominteger exec_do*while () exec_do*count (exec_dup_items boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer boolean_eq) exec_while (exec_yank) integer_pop integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_flush exec_pop () exec_do*count (exec_s (boolean_flush integer_gte) (boolean_dup_times print_newline) (integer_min boolean_and in3 boolean_swap in1 -85 exec_yankdup integer_max) 36 boolean_invert_first_then_and) exec_if (integer_flush integer_fromboolean exec_k_when_autoconstructing (boolean_or) ()) ())))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 97
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_dup () in1 exec_eq integer_dup_times in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (integer_div boolean_frominteger exec_do*while () exec_do*count (exec_dup_items boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer boolean_eq) exec_while (exec_yank) integer_pop integer_max in4 exec_rot (integer_swap exec_y_when_autoconstructing (exec_while (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_stackdepth boolean_stackdepth) (boolean_yank exec_flush exec_pop () exec_do*count (exec_s (boolean_flush integer_gte) (boolean_dup_times print_newline) (integer_min boolean_and in3 boolean_swap in1 -85 exec_yankdup integer_max) 36 boolean_invert_first_then_and) exec_if (integer_flush integer_fromboolean exec_k_when_autoconstructing (boolean_or) ()) ())))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 97
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (305 298 298 299 298 301 319 331 431 324)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (305 298 298 299 298 301 319 331 431 324)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction -85} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction 36} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or})
Best program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 72
Size: 105
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 6.796
Median total errors in population: 10
Error averages by case: (0.695 0.702 0.702 0.701 0.702 0.699 0.681 0.669 0.569 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.867
Average program size in population (points): 98.178
Average percent parens in population: 0.298
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2549155
--- Timings ---
Current time: 1559594119713 milliseconds
Total Time:          12.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 54.0%
Fitness Testing:      4.0 seconds, 32.1%
Report:               1.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 5
Successful program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 105


Auto-simplifying with starting size: 105
step: 0
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 500
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 1000
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 1500
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 2000
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 2500
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 3000
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 3500
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 4000
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 4500
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 5000
program: (exec_dup () in1 in1 boolean_empty boolean_invert_second_then_and exec_y_when_autoconstructing (exec_swap () (integer_gte boolean_frominteger exec_do*while () exec_do*count (exec_dup_items integer_sub boolean_xor exec_rot (boolean_dup_times in1) () (boolean_empty boolean_invert_first_then_and) in2 integer_min) in3 integer_min exec_stackdepth exec_empty) exec_rot () (integer_dup_times boolean_eq boolean_swap integer_dup_items) () print_integer exec_flush boolean_eq) exec_while (exec_yank) integer_max in4 integer_sub exec_rot (integer_swap exec_y_when_autoconstructing (integer_shove boolean_pop exec_k_when_autoconstructing (boolean_shove boolean_stackdepth boolean_stackdepth) (boolean_yank exec_do*count (exec_if () (exec_k () (exec_s (exec_eq) (boolean_flush integer_gte) (boolean_dup_times integer_stackdepth print_newline) integer_min boolean_and exec_rot (in3 boolean_swap in1 -85 exec_yankdup integer_max) (36 boolean_invert_first_then_and) (exec_if (integer_flush boolean_or) ()))))))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 22                  | Program output: 22                 
Correct output: -87                 | Program output: -2                 
Correct output: -39                 | Program output: -39                
Correct output: 23                  | Program output: 23                 
Correct output: 66                  | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -54                 | Program output: -54                
Correct output: -19                 | Program output: -19                
Correct output: -27                 | Program output: -27                
Correct output: 42                  | Program output: 42                 
Correct output: 19                  | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: 22                  | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: 72                  | Program output: 72                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 57                  | Program output: 57                 
Correct output: 34                  | Program output: 34                 
Correct output: 39                  | Program output: 39                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 77                 
Correct output: 26                  | Program output: 26                 
Correct output: 56                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 15                 
Correct output: 23                  | Program output: 23                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 16                 
Correct output: -90                 | Program output: -51                
Correct output: 20                  | Program output: 20                 
Correct output: -80                 | Program output: -8                 
Correct output: -76                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -97                 | Program output: -60                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -66                 | Program output: -66                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: 41                  | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -4                  | Program output: 21                 
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -41                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 31                 
Correct output: -77                 | Program output: -77                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -46                 | Program output: -46                
Correct output: -49                 | Program output: -39                
Correct output: 5                   | Program output: 5                  
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -31                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 14                 
Correct output: -67                 | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -19                 | Program output: -19                
Correct output: -19                 | Program output: -19                
Correct output: 46                  | Program output: 46                 
Correct output: -90                 | Program output: 46                 
Correct output: -82                 | Program output: -82                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 28                 
Correct output: -72                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -52                 | Program output: -52                
;;******************************
