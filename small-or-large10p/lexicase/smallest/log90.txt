Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-26 -50 -50 -50] -50] [[50 -52 -52 -52] -52] [[-66 -66 -22 -66] -66] [[85 -36 85 85] -36] [[91 91 -62 91] -62] [[43 43 67 43] 43] [[-74 -74 -74 -83] -83] [[-4 77 -4 -4] -4] [[-7 -79 -7 -7] -79] [[-60 -60 -11 -60] -60] [(85 85 85 85) 85] [(89 89 89 89) 89] [(21 21 21 21) 21] [(-64 -64 -64 -64) -64] [(59 59 59 59) 59] [(97 17 78 47) 17] [(3 75 35 8) 3] [(78 72 99 52) 52] [(32 75 60 100) 32] [(2 31 34 36) 2] [(1 52 17 75) 1] [(62 45 2 57) 2] [(26 62 44 52) 26] [(9 59 87 89) 9] [(60 6 56 20) 6] [(9 100 59 78) 9] [(35 47 7 20) 7] [(88 73 28 91) 28] [(60 29 55 30) 29] [(78 46 38 48) 38] [(49 14 96 93) 14] [(8 88 8 76) 8] [(66 3 11 57) 3] [(70 39 60 85) 39] [(64 64 53 28) 28] [(38 -95 -39 -63) -95] [(40 -48 -56 -24) -56] [(63 39 -80 -58) -80] [(-77 -14 -85 74) -85] [(-58 30 51 -47) -58] [(70 -94 87 97) -94] [(86 -91 35 45) -91] [(46 -18 -61 20) -61] [(-72 -11 66 23) -72] [(-29 -30 -6 40) -30] [(-77 -68 72 -100) -100] [(11 2 -12 0) -12] [(50 20 56 45) 20] [(26 6 -66 92) -66] [(40 -80 -96 -10) -96] [(83 3 15 -90) -90] [(-54 -50 5 -92) -92] [(-31 54 52 -76) -76] [(69 98 37 8) 8] [(-81 42 -21 -42) -81] [(-40 66 -80 67) -80] [(95 55 35 12) 12] [(-66 93 86 1) -66] [(-65 -63 -53 30) -65] [(19 87 93 -49) -49] [(79 -11 -86 21) -86] [(-21 -63 41 -8) -63] [(36 55 -74 -94) -94] [(39 87 81 39) 39] [(21 -88 12 -6) -88] [(-73 -65 -47 -86) -86] [(-47 -74 64 -90) -90] [(63 -17 -79 -41) -79] [(-42 84 54 -38) -42] [(85 -4 -4 -67) -67] [(-10 -1 -56 30) -56] [(-39 -48 -64 49) -64] [(-62 -42 38 -100) -100] [(76 76 -47 50) -47] [(-14 -62 -93 27) -93] [(-34 60 27 28) -34] [(-53 14 -28 79) -53] [(87 62 4 -70) -70] [(0 -45 85 99) -45] [(-25 7 -55 -59) -59] [(31 -54 -53 80) -54] [(-51 -92 -35 -55) -92] [(-11 22 -53 21) -53] [(90 43 93 98) 43] [(88 32 44 43) 32] [(-42 -29 50 78) -42] [(82 -99 -97 28) -99] [(-45 24 -67 34) -67] [(61 -74 -95 8) -95] [(-25 40 -24 58) -25] [(-4 96 96 -24) -24] [(69 44 96 -35) -35] [(-89 -31 -37 45) -89] [(48 -3 57 -82) -82] [(45 -100 31 -88) -100])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-26 -50 -50 -50] -50]
Train Case:   6 | Input/Output: [[50 -52 -52 -52] -52]
Train Case:   7 | Input/Output: [[-66 -66 -22 -66] -66]
Train Case:   8 | Input/Output: [[85 -36 85 85] -36]
Train Case:   9 | Input/Output: [[91 91 -62 91] -62]
Train Case:  10 | Input/Output: [[43 43 67 43] 43]
Train Case:  11 | Input/Output: [[-74 -74 -74 -83] -83]
Train Case:  12 | Input/Output: [[-4 77 -4 -4] -4]
Train Case:  13 | Input/Output: [[-7 -79 -7 -7] -79]
Train Case:  14 | Input/Output: [[-60 -60 -11 -60] -60]
Train Case:  15 | Input/Output: [(85 85 85 85) 85]
Train Case:  16 | Input/Output: [(89 89 89 89) 89]
Train Case:  17 | Input/Output: [(21 21 21 21) 21]
Train Case:  18 | Input/Output: [(-64 -64 -64 -64) -64]
Train Case:  19 | Input/Output: [(59 59 59 59) 59]
Train Case:  20 | Input/Output: [(97 17 78 47) 17]
Train Case:  21 | Input/Output: [(3 75 35 8) 3]
Train Case:  22 | Input/Output: [(78 72 99 52) 52]
Train Case:  23 | Input/Output: [(32 75 60 100) 32]
Train Case:  24 | Input/Output: [(2 31 34 36) 2]
Train Case:  25 | Input/Output: [(1 52 17 75) 1]
Train Case:  26 | Input/Output: [(62 45 2 57) 2]
Train Case:  27 | Input/Output: [(26 62 44 52) 26]
Train Case:  28 | Input/Output: [(9 59 87 89) 9]
Train Case:  29 | Input/Output: [(60 6 56 20) 6]
Train Case:  30 | Input/Output: [(9 100 59 78) 9]
Train Case:  31 | Input/Output: [(35 47 7 20) 7]
Train Case:  32 | Input/Output: [(88 73 28 91) 28]
Train Case:  33 | Input/Output: [(60 29 55 30) 29]
Train Case:  34 | Input/Output: [(78 46 38 48) 38]
Train Case:  35 | Input/Output: [(49 14 96 93) 14]
Train Case:  36 | Input/Output: [(8 88 8 76) 8]
Train Case:  37 | Input/Output: [(66 3 11 57) 3]
Train Case:  38 | Input/Output: [(70 39 60 85) 39]
Train Case:  39 | Input/Output: [(64 64 53 28) 28]
Train Case:  40 | Input/Output: [(38 -95 -39 -63) -95]
Train Case:  41 | Input/Output: [(40 -48 -56 -24) -56]
Train Case:  42 | Input/Output: [(63 39 -80 -58) -80]
Train Case:  43 | Input/Output: [(-77 -14 -85 74) -85]
Train Case:  44 | Input/Output: [(-58 30 51 -47) -58]
Train Case:  45 | Input/Output: [(70 -94 87 97) -94]
Train Case:  46 | Input/Output: [(86 -91 35 45) -91]
Train Case:  47 | Input/Output: [(46 -18 -61 20) -61]
Train Case:  48 | Input/Output: [(-72 -11 66 23) -72]
Train Case:  49 | Input/Output: [(-29 -30 -6 40) -30]
Train Case:  50 | Input/Output: [(-77 -68 72 -100) -100]
Train Case:  51 | Input/Output: [(11 2 -12 0) -12]
Train Case:  52 | Input/Output: [(50 20 56 45) 20]
Train Case:  53 | Input/Output: [(26 6 -66 92) -66]
Train Case:  54 | Input/Output: [(40 -80 -96 -10) -96]
Train Case:  55 | Input/Output: [(83 3 15 -90) -90]
Train Case:  56 | Input/Output: [(-54 -50 5 -92) -92]
Train Case:  57 | Input/Output: [(-31 54 52 -76) -76]
Train Case:  58 | Input/Output: [(69 98 37 8) 8]
Train Case:  59 | Input/Output: [(-81 42 -21 -42) -81]
Train Case:  60 | Input/Output: [(-40 66 -80 67) -80]
Train Case:  61 | Input/Output: [(95 55 35 12) 12]
Train Case:  62 | Input/Output: [(-66 93 86 1) -66]
Train Case:  63 | Input/Output: [(-65 -63 -53 30) -65]
Train Case:  64 | Input/Output: [(19 87 93 -49) -49]
Train Case:  65 | Input/Output: [(79 -11 -86 21) -86]
Train Case:  66 | Input/Output: [(-21 -63 41 -8) -63]
Train Case:  67 | Input/Output: [(36 55 -74 -94) -94]
Train Case:  68 | Input/Output: [(39 87 81 39) 39]
Train Case:  69 | Input/Output: [(21 -88 12 -6) -88]
Train Case:  70 | Input/Output: [(-73 -65 -47 -86) -86]
Train Case:  71 | Input/Output: [(-47 -74 64 -90) -90]
Train Case:  72 | Input/Output: [(63 -17 -79 -41) -79]
Train Case:  73 | Input/Output: [(-42 84 54 -38) -42]
Train Case:  74 | Input/Output: [(85 -4 -4 -67) -67]
Train Case:  75 | Input/Output: [(-10 -1 -56 30) -56]
Train Case:  76 | Input/Output: [(-39 -48 -64 49) -64]
Train Case:  77 | Input/Output: [(-62 -42 38 -100) -100]
Train Case:  78 | Input/Output: [(76 76 -47 50) -47]
Train Case:  79 | Input/Output: [(-14 -62 -93 27) -93]
Train Case:  80 | Input/Output: [(-34 60 27 28) -34]
Train Case:  81 | Input/Output: [(-53 14 -28 79) -53]
Train Case:  82 | Input/Output: [(87 62 4 -70) -70]
Train Case:  83 | Input/Output: [(0 -45 85 99) -45]
Train Case:  84 | Input/Output: [(-25 7 -55 -59) -59]
Train Case:  85 | Input/Output: [(31 -54 -53 80) -54]
Train Case:  86 | Input/Output: [(-51 -92 -35 -55) -92]
Train Case:  87 | Input/Output: [(-11 22 -53 21) -53]
Train Case:  88 | Input/Output: [(90 43 93 98) 43]
Train Case:  89 | Input/Output: [(88 32 44 43) 32]
Train Case:  90 | Input/Output: [(-42 -29 50 78) -42]
Train Case:  91 | Input/Output: [(82 -99 -97 28) -99]
Train Case:  92 | Input/Output: [(-45 24 -67 34) -67]
Train Case:  93 | Input/Output: [(61 -74 -95 8) -95]
Train Case:  94 | Input/Output: [(-25 40 -24 58) -25]
Train Case:  95 | Input/Output: [(-4 96 96 -24) -24]
Train Case:  96 | Input/Output: [(69 44 96 -35) -35]
Train Case:  97 | Input/Output: [(-89 -31 -37 45) -89]
Train Case:  98 | Input/Output: [(48 -3 57 -82) -82]
Train Case:  99 | Input/Output: [(45 -100 31 -88) -100]
Test Case:   0 | Input/Output: [[-18 17 17 17] -18]
Test Case:   1 | Input/Output: [[-81 7 -81 -81] -81]
Test Case:   2 | Input/Output: [[-80 70 -80 -80] -80]
Test Case:   3 | Input/Output: [[51 -42 -42 -42] -42]
Test Case:   4 | Input/Output: [[46 94 46 46] 46]
Test Case:   5 | Input/Output: [[-12 -12 -78 -12] -78]
Test Case:   6 | Input/Output: [[-21 -21 -21 -88] -88]
Test Case:   7 | Input/Output: [[-26 89 89 89] -26]
Test Case:   8 | Input/Output: [[77 55 77 77] 55]
Test Case:   9 | Input/Output: [[-46 57 57 57] -46]
Test Case:  10 | Input/Output: [[67 -21 -21 -21] -21]
Test Case:  11 | Input/Output: [[-69 -69 -69 -9] -69]
Test Case:  12 | Input/Output: [[-53 -53 -53 -27] -53]
Test Case:  13 | Input/Output: [[-76 10 10 10] -76]
Test Case:  14 | Input/Output: [[17 17 17 35] 17]
Test Case:  15 | Input/Output: [[-56 -56 -75 -56] -75]
Test Case:  16 | Input/Output: [[-54 97 -54 -54] -54]
Test Case:  17 | Input/Output: [[-95 -95 -95 -78] -95]
Test Case:  18 | Input/Output: [[-59 -59 70 -59] -59]
Test Case:  19 | Input/Output: [[-43 -43 85 -43] -43]
Test Case:  20 | Input/Output: [[87 87 50 87] 50]
Test Case:  21 | Input/Output: [[43 92 43 43] 43]
Test Case:  22 | Input/Output: [[-37 -37 98 -37] -37]
Test Case:  23 | Input/Output: [[-73 -73 86 -73] -73]
Test Case:  24 | Input/Output: [[-9 18 18 18] -9]
Test Case:  25 | Input/Output: [[-1 -78 -1 -1] -78]
Test Case:  26 | Input/Output: [[25 25 -96 25] -96]
Test Case:  27 | Input/Output: [[-64 -79 -79 -79] -79]
Test Case:  28 | Input/Output: [[-38 -38 -51 -38] -51]
Test Case:  29 | Input/Output: [[-67 28 -67 -67] -67]
Test Case:  30 | Input/Output: [[68 68 -88 68] -88]
Test Case:  31 | Input/Output: [[-64 -96 -96 -96] -96]
Test Case:  32 | Input/Output: [[-77 -77 90 -77] -77]
Test Case:  33 | Input/Output: [[48 48 -85 48] -85]
Test Case:  34 | Input/Output: [[-36 -36 -36 30] -36]
Test Case:  35 | Input/Output: [[-37 -37 -37 50] -37]
Test Case:  36 | Input/Output: [[96 10 10 10] 10]
Test Case:  37 | Input/Output: [[31 -18 -18 -18] -18]
Test Case:  38 | Input/Output: [[-9 67 67 67] -9]
Test Case:  39 | Input/Output: [[9 9 9 -47] -47]
Test Case:  40 | Input/Output: [[69 69 -48 69] -48]
Test Case:  41 | Input/Output: [[-24 -24 -24 -25] -25]
Test Case:  42 | Input/Output: [[91 -40 -40 -40] -40]
Test Case:  43 | Input/Output: [[33 -75 33 33] -75]
Test Case:  44 | Input/Output: [[81 81 81 40] 40]
Test Case:  45 | Input/Output: [[39 -82 -82 -82] -82]
Test Case:  46 | Input/Output: [[12 -39 12 12] -39]
Test Case:  47 | Input/Output: [[-41 -41 64 -41] -41]
Test Case:  48 | Input/Output: [[25 -66 -66 -66] -66]
Test Case:  49 | Input/Output: [[-50 -56 -50 -50] -56]
Test Case:  50 | Input/Output: [[89 89 -21 89] -21]
Test Case:  51 | Input/Output: [[-92 -92 -92 52] -92]
Test Case:  52 | Input/Output: [[-43 -43 13 -43] -43]
Test Case:  53 | Input/Output: [[9 -25 -25 -25] -25]
Test Case:  54 | Input/Output: [[22 22 47 22] 22]
Test Case:  55 | Input/Output: [[-20 -20 -97 -20] -97]
Test Case:  56 | Input/Output: [[11 11 11 -54] -54]
Test Case:  57 | Input/Output: [[-75 30 -75 -75] -75]
Test Case:  58 | Input/Output: [[95 95 34 95] 34]
Test Case:  59 | Input/Output: [[96 43 96 96] 43]
Test Case:  60 | Input/Output: [[-44 -44 -82 -44] -82]
Test Case:  61 | Input/Output: [[-20 26 -20 -20] -20]
Test Case:  62 | Input/Output: [[-46 -46 -61 -46] -61]
Test Case:  63 | Input/Output: [[3 -67 3 3] -67]
Test Case:  64 | Input/Output: [[-43 52 52 52] -43]
Test Case:  65 | Input/Output: [[-99 -99 -99 93] -99]
Test Case:  66 | Input/Output: [[-76 -76 10 -76] -76]
Test Case:  67 | Input/Output: [[-20 80 -20 -20] -20]
Test Case:  68 | Input/Output: [[14 14 14 12] 12]
Test Case:  69 | Input/Output: [[92 92 85 92] 85]
Test Case:  70 | Input/Output: [[-99 -97 -97 -97] -99]
Test Case:  71 | Input/Output: [[-41 -41 -64 -41] -64]
Test Case:  72 | Input/Output: [[30 30 -75 30] -75]
Test Case:  73 | Input/Output: [[-10 70 70 70] -10]
Test Case:  74 | Input/Output: [[35 35 35 -72] -72]
Test Case:  75 | Input/Output: [[88 88 -44 88] -44]
Test Case:  76 | Input/Output: [[68 94 94 94] 68]
Test Case:  77 | Input/Output: [[-23 -23 -23 19] -23]
Test Case:  78 | Input/Output: [[74 74 74 42] 42]
Test Case:  79 | Input/Output: [[75 24 24 24] 24]
Test Case:  80 | Input/Output: [[-61 -79 -79 -79] -79]
Test Case:  81 | Input/Output: [[-90 -32 -32 -32] -90]
Test Case:  82 | Input/Output: [[-87 -36 -87 -87] -87]
Test Case:  83 | Input/Output: [[-64 -72 -72 -72] -72]
Test Case:  84 | Input/Output: [[-100 -55 -100 -100] -100]
Test Case:  85 | Input/Output: [[-67 -59 -59 -59] -67]
Test Case:  86 | Input/Output: [[47 47 47 50] 47]
Test Case:  87 | Input/Output: [[73 73 -88 73] -88]
Test Case:  88 | Input/Output: [[-29 -29 62 -29] -29]
Test Case:  89 | Input/Output: [[-96 -96 15 -96] -96]
Test Case:  90 | Input/Output: [[15 77 15 15] 15]
Test Case:  91 | Input/Output: [[14 14 14 74] 14]
Test Case:  92 | Input/Output: [[91 91 83 91] 83]
Test Case:  93 | Input/Output: [[-77 -77 -77 -22] -77]
Test Case:  94 | Input/Output: [[37 37 37 -51] -51]
Test Case:  95 | Input/Output: [[99 35 35 35] 35]
Test Case:  96 | Input/Output: [[-38 24 -38 -38] -38]
Test Case:  97 | Input/Output: [[-75 43 -75 -75] -75]
Test Case:  98 | Input/Output: [[-20 -20 -91 -20] -91]
Test Case:  99 | Input/Output: [[-49 -49 -49 67] -49]
Test Case: 100 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 101 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 102 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 103 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 104 | Input/Output: [(36 36 36 36) 36]
Test Case: 105 | Input/Output: [(72 72 72 72) 72]
Test Case: 106 | Input/Output: [(23 23 23 23) 23]
Test Case: 107 | Input/Output: [(17 17 17 17) 17]
Test Case: 108 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 109 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 110 | Input/Output: [(70 70 70 70) 70]
Test Case: 111 | Input/Output: [(2 2 2 2) 2]
Test Case: 112 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 113 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 114 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 115 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 116 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 117 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 118 | Input/Output: [(52 52 52 52) 52]
Test Case: 119 | Input/Output: [(40 40 40 40) 40]
Test Case: 120 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 121 | Input/Output: [(36 36 36 36) 36]
Test Case: 122 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 123 | Input/Output: [(67 67 67 67) 67]
Test Case: 124 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 125 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 126 | Input/Output: [(24 24 24 24) 24]
Test Case: 127 | Input/Output: [(83 83 83 83) 83]
Test Case: 128 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 129 | Input/Output: [(86 86 86 86) 86]
Test Case: 130 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 131 | Input/Output: [(42 42 42 42) 42]
Test Case: 132 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 133 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 134 | Input/Output: [(55 55 55 55) 55]
Test Case: 135 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 136 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 137 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 138 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 139 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 140 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 141 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 142 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 143 | Input/Output: [(55 55 55 55) 55]
Test Case: 144 | Input/Output: [(76 76 76 76) 76]
Test Case: 145 | Input/Output: [(93 93 93 93) 93]
Test Case: 146 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 147 | Input/Output: [(75 75 75 75) 75]
Test Case: 148 | Input/Output: [(10 10 10 10) 10]
Test Case: 149 | Input/Output: [(36 36 36 36) 36]
Test Case: 150 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 151 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 152 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 153 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 154 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 155 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 156 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 157 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 158 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 159 | Input/Output: [(24 24 24 24) 24]
Test Case: 160 | Input/Output: [(0 0 0 0) 0]
Test Case: 161 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 162 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 163 | Input/Output: [(62 62 62 62) 62]
Test Case: 164 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 165 | Input/Output: [(38 38 38 38) 38]
Test Case: 166 | Input/Output: [(66 66 66 66) 66]
Test Case: 167 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 168 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 169 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 170 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 171 | Input/Output: [(43 43 43 43) 43]
Test Case: 172 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 173 | Input/Output: [(81 81 81 81) 81]
Test Case: 174 | Input/Output: [(1 1 1 1) 1]
Test Case: 175 | Input/Output: [(39 39 39 39) 39]
Test Case: 176 | Input/Output: [(93 93 93 93) 93]
Test Case: 177 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 178 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 179 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 180 | Input/Output: [(46 46 46 46) 46]
Test Case: 181 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 182 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 183 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 184 | Input/Output: [(2 2 2 2) 2]
Test Case: 185 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 186 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 187 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 188 | Input/Output: [(51 51 51 51) 51]
Test Case: 189 | Input/Output: [(12 12 12 12) 12]
Test Case: 190 | Input/Output: [(88 88 88 88) 88]
Test Case: 191 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 192 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 193 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 194 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 195 | Input/Output: [(20 20 20 20) 20]
Test Case: 196 | Input/Output: [(59 59 59 59) 59]
Test Case: 197 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 198 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 199 | Input/Output: [(26 26 26 26) 26]
Test Case: 200 | Input/Output: [(22 53 86 65) 22]
Test Case: 201 | Input/Output: [(78 18 87 15) 15]
Test Case: 202 | Input/Output: [(55 27 24 2) 2]
Test Case: 203 | Input/Output: [(3 11 6 31) 3]
Test Case: 204 | Input/Output: [(47 65 78 81) 47]
Test Case: 205 | Input/Output: [(32 97 30 29) 29]
Test Case: 206 | Input/Output: [(3 27 39 95) 3]
Test Case: 207 | Input/Output: [(27 92 81 36) 27]
Test Case: 208 | Input/Output: [(77 65 11 61) 11]
Test Case: 209 | Input/Output: [(43 60 37 90) 37]
Test Case: 210 | Input/Output: [(51 22 76 15) 15]
Test Case: 211 | Input/Output: [(22 94 5 92) 5]
Test Case: 212 | Input/Output: [(99 24 45 37) 24]
Test Case: 213 | Input/Output: [(10 23 74 71) 10]
Test Case: 214 | Input/Output: [(34 70 61 77) 34]
Test Case: 215 | Input/Output: [(50 83 45 36) 36]
Test Case: 216 | Input/Output: [(25 68 70 35) 25]
Test Case: 217 | Input/Output: [(90 0 80 80) 0]
Test Case: 218 | Input/Output: [(70 89 79 89) 70]
Test Case: 219 | Input/Output: [(61 12 34 62) 12]
Test Case: 220 | Input/Output: [(4 9 43 54) 4]
Test Case: 221 | Input/Output: [(48 45 100 14) 14]
Test Case: 222 | Input/Output: [(33 32 63 8) 8]
Test Case: 223 | Input/Output: [(68 5 42 5) 5]
Test Case: 224 | Input/Output: [(2 62 54 90) 2]
Test Case: 225 | Input/Output: [(91 45 45 30) 30]
Test Case: 226 | Input/Output: [(14 38 69 75) 14]
Test Case: 227 | Input/Output: [(66 63 29 26) 26]
Test Case: 228 | Input/Output: [(94 43 97 96) 43]
Test Case: 229 | Input/Output: [(74 95 90 22) 22]
Test Case: 230 | Input/Output: [(72 91 22 52) 22]
Test Case: 231 | Input/Output: [(14 5 51 1) 1]
Test Case: 232 | Input/Output: [(99 3 98 48) 3]
Test Case: 233 | Input/Output: [(34 77 68 35) 34]
Test Case: 234 | Input/Output: [(47 78 15 64) 15]
Test Case: 235 | Input/Output: [(53 40 60 42) 40]
Test Case: 236 | Input/Output: [(78 85 44 57) 44]
Test Case: 237 | Input/Output: [(10 23 41 48) 10]
Test Case: 238 | Input/Output: [(61 94 7 82) 7]
Test Case: 239 | Input/Output: [(53 18 22 0) 0]
Test Case: 240 | Input/Output: [(70 32 50 85) 32]
Test Case: 241 | Input/Output: [(84 9 30 36) 9]
Test Case: 242 | Input/Output: [(61 32 91 39) 32]
Test Case: 243 | Input/Output: [(68 41 31 86) 31]
Test Case: 244 | Input/Output: [(88 90 33 92) 33]
Test Case: 245 | Input/Output: [(37 9 14 7) 7]
Test Case: 246 | Input/Output: [(82 77 14 84) 14]
Test Case: 247 | Input/Output: [(16 26 39 16) 16]
Test Case: 248 | Input/Output: [(12 1 17 88) 1]
Test Case: 249 | Input/Output: [(98 37 3 53) 3]
Test Case: 250 | Input/Output: [(63 92 58 76) 58]
Test Case: 251 | Input/Output: [(27 94 21 3) 3]
Test Case: 252 | Input/Output: [(57 26 78 97) 26]
Test Case: 253 | Input/Output: [(45 63 66 65) 45]
Test Case: 254 | Input/Output: [(84 96 75 48) 48]
Test Case: 255 | Input/Output: [(14 38 93 32) 14]
Test Case: 256 | Input/Output: [(14 82 77 45) 14]
Test Case: 257 | Input/Output: [(6 48 31 63) 6]
Test Case: 258 | Input/Output: [(75 50 15 53) 15]
Test Case: 259 | Input/Output: [(67 96 1 53) 1]
Test Case: 260 | Input/Output: [(21 20 53 4) 4]
Test Case: 261 | Input/Output: [(72 100 22 95) 22]
Test Case: 262 | Input/Output: [(85 12 95 7) 7]
Test Case: 263 | Input/Output: [(73 82 17 35) 17]
Test Case: 264 | Input/Output: [(15 7 21 26) 7]
Test Case: 265 | Input/Output: [(42 67 10 53) 10]
Test Case: 266 | Input/Output: [(89 78 67 8) 8]
Test Case: 267 | Input/Output: [(13 81 46 37) 13]
Test Case: 268 | Input/Output: [(9 85 17 52) 9]
Test Case: 269 | Input/Output: [(100 72 11 14) 11]
Test Case: 270 | Input/Output: [(44 74 20 88) 20]
Test Case: 271 | Input/Output: [(75 80 22 87) 22]
Test Case: 272 | Input/Output: [(18 87 5 69) 5]
Test Case: 273 | Input/Output: [(19 65 95 31) 19]
Test Case: 274 | Input/Output: [(97 64 26 56) 26]
Test Case: 275 | Input/Output: [(25 4 69 8) 4]
Test Case: 276 | Input/Output: [(45 48 0 74) 0]
Test Case: 277 | Input/Output: [(48 92 98 58) 48]
Test Case: 278 | Input/Output: [(5 10 4 78) 4]
Test Case: 279 | Input/Output: [(89 38 18 93) 18]
Test Case: 280 | Input/Output: [(99 2 69 46) 2]
Test Case: 281 | Input/Output: [(62 10 39 40) 10]
Test Case: 282 | Input/Output: [(44 14 57 1) 1]
Test Case: 283 | Input/Output: [(5 79 74 47) 5]
Test Case: 284 | Input/Output: [(42 91 73 60) 42]
Test Case: 285 | Input/Output: [(1 76 74 36) 1]
Test Case: 286 | Input/Output: [(72 79 73 86) 72]
Test Case: 287 | Input/Output: [(78 76 59 88) 59]
Test Case: 288 | Input/Output: [(96 71 32 51) 32]
Test Case: 289 | Input/Output: [(53 8 82 45) 8]
Test Case: 290 | Input/Output: [(55 81 40 16) 16]
Test Case: 291 | Input/Output: [(56 57 60 72) 56]
Test Case: 292 | Input/Output: [(31 86 3 74) 3]
Test Case: 293 | Input/Output: [(6 3 98 71) 3]
Test Case: 294 | Input/Output: [(42 0 31 27) 0]
Test Case: 295 | Input/Output: [(52 9 42 35) 9]
Test Case: 296 | Input/Output: [(19 33 43 46) 19]
Test Case: 297 | Input/Output: [(31 75 55 9) 9]
Test Case: 298 | Input/Output: [(79 64 62 10) 10]
Test Case: 299 | Input/Output: [(97 39 5 58) 5]
Test Case: 300 | Input/Output: [(93 97 100 8) 8]
Test Case: 301 | Input/Output: [(94 73 76 18) 18]
Test Case: 302 | Input/Output: [(34 69 17 47) 17]
Test Case: 303 | Input/Output: [(92 61 40 75) 40]
Test Case: 304 | Input/Output: [(16 47 87 28) 16]
Test Case: 305 | Input/Output: [(87 0 96 18) 0]
Test Case: 306 | Input/Output: [(35 99 43 19) 19]
Test Case: 307 | Input/Output: [(95 53 89 75) 53]
Test Case: 308 | Input/Output: [(25 43 96 35) 25]
Test Case: 309 | Input/Output: [(92 73 23 63) 23]
Test Case: 310 | Input/Output: [(70 76 82 76) 70]
Test Case: 311 | Input/Output: [(7 97 53 28) 7]
Test Case: 312 | Input/Output: [(85 42 23 37) 23]
Test Case: 313 | Input/Output: [(56 94 8 97) 8]
Test Case: 314 | Input/Output: [(11 63 61 88) 11]
Test Case: 315 | Input/Output: [(0 27 90 29) 0]
Test Case: 316 | Input/Output: [(3 29 22 67) 3]
Test Case: 317 | Input/Output: [(83 7 24 15) 7]
Test Case: 318 | Input/Output: [(56 77 43 93) 43]
Test Case: 319 | Input/Output: [(70 68 39 99) 39]
Test Case: 320 | Input/Output: [(21 19 26 15) 15]
Test Case: 321 | Input/Output: [(78 6 91 26) 6]
Test Case: 322 | Input/Output: [(31 29 33 30) 29]
Test Case: 323 | Input/Output: [(90 42 41 93) 41]
Test Case: 324 | Input/Output: [(83 23 60 93) 23]
Test Case: 325 | Input/Output: [(19 11 15 85) 11]
Test Case: 326 | Input/Output: [(3 20 68 3) 3]
Test Case: 327 | Input/Output: [(62 41 9 80) 9]
Test Case: 328 | Input/Output: [(32 55 9 11) 9]
Test Case: 329 | Input/Output: [(63 14 72 96) 14]
Test Case: 330 | Input/Output: [(86 60 66 78) 60]
Test Case: 331 | Input/Output: [(27 5 94 46) 5]
Test Case: 332 | Input/Output: [(87 34 10 54) 10]
Test Case: 333 | Input/Output: [(84 78 39 38) 38]
Test Case: 334 | Input/Output: [(1 3 62 61) 1]
Test Case: 335 | Input/Output: [(13 36 66 5) 5]
Test Case: 336 | Input/Output: [(76 66 48 30) 30]
Test Case: 337 | Input/Output: [(67 80 11 21) 11]
Test Case: 338 | Input/Output: [(67 92 16 87) 16]
Test Case: 339 | Input/Output: [(78 51 98 10) 10]
Test Case: 340 | Input/Output: [(60 22 76 40) 22]
Test Case: 341 | Input/Output: [(73 76 2 84) 2]
Test Case: 342 | Input/Output: [(62 10 64 70) 10]
Test Case: 343 | Input/Output: [(69 95 56 93) 56]
Test Case: 344 | Input/Output: [(41 24 53 24) 24]
Test Case: 345 | Input/Output: [(11 15 31 42) 11]
Test Case: 346 | Input/Output: [(31 63 33 9) 9]
Test Case: 347 | Input/Output: [(73 76 47 18) 18]
Test Case: 348 | Input/Output: [(6 12 72 78) 6]
Test Case: 349 | Input/Output: [(21 41 31 76) 21]
Test Case: 350 | Input/Output: [(52 19 18 9) 9]
Test Case: 351 | Input/Output: [(2 11 68 48) 2]
Test Case: 352 | Input/Output: [(56 0 22 13) 0]
Test Case: 353 | Input/Output: [(71 69 40 75) 40]
Test Case: 354 | Input/Output: [(50 5 87 43) 5]
Test Case: 355 | Input/Output: [(6 81 52 77) 6]
Test Case: 356 | Input/Output: [(31 80 58 21) 21]
Test Case: 357 | Input/Output: [(5 31 90 55) 5]
Test Case: 358 | Input/Output: [(46 79 48 67) 46]
Test Case: 359 | Input/Output: [(80 53 50 20) 20]
Test Case: 360 | Input/Output: [(81 25 90 59) 25]
Test Case: 361 | Input/Output: [(99 24 45 66) 24]
Test Case: 362 | Input/Output: [(5 10 0 79) 0]
Test Case: 363 | Input/Output: [(76 13 14 48) 13]
Test Case: 364 | Input/Output: [(20 80 2 88) 2]
Test Case: 365 | Input/Output: [(61 13 11 42) 11]
Test Case: 366 | Input/Output: [(53 93 59 41) 41]
Test Case: 367 | Input/Output: [(34 28 84 31) 28]
Test Case: 368 | Input/Output: [(47 47 38 25) 25]
Test Case: 369 | Input/Output: [(82 37 59 99) 37]
Test Case: 370 | Input/Output: [(39 59 10 96) 10]
Test Case: 371 | Input/Output: [(41 73 90 35) 35]
Test Case: 372 | Input/Output: [(23 93 16 41) 16]
Test Case: 373 | Input/Output: [(85 53 17 82) 17]
Test Case: 374 | Input/Output: [(60 79 49 15) 15]
Test Case: 375 | Input/Output: [(19 4 49 25) 4]
Test Case: 376 | Input/Output: [(24 42 75 95) 24]
Test Case: 377 | Input/Output: [(80 91 28 20) 20]
Test Case: 378 | Input/Output: [(76 7 92 13) 7]
Test Case: 379 | Input/Output: [(82 37 92 86) 37]
Test Case: 380 | Input/Output: [(75 47 64 63) 47]
Test Case: 381 | Input/Output: [(1 15 35 22) 1]
Test Case: 382 | Input/Output: [(10 67 33 29) 10]
Test Case: 383 | Input/Output: [(55 54 80 24) 24]
Test Case: 384 | Input/Output: [(22 77 33 78) 22]
Test Case: 385 | Input/Output: [(46 22 30 96) 22]
Test Case: 386 | Input/Output: [(42 14 55 33) 14]
Test Case: 387 | Input/Output: [(9 17 78 81) 9]
Test Case: 388 | Input/Output: [(13 46 65 96) 13]
Test Case: 389 | Input/Output: [(35 37 38 48) 35]
Test Case: 390 | Input/Output: [(60 14 68 49) 14]
Test Case: 391 | Input/Output: [(10 56 43 1) 1]
Test Case: 392 | Input/Output: [(74 37 66 18) 18]
Test Case: 393 | Input/Output: [(7 28 57 50) 7]
Test Case: 394 | Input/Output: [(69 52 72 93) 52]
Test Case: 395 | Input/Output: [(77 42 96 22) 22]
Test Case: 396 | Input/Output: [(60 1 67 30) 1]
Test Case: 397 | Input/Output: [(36 70 14 46) 14]
Test Case: 398 | Input/Output: [(64 100 28 41) 28]
Test Case: 399 | Input/Output: [(47 11 86 2) 2]
Test Case: 400 | Input/Output: [(78 -10 -11 57) -11]
Test Case: 401 | Input/Output: [(-39 62 67 48) -39]
Test Case: 402 | Input/Output: [(-77 78 37 71) -77]
Test Case: 403 | Input/Output: [(-12 -47 -54 -5) -54]
Test Case: 404 | Input/Output: [(-100 -74 89 -36) -100]
Test Case: 405 | Input/Output: [(42 -92 2 27) -92]
Test Case: 406 | Input/Output: [(9 -44 60 -8) -44]
Test Case: 407 | Input/Output: [(90 -19 84 47) -19]
Test Case: 408 | Input/Output: [(-34 -21 69 18) -34]
Test Case: 409 | Input/Output: [(-82 -66 37 -44) -82]
Test Case: 410 | Input/Output: [(-54 70 89 24) -54]
Test Case: 411 | Input/Output: [(-59 5 -43 -51) -59]
Test Case: 412 | Input/Output: [(4 84 13 99) 4]
Test Case: 413 | Input/Output: [(44 14 -89 -6) -89]
Test Case: 414 | Input/Output: [(16 94 42 31) 16]
Test Case: 415 | Input/Output: [(67 -84 -47 -16) -84]
Test Case: 416 | Input/Output: [(-41 -70 14 -83) -83]
Test Case: 417 | Input/Output: [(100 -10 -58 -85) -85]
Test Case: 418 | Input/Output: [(-55 19 -19 13) -55]
Test Case: 419 | Input/Output: [(-55 23 68 21) -55]
Test Case: 420 | Input/Output: [(9 29 70 4) 4]
Test Case: 421 | Input/Output: [(-94 91 26 49) -94]
Test Case: 422 | Input/Output: [(-74 93 28 18) -74]
Test Case: 423 | Input/Output: [(-3 60 21 97) -3]
Test Case: 424 | Input/Output: [(-90 40 63 -80) -90]
Test Case: 425 | Input/Output: [(-14 4 -41 71) -41]
Test Case: 426 | Input/Output: [(-8 -3 5 -89) -89]
Test Case: 427 | Input/Output: [(-60 -76 -88 -59) -88]
Test Case: 428 | Input/Output: [(-9 -2 12 94) -9]
Test Case: 429 | Input/Output: [(17 -88 3 99) -88]
Test Case: 430 | Input/Output: [(9 -35 22 91) -35]
Test Case: 431 | Input/Output: [(-61 82 -35 -1) -61]
Test Case: 432 | Input/Output: [(57 -90 16 -38) -90]
Test Case: 433 | Input/Output: [(59 51 -75 -26) -75]
Test Case: 434 | Input/Output: [(-48 23 -47 -53) -53]
Test Case: 435 | Input/Output: [(0 -87 67 -96) -96]
Test Case: 436 | Input/Output: [(94 10 43 40) 10]
Test Case: 437 | Input/Output: [(-73 77 9 40) -73]
Test Case: 438 | Input/Output: [(92 84 16 78) 16]
Test Case: 439 | Input/Output: [(-49 15 -96 -16) -96]
Test Case: 440 | Input/Output: [(79 -87 -67 12) -87]
Test Case: 441 | Input/Output: [(3 100 24 -63) -63]
Test Case: 442 | Input/Output: [(97 10 -22 18) -22]
Test Case: 443 | Input/Output: [(-78 83 -44 44) -78]
Test Case: 444 | Input/Output: [(-21 28 92 -95) -95]
Test Case: 445 | Input/Output: [(-24 33 24 -27) -27]
Test Case: 446 | Input/Output: [(5 -90 -93 39) -93]
Test Case: 447 | Input/Output: [(26 -51 20 -28) -51]
Test Case: 448 | Input/Output: [(-26 17 -95 -96) -96]
Test Case: 449 | Input/Output: [(97 -83 37 -60) -83]
Test Case: 450 | Input/Output: [(-65 -61 35 48) -65]
Test Case: 451 | Input/Output: [(35 -93 -3 100) -93]
Test Case: 452 | Input/Output: [(-69 77 -41 65) -69]
Test Case: 453 | Input/Output: [(-56 -71 27 65) -71]
Test Case: 454 | Input/Output: [(-59 1 -10 -53) -59]
Test Case: 455 | Input/Output: [(-13 -71 -55 81) -71]
Test Case: 456 | Input/Output: [(-24 63 29 16) -24]
Test Case: 457 | Input/Output: [(3 66 -59 34) -59]
Test Case: 458 | Input/Output: [(-46 -35 29 63) -46]
Test Case: 459 | Input/Output: [(-97 26 -65 90) -97]
Test Case: 460 | Input/Output: [(-38 85 -39 69) -39]
Test Case: 461 | Input/Output: [(-52 -38 -94 -82) -94]
Test Case: 462 | Input/Output: [(20 -88 89 90) -88]
Test Case: 463 | Input/Output: [(50 13 86 -9) -9]
Test Case: 464 | Input/Output: [(-50 -33 71 -91) -91]
Test Case: 465 | Input/Output: [(5 3 -39 -80) -80]
Test Case: 466 | Input/Output: [(19 -79 -38 70) -79]
Test Case: 467 | Input/Output: [(-88 -16 82 -100) -100]
Test Case: 468 | Input/Output: [(94 31 -63 66) -63]
Test Case: 469 | Input/Output: [(-72 34 4 -53) -72]
Test Case: 470 | Input/Output: [(70 -37 -75 -24) -75]
Test Case: 471 | Input/Output: [(-78 0 97 73) -78]
Test Case: 472 | Input/Output: [(-59 34 -83 -71) -83]
Test Case: 473 | Input/Output: [(-31 -22 93 42) -31]
Test Case: 474 | Input/Output: [(61 46 36 12) 12]
Test Case: 475 | Input/Output: [(-41 -72 30 -70) -72]
Test Case: 476 | Input/Output: [(-3 -82 64 61) -82]
Test Case: 477 | Input/Output: [(-4 -12 96 68) -12]
Test Case: 478 | Input/Output: [(-100 -11 -50 -84) -100]
Test Case: 479 | Input/Output: [(-78 50 -18 99) -78]
Test Case: 480 | Input/Output: [(-15 -38 90 40) -38]
Test Case: 481 | Input/Output: [(-98 -65 83 57) -98]
Test Case: 482 | Input/Output: [(59 5 54 -72) -72]
Test Case: 483 | Input/Output: [(-3 20 69 52) -3]
Test Case: 484 | Input/Output: [(-92 40 75 -35) -92]
Test Case: 485 | Input/Output: [(-62 12 -85 63) -85]
Test Case: 486 | Input/Output: [(93 -1 -87 48) -87]
Test Case: 487 | Input/Output: [(-36 -37 -89 10) -89]
Test Case: 488 | Input/Output: [(-12 -76 -59 -19) -76]
Test Case: 489 | Input/Output: [(-3 -52 -97 16) -97]
Test Case: 490 | Input/Output: [(-41 -25 97 20) -41]
Test Case: 491 | Input/Output: [(-53 -93 -93 40) -93]
Test Case: 492 | Input/Output: [(-57 34 51 -76) -76]
Test Case: 493 | Input/Output: [(57 50 -13 -37) -37]
Test Case: 494 | Input/Output: [(-44 62 -29 -70) -70]
Test Case: 495 | Input/Output: [(25 -24 -4 -15) -24]
Test Case: 496 | Input/Output: [(30 41 34 14) 14]
Test Case: 497 | Input/Output: [(71 -35 88 -48) -48]
Test Case: 498 | Input/Output: [(-48 -3 -67 -51) -67]
Test Case: 499 | Input/Output: [(-44 -38 22 -36) -44]
Test Case: 500 | Input/Output: [(-6 34 -57 -45) -57]
Test Case: 501 | Input/Output: [(78 73 -48 -93) -93]
Test Case: 502 | Input/Output: [(-77 -87 39 -21) -87]
Test Case: 503 | Input/Output: [(7 13 -36 41) -36]
Test Case: 504 | Input/Output: [(-17 -67 -73 13) -73]
Test Case: 505 | Input/Output: [(-6 -5 -35 -39) -39]
Test Case: 506 | Input/Output: [(56 0 97 15) 0]
Test Case: 507 | Input/Output: [(-84 -38 -22 -20) -84]
Test Case: 508 | Input/Output: [(38 82 -87 35) -87]
Test Case: 509 | Input/Output: [(-96 -17 -14 -88) -96]
Test Case: 510 | Input/Output: [(94 -34 26 -5) -34]
Test Case: 511 | Input/Output: [(-80 86 52 8) -80]
Test Case: 512 | Input/Output: [(-68 -16 96 15) -68]
Test Case: 513 | Input/Output: [(89 65 68 -65) -65]
Test Case: 514 | Input/Output: [(25 -25 23 -64) -64]
Test Case: 515 | Input/Output: [(-77 30 -41 -73) -77]
Test Case: 516 | Input/Output: [(-97 85 46 -52) -97]
Test Case: 517 | Input/Output: [(34 4 -66 75) -66]
Test Case: 518 | Input/Output: [(-54 -42 -52 -40) -54]
Test Case: 519 | Input/Output: [(-84 -34 -84 19) -84]
Test Case: 520 | Input/Output: [(78 -45 -20 55) -45]
Test Case: 521 | Input/Output: [(-6 71 -63 71) -63]
Test Case: 522 | Input/Output: [(-42 -26 99 10) -42]
Test Case: 523 | Input/Output: [(-17 3 21 -11) -17]
Test Case: 524 | Input/Output: [(81 93 16 -23) -23]
Test Case: 525 | Input/Output: [(-1 -54 -47 -39) -54]
Test Case: 526 | Input/Output: [(15 58 -62 -74) -74]
Test Case: 527 | Input/Output: [(13 -24 -96 -85) -96]
Test Case: 528 | Input/Output: [(66 79 -50 -56) -56]
Test Case: 529 | Input/Output: [(-86 -75 -20 -11) -86]
Test Case: 530 | Input/Output: [(82 93 -56 61) -56]
Test Case: 531 | Input/Output: [(44 46 -15 -57) -57]
Test Case: 532 | Input/Output: [(64 -25 19 82) -25]
Test Case: 533 | Input/Output: [(-4 98 -74 -41) -74]
Test Case: 534 | Input/Output: [(-22 -6 -57 82) -57]
Test Case: 535 | Input/Output: [(96 27 84 46) 27]
Test Case: 536 | Input/Output: [(58 -91 -30 -98) -98]
Test Case: 537 | Input/Output: [(-19 -32 -3 -82) -82]
Test Case: 538 | Input/Output: [(-20 22 32 92) -20]
Test Case: 539 | Input/Output: [(-44 -99 -10 62) -99]
Test Case: 540 | Input/Output: [(-97 -19 28 46) -97]
Test Case: 541 | Input/Output: [(84 61 71 56) 56]
Test Case: 542 | Input/Output: [(-38 -9 15 -97) -97]
Test Case: 543 | Input/Output: [(-60 -89 6 86) -89]
Test Case: 544 | Input/Output: [(-78 -64 17 -79) -79]
Test Case: 545 | Input/Output: [(11 61 96 79) 11]
Test Case: 546 | Input/Output: [(12 73 32 -89) -89]
Test Case: 547 | Input/Output: [(-9 -62 40 9) -62]
Test Case: 548 | Input/Output: [(48 -6 -87 -88) -88]
Test Case: 549 | Input/Output: [(4 -31 28 46) -31]
Test Case: 550 | Input/Output: [(15 -37 -18 92) -37]
Test Case: 551 | Input/Output: [(6 50 -1 -98) -98]
Test Case: 552 | Input/Output: [(-8 38 75 16) -8]
Test Case: 553 | Input/Output: [(77 -87 83 44) -87]
Test Case: 554 | Input/Output: [(27 8 32 -33) -33]
Test Case: 555 | Input/Output: [(47 51 96 -90) -90]
Test Case: 556 | Input/Output: [(40 91 92 -78) -78]
Test Case: 557 | Input/Output: [(21 30 -38 69) -38]
Test Case: 558 | Input/Output: [(-37 41 -45 68) -45]
Test Case: 559 | Input/Output: [(-36 -38 -89 -56) -89]
Test Case: 560 | Input/Output: [(-57 -97 -64 -1) -97]
Test Case: 561 | Input/Output: [(44 39 60 91) 39]
Test Case: 562 | Input/Output: [(-96 -50 48 -96) -96]
Test Case: 563 | Input/Output: [(-23 -2 80 -5) -23]
Test Case: 564 | Input/Output: [(-83 48 77 -72) -83]
Test Case: 565 | Input/Output: [(-57 -37 -1 -7) -57]
Test Case: 566 | Input/Output: [(-14 16 79 -87) -87]
Test Case: 567 | Input/Output: [(29 17 -11 51) -11]
Test Case: 568 | Input/Output: [(-91 0 -2 -39) -91]
Test Case: 569 | Input/Output: [(-62 -72 -37 65) -72]
Test Case: 570 | Input/Output: [(-27 100 74 -96) -96]
Test Case: 571 | Input/Output: [(47 53 99 -4) -4]
Test Case: 572 | Input/Output: [(-14 -4 -77 92) -77]
Test Case: 573 | Input/Output: [(-11 12 -37 -50) -50]
Test Case: 574 | Input/Output: [(-19 -87 -9 77) -87]
Test Case: 575 | Input/Output: [(-78 96 50 -80) -80]
Test Case: 576 | Input/Output: [(94 71 77 99) 71]
Test Case: 577 | Input/Output: [(-15 -12 -13 18) -15]
Test Case: 578 | Input/Output: [(-75 54 5 -33) -75]
Test Case: 579 | Input/Output: [(99 12 7 43) 7]
Test Case: 580 | Input/Output: [(-90 -16 78 -1) -90]
Test Case: 581 | Input/Output: [(12 -46 -63 -58) -63]
Test Case: 582 | Input/Output: [(2 58 60 87) 2]
Test Case: 583 | Input/Output: [(-52 -43 60 60) -52]
Test Case: 584 | Input/Output: [(29 58 45 61) 29]
Test Case: 585 | Input/Output: [(90 -18 46 67) -18]
Test Case: 586 | Input/Output: [(-23 11 39 73) -23]
Test Case: 587 | Input/Output: [(-86 -94 -88 -13) -94]
Test Case: 588 | Input/Output: [(-27 -50 -52 -4) -52]
Test Case: 589 | Input/Output: [(25 31 -58 -87) -87]
Test Case: 590 | Input/Output: [(74 64 -25 89) -25]
Test Case: 591 | Input/Output: [(-79 5 72 46) -79]
Test Case: 592 | Input/Output: [(54 8 1 73) 1]
Test Case: 593 | Input/Output: [(12 -72 91 -83) -83]
Test Case: 594 | Input/Output: [(-32 -96 -66 -93) -96]
Test Case: 595 | Input/Output: [(60 68 2 -79) -79]
Test Case: 596 | Input/Output: [(-67 -18 -87 26) -87]
Test Case: 597 | Input/Output: [(-82 23 -41 74) -82]
Test Case: 598 | Input/Output: [(-71 -95 87 87) -95]
Test Case: 599 | Input/Output: [(67 29 -2 39) -2]
Test Case: 600 | Input/Output: [(70 62 63 17) 17]
Test Case: 601 | Input/Output: [(51 21 12 95) 12]
Test Case: 602 | Input/Output: [(44 -21 -72 -23) -72]
Test Case: 603 | Input/Output: [(44 35 8 21) 8]
Test Case: 604 | Input/Output: [(0 -31 -70 -74) -74]
Test Case: 605 | Input/Output: [(-3 81 -61 -4) -61]
Test Case: 606 | Input/Output: [(75 37 -39 42) -39]
Test Case: 607 | Input/Output: [(-34 58 24 78) -34]
Test Case: 608 | Input/Output: [(-15 25 -86 73) -86]
Test Case: 609 | Input/Output: [(54 -15 55 15) -15]
Test Case: 610 | Input/Output: [(51 91 88 10) 10]
Test Case: 611 | Input/Output: [(3 -61 -62 -86) -86]
Test Case: 612 | Input/Output: [(58 3 -45 21) -45]
Test Case: 613 | Input/Output: [(91 -47 -66 88) -66]
Test Case: 614 | Input/Output: [(19 27 -45 -94) -94]
Test Case: 615 | Input/Output: [(26 81 -78 52) -78]
Test Case: 616 | Input/Output: [(-92 -76 61 -81) -92]
Test Case: 617 | Input/Output: [(-99 35 -25 90) -99]
Test Case: 618 | Input/Output: [(94 -77 -3 25) -77]
Test Case: 619 | Input/Output: [(21 26 -55 -63) -63]
Test Case: 620 | Input/Output: [(-19 -76 38 32) -76]
Test Case: 621 | Input/Output: [(1 82 34 45) 1]
Test Case: 622 | Input/Output: [(-6 53 -62 41) -62]
Test Case: 623 | Input/Output: [(-51 38 34 64) -51]
Test Case: 624 | Input/Output: [(21 -89 76 -53) -89]
Test Case: 625 | Input/Output: [(54 87 -6 83) -6]
Test Case: 626 | Input/Output: [(-47 36 -10 -76) -76]
Test Case: 627 | Input/Output: [(46 -44 15 89) -44]
Test Case: 628 | Input/Output: [(-75 -34 -19 22) -75]
Test Case: 629 | Input/Output: [(-30 83 4 -43) -43]
Test Case: 630 | Input/Output: [(75 77 -42 -84) -84]
Test Case: 631 | Input/Output: [(78 30 -5 -90) -90]
Test Case: 632 | Input/Output: [(69 -19 67 85) -19]
Test Case: 633 | Input/Output: [(81 41 -87 61) -87]
Test Case: 634 | Input/Output: [(13 72 74 99) 13]
Test Case: 635 | Input/Output: [(18 -95 -6 -97) -97]
Test Case: 636 | Input/Output: [(-23 -95 72 40) -95]
Test Case: 637 | Input/Output: [(-21 3 -36 23) -36]
Test Case: 638 | Input/Output: [(-100 92 78 58) -100]
Test Case: 639 | Input/Output: [(27 -23 82 80) -23]
Test Case: 640 | Input/Output: [(87 85 -13 45) -13]
Test Case: 641 | Input/Output: [(40 31 -35 99) -35]
Test Case: 642 | Input/Output: [(6 41 45 11) 6]
Test Case: 643 | Input/Output: [(-68 25 -50 12) -68]
Test Case: 644 | Input/Output: [(-1 -54 12 -95) -95]
Test Case: 645 | Input/Output: [(-56 -70 -59 -25) -70]
Test Case: 646 | Input/Output: [(53 -62 6 -18) -62]
Test Case: 647 | Input/Output: [(-70 29 1 -45) -70]
Test Case: 648 | Input/Output: [(-28 -73 26 81) -73]
Test Case: 649 | Input/Output: [(-34 73 -58 -77) -77]
Test Case: 650 | Input/Output: [(33 -97 17 97) -97]
Test Case: 651 | Input/Output: [(-44 69 44 -11) -44]
Test Case: 652 | Input/Output: [(34 -72 28 -56) -72]
Test Case: 653 | Input/Output: [(-82 20 0 -88) -88]
Test Case: 654 | Input/Output: [(85 -38 46 50) -38]
Test Case: 655 | Input/Output: [(89 -77 -89 -67) -89]
Test Case: 656 | Input/Output: [(9 -3 93 31) -3]
Test Case: 657 | Input/Output: [(98 60 -41 -76) -76]
Test Case: 658 | Input/Output: [(-55 -75 -15 56) -75]
Test Case: 659 | Input/Output: [(-90 -97 -56 -65) -97]
Test Case: 660 | Input/Output: [(-76 -5 -81 49) -81]
Test Case: 661 | Input/Output: [(-24 -54 33 -95) -95]
Test Case: 662 | Input/Output: [(35 -93 20 46) -93]
Test Case: 663 | Input/Output: [(-75 15 -47 -50) -75]
Test Case: 664 | Input/Output: [(46 -48 -4 83) -48]
Test Case: 665 | Input/Output: [(64 7 53 12) 7]
Test Case: 666 | Input/Output: [(-94 62 53 -31) -94]
Test Case: 667 | Input/Output: [(-78 -73 -77 -70) -78]
Test Case: 668 | Input/Output: [(-2 26 6 -71) -71]
Test Case: 669 | Input/Output: [(-65 -34 -44 -31) -65]
Test Case: 670 | Input/Output: [(13 34 -44 51) -44]
Test Case: 671 | Input/Output: [(86 39 -16 -9) -16]
Test Case: 672 | Input/Output: [(-68 -26 1 45) -68]
Test Case: 673 | Input/Output: [(-35 6 20 59) -35]
Test Case: 674 | Input/Output: [(-67 -28 -100 61) -100]
Test Case: 675 | Input/Output: [(-34 92 -50 -76) -76]
Test Case: 676 | Input/Output: [(-92 -41 71 -8) -92]
Test Case: 677 | Input/Output: [(-53 3 -12 74) -53]
Test Case: 678 | Input/Output: [(70 79 48 29) 29]
Test Case: 679 | Input/Output: [(-55 -61 -15 80) -61]
Test Case: 680 | Input/Output: [(55 -10 9 -88) -88]
Test Case: 681 | Input/Output: [(69 -46 19 78) -46]
Test Case: 682 | Input/Output: [(-4 41 -53 37) -53]
Test Case: 683 | Input/Output: [(71 76 42 30) 30]
Test Case: 684 | Input/Output: [(-78 -96 -38 -92) -96]
Test Case: 685 | Input/Output: [(34 -61 16 34) -61]
Test Case: 686 | Input/Output: [(18 57 13 62) 13]
Test Case: 687 | Input/Output: [(-80 -87 24 -69) -87]
Test Case: 688 | Input/Output: [(92 72 47 41) 41]
Test Case: 689 | Input/Output: [(81 -65 -13 -72) -72]
Test Case: 690 | Input/Output: [(53 -17 99 -2) -17]
Test Case: 691 | Input/Output: [(75 -86 31 18) -86]
Test Case: 692 | Input/Output: [(73 44 3 36) 3]
Test Case: 693 | Input/Output: [(65 46 -20 2) -20]
Test Case: 694 | Input/Output: [(-68 92 -38 -74) -74]
Test Case: 695 | Input/Output: [(69 -27 -20 -38) -38]
Test Case: 696 | Input/Output: [(-43 -86 -18 60) -86]
Test Case: 697 | Input/Output: [(-27 -23 -60 37) -60]
Test Case: 698 | Input/Output: [(20 87 62 41) 20]
Test Case: 699 | Input/Output: [(-60 50 0 -56) -60]
Test Case: 700 | Input/Output: [(-15 6 98 -32) -32]
Test Case: 701 | Input/Output: [(82 37 39 -100) -100]
Test Case: 702 | Input/Output: [(-9 -62 -24 61) -62]
Test Case: 703 | Input/Output: [(27 87 2 -64) -64]
Test Case: 704 | Input/Output: [(86 -93 -37 64) -93]
Test Case: 705 | Input/Output: [(-64 19 86 26) -64]
Test Case: 706 | Input/Output: [(-35 -60 -67 -67) -67]
Test Case: 707 | Input/Output: [(28 -4 -25 -15) -25]
Test Case: 708 | Input/Output: [(75 54 -34 -43) -43]
Test Case: 709 | Input/Output: [(100 -64 -29 89) -64]
Test Case: 710 | Input/Output: [(69 74 -44 -29) -44]
Test Case: 711 | Input/Output: [(60 29 -67 52) -67]
Test Case: 712 | Input/Output: [(68 95 19 46) 19]
Test Case: 713 | Input/Output: [(-84 -100 76 86) -100]
Test Case: 714 | Input/Output: [(71 100 58 -20) -20]
Test Case: 715 | Input/Output: [(-13 86 -68 -41) -68]
Test Case: 716 | Input/Output: [(52 48 24 -42) -42]
Test Case: 717 | Input/Output: [(-25 -72 -54 -24) -72]
Test Case: 718 | Input/Output: [(-21 -42 -86 50) -86]
Test Case: 719 | Input/Output: [(85 67 34 91) 34]
Test Case: 720 | Input/Output: [(-82 -66 -59 9) -82]
Test Case: 721 | Input/Output: [(-44 90 97 -35) -44]
Test Case: 722 | Input/Output: [(-96 41 10 2) -96]
Test Case: 723 | Input/Output: [(-86 -96 -35 7) -96]
Test Case: 724 | Input/Output: [(9 55 -47 -43) -47]
Test Case: 725 | Input/Output: [(-36 86 -75 58) -75]
Test Case: 726 | Input/Output: [(-83 68 -14 -16) -83]
Test Case: 727 | Input/Output: [(84 -56 -22 21) -56]
Test Case: 728 | Input/Output: [(42 -82 -11 -43) -82]
Test Case: 729 | Input/Output: [(10 -62 -30 90) -62]
Test Case: 730 | Input/Output: [(-27 90 9 -6) -27]
Test Case: 731 | Input/Output: [(72 -45 -32 -71) -71]
Test Case: 732 | Input/Output: [(51 -12 43 43) -12]
Test Case: 733 | Input/Output: [(81 -6 6 78) -6]
Test Case: 734 | Input/Output: [(-24 -66 -87 36) -87]
Test Case: 735 | Input/Output: [(85 92 -95 -4) -95]
Test Case: 736 | Input/Output: [(82 -72 -88 44) -88]
Test Case: 737 | Input/Output: [(-58 -56 41 -40) -58]
Test Case: 738 | Input/Output: [(74 63 98 -99) -99]
Test Case: 739 | Input/Output: [(-76 72 82 7) -76]
Test Case: 740 | Input/Output: [(-96 61 -59 7) -96]
Test Case: 741 | Input/Output: [(-14 88 36 -42) -42]
Test Case: 742 | Input/Output: [(-76 74 73 -81) -81]
Test Case: 743 | Input/Output: [(57 -24 -64 -63) -64]
Test Case: 744 | Input/Output: [(-10 -75 14 -46) -75]
Test Case: 745 | Input/Output: [(75 84 28 89) 28]
Test Case: 746 | Input/Output: [(36 -65 -97 35) -97]
Test Case: 747 | Input/Output: [(4 -78 -54 89) -78]
Test Case: 748 | Input/Output: [(-53 -94 60 -72) -94]
Test Case: 749 | Input/Output: [(-43 56 -13 -7) -43]
Test Case: 750 | Input/Output: [(-56 -61 24 86) -61]
Test Case: 751 | Input/Output: [(-85 39 -12 -55) -85]
Test Case: 752 | Input/Output: [(-11 -86 87 24) -86]
Test Case: 753 | Input/Output: [(-31 -10 -13 -87) -87]
Test Case: 754 | Input/Output: [(42 -16 -42 43) -42]
Test Case: 755 | Input/Output: [(-46 -44 60 29) -46]
Test Case: 756 | Input/Output: [(-77 12 48 63) -77]
Test Case: 757 | Input/Output: [(-97 -2 -68 -84) -97]
Test Case: 758 | Input/Output: [(-21 42 -65 96) -65]
Test Case: 759 | Input/Output: [(53 -80 71 -30) -80]
Test Case: 760 | Input/Output: [(-4 -6 -81 -25) -81]
Test Case: 761 | Input/Output: [(-36 30 23 -97) -97]
Test Case: 762 | Input/Output: [(-88 89 -65 -77) -88]
Test Case: 763 | Input/Output: [(-32 -67 -78 84) -78]
Test Case: 764 | Input/Output: [(-16 28 88 15) -16]
Test Case: 765 | Input/Output: [(46 -92 -21 -34) -92]
Test Case: 766 | Input/Output: [(-98 27 39 -25) -98]
Test Case: 767 | Input/Output: [(98 49 33 -92) -92]
Test Case: 768 | Input/Output: [(-96 42 26 56) -96]
Test Case: 769 | Input/Output: [(15 -97 81 36) -97]
Test Case: 770 | Input/Output: [(-74 93 61 18) -74]
Test Case: 771 | Input/Output: [(-52 86 -12 15) -52]
Test Case: 772 | Input/Output: [(27 -88 -85 -54) -88]
Test Case: 773 | Input/Output: [(93 -45 -19 -77) -77]
Test Case: 774 | Input/Output: [(-96 4 13 -85) -96]
Test Case: 775 | Input/Output: [(-18 35 65 78) -18]
Test Case: 776 | Input/Output: [(0 -22 70 90) -22]
Test Case: 777 | Input/Output: [(-19 51 90 -48) -48]
Test Case: 778 | Input/Output: [(-39 -11 -11 33) -39]
Test Case: 779 | Input/Output: [(-55 -29 69 -56) -56]
Test Case: 780 | Input/Output: [(93 -9 -75 57) -75]
Test Case: 781 | Input/Output: [(-78 79 38 69) -78]
Test Case: 782 | Input/Output: [(50 65 -60 94) -60]
Test Case: 783 | Input/Output: [(36 -89 60 -25) -89]
Test Case: 784 | Input/Output: [(-71 -44 -76 66) -76]
Test Case: 785 | Input/Output: [(-74 26 -13 -41) -74]
Test Case: 786 | Input/Output: [(38 -73 -8 92) -73]
Test Case: 787 | Input/Output: [(-24 39 -17 13) -24]
Test Case: 788 | Input/Output: [(67 -67 -32 40) -67]
Test Case: 789 | Input/Output: [(-48 -29 0 -53) -53]
Test Case: 790 | Input/Output: [(34 87 79 48) 34]
Test Case: 791 | Input/Output: [(-25 -74 -88 42) -88]
Test Case: 792 | Input/Output: [(48 -9 -83 -3) -83]
Test Case: 793 | Input/Output: [(61 27 -48 -35) -48]
Test Case: 794 | Input/Output: [(26 -11 -13 -12) -13]
Test Case: 795 | Input/Output: [(3 -57 -38 -33) -57]
Test Case: 796 | Input/Output: [(47 -35 93 -88) -88]
Test Case: 797 | Input/Output: [(-27 14 -100 -92) -100]
Test Case: 798 | Input/Output: [(45 93 47 62) 45]
Test Case: 799 | Input/Output: [(-69 -36 -46 12) -69]
Test Case: 800 | Input/Output: [(-41 -74 -78 -29) -78]
Test Case: 801 | Input/Output: [(-89 -73 24 -80) -89]
Test Case: 802 | Input/Output: [(22 74 -15 0) -15]
Test Case: 803 | Input/Output: [(-54 56 87 59) -54]
Test Case: 804 | Input/Output: [(13 -79 19 -33) -79]
Test Case: 805 | Input/Output: [(-100 38 -74 81) -100]
Test Case: 806 | Input/Output: [(60 20 -49 28) -49]
Test Case: 807 | Input/Output: [(-18 26 24 77) -18]
Test Case: 808 | Input/Output: [(0 -61 92 24) -61]
Test Case: 809 | Input/Output: [(-1 52 47 -9) -9]
Test Case: 810 | Input/Output: [(-100 -41 4 -96) -100]
Test Case: 811 | Input/Output: [(-58 17 -93 -58) -93]
Test Case: 812 | Input/Output: [(78 97 -48 -32) -48]
Test Case: 813 | Input/Output: [(11 -4 21 53) -4]
Test Case: 814 | Input/Output: [(75 -1 -49 -51) -51]
Test Case: 815 | Input/Output: [(-8 42 -98 -38) -98]
Test Case: 816 | Input/Output: [(-85 -68 96 53) -85]
Test Case: 817 | Input/Output: [(33 61 -95 -58) -95]
Test Case: 818 | Input/Output: [(-22 32 89 38) -22]
Test Case: 819 | Input/Output: [(36 72 66 100) 36]
Test Case: 820 | Input/Output: [(-76 52 11 -7) -76]
Test Case: 821 | Input/Output: [(-85 22 -40 49) -85]
Test Case: 822 | Input/Output: [(-10 48 73 -94) -94]
Test Case: 823 | Input/Output: [(-67 -5 -32 -35) -67]
Test Case: 824 | Input/Output: [(40 18 31 83) 18]
Test Case: 825 | Input/Output: [(-37 88 78 67) -37]
Test Case: 826 | Input/Output: [(90 66 57 25) 25]
Test Case: 827 | Input/Output: [(-18 97 -82 18) -82]
Test Case: 828 | Input/Output: [(27 71 42 38) 27]
Test Case: 829 | Input/Output: [(80 -54 -64 50) -64]
Test Case: 830 | Input/Output: [(64 12 84 38) 12]
Test Case: 831 | Input/Output: [(-14 77 -29 -71) -71]
Test Case: 832 | Input/Output: [(5 47 -33 -35) -35]
Test Case: 833 | Input/Output: [(67 50 63 -9) -9]
Test Case: 834 | Input/Output: [(41 -57 38 37) -57]
Test Case: 835 | Input/Output: [(38 18 -70 -97) -97]
Test Case: 836 | Input/Output: [(-31 49 97 39) -31]
Test Case: 837 | Input/Output: [(35 58 96 39) 35]
Test Case: 838 | Input/Output: [(23 68 -84 -76) -84]
Test Case: 839 | Input/Output: [(-34 87 67 -6) -34]
Test Case: 840 | Input/Output: [(73 -91 -34 -66) -91]
Test Case: 841 | Input/Output: [(-91 85 59 99) -91]
Test Case: 842 | Input/Output: [(-46 56 10 -2) -46]
Test Case: 843 | Input/Output: [(-13 17 2 -18) -18]
Test Case: 844 | Input/Output: [(-35 44 10 -4) -35]
Test Case: 845 | Input/Output: [(-66 -70 10 83) -70]
Test Case: 846 | Input/Output: [(-34 -7 86 -35) -35]
Test Case: 847 | Input/Output: [(-33 -8 -94 -41) -94]
Test Case: 848 | Input/Output: [(75 -77 -31 -19) -77]
Test Case: 849 | Input/Output: [(-93 25 -43 0) -93]
Test Case: 850 | Input/Output: [(55 -18 -3 95) -18]
Test Case: 851 | Input/Output: [(-1 85 -16 -100) -100]
Test Case: 852 | Input/Output: [(75 -45 43 29) -45]
Test Case: 853 | Input/Output: [(59 -79 -69 -71) -79]
Test Case: 854 | Input/Output: [(-11 -22 80 75) -22]
Test Case: 855 | Input/Output: [(97 3 21 51) 3]
Test Case: 856 | Input/Output: [(-91 21 -92 33) -92]
Test Case: 857 | Input/Output: [(-34 -26 -29 -18) -34]
Test Case: 858 | Input/Output: [(-61 81 -91 -3) -91]
Test Case: 859 | Input/Output: [(-40 75 86 88) -40]
Test Case: 860 | Input/Output: [(97 11 70 70) 11]
Test Case: 861 | Input/Output: [(-88 46 67 -92) -92]
Test Case: 862 | Input/Output: [(-14 47 -93 94) -93]
Test Case: 863 | Input/Output: [(39 24 -97 28) -97]
Test Case: 864 | Input/Output: [(-68 24 -15 74) -68]
Test Case: 865 | Input/Output: [(-56 44 -41 -24) -56]
Test Case: 866 | Input/Output: [(-17 -25 83 -68) -68]
Test Case: 867 | Input/Output: [(57 20 34 -23) -23]
Test Case: 868 | Input/Output: [(77 73 70 40) 40]
Test Case: 869 | Input/Output: [(19 -58 25 54) -58]
Test Case: 870 | Input/Output: [(-14 -87 -73 24) -87]
Test Case: 871 | Input/Output: [(-18 31 -21 -18) -21]
Test Case: 872 | Input/Output: [(-16 -83 -55 -41) -83]
Test Case: 873 | Input/Output: [(88 17 53 48) 17]
Test Case: 874 | Input/Output: [(93 -18 -29 88) -29]
Test Case: 875 | Input/Output: [(82 -1 -43 -79) -79]
Test Case: 876 | Input/Output: [(-39 -91 -63 -74) -91]
Test Case: 877 | Input/Output: [(9 88 40 85) 9]
Test Case: 878 | Input/Output: [(-26 -2 21 85) -26]
Test Case: 879 | Input/Output: [(65 -88 -83 38) -88]
Test Case: 880 | Input/Output: [(-1 89 -17 19) -17]
Test Case: 881 | Input/Output: [(13 20 -99 -95) -99]
Test Case: 882 | Input/Output: [(-19 56 -77 87) -77]
Test Case: 883 | Input/Output: [(-98 -56 -85 -5) -98]
Test Case: 884 | Input/Output: [(12 32 -55 -84) -84]
Test Case: 885 | Input/Output: [(-73 -55 50 -44) -73]
Test Case: 886 | Input/Output: [(0 -34 -84 -100) -100]
Test Case: 887 | Input/Output: [(-1 26 -36 49) -36]
Test Case: 888 | Input/Output: [(19 91 47 -40) -40]
Test Case: 889 | Input/Output: [(40 -34 -3 -94) -94]
Test Case: 890 | Input/Output: [(-30 -92 -82 29) -92]
Test Case: 891 | Input/Output: [(54 -84 -24 -88) -88]
Test Case: 892 | Input/Output: [(-69 74 -35 62) -69]
Test Case: 893 | Input/Output: [(-94 -79 18 30) -94]
Test Case: 894 | Input/Output: [(63 -88 -17 -3) -88]
Test Case: 895 | Input/Output: [(94 35 -87 -47) -87]
Test Case: 896 | Input/Output: [(-94 11 98 49) -94]
Test Case: 897 | Input/Output: [(52 -100 -48 97) -100]
Test Case: 898 | Input/Output: [(-25 -1 48 -66) -66]
Test Case: 899 | Input/Output: [(21 -34 12 48) -34]
Test Case: 900 | Input/Output: [(-79 15 -27 -37) -79]
Test Case: 901 | Input/Output: [(9 -13 70 70) -13]
Test Case: 902 | Input/Output: [(-59 -71 -71 3) -71]
Test Case: 903 | Input/Output: [(-85 56 16 60) -85]
Test Case: 904 | Input/Output: [(64 11 87 42) 11]
Test Case: 905 | Input/Output: [(52 -77 -77 62) -77]
Test Case: 906 | Input/Output: [(-68 -20 32 -79) -79]
Test Case: 907 | Input/Output: [(-26 -56 1 -14) -56]
Test Case: 908 | Input/Output: [(42 61 96 51) 42]
Test Case: 909 | Input/Output: [(-65 35 -48 -48) -65]
Test Case: 910 | Input/Output: [(-13 -65 -72 16) -72]
Test Case: 911 | Input/Output: [(52 -61 -46 88) -61]
Test Case: 912 | Input/Output: [(71 -18 -25 31) -25]
Test Case: 913 | Input/Output: [(53 -95 -96 4) -96]
Test Case: 914 | Input/Output: [(16 34 -46 87) -46]
Test Case: 915 | Input/Output: [(5 -32 77 8) -32]
Test Case: 916 | Input/Output: [(41 -70 37 -61) -70]
Test Case: 917 | Input/Output: [(-45 -58 85 -25) -58]
Test Case: 918 | Input/Output: [(-91 90 85 81) -91]
Test Case: 919 | Input/Output: [(-60 79 88 -64) -64]
Test Case: 920 | Input/Output: [(-75 -27 -22 -9) -75]
Test Case: 921 | Input/Output: [(-45 65 -2 39) -45]
Test Case: 922 | Input/Output: [(-80 -51 -56 16) -80]
Test Case: 923 | Input/Output: [(-60 -63 50 -56) -63]
Test Case: 924 | Input/Output: [(-61 71 -67 19) -67]
Test Case: 925 | Input/Output: [(44 56 -74 -27) -74]
Test Case: 926 | Input/Output: [(-69 18 -80 -26) -80]
Test Case: 927 | Input/Output: [(-17 -1 -36 77) -36]
Test Case: 928 | Input/Output: [(-49 -98 30 -90) -98]
Test Case: 929 | Input/Output: [(62 54 94 -18) -18]
Test Case: 930 | Input/Output: [(-9 -78 -60 70) -78]
Test Case: 931 | Input/Output: [(41 26 22 32) 22]
Test Case: 932 | Input/Output: [(-37 42 59 83) -37]
Test Case: 933 | Input/Output: [(83 24 -40 92) -40]
Test Case: 934 | Input/Output: [(-10 50 23 -16) -16]
Test Case: 935 | Input/Output: [(-80 18 64 88) -80]
Test Case: 936 | Input/Output: [(95 -52 -42 74) -52]
Test Case: 937 | Input/Output: [(-87 -97 -9 -60) -97]
Test Case: 938 | Input/Output: [(100 67 22 72) 22]
Test Case: 939 | Input/Output: [(97 65 -18 -97) -97]
Test Case: 940 | Input/Output: [(-70 40 -64 92) -70]
Test Case: 941 | Input/Output: [(24 6 91 -43) -43]
Test Case: 942 | Input/Output: [(-87 98 92 86) -87]
Test Case: 943 | Input/Output: [(22 -13 -64 98) -64]
Test Case: 944 | Input/Output: [(77 -56 73 -9) -56]
Test Case: 945 | Input/Output: [(-37 38 84 35) -37]
Test Case: 946 | Input/Output: [(-2 -100 59 -89) -100]
Test Case: 947 | Input/Output: [(-4 -35 100 28) -35]
Test Case: 948 | Input/Output: [(92 -23 -37 -90) -90]
Test Case: 949 | Input/Output: [(-46 -20 43 -53) -53]
Test Case: 950 | Input/Output: [(10 -86 -32 44) -86]
Test Case: 951 | Input/Output: [(63 -58 51 23) -58]
Test Case: 952 | Input/Output: [(-23 92 -38 84) -38]
Test Case: 953 | Input/Output: [(-63 31 45 -50) -63]
Test Case: 954 | Input/Output: [(-25 -98 -60 29) -98]
Test Case: 955 | Input/Output: [(-35 -49 23 -85) -85]
Test Case: 956 | Input/Output: [(58 91 -58 -52) -58]
Test Case: 957 | Input/Output: [(-86 -84 -39 69) -86]
Test Case: 958 | Input/Output: [(54 3 -59 -68) -68]
Test Case: 959 | Input/Output: [(87 -97 68 39) -97]
Test Case: 960 | Input/Output: [(-49 83 -49 70) -49]
Test Case: 961 | Input/Output: [(-33 -82 90 45) -82]
Test Case: 962 | Input/Output: [(30 10 -93 -38) -93]
Test Case: 963 | Input/Output: [(-37 68 97 -96) -96]
Test Case: 964 | Input/Output: [(-21 -83 13 86) -83]
Test Case: 965 | Input/Output: [(78 -19 18 -90) -90]
Test Case: 966 | Input/Output: [(-62 -70 29 -91) -91]
Test Case: 967 | Input/Output: [(-72 9 49 -27) -72]
Test Case: 968 | Input/Output: [(-46 17 -41 50) -46]
Test Case: 969 | Input/Output: [(71 -51 66 9) -51]
Test Case: 970 | Input/Output: [(44 11 62 -52) -52]
Test Case: 971 | Input/Output: [(-16 -71 -39 -39) -71]
Test Case: 972 | Input/Output: [(77 41 37 31) 31]
Test Case: 973 | Input/Output: [(-19 -64 73 -65) -65]
Test Case: 974 | Input/Output: [(-48 -51 47 -89) -89]
Test Case: 975 | Input/Output: [(-53 -28 -33 74) -53]
Test Case: 976 | Input/Output: [(31 -63 81 -62) -63]
Test Case: 977 | Input/Output: [(-50 -36 -74 76) -74]
Test Case: 978 | Input/Output: [(-52 50 -97 -76) -97]
Test Case: 979 | Input/Output: [(13 -32 15 7) -32]
Test Case: 980 | Input/Output: [(-28 85 4 -30) -30]
Test Case: 981 | Input/Output: [(1 -67 -28 26) -67]
Test Case: 982 | Input/Output: [(-43 -56 -39 -45) -56]
Test Case: 983 | Input/Output: [(-78 -80 -75 -61) -80]
Test Case: 984 | Input/Output: [(-19 -79 99 28) -79]
Test Case: 985 | Input/Output: [(50 -74 -55 67) -74]
Test Case: 986 | Input/Output: [(-93 -88 -54 -15) -93]
Test Case: 987 | Input/Output: [(47 -42 -36 -70) -70]
Test Case: 988 | Input/Output: [(2 9 5 -56) -56]
Test Case: 989 | Input/Output: [(70 79 22 -64) -64]
Test Case: 990 | Input/Output: [(-46 -30 -46 61) -46]
Test Case: 991 | Input/Output: [(95 -63 21 -45) -63]
Test Case: 992 | Input/Output: [(-67 43 25 48) -67]
Test Case: 993 | Input/Output: [(6 -27 -50 17) -50]
Test Case: 994 | Input/Output: [(2 72 92 37) 2]
Test Case: 995 | Input/Output: [(56 -64 57 92) -64]
Test Case: 996 | Input/Output: [(53 18 -19 -90) -90]
Test Case: 997 | Input/Output: [(44 5 -35 22) -35]
Test Case: 998 | Input/Output: [(-44 57 89 16) -44]
Test Case: 999 | Input/Output: [(-79 84 65 -75) -79]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 91 -80 -24 34 118 88 -97 -106 -119 -115 -113 117 -68 -5 121 96
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-26 -50 -50 -50] -50] [[50 -52 -52 -52] -52] [[-66 -66 -22 -66] -66] [[85 -36 85 85] -36] [[91 91 -62 91] -62] [[43 43 67 43] 43] [[-74 -74 -74 -83] -83] [[-4 77 -4 -4] -4] [[-7 -79 -7 -7] -79] [[-60 -60 -11 -60] -60] [(85 85 85 85) 85] [(89 89 89 89) 89] [(21 21 21 21) 21] [(-64 -64 -64 -64) -64] [(59 59 59 59) 59] [(97 17 78 47) 17] [(3 75 35 8) 3] [(78 72 99 52) 52] [(32 75 60 100) 32] [(2 31 34 36) 2] [(1 52 17 75) 1] [(62 45 2 57) 2] [(26 62 44 52) 26] [(9 59 87 89) 9] [(60 6 56 20) 6] [(9 100 59 78) 9] [(35 47 7 20) 7] [(88 73 28 91) 28] [(60 29 55 30) 29] [(78 46 38 48) 38] [(49 14 96 93) 14] [(8 88 8 76) 8] [(66 3 11 57) 3] [(70 39 60 85) 39] [(64 64 53 28) 28] [(38 -95 -39 -63) -95] [(40 -48 -56 -24) -56] [(63 39 -80 -58) -80] [(-77 -14 -85 74) -85] [(-58 30 51 -47) -58] [(70 -94 87 97) -94] [(86 -91 35 45) -91] [(46 -18 -61 20) -61] [(-72 -11 66 23) -72] [(-29 -30 -6 40) -30] [(-77 -68 72 -100) -100] [(11 2 -12 0) -12] [(50 20 56 45) 20] [(26 6 -66 92) -66] [(40 -80 -96 -10) -96] [(83 3 15 -90) -90] [(-54 -50 5 -92) -92] [(-31 54 52 -76) -76] [(69 98 37 8) 8] [(-81 42 -21 -42) -81] [(-40 66 -80 67) -80] [(95 55 35 12) 12] [(-66 93 86 1) -66] [(-65 -63 -53 30) -65] [(19 87 93 -49) -49] [(79 -11 -86 21) -86] [(-21 -63 41 -8) -63] [(36 55 -74 -94) -94] [(39 87 81 39) 39] [(21 -88 12 -6) -88] [(-73 -65 -47 -86) -86] [(-47 -74 64 -90) -90] [(63 -17 -79 -41) -79] [(-42 84 54 -38) -42] [(85 -4 -4 -67) -67] [(-10 -1 -56 30) -56] [(-39 -48 -64 49) -64] [(-62 -42 38 -100) -100] [(76 76 -47 50) -47] [(-14 -62 -93 27) -93] [(-34 60 27 28) -34] [(-53 14 -28 79) -53] [(87 62 4 -70) -70] [(0 -45 85 99) -45] [(-25 7 -55 -59) -59] [(31 -54 -53 80) -54] [(-51 -92 -35 -55) -92] [(-11 22 -53 21) -53] [(90 43 93 98) 43] [(88 32 44 43) 32] [(-42 -29 50 78) -42] [(82 -99 -97 28) -99] [(-45 24 -67 34) -67] [(61 -74 -95 8) -95] [(-25 40 -24 58) -25] [(-4 96 96 -24) -24] [(69 44 96 -35) -35] [(-89 -31 -37 45) -89] [(48 -3 57 -82) -82] [(45 -100 31 -88) -100])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 626
Test mean error for best: 0.62600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -26                
Correct output: -52                 | Program output: 50                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: 85                 
Correct output: -62                 | Program output: 91                 
Correct output: 43                  | Program output: 43                 
Correct output: -83                 | Program output: -74                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 85                  | Program output: 85                 
Correct output: 89                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: 59                  | Program output: 59                 
Correct output: 17                  | Program output: 97                 
Correct output: 3                   | Program output: 3                  
Correct output: 52                  | Program output: 78                 
Correct output: 32                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 62                 
Correct output: 26                  | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 35                 
Correct output: 28                  | Program output: 88                 
Correct output: 29                  | Program output: 60                 
Correct output: 38                  | Program output: 78                 
Correct output: 14                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 66                 
Correct output: 39                  | Program output: 70                 
Correct output: 28                  | Program output: 64                 
Correct output: -95                 | Program output: 38                 
Correct output: -56                 | Program output: 40                 
Correct output: -80                 | Program output: 63                 
Correct output: -85                 | Program output: -77                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 70                 
Correct output: -91                 | Program output: 86                 
Correct output: -61                 | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -29                
Correct output: -100                | Program output: -77                
Correct output: -12                 | Program output: 11                 
Correct output: 20                  | Program output: 50                 
Correct output: -66                 | Program output: 26                 
Correct output: -96                 | Program output: 40                 
Correct output: -90                 | Program output: 83                 
Correct output: -92                 | Program output: -54                
Correct output: -76                 | Program output: -31                
Correct output: 8                   | Program output: 69                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -40                
Correct output: 12                  | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: 19                 
Correct output: -86                 | Program output: 79                 
Correct output: -63                 | Program output: -21                
Correct output: -94                 | Program output: 36                 
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: 21                 
Correct output: -86                 | Program output: -73                
Correct output: -90                 | Program output: -47                
Correct output: -79                 | Program output: 63                 
Correct output: -42                 | Program output: -42                
Correct output: -67                 | Program output: 85                 
Correct output: -56                 | Program output: -10                
Correct output: -64                 | Program output: -39                
Correct output: -100                | Program output: -62                
Correct output: -47                 | Program output: 76                 
Correct output: -93                 | Program output: -14                
Correct output: -34                 | Program output: -34                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: 87                 
Correct output: -45                 | Program output: 0                  
Correct output: -59                 | Program output: -25                
Correct output: -54                 | Program output: 31                 
Correct output: -92                 | Program output: -51                
Correct output: -53                 | Program output: -11                
Correct output: 43                  | Program output: 90                 
Correct output: 32                  | Program output: 88                 
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: 82                 
Correct output: -67                 | Program output: -45                
Correct output: -95                 | Program output: 61                 
Correct output: -25                 | Program output: -25                
Correct output: -24                 | Program output: -4                 
Correct output: -35                 | Program output: 69                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: 48                 
Correct output: -100                | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_326} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_74} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_110} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_shove boolean_frominteger in1 integer_add boolean_pop print_integer print_integer integer_gte integer_add exec_rot () (integer_gt integer_stackdepth exec_dup_items boolean_rot) (integer_max integer_mult integer_gte tagged_326 boolean_and boolean_not integer_eq exec_flush exec_shove (integer_sub) boolean_yankdup integer_empty exec_dup_items exec_y_when_autoconstructing () exec_do*while (integer_eq) boolean_frominteger integer_dec) integer_gte exec_when (exec_yank) integer_pop exec_dup_items in3 boolean_frominteger integer_rot boolean_stackdepth exec_if () (exec_y_when_autoconstructing () exec_do*while (print_boolean in4 integer_dup_times exec_do*while () exec_eq exec_y (in1 exec_dup_times (exec_k_when_autoconstructing (boolean_or exec_eq integer_yank exec_yank integer_pop tagged_74 integer_rot) (boolean_invert_first_then_and) boolean_invert_second_then_and in3) integer_gte integer_mult exec_yank boolean_invert_second_then_and) integer_min integer_max) integer_dec tagged_110) boolean_stackdepth exec_do*while () integer_swap boolean_yank integer_shove boolean_stackdepth in4 integer_stackdepth integer_max boolean_swap print_boolean)
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_326} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_74} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_110} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_shove boolean_frominteger in1 integer_add boolean_pop print_integer print_integer integer_gte integer_add exec_rot () (integer_gt integer_stackdepth exec_dup_items boolean_rot) (integer_max integer_mult integer_gte tagged_326 boolean_and boolean_not integer_eq exec_flush exec_shove (integer_sub) boolean_yankdup integer_empty exec_dup_items exec_y_when_autoconstructing () exec_do*while (integer_eq) boolean_frominteger integer_dec) integer_gte exec_when (exec_yank) integer_pop exec_dup_items in3 boolean_frominteger integer_rot boolean_stackdepth exec_if () (exec_y_when_autoconstructing () exec_do*while (print_boolean in4 integer_dup_times exec_do*while () exec_eq exec_y (in1 exec_dup_times (exec_k_when_autoconstructing (boolean_or exec_eq integer_yank exec_yank integer_pop tagged_74 integer_rot) (boolean_invert_first_then_and) boolean_invert_second_then_and in3) integer_gte integer_mult exec_yank boolean_invert_second_then_and) integer_min integer_max) integer_dec tagged_110) boolean_stackdepth exec_do*while () integer_swap boolean_yank integer_shove boolean_stackdepth in4 integer_stackdepth integer_max boolean_swap print_boolean)
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 5 4 1 4 3 6 3 2 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (15 5 4 1 4 3 6 3 2 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_326} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_if} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_74} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_110} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean})
Best program: (boolean_shove boolean_frominteger in1 integer_add boolean_pop print_integer print_integer integer_gte integer_add exec_rot () (integer_gt integer_stackdepth exec_dup_items boolean_rot) (integer_max integer_mult integer_gte tagged_326 boolean_and boolean_not integer_eq exec_flush exec_shove (integer_sub) boolean_yankdup integer_empty exec_dup_items exec_y_when_autoconstructing () exec_do*while (integer_eq) boolean_frominteger integer_dec) integer_gte exec_when (exec_yank) integer_pop exec_dup_items in3 boolean_frominteger integer_rot boolean_stackdepth exec_if () (exec_y_when_autoconstructing () exec_do*while (print_boolean in4 integer_dup_times exec_do*while () exec_eq exec_y (in1 exec_dup_times (exec_k_when_autoconstructing (boolean_or exec_eq integer_yank exec_yank integer_pop tagged_74 integer_rot) (boolean_invert_first_then_and) boolean_invert_second_then_and in3) integer_gte integer_mult exec_yank boolean_invert_second_then_and) integer_min integer_max) integer_dec tagged_110) boolean_stackdepth exec_do*while () integer_swap boolean_yank integer_shove boolean_stackdepth in4 integer_stackdepth integer_max boolean_swap print_boolean)
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 82
Size: 100
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 9.955
Median total errors in population: 10
Error averages by case: (0.985 0.995 0.996 0.999 0.996 0.997 0.994 0.997 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.838
Average program size in population (points): 68.471
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 448113
--- Timings ---
Current time: 1559594124231 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 28.7%
Fitness Testing:      1.8 seconds, 67.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: 85                 
Correct output: -62                 | Program output: 91                 
Correct output: 43                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 85                  | Program output: 85                 
Correct output: 89                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: 59                  | Program output: 59                 
Correct output: 17                  | Program output: 47                 
Correct output: 3                   | Program output: 8                  
Correct output: 52                  | Program output: 52                 
Correct output: 32                  | Program output: 100                
Correct output: 2                   | Program output: 36                 
Correct output: 1                   | Program output: 75                 
Correct output: 2                   | Program output: 57                 
Correct output: 26                  | Program output: 52                 
Correct output: 9                   | Program output: 89                 
Correct output: 6                   | Program output: 20                 
Correct output: 9                   | Program output: 78                 
Correct output: 7                   | Program output: 20                 
Correct output: 28                  | Program output: 91                 
Correct output: 29                  | Program output: 30                 
Correct output: 38                  | Program output: 48                 
Correct output: 14                  | Program output: 93                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 57                 
Correct output: 39                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: -95                 | Program output: -63                
Correct output: -56                 | Program output: -24                
Correct output: -80                 | Program output: -58                
Correct output: -85                 | Program output: 74                 
Correct output: -58                 | Program output: -47                
Correct output: -94                 | Program output: 97                 
Correct output: -91                 | Program output: 45                 
Correct output: -61                 | Program output: 20                 
Correct output: -72                 | Program output: 23                 
Correct output: -30                 | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: -12                 | Program output: 0                  
Correct output: 20                  | Program output: 45                 
Correct output: -66                 | Program output: 92                 
Correct output: -96                 | Program output: -10                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: 8                   | Program output: 8                  
Correct output: -81                 | Program output: -42                
Correct output: -80                 | Program output: 67                 
Correct output: 12                  | Program output: 12                 
Correct output: -66                 | Program output: 1                  
Correct output: -65                 | Program output: 30                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: 21                 
Correct output: -63                 | Program output: -8                 
Correct output: -94                 | Program output: -94                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -41                
Correct output: -42                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: 30                 
Correct output: -64                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: 50                 
Correct output: -93                 | Program output: 27                 
Correct output: -34                 | Program output: 28                 
Correct output: -53                 | Program output: 79                 
Correct output: -70                 | Program output: -70                
Correct output: -45                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: 80                 
Correct output: -92                 | Program output: -55                
Correct output: -53                 | Program output: 21                 
Correct output: 43                  | Program output: 98                 
Correct output: 32                  | Program output: 43                 
Correct output: -42                 | Program output: 78                 
Correct output: -99                 | Program output: 28                 
Correct output: -67                 | Program output: 34                 
Correct output: -95                 | Program output: 8                  
Correct output: -25                 | Program output: 58                 
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -89                 | Program output: 45                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 2, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction 18} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_empty integer_max integer_rot integer_flush integer_pop print_integer boolean_yankdup boolean_invert_first_then_and exec_noop in4 print_integer exec_flush integer_pop integer_gte boolean_dup exec_do*count (integer_sub) exec_stackdepth integer_inc boolean_not integer_div exec_do*while (boolean_swap integer_gte boolean_not exec_while (integer_eq boolean_swap integer_pop exec_s (integer_flush) (integer_min integer_dup_times exec_stackdepth boolean_stackdepth) (exec_s (exec_shove (exec_do*while (integer_dec) in4 boolean_shove) exec_do*count (integer_yank exec_eq)) (integer_sub) (integer_lt boolean_yankdup exec_k () (exec_dup_items integer_max exec_dup_times (integer_mod integer_yank boolean_dup_times exec_k () (boolean_yankdup print_newline exec_do*while (boolean_and boolean_xor integer_add exec_when (exec_k_when_autoconstructing (integer_lt) (exec_stackdepth) 18) integer_lt boolean_dup_items exec_noop exec_do*range (boolean_swap boolean_frominteger))))))))))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 95
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 2, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction 18} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_empty integer_max integer_rot integer_flush integer_pop print_integer boolean_yankdup boolean_invert_first_then_and exec_noop in4 print_integer exec_flush integer_pop integer_gte boolean_dup exec_do*count (integer_sub) exec_stackdepth integer_inc boolean_not integer_div exec_do*while (boolean_swap integer_gte boolean_not exec_while (integer_eq boolean_swap integer_pop exec_s (integer_flush) (integer_min integer_dup_times exec_stackdepth boolean_stackdepth) (exec_s (exec_shove (exec_do*while (integer_dec) in4 boolean_shove) exec_do*count (integer_yank exec_eq)) (integer_sub) (integer_lt boolean_yankdup exec_k () (exec_dup_items integer_max exec_dup_times (integer_mod integer_yank boolean_dup_times exec_k () (boolean_yankdup print_newline exec_do*while (boolean_and boolean_xor integer_add exec_when (exec_k_when_autoconstructing (integer_lt) (exec_stackdepth) 18) integer_lt boolean_dup_items exec_noop exec_do*range (boolean_swap boolean_frominteger))))))))))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 95
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (609 361 117 113 143 114 283 114 143 349)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (609 361 117 113 143 114 283 114 143 349)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap})
Best program: (exec_empty integer_rot integer_flush integer_pop print_integer boolean_yankdup boolean_invert_first_then_and boolean_swap exec_noop in4 print_integer exec_flush integer_pop exec_pop (boolean_dup exec_s_when_autoconstructing (exec_do*count (exec_stackdepth integer_inc exec_do*while (boolean_swap integer_gte boolean_not exec_while (boolean_swap integer_pop integer_flush) exec_empty integer_min exec_stackdepth boolean_stackdepth) exec_s (exec_shove (exec_do*while (integer_dec) boolean_shove) exec_do*count (integer_yank exec_eq)) (integer_lt integer_sub) (integer_lt exec_y_when_autoconstructing (boolean_yankdup exec_k () (integer_max exec_dup_times (exec_flush) integer_mod integer_yank boolean_dup_times exec_k () (boolean_yankdup print_newline exec_do*while (boolean_and boolean_xor integer_add exec_when (exec_k_when_autoconstructing (exec_stackdepth) (integer_dec integer_lt boolean_dup_items boolean_swap) exec_do*range (boolean_swap boolean_swap))))))))) () ()))
Errors: [0 1 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 68
Size: 93
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.654
Median total errors in population: 7
Error averages by case: (0.391 0.639 0.883 0.887 0.857 0.886 0.717 0.886 0.857 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.988
Average program size in population (points): 78.593
Average percent parens in population: 0.228
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1016890
--- Timings ---
Current time: 1559594126514 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.1 seconds, 41.7%
Fitness Testing:      2.5 seconds, 49.7%
Report:               0.3 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: 85                 
Correct output: -62                 | Program output: 91                 
Correct output: 43                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 85                  | Program output: 85                 
Correct output: 89                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: 59                  | Program output: 59                 
Correct output: 17                  | Program output: 47                 
Correct output: 3                   | Program output: 8                  
Correct output: 52                  | Program output: 52                 
Correct output: 32                  | Program output: 100                
Correct output: 2                   | Program output: 36                 
Correct output: 1                   | Program output: 75                 
Correct output: 2                   | Program output: 57                 
Correct output: 26                  | Program output: 52                 
Correct output: 9                   | Program output: 89                 
Correct output: 6                   | Program output: 20                 
Correct output: 9                   | Program output: 78                 
Correct output: 7                   | Program output: 20                 
Correct output: 28                  | Program output: 91                 
Correct output: 29                  | Program output: 30                 
Correct output: 38                  | Program output: 48                 
Correct output: 14                  | Program output: 93                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 57                 
Correct output: 39                  | Program output: 85                 
Correct output: 28                  | Program output: 28                 
Correct output: -95                 | Program output: -63                
Correct output: -56                 | Program output: -24                
Correct output: -80                 | Program output: -58                
Correct output: -85                 | Program output: 74                 
Correct output: -58                 | Program output: -47                
Correct output: -94                 | Program output: 97                 
Correct output: -91                 | Program output: 45                 
Correct output: -61                 | Program output: 20                 
Correct output: -72                 | Program output: 23                 
Correct output: -30                 | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: -12                 | Program output: 0                  
Correct output: 20                  | Program output: 45                 
Correct output: -66                 | Program output: 92                 
Correct output: -96                 | Program output: -10                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: 8                   | Program output: 8                  
Correct output: -81                 | Program output: -42                
Correct output: -80                 | Program output: 67                 
Correct output: 12                  | Program output: 12                 
Correct output: -66                 | Program output: 1                  
Correct output: -65                 | Program output: 30                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: 21                 
Correct output: -63                 | Program output: -8                 
Correct output: -94                 | Program output: -94                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -41                
Correct output: -42                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: 30                 
Correct output: -64                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: 50                 
Correct output: -93                 | Program output: 27                 
Correct output: -34                 | Program output: 28                 
Correct output: -53                 | Program output: 79                 
Correct output: -70                 | Program output: -70                
Correct output: -45                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: 80                 
Correct output: -92                 | Program output: -55                
Correct output: -53                 | Program output: 21                 
Correct output: 43                  | Program output: 98                 
Correct output: 32                  | Program output: 43                 
Correct output: -42                 | Program output: 78                 
Correct output: -99                 | Program output: 28                 
Correct output: -67                 | Program output: 34                 
Correct output: -95                 | Program output: 8                  
Correct output: -25                 | Program output: 58                 
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -89                 | Program output: 45                 
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_206} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_stackdepth integer_dup_times tagged_206 boolean_flush boolean_stackdepth in4 integer_fromboolean integer_empty print_integer integer_gte exec_noop integer_min boolean_flush integer_fromboolean boolean_or integer_fromboolean boolean_not exec_do*range ())
Lexicase best errors: [1 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_206} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_stackdepth integer_dup_times tagged_206 boolean_flush boolean_stackdepth in4 integer_fromboolean integer_empty print_integer integer_gte exec_noop integer_min boolean_flush integer_fromboolean boolean_or integer_fromboolean boolean_not exec_do*range ())
Zero cases best errors: [1 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (149 150 442 270 18 16 270 270 18 270)
Population mean number of elite cases: 1.87
Count of perfect (error zero) individuals by case: (149 150 442 270 18 16 270 270 18 270)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_207} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dec} {:close 0, :instruction tag_integer_834} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap})
Best program: (exec_empty integer_rot integer_flush integer_pop print_integer integer_dec boolean_yankdup boolean_invert_first_then_and boolean_swap exec_noop exec_do*range (integer_inc in4 print_integer integer_pop integer_pop integer_gte integer_dup boolean_dup tagged_207 exec_stackdepth integer_inc boolean_not boolean_swap integer_gte boolean_not exec_while (integer_eq boolean_swap integer_flush integer_pop exec_s (integer_flush) (exec_empty integer_min boolean_dup_times) (integer_dup_times exec_stackdepth boolean_stackdepth) exec_s (exec_shove (exec_do*while (integer_dec) tag_integer_834 boolean_shove) exec_do*count (integer_yank exec_eq)) (integer_lt boolean_yankdup exec_k () (exec_dup_items integer_max exec_dup_times (integer_mod integer_yank boolean_dup_times exec_k () (boolean_yankdup print_newline exec_do*while (boolean_and boolean_xor boolean_dup_items integer_add exec_when (exec_k_when_autoconstructing (exec_stackdepth) (integer_lt boolean_dup_items boolean_swap) boolean_pop boolean_yankdup exec_noop exec_do*range (boolean_swap))))))) ())))
Errors: [1 1 0 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 76
Size: 98
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 8.127
Median total errors in population: 10
Error averages by case: (0.851 0.85 0.558 0.73 0.982 0.984 0.73 0.73 0.982 0.73)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.096
Average program size in population (points): 77.242
Average percent parens in population: 0.241
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1398595
--- Timings ---
Current time: 1559594128652 milliseconds
Total Time:           7.0 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.4 seconds, 48.4%
Fitness Testing:      3.0 seconds, 42.5%
Report:               0.5 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: 91                 
Correct output: 43                  | Program output: 43                 
Correct output: -83                 | Program output: -74                
Correct output: -4                  | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: 85                  | Program output: 85                 
Correct output: 89                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: 59                  | Program output: 59                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 75                 
Correct output: 52                  | Program output: 72                 
Correct output: 32                  | Program output: 75                 
Correct output: 2                   | Program output: 31                 
Correct output: 1                   | Program output: 52                 
Correct output: 2                   | Program output: 45                 
Correct output: 26                  | Program output: 62                 
Correct output: 9                   | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 100                
Correct output: 7                   | Program output: 47                 
Correct output: 28                  | Program output: 73                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 46                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 88                 
Correct output: 3                   | Program output: 3                  
Correct output: 39                  | Program output: 39                 
Correct output: 28                  | Program output: 64                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -48                
Correct output: -80                 | Program output: 39                 
Correct output: -85                 | Program output: -14                
Correct output: -58                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -18                
Correct output: -72                 | Program output: -11                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -68                
Correct output: -12                 | Program output: 2                  
Correct output: 20                  | Program output: 20                 
Correct output: -66                 | Program output: 6                  
Correct output: -96                 | Program output: -80                
Correct output: -90                 | Program output: 3                  
Correct output: -92                 | Program output: -50                
Correct output: -76                 | Program output: 54                 
Correct output: 8                   | Program output: 98                 
Correct output: -81                 | Program output: 42                 
Correct output: -80                 | Program output: 66                 
Correct output: 12                  | Program output: 55                 
Correct output: -66                 | Program output: 93                 
Correct output: -65                 | Program output: -63                
Correct output: -49                 | Program output: 87                 
Correct output: -86                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -94                 | Program output: 55                 
Correct output: 39                  | Program output: 87                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -65                
Correct output: -90                 | Program output: -74                
Correct output: -79                 | Program output: -17                
Correct output: -42                 | Program output: 84                 
Correct output: -67                 | Program output: -4                 
Correct output: -56                 | Program output: -1                 
Correct output: -64                 | Program output: -48                
Correct output: -100                | Program output: -42                
Correct output: -47                 | Program output: 76                 
Correct output: -93                 | Program output: -62                
Correct output: -34                 | Program output: 60                 
Correct output: -53                 | Program output: 14                 
Correct output: -70                 | Program output: 62                 
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: 7                  
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 22                 
Correct output: 43                  | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -42                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: 24                 
Correct output: -95                 | Program output: -74                
Correct output: -25                 | Program output: 40                 
Correct output: -24                 | Program output: 96                 
Correct output: -35                 | Program output: 44                 
Correct output: -89                 | Program output: -31                
Correct output: -82                 | Program output: -3                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yankdup} {:close 1, :instruction -55} {:close 0, :instruction in2} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_204} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_133} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction -70} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_544} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_shove exec_while (integer_yankdup) -55 in2 boolean_invert_second_then_and boolean_dup print_integer in1 exec_k (exec_yankdup exec_k_when_autoconstructing (exec_if (in2) (integer_lt boolean_xor) integer_gt) () boolean_invert_second_then_and boolean_yank) (boolean_yankdup integer_yankdup) integer_lte exec_while () boolean_dup_items integer_mod integer_fromboolean integer_shove print_integer exec_k (boolean_invert_second_then_and boolean_xor exec_do*times () integer_swap exec_do*while (boolean_yank integer_max boolean_shove boolean_xor) integer_mult integer_mult in4 boolean_dup tagged_204 exec_swap (integer_rot integer_gte) (exec_if (integer_eq exec_eq exec_shove ()) (boolean_and integer_lt integer_shove boolean_flush exec_k () (tagged_133 exec_do*times () integer_shove exec_noop exec_s_when_autoconstructing (exec_noop) (exec_yankdup in2 exec_empty boolean_stackdepth exec_y_when_autoconstructing () boolean_yankdup integer_inc) (exec_flush) boolean_eq -70 exec_do*count (print_boolean boolean_and tag_boolean_544 boolean_rot exec_do*times (exec_s_when_autoconstructing (integer_pop integer_min) () ())))))) ())
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 110
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yankdup} {:close 1, :instruction -55} {:close 0, :instruction in2} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_204} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_133} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction -70} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_544} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_shove exec_while (integer_yankdup) -55 in2 boolean_invert_second_then_and boolean_dup print_integer in1 exec_k (exec_yankdup exec_k_when_autoconstructing (exec_if (in2) (integer_lt boolean_xor) integer_gt) () boolean_invert_second_then_and boolean_yank) (boolean_yankdup integer_yankdup) integer_lte exec_while () boolean_dup_items integer_mod integer_fromboolean integer_shove print_integer exec_k (boolean_invert_second_then_and boolean_xor exec_do*times () integer_swap exec_do*while (boolean_yank integer_max boolean_shove boolean_xor) integer_mult integer_mult in4 boolean_dup tagged_204 exec_swap (integer_rot integer_gte) (exec_if (integer_eq exec_eq exec_shove ()) (boolean_and integer_lt integer_shove boolean_flush exec_k () (tagged_133 exec_do*times () integer_shove exec_noop exec_s_when_autoconstructing (exec_noop) (exec_yankdup in2 exec_empty boolean_stackdepth exec_y_when_autoconstructing () boolean_yankdup integer_inc) (exec_flush) boolean_eq -70 exec_do*count (print_boolean boolean_and tag_boolean_544 boolean_rot exec_do*times (exec_s_when_autoconstructing (integer_pop integer_min) () ())))))) ())
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 110
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 302 1 192 152 194 302 157 155 150)
Population mean number of elite cases: 1.76
Count of perfect (error zero) individuals by case: (157 302 1 192 152 194 302 157 155 150)
Population mean number of perfect (error zero) cases: 1.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_197} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 2, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop})
Best program: (boolean_shove boolean_not integer_min exec_yank boolean_swap boolean_flush tagged_197 boolean_empty integer_gt boolean_frominteger boolean_pop integer_stackdepth boolean_and in2 print_integer exec_y (boolean_not integer_eq) in2 exec_s_when_autoconstructing (exec_yankdup boolean_xor exec_do*times (boolean_invert_second_then_and exec_when (exec_yankdup exec_dup (in1 boolean_pop boolean_empty boolean_flush integer_flush exec_k (integer_add exec_rot (exec_shove () boolean_not exec_stackdepth in1 boolean_dup_items) (integer_dec integer_gt exec_yank in1 boolean_invert_second_then_and) (exec_dup_times (integer_mod boolean_pop boolean_flush) exec_empty) boolean_dup_times exec_do*times (integer_swap exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_if (integer_rot integer_lt boolean_dup_times boolean_frominteger exec_do*times (boolean_invert_first_then_and exec_flush) exec_y (exec_k_when_autoconstructing (print_boolean exec_empty exec_pop ()) ())) ()) ()) ())) ())))) () ())
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 68
Size: 95
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 8.238
Median total errors in population: 8
Error averages by case: (0.843 0.698 0.999 0.808 0.848 0.806 0.698 0.843 0.845 0.85)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.907
Average program size in population (points): 58.735
Average percent parens in population: 0.275
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1770834
--- Timings ---
Current time: 1559594131025 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.7 seconds, 51.2%
Fitness Testing:      3.4 seconds, 37.3%
Report:               0.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: 43                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 85                  | Program output: 85                 
Correct output: 89                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: 59                  | Program output: 59                 
Correct output: 17                  | Program output: 47                 
Correct output: 3                   | Program output: 8                  
Correct output: 52                  | Program output: 52                 
Correct output: 32                  | Program output: 60                 
Correct output: 2                   | Program output: 34                 
Correct output: 1                   | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 44                 
Correct output: 9                   | Program output: 87                 
Correct output: 6                   | Program output: 20                 
Correct output: 9                   | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 30                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 93                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 11                 
Correct output: 39                  | Program output: 60                 
Correct output: 28                  | Program output: 28                 
Correct output: -95                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -47                
Correct output: -94                 | Program output: 87                 
Correct output: -91                 | Program output: 35                 
Correct output: -61                 | Program output: -61                
Correct output: -72                 | Program output: 23                 
Correct output: -30                 | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -12                 | Program output: -12                
Correct output: 20                  | Program output: 45                 
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: 8                   | Program output: 8                  
Correct output: -81                 | Program output: -42                
Correct output: -80                 | Program output: -80                
Correct output: 12                  | Program output: 12                 
Correct output: -66                 | Program output: 1                  
Correct output: -65                 | Program output: -53                
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -8                 
Correct output: -94                 | Program output: -94                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: 27                 
Correct output: -53                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -45                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -53                
Correct output: -92                 | Program output: -55                
Correct output: -53                 | Program output: -53                
Correct output: 43                  | Program output: 93                 
Correct output: 32                  | Program output: 43                 
Correct output: -42                 | Program output: 50                 
Correct output: -99                 | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -89                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_dup_times boolean_flush integer_lt in4 exec_s_when_autoconstructing (exec_rot (integer_max exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_empty print_integer) (boolean_invert_first_then_and exec_while (integer_gte exec_noop boolean_flush) boolean_dup_items integer_fromboolean boolean_or integer_fromboolean integer_dup_items)) () ()) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 36
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_dup_times boolean_flush integer_lt in4 exec_s_when_autoconstructing (exec_rot (integer_max exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_empty print_integer) (boolean_invert_first_then_and exec_while (integer_gte exec_noop boolean_flush) boolean_dup_items integer_fromboolean boolean_or integer_fromboolean integer_dup_items)) () ()) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 36
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 129 129 74 127 338 203 127 644 646)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (134 129 129 74 127 338 203 127 644 646)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (integer_dup_times boolean_flush integer_lt in4 exec_s_when_autoconstructing (exec_rot (integer_max exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_empty print_integer) (boolean_invert_first_then_and exec_while (integer_gte exec_noop boolean_flush) boolean_dup_items integer_fromboolean boolean_or integer_fromboolean integer_dup_items)) () ()) () ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 36
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.449
Median total errors in population: 8
Error averages by case: (0.866 0.871 0.871 0.926 0.873 0.662 0.797 0.873 0.356 0.354)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.774
Average program size in population (points): 56.173
Average percent parens in population: 0.252
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.99
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.99
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2246857
--- Timings ---
Current time: 1559594132923 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.8 seconds, 50.9%
Fitness Testing:      3.9 seconds, 34.1%
Report:               1.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -62                
Correct output: 43                  | Program output: 43                 
Correct output: -83                 | Program output: -74                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: 85                  | Program output: 85                 
Correct output: 89                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: 59                  | Program output: 59                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 35                 
Correct output: 52                  | Program output: 72                 
Correct output: 32                  | Program output: 60                 
Correct output: 2                   | Program output: 31                 
Correct output: 1                   | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 44                 
Correct output: 9                   | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 39                  | Program output: 39                 
Correct output: 28                  | Program output: 53                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -72                 | Program output: -11                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: 20                  | Program output: 20                 
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 3                  
Correct output: -92                 | Program output: -50                
Correct output: -76                 | Program output: 52                 
Correct output: 8                   | Program output: 37                 
Correct output: -81                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: 12                  | Program output: 35                 
Correct output: -66                 | Program output: 86                 
Correct output: -65                 | Program output: -63                
Correct output: -49                 | Program output: 87                 
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -94                 | Program output: -74                
Correct output: 39                  | Program output: 81                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -65                
Correct output: -90                 | Program output: -74                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: 54                 
Correct output: -67                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -42                
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: 27                 
Correct output: -53                 | Program output: -28                
Correct output: -70                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -55                
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: 43                  | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -42                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: -24                
Correct output: -24                 | Program output: 96                 
Correct output: -35                 | Program output: 44                 
Correct output: -89                 | Program output: -37                
Correct output: -82                 | Program output: -3                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_dup_times boolean_flush integer_lt in4 exec_s_when_autoconstructing (integer_div exec_rot (integer_max exec_s_when_autoconstructing () (in2) (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_empty print_integer) boolean_invert_first_then_and exec_while (integer_gte exec_noop boolean_flush) boolean_dup_items boolean_flush) (integer_fromboolean boolean_or integer_fromboolean integer_dup_items) ()) () ())
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 39
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_dup_times boolean_flush integer_lt in4 exec_s_when_autoconstructing (integer_div exec_rot (integer_max exec_s_when_autoconstructing () (in2) (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_empty print_integer) boolean_invert_first_then_and exec_while (integer_gte exec_noop boolean_flush) boolean_dup_items boolean_flush) (integer_fromboolean boolean_or integer_fromboolean integer_dup_items) ()) () ())
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 39
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (582 484 689 6 576 7 6 55 576 6)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (582 484 689 6 576 7 6 55 576 6)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (integer_lt in4 exec_s_when_autoconstructing (exec_rot (integer_max exec_s_when_autoconstructing () (in2 in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_empty print_integer) (boolean_invert_first_then_and exec_while (integer_gte exec_noop boolean_flush) boolean_dup_items integer_fromboolean boolean_or integer_fromboolean integer_dup_items)) () ()) () ())
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 23
Size: 35
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 7.013
Median total errors in population: 6
Error averages by case: (0.418 0.516 0.311 0.994 0.424 0.993 0.994 0.945 0.424 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.745
Average program size in population (points): 34.686
Average percent parens in population: 0.312
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2512055
--- Timings ---
Current time: 1559594134643 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.1 seconds, 53.5%
Fitness Testing:      4.2 seconds, 31.8%
Report:               1.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 208
Test mean error for best: 0.20800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: 43                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -7                 
Correct output: -60                 | Program output: -60                
Correct output: 85                  | Program output: 85                 
Correct output: 89                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: 59                  | Program output: 59                 
Correct output: 17                  | Program output: 47                 
Correct output: 3                   | Program output: 3                  
Correct output: 52                  | Program output: 52                 
Correct output: 32                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 30                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 11                 
Correct output: 39                  | Program output: 60                 
Correct output: 28                  | Program output: 28                 
Correct output: -95                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 70                 
Correct output: -91                 | Program output: 35                 
Correct output: -61                 | Program output: -61                
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -12                 | Program output: -12                
Correct output: 20                  | Program output: 45                 
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: 8                   | Program output: 8                  
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: 12                  | Program output: 12                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -45                 | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -53                
Correct output: -92                 | Program output: -55                
Correct output: -53                 | Program output: -53                
Correct output: 43                  | Program output: 90                 
Correct output: 32                  | Program output: 43                 
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: -25                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_dup_times boolean_flush in4 exec_rot (integer_max in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean boolean_not) (integer_min) integer_empty print_integer) (boolean_invert_first_then_and exec_while (integer_gte boolean_flush) exec_pop () boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_dup_times boolean_flush in4 exec_rot (integer_max in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean boolean_not) (integer_min) integer_empty print_integer) (boolean_invert_first_then_and exec_while (integer_gte boolean_flush) exec_pop () boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 394 587 189 108 576 582 105 110 641)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (562 394 587 189 108 576 582 105 110 641)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (exec_rot (exec_y_when_autoconstructing (in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () boolean_invert_second_then_and integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items)) () ()) () ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 26
Size: 39
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.146
Median total errors in population: 4
Error averages by case: (0.438 0.606 0.413 0.811 0.892 0.424 0.418 0.895 0.89 0.359)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.878
Average program size in population (points): 35.492
Average percent parens in population: 0.296
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.01
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2764290
--- Timings ---
Current time: 1559594136239 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.2 seconds, 55.5%
Fitness Testing:      4.5 seconds, 30.2%
Report:               2.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -62                
Correct output: 43                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: 85                  | Program output: 85                 
Correct output: 89                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: 59                  | Program output: 59                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 52                  | Program output: 52                 
Correct output: 32                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 39                  | Program output: 39                 
Correct output: 28                  | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -12                 | Program output: -12                
Correct output: 20                  | Program output: 20                 
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: 8                   | Program output: 8                  
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: 12                  | Program output: 12                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: 43                  | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: -25                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_dup_times boolean_shove in2 boolean_flush in4 exec_s_when_autoconstructing (integer_dup exec_rot (integer_max in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () boolean_yank integer_min integer_fromboolean exec_dup (integer_min) integer_empty print_integer) (exec_shove (boolean_invert_first_then_and exec_while (exec_when (exec_noop boolean_flush) boolean_dup_items integer_swap boolean_pop integer_fromboolean exec_dup_items integer_dup_items)))) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 47
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_dup_times boolean_shove in2 boolean_flush in4 exec_s_when_autoconstructing (integer_dup exec_rot (integer_max in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () boolean_yank integer_min integer_fromboolean exec_dup (integer_min) integer_empty print_integer) (exec_shove (boolean_invert_first_then_and exec_while (exec_when (exec_noop boolean_flush) boolean_dup_items integer_swap boolean_pop integer_fromboolean exec_dup_items integer_dup_items)))) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 47
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (626 439 652 642 450 272 273 621 500 621)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (626 439 652 642 450 272 273 621 500 621)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items})
Best program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 26
Size: 35
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 4.904
Median total errors in population: 4
Error averages by case: (0.374 0.561 0.348 0.358 0.55 0.728 0.727 0.379 0.5 0.379)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.811
Average program size in population (points): 38.512
Average percent parens in population: 0.301
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.011
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.209
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3026789
--- Timings ---
Current time: 1559594137851 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.3 seconds, 56.8%
Fitness Testing:      4.8 seconds, 29.1%
Report:               2.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 35


Auto-simplifying with starting size: 35
step: 0
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 500
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 1000
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 1500
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 2000
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 2500
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 3000
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 3500
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 4000
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 4500
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 5000
program: (boolean_swap integer_dup_times in2 boolean_flush in4 exec_s_when_autoconstructing (integer_min in1 exec_s_when_autoconstructing () (in3 exec_y_when_autoconstructing () integer_min integer_fromboolean integer_min) (integer_empty print_integer) exec_while (integer_gte exec_noop boolean_flush) boolean_yankdup boolean_dup_items integer_swap boolean_pop integer_fromboolean integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -50                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -62                
Correct output: 43                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: 85                  | Program output: 85                 
Correct output: 89                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: 59                  | Program output: 59                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 52                  | Program output: 52                 
Correct output: 32                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 26                  | Program output: 26                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 39                  | Program output: 39                 
Correct output: 28                  | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -56                 | Program output: -56                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -12                 | Program output: -12                
Correct output: 20                  | Program output: 20                 
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: 8                   | Program output: 8                  
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: 12                  | Program output: 12                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -94                 | Program output: -94                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: 43                  | Program output: 43                 
Correct output: 32                  | Program output: 32                 
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: -25                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
;;******************************
