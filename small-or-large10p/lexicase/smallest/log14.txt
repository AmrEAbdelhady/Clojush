Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[56 56 7 56] 7] [[99 99 36 99] 36] [[94 94 50 94] 50] [[-100 -100 -100 -82] -100] [[81 72 72 72] 72] [[-44 -44 100 -44] -44] [[-91 -91 -91 -80] -91] [[41 41 82 41] 41] [[-42 -42 -42 -61] -61] [[57 57 57 -48] -48] [(59 59 59 59) 59] [(-76 -76 -76 -76) -76] [(83 83 83 83) 83] [(-73 -73 -73 -73) -73] [(-26 -26 -26 -26) -26] [(48 81 5 69) 5] [(25 6 50 21) 6] [(59 51 51 55) 51] [(13 38 11 58) 11] [(35 44 1 87) 1] [(60 22 12 100) 12] [(93 39 11 15) 11] [(58 77 58 99) 58] [(37 28 20 73) 20] [(48 59 32 55) 32] [(94 32 5 80) 5] [(33 97 17 57) 17] [(13 70 63 90) 13] [(29 86 87 6) 6] [(67 90 21 41) 21] [(30 28 86 82) 28] [(3 56 32 64) 3] [(53 67 59 12) 12] [(51 44 10 11) 10] [(53 9 29 5) 5] [(-20 77 -86 39) -86] [(22 1 52 -6) -6] [(58 -27 -47 57) -47] [(99 -19 24 60) -19] [(99 80 -42 54) -42] [(-2 49 -33 35) -33] [(-24 -86 -71 -47) -86] [(23 -37 -93 78) -93] [(54 -13 -55 -69) -69] [(-61 -6 86 17) -61] [(95 28 48 -94) -94] [(-95 22 69 -2) -95] [(93 69 98 -100) -100] [(56 -43 -21 40) -43] [(82 -40 -35 -82) -82] [(-9 -81 -5 3) -81] [(77 -73 45 19) -73] [(16 -70 -11 -89) -89] [(-78 -16 -14 -98) -98] [(-91 -27 71 -63) -91] [(-57 -97 -18 -52) -97] [(11 74 -95 -15) -95] [(-35 64 -70 -32) -70] [(-27 18 60 54) -27] [(82 -99 80 -24) -99] [(-86 76 22 -25) -86] [(84 80 -30 96) -30] [(-81 -60 -98 61) -98] [(-32 96 78 83) -32] [(39 11 -71 99) -71] [(-100 26 86 84) -100] [(3 -13 52 -90) -90] [(95 70 -96 -52) -96] [(-87 14 5 -95) -95] [(-19 62 -81 -34) -81] [(-11 10 -49 75) -49] [(-41 -29 67 -83) -83] [(68 -26 -51 47) -51] [(44 27 70 -85) -85] [(59 -36 -32 81) -36] [(-24 30 -75 -36) -75] [(-80 43 -76 -92) -92] [(-20 -53 -8 -26) -53] [(-94 60 -55 77) -94] [(-5 28 -2 80) -5] [(-28 -66 -47 -23) -66] [(55 -36 98 -27) -36] [(80 56 73 -85) -85] [(-38 50 -53 51) -53] [(-55 42 32 -41) -55] [(-48 73 2 74) -48] [(95 -86 -35 62) -86] [(48 -73 45 89) -73] [(-73 -79 50 27) -79] [(-83 -53 -44 25) -83] [(12 82 -33 -21) -33] [(91 -65 38 -11) -65] [(-50 -64 -93 -10) -93] [(-21 -46 15 14) -46] [(50 95 93 -68) -68])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[56 56 7 56] 7]
Train Case:   6 | Input/Output: [[99 99 36 99] 36]
Train Case:   7 | Input/Output: [[94 94 50 94] 50]
Train Case:   8 | Input/Output: [[-100 -100 -100 -82] -100]
Train Case:   9 | Input/Output: [[81 72 72 72] 72]
Train Case:  10 | Input/Output: [[-44 -44 100 -44] -44]
Train Case:  11 | Input/Output: [[-91 -91 -91 -80] -91]
Train Case:  12 | Input/Output: [[41 41 82 41] 41]
Train Case:  13 | Input/Output: [[-42 -42 -42 -61] -61]
Train Case:  14 | Input/Output: [[57 57 57 -48] -48]
Train Case:  15 | Input/Output: [(59 59 59 59) 59]
Train Case:  16 | Input/Output: [(-76 -76 -76 -76) -76]
Train Case:  17 | Input/Output: [(83 83 83 83) 83]
Train Case:  18 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  19 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  20 | Input/Output: [(48 81 5 69) 5]
Train Case:  21 | Input/Output: [(25 6 50 21) 6]
Train Case:  22 | Input/Output: [(59 51 51 55) 51]
Train Case:  23 | Input/Output: [(13 38 11 58) 11]
Train Case:  24 | Input/Output: [(35 44 1 87) 1]
Train Case:  25 | Input/Output: [(60 22 12 100) 12]
Train Case:  26 | Input/Output: [(93 39 11 15) 11]
Train Case:  27 | Input/Output: [(58 77 58 99) 58]
Train Case:  28 | Input/Output: [(37 28 20 73) 20]
Train Case:  29 | Input/Output: [(48 59 32 55) 32]
Train Case:  30 | Input/Output: [(94 32 5 80) 5]
Train Case:  31 | Input/Output: [(33 97 17 57) 17]
Train Case:  32 | Input/Output: [(13 70 63 90) 13]
Train Case:  33 | Input/Output: [(29 86 87 6) 6]
Train Case:  34 | Input/Output: [(67 90 21 41) 21]
Train Case:  35 | Input/Output: [(30 28 86 82) 28]
Train Case:  36 | Input/Output: [(3 56 32 64) 3]
Train Case:  37 | Input/Output: [(53 67 59 12) 12]
Train Case:  38 | Input/Output: [(51 44 10 11) 10]
Train Case:  39 | Input/Output: [(53 9 29 5) 5]
Train Case:  40 | Input/Output: [(-20 77 -86 39) -86]
Train Case:  41 | Input/Output: [(22 1 52 -6) -6]
Train Case:  42 | Input/Output: [(58 -27 -47 57) -47]
Train Case:  43 | Input/Output: [(99 -19 24 60) -19]
Train Case:  44 | Input/Output: [(99 80 -42 54) -42]
Train Case:  45 | Input/Output: [(-2 49 -33 35) -33]
Train Case:  46 | Input/Output: [(-24 -86 -71 -47) -86]
Train Case:  47 | Input/Output: [(23 -37 -93 78) -93]
Train Case:  48 | Input/Output: [(54 -13 -55 -69) -69]
Train Case:  49 | Input/Output: [(-61 -6 86 17) -61]
Train Case:  50 | Input/Output: [(95 28 48 -94) -94]
Train Case:  51 | Input/Output: [(-95 22 69 -2) -95]
Train Case:  52 | Input/Output: [(93 69 98 -100) -100]
Train Case:  53 | Input/Output: [(56 -43 -21 40) -43]
Train Case:  54 | Input/Output: [(82 -40 -35 -82) -82]
Train Case:  55 | Input/Output: [(-9 -81 -5 3) -81]
Train Case:  56 | Input/Output: [(77 -73 45 19) -73]
Train Case:  57 | Input/Output: [(16 -70 -11 -89) -89]
Train Case:  58 | Input/Output: [(-78 -16 -14 -98) -98]
Train Case:  59 | Input/Output: [(-91 -27 71 -63) -91]
Train Case:  60 | Input/Output: [(-57 -97 -18 -52) -97]
Train Case:  61 | Input/Output: [(11 74 -95 -15) -95]
Train Case:  62 | Input/Output: [(-35 64 -70 -32) -70]
Train Case:  63 | Input/Output: [(-27 18 60 54) -27]
Train Case:  64 | Input/Output: [(82 -99 80 -24) -99]
Train Case:  65 | Input/Output: [(-86 76 22 -25) -86]
Train Case:  66 | Input/Output: [(84 80 -30 96) -30]
Train Case:  67 | Input/Output: [(-81 -60 -98 61) -98]
Train Case:  68 | Input/Output: [(-32 96 78 83) -32]
Train Case:  69 | Input/Output: [(39 11 -71 99) -71]
Train Case:  70 | Input/Output: [(-100 26 86 84) -100]
Train Case:  71 | Input/Output: [(3 -13 52 -90) -90]
Train Case:  72 | Input/Output: [(95 70 -96 -52) -96]
Train Case:  73 | Input/Output: [(-87 14 5 -95) -95]
Train Case:  74 | Input/Output: [(-19 62 -81 -34) -81]
Train Case:  75 | Input/Output: [(-11 10 -49 75) -49]
Train Case:  76 | Input/Output: [(-41 -29 67 -83) -83]
Train Case:  77 | Input/Output: [(68 -26 -51 47) -51]
Train Case:  78 | Input/Output: [(44 27 70 -85) -85]
Train Case:  79 | Input/Output: [(59 -36 -32 81) -36]
Train Case:  80 | Input/Output: [(-24 30 -75 -36) -75]
Train Case:  81 | Input/Output: [(-80 43 -76 -92) -92]
Train Case:  82 | Input/Output: [(-20 -53 -8 -26) -53]
Train Case:  83 | Input/Output: [(-94 60 -55 77) -94]
Train Case:  84 | Input/Output: [(-5 28 -2 80) -5]
Train Case:  85 | Input/Output: [(-28 -66 -47 -23) -66]
Train Case:  86 | Input/Output: [(55 -36 98 -27) -36]
Train Case:  87 | Input/Output: [(80 56 73 -85) -85]
Train Case:  88 | Input/Output: [(-38 50 -53 51) -53]
Train Case:  89 | Input/Output: [(-55 42 32 -41) -55]
Train Case:  90 | Input/Output: [(-48 73 2 74) -48]
Train Case:  91 | Input/Output: [(95 -86 -35 62) -86]
Train Case:  92 | Input/Output: [(48 -73 45 89) -73]
Train Case:  93 | Input/Output: [(-73 -79 50 27) -79]
Train Case:  94 | Input/Output: [(-83 -53 -44 25) -83]
Train Case:  95 | Input/Output: [(12 82 -33 -21) -33]
Train Case:  96 | Input/Output: [(91 -65 38 -11) -65]
Train Case:  97 | Input/Output: [(-50 -64 -93 -10) -93]
Train Case:  98 | Input/Output: [(-21 -46 15 14) -46]
Train Case:  99 | Input/Output: [(50 95 93 -68) -68]
Test Case:   0 | Input/Output: [[27 27 -24 27] -24]
Test Case:   1 | Input/Output: [[-85 96 -85 -85] -85]
Test Case:   2 | Input/Output: [[12 12 12 62] 12]
Test Case:   3 | Input/Output: [[-55 -55 -83 -55] -83]
Test Case:   4 | Input/Output: [[-95 -47 -47 -47] -95]
Test Case:   5 | Input/Output: [[17 9 17 17] 9]
Test Case:   6 | Input/Output: [[25 70 70 70] 25]
Test Case:   7 | Input/Output: [[77 77 77 6] 6]
Test Case:   8 | Input/Output: [[78 -41 78 78] -41]
Test Case:   9 | Input/Output: [[-54 66 -54 -54] -54]
Test Case:  10 | Input/Output: [[-19 -19 16 -19] -19]
Test Case:  11 | Input/Output: [[-93 -93 -93 69] -93]
Test Case:  12 | Input/Output: [[-2 -22 -2 -2] -22]
Test Case:  13 | Input/Output: [[59 -20 59 59] -20]
Test Case:  14 | Input/Output: [[70 70 -77 70] -77]
Test Case:  15 | Input/Output: [[-70 32 -70 -70] -70]
Test Case:  16 | Input/Output: [[45 -37 -37 -37] -37]
Test Case:  17 | Input/Output: [[99 -98 -98 -98] -98]
Test Case:  18 | Input/Output: [[-73 54 -73 -73] -73]
Test Case:  19 | Input/Output: [[68 -16 68 68] -16]
Test Case:  20 | Input/Output: [[-31 -46 -31 -31] -46]
Test Case:  21 | Input/Output: [[24 24 -28 24] -28]
Test Case:  22 | Input/Output: [[-7 -7 28 -7] -7]
Test Case:  23 | Input/Output: [[14 14 44 14] 14]
Test Case:  24 | Input/Output: [[-75 -75 -49 -75] -75]
Test Case:  25 | Input/Output: [[-8 -8 -85 -8] -85]
Test Case:  26 | Input/Output: [[-56 95 95 95] -56]
Test Case:  27 | Input/Output: [[22 100 22 22] 22]
Test Case:  28 | Input/Output: [[12 -72 12 12] -72]
Test Case:  29 | Input/Output: [[-92 -92 -91 -92] -92]
Test Case:  30 | Input/Output: [[53 89 53 53] 53]
Test Case:  31 | Input/Output: [[16 -37 -37 -37] -37]
Test Case:  32 | Input/Output: [[10 98 10 10] 10]
Test Case:  33 | Input/Output: [[-2 -100 -100 -100] -100]
Test Case:  34 | Input/Output: [[-31 -31 -31 84] -31]
Test Case:  35 | Input/Output: [[81 90 90 90] 81]
Test Case:  36 | Input/Output: [[-82 -82 -82 -85] -85]
Test Case:  37 | Input/Output: [[41 41 60 41] 41]
Test Case:  38 | Input/Output: [[-49 -49 90 -49] -49]
Test Case:  39 | Input/Output: [[-39 18 -39 -39] -39]
Test Case:  40 | Input/Output: [[72 -55 -55 -55] -55]
Test Case:  41 | Input/Output: [[-36 -36 30 -36] -36]
Test Case:  42 | Input/Output: [[-16 -38 -38 -38] -38]
Test Case:  43 | Input/Output: [[47 -10 -10 -10] -10]
Test Case:  44 | Input/Output: [[-1 13 -1 -1] -1]
Test Case:  45 | Input/Output: [[44 64 64 64] 44]
Test Case:  46 | Input/Output: [[1 1 -76 1] -76]
Test Case:  47 | Input/Output: [[56 -16 56 56] -16]
Test Case:  48 | Input/Output: [[-23 -23 -90 -23] -90]
Test Case:  49 | Input/Output: [[52 52 -92 52] -92]
Test Case:  50 | Input/Output: [[-7 -7 -7 95] -7]
Test Case:  51 | Input/Output: [[-32 -14 -32 -32] -32]
Test Case:  52 | Input/Output: [[-28 98 98 98] -28]
Test Case:  53 | Input/Output: [[52 88 52 52] 52]
Test Case:  54 | Input/Output: [[20 -30 -30 -30] -30]
Test Case:  55 | Input/Output: [[-30 -30 -30 19] -30]
Test Case:  56 | Input/Output: [[-20 -20 -20 -51] -51]
Test Case:  57 | Input/Output: [[-44 -44 74 -44] -44]
Test Case:  58 | Input/Output: [[-39 4 -39 -39] -39]
Test Case:  59 | Input/Output: [[74 -90 74 74] -90]
Test Case:  60 | Input/Output: [[88 71 71 71] 71]
Test Case:  61 | Input/Output: [[27 -83 27 27] -83]
Test Case:  62 | Input/Output: [[-63 -4 -4 -4] -63]
Test Case:  63 | Input/Output: [[-1 17 -1 -1] -1]
Test Case:  64 | Input/Output: [[12 -3 12 12] -3]
Test Case:  65 | Input/Output: [[47 47 50 47] 47]
Test Case:  66 | Input/Output: [[-57 97 97 97] -57]
Test Case:  67 | Input/Output: [[28 -47 28 28] -47]
Test Case:  68 | Input/Output: [[27 15 15 15] 15]
Test Case:  69 | Input/Output: [[79 -28 79 79] -28]
Test Case:  70 | Input/Output: [[56 56 56 -17] -17]
Test Case:  71 | Input/Output: [[-77 -48 -48 -48] -77]
Test Case:  72 | Input/Output: [[-69 7 7 7] -69]
Test Case:  73 | Input/Output: [[-42 29 29 29] -42]
Test Case:  74 | Input/Output: [[-91 -91 78 -91] -91]
Test Case:  75 | Input/Output: [[-15 67 67 67] -15]
Test Case:  76 | Input/Output: [[-60 -44 -44 -44] -60]
Test Case:  77 | Input/Output: [[98 98 98 -63] -63]
Test Case:  78 | Input/Output: [[-85 -85 -85 -11] -85]
Test Case:  79 | Input/Output: [[46 7 7 7] 7]
Test Case:  80 | Input/Output: [[9 56 56 56] 9]
Test Case:  81 | Input/Output: [[-27 -27 -27 -12] -27]
Test Case:  82 | Input/Output: [[39 -69 39 39] -69]
Test Case:  83 | Input/Output: [[98 -80 98 98] -80]
Test Case:  84 | Input/Output: [[95 95 -86 95] -86]
Test Case:  85 | Input/Output: [[-90 1 1 1] -90]
Test Case:  86 | Input/Output: [[-26 -26 -26 22] -26]
Test Case:  87 | Input/Output: [[-63 -63 -63 -13] -63]
Test Case:  88 | Input/Output: [[95 95 -41 95] -41]
Test Case:  89 | Input/Output: [[53 53 53 -57] -57]
Test Case:  90 | Input/Output: [[41 90 90 90] 41]
Test Case:  91 | Input/Output: [[4 4 -1 4] -1]
Test Case:  92 | Input/Output: [[-81 -81 -81 59] -81]
Test Case:  93 | Input/Output: [[66 86 66 66] 66]
Test Case:  94 | Input/Output: [[-22 -22 -83 -22] -83]
Test Case:  95 | Input/Output: [[86 -95 86 86] -95]
Test Case:  96 | Input/Output: [[16 34 16 16] 16]
Test Case:  97 | Input/Output: [[-91 -91 -46 -91] -91]
Test Case:  98 | Input/Output: [[78 78 78 26] 26]
Test Case:  99 | Input/Output: [[84 84 84 100] 84]
Test Case: 100 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 101 | Input/Output: [(91 91 91 91) 91]
Test Case: 102 | Input/Output: [(57 57 57 57) 57]
Test Case: 103 | Input/Output: [(85 85 85 85) 85]
Test Case: 104 | Input/Output: [(14 14 14 14) 14]
Test Case: 105 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 106 | Input/Output: [(57 57 57 57) 57]
Test Case: 107 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 108 | Input/Output: [(22 22 22 22) 22]
Test Case: 109 | Input/Output: [(95 95 95 95) 95]
Test Case: 110 | Input/Output: [(73 73 73 73) 73]
Test Case: 111 | Input/Output: [(82 82 82 82) 82]
Test Case: 112 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 113 | Input/Output: [(57 57 57 57) 57]
Test Case: 114 | Input/Output: [(73 73 73 73) 73]
Test Case: 115 | Input/Output: [(21 21 21 21) 21]
Test Case: 116 | Input/Output: [(79 79 79 79) 79]
Test Case: 117 | Input/Output: [(56 56 56 56) 56]
Test Case: 118 | Input/Output: [(18 18 18 18) 18]
Test Case: 119 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 120 | Input/Output: [(52 52 52 52) 52]
Test Case: 121 | Input/Output: [(37 37 37 37) 37]
Test Case: 122 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 123 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 124 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 125 | Input/Output: [(54 54 54 54) 54]
Test Case: 126 | Input/Output: [(11 11 11 11) 11]
Test Case: 127 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 128 | Input/Output: [(94 94 94 94) 94]
Test Case: 129 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 130 | Input/Output: [(43 43 43 43) 43]
Test Case: 131 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 132 | Input/Output: [(68 68 68 68) 68]
Test Case: 133 | Input/Output: [(27 27 27 27) 27]
Test Case: 134 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 135 | Input/Output: [(45 45 45 45) 45]
Test Case: 136 | Input/Output: [(12 12 12 12) 12]
Test Case: 137 | Input/Output: [(26 26 26 26) 26]
Test Case: 138 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 139 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 140 | Input/Output: [(93 93 93 93) 93]
Test Case: 141 | Input/Output: [(52 52 52 52) 52]
Test Case: 142 | Input/Output: [(98 98 98 98) 98]
Test Case: 143 | Input/Output: [(85 85 85 85) 85]
Test Case: 144 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 145 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 146 | Input/Output: [(24 24 24 24) 24]
Test Case: 147 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 148 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 149 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 150 | Input/Output: [(56 56 56 56) 56]
Test Case: 151 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 152 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 153 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 154 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 155 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 156 | Input/Output: [(18 18 18 18) 18]
Test Case: 157 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 158 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 159 | Input/Output: [(17 17 17 17) 17]
Test Case: 160 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 161 | Input/Output: [(11 11 11 11) 11]
Test Case: 162 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 163 | Input/Output: [(22 22 22 22) 22]
Test Case: 164 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 165 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 166 | Input/Output: [(21 21 21 21) 21]
Test Case: 167 | Input/Output: [(79 79 79 79) 79]
Test Case: 168 | Input/Output: [(1 1 1 1) 1]
Test Case: 169 | Input/Output: [(49 49 49 49) 49]
Test Case: 170 | Input/Output: [(27 27 27 27) 27]
Test Case: 171 | Input/Output: [(48 48 48 48) 48]
Test Case: 172 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 173 | Input/Output: [(13 13 13 13) 13]
Test Case: 174 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 175 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 176 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 177 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 178 | Input/Output: [(66 66 66 66) 66]
Test Case: 179 | Input/Output: [(56 56 56 56) 56]
Test Case: 180 | Input/Output: [(94 94 94 94) 94]
Test Case: 181 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 182 | Input/Output: [(83 83 83 83) 83]
Test Case: 183 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 184 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 185 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 186 | Input/Output: [(71 71 71 71) 71]
Test Case: 187 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 188 | Input/Output: [(49 49 49 49) 49]
Test Case: 189 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 190 | Input/Output: [(83 83 83 83) 83]
Test Case: 191 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 192 | Input/Output: [(3 3 3 3) 3]
Test Case: 193 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 194 | Input/Output: [(91 91 91 91) 91]
Test Case: 195 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 196 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 197 | Input/Output: [(87 87 87 87) 87]
Test Case: 198 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 199 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 200 | Input/Output: [(85 54 51 28) 28]
Test Case: 201 | Input/Output: [(36 57 16 41) 16]
Test Case: 202 | Input/Output: [(63 92 13 97) 13]
Test Case: 203 | Input/Output: [(40 76 93 74) 40]
Test Case: 204 | Input/Output: [(92 39 80 60) 39]
Test Case: 205 | Input/Output: [(85 75 36 63) 36]
Test Case: 206 | Input/Output: [(73 98 98 19) 19]
Test Case: 207 | Input/Output: [(96 13 26 50) 13]
Test Case: 208 | Input/Output: [(79 93 13 69) 13]
Test Case: 209 | Input/Output: [(79 2 19 67) 2]
Test Case: 210 | Input/Output: [(91 30 88 31) 30]
Test Case: 211 | Input/Output: [(99 73 91 44) 44]
Test Case: 212 | Input/Output: [(73 26 99 23) 23]
Test Case: 213 | Input/Output: [(22 100 12 18) 12]
Test Case: 214 | Input/Output: [(87 12 25 59) 12]
Test Case: 215 | Input/Output: [(20 11 0 19) 0]
Test Case: 216 | Input/Output: [(18 68 48 78) 18]
Test Case: 217 | Input/Output: [(89 93 5 54) 5]
Test Case: 218 | Input/Output: [(90 32 32 45) 32]
Test Case: 219 | Input/Output: [(0 41 40 94) 0]
Test Case: 220 | Input/Output: [(54 68 2 11) 2]
Test Case: 221 | Input/Output: [(36 6 60 27) 6]
Test Case: 222 | Input/Output: [(8 61 82 20) 8]
Test Case: 223 | Input/Output: [(93 25 87 53) 25]
Test Case: 224 | Input/Output: [(94 77 68 53) 53]
Test Case: 225 | Input/Output: [(66 21 83 80) 21]
Test Case: 226 | Input/Output: [(46 6 21 18) 6]
Test Case: 227 | Input/Output: [(26 99 71 72) 26]
Test Case: 228 | Input/Output: [(20 99 44 43) 20]
Test Case: 229 | Input/Output: [(33 40 76 91) 33]
Test Case: 230 | Input/Output: [(32 46 90 94) 32]
Test Case: 231 | Input/Output: [(49 75 56 43) 43]
Test Case: 232 | Input/Output: [(85 72 11 68) 11]
Test Case: 233 | Input/Output: [(75 41 39 52) 39]
Test Case: 234 | Input/Output: [(39 99 38 61) 38]
Test Case: 235 | Input/Output: [(23 19 86 15) 15]
Test Case: 236 | Input/Output: [(86 20 61 70) 20]
Test Case: 237 | Input/Output: [(94 70 82 82) 70]
Test Case: 238 | Input/Output: [(52 92 64 13) 13]
Test Case: 239 | Input/Output: [(56 88 29 55) 29]
Test Case: 240 | Input/Output: [(61 89 47 41) 41]
Test Case: 241 | Input/Output: [(14 12 51 38) 12]
Test Case: 242 | Input/Output: [(12 26 74 4) 4]
Test Case: 243 | Input/Output: [(16 83 73 68) 16]
Test Case: 244 | Input/Output: [(98 60 52 38) 38]
Test Case: 245 | Input/Output: [(32 54 76 75) 32]
Test Case: 246 | Input/Output: [(92 65 78 45) 45]
Test Case: 247 | Input/Output: [(56 32 14 85) 14]
Test Case: 248 | Input/Output: [(55 25 40 40) 25]
Test Case: 249 | Input/Output: [(41 97 11 92) 11]
Test Case: 250 | Input/Output: [(40 22 55 94) 22]
Test Case: 251 | Input/Output: [(59 78 2 95) 2]
Test Case: 252 | Input/Output: [(8 67 21 44) 8]
Test Case: 253 | Input/Output: [(62 16 50 4) 4]
Test Case: 254 | Input/Output: [(9 60 20 34) 9]
Test Case: 255 | Input/Output: [(24 50 81 99) 24]
Test Case: 256 | Input/Output: [(63 75 99 97) 63]
Test Case: 257 | Input/Output: [(72 0 14 41) 0]
Test Case: 258 | Input/Output: [(68 86 31 67) 31]
Test Case: 259 | Input/Output: [(70 18 50 75) 18]
Test Case: 260 | Input/Output: [(76 89 26 16) 16]
Test Case: 261 | Input/Output: [(88 88 96 23) 23]
Test Case: 262 | Input/Output: [(15 28 33 77) 15]
Test Case: 263 | Input/Output: [(17 69 29 93) 17]
Test Case: 264 | Input/Output: [(34 68 42 65) 34]
Test Case: 265 | Input/Output: [(8 32 84 78) 8]
Test Case: 266 | Input/Output: [(65 78 67 6) 6]
Test Case: 267 | Input/Output: [(39 98 38 18) 18]
Test Case: 268 | Input/Output: [(41 32 29 47) 29]
Test Case: 269 | Input/Output: [(10 69 62 49) 10]
Test Case: 270 | Input/Output: [(48 28 43 2) 2]
Test Case: 271 | Input/Output: [(47 36 50 58) 36]
Test Case: 272 | Input/Output: [(36 92 60 50) 36]
Test Case: 273 | Input/Output: [(27 81 71 22) 22]
Test Case: 274 | Input/Output: [(43 37 85 68) 37]
Test Case: 275 | Input/Output: [(35 16 73 53) 16]
Test Case: 276 | Input/Output: [(52 70 19 10) 10]
Test Case: 277 | Input/Output: [(76 82 75 83) 75]
Test Case: 278 | Input/Output: [(75 93 80 58) 58]
Test Case: 279 | Input/Output: [(4 79 26 38) 4]
Test Case: 280 | Input/Output: [(63 41 9 74) 9]
Test Case: 281 | Input/Output: [(28 99 77 7) 7]
Test Case: 282 | Input/Output: [(71 54 15 22) 15]
Test Case: 283 | Input/Output: [(80 86 98 17) 17]
Test Case: 284 | Input/Output: [(5 41 63 49) 5]
Test Case: 285 | Input/Output: [(54 18 88 39) 18]
Test Case: 286 | Input/Output: [(69 47 80 55) 47]
Test Case: 287 | Input/Output: [(11 76 1 92) 1]
Test Case: 288 | Input/Output: [(72 82 96 99) 72]
Test Case: 289 | Input/Output: [(75 2 19 91) 2]
Test Case: 290 | Input/Output: [(57 73 91 33) 33]
Test Case: 291 | Input/Output: [(70 68 32 30) 30]
Test Case: 292 | Input/Output: [(4 72 41 100) 4]
Test Case: 293 | Input/Output: [(99 91 3 56) 3]
Test Case: 294 | Input/Output: [(89 87 57 48) 48]
Test Case: 295 | Input/Output: [(99 82 54 58) 54]
Test Case: 296 | Input/Output: [(5 69 57 16) 5]
Test Case: 297 | Input/Output: [(12 44 42 29) 12]
Test Case: 298 | Input/Output: [(65 81 7 89) 7]
Test Case: 299 | Input/Output: [(6 32 86 67) 6]
Test Case: 300 | Input/Output: [(34 95 44 48) 34]
Test Case: 301 | Input/Output: [(80 94 43 59) 43]
Test Case: 302 | Input/Output: [(51 72 94 80) 51]
Test Case: 303 | Input/Output: [(46 84 79 21) 21]
Test Case: 304 | Input/Output: [(69 65 58 4) 4]
Test Case: 305 | Input/Output: [(60 37 55 40) 37]
Test Case: 306 | Input/Output: [(33 62 13 54) 13]
Test Case: 307 | Input/Output: [(92 46 27 68) 27]
Test Case: 308 | Input/Output: [(46 19 99 14) 14]
Test Case: 309 | Input/Output: [(23 93 87 10) 10]
Test Case: 310 | Input/Output: [(7 42 2 18) 2]
Test Case: 311 | Input/Output: [(81 63 30 40) 30]
Test Case: 312 | Input/Output: [(43 26 49 69) 26]
Test Case: 313 | Input/Output: [(94 66 54 21) 21]
Test Case: 314 | Input/Output: [(46 30 32 55) 30]
Test Case: 315 | Input/Output: [(39 7 96 42) 7]
Test Case: 316 | Input/Output: [(60 49 96 37) 37]
Test Case: 317 | Input/Output: [(50 59 9 45) 9]
Test Case: 318 | Input/Output: [(48 81 87 76) 48]
Test Case: 319 | Input/Output: [(35 31 70 6) 6]
Test Case: 320 | Input/Output: [(23 46 40 20) 20]
Test Case: 321 | Input/Output: [(41 93 46 38) 38]
Test Case: 322 | Input/Output: [(61 20 64 74) 20]
Test Case: 323 | Input/Output: [(14 75 44 46) 14]
Test Case: 324 | Input/Output: [(70 58 89 93) 58]
Test Case: 325 | Input/Output: [(51 53 2 43) 2]
Test Case: 326 | Input/Output: [(17 39 32 78) 17]
Test Case: 327 | Input/Output: [(41 90 31 86) 31]
Test Case: 328 | Input/Output: [(15 74 70 30) 15]
Test Case: 329 | Input/Output: [(28 38 51 89) 28]
Test Case: 330 | Input/Output: [(46 68 40 35) 35]
Test Case: 331 | Input/Output: [(14 69 20 39) 14]
Test Case: 332 | Input/Output: [(63 94 33 69) 33]
Test Case: 333 | Input/Output: [(47 30 86 11) 11]
Test Case: 334 | Input/Output: [(12 84 84 0) 0]
Test Case: 335 | Input/Output: [(38 36 49 32) 32]
Test Case: 336 | Input/Output: [(99 45 77 61) 45]
Test Case: 337 | Input/Output: [(87 35 84 47) 35]
Test Case: 338 | Input/Output: [(45 72 96 62) 45]
Test Case: 339 | Input/Output: [(0 62 93 7) 0]
Test Case: 340 | Input/Output: [(26 38 80 13) 13]
Test Case: 341 | Input/Output: [(6 10 96 47) 6]
Test Case: 342 | Input/Output: [(53 26 53 36) 26]
Test Case: 343 | Input/Output: [(99 77 77 22) 22]
Test Case: 344 | Input/Output: [(90 61 93 23) 23]
Test Case: 345 | Input/Output: [(56 75 32 29) 29]
Test Case: 346 | Input/Output: [(9 96 77 26) 9]
Test Case: 347 | Input/Output: [(90 78 28 3) 3]
Test Case: 348 | Input/Output: [(18 59 83 60) 18]
Test Case: 349 | Input/Output: [(17 35 38 3) 3]
Test Case: 350 | Input/Output: [(97 65 2 58) 2]
Test Case: 351 | Input/Output: [(4 66 98 3) 3]
Test Case: 352 | Input/Output: [(75 86 59 53) 53]
Test Case: 353 | Input/Output: [(1 3 74 18) 1]
Test Case: 354 | Input/Output: [(10 25 36 78) 10]
Test Case: 355 | Input/Output: [(51 13 17 23) 13]
Test Case: 356 | Input/Output: [(1 8 68 79) 1]
Test Case: 357 | Input/Output: [(79 82 94 9) 9]
Test Case: 358 | Input/Output: [(47 65 13 22) 13]
Test Case: 359 | Input/Output: [(65 36 36 20) 20]
Test Case: 360 | Input/Output: [(20 58 13 30) 13]
Test Case: 361 | Input/Output: [(1 38 70 60) 1]
Test Case: 362 | Input/Output: [(67 79 43 77) 43]
Test Case: 363 | Input/Output: [(10 42 44 42) 10]
Test Case: 364 | Input/Output: [(9 87 76 40) 9]
Test Case: 365 | Input/Output: [(32 12 8 29) 8]
Test Case: 366 | Input/Output: [(20 13 25 11) 11]
Test Case: 367 | Input/Output: [(48 10 47 81) 10]
Test Case: 368 | Input/Output: [(95 80 37 9) 9]
Test Case: 369 | Input/Output: [(15 30 66 33) 15]
Test Case: 370 | Input/Output: [(8 43 66 16) 8]
Test Case: 371 | Input/Output: [(23 97 45 44) 23]
Test Case: 372 | Input/Output: [(0 3 21 72) 0]
Test Case: 373 | Input/Output: [(98 98 77 34) 34]
Test Case: 374 | Input/Output: [(40 84 68 78) 40]
Test Case: 375 | Input/Output: [(67 65 0 79) 0]
Test Case: 376 | Input/Output: [(80 11 29 49) 11]
Test Case: 377 | Input/Output: [(22 37 60 67) 22]
Test Case: 378 | Input/Output: [(20 77 25 65) 20]
Test Case: 379 | Input/Output: [(82 55 66 78) 55]
Test Case: 380 | Input/Output: [(42 57 66 47) 42]
Test Case: 381 | Input/Output: [(49 3 46 77) 3]
Test Case: 382 | Input/Output: [(91 16 58 54) 16]
Test Case: 383 | Input/Output: [(6 54 76 96) 6]
Test Case: 384 | Input/Output: [(71 81 20 45) 20]
Test Case: 385 | Input/Output: [(57 36 43 46) 36]
Test Case: 386 | Input/Output: [(66 95 87 94) 66]
Test Case: 387 | Input/Output: [(22 71 3 42) 3]
Test Case: 388 | Input/Output: [(46 57 25 39) 25]
Test Case: 389 | Input/Output: [(78 82 57 51) 51]
Test Case: 390 | Input/Output: [(94 11 53 49) 11]
Test Case: 391 | Input/Output: [(49 73 100 50) 49]
Test Case: 392 | Input/Output: [(77 62 49 73) 49]
Test Case: 393 | Input/Output: [(55 26 25 17) 17]
Test Case: 394 | Input/Output: [(0 93 4 75) 0]
Test Case: 395 | Input/Output: [(12 45 88 10) 10]
Test Case: 396 | Input/Output: [(8 80 54 15) 8]
Test Case: 397 | Input/Output: [(46 19 15 76) 15]
Test Case: 398 | Input/Output: [(66 3 66 8) 3]
Test Case: 399 | Input/Output: [(97 82 87 72) 72]
Test Case: 400 | Input/Output: [(-75 -68 76 88) -75]
Test Case: 401 | Input/Output: [(-80 -79 -92 99) -92]
Test Case: 402 | Input/Output: [(-5 49 -77 79) -77]
Test Case: 403 | Input/Output: [(62 97 25 -42) -42]
Test Case: 404 | Input/Output: [(-81 -95 21 50) -95]
Test Case: 405 | Input/Output: [(-1 -25 27 -16) -25]
Test Case: 406 | Input/Output: [(73 -15 -33 -5) -33]
Test Case: 407 | Input/Output: [(-56 16 -21 -10) -56]
Test Case: 408 | Input/Output: [(27 26 -65 -51) -65]
Test Case: 409 | Input/Output: [(65 73 40 -94) -94]
Test Case: 410 | Input/Output: [(90 66 -10 -27) -27]
Test Case: 411 | Input/Output: [(44 -30 80 25) -30]
Test Case: 412 | Input/Output: [(-23 -74 -58 -8) -74]
Test Case: 413 | Input/Output: [(-47 -74 85 -88) -88]
Test Case: 414 | Input/Output: [(4 -3 -46 2) -46]
Test Case: 415 | Input/Output: [(70 7 54 -61) -61]
Test Case: 416 | Input/Output: [(-46 93 -67 0) -67]
Test Case: 417 | Input/Output: [(86 -44 9 -1) -44]
Test Case: 418 | Input/Output: [(81 -45 3 -58) -58]
Test Case: 419 | Input/Output: [(-34 -29 26 -48) -48]
Test Case: 420 | Input/Output: [(-90 94 -99 -58) -99]
Test Case: 421 | Input/Output: [(-59 81 -4 98) -59]
Test Case: 422 | Input/Output: [(59 -50 -34 -24) -50]
Test Case: 423 | Input/Output: [(54 -49 89 -56) -56]
Test Case: 424 | Input/Output: [(-25 -39 89 96) -39]
Test Case: 425 | Input/Output: [(-70 -92 66 94) -92]
Test Case: 426 | Input/Output: [(-37 20 99 -99) -99]
Test Case: 427 | Input/Output: [(-14 34 88 -35) -35]
Test Case: 428 | Input/Output: [(-35 -64 63 -31) -64]
Test Case: 429 | Input/Output: [(18 -22 -67 -55) -67]
Test Case: 430 | Input/Output: [(16 -97 -18 33) -97]
Test Case: 431 | Input/Output: [(87 79 -40 -10) -40]
Test Case: 432 | Input/Output: [(47 18 -42 32) -42]
Test Case: 433 | Input/Output: [(46 27 -25 56) -25]
Test Case: 434 | Input/Output: [(-91 -73 -8 72) -91]
Test Case: 435 | Input/Output: [(94 74 -66 49) -66]
Test Case: 436 | Input/Output: [(-21 35 -82 88) -82]
Test Case: 437 | Input/Output: [(-77 87 -8 27) -77]
Test Case: 438 | Input/Output: [(87 -56 46 -32) -56]
Test Case: 439 | Input/Output: [(38 -28 -5 21) -28]
Test Case: 440 | Input/Output: [(-37 91 -65 43) -65]
Test Case: 441 | Input/Output: [(-85 11 -66 -91) -91]
Test Case: 442 | Input/Output: [(3 20 -38 -23) -38]
Test Case: 443 | Input/Output: [(41 -16 -55 -44) -55]
Test Case: 444 | Input/Output: [(23 -56 -57 -42) -57]
Test Case: 445 | Input/Output: [(-18 -20 -87 90) -87]
Test Case: 446 | Input/Output: [(-60 77 -40 34) -60]
Test Case: 447 | Input/Output: [(-55 -58 31 -45) -58]
Test Case: 448 | Input/Output: [(-7 -13 78 -76) -76]
Test Case: 449 | Input/Output: [(2 65 90 -41) -41]
Test Case: 450 | Input/Output: [(-92 -50 90 68) -92]
Test Case: 451 | Input/Output: [(-54 -79 -8 65) -79]
Test Case: 452 | Input/Output: [(9 -12 56 -59) -59]
Test Case: 453 | Input/Output: [(87 18 64 48) 18]
Test Case: 454 | Input/Output: [(-83 65 -62 20) -83]
Test Case: 455 | Input/Output: [(-23 41 23 28) -23]
Test Case: 456 | Input/Output: [(5 -48 -39 -68) -68]
Test Case: 457 | Input/Output: [(-34 -63 -73 43) -73]
Test Case: 458 | Input/Output: [(-52 76 96 -20) -52]
Test Case: 459 | Input/Output: [(-82 -76 51 -15) -82]
Test Case: 460 | Input/Output: [(-69 75 -55 63) -69]
Test Case: 461 | Input/Output: [(36 68 39 37) 36]
Test Case: 462 | Input/Output: [(-68 -27 76 -3) -68]
Test Case: 463 | Input/Output: [(24 -50 21 48) -50]
Test Case: 464 | Input/Output: [(94 -45 63 -33) -45]
Test Case: 465 | Input/Output: [(-61 -69 71 -53) -69]
Test Case: 466 | Input/Output: [(-95 -54 -77 -81) -95]
Test Case: 467 | Input/Output: [(59 -92 -91 -50) -92]
Test Case: 468 | Input/Output: [(98 -98 89 93) -98]
Test Case: 469 | Input/Output: [(99 -47 -10 -61) -61]
Test Case: 470 | Input/Output: [(-23 35 -30 -48) -48]
Test Case: 471 | Input/Output: [(-45 -76 100 2) -76]
Test Case: 472 | Input/Output: [(-47 -11 -66 1) -66]
Test Case: 473 | Input/Output: [(-26 -37 26 55) -37]
Test Case: 474 | Input/Output: [(-38 -77 32 18) -77]
Test Case: 475 | Input/Output: [(-6 79 -96 -1) -96]
Test Case: 476 | Input/Output: [(66 34 -71 16) -71]
Test Case: 477 | Input/Output: [(-80 -93 -32 45) -93]
Test Case: 478 | Input/Output: [(3 48 33 22) 3]
Test Case: 479 | Input/Output: [(-9 -81 -11 73) -81]
Test Case: 480 | Input/Output: [(8 82 -57 22) -57]
Test Case: 481 | Input/Output: [(61 54 43 -27) -27]
Test Case: 482 | Input/Output: [(0 68 45 -38) -38]
Test Case: 483 | Input/Output: [(-93 -21 -49 -80) -93]
Test Case: 484 | Input/Output: [(-98 37 -80 76) -98]
Test Case: 485 | Input/Output: [(-63 -98 -66 -99) -99]
Test Case: 486 | Input/Output: [(-54 30 -33 -11) -54]
Test Case: 487 | Input/Output: [(29 21 -15 -80) -80]
Test Case: 488 | Input/Output: [(-58 42 -46 -66) -66]
Test Case: 489 | Input/Output: [(-66 -48 91 -75) -75]
Test Case: 490 | Input/Output: [(-54 29 29 28) -54]
Test Case: 491 | Input/Output: [(-49 -1 71 58) -49]
Test Case: 492 | Input/Output: [(91 -3 -35 -15) -35]
Test Case: 493 | Input/Output: [(-26 24 27 -72) -72]
Test Case: 494 | Input/Output: [(-43 -27 -42 81) -43]
Test Case: 495 | Input/Output: [(-87 47 98 74) -87]
Test Case: 496 | Input/Output: [(23 47 32 62) 23]
Test Case: 497 | Input/Output: [(99 38 21 -28) -28]
Test Case: 498 | Input/Output: [(42 28 54 62) 28]
Test Case: 499 | Input/Output: [(-43 -65 21 51) -65]
Test Case: 500 | Input/Output: [(-35 -19 -1 34) -35]
Test Case: 501 | Input/Output: [(30 32 10 44) 10]
Test Case: 502 | Input/Output: [(91 40 -89 90) -89]
Test Case: 503 | Input/Output: [(-33 29 -75 85) -75]
Test Case: 504 | Input/Output: [(74 -66 -85 28) -85]
Test Case: 505 | Input/Output: [(85 -36 -79 -90) -90]
Test Case: 506 | Input/Output: [(68 90 -41 77) -41]
Test Case: 507 | Input/Output: [(82 96 23 -89) -89]
Test Case: 508 | Input/Output: [(52 -65 20 -65) -65]
Test Case: 509 | Input/Output: [(-74 -50 -68 58) -74]
Test Case: 510 | Input/Output: [(-48 -74 -26 40) -74]
Test Case: 511 | Input/Output: [(-75 -71 -69 60) -75]
Test Case: 512 | Input/Output: [(57 -66 4 20) -66]
Test Case: 513 | Input/Output: [(-46 89 -91 33) -91]
Test Case: 514 | Input/Output: [(-24 44 93 -27) -27]
Test Case: 515 | Input/Output: [(63 -32 53 -90) -90]
Test Case: 516 | Input/Output: [(31 29 -69 39) -69]
Test Case: 517 | Input/Output: [(-69 -36 -71 97) -71]
Test Case: 518 | Input/Output: [(-56 62 -100 -30) -100]
Test Case: 519 | Input/Output: [(41 -42 48 -61) -61]
Test Case: 520 | Input/Output: [(-40 18 28 -46) -46]
Test Case: 521 | Input/Output: [(-74 79 -93 -26) -93]
Test Case: 522 | Input/Output: [(-87 76 41 64) -87]
Test Case: 523 | Input/Output: [(47 -35 -3 89) -35]
Test Case: 524 | Input/Output: [(90 33 2 -81) -81]
Test Case: 525 | Input/Output: [(16 -40 -36 -15) -40]
Test Case: 526 | Input/Output: [(-80 5 -38 -4) -80]
Test Case: 527 | Input/Output: [(79 -13 -75 -46) -75]
Test Case: 528 | Input/Output: [(-51 43 -55 20) -55]
Test Case: 529 | Input/Output: [(-83 84 61 46) -83]
Test Case: 530 | Input/Output: [(-76 -4 77 98) -76]
Test Case: 531 | Input/Output: [(64 43 -39 100) -39]
Test Case: 532 | Input/Output: [(-80 39 69 83) -80]
Test Case: 533 | Input/Output: [(-63 -52 -74 8) -74]
Test Case: 534 | Input/Output: [(36 -63 34 20) -63]
Test Case: 535 | Input/Output: [(-80 35 49 43) -80]
Test Case: 536 | Input/Output: [(-47 -84 20 93) -84]
Test Case: 537 | Input/Output: [(-42 -21 15 15) -42]
Test Case: 538 | Input/Output: [(-85 -100 -81 -71) -100]
Test Case: 539 | Input/Output: [(31 -4 73 -65) -65]
Test Case: 540 | Input/Output: [(-95 -90 54 34) -95]
Test Case: 541 | Input/Output: [(18 62 -25 -83) -83]
Test Case: 542 | Input/Output: [(-11 -66 63 -2) -66]
Test Case: 543 | Input/Output: [(-71 9 -52 -98) -98]
Test Case: 544 | Input/Output: [(-94 89 34 8) -94]
Test Case: 545 | Input/Output: [(-53 67 51 41) -53]
Test Case: 546 | Input/Output: [(-91 -29 17 -11) -91]
Test Case: 547 | Input/Output: [(-81 -62 -90 69) -90]
Test Case: 548 | Input/Output: [(-66 72 -5 -96) -96]
Test Case: 549 | Input/Output: [(-11 82 16 -29) -29]
Test Case: 550 | Input/Output: [(-12 69 49 -67) -67]
Test Case: 551 | Input/Output: [(6 -25 -56 -10) -56]
Test Case: 552 | Input/Output: [(-70 -96 57 21) -96]
Test Case: 553 | Input/Output: [(-8 93 -99 -80) -99]
Test Case: 554 | Input/Output: [(-80 36 31 -27) -80]
Test Case: 555 | Input/Output: [(-52 74 51 -14) -52]
Test Case: 556 | Input/Output: [(-49 -84 -99 92) -99]
Test Case: 557 | Input/Output: [(60 62 -97 -91) -97]
Test Case: 558 | Input/Output: [(-68 -64 -41 -79) -79]
Test Case: 559 | Input/Output: [(-2 -77 32 -1) -77]
Test Case: 560 | Input/Output: [(-66 26 -28 -31) -66]
Test Case: 561 | Input/Output: [(-100 -4 84 14) -100]
Test Case: 562 | Input/Output: [(93 2 84 6) 2]
Test Case: 563 | Input/Output: [(-23 97 -30 29) -30]
Test Case: 564 | Input/Output: [(84 40 23 30) 23]
Test Case: 565 | Input/Output: [(97 46 82 55) 46]
Test Case: 566 | Input/Output: [(-2 -98 27 22) -98]
Test Case: 567 | Input/Output: [(-94 -67 36 41) -94]
Test Case: 568 | Input/Output: [(16 -100 -80 -13) -100]
Test Case: 569 | Input/Output: [(21 48 66 2) 2]
Test Case: 570 | Input/Output: [(-47 -94 -84 92) -94]
Test Case: 571 | Input/Output: [(-86 88 15 46) -86]
Test Case: 572 | Input/Output: [(67 53 -92 86) -92]
Test Case: 573 | Input/Output: [(-13 -27 25 73) -27]
Test Case: 574 | Input/Output: [(78 26 38 4) 4]
Test Case: 575 | Input/Output: [(-65 55 -59 -20) -65]
Test Case: 576 | Input/Output: [(-51 65 -47 69) -51]
Test Case: 577 | Input/Output: [(5 27 -47 -9) -47]
Test Case: 578 | Input/Output: [(46 -81 61 -15) -81]
Test Case: 579 | Input/Output: [(-7 -77 -67 -63) -77]
Test Case: 580 | Input/Output: [(52 76 -61 51) -61]
Test Case: 581 | Input/Output: [(-86 60 -8 -84) -86]
Test Case: 582 | Input/Output: [(-39 -58 -31 -50) -58]
Test Case: 583 | Input/Output: [(23 35 98 -51) -51]
Test Case: 584 | Input/Output: [(71 -9 43 -59) -59]
Test Case: 585 | Input/Output: [(-85 76 -57 12) -85]
Test Case: 586 | Input/Output: [(-92 64 -9 -58) -92]
Test Case: 587 | Input/Output: [(44 58 -17 73) -17]
Test Case: 588 | Input/Output: [(-50 -38 5 -51) -51]
Test Case: 589 | Input/Output: [(-9 99 -62 -68) -68]
Test Case: 590 | Input/Output: [(28 44 2 -79) -79]
Test Case: 591 | Input/Output: [(-70 -58 4 -29) -70]
Test Case: 592 | Input/Output: [(75 -59 -50 88) -59]
Test Case: 593 | Input/Output: [(-33 23 -36 -89) -89]
Test Case: 594 | Input/Output: [(85 -22 -56 24) -56]
Test Case: 595 | Input/Output: [(-22 72 -45 -64) -64]
Test Case: 596 | Input/Output: [(47 -46 24 49) -46]
Test Case: 597 | Input/Output: [(91 28 -88 41) -88]
Test Case: 598 | Input/Output: [(44 62 -15 -40) -40]
Test Case: 599 | Input/Output: [(27 68 72 64) 27]
Test Case: 600 | Input/Output: [(65 48 -72 42) -72]
Test Case: 601 | Input/Output: [(-78 47 -13 29) -78]
Test Case: 602 | Input/Output: [(-21 -15 -83 72) -83]
Test Case: 603 | Input/Output: [(92 -49 -56 33) -56]
Test Case: 604 | Input/Output: [(2 -21 25 -99) -99]
Test Case: 605 | Input/Output: [(-41 -17 -57 5) -57]
Test Case: 606 | Input/Output: [(6 -78 -92 -82) -92]
Test Case: 607 | Input/Output: [(18 -71 50 16) -71]
Test Case: 608 | Input/Output: [(39 25 -92 -39) -92]
Test Case: 609 | Input/Output: [(71 -20 96 99) -20]
Test Case: 610 | Input/Output: [(18 -53 -44 -27) -53]
Test Case: 611 | Input/Output: [(-6 35 5 37) -6]
Test Case: 612 | Input/Output: [(98 -31 -20 -20) -31]
Test Case: 613 | Input/Output: [(83 -37 39 41) -37]
Test Case: 614 | Input/Output: [(-63 -52 78 15) -63]
Test Case: 615 | Input/Output: [(-32 53 88 65) -32]
Test Case: 616 | Input/Output: [(-66 68 -70 -33) -70]
Test Case: 617 | Input/Output: [(-14 13 64 23) -14]
Test Case: 618 | Input/Output: [(97 65 -39 -93) -93]
Test Case: 619 | Input/Output: [(93 62 97 -46) -46]
Test Case: 620 | Input/Output: [(74 -33 -86 88) -86]
Test Case: 621 | Input/Output: [(46 -52 85 -79) -79]
Test Case: 622 | Input/Output: [(-56 -100 16 17) -100]
Test Case: 623 | Input/Output: [(35 91 75 94) 35]
Test Case: 624 | Input/Output: [(-11 -75 34 99) -75]
Test Case: 625 | Input/Output: [(-23 52 -8 19) -23]
Test Case: 626 | Input/Output: [(-77 -40 -28 18) -77]
Test Case: 627 | Input/Output: [(73 -54 70 61) -54]
Test Case: 628 | Input/Output: [(31 9 11 -77) -77]
Test Case: 629 | Input/Output: [(-29 -11 -27 -17) -29]
Test Case: 630 | Input/Output: [(69 85 9 -13) -13]
Test Case: 631 | Input/Output: [(-35 34 -29 -57) -57]
Test Case: 632 | Input/Output: [(87 74 -21 83) -21]
Test Case: 633 | Input/Output: [(-7 -28 15 -56) -56]
Test Case: 634 | Input/Output: [(75 62 97 28) 28]
Test Case: 635 | Input/Output: [(-32 75 -44 -80) -80]
Test Case: 636 | Input/Output: [(48 83 77 91) 48]
Test Case: 637 | Input/Output: [(-13 -29 -47 -3) -47]
Test Case: 638 | Input/Output: [(59 -20 -6 58) -20]
Test Case: 639 | Input/Output: [(15 -30 -100 -40) -100]
Test Case: 640 | Input/Output: [(-17 66 42 -29) -29]
Test Case: 641 | Input/Output: [(-46 -44 -22 -15) -46]
Test Case: 642 | Input/Output: [(-91 -12 -3 -73) -91]
Test Case: 643 | Input/Output: [(-52 -16 -98 -96) -98]
Test Case: 644 | Input/Output: [(-40 59 66 -39) -40]
Test Case: 645 | Input/Output: [(-95 -56 56 0) -95]
Test Case: 646 | Input/Output: [(-33 70 -79 -59) -79]
Test Case: 647 | Input/Output: [(-13 -54 38 62) -54]
Test Case: 648 | Input/Output: [(-18 -33 -51 -42) -51]
Test Case: 649 | Input/Output: [(71 -26 -65 -68) -68]
Test Case: 650 | Input/Output: [(16 45 91 21) 16]
Test Case: 651 | Input/Output: [(-25 -71 11 -45) -71]
Test Case: 652 | Input/Output: [(-29 -57 -24 89) -57]
Test Case: 653 | Input/Output: [(32 25 21 -88) -88]
Test Case: 654 | Input/Output: [(-9 65 35 -8) -9]
Test Case: 655 | Input/Output: [(2 64 74 -53) -53]
Test Case: 656 | Input/Output: [(53 6 24 55) 6]
Test Case: 657 | Input/Output: [(61 80 56 -88) -88]
Test Case: 658 | Input/Output: [(-23 45 -21 -58) -58]
Test Case: 659 | Input/Output: [(52 27 -46 -78) -78]
Test Case: 660 | Input/Output: [(-10 -82 74 -70) -82]
Test Case: 661 | Input/Output: [(72 -12 -52 -92) -92]
Test Case: 662 | Input/Output: [(-51 84 56 -87) -87]
Test Case: 663 | Input/Output: [(26 69 48 38) 26]
Test Case: 664 | Input/Output: [(38 77 58 -44) -44]
Test Case: 665 | Input/Output: [(17 -47 -76 -29) -76]
Test Case: 666 | Input/Output: [(-83 -94 -43 1) -94]
Test Case: 667 | Input/Output: [(33 7 64 -21) -21]
Test Case: 668 | Input/Output: [(8 33 -55 -38) -55]
Test Case: 669 | Input/Output: [(-6 -46 -10 3) -46]
Test Case: 670 | Input/Output: [(-48 88 9 49) -48]
Test Case: 671 | Input/Output: [(48 -52 -33 33) -52]
Test Case: 672 | Input/Output: [(-57 48 50 -55) -57]
Test Case: 673 | Input/Output: [(-36 -49 -81 -94) -94]
Test Case: 674 | Input/Output: [(4 -52 67 -64) -64]
Test Case: 675 | Input/Output: [(-46 -27 45 56) -46]
Test Case: 676 | Input/Output: [(0 -46 -94 32) -94]
Test Case: 677 | Input/Output: [(62 -69 -93 51) -93]
Test Case: 678 | Input/Output: [(-58 74 54 -6) -58]
Test Case: 679 | Input/Output: [(38 89 52 82) 38]
Test Case: 680 | Input/Output: [(-4 3 -99 98) -99]
Test Case: 681 | Input/Output: [(51 -86 98 96) -86]
Test Case: 682 | Input/Output: [(37 94 -9 91) -9]
Test Case: 683 | Input/Output: [(6 69 64 -36) -36]
Test Case: 684 | Input/Output: [(35 -4 26 -18) -18]
Test Case: 685 | Input/Output: [(-16 -81 -40 -22) -81]
Test Case: 686 | Input/Output: [(-94 77 -41 -31) -94]
Test Case: 687 | Input/Output: [(-50 2 2 -97) -97]
Test Case: 688 | Input/Output: [(-65 6 79 -88) -88]
Test Case: 689 | Input/Output: [(3 -89 -28 -76) -89]
Test Case: 690 | Input/Output: [(-7 -72 -95 -14) -95]
Test Case: 691 | Input/Output: [(-74 31 15 -90) -90]
Test Case: 692 | Input/Output: [(52 -83 1 68) -83]
Test Case: 693 | Input/Output: [(-88 17 -100 18) -100]
Test Case: 694 | Input/Output: [(83 33 67 -19) -19]
Test Case: 695 | Input/Output: [(91 77 12 86) 12]
Test Case: 696 | Input/Output: [(59 -58 53 -70) -70]
Test Case: 697 | Input/Output: [(-21 -47 -87 -77) -87]
Test Case: 698 | Input/Output: [(89 8 99 -95) -95]
Test Case: 699 | Input/Output: [(-42 76 -99 71) -99]
Test Case: 700 | Input/Output: [(-4 2 82 -53) -53]
Test Case: 701 | Input/Output: [(8 85 67 -57) -57]
Test Case: 702 | Input/Output: [(53 18 -93 23) -93]
Test Case: 703 | Input/Output: [(70 -48 -7 -10) -48]
Test Case: 704 | Input/Output: [(35 -40 97 7) -40]
Test Case: 705 | Input/Output: [(-60 66 57 12) -60]
Test Case: 706 | Input/Output: [(-74 62 84 -39) -74]
Test Case: 707 | Input/Output: [(-8 -77 -5 -74) -77]
Test Case: 708 | Input/Output: [(82 -58 27 -87) -87]
Test Case: 709 | Input/Output: [(50 53 52 3) 3]
Test Case: 710 | Input/Output: [(10 -50 36 -55) -55]
Test Case: 711 | Input/Output: [(58 71 10 -69) -69]
Test Case: 712 | Input/Output: [(79 -28 -80 80) -80]
Test Case: 713 | Input/Output: [(-63 -83 31 30) -83]
Test Case: 714 | Input/Output: [(76 82 -25 -4) -25]
Test Case: 715 | Input/Output: [(-26 -25 36 -68) -68]
Test Case: 716 | Input/Output: [(-69 15 -32 67) -69]
Test Case: 717 | Input/Output: [(-3 -86 28 32) -86]
Test Case: 718 | Input/Output: [(-42 36 34 23) -42]
Test Case: 719 | Input/Output: [(76 -99 -42 -73) -99]
Test Case: 720 | Input/Output: [(-71 48 36 -50) -71]
Test Case: 721 | Input/Output: [(13 -79 27 -3) -79]
Test Case: 722 | Input/Output: [(48 30 -48 66) -48]
Test Case: 723 | Input/Output: [(70 24 83 -47) -47]
Test Case: 724 | Input/Output: [(-80 -1 79 -2) -80]
Test Case: 725 | Input/Output: [(13 36 28 -13) -13]
Test Case: 726 | Input/Output: [(-49 -5 -86 7) -86]
Test Case: 727 | Input/Output: [(-88 -87 20 -23) -88]
Test Case: 728 | Input/Output: [(-13 -99 83 -65) -99]
Test Case: 729 | Input/Output: [(-64 19 36 -71) -71]
Test Case: 730 | Input/Output: [(80 -24 22 -20) -24]
Test Case: 731 | Input/Output: [(77 -63 -5 -37) -63]
Test Case: 732 | Input/Output: [(-99 9 77 5) -99]
Test Case: 733 | Input/Output: [(-16 -60 -40 86) -60]
Test Case: 734 | Input/Output: [(-10 45 -10 -92) -92]
Test Case: 735 | Input/Output: [(53 26 68 -44) -44]
Test Case: 736 | Input/Output: [(-85 6 23 6) -85]
Test Case: 737 | Input/Output: [(59 -8 -11 3) -11]
Test Case: 738 | Input/Output: [(-23 35 21 -32) -32]
Test Case: 739 | Input/Output: [(-61 42 -88 -22) -88]
Test Case: 740 | Input/Output: [(34 -45 69 -86) -86]
Test Case: 741 | Input/Output: [(6 -85 -69 -58) -85]
Test Case: 742 | Input/Output: [(-60 98 97 -15) -60]
Test Case: 743 | Input/Output: [(-62 77 -9 -79) -79]
Test Case: 744 | Input/Output: [(55 87 -32 -22) -32]
Test Case: 745 | Input/Output: [(97 -72 -88 83) -88]
Test Case: 746 | Input/Output: [(-94 93 19 25) -94]
Test Case: 747 | Input/Output: [(11 38 -8 11) -8]
Test Case: 748 | Input/Output: [(52 27 -45 -17) -45]
Test Case: 749 | Input/Output: [(-58 2 29 -90) -90]
Test Case: 750 | Input/Output: [(-63 -41 -93 -77) -93]
Test Case: 751 | Input/Output: [(50 83 -69 -64) -69]
Test Case: 752 | Input/Output: [(-37 -47 -78 -71) -78]
Test Case: 753 | Input/Output: [(-77 -59 28 -85) -85]
Test Case: 754 | Input/Output: [(-45 0 52 32) -45]
Test Case: 755 | Input/Output: [(68 33 30 56) 30]
Test Case: 756 | Input/Output: [(63 -91 -61 62) -91]
Test Case: 757 | Input/Output: [(-21 44 -29 -15) -29]
Test Case: 758 | Input/Output: [(98 40 -46 67) -46]
Test Case: 759 | Input/Output: [(-90 36 -81 77) -90]
Test Case: 760 | Input/Output: [(-71 -50 -77 39) -77]
Test Case: 761 | Input/Output: [(-64 -55 45 -84) -84]
Test Case: 762 | Input/Output: [(-73 -55 -58 -53) -73]
Test Case: 763 | Input/Output: [(-43 -67 37 -96) -96]
Test Case: 764 | Input/Output: [(86 0 -58 -98) -98]
Test Case: 765 | Input/Output: [(46 -35 1 -28) -35]
Test Case: 766 | Input/Output: [(62 -56 -15 -90) -90]
Test Case: 767 | Input/Output: [(37 -75 45 -41) -75]
Test Case: 768 | Input/Output: [(-14 51 -17 -20) -20]
Test Case: 769 | Input/Output: [(33 -6 31 80) -6]
Test Case: 770 | Input/Output: [(30 93 100 22) 22]
Test Case: 771 | Input/Output: [(-79 -34 -44 29) -79]
Test Case: 772 | Input/Output: [(-36 70 -24 95) -36]
Test Case: 773 | Input/Output: [(72 -29 -70 -55) -70]
Test Case: 774 | Input/Output: [(79 -20 7 6) -20]
Test Case: 775 | Input/Output: [(-29 -95 92 1) -95]
Test Case: 776 | Input/Output: [(27 70 -72 26) -72]
Test Case: 777 | Input/Output: [(37 -53 -33 42) -53]
Test Case: 778 | Input/Output: [(-90 -89 -59 -34) -90]
Test Case: 779 | Input/Output: [(-69 4 12 -6) -69]
Test Case: 780 | Input/Output: [(-36 27 -81 -10) -81]
Test Case: 781 | Input/Output: [(-68 -18 -42 64) -68]
Test Case: 782 | Input/Output: [(89 97 -45 26) -45]
Test Case: 783 | Input/Output: [(76 -13 -76 -43) -76]
Test Case: 784 | Input/Output: [(8 8 -26 72) -26]
Test Case: 785 | Input/Output: [(-51 -96 -56 65) -96]
Test Case: 786 | Input/Output: [(27 50 39 75) 27]
Test Case: 787 | Input/Output: [(-95 26 85 -94) -95]
Test Case: 788 | Input/Output: [(-80 29 -46 -55) -80]
Test Case: 789 | Input/Output: [(-63 -78 -45 -28) -78]
Test Case: 790 | Input/Output: [(-75 69 83 37) -75]
Test Case: 791 | Input/Output: [(-31 -84 70 79) -84]
Test Case: 792 | Input/Output: [(11 94 -15 80) -15]
Test Case: 793 | Input/Output: [(-53 34 -34 32) -53]
Test Case: 794 | Input/Output: [(84 -83 -30 -6) -83]
Test Case: 795 | Input/Output: [(-41 -49 -32 14) -49]
Test Case: 796 | Input/Output: [(11 -86 -45 24) -86]
Test Case: 797 | Input/Output: [(-79 19 -59 -60) -79]
Test Case: 798 | Input/Output: [(50 -17 46 -82) -82]
Test Case: 799 | Input/Output: [(78 -80 -64 60) -80]
Test Case: 800 | Input/Output: [(-48 56 15 -32) -48]
Test Case: 801 | Input/Output: [(65 -42 66 60) -42]
Test Case: 802 | Input/Output: [(-36 -90 -49 -64) -90]
Test Case: 803 | Input/Output: [(-84 53 -71 -92) -92]
Test Case: 804 | Input/Output: [(-97 13 -89 39) -97]
Test Case: 805 | Input/Output: [(91 87 40 -91) -91]
Test Case: 806 | Input/Output: [(-24 -4 -58 -15) -58]
Test Case: 807 | Input/Output: [(-16 -57 29 25) -57]
Test Case: 808 | Input/Output: [(62 1 38 -95) -95]
Test Case: 809 | Input/Output: [(-2 8 -90 -49) -90]
Test Case: 810 | Input/Output: [(-19 72 35 60) -19]
Test Case: 811 | Input/Output: [(40 81 -91 10) -91]
Test Case: 812 | Input/Output: [(-59 69 -69 -9) -69]
Test Case: 813 | Input/Output: [(-80 -2 48 96) -80]
Test Case: 814 | Input/Output: [(-54 60 -26 -9) -54]
Test Case: 815 | Input/Output: [(64 72 -16 -28) -28]
Test Case: 816 | Input/Output: [(-50 28 -42 63) -50]
Test Case: 817 | Input/Output: [(6 -81 60 7) -81]
Test Case: 818 | Input/Output: [(-100 16 29 94) -100]
Test Case: 819 | Input/Output: [(23 -24 -20 96) -24]
Test Case: 820 | Input/Output: [(-42 55 -58 -90) -90]
Test Case: 821 | Input/Output: [(92 -4 -90 -43) -90]
Test Case: 822 | Input/Output: [(-41 32 -39 82) -41]
Test Case: 823 | Input/Output: [(-69 -5 -69 50) -69]
Test Case: 824 | Input/Output: [(-61 74 -17 -89) -89]
Test Case: 825 | Input/Output: [(-3 0 93 74) -3]
Test Case: 826 | Input/Output: [(62 -63 -68 96) -68]
Test Case: 827 | Input/Output: [(-87 25 24 15) -87]
Test Case: 828 | Input/Output: [(-62 -8 -17 -57) -62]
Test Case: 829 | Input/Output: [(92 20 -91 -22) -91]
Test Case: 830 | Input/Output: [(4 -2 35 99) -2]
Test Case: 831 | Input/Output: [(95 -51 -10 -58) -58]
Test Case: 832 | Input/Output: [(-50 -37 80 19) -50]
Test Case: 833 | Input/Output: [(56 1 -48 91) -48]
Test Case: 834 | Input/Output: [(-8 -7 50 75) -8]
Test Case: 835 | Input/Output: [(7 35 -13 24) -13]
Test Case: 836 | Input/Output: [(27 -23 7 82) -23]
Test Case: 837 | Input/Output: [(-63 20 9 -17) -63]
Test Case: 838 | Input/Output: [(-13 -56 -32 3) -56]
Test Case: 839 | Input/Output: [(26 -12 -90 -1) -90]
Test Case: 840 | Input/Output: [(62 -28 54 -34) -34]
Test Case: 841 | Input/Output: [(-45 79 -80 -19) -80]
Test Case: 842 | Input/Output: [(-40 -31 43 -36) -40]
Test Case: 843 | Input/Output: [(-36 70 -86 -37) -86]
Test Case: 844 | Input/Output: [(-5 69 -59 90) -59]
Test Case: 845 | Input/Output: [(15 79 -54 -44) -54]
Test Case: 846 | Input/Output: [(1 -54 -72 -50) -72]
Test Case: 847 | Input/Output: [(-76 -55 -25 6) -76]
Test Case: 848 | Input/Output: [(6 11 74 62) 6]
Test Case: 849 | Input/Output: [(65 -47 53 86) -47]
Test Case: 850 | Input/Output: [(18 -63 19 -69) -69]
Test Case: 851 | Input/Output: [(-26 99 90 -88) -88]
Test Case: 852 | Input/Output: [(54 72 1 62) 1]
Test Case: 853 | Input/Output: [(37 76 63 3) 3]
Test Case: 854 | Input/Output: [(-49 35 -23 -43) -49]
Test Case: 855 | Input/Output: [(-2 -47 -16 -83) -83]
Test Case: 856 | Input/Output: [(-6 67 -65 16) -65]
Test Case: 857 | Input/Output: [(-51 -94 -45 -54) -94]
Test Case: 858 | Input/Output: [(-71 9 48 1) -71]
Test Case: 859 | Input/Output: [(60 -95 -92 -89) -95]
Test Case: 860 | Input/Output: [(27 92 -11 -39) -39]
Test Case: 861 | Input/Output: [(-23 11 -2 -18) -23]
Test Case: 862 | Input/Output: [(-38 51 -44 -62) -62]
Test Case: 863 | Input/Output: [(-87 -83 7 76) -87]
Test Case: 864 | Input/Output: [(18 -41 -57 -14) -57]
Test Case: 865 | Input/Output: [(89 -67 14 -37) -67]
Test Case: 866 | Input/Output: [(-62 -54 -8 82) -62]
Test Case: 867 | Input/Output: [(-38 41 27 20) -38]
Test Case: 868 | Input/Output: [(63 31 93 1) 1]
Test Case: 869 | Input/Output: [(-59 -20 -41 22) -59]
Test Case: 870 | Input/Output: [(-69 27 -6 49) -69]
Test Case: 871 | Input/Output: [(-69 -6 86 44) -69]
Test Case: 872 | Input/Output: [(53 55 33 -78) -78]
Test Case: 873 | Input/Output: [(10 -38 43 35) -38]
Test Case: 874 | Input/Output: [(75 -93 -9 73) -93]
Test Case: 875 | Input/Output: [(42 5 -48 -44) -48]
Test Case: 876 | Input/Output: [(17 -35 -55 75) -55]
Test Case: 877 | Input/Output: [(-75 18 66 -95) -95]
Test Case: 878 | Input/Output: [(90 -22 19 -35) -35]
Test Case: 879 | Input/Output: [(18 -69 13 41) -69]
Test Case: 880 | Input/Output: [(89 90 -73 22) -73]
Test Case: 881 | Input/Output: [(-42 -74 -28 -30) -74]
Test Case: 882 | Input/Output: [(32 84 -80 53) -80]
Test Case: 883 | Input/Output: [(-70 99 -96 47) -96]
Test Case: 884 | Input/Output: [(-39 57 -47 87) -47]
Test Case: 885 | Input/Output: [(-15 73 -7 33) -15]
Test Case: 886 | Input/Output: [(86 -57 -34 26) -57]
Test Case: 887 | Input/Output: [(-19 -81 71 -37) -81]
Test Case: 888 | Input/Output: [(36 -51 -86 -52) -86]
Test Case: 889 | Input/Output: [(48 -68 -49 30) -68]
Test Case: 890 | Input/Output: [(68 -27 -9 75) -27]
Test Case: 891 | Input/Output: [(-37 0 1 70) -37]
Test Case: 892 | Input/Output: [(-64 86 30 -31) -64]
Test Case: 893 | Input/Output: [(40 -62 48 -48) -62]
Test Case: 894 | Input/Output: [(35 -21 9 -5) -21]
Test Case: 895 | Input/Output: [(-40 -96 69 43) -96]
Test Case: 896 | Input/Output: [(-94 11 -26 -37) -94]
Test Case: 897 | Input/Output: [(-71 -6 -83 57) -83]
Test Case: 898 | Input/Output: [(-74 64 -95 1) -95]
Test Case: 899 | Input/Output: [(-94 -51 52 68) -94]
Test Case: 900 | Input/Output: [(70 38 -23 -44) -44]
Test Case: 901 | Input/Output: [(72 35 -58 -64) -64]
Test Case: 902 | Input/Output: [(-11 -34 -100 38) -100]
Test Case: 903 | Input/Output: [(85 -52 -25 -36) -52]
Test Case: 904 | Input/Output: [(8 31 18 -86) -86]
Test Case: 905 | Input/Output: [(0 45 9 -94) -94]
Test Case: 906 | Input/Output: [(-86 70 86 -87) -87]
Test Case: 907 | Input/Output: [(27 2 99 62) 2]
Test Case: 908 | Input/Output: [(36 53 -9 -63) -63]
Test Case: 909 | Input/Output: [(15 -85 98 -70) -85]
Test Case: 910 | Input/Output: [(89 80 37 -95) -95]
Test Case: 911 | Input/Output: [(77 -41 -77 14) -77]
Test Case: 912 | Input/Output: [(-90 91 -90 74) -90]
Test Case: 913 | Input/Output: [(-72 -18 -37 60) -72]
Test Case: 914 | Input/Output: [(79 -63 -74 -83) -83]
Test Case: 915 | Input/Output: [(-53 1 37 14) -53]
Test Case: 916 | Input/Output: [(36 -8 -59 -67) -67]
Test Case: 917 | Input/Output: [(38 1 -55 83) -55]
Test Case: 918 | Input/Output: [(13 29 -88 41) -88]
Test Case: 919 | Input/Output: [(14 73 -34 -70) -70]
Test Case: 920 | Input/Output: [(-44 -77 71 -11) -77]
Test Case: 921 | Input/Output: [(-87 -3 -17 4) -87]
Test Case: 922 | Input/Output: [(-17 -57 44 49) -57]
Test Case: 923 | Input/Output: [(97 0 40 -63) -63]
Test Case: 924 | Input/Output: [(-80 -7 42 73) -80]
Test Case: 925 | Input/Output: [(92 33 -50 -52) -52]
Test Case: 926 | Input/Output: [(-98 -36 2 73) -98]
Test Case: 927 | Input/Output: [(-36 2 97 -17) -36]
Test Case: 928 | Input/Output: [(-48 74 28 -30) -48]
Test Case: 929 | Input/Output: [(83 -31 -45 77) -45]
Test Case: 930 | Input/Output: [(-57 18 -41 55) -57]
Test Case: 931 | Input/Output: [(40 20 18 -57) -57]
Test Case: 932 | Input/Output: [(-74 92 -7 -50) -74]
Test Case: 933 | Input/Output: [(18 37 27 -47) -47]
Test Case: 934 | Input/Output: [(-13 72 46 -75) -75]
Test Case: 935 | Input/Output: [(84 -24 54 -17) -24]
Test Case: 936 | Input/Output: [(42 21 57 88) 21]
Test Case: 937 | Input/Output: [(33 -96 -13 7) -96]
Test Case: 938 | Input/Output: [(-37 3 46 18) -37]
Test Case: 939 | Input/Output: [(-22 40 -57 13) -57]
Test Case: 940 | Input/Output: [(52 -59 85 -11) -59]
Test Case: 941 | Input/Output: [(8 56 83 -49) -49]
Test Case: 942 | Input/Output: [(-16 61 -49 -36) -49]
Test Case: 943 | Input/Output: [(87 86 94 26) 26]
Test Case: 944 | Input/Output: [(32 3 17 87) 3]
Test Case: 945 | Input/Output: [(24 52 -62 14) -62]
Test Case: 946 | Input/Output: [(-43 -36 -88 1) -88]
Test Case: 947 | Input/Output: [(-97 -19 100 -73) -97]
Test Case: 948 | Input/Output: [(95 -28 34 30) -28]
Test Case: 949 | Input/Output: [(-15 94 38 -64) -64]
Test Case: 950 | Input/Output: [(-45 45 7 77) -45]
Test Case: 951 | Input/Output: [(63 -53 94 -32) -53]
Test Case: 952 | Input/Output: [(88 87 -64 36) -64]
Test Case: 953 | Input/Output: [(-73 -86 -94 -64) -94]
Test Case: 954 | Input/Output: [(-48 82 -14 10) -48]
Test Case: 955 | Input/Output: [(52 56 -53 -78) -78]
Test Case: 956 | Input/Output: [(-16 83 51 87) -16]
Test Case: 957 | Input/Output: [(-54 -10 97 -47) -54]
Test Case: 958 | Input/Output: [(-84 -32 91 -75) -84]
Test Case: 959 | Input/Output: [(37 98 -11 74) -11]
Test Case: 960 | Input/Output: [(79 7 -2 18) -2]
Test Case: 961 | Input/Output: [(-69 63 -9 -74) -74]
Test Case: 962 | Input/Output: [(57 -55 46 82) -55]
Test Case: 963 | Input/Output: [(-76 31 97 -40) -76]
Test Case: 964 | Input/Output: [(0 -53 68 -26) -53]
Test Case: 965 | Input/Output: [(-47 26 18 -13) -47]
Test Case: 966 | Input/Output: [(-19 -47 -27 94) -47]
Test Case: 967 | Input/Output: [(-23 68 1 76) -23]
Test Case: 968 | Input/Output: [(88 52 50 -100) -100]
Test Case: 969 | Input/Output: [(-83 -25 30 -58) -83]
Test Case: 970 | Input/Output: [(41 -13 34 -93) -93]
Test Case: 971 | Input/Output: [(2 -71 28 74) -71]
Test Case: 972 | Input/Output: [(-95 -5 -58 -85) -95]
Test Case: 973 | Input/Output: [(-77 59 -26 -59) -77]
Test Case: 974 | Input/Output: [(88 44 -66 53) -66]
Test Case: 975 | Input/Output: [(39 -82 -18 -12) -82]
Test Case: 976 | Input/Output: [(-20 -79 25 -71) -79]
Test Case: 977 | Input/Output: [(-8 8 -66 -33) -66]
Test Case: 978 | Input/Output: [(-47 -20 -62 30) -62]
Test Case: 979 | Input/Output: [(-23 -86 -67 82) -86]
Test Case: 980 | Input/Output: [(79 -6 -16 77) -16]
Test Case: 981 | Input/Output: [(-37 -81 10 -14) -81]
Test Case: 982 | Input/Output: [(33 53 84 -79) -79]
Test Case: 983 | Input/Output: [(-36 -56 -94 -36) -94]
Test Case: 984 | Input/Output: [(-57 -22 38 -5) -57]
Test Case: 985 | Input/Output: [(29 92 -9 0) -9]
Test Case: 986 | Input/Output: [(84 -79 47 -94) -94]
Test Case: 987 | Input/Output: [(-7 27 59 65) -7]
Test Case: 988 | Input/Output: [(95 59 -32 -48) -48]
Test Case: 989 | Input/Output: [(-75 -41 -76 -93) -93]
Test Case: 990 | Input/Output: [(83 -89 56 -51) -89]
Test Case: 991 | Input/Output: [(91 -8 -9 -89) -89]
Test Case: 992 | Input/Output: [(-60 -19 -26 33) -60]
Test Case: 993 | Input/Output: [(-88 96 -56 -45) -88]
Test Case: 994 | Input/Output: [(54 -64 47 69) -64]
Test Case: 995 | Input/Output: [(-50 -86 -75 92) -86]
Test Case: 996 | Input/Output: [(-11 71 -62 -100) -100]
Test Case: 997 | Input/Output: [(93 98 -69 15) -69]
Test Case: 998 | Input/Output: [(-14 -47 3 32) -47]
Test Case: 999 | Input/Output: [(-55 57 6 -4) -55]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 127 -83 -106 -33 70 79 -109 -85 28 29 -62 -32 -126 -3 126 75
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[56 56 7 56] 7] [[99 99 36 99] 36] [[94 94 50 94] 50] [[-100 -100 -100 -82] -100] [[81 72 72 72] 72] [[-44 -44 100 -44] -44] [[-91 -91 -91 -80] -91] [[41 41 82 41] 41] [[-42 -42 -42 -61] -61] [[57 57 57 -48] -48] [(59 59 59 59) 59] [(-76 -76 -76 -76) -76] [(83 83 83 83) 83] [(-73 -73 -73 -73) -73] [(-26 -26 -26 -26) -26] [(48 81 5 69) 5] [(25 6 50 21) 6] [(59 51 51 55) 51] [(13 38 11 58) 11] [(35 44 1 87) 1] [(60 22 12 100) 12] [(93 39 11 15) 11] [(58 77 58 99) 58] [(37 28 20 73) 20] [(48 59 32 55) 32] [(94 32 5 80) 5] [(33 97 17 57) 17] [(13 70 63 90) 13] [(29 86 87 6) 6] [(67 90 21 41) 21] [(30 28 86 82) 28] [(3 56 32 64) 3] [(53 67 59 12) 12] [(51 44 10 11) 10] [(53 9 29 5) 5] [(-20 77 -86 39) -86] [(22 1 52 -6) -6] [(58 -27 -47 57) -47] [(99 -19 24 60) -19] [(99 80 -42 54) -42] [(-2 49 -33 35) -33] [(-24 -86 -71 -47) -86] [(23 -37 -93 78) -93] [(54 -13 -55 -69) -69] [(-61 -6 86 17) -61] [(95 28 48 -94) -94] [(-95 22 69 -2) -95] [(93 69 98 -100) -100] [(56 -43 -21 40) -43] [(82 -40 -35 -82) -82] [(-9 -81 -5 3) -81] [(77 -73 45 19) -73] [(16 -70 -11 -89) -89] [(-78 -16 -14 -98) -98] [(-91 -27 71 -63) -91] [(-57 -97 -18 -52) -97] [(11 74 -95 -15) -95] [(-35 64 -70 -32) -70] [(-27 18 60 54) -27] [(82 -99 80 -24) -99] [(-86 76 22 -25) -86] [(84 80 -30 96) -30] [(-81 -60 -98 61) -98] [(-32 96 78 83) -32] [(39 11 -71 99) -71] [(-100 26 86 84) -100] [(3 -13 52 -90) -90] [(95 70 -96 -52) -96] [(-87 14 5 -95) -95] [(-19 62 -81 -34) -81] [(-11 10 -49 75) -49] [(-41 -29 67 -83) -83] [(68 -26 -51 47) -51] [(44 27 70 -85) -85] [(59 -36 -32 81) -36] [(-24 30 -75 -36) -75] [(-80 43 -76 -92) -92] [(-20 -53 -8 -26) -53] [(-94 60 -55 77) -94] [(-5 28 -2 80) -5] [(-28 -66 -47 -23) -66] [(55 -36 98 -27) -36] [(80 56 73 -85) -85] [(-38 50 -53 51) -53] [(-55 42 32 -41) -55] [(-48 73 2 74) -48] [(95 -86 -35 62) -86] [(48 -73 45 89) -73] [(-73 -79 50 27) -79] [(-83 -53 -44 25) -83] [(12 82 -33 -21) -33] [(91 -65 38 -11) -65] [(-50 -64 -93 -10) -93] [(-21 -46 15 14) -46] [(50 95 93 -68) -68])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_957} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction in4})
Lexicase best program: (integer_dup_items integer_add integer_sub exec_yank boolean_yank integer_yankdup in1 exec_stackdepth tagged_957 in3 print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_frominteger integer_yankdup exec_pop (integer_lt in1 integer_swap exec_if (exec_noop in4) ()))
Lexicase best errors: [1 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.148
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_957} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction in4})
Zero cases best program: (integer_dup_items integer_add integer_sub exec_yank boolean_yank integer_yankdup in1 exec_stackdepth tagged_957 in3 print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_frominteger integer_yankdup exec_pop (integer_lt in1 integer_swap exec_if (exec_noop in4) ()))
Zero cases best errors: [1 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 8 16 14 1 1 1 1 6 1)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 8 16 14 1 1 1 1 6 1)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_957} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction in4})
Best program: (integer_dup_items integer_add integer_sub exec_yank boolean_yank integer_yankdup in1 exec_stackdepth tagged_957 in3 print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_frominteger integer_yankdup exec_pop (integer_lt in1 integer_swap exec_if (exec_noop in4) ()))
Errors: [1 1 0 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 27
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 9.948
Median total errors in population: 10
Error averages by case: (0.997 0.992 0.984 0.986 0.999 0.999 0.999 0.999 0.994 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.925
Average program size in population (points): 68.642
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 495743
--- Timings ---
Current time: 1559593790666 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 32.8%
Fitness Testing:      1.5 seconds, 62.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction tagged_957} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction in4})
Lexicase best program: (integer_dup_items integer_add exec_yank boolean_yank integer_yankdup in1 tagged_957 in3 print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_eq boolean_frominteger integer_yankdup exec_pop (integer_lt in1 integer_swap exec_noop in4))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 23
Percent parens: 0.087
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction tagged_957} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction in4})
Zero cases best program: (integer_dup_items integer_add exec_yank boolean_yank integer_yankdup in1 tagged_957 in3 print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_eq boolean_frominteger integer_yankdup exec_pop (integer_lt in1 integer_swap exec_noop in4))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 23
Percent parens: 0.087
--- Lexicase Population Statistics ---
Count of elite individuals by case: (57 423 536 115 80 428 79 57 424 56)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (57 423 536 115 80 428 79 57 424 56)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_957} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 3, :instruction integer_add} {:close 1, :instruction in4})
Best program: (integer_add integer_sub exec_yank boolean_yank integer_yankdup boolean_dup exec_stackdepth tagged_957 in3 print_integer in4 boolean_invert_first_then_and boolean_frominteger integer_yankdup exec_pop (print_newline integer_lt in1 integer_swap exec_if (exec_noop integer_add) ()) in4)
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 27
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 7.745
Median total errors in population: 8
Error averages by case: (0.943 0.577 0.464 0.885 0.92 0.572 0.921 0.943 0.576 0.944)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.444
Average program size in population (points): 38.927
Average percent parens in population: 0.196
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 838739
--- Timings ---
Current time: 1559593792277 milliseconds
Total Time:           4.2 seconds
Initialization:       0.1 seconds,  2.6%
Reproduction:         1.8 seconds, 42.3%
Fitness Testing:      1.9 seconds, 45.5%
Report:               0.4 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction -92} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_dup_items -92 integer_add integer_sub integer_dec exec_yank boolean_yank integer_yankdup in1 exec_stackdepth in3 print_boolean print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_frominteger integer_yankdup boolean_pop exec_pop (integer_lt in1 integer_swap boolean_rot integer_lt) exec_if (exec_noop exec_shove ()) ())
Lexicase best errors: [1 1 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction -92} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_dup_items -92 integer_add integer_sub integer_dec exec_yank boolean_yank integer_yankdup in1 exec_stackdepth in3 print_boolean print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_frominteger integer_yankdup boolean_pop exec_pop (integer_lt in1 integer_swap boolean_rot integer_lt) exec_if (exec_noop exec_shove ()) ())
Zero cases best errors: [1 1 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 101 287 285 92 285 551 173 544 85)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (88 101 287 285 92 285 551 173 544 85)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_boolean_806} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_957} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction in4} {:close 2, :instruction boolean_flush})
Best program: (integer_dup_items integer_add integer_sub exec_yank integer_gt boolean_yank integer_yankdup tag_boolean_806 exec_stackdepth tagged_957 in3 print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_frominteger integer_yankdup integer_min exec_pop (integer_lt in1 integer_swap exec_if (exec_noop in4) (boolean_flush)))
Errors: [1 1 0 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 30
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 7.509
Median total errors in population: 7
Error averages by case: (0.912 0.899 0.713 0.715 0.908 0.715 0.449 0.827 0.456 0.915)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.586
Average program size in population (points): 37.534
Average percent parens in population: 0.224
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1243103
--- Timings ---
Current time: 1559593794009 milliseconds
Total Time:           5.9 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.9 seconds, 48.6%
Fitness Testing:      2.3 seconds, 39.3%
Report:               0.6 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 595
Test mean error for best: 0.59500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_957} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction in4})
Lexicase best program: (integer_dup_items integer_add integer_eq in4 exec_yank boolean_yank integer_yankdup integer_sub in1 exec_stackdepth tagged_957 exec_yank in3 print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_frominteger integer_lte integer_yankdup exec_pop (in1 exec_swap (integer_swap exec_shove (exec_if (exec_noop in4) ())) ()))
Lexicase best errors: [0 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_957} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction in4})
Zero cases best program: (integer_dup_items integer_add integer_eq in4 exec_yank boolean_yank integer_yankdup integer_sub in1 exec_stackdepth tagged_957 exec_yank in3 print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_frominteger integer_lte integer_yankdup exec_pop (in1 exec_swap (integer_swap exec_shove (exec_if (exec_noop in4) ())) ()))
Zero cases best errors: [0 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (130 129 403 65 399 672 92 93 93 112)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (130 129 403 65 399 672 92 93 93 112)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_957} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction in4})
Best program: (integer_dup_items integer_add integer_eq in4 exec_yank boolean_yank integer_yankdup integer_sub in1 exec_stackdepth tagged_957 exec_yank in3 print_integer in4 boolean_invert_first_then_and exec_dup_items boolean_frominteger integer_lte integer_yankdup exec_pop (in1 exec_swap (integer_swap exec_shove (exec_if (exec_noop in4) ())) ()))
Errors: [0 0 0 1 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.812
Median total errors in population: 7
Error averages by case: (0.87 0.871 0.597 0.935 0.601 0.328 0.908 0.907 0.907 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.817
Average program size in population (points): 32.112
Average percent parens in population: 0.187
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1594558
--- Timings ---
Current time: 1559593795745 milliseconds
Total Time:           7.7 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         4.0 seconds, 52.6%
Fitness Testing:      2.7 seconds, 35.1%
Report:               0.8 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 3, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_while (integer_shove exec_eq boolean_or integer_mod boolean_shove) exec_k (boolean_flush exec_dup_times (exec_dup_times (integer_dup_times boolean_invert_second_then_and integer_dup_times) boolean_and in1) in2 exec_rot (in2) (print_integer in2 in4 integer_fromboolean integer_empty exec_yankdup integer_dup_items exec_dup (boolean_frominteger)) ()) ())
Lexicase best errors: [0 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 3, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_while (integer_shove exec_eq boolean_or integer_mod boolean_shove) exec_k (boolean_flush exec_dup_times (exec_dup_times (integer_dup_times boolean_invert_second_then_and integer_dup_times) boolean_and in1) in2 exec_rot (in2) (print_integer in2 in4 integer_fromboolean integer_empty exec_yankdup integer_dup_items exec_dup (boolean_frominteger)) ()) ())
Zero cases best errors: [0 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (714 184 184 262 450 685 54 54 54 245)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (714 184 184 262 450 685 54 54 54 245)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_311} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction tag_integer_319} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times})
Best program: (exec_eq boolean_dup integer_stackdepth tag_boolean_311 in2 boolean_pop exec_stackdepth integer_swap boolean_not in2 tag_integer_319 print_integer exec_y (integer_dup_items boolean_swap integer_dup integer_mult exec_s_when_autoconstructing (integer_gte boolean_and integer_div exec_do*times ()) () ()))
Errors: [0 1 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.114
Median total errors in population: 7
Error averages by case: (0.286 0.816 0.816 0.738 0.55 0.315 0.946 0.946 0.946 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.979
Average program size in population (points): 36.275
Average percent parens in population: 0.224
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1948596
--- Timings ---
Current time: 1559593797907 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         5.1 seconds, 54.7%
Fitness Testing:      3.0 seconds, 32.5%
Report:               1.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 582
Test mean error for best: 0.58200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output:                    
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4})
Lexicase best program: (integer_eq in4 exec_yank boolean_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and boolean_frominteger integer_lte integer_yankdup exec_pop (in1 exec_swap (integer_swap exec_if (exec_noop exec_stackdepth in4) ()) ()))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4})
Zero cases best program: (integer_eq in4 exec_yank boolean_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and boolean_frominteger integer_lte integer_yankdup exec_pop (in1 exec_swap (integer_swap exec_if (exec_noop exec_stackdepth in4) ()) ()))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 260 15 195 129 16 10 716 259 182)
Population mean number of elite cases: 1.96
Count of perfect (error zero) individuals by case: (182 260 15 195 129 16 10 716 259 182)
Population mean number of perfect (error zero) cases: 1.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4})
Best program: (integer_eq in4 exec_yank boolean_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and boolean_frominteger integer_lte integer_yankdup exec_pop (in1 exec_swap (integer_swap exec_if (exec_noop exec_stackdepth in4) ()) ()))
Errors: [1 0 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 8.036
Median total errors in population: 9
Error averages by case: (0.818 0.74 0.985 0.805 0.871 0.984 0.99 0.284 0.741 0.818)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.143
Average program size in population (points): 32.51
Average percent parens in population: 0.253
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2273359
--- Timings ---
Current time: 1559593799458 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.1 seconds, 53.7%
Fitness Testing:      3.4 seconds, 29.3%
Report:               1.8 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output:                    
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4})
Lexicase best program: (integer_eq in4 exec_yank boolean_yank integer_sub exec_yank exec_while () in3 print_integer boolean_invert_first_then_and integer_shove integer_lte integer_yankdup exec_pop (in1 exec_swap (integer_swap exec_if (exec_noop exec_stackdepth in4) ()) ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4})
Zero cases best program: (integer_eq in4 exec_yank boolean_yank integer_sub exec_yank exec_while () in3 print_integer boolean_invert_first_then_and integer_shove integer_lte integer_yankdup exec_pop (in1 exec_swap (integer_swap exec_if (exec_noop exec_stackdepth in4) ()) ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 339 359 224 192 356 533 13 414 195)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (359 339 359 224 192 356 533 13 414 195)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 1, :instruction exec_yank} {:close 1, :instruction tagged_980} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4})
Best program: (integer_eq in4 exec_yank tagged_980 boolean_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and boolean_frominteger integer_lte exec_pop (exec_swap (integer_swap exec_if (exec_noop exec_stackdepth in4) ()) ()))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.016
Median total errors in population: 7
Error averages by case: (0.641 0.661 0.641 0.776 0.808 0.644 0.467 0.987 0.586 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.699
Average program size in population (points): 31.157
Average percent parens in population: 0.233
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2547223
--- Timings ---
Current time: 1559593800960 milliseconds
Total Time:          12.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.2 seconds, 55.8%
Fitness Testing:      3.6 seconds, 27.9%
Report:               2.0 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 582
Test mean error for best: 0.58200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output:                    
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4})
Lexicase best program: (integer_eq in4 boolean_and exec_yank boolean_yank integer_yankdup integer_sub boolean_eq exec_yank in3 print_integer boolean_invert_first_then_and boolean_frominteger integer_lte boolean_dup integer_yankdup exec_pop (in1 exec_swap (integer_swap boolean_invert_first_then_and exec_if (exec_stackdepth in4) ()) ()))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4})
Zero cases best program: (integer_eq in4 boolean_and exec_yank boolean_yank integer_yankdup integer_sub boolean_eq exec_yank in3 print_integer boolean_invert_first_then_and boolean_frominteger integer_lte boolean_dup integer_yankdup exec_pop (in1 exec_swap (integer_swap boolean_invert_first_then_and exec_if (exec_stackdepth in4) ()) ()))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 505 10 485 716 488 277 51 53 153)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (221 505 10 485 716 488 277 51 53 153)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4})
Best program: (in4 integer_rot exec_yank boolean_yank boolean_eq integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and boolean_frominteger integer_lte integer_min integer_yankdup exec_pop (in1 exec_swap (integer_swap exec_if (exec_noop exec_stackdepth in4) ()) ()))
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 23
Size: 29
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 7.041
Median total errors in population: 6
Error averages by case: (0.779 0.495 0.99 0.515 0.284 0.512 0.723 0.949 0.947 0.847)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.541
Average program size in population (points): 30.658
Average percent parens in population: 0.228
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.99
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.99
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2803808
--- Timings ---
Current time: 1559593802447 milliseconds
Total Time:          14.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.3 seconds, 57.3%
Fitness Testing:      3.9 seconds, 26.7%
Report:               2.2 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_k_when_autoconstructing (integer_eq in4) (exec_stackdepth exec_yank) integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_lt integer_flush boolean_frominteger integer_yankdup exec_pop (exec_swap (integer_swap in3 exec_if (boolean_eq) (exec_stackdepth)) ()))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_k_when_autoconstructing (integer_eq in4) (exec_stackdepth exec_yank) integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_lt integer_flush boolean_frominteger integer_yankdup exec_pop (exec_swap (integer_swap in3 exec_if (boolean_eq) (exec_stackdepth)) ()))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (467 421 2 58 734 310 763 61 58 672)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (467 421 2 58 734 310 763 61 58 672)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Best program: (exec_k_when_autoconstructing (integer_eq in4) (exec_stackdepth exec_yank) integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_flush boolean_frominteger integer_yankdup exec_pop (integer_swap in3 exec_if (boolean_eq) (exec_noop exec_stackdepth)))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.454
Median total errors in population: 6
Error averages by case: (0.533 0.579 0.998 0.942 0.266 0.69 0.237 0.939 0.942 0.328)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.216
Average program size in population (points): 30.754
Average percent parens in population: 0.243
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3021752
--- Timings ---
Current time: 1559593803891 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.3 seconds, 58.6%
Fitness Testing:      4.1 seconds, 25.7%
Report:               2.4 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 53                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: 54                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: 82                 
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 77                 
Correct output: -89                 | Program output: 16                 
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 82                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 80                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 91                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_k_when_autoconstructing (integer_eq in1) (in4) exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_flush boolean_frominteger exec_eq integer_yankdup exec_eq exec_pop (exec_swap (integer_swap boolean_swap in3 exec_if (boolean_eq) (boolean_eq) exec_noop exec_stackdepth) ()))
Lexicase best errors: [0 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_k_when_autoconstructing (integer_eq in1) (in4) exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_flush boolean_frominteger exec_eq integer_yankdup exec_eq exec_pop (exec_swap (integer_swap boolean_swap in3 exec_if (boolean_eq) (boolean_eq) exec_noop exec_stackdepth) ()))
Zero cases best errors: [0 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (581 151 293 159 2 785 557 150 539 42)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (581 151 293 159 2 785 557 150 539 42)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Best program: (exec_k_when_autoconstructing (integer_eq in1) (in4) exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_flush boolean_frominteger exec_eq integer_yankdup exec_eq exec_pop (exec_swap (integer_swap boolean_swap in3 exec_if (boolean_eq) (boolean_eq) exec_noop exec_stackdepth) ()))
Errors: [0 1 0 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.741
Median total errors in population: 6
Error averages by case: (0.419 0.849 0.707 0.841 0.998 0.215 0.443 0.85 0.461 0.958)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.196
Average program size in population (points): 30.019
Average percent parens in population: 0.258
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3243437
--- Timings ---
Current time: 1559593805367 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.3 seconds, 59.7%
Fitness Testing:      4.3 seconds, 24.8%
Report:               2.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_k_when_autoconstructing (integer_eq in4) (exec_stackdepth exec_yank) integer_yankdup exec_yank exec_yankdup in2 print_integer exec_yankdup boolean_invert_first_then_and integer_flush exec_pop (integer_swap in3 exec_noop exec_stackdepth))
Lexicase best errors: [1 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_k_when_autoconstructing (integer_eq in4) (exec_stackdepth exec_yank) integer_yankdup exec_yank exec_yankdup in2 print_integer exec_yankdup boolean_invert_first_then_and integer_flush exec_pop (integer_swap in3 exec_noop exec_stackdepth))
Zero cases best errors: [1 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 271 274 307 72 662 270 63 61 72)
Population mean number of elite cases: 2.42
Count of perfect (error zero) individuals by case: (372 271 274 307 72 662 270 63 61 72)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Best program: (exec_k_when_autoconstructing (integer_eq in4) (exec_stackdepth exec_yank) integer_sub exec_yank in2 print_integer integer_flush boolean_frominteger exec_pop (exec_swap (integer_swap in3 exec_if (boolean_eq) (exec_noop exec_stackdepth)) ()))
Errors: [1 0 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.576
Median total errors in population: 8
Error averages by case: (0.628 0.729 0.726 0.693 0.928 0.338 0.73 0.937 0.939 0.928)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.181
Average program size in population (points): 30.851
Average percent parens in population: 0.247
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3482605
--- Timings ---
Current time: 1559593806817 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.4 seconds, 60.5%
Fitness Testing:      4.5 seconds, 24.1%
Report:               2.8 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 221
Test mean error for best: 0.22100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_k_when_autoconstructing (integer_eq in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_flush boolean_frominteger integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min integer_swap boolean_swap in3 boolean_dup_times boolean_eq) (boolean_eq) exec_noop exec_stackdepth))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_k_when_autoconstructing (integer_eq in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_flush boolean_frominteger integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min integer_swap boolean_swap in3 boolean_dup_times boolean_eq) (boolean_eq) exec_noop exec_stackdepth))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 51 44 155 162 433 160 285 785 147)
Population mean number of elite cases: 2.52
Count of perfect (error zero) individuals by case: (296 51 44 155 162 433 160 285 785 147)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Best program: (exec_k_when_autoconstructing (integer_eq in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup boolean_invert_second_then_and integer_sub exec_yank in3 print_integer integer_flush boolean_frominteger integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min integer_swap boolean_swap in3 exec_if (boolean_dup_times boolean_eq) (boolean_eq) exec_noop exec_stackdepth) ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 7.482
Median total errors in population: 8
Error averages by case: (0.704 0.949 0.956 0.845 0.838 0.567 0.84 0.715 0.215 0.853)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.795
Average program size in population (points): 30.829
Average percent parens in population: 0.226
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.01
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3714627
--- Timings ---
Current time: 1559593808298 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.4 seconds, 61.2%
Fitness Testing:      4.8 seconds, 23.5%
Report:               3.0 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 228
Test mean error for best: 0.22800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_k_when_autoconstructing (integer_eq in1) (integer_empty) in4 exec_stackdepth exec_yank boolean_dup boolean_dup_times integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_flush boolean_frominteger integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap in3 exec_if (boolean_dup_times boolean_eq) (boolean_eq) exec_noop exec_stackdepth) ()))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_k_when_autoconstructing (integer_eq in1) (integer_empty) in4 exec_stackdepth exec_yank boolean_dup boolean_dup_times integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and integer_flush boolean_frominteger integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap in3 exec_if (boolean_dup_times boolean_eq) (boolean_eq) exec_noop exec_stackdepth) ()))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (519 132 112 517 153 107 132 332 524 108)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (519 132 112 517 153 107 132 332 524 108)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth})
Best program: (exec_k_when_autoconstructing (integer_eq in1) (integer_dup_times) integer_gte in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer boolean_invert_first_then_and boolean_yankdup integer_flush boolean_frominteger integer_yankdup integer_yankdup exec_eq exec_pop (integer_empty exec_swap (integer_min integer_swap boolean_swap in3 exec_if (boolean_dup_times boolean_eq) (boolean_eq) exec_noop exec_stackdepth) ()))
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 7.364
Median total errors in population: 7
Error averages by case: (0.481 0.868 0.888 0.483 0.847 0.893 0.868 0.668 0.476 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.722
Average program size in population (points): 35.353
Average percent parens in population: 0.214
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.009
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3983120
--- Timings ---
Current time: 1559593809838 milliseconds
Total Time:          21.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.4 seconds, 61.6%
Fitness Testing:      5.0 seconds, 23.1%
Report:               3.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 226
Test mean error for best: 0.22600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (boolean_swap integer_eq in1 integer_dup_times in4 exec_stackdepth exec_yank integer_yankdup integer_sub boolean_flush exec_while () exec_yank in3 print_integer boolean_dup integer_yankdup integer_yankdup exec_pop (exec_swap (integer_min integer_swap print_boolean boolean_swap in3 exec_if (boolean_dup_times boolean_eq) (boolean_eq) exec_noop exec_stackdepth boolean_dup_times) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 38
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (boolean_swap integer_eq in1 integer_dup_times in4 exec_stackdepth exec_yank integer_yankdup integer_sub boolean_flush exec_while () exec_yank in3 print_integer boolean_dup integer_yankdup integer_yankdup exec_pop (exec_swap (integer_min integer_swap print_boolean boolean_swap in3 exec_if (boolean_dup_times boolean_eq) (boolean_eq) exec_noop exec_stackdepth boolean_dup_times) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (553 80 90 132 513 536 123 119 118 126)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (553 80 90 132 513 536 123 119 118 126)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_68} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth})
Best program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 7.61
Median total errors in population: 7
Error averages by case: (0.447 0.92 0.91 0.868 0.487 0.464 0.877 0.881 0.882 0.874)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.822
Average program size in population (points): 39.186
Average percent parens in population: 0.188
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.011
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4300831
--- Timings ---
Current time: 1559593811440 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.4 seconds, 61.9%
Fitness Testing:      5.3 seconds, 22.8%
Report:               3.5 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 13
Successful program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 38


Auto-simplifying with starting size: 38
step: 0
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 500
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1000
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1500
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2000
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2500
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3000
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3500
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4000
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4500
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 5000
program: (exec_k_when_autoconstructing (integer_eq integer_lte in1) (integer_dup_times) in4 exec_stackdepth exec_yank integer_yankdup integer_sub exec_yank in3 print_integer tagged_68 boolean_frominteger in2 integer_yankdup integer_yankdup exec_eq exec_pop (exec_swap (integer_min boolean_swap integer_shove in3 exec_if (integer_dec boolean_dup_times boolean_eq) (exec_stackdepth)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 226
Test mean error for best: 0.22600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
