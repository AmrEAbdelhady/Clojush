Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[14 47 47 47] 14] [[75 -77 -77 -77] -77] [[-74 53 53 53] -74] [[25 25 -29 25] -29] [[94 94 57 94] 57] [[-64 35 35 35] -64] [[58 58 58 -42] -42] [[-44 24 24 24] -44] [[-69 -69 56 -69] -69] [[75 75 -79 75] -79] [(14 14 14 14) 14] [(9 9 9 9) 9] [(78 78 78 78) 78] [(13 13 13 13) 13] [(-77 -77 -77 -77) -77] [(95 61 16 74) 16] [(27 37 11 26) 11] [(24 59 70 19) 19] [(18 86 29 26) 18] [(63 59 87 92) 59] [(57 62 52 1) 1] [(9 62 23 29) 9] [(43 35 84 68) 35] [(72 59 35 17) 17] [(15 75 4 89) 4] [(21 82 49 64) 21] [(95 5 23 78) 5] [(14 72 16 79) 14] [(92 89 16 9) 9] [(36 67 86 27) 27] [(74 64 63 87) 63] [(93 25 50 34) 25] [(38 36 15 34) 15] [(62 6 11 1) 1] [(29 13 80 74) 13] [(-52 57 -79 -21) -79] [(-82 89 -66 22) -82] [(-97 -11 79 84) -97] [(-16 39 -48 48) -48] [(60 70 76 -38) -38] [(11 33 53 -20) -20] [(-28 -80 68 18) -80] [(-69 -48 3 -85) -85] [(71 70 -70 -40) -70] [(60 -58 11 -95) -95] [(65 -18 -32 -2) -32] [(-5 -25 -81 -81) -81] [(25 2 -15 67) -15] [(32 -60 -29 89) -60] [(28 52 -16 -90) -90] [(-64 -69 -32 1) -69] [(25 -81 -48 -86) -86] [(26 86 -58 -16) -58] [(-19 31 -77 11) -77] [(-20 -73 -90 -96) -96] [(25 34 97 70) 25] [(-4 39 -70 82) -70] [(-32 70 77 7) -32] [(71 -32 -89 67) -89] [(-58 85 87 -71) -71] [(2 87 -8 -33) -33] [(61 36 36 52) 36] [(8 53 74 -47) -47] [(100 -57 59 -76) -76] [(6 64 79 55) 6] [(100 -14 -92 86) -92] [(96 74 -99 14) -99] [(79 53 -31 -83) -83] [(52 17 12 -66) -66] [(16 83 88 -7) -7] [(-99 23 32 -87) -99] [(94 34 36 7) 7] [(-31 91 52 37) -31] [(-84 31 -56 -70) -84] [(69 46 44 28) 28] [(78 46 100 75) 46] [(80 -31 -88 78) -88] [(23 -45 -54 12) -54] [(60 37 94 5) 5] [(10 -81 18 87) -81] [(13 46 84 56) 13] [(18 -23 56 -6) -23] [(7 -65 -74 -3) -74] [(-78 -13 97 81) -78] [(20 92 66 -90) -90] [(7 10 86 -28) -28] [(13 -19 54 -73) -73] [(-90 -9 -51 -20) -90] [(-49 52 -92 16) -92] [(81 94 -58 87) -58] [(-48 -70 -72 93) -72] [(-11 65 -96 59) -96] [(-69 -37 56 56) -69] [(-48 83 16 5) -48] [(100 -92 -43 -20) -92])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[14 47 47 47] 14]
Train Case:   6 | Input/Output: [[75 -77 -77 -77] -77]
Train Case:   7 | Input/Output: [[-74 53 53 53] -74]
Train Case:   8 | Input/Output: [[25 25 -29 25] -29]
Train Case:   9 | Input/Output: [[94 94 57 94] 57]
Train Case:  10 | Input/Output: [[-64 35 35 35] -64]
Train Case:  11 | Input/Output: [[58 58 58 -42] -42]
Train Case:  12 | Input/Output: [[-44 24 24 24] -44]
Train Case:  13 | Input/Output: [[-69 -69 56 -69] -69]
Train Case:  14 | Input/Output: [[75 75 -79 75] -79]
Train Case:  15 | Input/Output: [(14 14 14 14) 14]
Train Case:  16 | Input/Output: [(9 9 9 9) 9]
Train Case:  17 | Input/Output: [(78 78 78 78) 78]
Train Case:  18 | Input/Output: [(13 13 13 13) 13]
Train Case:  19 | Input/Output: [(-77 -77 -77 -77) -77]
Train Case:  20 | Input/Output: [(95 61 16 74) 16]
Train Case:  21 | Input/Output: [(27 37 11 26) 11]
Train Case:  22 | Input/Output: [(24 59 70 19) 19]
Train Case:  23 | Input/Output: [(18 86 29 26) 18]
Train Case:  24 | Input/Output: [(63 59 87 92) 59]
Train Case:  25 | Input/Output: [(57 62 52 1) 1]
Train Case:  26 | Input/Output: [(9 62 23 29) 9]
Train Case:  27 | Input/Output: [(43 35 84 68) 35]
Train Case:  28 | Input/Output: [(72 59 35 17) 17]
Train Case:  29 | Input/Output: [(15 75 4 89) 4]
Train Case:  30 | Input/Output: [(21 82 49 64) 21]
Train Case:  31 | Input/Output: [(95 5 23 78) 5]
Train Case:  32 | Input/Output: [(14 72 16 79) 14]
Train Case:  33 | Input/Output: [(92 89 16 9) 9]
Train Case:  34 | Input/Output: [(36 67 86 27) 27]
Train Case:  35 | Input/Output: [(74 64 63 87) 63]
Train Case:  36 | Input/Output: [(93 25 50 34) 25]
Train Case:  37 | Input/Output: [(38 36 15 34) 15]
Train Case:  38 | Input/Output: [(62 6 11 1) 1]
Train Case:  39 | Input/Output: [(29 13 80 74) 13]
Train Case:  40 | Input/Output: [(-52 57 -79 -21) -79]
Train Case:  41 | Input/Output: [(-82 89 -66 22) -82]
Train Case:  42 | Input/Output: [(-97 -11 79 84) -97]
Train Case:  43 | Input/Output: [(-16 39 -48 48) -48]
Train Case:  44 | Input/Output: [(60 70 76 -38) -38]
Train Case:  45 | Input/Output: [(11 33 53 -20) -20]
Train Case:  46 | Input/Output: [(-28 -80 68 18) -80]
Train Case:  47 | Input/Output: [(-69 -48 3 -85) -85]
Train Case:  48 | Input/Output: [(71 70 -70 -40) -70]
Train Case:  49 | Input/Output: [(60 -58 11 -95) -95]
Train Case:  50 | Input/Output: [(65 -18 -32 -2) -32]
Train Case:  51 | Input/Output: [(-5 -25 -81 -81) -81]
Train Case:  52 | Input/Output: [(25 2 -15 67) -15]
Train Case:  53 | Input/Output: [(32 -60 -29 89) -60]
Train Case:  54 | Input/Output: [(28 52 -16 -90) -90]
Train Case:  55 | Input/Output: [(-64 -69 -32 1) -69]
Train Case:  56 | Input/Output: [(25 -81 -48 -86) -86]
Train Case:  57 | Input/Output: [(26 86 -58 -16) -58]
Train Case:  58 | Input/Output: [(-19 31 -77 11) -77]
Train Case:  59 | Input/Output: [(-20 -73 -90 -96) -96]
Train Case:  60 | Input/Output: [(25 34 97 70) 25]
Train Case:  61 | Input/Output: [(-4 39 -70 82) -70]
Train Case:  62 | Input/Output: [(-32 70 77 7) -32]
Train Case:  63 | Input/Output: [(71 -32 -89 67) -89]
Train Case:  64 | Input/Output: [(-58 85 87 -71) -71]
Train Case:  65 | Input/Output: [(2 87 -8 -33) -33]
Train Case:  66 | Input/Output: [(61 36 36 52) 36]
Train Case:  67 | Input/Output: [(8 53 74 -47) -47]
Train Case:  68 | Input/Output: [(100 -57 59 -76) -76]
Train Case:  69 | Input/Output: [(6 64 79 55) 6]
Train Case:  70 | Input/Output: [(100 -14 -92 86) -92]
Train Case:  71 | Input/Output: [(96 74 -99 14) -99]
Train Case:  72 | Input/Output: [(79 53 -31 -83) -83]
Train Case:  73 | Input/Output: [(52 17 12 -66) -66]
Train Case:  74 | Input/Output: [(16 83 88 -7) -7]
Train Case:  75 | Input/Output: [(-99 23 32 -87) -99]
Train Case:  76 | Input/Output: [(94 34 36 7) 7]
Train Case:  77 | Input/Output: [(-31 91 52 37) -31]
Train Case:  78 | Input/Output: [(-84 31 -56 -70) -84]
Train Case:  79 | Input/Output: [(69 46 44 28) 28]
Train Case:  80 | Input/Output: [(78 46 100 75) 46]
Train Case:  81 | Input/Output: [(80 -31 -88 78) -88]
Train Case:  82 | Input/Output: [(23 -45 -54 12) -54]
Train Case:  83 | Input/Output: [(60 37 94 5) 5]
Train Case:  84 | Input/Output: [(10 -81 18 87) -81]
Train Case:  85 | Input/Output: [(13 46 84 56) 13]
Train Case:  86 | Input/Output: [(18 -23 56 -6) -23]
Train Case:  87 | Input/Output: [(7 -65 -74 -3) -74]
Train Case:  88 | Input/Output: [(-78 -13 97 81) -78]
Train Case:  89 | Input/Output: [(20 92 66 -90) -90]
Train Case:  90 | Input/Output: [(7 10 86 -28) -28]
Train Case:  91 | Input/Output: [(13 -19 54 -73) -73]
Train Case:  92 | Input/Output: [(-90 -9 -51 -20) -90]
Train Case:  93 | Input/Output: [(-49 52 -92 16) -92]
Train Case:  94 | Input/Output: [(81 94 -58 87) -58]
Train Case:  95 | Input/Output: [(-48 -70 -72 93) -72]
Train Case:  96 | Input/Output: [(-11 65 -96 59) -96]
Train Case:  97 | Input/Output: [(-69 -37 56 56) -69]
Train Case:  98 | Input/Output: [(-48 83 16 5) -48]
Train Case:  99 | Input/Output: [(100 -92 -43 -20) -92]
Test Case:   0 | Input/Output: [[-85 -79 -79 -79] -85]
Test Case:   1 | Input/Output: [[-65 -65 -65 12] -65]
Test Case:   2 | Input/Output: [[58 58 58 28] 28]
Test Case:   3 | Input/Output: [[-89 -47 -47 -47] -89]
Test Case:   4 | Input/Output: [[-85 -85 -96 -85] -96]
Test Case:   5 | Input/Output: [[-36 -36 -36 -86] -86]
Test Case:   6 | Input/Output: [[-96 -96 -20 -96] -96]
Test Case:   7 | Input/Output: [[72 72 -4 72] -4]
Test Case:   8 | Input/Output: [[34 0 34 34] 0]
Test Case:   9 | Input/Output: [[-7 -7 -7 68] -7]
Test Case:  10 | Input/Output: [[13 13 13 39] 13]
Test Case:  11 | Input/Output: [[-68 -68 -68 49] -68]
Test Case:  12 | Input/Output: [[49 25 49 49] 25]
Test Case:  13 | Input/Output: [[40 40 94 40] 40]
Test Case:  14 | Input/Output: [[45 45 45 68] 45]
Test Case:  15 | Input/Output: [[-35 91 91 91] -35]
Test Case:  16 | Input/Output: [[97 97 97 62] 62]
Test Case:  17 | Input/Output: [[-18 -18 -36 -18] -36]
Test Case:  18 | Input/Output: [[-30 -30 -30 -8] -30]
Test Case:  19 | Input/Output: [[-5 -5 -5 -85] -85]
Test Case:  20 | Input/Output: [[-56 -56 -56 -40] -56]
Test Case:  21 | Input/Output: [[22 3 22 22] 3]
Test Case:  22 | Input/Output: [[37 38 37 37] 37]
Test Case:  23 | Input/Output: [[-90 -13 -90 -90] -90]
Test Case:  24 | Input/Output: [[-8 -8 -81 -8] -81]
Test Case:  25 | Input/Output: [[-80 -80 -80 44] -80]
Test Case:  26 | Input/Output: [[68 68 78 68] 68]
Test Case:  27 | Input/Output: [[-49 -49 -49 93] -49]
Test Case:  28 | Input/Output: [[-36 54 54 54] -36]
Test Case:  29 | Input/Output: [[-5 -5 -5 8] -5]
Test Case:  30 | Input/Output: [[-10 -52 -10 -10] -52]
Test Case:  31 | Input/Output: [[-48 -48 -48 -64] -64]
Test Case:  32 | Input/Output: [[-2 -2 71 -2] -2]
Test Case:  33 | Input/Output: [[-54 -54 -54 94] -54]
Test Case:  34 | Input/Output: [[-66 -66 -66 83] -66]
Test Case:  35 | Input/Output: [[82 82 82 31] 31]
Test Case:  36 | Input/Output: [[-67 -67 -96 -67] -96]
Test Case:  37 | Input/Output: [[-33 -90 -90 -90] -90]
Test Case:  38 | Input/Output: [[-42 -6 -6 -6] -42]
Test Case:  39 | Input/Output: [[-6 53 53 53] -6]
Test Case:  40 | Input/Output: [[60 60 60 -86] -86]
Test Case:  41 | Input/Output: [[52 14 14 14] 14]
Test Case:  42 | Input/Output: [[17 17 -47 17] -47]
Test Case:  43 | Input/Output: [[-58 77 -58 -58] -58]
Test Case:  44 | Input/Output: [[-26 -98 -98 -98] -98]
Test Case:  45 | Input/Output: [[81 81 -41 81] -41]
Test Case:  46 | Input/Output: [[-92 95 95 95] -92]
Test Case:  47 | Input/Output: [[58 58 58 87] 58]
Test Case:  48 | Input/Output: [[39 -97 39 39] -97]
Test Case:  49 | Input/Output: [[-61 -61 -61 -81] -81]
Test Case:  50 | Input/Output: [[94 94 94 -73] -73]
Test Case:  51 | Input/Output: [[74 72 74 74] 72]
Test Case:  52 | Input/Output: [[0 0 0 45] 0]
Test Case:  53 | Input/Output: [[-71 54 54 54] -71]
Test Case:  54 | Input/Output: [[52 52 26 52] 26]
Test Case:  55 | Input/Output: [[-42 -21 -42 -42] -42]
Test Case:  56 | Input/Output: [[44 49 49 49] 44]
Test Case:  57 | Input/Output: [[-22 -22 -22 65] -22]
Test Case:  58 | Input/Output: [[-23 -23 -31 -23] -31]
Test Case:  59 | Input/Output: [[-32 -32 -32 48] -32]
Test Case:  60 | Input/Output: [[99 -17 -17 -17] -17]
Test Case:  61 | Input/Output: [[-8 -8 90 -8] -8]
Test Case:  62 | Input/Output: [[-93 -93 -93 26] -93]
Test Case:  63 | Input/Output: [[47 27 47 47] 27]
Test Case:  64 | Input/Output: [[-49 -49 10 -49] -49]
Test Case:  65 | Input/Output: [[89 39 39 39] 39]
Test Case:  66 | Input/Output: [[-94 -94 73 -94] -94]
Test Case:  67 | Input/Output: [[61 61 61 94] 61]
Test Case:  68 | Input/Output: [[18 18 18 -3] -3]
Test Case:  69 | Input/Output: [[-27 -41 -27 -27] -41]
Test Case:  70 | Input/Output: [[14 90 14 14] 14]
Test Case:  71 | Input/Output: [[57 7 57 57] 7]
Test Case:  72 | Input/Output: [[24 -82 -82 -82] -82]
Test Case:  73 | Input/Output: [[-30 -30 -57 -30] -57]
Test Case:  74 | Input/Output: [[-15 -27 -27 -27] -27]
Test Case:  75 | Input/Output: [[-79 -39 -39 -39] -79]
Test Case:  76 | Input/Output: [[49 49 49 -86] -86]
Test Case:  77 | Input/Output: [[60 60 60 92] 60]
Test Case:  78 | Input/Output: [[11 44 44 44] 11]
Test Case:  79 | Input/Output: [[-38 -85 -38 -38] -85]
Test Case:  80 | Input/Output: [[23 23 23 23] 23]
Test Case:  81 | Input/Output: [[-68 7 7 7] -68]
Test Case:  82 | Input/Output: [[70 70 70 -67] -67]
Test Case:  83 | Input/Output: [[26 38 26 26] 26]
Test Case:  84 | Input/Output: [[72 -62 72 72] -62]
Test Case:  85 | Input/Output: [[65 65 65 -66] -66]
Test Case:  86 | Input/Output: [[-31 -31 -31 98] -31]
Test Case:  87 | Input/Output: [[83 69 69 69] 69]
Test Case:  88 | Input/Output: [[-72 -72 68 -72] -72]
Test Case:  89 | Input/Output: [[-20 59 -20 -20] -20]
Test Case:  90 | Input/Output: [[15 15 -26 15] -26]
Test Case:  91 | Input/Output: [[70 70 18 70] 18]
Test Case:  92 | Input/Output: [[21 21 21 87] 21]
Test Case:  93 | Input/Output: [[13 99 13 13] 13]
Test Case:  94 | Input/Output: [[-54 12 -54 -54] -54]
Test Case:  95 | Input/Output: [[-15 0 -15 -15] -15]
Test Case:  96 | Input/Output: [[-60 -60 -60 -97] -97]
Test Case:  97 | Input/Output: [[72 70 72 72] 70]
Test Case:  98 | Input/Output: [[-51 -76 -76 -76] -76]
Test Case:  99 | Input/Output: [[-95 -63 -63 -63] -95]
Test Case: 100 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 101 | Input/Output: [(100 100 100 100) 100]
Test Case: 102 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 103 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 104 | Input/Output: [(35 35 35 35) 35]
Test Case: 105 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 106 | Input/Output: [(20 20 20 20) 20]
Test Case: 107 | Input/Output: [(67 67 67 67) 67]
Test Case: 108 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 109 | Input/Output: [(11 11 11 11) 11]
Test Case: 110 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 111 | Input/Output: [(90 90 90 90) 90]
Test Case: 112 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 113 | Input/Output: [(72 72 72 72) 72]
Test Case: 114 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 115 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 116 | Input/Output: [(87 87 87 87) 87]
Test Case: 117 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 118 | Input/Output: [(96 96 96 96) 96]
Test Case: 119 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 120 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 121 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 122 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 123 | Input/Output: [(81 81 81 81) 81]
Test Case: 124 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 125 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 126 | Input/Output: [(57 57 57 57) 57]
Test Case: 127 | Input/Output: [(95 95 95 95) 95]
Test Case: 128 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 129 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 130 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 131 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 132 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 133 | Input/Output: [(87 87 87 87) 87]
Test Case: 134 | Input/Output: [(15 15 15 15) 15]
Test Case: 135 | Input/Output: [(35 35 35 35) 35]
Test Case: 136 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 137 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 138 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 139 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 140 | Input/Output: [(92 92 92 92) 92]
Test Case: 141 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 142 | Input/Output: [(35 35 35 35) 35]
Test Case: 143 | Input/Output: [(8 8 8 8) 8]
Test Case: 144 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 145 | Input/Output: [(1 1 1 1) 1]
Test Case: 146 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 147 | Input/Output: [(51 51 51 51) 51]
Test Case: 148 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 149 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 150 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 151 | Input/Output: [(90 90 90 90) 90]
Test Case: 152 | Input/Output: [(74 74 74 74) 74]
Test Case: 153 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 154 | Input/Output: [(3 3 3 3) 3]
Test Case: 155 | Input/Output: [(60 60 60 60) 60]
Test Case: 156 | Input/Output: [(82 82 82 82) 82]
Test Case: 157 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 158 | Input/Output: [(31 31 31 31) 31]
Test Case: 159 | Input/Output: [(7 7 7 7) 7]
Test Case: 160 | Input/Output: [(57 57 57 57) 57]
Test Case: 161 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 162 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 163 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 164 | Input/Output: [(80 80 80 80) 80]
Test Case: 165 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 166 | Input/Output: [(43 43 43 43) 43]
Test Case: 167 | Input/Output: [(12 12 12 12) 12]
Test Case: 168 | Input/Output: [(25 25 25 25) 25]
Test Case: 169 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 170 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 171 | Input/Output: [(61 61 61 61) 61]
Test Case: 172 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 173 | Input/Output: [(83 83 83 83) 83]
Test Case: 174 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 175 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 176 | Input/Output: [(55 55 55 55) 55]
Test Case: 177 | Input/Output: [(45 45 45 45) 45]
Test Case: 178 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 179 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 180 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 181 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 182 | Input/Output: [(69 69 69 69) 69]
Test Case: 183 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 184 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 185 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 186 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 187 | Input/Output: [(85 85 85 85) 85]
Test Case: 188 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 189 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 190 | Input/Output: [(81 81 81 81) 81]
Test Case: 191 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 192 | Input/Output: [(99 99 99 99) 99]
Test Case: 193 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 194 | Input/Output: [(34 34 34 34) 34]
Test Case: 195 | Input/Output: [(22 22 22 22) 22]
Test Case: 196 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 197 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 198 | Input/Output: [(8 8 8 8) 8]
Test Case: 199 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 200 | Input/Output: [(53 20 80 75) 20]
Test Case: 201 | Input/Output: [(35 6 99 79) 6]
Test Case: 202 | Input/Output: [(13 50 9 15) 9]
Test Case: 203 | Input/Output: [(88 92 41 99) 41]
Test Case: 204 | Input/Output: [(34 6 81 5) 5]
Test Case: 205 | Input/Output: [(86 90 41 89) 41]
Test Case: 206 | Input/Output: [(47 10 13 98) 10]
Test Case: 207 | Input/Output: [(94 43 37 6) 6]
Test Case: 208 | Input/Output: [(2 68 66 58) 2]
Test Case: 209 | Input/Output: [(80 25 80 43) 25]
Test Case: 210 | Input/Output: [(84 29 48 64) 29]
Test Case: 211 | Input/Output: [(3 55 77 91) 3]
Test Case: 212 | Input/Output: [(68 95 64 12) 12]
Test Case: 213 | Input/Output: [(91 81 42 50) 42]
Test Case: 214 | Input/Output: [(48 34 37 47) 34]
Test Case: 215 | Input/Output: [(2 4 39 12) 2]
Test Case: 216 | Input/Output: [(21 7 93 48) 7]
Test Case: 217 | Input/Output: [(91 97 51 69) 51]
Test Case: 218 | Input/Output: [(74 39 72 12) 12]
Test Case: 219 | Input/Output: [(45 36 100 66) 36]
Test Case: 220 | Input/Output: [(58 39 25 99) 25]
Test Case: 221 | Input/Output: [(81 18 57 68) 18]
Test Case: 222 | Input/Output: [(23 46 88 43) 23]
Test Case: 223 | Input/Output: [(4 7 50 28) 4]
Test Case: 224 | Input/Output: [(48 25 64 4) 4]
Test Case: 225 | Input/Output: [(30 22 48 81) 22]
Test Case: 226 | Input/Output: [(49 9 51 73) 9]
Test Case: 227 | Input/Output: [(45 93 53 72) 45]
Test Case: 228 | Input/Output: [(82 19 99 85) 19]
Test Case: 229 | Input/Output: [(62 20 57 71) 20]
Test Case: 230 | Input/Output: [(19 41 1 56) 1]
Test Case: 231 | Input/Output: [(82 66 94 83) 66]
Test Case: 232 | Input/Output: [(5 84 67 93) 5]
Test Case: 233 | Input/Output: [(82 0 40 70) 0]
Test Case: 234 | Input/Output: [(26 5 83 93) 5]
Test Case: 235 | Input/Output: [(71 92 84 14) 14]
Test Case: 236 | Input/Output: [(93 61 47 88) 47]
Test Case: 237 | Input/Output: [(55 16 76 81) 16]
Test Case: 238 | Input/Output: [(43 16 0 30) 0]
Test Case: 239 | Input/Output: [(61 99 10 6) 6]
Test Case: 240 | Input/Output: [(91 21 55 96) 21]
Test Case: 241 | Input/Output: [(0 58 19 99) 0]
Test Case: 242 | Input/Output: [(62 68 84 99) 62]
Test Case: 243 | Input/Output: [(79 100 10 0) 0]
Test Case: 244 | Input/Output: [(91 18 28 5) 5]
Test Case: 245 | Input/Output: [(1 26 19 24) 1]
Test Case: 246 | Input/Output: [(50 37 82 89) 37]
Test Case: 247 | Input/Output: [(14 3 42 76) 3]
Test Case: 248 | Input/Output: [(25 61 44 92) 25]
Test Case: 249 | Input/Output: [(31 4 17 3) 3]
Test Case: 250 | Input/Output: [(32 80 58 51) 32]
Test Case: 251 | Input/Output: [(61 38 29 25) 25]
Test Case: 252 | Input/Output: [(31 100 31 97) 31]
Test Case: 253 | Input/Output: [(61 86 6 10) 6]
Test Case: 254 | Input/Output: [(38 54 77 44) 38]
Test Case: 255 | Input/Output: [(97 14 9 11) 9]
Test Case: 256 | Input/Output: [(90 81 48 44) 44]
Test Case: 257 | Input/Output: [(33 1 73 68) 1]
Test Case: 258 | Input/Output: [(73 16 97 41) 16]
Test Case: 259 | Input/Output: [(33 58 65 86) 33]
Test Case: 260 | Input/Output: [(34 80 53 21) 21]
Test Case: 261 | Input/Output: [(91 12 55 89) 12]
Test Case: 262 | Input/Output: [(75 30 75 67) 30]
Test Case: 263 | Input/Output: [(0 93 2 46) 0]
Test Case: 264 | Input/Output: [(7 27 5 58) 5]
Test Case: 265 | Input/Output: [(68 83 66 45) 45]
Test Case: 266 | Input/Output: [(70 85 23 33) 23]
Test Case: 267 | Input/Output: [(0 57 70 0) 0]
Test Case: 268 | Input/Output: [(64 69 64 45) 45]
Test Case: 269 | Input/Output: [(37 43 17 48) 17]
Test Case: 270 | Input/Output: [(76 51 67 14) 14]
Test Case: 271 | Input/Output: [(75 26 30 43) 26]
Test Case: 272 | Input/Output: [(43 100 67 98) 43]
Test Case: 273 | Input/Output: [(2 36 5 57) 2]
Test Case: 274 | Input/Output: [(20 100 48 12) 12]
Test Case: 275 | Input/Output: [(99 2 89 11) 2]
Test Case: 276 | Input/Output: [(22 64 12 82) 12]
Test Case: 277 | Input/Output: [(86 89 12 34) 12]
Test Case: 278 | Input/Output: [(15 98 6 42) 6]
Test Case: 279 | Input/Output: [(12 93 68 55) 12]
Test Case: 280 | Input/Output: [(52 69 82 41) 41]
Test Case: 281 | Input/Output: [(3 5 70 31) 3]
Test Case: 282 | Input/Output: [(44 59 8 9) 8]
Test Case: 283 | Input/Output: [(59 37 65 23) 23]
Test Case: 284 | Input/Output: [(61 65 18 44) 18]
Test Case: 285 | Input/Output: [(98 53 79 85) 53]
Test Case: 286 | Input/Output: [(29 4 3 60) 3]
Test Case: 287 | Input/Output: [(9 60 35 15) 9]
Test Case: 288 | Input/Output: [(25 47 10 34) 10]
Test Case: 289 | Input/Output: [(12 12 66 56) 12]
Test Case: 290 | Input/Output: [(71 2 92 97) 2]
Test Case: 291 | Input/Output: [(27 81 41 63) 27]
Test Case: 292 | Input/Output: [(34 9 25 64) 9]
Test Case: 293 | Input/Output: [(27 81 29 18) 18]
Test Case: 294 | Input/Output: [(86 43 90 10) 10]
Test Case: 295 | Input/Output: [(69 34 46 20) 20]
Test Case: 296 | Input/Output: [(25 44 95 84) 25]
Test Case: 297 | Input/Output: [(81 86 5 80) 5]
Test Case: 298 | Input/Output: [(42 68 55 65) 42]
Test Case: 299 | Input/Output: [(25 17 59 19) 17]
Test Case: 300 | Input/Output: [(87 4 14 50) 4]
Test Case: 301 | Input/Output: [(6 20 25 72) 6]
Test Case: 302 | Input/Output: [(2 29 36 82) 2]
Test Case: 303 | Input/Output: [(94 44 16 47) 16]
Test Case: 304 | Input/Output: [(29 85 69 97) 29]
Test Case: 305 | Input/Output: [(62 31 75 83) 31]
Test Case: 306 | Input/Output: [(27 56 43 92) 27]
Test Case: 307 | Input/Output: [(98 49 29 79) 29]
Test Case: 308 | Input/Output: [(23 55 55 99) 23]
Test Case: 309 | Input/Output: [(18 54 17 75) 17]
Test Case: 310 | Input/Output: [(3 10 27 64) 3]
Test Case: 311 | Input/Output: [(4 65 7 86) 4]
Test Case: 312 | Input/Output: [(94 23 55 44) 23]
Test Case: 313 | Input/Output: [(44 44 5 94) 5]
Test Case: 314 | Input/Output: [(76 12 46 52) 12]
Test Case: 315 | Input/Output: [(32 49 59 48) 32]
Test Case: 316 | Input/Output: [(22 8 46 56) 8]
Test Case: 317 | Input/Output: [(24 64 78 31) 24]
Test Case: 318 | Input/Output: [(8 49 75 58) 8]
Test Case: 319 | Input/Output: [(96 31 45 17) 17]
Test Case: 320 | Input/Output: [(28 3 18 34) 3]
Test Case: 321 | Input/Output: [(22 99 9 28) 9]
Test Case: 322 | Input/Output: [(98 14 92 81) 14]
Test Case: 323 | Input/Output: [(59 75 57 49) 49]
Test Case: 324 | Input/Output: [(9 35 9 28) 9]
Test Case: 325 | Input/Output: [(70 89 27 72) 27]
Test Case: 326 | Input/Output: [(76 30 50 3) 3]
Test Case: 327 | Input/Output: [(24 96 99 49) 24]
Test Case: 328 | Input/Output: [(83 14 52 30) 14]
Test Case: 329 | Input/Output: [(60 1 71 10) 1]
Test Case: 330 | Input/Output: [(6 52 21 51) 6]
Test Case: 331 | Input/Output: [(90 89 89 65) 65]
Test Case: 332 | Input/Output: [(51 49 9 23) 9]
Test Case: 333 | Input/Output: [(68 95 23 38) 23]
Test Case: 334 | Input/Output: [(76 31 96 6) 6]
Test Case: 335 | Input/Output: [(88 31 72 74) 31]
Test Case: 336 | Input/Output: [(92 56 51 22) 22]
Test Case: 337 | Input/Output: [(91 15 10 50) 10]
Test Case: 338 | Input/Output: [(5 9 2 71) 2]
Test Case: 339 | Input/Output: [(52 8 68 16) 8]
Test Case: 340 | Input/Output: [(4 38 68 41) 4]
Test Case: 341 | Input/Output: [(50 26 52 99) 26]
Test Case: 342 | Input/Output: [(67 71 35 78) 35]
Test Case: 343 | Input/Output: [(9 13 93 46) 9]
Test Case: 344 | Input/Output: [(58 97 73 56) 56]
Test Case: 345 | Input/Output: [(63 50 52 46) 46]
Test Case: 346 | Input/Output: [(89 66 13 9) 9]
Test Case: 347 | Input/Output: [(62 0 8 70) 0]
Test Case: 348 | Input/Output: [(78 82 12 47) 12]
Test Case: 349 | Input/Output: [(53 60 77 56) 53]
Test Case: 350 | Input/Output: [(20 79 14 48) 14]
Test Case: 351 | Input/Output: [(20 98 22 3) 3]
Test Case: 352 | Input/Output: [(4 62 53 73) 4]
Test Case: 353 | Input/Output: [(8 22 17 56) 8]
Test Case: 354 | Input/Output: [(38 75 46 10) 10]
Test Case: 355 | Input/Output: [(95 66 49 83) 49]
Test Case: 356 | Input/Output: [(54 21 75 54) 21]
Test Case: 357 | Input/Output: [(54 47 80 17) 17]
Test Case: 358 | Input/Output: [(26 95 90 78) 26]
Test Case: 359 | Input/Output: [(8 85 90 8) 8]
Test Case: 360 | Input/Output: [(46 38 15 87) 15]
Test Case: 361 | Input/Output: [(94 23 94 65) 23]
Test Case: 362 | Input/Output: [(7 57 67 77) 7]
Test Case: 363 | Input/Output: [(9 44 40 2) 2]
Test Case: 364 | Input/Output: [(18 59 38 89) 18]
Test Case: 365 | Input/Output: [(2 0 68 59) 0]
Test Case: 366 | Input/Output: [(66 66 66 70) 66]
Test Case: 367 | Input/Output: [(28 26 70 94) 26]
Test Case: 368 | Input/Output: [(53 88 96 62) 53]
Test Case: 369 | Input/Output: [(72 94 66 6) 6]
Test Case: 370 | Input/Output: [(69 29 67 50) 29]
Test Case: 371 | Input/Output: [(22 7 37 69) 7]
Test Case: 372 | Input/Output: [(75 37 78 79) 37]
Test Case: 373 | Input/Output: [(47 49 46 82) 46]
Test Case: 374 | Input/Output: [(0 89 18 57) 0]
Test Case: 375 | Input/Output: [(49 67 59 97) 49]
Test Case: 376 | Input/Output: [(21 61 55 22) 21]
Test Case: 377 | Input/Output: [(45 39 100 97) 39]
Test Case: 378 | Input/Output: [(55 4 52 38) 4]
Test Case: 379 | Input/Output: [(1 70 54 86) 1]
Test Case: 380 | Input/Output: [(35 82 55 58) 35]
Test Case: 381 | Input/Output: [(5 65 54 81) 5]
Test Case: 382 | Input/Output: [(99 6 81 28) 6]
Test Case: 383 | Input/Output: [(96 67 15 4) 4]
Test Case: 384 | Input/Output: [(44 17 87 84) 17]
Test Case: 385 | Input/Output: [(68 13 8 28) 8]
Test Case: 386 | Input/Output: [(69 85 35 66) 35]
Test Case: 387 | Input/Output: [(20 11 52 52) 11]
Test Case: 388 | Input/Output: [(93 80 45 52) 45]
Test Case: 389 | Input/Output: [(94 7 20 11) 7]
Test Case: 390 | Input/Output: [(40 10 76 100) 10]
Test Case: 391 | Input/Output: [(97 7 99 77) 7]
Test Case: 392 | Input/Output: [(24 87 43 82) 24]
Test Case: 393 | Input/Output: [(47 59 44 87) 44]
Test Case: 394 | Input/Output: [(16 88 55 82) 16]
Test Case: 395 | Input/Output: [(85 52 77 11) 11]
Test Case: 396 | Input/Output: [(61 62 8 99) 8]
Test Case: 397 | Input/Output: [(72 40 82 52) 40]
Test Case: 398 | Input/Output: [(25 64 79 35) 25]
Test Case: 399 | Input/Output: [(72 45 19 57) 19]
Test Case: 400 | Input/Output: [(86 84 44 -61) -61]
Test Case: 401 | Input/Output: [(28 -4 83 -50) -50]
Test Case: 402 | Input/Output: [(56 -45 88 95) -45]
Test Case: 403 | Input/Output: [(15 -36 -8 37) -36]
Test Case: 404 | Input/Output: [(72 -23 9 -10) -23]
Test Case: 405 | Input/Output: [(50 44 -23 60) -23]
Test Case: 406 | Input/Output: [(-29 -82 73 -81) -82]
Test Case: 407 | Input/Output: [(-33 -40 6 -66) -66]
Test Case: 408 | Input/Output: [(-76 26 60 -84) -84]
Test Case: 409 | Input/Output: [(68 -27 -5 -63) -63]
Test Case: 410 | Input/Output: [(-86 -13 74 -33) -86]
Test Case: 411 | Input/Output: [(-80 -14 -62 -12) -80]
Test Case: 412 | Input/Output: [(-2 22 55 4) -2]
Test Case: 413 | Input/Output: [(-22 22 92 -77) -77]
Test Case: 414 | Input/Output: [(-3 91 1 -92) -92]
Test Case: 415 | Input/Output: [(-11 -4 -31 -45) -45]
Test Case: 416 | Input/Output: [(-21 -23 -52 30) -52]
Test Case: 417 | Input/Output: [(64 -40 68 -73) -73]
Test Case: 418 | Input/Output: [(-45 91 56 89) -45]
Test Case: 419 | Input/Output: [(81 -29 74 12) -29]
Test Case: 420 | Input/Output: [(78 -60 -12 -60) -60]
Test Case: 421 | Input/Output: [(-70 -20 48 77) -70]
Test Case: 422 | Input/Output: [(2 82 92 -12) -12]
Test Case: 423 | Input/Output: [(-39 -9 36 -67) -67]
Test Case: 424 | Input/Output: [(-55 33 -99 -6) -99]
Test Case: 425 | Input/Output: [(43 52 -63 39) -63]
Test Case: 426 | Input/Output: [(-50 65 6 -52) -52]
Test Case: 427 | Input/Output: [(96 -62 51 -39) -62]
Test Case: 428 | Input/Output: [(81 -69 -51 -4) -69]
Test Case: 429 | Input/Output: [(27 95 -95 -86) -95]
Test Case: 430 | Input/Output: [(11 58 75 -24) -24]
Test Case: 431 | Input/Output: [(97 80 -8 -14) -14]
Test Case: 432 | Input/Output: [(96 -4 -23 -63) -63]
Test Case: 433 | Input/Output: [(41 -99 44 -35) -99]
Test Case: 434 | Input/Output: [(-33 -78 12 31) -78]
Test Case: 435 | Input/Output: [(-92 -67 10 -100) -100]
Test Case: 436 | Input/Output: [(-83 54 -83 -65) -83]
Test Case: 437 | Input/Output: [(-13 -77 57 -2) -77]
Test Case: 438 | Input/Output: [(5 2 77 94) 2]
Test Case: 439 | Input/Output: [(13 -11 45 -15) -15]
Test Case: 440 | Input/Output: [(-47 -16 -1 -54) -54]
Test Case: 441 | Input/Output: [(-75 -12 -36 -44) -75]
Test Case: 442 | Input/Output: [(-19 73 -33 100) -33]
Test Case: 443 | Input/Output: [(-75 -31 -54 -19) -75]
Test Case: 444 | Input/Output: [(-47 -29 -31 -22) -47]
Test Case: 445 | Input/Output: [(57 -57 76 42) -57]
Test Case: 446 | Input/Output: [(-18 100 -98 63) -98]
Test Case: 447 | Input/Output: [(-10 -27 -87 -78) -87]
Test Case: 448 | Input/Output: [(68 -54 -32 15) -54]
Test Case: 449 | Input/Output: [(22 -21 87 -78) -78]
Test Case: 450 | Input/Output: [(-27 -28 97 -45) -45]
Test Case: 451 | Input/Output: [(89 73 44 -90) -90]
Test Case: 452 | Input/Output: [(-40 -93 -65 82) -93]
Test Case: 453 | Input/Output: [(-37 -19 12 100) -37]
Test Case: 454 | Input/Output: [(28 -88 53 -62) -88]
Test Case: 455 | Input/Output: [(-38 -28 58 89) -38]
Test Case: 456 | Input/Output: [(-21 8 -13 51) -21]
Test Case: 457 | Input/Output: [(1 -37 6 26) -37]
Test Case: 458 | Input/Output: [(30 79 37 -32) -32]
Test Case: 459 | Input/Output: [(-64 76 -53 92) -64]
Test Case: 460 | Input/Output: [(-90 57 84 59) -90]
Test Case: 461 | Input/Output: [(-78 98 55 2) -78]
Test Case: 462 | Input/Output: [(57 -40 -50 -84) -84]
Test Case: 463 | Input/Output: [(2 2 39 -8) -8]
Test Case: 464 | Input/Output: [(-44 -75 41 56) -75]
Test Case: 465 | Input/Output: [(-85 -67 -59 12) -85]
Test Case: 466 | Input/Output: [(-92 80 76 32) -92]
Test Case: 467 | Input/Output: [(23 59 -61 -56) -61]
Test Case: 468 | Input/Output: [(-61 -65 18 -36) -65]
Test Case: 469 | Input/Output: [(-74 36 73 -6) -74]
Test Case: 470 | Input/Output: [(25 -95 -26 1) -95]
Test Case: 471 | Input/Output: [(79 37 -42 45) -42]
Test Case: 472 | Input/Output: [(-30 35 -39 13) -39]
Test Case: 473 | Input/Output: [(58 -40 79 91) -40]
Test Case: 474 | Input/Output: [(84 -5 58 27) -5]
Test Case: 475 | Input/Output: [(42 -42 49 -64) -64]
Test Case: 476 | Input/Output: [(-15 5 79 -67) -67]
Test Case: 477 | Input/Output: [(8 4 12 -90) -90]
Test Case: 478 | Input/Output: [(42 -9 99 -5) -9]
Test Case: 479 | Input/Output: [(-90 19 100 31) -90]
Test Case: 480 | Input/Output: [(83 -96 -73 -42) -96]
Test Case: 481 | Input/Output: [(51 -11 41 46) -11]
Test Case: 482 | Input/Output: [(-33 -95 -93 -75) -95]
Test Case: 483 | Input/Output: [(-20 69 80 91) -20]
Test Case: 484 | Input/Output: [(100 -35 -79 71) -79]
Test Case: 485 | Input/Output: [(-57 96 19 56) -57]
Test Case: 486 | Input/Output: [(51 41 -62 93) -62]
Test Case: 487 | Input/Output: [(-93 71 -61 79) -93]
Test Case: 488 | Input/Output: [(91 93 86 1) 1]
Test Case: 489 | Input/Output: [(34 89 -65 72) -65]
Test Case: 490 | Input/Output: [(-68 57 -32 17) -68]
Test Case: 491 | Input/Output: [(-22 -30 -52 -67) -67]
Test Case: 492 | Input/Output: [(2 78 63 -45) -45]
Test Case: 493 | Input/Output: [(17 3 17 -17) -17]
Test Case: 494 | Input/Output: [(-54 71 98 -4) -54]
Test Case: 495 | Input/Output: [(85 78 -76 -87) -87]
Test Case: 496 | Input/Output: [(-29 -70 60 49) -70]
Test Case: 497 | Input/Output: [(-65 83 42 -56) -65]
Test Case: 498 | Input/Output: [(-47 45 -1 -27) -47]
Test Case: 499 | Input/Output: [(30 -83 -3 -88) -88]
Test Case: 500 | Input/Output: [(84 57 100 -92) -92]
Test Case: 501 | Input/Output: [(-91 -43 46 8) -91]
Test Case: 502 | Input/Output: [(85 21 -37 2) -37]
Test Case: 503 | Input/Output: [(-13 6 81 70) -13]
Test Case: 504 | Input/Output: [(-81 75 76 66) -81]
Test Case: 505 | Input/Output: [(95 13 -24 45) -24]
Test Case: 506 | Input/Output: [(-34 96 96 55) -34]
Test Case: 507 | Input/Output: [(-24 11 84 17) -24]
Test Case: 508 | Input/Output: [(-91 41 48 28) -91]
Test Case: 509 | Input/Output: [(57 23 66 -77) -77]
Test Case: 510 | Input/Output: [(-44 -68 -19 75) -68]
Test Case: 511 | Input/Output: [(1 -35 24 -28) -35]
Test Case: 512 | Input/Output: [(-48 -71 11 -75) -75]
Test Case: 513 | Input/Output: [(25 -28 -4 -30) -30]
Test Case: 514 | Input/Output: [(47 -54 -88 -16) -88]
Test Case: 515 | Input/Output: [(76 31 -49 -11) -49]
Test Case: 516 | Input/Output: [(73 96 -2 27) -2]
Test Case: 517 | Input/Output: [(-59 85 88 -9) -59]
Test Case: 518 | Input/Output: [(-57 45 -20 -52) -57]
Test Case: 519 | Input/Output: [(76 85 36 -61) -61]
Test Case: 520 | Input/Output: [(99 -92 82 -47) -92]
Test Case: 521 | Input/Output: [(29 -68 -92 97) -92]
Test Case: 522 | Input/Output: [(-96 82 -43 -7) -96]
Test Case: 523 | Input/Output: [(71 96 -94 97) -94]
Test Case: 524 | Input/Output: [(-5 24 -3 69) -5]
Test Case: 525 | Input/Output: [(-71 20 46 -87) -87]
Test Case: 526 | Input/Output: [(32 70 -52 82) -52]
Test Case: 527 | Input/Output: [(95 -79 8 94) -79]
Test Case: 528 | Input/Output: [(-81 -96 30 -13) -96]
Test Case: 529 | Input/Output: [(-55 -84 -16 32) -84]
Test Case: 530 | Input/Output: [(10 43 -74 -10) -74]
Test Case: 531 | Input/Output: [(-49 -95 -50 -6) -95]
Test Case: 532 | Input/Output: [(-72 -90 84 22) -90]
Test Case: 533 | Input/Output: [(58 86 66 35) 35]
Test Case: 534 | Input/Output: [(-99 99 98 72) -99]
Test Case: 535 | Input/Output: [(3 92 -71 6) -71]
Test Case: 536 | Input/Output: [(39 -75 0 48) -75]
Test Case: 537 | Input/Output: [(84 -99 53 -8) -99]
Test Case: 538 | Input/Output: [(78 -48 -38 0) -48]
Test Case: 539 | Input/Output: [(-34 -46 39 28) -46]
Test Case: 540 | Input/Output: [(-33 74 -65 99) -65]
Test Case: 541 | Input/Output: [(80 -71 91 87) -71]
Test Case: 542 | Input/Output: [(50 97 -62 89) -62]
Test Case: 543 | Input/Output: [(16 27 75 -89) -89]
Test Case: 544 | Input/Output: [(5 -3 -5 91) -5]
Test Case: 545 | Input/Output: [(28 82 -91 92) -91]
Test Case: 546 | Input/Output: [(-59 -64 -95 32) -95]
Test Case: 547 | Input/Output: [(30 46 93 -48) -48]
Test Case: 548 | Input/Output: [(37 22 96 76) 22]
Test Case: 549 | Input/Output: [(-9 40 -85 10) -85]
Test Case: 550 | Input/Output: [(97 -55 -93 -61) -93]
Test Case: 551 | Input/Output: [(2 100 4 58) 2]
Test Case: 552 | Input/Output: [(-54 -71 35 36) -71]
Test Case: 553 | Input/Output: [(61 -3 52 -36) -36]
Test Case: 554 | Input/Output: [(-50 -88 -44 -34) -88]
Test Case: 555 | Input/Output: [(-60 -49 68 -69) -69]
Test Case: 556 | Input/Output: [(-25 -64 -70 -62) -70]
Test Case: 557 | Input/Output: [(69 -99 99 -89) -99]
Test Case: 558 | Input/Output: [(-96 33 41 24) -96]
Test Case: 559 | Input/Output: [(58 79 86 -43) -43]
Test Case: 560 | Input/Output: [(91 -30 94 -9) -30]
Test Case: 561 | Input/Output: [(-92 82 -64 -81) -92]
Test Case: 562 | Input/Output: [(55 -47 -4 37) -47]
Test Case: 563 | Input/Output: [(90 -58 -7 7) -58]
Test Case: 564 | Input/Output: [(-95 98 -45 97) -95]
Test Case: 565 | Input/Output: [(15 -74 91 -18) -74]
Test Case: 566 | Input/Output: [(-83 88 75 -71) -83]
Test Case: 567 | Input/Output: [(72 -29 73 13) -29]
Test Case: 568 | Input/Output: [(23 8 -86 -84) -86]
Test Case: 569 | Input/Output: [(-58 -94 95 31) -94]
Test Case: 570 | Input/Output: [(100 -3 34 51) -3]
Test Case: 571 | Input/Output: [(-64 85 46 39) -64]
Test Case: 572 | Input/Output: [(32 83 -24 -74) -74]
Test Case: 573 | Input/Output: [(-68 16 -1 58) -68]
Test Case: 574 | Input/Output: [(98 53 -94 90) -94]
Test Case: 575 | Input/Output: [(-31 -73 82 53) -73]
Test Case: 576 | Input/Output: [(-91 -34 -62 -36) -91]
Test Case: 577 | Input/Output: [(42 -43 20 14) -43]
Test Case: 578 | Input/Output: [(-84 -3 -4 -43) -84]
Test Case: 579 | Input/Output: [(21 29 -8 -72) -72]
Test Case: 580 | Input/Output: [(-1 -31 29 -54) -54]
Test Case: 581 | Input/Output: [(-40 -82 -17 35) -82]
Test Case: 582 | Input/Output: [(-37 -62 88 6) -62]
Test Case: 583 | Input/Output: [(21 36 13 -23) -23]
Test Case: 584 | Input/Output: [(39 -9 -17 59) -17]
Test Case: 585 | Input/Output: [(-28 41 56 -2) -28]
Test Case: 586 | Input/Output: [(64 -14 46 90) -14]
Test Case: 587 | Input/Output: [(17 -79 -20 1) -79]
Test Case: 588 | Input/Output: [(-61 -81 -31 -67) -81]
Test Case: 589 | Input/Output: [(-100 -47 89 -90) -100]
Test Case: 590 | Input/Output: [(78 -87 23 -98) -98]
Test Case: 591 | Input/Output: [(-23 -84 -19 -46) -84]
Test Case: 592 | Input/Output: [(-83 82 42 22) -83]
Test Case: 593 | Input/Output: [(10 -22 -17 63) -22]
Test Case: 594 | Input/Output: [(-17 16 93 -68) -68]
Test Case: 595 | Input/Output: [(-70 8 -51 5) -70]
Test Case: 596 | Input/Output: [(80 65 -63 -31) -63]
Test Case: 597 | Input/Output: [(18 -39 27 -60) -60]
Test Case: 598 | Input/Output: [(73 -41 -72 42) -72]
Test Case: 599 | Input/Output: [(75 -43 92 24) -43]
Test Case: 600 | Input/Output: [(44 38 84 56) 38]
Test Case: 601 | Input/Output: [(-14 -2 77 47) -14]
Test Case: 602 | Input/Output: [(64 -24 -20 -64) -64]
Test Case: 603 | Input/Output: [(-37 50 23 60) -37]
Test Case: 604 | Input/Output: [(88 84 24 5) 5]
Test Case: 605 | Input/Output: [(-28 11 4 -31) -31]
Test Case: 606 | Input/Output: [(27 -58 76 -70) -70]
Test Case: 607 | Input/Output: [(-35 91 3 -61) -61]
Test Case: 608 | Input/Output: [(-31 89 -56 -58) -58]
Test Case: 609 | Input/Output: [(84 34 -96 -48) -96]
Test Case: 610 | Input/Output: [(-68 15 30 31) -68]
Test Case: 611 | Input/Output: [(-71 81 -29 -9) -71]
Test Case: 612 | Input/Output: [(-18 -67 82 -44) -67]
Test Case: 613 | Input/Output: [(89 36 68 -53) -53]
Test Case: 614 | Input/Output: [(7 59 4 52) 4]
Test Case: 615 | Input/Output: [(13 -5 57 -90) -90]
Test Case: 616 | Input/Output: [(50 -61 -80 -46) -80]
Test Case: 617 | Input/Output: [(-38 -6 33 44) -38]
Test Case: 618 | Input/Output: [(-47 13 82 -37) -47]
Test Case: 619 | Input/Output: [(13 34 68 66) 13]
Test Case: 620 | Input/Output: [(-23 75 99 -4) -23]
Test Case: 621 | Input/Output: [(-8 82 -77 -100) -100]
Test Case: 622 | Input/Output: [(-100 -12 59 33) -100]
Test Case: 623 | Input/Output: [(76 -97 -17 -1) -97]
Test Case: 624 | Input/Output: [(77 0 -1 48) -1]
Test Case: 625 | Input/Output: [(-29 -78 -91 9) -91]
Test Case: 626 | Input/Output: [(-26 87 -6 -72) -72]
Test Case: 627 | Input/Output: [(-82 87 -35 -32) -82]
Test Case: 628 | Input/Output: [(-87 -55 -20 -36) -87]
Test Case: 629 | Input/Output: [(90 43 85 -33) -33]
Test Case: 630 | Input/Output: [(-65 -6 16 5) -65]
Test Case: 631 | Input/Output: [(-48 81 -34 -19) -48]
Test Case: 632 | Input/Output: [(-54 -15 -70 -31) -70]
Test Case: 633 | Input/Output: [(54 72 -21 -62) -62]
Test Case: 634 | Input/Output: [(-59 63 44 46) -59]
Test Case: 635 | Input/Output: [(45 28 58 87) 28]
Test Case: 636 | Input/Output: [(1 -87 -83 -89) -89]
Test Case: 637 | Input/Output: [(62 94 55 63) 55]
Test Case: 638 | Input/Output: [(-48 -11 1 40) -48]
Test Case: 639 | Input/Output: [(85 57 62 -80) -80]
Test Case: 640 | Input/Output: [(-57 -19 32 -57) -57]
Test Case: 641 | Input/Output: [(95 3 40 10) 3]
Test Case: 642 | Input/Output: [(-9 14 -48 -30) -48]
Test Case: 643 | Input/Output: [(96 -64 -23 -58) -64]
Test Case: 644 | Input/Output: [(65 -41 35 -83) -83]
Test Case: 645 | Input/Output: [(78 92 28 -25) -25]
Test Case: 646 | Input/Output: [(80 -6 -65 57) -65]
Test Case: 647 | Input/Output: [(-83 20 25 -18) -83]
Test Case: 648 | Input/Output: [(-83 10 47 19) -83]
Test Case: 649 | Input/Output: [(-60 -16 -13 -88) -88]
Test Case: 650 | Input/Output: [(79 -53 50 -13) -53]
Test Case: 651 | Input/Output: [(78 -97 28 -90) -97]
Test Case: 652 | Input/Output: [(65 92 93 4) 4]
Test Case: 653 | Input/Output: [(29 -22 75 -84) -84]
Test Case: 654 | Input/Output: [(75 48 96 -20) -20]
Test Case: 655 | Input/Output: [(40 30 60 40) 30]
Test Case: 656 | Input/Output: [(-6 -24 -57 -46) -57]
Test Case: 657 | Input/Output: [(-44 0 46 52) -44]
Test Case: 658 | Input/Output: [(-82 -74 51 -51) -82]
Test Case: 659 | Input/Output: [(51 -28 -3 -79) -79]
Test Case: 660 | Input/Output: [(-46 -71 47 -40) -71]
Test Case: 661 | Input/Output: [(-37 50 21 -16) -37]
Test Case: 662 | Input/Output: [(25 9 -51 -81) -81]
Test Case: 663 | Input/Output: [(-72 9 95 -23) -72]
Test Case: 664 | Input/Output: [(-33 81 -81 53) -81]
Test Case: 665 | Input/Output: [(-79 -59 -23 -53) -79]
Test Case: 666 | Input/Output: [(-58 54 62 31) -58]
Test Case: 667 | Input/Output: [(-5 -15 -62 4) -62]
Test Case: 668 | Input/Output: [(-70 -90 77 34) -90]
Test Case: 669 | Input/Output: [(26 18 85 98) 18]
Test Case: 670 | Input/Output: [(9 -74 17 -43) -74]
Test Case: 671 | Input/Output: [(85 86 100 47) 47]
Test Case: 672 | Input/Output: [(-90 69 -37 53) -90]
Test Case: 673 | Input/Output: [(-26 83 -13 36) -26]
Test Case: 674 | Input/Output: [(70 75 60 90) 60]
Test Case: 675 | Input/Output: [(29 65 -19 -49) -49]
Test Case: 676 | Input/Output: [(7 -17 -35 -8) -35]
Test Case: 677 | Input/Output: [(32 95 22 -70) -70]
Test Case: 678 | Input/Output: [(95 88 -18 -48) -48]
Test Case: 679 | Input/Output: [(21 -75 -63 -62) -75]
Test Case: 680 | Input/Output: [(39 -17 71 -77) -77]
Test Case: 681 | Input/Output: [(-91 24 9 -9) -91]
Test Case: 682 | Input/Output: [(22 -69 65 -66) -69]
Test Case: 683 | Input/Output: [(-32 46 -70 7) -70]
Test Case: 684 | Input/Output: [(85 -10 -52 43) -52]
Test Case: 685 | Input/Output: [(2 97 5 -1) -1]
Test Case: 686 | Input/Output: [(-84 -52 3 13) -84]
Test Case: 687 | Input/Output: [(-22 41 51 81) -22]
Test Case: 688 | Input/Output: [(-26 51 33 79) -26]
Test Case: 689 | Input/Output: [(99 -16 -93 -34) -93]
Test Case: 690 | Input/Output: [(20 -87 90 -86) -87]
Test Case: 691 | Input/Output: [(-14 -13 75 24) -14]
Test Case: 692 | Input/Output: [(5 83 43 -66) -66]
Test Case: 693 | Input/Output: [(1 96 -97 -33) -97]
Test Case: 694 | Input/Output: [(6 -27 -76 -32) -76]
Test Case: 695 | Input/Output: [(61 17 -36 -45) -45]
Test Case: 696 | Input/Output: [(44 40 -48 -92) -92]
Test Case: 697 | Input/Output: [(18 45 -2 26) -2]
Test Case: 698 | Input/Output: [(97 58 52 2) 2]
Test Case: 699 | Input/Output: [(-71 58 -4 58) -71]
Test Case: 700 | Input/Output: [(-17 -16 44 -15) -17]
Test Case: 701 | Input/Output: [(33 27 66 57) 27]
Test Case: 702 | Input/Output: [(-91 57 62 -29) -91]
Test Case: 703 | Input/Output: [(-50 92 37 7) -50]
Test Case: 704 | Input/Output: [(3 -68 52 -97) -97]
Test Case: 705 | Input/Output: [(6 13 -78 56) -78]
Test Case: 706 | Input/Output: [(-70 48 76 34) -70]
Test Case: 707 | Input/Output: [(24 46 68 52) 24]
Test Case: 708 | Input/Output: [(-54 6 52 -9) -54]
Test Case: 709 | Input/Output: [(4 6 29 -67) -67]
Test Case: 710 | Input/Output: [(55 -27 -44 27) -44]
Test Case: 711 | Input/Output: [(-66 13 30 -17) -66]
Test Case: 712 | Input/Output: [(-81 90 86 -77) -81]
Test Case: 713 | Input/Output: [(14 -82 39 62) -82]
Test Case: 714 | Input/Output: [(28 49 -87 49) -87]
Test Case: 715 | Input/Output: [(23 -30 1 -60) -60]
Test Case: 716 | Input/Output: [(1 -38 -24 -60) -60]
Test Case: 717 | Input/Output: [(-51 -71 56 76) -71]
Test Case: 718 | Input/Output: [(-50 78 28 -75) -75]
Test Case: 719 | Input/Output: [(-95 92 -46 9) -95]
Test Case: 720 | Input/Output: [(-81 -54 -22 -27) -81]
Test Case: 721 | Input/Output: [(-22 1 -58 94) -58]
Test Case: 722 | Input/Output: [(93 -53 -84 -95) -95]
Test Case: 723 | Input/Output: [(55 -71 -25 10) -71]
Test Case: 724 | Input/Output: [(17 -2 -2 7) -2]
Test Case: 725 | Input/Output: [(-20 96 -48 -33) -48]
Test Case: 726 | Input/Output: [(40 -25 -86 -25) -86]
Test Case: 727 | Input/Output: [(44 -51 -74 -45) -74]
Test Case: 728 | Input/Output: [(-33 -65 58 -39) -65]
Test Case: 729 | Input/Output: [(93 -74 83 53) -74]
Test Case: 730 | Input/Output: [(19 39 69 56) 19]
Test Case: 731 | Input/Output: [(43 -13 -42 22) -42]
Test Case: 732 | Input/Output: [(-24 -81 -32 80) -81]
Test Case: 733 | Input/Output: [(99 -90 -25 14) -90]
Test Case: 734 | Input/Output: [(91 55 -3 45) -3]
Test Case: 735 | Input/Output: [(56 12 79 -54) -54]
Test Case: 736 | Input/Output: [(-14 -67 68 -73) -73]
Test Case: 737 | Input/Output: [(43 -44 93 -6) -44]
Test Case: 738 | Input/Output: [(50 -14 30 84) -14]
Test Case: 739 | Input/Output: [(87 -16 -53 3) -53]
Test Case: 740 | Input/Output: [(56 -91 -15 68) -91]
Test Case: 741 | Input/Output: [(19 35 79 -10) -10]
Test Case: 742 | Input/Output: [(39 63 66 47) 39]
Test Case: 743 | Input/Output: [(82 99 61 60) 60]
Test Case: 744 | Input/Output: [(14 -84 8 -20) -84]
Test Case: 745 | Input/Output: [(-37 56 -8 -33) -37]
Test Case: 746 | Input/Output: [(98 42 53 -54) -54]
Test Case: 747 | Input/Output: [(43 -58 21 96) -58]
Test Case: 748 | Input/Output: [(-20 -2 -63 -14) -63]
Test Case: 749 | Input/Output: [(14 -71 -48 1) -71]
Test Case: 750 | Input/Output: [(-64 -100 48 75) -100]
Test Case: 751 | Input/Output: [(-51 5 -53 -99) -99]
Test Case: 752 | Input/Output: [(-80 8 -45 21) -80]
Test Case: 753 | Input/Output: [(-86 82 -21 29) -86]
Test Case: 754 | Input/Output: [(53 14 63 -54) -54]
Test Case: 755 | Input/Output: [(28 52 -91 -55) -91]
Test Case: 756 | Input/Output: [(-4 7 83 14) -4]
Test Case: 757 | Input/Output: [(11 26 -93 -30) -93]
Test Case: 758 | Input/Output: [(24 -13 -97 -6) -97]
Test Case: 759 | Input/Output: [(65 33 100 -7) -7]
Test Case: 760 | Input/Output: [(-48 -38 41 63) -48]
Test Case: 761 | Input/Output: [(67 67 4 -78) -78]
Test Case: 762 | Input/Output: [(-90 -90 59 -41) -90]
Test Case: 763 | Input/Output: [(-100 -28 31 -61) -100]
Test Case: 764 | Input/Output: [(-29 64 21 -27) -29]
Test Case: 765 | Input/Output: [(32 34 -16 -82) -82]
Test Case: 766 | Input/Output: [(-6 -25 31 -98) -98]
Test Case: 767 | Input/Output: [(-21 -75 88 3) -75]
Test Case: 768 | Input/Output: [(-58 -17 -32 9) -58]
Test Case: 769 | Input/Output: [(7 -55 -12 4) -55]
Test Case: 770 | Input/Output: [(10 38 35 -83) -83]
Test Case: 771 | Input/Output: [(-5 -31 54 -88) -88]
Test Case: 772 | Input/Output: [(48 27 -90 32) -90]
Test Case: 773 | Input/Output: [(13 -2 -100 -5) -100]
Test Case: 774 | Input/Output: [(-79 97 -77 60) -79]
Test Case: 775 | Input/Output: [(-63 -98 -59 70) -98]
Test Case: 776 | Input/Output: [(-57 -61 -48 100) -61]
Test Case: 777 | Input/Output: [(-36 -75 -42 99) -75]
Test Case: 778 | Input/Output: [(34 -33 -44 -48) -48]
Test Case: 779 | Input/Output: [(47 13 37 1) 1]
Test Case: 780 | Input/Output: [(-45 -88 -9 -23) -88]
Test Case: 781 | Input/Output: [(16 -83 25 25) -83]
Test Case: 782 | Input/Output: [(45 87 -59 48) -59]
Test Case: 783 | Input/Output: [(30 -81 15 -21) -81]
Test Case: 784 | Input/Output: [(99 97 -33 -20) -33]
Test Case: 785 | Input/Output: [(15 -69 -1 -93) -93]
Test Case: 786 | Input/Output: [(99 68 13 -9) -9]
Test Case: 787 | Input/Output: [(-3 55 33 -77) -77]
Test Case: 788 | Input/Output: [(41 50 -71 -5) -71]
Test Case: 789 | Input/Output: [(49 -11 -9 -23) -23]
Test Case: 790 | Input/Output: [(48 15 -18 89) -18]
Test Case: 791 | Input/Output: [(-4 86 48 19) -4]
Test Case: 792 | Input/Output: [(-75 -56 -35 79) -75]
Test Case: 793 | Input/Output: [(-44 92 -75 53) -75]
Test Case: 794 | Input/Output: [(39 -12 -52 -88) -88]
Test Case: 795 | Input/Output: [(-100 -5 -57 37) -100]
Test Case: 796 | Input/Output: [(-43 -35 56 -59) -59]
Test Case: 797 | Input/Output: [(80 -84 41 37) -84]
Test Case: 798 | Input/Output: [(93 -92 -13 1) -92]
Test Case: 799 | Input/Output: [(54 -19 -65 -51) -65]
Test Case: 800 | Input/Output: [(-60 20 52 -59) -60]
Test Case: 801 | Input/Output: [(-66 -19 40 -80) -80]
Test Case: 802 | Input/Output: [(-14 -45 -58 -80) -80]
Test Case: 803 | Input/Output: [(38 72 48 -61) -61]
Test Case: 804 | Input/Output: [(69 18 10 55) 10]
Test Case: 805 | Input/Output: [(38 -30 23 95) -30]
Test Case: 806 | Input/Output: [(55 11 -78 37) -78]
Test Case: 807 | Input/Output: [(77 -91 -70 -69) -91]
Test Case: 808 | Input/Output: [(-53 -54 33 -1) -54]
Test Case: 809 | Input/Output: [(-65 -83 25 -81) -83]
Test Case: 810 | Input/Output: [(16 -96 36 34) -96]
Test Case: 811 | Input/Output: [(-61 10 83 59) -61]
Test Case: 812 | Input/Output: [(32 -26 -31 -75) -75]
Test Case: 813 | Input/Output: [(-29 -34 55 100) -34]
Test Case: 814 | Input/Output: [(-58 76 23 12) -58]
Test Case: 815 | Input/Output: [(-36 -15 -30 -36) -36]
Test Case: 816 | Input/Output: [(-38 55 -51 50) -51]
Test Case: 817 | Input/Output: [(28 64 -66 -64) -66]
Test Case: 818 | Input/Output: [(18 63 -77 58) -77]
Test Case: 819 | Input/Output: [(-18 45 34 -30) -30]
Test Case: 820 | Input/Output: [(-72 -65 -85 82) -85]
Test Case: 821 | Input/Output: [(-11 -91 -96 98) -96]
Test Case: 822 | Input/Output: [(-6 40 92 -78) -78]
Test Case: 823 | Input/Output: [(-94 21 13 -50) -94]
Test Case: 824 | Input/Output: [(-63 -22 -28 -28) -63]
Test Case: 825 | Input/Output: [(-59 -79 -66 -88) -88]
Test Case: 826 | Input/Output: [(82 -26 67 -1) -26]
Test Case: 827 | Input/Output: [(89 -82 -79 66) -82]
Test Case: 828 | Input/Output: [(-15 12 -82 20) -82]
Test Case: 829 | Input/Output: [(-55 44 -39 -96) -96]
Test Case: 830 | Input/Output: [(-2 -65 3 -11) -65]
Test Case: 831 | Input/Output: [(-72 70 29 21) -72]
Test Case: 832 | Input/Output: [(15 -26 -21 -57) -57]
Test Case: 833 | Input/Output: [(-14 -95 96 9) -95]
Test Case: 834 | Input/Output: [(66 -63 -27 12) -63]
Test Case: 835 | Input/Output: [(-71 10 35 -41) -71]
Test Case: 836 | Input/Output: [(12 45 92 40) 12]
Test Case: 837 | Input/Output: [(11 62 -22 95) -22]
Test Case: 838 | Input/Output: [(11 -86 77 9) -86]
Test Case: 839 | Input/Output: [(49 28 59 12) 12]
Test Case: 840 | Input/Output: [(-29 -84 34 -76) -84]
Test Case: 841 | Input/Output: [(61 -24 -63 -89) -89]
Test Case: 842 | Input/Output: [(43 -49 39 6) -49]
Test Case: 843 | Input/Output: [(42 -29 43 38) -29]
Test Case: 844 | Input/Output: [(63 -1 2 9) -1]
Test Case: 845 | Input/Output: [(-87 -98 -67 50) -98]
Test Case: 846 | Input/Output: [(4 60 -66 3) -66]
Test Case: 847 | Input/Output: [(-64 -32 60 81) -64]
Test Case: 848 | Input/Output: [(-93 -66 -27 89) -93]
Test Case: 849 | Input/Output: [(-87 55 23 -79) -87]
Test Case: 850 | Input/Output: [(43 -76 -5 -62) -76]
Test Case: 851 | Input/Output: [(13 97 -92 -56) -92]
Test Case: 852 | Input/Output: [(27 10 -22 -9) -22]
Test Case: 853 | Input/Output: [(46 -75 -99 51) -99]
Test Case: 854 | Input/Output: [(-36 -77 -66 -13) -77]
Test Case: 855 | Input/Output: [(-75 83 98 99) -75]
Test Case: 856 | Input/Output: [(-2 -72 -47 7) -72]
Test Case: 857 | Input/Output: [(7 -89 52 27) -89]
Test Case: 858 | Input/Output: [(-51 93 89 -32) -51]
Test Case: 859 | Input/Output: [(-23 28 -5 99) -23]
Test Case: 860 | Input/Output: [(-62 15 -7 82) -62]
Test Case: 861 | Input/Output: [(87 51 -25 20) -25]
Test Case: 862 | Input/Output: [(60 -77 45 -72) -77]
Test Case: 863 | Input/Output: [(85 -34 75 70) -34]
Test Case: 864 | Input/Output: [(32 30 -7 98) -7]
Test Case: 865 | Input/Output: [(65 54 32 95) 32]
Test Case: 866 | Input/Output: [(83 52 25 16) 16]
Test Case: 867 | Input/Output: [(74 16 84 17) 16]
Test Case: 868 | Input/Output: [(75 82 -29 -98) -98]
Test Case: 869 | Input/Output: [(26 -100 -15 37) -100]
Test Case: 870 | Input/Output: [(-43 80 -47 -27) -47]
Test Case: 871 | Input/Output: [(-44 27 29 -68) -68]
Test Case: 872 | Input/Output: [(25 -53 -82 -34) -82]
Test Case: 873 | Input/Output: [(82 -59 -63 -9) -63]
Test Case: 874 | Input/Output: [(88 80 83 62) 62]
Test Case: 875 | Input/Output: [(2 40 92 -89) -89]
Test Case: 876 | Input/Output: [(-6 60 -17 -38) -38]
Test Case: 877 | Input/Output: [(-21 20 -86 -43) -86]
Test Case: 878 | Input/Output: [(58 98 -10 91) -10]
Test Case: 879 | Input/Output: [(25 86 57 30) 25]
Test Case: 880 | Input/Output: [(-95 14 71 2) -95]
Test Case: 881 | Input/Output: [(-99 -89 -72 -38) -99]
Test Case: 882 | Input/Output: [(-53 -79 98 85) -79]
Test Case: 883 | Input/Output: [(-35 -93 76 73) -93]
Test Case: 884 | Input/Output: [(-38 -87 24 18) -87]
Test Case: 885 | Input/Output: [(10 -45 -87 -2) -87]
Test Case: 886 | Input/Output: [(7 -76 -51 12) -76]
Test Case: 887 | Input/Output: [(16 38 95 -72) -72]
Test Case: 888 | Input/Output: [(35 35 97 -87) -87]
Test Case: 889 | Input/Output: [(15 19 -95 -17) -95]
Test Case: 890 | Input/Output: [(-48 -35 76 -53) -53]
Test Case: 891 | Input/Output: [(-43 -53 -4 4) -53]
Test Case: 892 | Input/Output: [(-46 17 9 -2) -46]
Test Case: 893 | Input/Output: [(-54 21 -49 62) -54]
Test Case: 894 | Input/Output: [(-21 21 -12 -68) -68]
Test Case: 895 | Input/Output: [(97 -87 34 -24) -87]
Test Case: 896 | Input/Output: [(-65 -52 -27 -50) -65]
Test Case: 897 | Input/Output: [(84 -83 81 8) -83]
Test Case: 898 | Input/Output: [(24 81 47 75) 24]
Test Case: 899 | Input/Output: [(18 -86 49 -87) -87]
Test Case: 900 | Input/Output: [(-65 93 -37 100) -65]
Test Case: 901 | Input/Output: [(-63 -58 22 -34) -63]
Test Case: 902 | Input/Output: [(-12 -23 -6 17) -23]
Test Case: 903 | Input/Output: [(85 -78 50 37) -78]
Test Case: 904 | Input/Output: [(-35 87 46 -98) -98]
Test Case: 905 | Input/Output: [(-28 -83 -79 -87) -87]
Test Case: 906 | Input/Output: [(26 -54 -38 -60) -60]
Test Case: 907 | Input/Output: [(58 -13 47 83) -13]
Test Case: 908 | Input/Output: [(62 64 29 -17) -17]
Test Case: 909 | Input/Output: [(84 -79 -15 -94) -94]
Test Case: 910 | Input/Output: [(91 0 78 -67) -67]
Test Case: 911 | Input/Output: [(85 -64 -57 -95) -95]
Test Case: 912 | Input/Output: [(-57 -52 -29 -75) -75]
Test Case: 913 | Input/Output: [(-37 -70 58 -25) -70]
Test Case: 914 | Input/Output: [(65 -24 -16 -7) -24]
Test Case: 915 | Input/Output: [(16 -86 -5 -63) -86]
Test Case: 916 | Input/Output: [(23 18 -44 -12) -44]
Test Case: 917 | Input/Output: [(-34 -85 45 38) -85]
Test Case: 918 | Input/Output: [(81 25 51 25) 25]
Test Case: 919 | Input/Output: [(96 92 41 -16) -16]
Test Case: 920 | Input/Output: [(27 68 -12 23) -12]
Test Case: 921 | Input/Output: [(70 -2 41 -30) -30]
Test Case: 922 | Input/Output: [(47 15 81 -10) -10]
Test Case: 923 | Input/Output: [(19 -84 -98 80) -98]
Test Case: 924 | Input/Output: [(-50 -1 -54 -51) -54]
Test Case: 925 | Input/Output: [(33 4 36 -1) -1]
Test Case: 926 | Input/Output: [(-8 2 88 -41) -41]
Test Case: 927 | Input/Output: [(-53 -66 83 47) -66]
Test Case: 928 | Input/Output: [(-34 84 -10 55) -34]
Test Case: 929 | Input/Output: [(-1 48 -92 80) -92]
Test Case: 930 | Input/Output: [(43 56 43 33) 33]
Test Case: 931 | Input/Output: [(-81 52 96 24) -81]
Test Case: 932 | Input/Output: [(-54 -38 -15 95) -54]
Test Case: 933 | Input/Output: [(43 35 27 92) 27]
Test Case: 934 | Input/Output: [(-79 -73 -16 73) -79]
Test Case: 935 | Input/Output: [(37 92 -5 -62) -62]
Test Case: 936 | Input/Output: [(45 -31 99 46) -31]
Test Case: 937 | Input/Output: [(-66 96 -51 9) -66]
Test Case: 938 | Input/Output: [(44 38 7 -9) -9]
Test Case: 939 | Input/Output: [(67 -18 -74 33) -74]
Test Case: 940 | Input/Output: [(13 -21 79 -10) -21]
Test Case: 941 | Input/Output: [(85 -11 -16 -37) -37]
Test Case: 942 | Input/Output: [(36 55 -1 -94) -94]
Test Case: 943 | Input/Output: [(35 -89 -8 -16) -89]
Test Case: 944 | Input/Output: [(89 -39 -33 47) -39]
Test Case: 945 | Input/Output: [(64 -46 -8 52) -46]
Test Case: 946 | Input/Output: [(5 -76 -14 44) -76]
Test Case: 947 | Input/Output: [(-65 -63 61 -8) -65]
Test Case: 948 | Input/Output: [(-85 1 75 -99) -99]
Test Case: 949 | Input/Output: [(10 -23 69 89) -23]
Test Case: 950 | Input/Output: [(-3 -17 -93 -43) -93]
Test Case: 951 | Input/Output: [(-87 62 -77 -84) -87]
Test Case: 952 | Input/Output: [(75 -47 90 97) -47]
Test Case: 953 | Input/Output: [(80 83 29 -87) -87]
Test Case: 954 | Input/Output: [(-94 -42 66 13) -94]
Test Case: 955 | Input/Output: [(-93 62 33 99) -93]
Test Case: 956 | Input/Output: [(45 59 -50 83) -50]
Test Case: 957 | Input/Output: [(23 -37 -41 7) -41]
Test Case: 958 | Input/Output: [(47 -42 -38 -84) -84]
Test Case: 959 | Input/Output: [(-72 -63 -96 -87) -96]
Test Case: 960 | Input/Output: [(-88 95 -41 -24) -88]
Test Case: 961 | Input/Output: [(-64 -70 41 -24) -70]
Test Case: 962 | Input/Output: [(31 68 28 63) 28]
Test Case: 963 | Input/Output: [(61 28 -72 -29) -72]
Test Case: 964 | Input/Output: [(-21 16 -11 18) -21]
Test Case: 965 | Input/Output: [(82 52 -3 53) -3]
Test Case: 966 | Input/Output: [(65 58 69 -54) -54]
Test Case: 967 | Input/Output: [(59 46 -94 -61) -94]
Test Case: 968 | Input/Output: [(-47 -41 87 -76) -76]
Test Case: 969 | Input/Output: [(-47 -60 31 88) -60]
Test Case: 970 | Input/Output: [(-57 19 -72 7) -72]
Test Case: 971 | Input/Output: [(92 22 22 -71) -71]
Test Case: 972 | Input/Output: [(-71 86 56 -17) -71]
Test Case: 973 | Input/Output: [(39 83 14 -98) -98]
Test Case: 974 | Input/Output: [(-15 -29 -80 -16) -80]
Test Case: 975 | Input/Output: [(-41 -80 27 -12) -80]
Test Case: 976 | Input/Output: [(20 -55 -47 72) -55]
Test Case: 977 | Input/Output: [(-76 -74 38 -66) -76]
Test Case: 978 | Input/Output: [(-27 -23 -92 -80) -92]
Test Case: 979 | Input/Output: [(6 86 -38 1) -38]
Test Case: 980 | Input/Output: [(-65 62 97 31) -65]
Test Case: 981 | Input/Output: [(79 68 19 33) 19]
Test Case: 982 | Input/Output: [(-89 -54 -54 81) -89]
Test Case: 983 | Input/Output: [(96 -27 -55 -27) -55]
Test Case: 984 | Input/Output: [(-1 60 -72 -22) -72]
Test Case: 985 | Input/Output: [(-41 -42 53 -3) -42]
Test Case: 986 | Input/Output: [(87 -85 51 -73) -85]
Test Case: 987 | Input/Output: [(7 74 -52 -62) -62]
Test Case: 988 | Input/Output: [(2 -91 -98 6) -98]
Test Case: 989 | Input/Output: [(8 -58 -15 80) -58]
Test Case: 990 | Input/Output: [(-40 49 -31 -98) -98]
Test Case: 991 | Input/Output: [(-63 -96 20 -76) -96]
Test Case: 992 | Input/Output: [(-4 -18 -39 13) -39]
Test Case: 993 | Input/Output: [(33 40 70 47) 33]
Test Case: 994 | Input/Output: [(24 10 -86 -80) -86]
Test Case: 995 | Input/Output: [(23 22 24 -16) -16]
Test Case: 996 | Input/Output: [(-84 -13 -62 73) -84]
Test Case: 997 | Input/Output: [(-52 77 98 -92) -92]
Test Case: 998 | Input/Output: [(-96 -14 27 -47) -96]
Test Case: 999 | Input/Output: [(5 47 -34 13) -34]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 87 74 72 -96 6 43 -63 94 48 -38 31 -77 20 -9 20 67
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[14 47 47 47] 14] [[75 -77 -77 -77] -77] [[-74 53 53 53] -74] [[25 25 -29 25] -29] [[94 94 57 94] 57] [[-64 35 35 35] -64] [[58 58 58 -42] -42] [[-44 24 24 24] -44] [[-69 -69 56 -69] -69] [[75 75 -79 75] -79] [(14 14 14 14) 14] [(9 9 9 9) 9] [(78 78 78 78) 78] [(13 13 13 13) 13] [(-77 -77 -77 -77) -77] [(95 61 16 74) 16] [(27 37 11 26) 11] [(24 59 70 19) 19] [(18 86 29 26) 18] [(63 59 87 92) 59] [(57 62 52 1) 1] [(9 62 23 29) 9] [(43 35 84 68) 35] [(72 59 35 17) 17] [(15 75 4 89) 4] [(21 82 49 64) 21] [(95 5 23 78) 5] [(14 72 16 79) 14] [(92 89 16 9) 9] [(36 67 86 27) 27] [(74 64 63 87) 63] [(93 25 50 34) 25] [(38 36 15 34) 15] [(62 6 11 1) 1] [(29 13 80 74) 13] [(-52 57 -79 -21) -79] [(-82 89 -66 22) -82] [(-97 -11 79 84) -97] [(-16 39 -48 48) -48] [(60 70 76 -38) -38] [(11 33 53 -20) -20] [(-28 -80 68 18) -80] [(-69 -48 3 -85) -85] [(71 70 -70 -40) -70] [(60 -58 11 -95) -95] [(65 -18 -32 -2) -32] [(-5 -25 -81 -81) -81] [(25 2 -15 67) -15] [(32 -60 -29 89) -60] [(28 52 -16 -90) -90] [(-64 -69 -32 1) -69] [(25 -81 -48 -86) -86] [(26 86 -58 -16) -58] [(-19 31 -77 11) -77] [(-20 -73 -90 -96) -96] [(25 34 97 70) 25] [(-4 39 -70 82) -70] [(-32 70 77 7) -32] [(71 -32 -89 67) -89] [(-58 85 87 -71) -71] [(2 87 -8 -33) -33] [(61 36 36 52) 36] [(8 53 74 -47) -47] [(100 -57 59 -76) -76] [(6 64 79 55) 6] [(100 -14 -92 86) -92] [(96 74 -99 14) -99] [(79 53 -31 -83) -83] [(52 17 12 -66) -66] [(16 83 88 -7) -7] [(-99 23 32 -87) -99] [(94 34 36 7) 7] [(-31 91 52 37) -31] [(-84 31 -56 -70) -84] [(69 46 44 28) 28] [(78 46 100 75) 46] [(80 -31 -88 78) -88] [(23 -45 -54 12) -54] [(60 37 94 5) 5] [(10 -81 18 87) -81] [(13 46 84 56) 13] [(18 -23 56 -6) -23] [(7 -65 -74 -3) -74] [(-78 -13 97 81) -78] [(20 92 66 -90) -90] [(7 10 86 -28) -28] [(13 -19 54 -73) -73] [(-90 -9 -51 -20) -90] [(-49 52 -92 16) -92] [(81 94 -58 87) -58] [(-48 -70 -72 93) -72] [(-11 65 -96 59) -96] [(-69 -37 56 56) -69] [(-48 83 16 5) -48] [(100 -92 -43 -20) -92])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 14                  | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: 53                 
Correct output: -29                 | Program output: -29                
Correct output: 57                  | Program output: 57                 
Correct output: -64                 | Program output: 35                 
Correct output: -42                 | Program output: 58                 
Correct output: -44                 | Program output: 24                 
Correct output: -69                 | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 70                 
Correct output: 18                  | Program output: 29                 
Correct output: 59                  | Program output: 87                 
Correct output: 1                   | Program output: 52                 
Correct output: 9                   | Program output: 23                 
Correct output: 35                  | Program output: 84                 
Correct output: 17                  | Program output: 35                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 49                 
Correct output: 5                   | Program output: 23                 
Correct output: 14                  | Program output: 16                 
Correct output: 9                   | Program output: 16                 
Correct output: 27                  | Program output: 86                 
Correct output: 63                  | Program output: 63                 
Correct output: 25                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 11                 
Correct output: 13                  | Program output: 80                 
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -66                
Correct output: -97                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -38                 | Program output: 76                 
Correct output: -20                 | Program output: 53                 
Correct output: -80                 | Program output: 68                 
Correct output: -85                 | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 11                 
Correct output: -32                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output: -15                
Correct output: -60                 | Program output: -29                
Correct output: -90                 | Program output: -16                
Correct output: -69                 | Program output: -32                
Correct output: -86                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -90                
Correct output: 25                  | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: 77                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: 87                 
Correct output: -33                 | Program output: -8                 
Correct output: 36                  | Program output: 36                 
Correct output: -47                 | Program output: 74                 
Correct output: -76                 | Program output: 59                 
Correct output: 6                   | Program output: 79                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -31                
Correct output: -66                 | Program output: 12                 
Correct output: -7                  | Program output: 88                 
Correct output: -99                 | Program output: 32                 
Correct output: 7                   | Program output: 36                 
Correct output: -31                 | Program output: 52                 
Correct output: -84                 | Program output: -56                
Correct output: 28                  | Program output: 44                 
Correct output: 46                  | Program output: 100                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 94                 
Correct output: -81                 | Program output: 18                 
Correct output: 13                  | Program output: 84                 
Correct output: -23                 | Program output: 56                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 97                 
Correct output: -90                 | Program output: 66                 
Correct output: -28                 | Program output: 86                 
Correct output: -73                 | Program output: 54                 
Correct output: -90                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 56                 
Correct output: -48                 | Program output: 16                 
Correct output: -92                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 2, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction -29} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_shove (exec_k () (exec_k_when_autoconstructing () (integer_empty boolean_eq) print_newline integer_max integer_rot integer_dup boolean_yankdup boolean_dup boolean_flush exec_k () () exec_y_when_autoconstructing (exec_eq integer_swap boolean_invert_second_then_and) print_integer integer_shove) in3 exec_s (boolean_shove print_integer integer_lt exec_shove (boolean_pop exec_do*while (integer_stackdepth exec_dup_items) exec_k_when_autoconstructing (integer_eq) (integer_lt) boolean_dup integer_dup_times exec_do*range (boolean_or boolean_dup boolean_rot integer_add exec_empty)) exec_while () boolean_xor print_boolean exec_empty integer_div exec_shove () exec_flush integer_dup_items exec_empty exec_y_when_autoconstructing (integer_yank) boolean_dup_times exec_y_when_autoconstructing () exec_dup_times (exec_flush boolean_yankdup) exec_dup (integer_yank) boolean_not exec_y_when_autoconstructing () integer_pop exec_k (exec_do*range (-29 integer_mult boolean_invert_first_then_and)) ()) () ()))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 93
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 2, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction -29} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_shove (exec_k () (exec_k_when_autoconstructing () (integer_empty boolean_eq) print_newline integer_max integer_rot integer_dup boolean_yankdup boolean_dup boolean_flush exec_k () () exec_y_when_autoconstructing (exec_eq integer_swap boolean_invert_second_then_and) print_integer integer_shove) in3 exec_s (boolean_shove print_integer integer_lt exec_shove (boolean_pop exec_do*while (integer_stackdepth exec_dup_items) exec_k_when_autoconstructing (integer_eq) (integer_lt) boolean_dup integer_dup_times exec_do*range (boolean_or boolean_dup boolean_rot integer_add exec_empty)) exec_while () boolean_xor print_boolean exec_empty integer_div exec_shove () exec_flush integer_dup_items exec_empty exec_y_when_autoconstructing (integer_yank) boolean_dup_times exec_y_when_autoconstructing () exec_dup_times (exec_flush boolean_yankdup) exec_dup (integer_yank) boolean_not exec_y_when_autoconstructing () integer_pop exec_k (exec_do*range (-29 integer_mult boolean_invert_first_then_and)) ()) () ()))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 93
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 2 2 3 1 2 13 5 2 13)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (5 2 2 3 1 2 13 5 2 13)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop})
Best program: (exec_while () boolean_invert_second_then_and in3 print_integer boolean_not exec_swap (exec_y_when_autoconstructing (exec_swap (integer_max integer_dup_items exec_if () () boolean_pop boolean_shove exec_s_when_autoconstructing (boolean_swap exec_rot (boolean_dup_times) (integer_yankdup exec_s_when_autoconstructing (integer_stackdepth integer_dup_times in4) (boolean_pop) ()) ()) () ()) ())) ())
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 23
Size: 41
Percent parens: 0.439
--- Population Statistics ---
Average total errors in population: 9.952
Median total errors in population: 10
Error averages by case: (0.995 0.998 0.998 0.997 0.999 0.998 0.987 0.995 0.998 0.987)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.99
Average program size in population (points): 69.934
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 490069
--- Timings ---
Current time: 1559594113469 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.8 seconds, 34.0%
Fitness Testing:      1.5 seconds, 61.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 14                  | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: 53                 
Correct output: -29                 | Program output: 25                 
Correct output: 57                  | Program output: 94                 
Correct output: -64                 | Program output: 35                 
Correct output: -42                 | Program output: 58                 
Correct output: -44                 | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 61                 
Correct output: 11                  | Program output: 37                 
Correct output: 19                  | Program output: 59                 
Correct output: 18                  | Program output: 86                 
Correct output: 59                  | Program output: 59                 
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 62                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 59                 
Correct output: 4                   | Program output: 75                 
Correct output: 21                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 14                  | Program output: 72                 
Correct output: 9                   | Program output: 89                 
Correct output: 27                  | Program output: 67                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 25                 
Correct output: 15                  | Program output: 36                 
Correct output: 1                   | Program output: 6                  
Correct output: 13                  | Program output: 13                 
Correct output: -79                 | Program output: 57                 
Correct output: -82                 | Program output: 89                 
Correct output: -97                 | Program output: -11                
Correct output: -48                 | Program output: 39                 
Correct output: -38                 | Program output: 70                 
Correct output: -20                 | Program output: 33                 
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -48                
Correct output: -70                 | Program output: 70                 
Correct output: -95                 | Program output: -58                
Correct output: -32                 | Program output: -18                
Correct output: -81                 | Program output: -25                
Correct output: -15                 | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: 52                 
Correct output: -69                 | Program output: -69                
Correct output: -86                 | Program output: -81                
Correct output: -58                 | Program output: 86                 
Correct output: -77                 | Program output: 31                 
Correct output: -96                 | Program output: -73                
Correct output: 25                  | Program output: 34                 
Correct output: -70                 | Program output: 39                 
Correct output: -32                 | Program output: 70                 
Correct output: -89                 | Program output: -32                
Correct output: -71                 | Program output: 85                 
Correct output: -33                 | Program output: 87                 
Correct output: 36                  | Program output: 36                 
Correct output: -47                 | Program output: 53                 
Correct output: -76                 | Program output: -57                
Correct output: 6                   | Program output: 64                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 74                 
Correct output: -83                 | Program output: 53                 
Correct output: -66                 | Program output: 17                 
Correct output: -7                  | Program output: 83                 
Correct output: -99                 | Program output: 23                 
Correct output: 7                   | Program output: 34                 
Correct output: -31                 | Program output: 91                 
Correct output: -84                 | Program output: 31                 
Correct output: 28                  | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: -88                 | Program output: -31                
Correct output: -54                 | Program output: -45                
Correct output: 5                   | Program output: 37                 
Correct output: -81                 | Program output: -81                
Correct output: 13                  | Program output: 46                 
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -65                
Correct output: -78                 | Program output: -13                
Correct output: -90                 | Program output: 92                 
Correct output: -28                 | Program output: 10                 
Correct output: -73                 | Program output: -19                
Correct output: -90                 | Program output: -9                 
Correct output: -92                 | Program output: 52                 
Correct output: -58                 | Program output: 94                 
Correct output: -72                 | Program output: -70                
Correct output: -96                 | Program output: 65                 
Correct output: -69                 | Program output: -37                
Correct output: -48                 | Program output: 83                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_swap boolean_dup_times in2 exec_noop exec_eq boolean_xor exec_do*range (boolean_or boolean_and print_integer exec_when (integer_empty integer_sub exec_pop (exec_k_when_autoconstructing (exec_dup_items integer_min exec_dup_times (boolean_dup_items exec_flush print_newline boolean_swap exec_eq exec_do*range (integer_flush integer_dup_items integer_yank exec_dup (boolean_and integer_empty integer_dup_items in3 boolean_dup boolean_frominteger boolean_frominteger integer_shove exec_dup_items boolean_yankdup integer_mult exec_when (boolean_xor exec_dup_items exec_empty integer_max) exec_y (exec_pop (integer_div boolean_dup integer_add integer_yank) boolean_or boolean_frominteger exec_k (integer_mult) (integer_mult in1 boolean_frominteger boolean_yankdup integer_swap integer_sub boolean_flush exec_s (integer_mult exec_k (exec_y_when_autoconstructing (print_exec (exec_when (boolean_yank integer_mult) integer_gt) integer_dup_items exec_s () (exec_do*range () exec_empty) (boolean_or) exec_while (integer_sub boolean_dup_items integer_gt))) ()) () ())))))) ()))))
Lexicase best errors: [1 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 106
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_swap boolean_dup_times in2 exec_noop exec_eq boolean_xor exec_do*range (boolean_or boolean_and print_integer exec_when (integer_empty integer_sub exec_pop (exec_k_when_autoconstructing (exec_dup_items integer_min exec_dup_times (boolean_dup_items exec_flush print_newline boolean_swap exec_eq exec_do*range (integer_flush integer_dup_items integer_yank exec_dup (boolean_and integer_empty integer_dup_items in3 boolean_dup boolean_frominteger boolean_frominteger integer_shove exec_dup_items boolean_yankdup integer_mult exec_when (boolean_xor exec_dup_items exec_empty integer_max) exec_y (exec_pop (integer_div boolean_dup integer_add integer_yank) boolean_or boolean_frominteger exec_k (integer_mult) (integer_mult in1 boolean_frominteger boolean_yankdup integer_swap integer_sub boolean_flush exec_s (integer_mult exec_k (exec_y_when_autoconstructing (print_exec (exec_when (boolean_yank integer_mult) integer_gt) integer_dup_items exec_s () (exec_do*range () exec_empty) (boolean_or) exec_while (integer_sub boolean_dup_items integer_gt))) ()) () ())))))) ()))))
Zero cases best errors: [1 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 106
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 207 79 209 207 315 604 316 1 79)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (1 207 79 209 207 315 604 316 1 79)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt})
Best program: (integer_swap in2 exec_eq boolean_xor boolean_or boolean_and print_integer exec_when (integer_empty integer_sub exec_pop (exec_k_when_autoconstructing (exec_dup_items in4 integer_min exec_dup_times (boolean_dup_items exec_flush print_newline boolean_swap exec_eq exec_do*range (integer_flush integer_dup_items integer_yank exec_dup (boolean_and integer_empty integer_dup_items in3 boolean_dup boolean_frominteger boolean_frominteger integer_shove exec_dup_items boolean_yankdup integer_mult integer_swap) exec_when (boolean_eq exec_dup_items exec_empty integer_max) exec_y (exec_pop (integer_div exec_swap (integer_add integer_yank) (boolean_or boolean_frominteger exec_k (integer_mult) (integer_mult in1 boolean_frominteger integer_swap boolean_dup_times integer_sub exec_s (exec_k (exec_y_when_autoconstructing (print_exec (boolean_yank integer_mult) integer_gt) integer_dup_items exec_s () (exec_do*range () exec_empty) (exec_swap (integer_sub boolean_dup_items integer_gt) ())) ()) () ()))))))) ())))
Errors: [1 0 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 74
Size: 102
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.982
Median total errors in population: 7
Error averages by case: (0.999 0.793 0.921 0.791 0.793 0.685 0.396 0.684 0.999 0.921)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.858
Average program size in population (points): 79.612
Average percent parens in population: 0.319
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 753740
--- Timings ---
Current time: 1559594115124 milliseconds
Total Time:           4.1 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         1.9 seconds, 45.3%
Fitness Testing:      1.8 seconds, 44.3%
Report:               0.3 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 14                  | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: 53                 
Correct output: -29                 | Program output: 25                 
Correct output: 57                  | Program output: 94                 
Correct output: -64                 | Program output: 35                 
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 74                 
Correct output: 11                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 26                 
Correct output: 59                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 29                 
Correct output: 35                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 89                 
Correct output: 21                  | Program output: 64                 
Correct output: 5                   | Program output: 78                 
Correct output: 14                  | Program output: 79                 
Correct output: 9                   | Program output: 9                  
Correct output: 27                  | Program output: 27                 
Correct output: 63                  | Program output: 87                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 74                 
Correct output: -79                 | Program output: -21                
Correct output: -82                 | Program output: 22                 
Correct output: -97                 | Program output: 84                 
Correct output: -48                 | Program output: 48                 
Correct output: -38                 | Program output: -38                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: 18                 
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -32                 | Program output: -2                 
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output: 67                 
Correct output: -60                 | Program output: 89                 
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -58                 | Program output: -16                
Correct output: -77                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: 25                  | Program output: 70                 
Correct output: -70                 | Program output: 82                 
Correct output: -32                 | Program output: 7                  
Correct output: -89                 | Program output: 67                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: 6                   | Program output: 55                 
Correct output: -92                 | Program output: 86                 
Correct output: -99                 | Program output: 14                 
Correct output: -83                 | Program output: -83                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -99                 | Program output: -87                
Correct output: 7                   | Program output: 7                  
Correct output: -31                 | Program output: 37                 
Correct output: -84                 | Program output: -70                
Correct output: 28                  | Program output: 28                 
Correct output: 46                  | Program output: 75                 
Correct output: -88                 | Program output: 78                 
Correct output: -54                 | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: -81                 | Program output: 87                 
Correct output: 13                  | Program output: 56                 
Correct output: -23                 | Program output: -6                 
Correct output: -74                 | Program output: -3                 
Correct output: -78                 | Program output: 81                 
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: -20                
Correct output: -92                 | Program output: 16                 
Correct output: -58                 | Program output: 87                 
Correct output: -72                 | Program output: 93                 
Correct output: -96                 | Program output: 59                 
Correct output: -69                 | Program output: 56                 
Correct output: -48                 | Program output: 5                  
Correct output: -92                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yank} {:close 2, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_538} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_shove (integer_dup_times) exec_k () (exec_k_when_autoconstructing () (integer_empty boolean_eq) integer_max integer_rot exec_stackdepth boolean_flush) integer_dup in4 boolean_yankdup boolean_dup boolean_flush exec_k () () boolean_pop exec_eq print_integer integer_shove in3 exec_s (boolean_shove print_integer integer_lt exec_shove (exec_do*while (integer_stackdepth exec_dup_items) print_boolean exec_k_when_autoconstructing (integer_eq) (integer_lt) boolean_dup integer_dup_times exec_do*range (boolean_or boolean_dup boolean_rot integer_add boolean_yank) exec_empty)) (exec_while () print_boolean exec_empty integer_dup integer_div tagged_538 exec_shove () exec_flush boolean_frominteger exec_empty exec_y_when_autoconstructing (integer_yank) boolean_dup_times exec_y_when_autoconstructing () exec_flush boolean_yankdup) (boolean_dup_items integer_yank) boolean_not exec_y_when_autoconstructing () integer_add integer_pop exec_k (integer_mult boolean_invert_first_then_and) ())
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 90
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yank} {:close 2, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_538} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_shove (integer_dup_times) exec_k () (exec_k_when_autoconstructing () (integer_empty boolean_eq) integer_max integer_rot exec_stackdepth boolean_flush) integer_dup in4 boolean_yankdup boolean_dup boolean_flush exec_k () () boolean_pop exec_eq print_integer integer_shove in3 exec_s (boolean_shove print_integer integer_lt exec_shove (exec_do*while (integer_stackdepth exec_dup_items) print_boolean exec_k_when_autoconstructing (integer_eq) (integer_lt) boolean_dup integer_dup_times exec_do*range (boolean_or boolean_dup boolean_rot integer_add boolean_yank) exec_empty)) (exec_while () print_boolean exec_empty integer_dup integer_div tagged_538 exec_shove () exec_flush boolean_frominteger exec_empty exec_y_when_autoconstructing (integer_yank) boolean_dup_times exec_y_when_autoconstructing () exec_flush boolean_yankdup) (boolean_dup_items integer_yank) boolean_not exec_y_when_autoconstructing () integer_add integer_pop exec_k (integer_mult boolean_invert_first_then_and) ())
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 90
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (61 444 62 61 250 472 133 249 160 133)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (61 444 62 61 250 472 133 249 160 133)
Population mean number of perfect (error zero) cases: 2.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_538} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -29} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_shove (exec_k () (integer_empty boolean_eq) integer_max integer_rot boolean_flush) integer_dup in4 boolean_yankdup boolean_dup boolean_flush exec_k () () exec_y_when_autoconstructing (exec_eq print_integer integer_shove) in3 exec_s (boolean_shove print_integer integer_lt integer_stackdepth exec_shove (exec_do*while (integer_stackdepth exec_dup_items) exec_k_when_autoconstructing (integer_eq) (integer_lt) boolean_dup integer_dup_times exec_do*range (boolean_or boolean_dup integer_div boolean_rot integer_add exec_empty)) integer_pop exec_while () boolean_xor print_boolean exec_empty integer_div tagged_538 exec_shove () exec_flush boolean_frominteger integer_dup_items exec_empty exec_y_when_autoconstructing (integer_yank) boolean_dup_times exec_y_when_autoconstructing () exec_dup_times (exec_flush boolean_yankdup) integer_yank) (boolean_not exec_y_when_autoconstructing () integer_pop exec_k (exec_do*range (integer_stackdepth -29 integer_mult boolean_invert_first_then_and)) ()) ())
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 68
Size: 92
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.975
Median total errors in population: 8
Error averages by case: (0.939 0.556 0.938 0.939 0.75 0.528 0.867 0.751 0.84 0.867)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.914
Average program size in population (points): 87.722
Average percent parens in population: 0.293
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1076495
--- Timings ---
Current time: 1559594117190 milliseconds
Total Time:           6.0 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         3.1 seconds, 51.5%
Fitness Testing:      2.3 seconds, 37.4%
Report:               0.6 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 14                  | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: 53                 
Correct output: -29                 | Program output: 25                 
Correct output: 57                  | Program output: 94                 
Correct output: -64                 | Program output: 35                 
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 74                 
Correct output: 11                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 26                 
Correct output: 59                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 29                 
Correct output: 35                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 89                 
Correct output: 21                  | Program output: 64                 
Correct output: 5                   | Program output: 78                 
Correct output: 14                  | Program output: 79                 
Correct output: 9                   | Program output: 9                  
Correct output: 27                  | Program output: 27                 
Correct output: 63                  | Program output: 87                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 74                 
Correct output: -79                 | Program output: -21                
Correct output: -82                 | Program output: 22                 
Correct output: -97                 | Program output: 84                 
Correct output: -48                 | Program output: 48                 
Correct output: -38                 | Program output: -38                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: 18                 
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -32                 | Program output: -2                 
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output: 67                 
Correct output: -60                 | Program output: 89                 
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -58                 | Program output: -16                
Correct output: -77                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: 25                  | Program output: 70                 
Correct output: -70                 | Program output: 82                 
Correct output: -32                 | Program output: 7                  
Correct output: -89                 | Program output: 67                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: 6                   | Program output: 55                 
Correct output: -92                 | Program output: 86                 
Correct output: -99                 | Program output: 14                 
Correct output: -83                 | Program output: -83                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -99                 | Program output: -87                
Correct output: 7                   | Program output: 7                  
Correct output: -31                 | Program output: 37                 
Correct output: -84                 | Program output: -70                
Correct output: 28                  | Program output: 28                 
Correct output: 46                  | Program output: 75                 
Correct output: -88                 | Program output: 78                 
Correct output: -54                 | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: -81                 | Program output: 87                 
Correct output: 13                  | Program output: 56                 
Correct output: -23                 | Program output: -6                 
Correct output: -74                 | Program output: -3                 
Correct output: -78                 | Program output: 81                 
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: -20                
Correct output: -92                 | Program output: 16                 
Correct output: -58                 | Program output: 87                 
Correct output: -72                 | Program output: 93                 
Correct output: -96                 | Program output: 59                 
Correct output: -69                 | Program output: 56                 
Correct output: -48                 | Program output: 5                  
Correct output: -92                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_538} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction -29} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_shove (exec_k () (exec_k_when_autoconstructing () (boolean_eq) integer_max integer_rot boolean_flush) integer_dup in4 boolean_yankdup boolean_dup exec_k () () exec_y_when_autoconstructing (exec_eq print_integer integer_shove) in3 exec_s (boolean_shove print_integer integer_stackdepth exec_dup_items) (exec_k_when_autoconstructing (integer_eq) (integer_yankdup integer_lt) boolean_dup integer_dup_times exec_do*range (boolean_or boolean_dup boolean_rot integer_add exec_empty)) (integer_pop exec_while () boolean_xor print_boolean exec_empty integer_div tagged_538 exec_shove () exec_flush exec_k_when_autoconstructing () (boolean_frominteger integer_dup_items exec_empty exec_y_when_autoconstructing (integer_yank) integer_dup) exec_y_when_autoconstructing () exec_dup_times (exec_flush boolean_yankdup) integer_yank) exec_y (boolean_not exec_y_when_autoconstructing () integer_pop exec_k (exec_do*range (-29 integer_mult)) ())))
Lexicase best errors: [1 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_538} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction -29} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_shove (exec_k () (exec_k_when_autoconstructing () (boolean_eq) integer_max integer_rot boolean_flush) integer_dup in4 boolean_yankdup boolean_dup exec_k () () exec_y_when_autoconstructing (exec_eq print_integer integer_shove) in3 exec_s (boolean_shove print_integer integer_stackdepth exec_dup_items) (exec_k_when_autoconstructing (integer_eq) (integer_yankdup integer_lt) boolean_dup integer_dup_times exec_do*range (boolean_or boolean_dup boolean_rot integer_add exec_empty)) (integer_pop exec_while () boolean_xor print_boolean exec_empty integer_div tagged_538 exec_shove () exec_flush exec_k_when_autoconstructing () (boolean_frominteger integer_dup_items exec_empty exec_y_when_autoconstructing (integer_yank) integer_dup) exec_y_when_autoconstructing () exec_dup_times (exec_flush boolean_yankdup) integer_yank) exec_y (boolean_not exec_y_when_autoconstructing () integer_pop exec_k (exec_do*range (-29 integer_mult)) ())))
Zero cases best errors: [1 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 88 118 115 116 153 183 152 154 117)
Population mean number of elite cases: 1.37
Count of perfect (error zero) individuals by case: (174 88 118 115 116 153 183 152 154 117)
Population mean number of perfect (error zero) cases: 1.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction tagged_538} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction -29} {:close 2, :instruction in4} {:close 1, :instruction tag_boolean_953} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_pop exec_shove (exec_k_when_autoconstructing () (boolean_yank) boolean_dup_times) boolean_eq integer_max integer_rot boolean_yank boolean_invert_first_then_and integer_dup in4 boolean_yankdup boolean_flush integer_lt integer_gte exec_k () () exec_eq print_integer in3 exec_s (print_integer exec_shove (integer_lt exec_shove (integer_max exec_dup_items) boolean_dup_items exec_k_when_autoconstructing (integer_eq) (integer_lt) boolean_dup exec_do*range (boolean_or boolean_dup boolean_rot integer_add integer_min integer_pop exec_while () boolean_xor exec_noop integer_div in2 tagged_538 boolean_swap exec_shove () boolean_frominteger integer_dup_items exec_empty exec_y_when_autoconstructing (integer_yank) boolean_dup_times integer_mult exec_y_when_autoconstructing () exec_do*count () exec_dup_times (exec_flush boolean_pop) boolean_yankdup) integer_yank) boolean_not exec_y_when_autoconstructing () integer_min integer_pop exec_k (exec_do*range (-29 in4)) (tag_boolean_953) integer_mult boolean_invert_first_then_and) () ())
Errors: [1 1 0 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 72
Size: 96
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.63
Median total errors in population: 9
Error averages by case: (0.826 0.912 0.882 0.885 0.884 0.847 0.817 0.848 0.846 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.476
Average program size in population (points): 89.36
Average percent parens in population: 0.283
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1445056
--- Timings ---
Current time: 1559594119178 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.3 seconds, 53.4%
Fitness Testing:      2.7 seconds, 33.5%
Report:               0.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 14                  | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: 53                 
Correct output: -29                 | Program output: 25                 
Correct output: 57                  | Program output: 94                 
Correct output: -64                 | Program output: 35                 
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 74                 
Correct output: 11                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 26                 
Correct output: 59                  | Program output: 92                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 29                 
Correct output: 35                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 89                 
Correct output: 21                  | Program output: 64                 
Correct output: 5                   | Program output: 78                 
Correct output: 14                  | Program output: 79                 
Correct output: 9                   | Program output: 9                  
Correct output: 27                  | Program output: 27                 
Correct output: 63                  | Program output: 87                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 74                 
Correct output: -79                 | Program output: -21                
Correct output: -82                 | Program output: 22                 
Correct output: -97                 | Program output: 84                 
Correct output: -48                 | Program output: 48                 
Correct output: -38                 | Program output: -38                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: 18                 
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -32                 | Program output: -2                 
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output: 67                 
Correct output: -60                 | Program output: 89                 
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -58                 | Program output: -16                
Correct output: -77                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: 25                  | Program output: 70                 
Correct output: -70                 | Program output: 82                 
Correct output: -32                 | Program output: 7                  
Correct output: -89                 | Program output: 67                 
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: 6                   | Program output: 55                 
Correct output: -92                 | Program output: 86                 
Correct output: -99                 | Program output: 14                 
Correct output: -83                 | Program output: -83                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -99                 | Program output: -87                
Correct output: 7                   | Program output: 7                  
Correct output: -31                 | Program output: 37                 
Correct output: -84                 | Program output: -70                
Correct output: 28                  | Program output: 28                 
Correct output: 46                  | Program output: 75                 
Correct output: -88                 | Program output: 78                 
Correct output: -54                 | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: -81                 | Program output: 87                 
Correct output: 13                  | Program output: 56                 
Correct output: -23                 | Program output: -6                 
Correct output: -74                 | Program output: -3                 
Correct output: -78                 | Program output: 81                 
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: -20                
Correct output: -92                 | Program output: 16                 
Correct output: -58                 | Program output: 87                 
Correct output: -72                 | Program output: 93                 
Correct output: -96                 | Program output: 59                 
Correct output: -69                 | Program output: 56                 
Correct output: -48                 | Program output: 5                  
Correct output: -92                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_583} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_shove (integer_mult boolean_flush exec_k () (exec_k_when_autoconstructing () (boolean_eq) integer_rot tagged_583 boolean_flush) integer_dup in4 boolean_yankdup boolean_dup boolean_flush exec_k () () exec_y_when_autoconstructing (exec_eq integer_shove) integer_dup_times) in3 exec_s (boolean_shove print_integer integer_lt exec_shove (exec_do*while (integer_yank integer_stackdepth exec_dup_items) integer_eq) integer_dup_times integer_lt) (integer_min boolean_dup integer_dup_times exec_do*range (boolean_or boolean_dup boolean_rot exec_k_when_autoconstructing () (boolean_flush integer_add exec_empty)) integer_pop boolean_not) (exec_swap (integer_dec) (integer_div exec_flush boolean_frominteger integer_dup_items exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_yank) boolean_dup_times exec_dup_times (exec_flush boolean_yankdup) boolean_not exec_y_when_autoconstructing () integer_dup_items integer_pop exec_do*range (integer_mult exec_k_when_autoconstructing () ())))))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 91
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_583} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_shove (integer_mult boolean_flush exec_k () (exec_k_when_autoconstructing () (boolean_eq) integer_rot tagged_583 boolean_flush) integer_dup in4 boolean_yankdup boolean_dup boolean_flush exec_k () () exec_y_when_autoconstructing (exec_eq integer_shove) integer_dup_times) in3 exec_s (boolean_shove print_integer integer_lt exec_shove (exec_do*while (integer_yank integer_stackdepth exec_dup_items) integer_eq) integer_dup_times integer_lt) (integer_min boolean_dup integer_dup_times exec_do*range (boolean_or boolean_dup boolean_rot exec_k_when_autoconstructing () (boolean_flush integer_add exec_empty)) integer_pop boolean_not) (exec_swap (integer_dec) (integer_div exec_flush boolean_frominteger integer_dup_items exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_yank) boolean_dup_times exec_dup_times (exec_flush boolean_yankdup) boolean_not exec_y_when_autoconstructing () integer_dup_items integer_pop exec_do*range (integer_mult exec_k_when_autoconstructing () ())))))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 91
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 57 133 133 163 131 94 131 133 145)
Population mean number of elite cases: 1.35
Count of perfect (error zero) individuals by case: (229 57 133 133 163 131 94 131 133 145)
Population mean number of perfect (error zero) cases: 1.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_538} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction -29} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items})
Best program: (exec_shove (integer_gte) exec_k () (exec_k_when_autoconstructing () (integer_empty exec_yank boolean_eq) integer_rot boolean_flush) integer_dup exec_y (in4 boolean_dup boolean_rot boolean_flush exec_k () () exec_y_when_autoconstructing (exec_eq print_integer integer_shove) integer_lte in3 exec_s (boolean_shove print_integer integer_gt integer_lt exec_do*while (integer_sub integer_lt boolean_not boolean_empty integer_lt) boolean_empty boolean_dup integer_dup_times boolean_dup boolean_rot integer_add exec_flush exec_empty) () (integer_pop integer_pop exec_while () print_boolean exec_empty integer_div tagged_538 exec_shove () exec_eq integer_dup_items exec_y_when_autoconstructing (boolean_dup_times exec_y_when_autoconstructing () boolean_swap exec_flush boolean_yankdup) integer_yank) exec_y_when_autoconstructing () exec_k (exec_do*range (-29 integer_yankdup integer_mult boolean_dup_items)) ()))
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 65
Size: 87
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 8.651
Median total errors in population: 9
Error averages by case: (0.771 0.943 0.867 0.867 0.837 0.869 0.906 0.869 0.867 0.855)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.908
Average program size in population (points): 93.236
Average percent parens in population: 0.276
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1972927
--- Timings ---
Current time: 1559594121149 milliseconds
Total Time:          10.0 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.5 seconds, 54.5%
Fitness Testing:      3.1 seconds, 31.1%
Report:               1.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 695
Test mean error for best: 0.69500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output:                    
Correct output: -29                 | Program output: 25                 
Correct output: 57                  | Program output:                    
Correct output: -64                 | Program output:                    
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output:                    
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output:                    
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output:                    
Correct output: 11                  | Program output: 27                 
Correct output: 19                  | Program output: 24                 
Correct output: 18                  | Program output: 18                 
Correct output: 59                  | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output:                    
Correct output: 17                  | Program output: 72                 
Correct output: 4                   | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 5                   | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: 9                   | Program output: 92                 
Correct output: 27                  | Program output: 36                 
Correct output: 63                  | Program output:                    
Correct output: 25                  | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output:                    
Correct output: -79                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output:                    
Correct output: -48                 | Program output:                    
Correct output: -38                 | Program output: -38                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -32                 | Program output: -2                 
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output:                    
Correct output: -60                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -58                 | Program output: -16                
Correct output: -77                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: 25                  | Program output:                    
Correct output: -70                 | Program output:                    
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output:                    
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output:                    
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: 6                   | Program output:                    
Correct output: -92                 | Program output:                    
Correct output: -99                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -99                 | Program output: -87                
Correct output: 7                   | Program output: 94                 
Correct output: -31                 | Program output:                    
Correct output: -84                 | Program output: -70                
Correct output: 28                  | Program output: 69                 
Correct output: 46                  | Program output:                    
Correct output: -88                 | Program output:                    
Correct output: -54                 | Program output: 23                 
Correct output: 5                   | Program output: 60                 
Correct output: -81                 | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: -23                 | Program output: -6                 
Correct output: -74                 | Program output: -3                 
Correct output: -78                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: -20                
Correct output: -92                 | Program output: -49                
Correct output: -58                 | Program output:                    
Correct output: -72                 | Program output:                    
Correct output: -96                 | Program output:                    
Correct output: -69                 | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -92                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in2 in1 exec_noop in4 exec_eq integer_dup_items boolean_xor integer_dup integer_dup_items exec_do*times () print_integer boolean_rot boolean_shove exec_pop (exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items boolean_stackdepth exec_flush exec_dup_times (print_newline exec_do*range (integer_fromboolean exec_y (boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) in3 exec_s_when_autoconstructing (exec_eq boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_empty integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult boolean_eq exec_empty integer_max) exec_y (integer_mult integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) integer_mult boolean_yankdup in1 boolean_frominteger integer_swap boolean_dup_times integer_sub boolean_flush exec_k (integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_empty) exec_while (integer_lte integer_min boolean_dup_items)) ()) ())))))
Lexicase best errors: [0 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in2 in1 exec_noop in4 exec_eq integer_dup_items boolean_xor integer_dup integer_dup_items exec_do*times () print_integer boolean_rot boolean_shove exec_pop (exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items boolean_stackdepth exec_flush exec_dup_times (print_newline exec_do*range (integer_fromboolean exec_y (boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) in3 exec_s_when_autoconstructing (exec_eq boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_empty integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult boolean_eq exec_empty integer_max) exec_y (integer_mult integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) integer_mult boolean_yankdup in1 boolean_frominteger integer_swap boolean_dup_times integer_sub boolean_flush exec_k (integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_empty) exec_while (integer_lte integer_min boolean_dup_items)) ()) ())))))
Zero cases best errors: [0 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 178 100 89 201 175 235 226 234 233)
Population mean number of elite cases: 1.93
Count of perfect (error zero) individuals by case: (255 178 100 89 201 175 235 226 234 233)
Population mean number of perfect (error zero) cases: 1.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items})
Best program: (in2 in1 exec_noop in4 exec_eq integer_dup_items boolean_xor integer_dup integer_dup_items exec_do*times () print_integer boolean_rot boolean_shove exec_pop (exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items boolean_stackdepth exec_flush exec_dup_times (print_newline exec_do*range (integer_fromboolean exec_y (boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) in3 exec_s_when_autoconstructing (exec_eq boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_empty integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult boolean_eq exec_empty integer_max) exec_y (integer_mult integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) integer_mult boolean_yankdup in1 boolean_frominteger integer_swap boolean_dup_times integer_sub boolean_flush exec_k (integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_empty) exec_while (integer_lte integer_min boolean_dup_items)) ()) ())))))
Errors: [0 1 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 78
Size: 98
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 8.074
Median total errors in population: 9
Error averages by case: (0.745 0.822 0.9 0.911 0.799 0.825 0.765 0.774 0.766 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.857
Average program size in population (points): 93.927
Average percent parens in population: 0.269
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2427971
--- Timings ---
Current time: 1559594123214 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 55.4%
Fitness Testing:      3.6 seconds, 29.5%
Report:               1.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 696
Test mean error for best: 0.69600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output:                    
Correct output: -29                 | Program output: 25                 
Correct output: 57                  | Program output:                    
Correct output: -64                 | Program output:                    
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output:                    
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output:                    
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output:                    
Correct output: 11                  | Program output: 37                 
Correct output: 19                  | Program output: 59                 
Correct output: 18                  | Program output: 86                 
Correct output: 59                  | Program output:                    
Correct output: 1                   | Program output: 62                 
Correct output: 9                   | Program output: 62                 
Correct output: 35                  | Program output:                    
Correct output: 17                  | Program output: 59                 
Correct output: 4                   | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 5                   | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: 9                   | Program output: 89                 
Correct output: 27                  | Program output: 67                 
Correct output: 63                  | Program output:                    
Correct output: 25                  | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: 1                   | Program output: 6                  
Correct output: 13                  | Program output:                    
Correct output: -79                 | Program output: -21                
Correct output: -82                 | Program output: 89                 
Correct output: -97                 | Program output:                    
Correct output: -48                 | Program output:                    
Correct output: -38                 | Program output: -38                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -32                 | Program output: -2                 
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output:                    
Correct output: -60                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -69                
Correct output: -86                 | Program output: -86                
Correct output: -58                 | Program output: -16                
Correct output: -77                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: 25                  | Program output:                    
Correct output: -70                 | Program output:                    
Correct output: -32                 | Program output: 70                 
Correct output: -89                 | Program output:                    
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output:                    
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: 6                   | Program output:                    
Correct output: -92                 | Program output:                    
Correct output: -99                 | Program output: 74                 
Correct output: -83                 | Program output: -83                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -99                 | Program output: -87                
Correct output: 7                   | Program output: 34                 
Correct output: -31                 | Program output:                    
Correct output: -84                 | Program output: -70                
Correct output: 28                  | Program output: 46                 
Correct output: 46                  | Program output:                    
Correct output: -88                 | Program output:                    
Correct output: -54                 | Program output: -45                
Correct output: 5                   | Program output: 37                 
Correct output: -81                 | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: -23                 | Program output: -6                 
Correct output: -74                 | Program output: -3                 
Correct output: -78                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: -20                
Correct output: -92                 | Program output: 52                 
Correct output: -58                 | Program output:                    
Correct output: -72                 | Program output:                    
Correct output: -96                 | Program output:                    
Correct output: -69                 | Program output:                    
Correct output: -48                 | Program output: 83                 
Correct output: -92                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min})
Lexicase best program: (integer_swap in2 exec_noop in4 exec_eq boolean_xor integer_dup_items exec_do*times () print_integer boolean_rot exec_when (exec_pop (exec_dup_items exec_yankdup in2) exec_dup_times (boolean_dup_items in1 exec_flush exec_dup_times (print_newline integer_fromboolean boolean_invert_first_then_and exec_dup_items boolean_stackdepth) integer_dec) exec_s_when_autoconstructing (boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (boolean_dup_times exec_s (integer_dup integer_dup_items boolean_dup boolean_frominteger boolean_frominteger integer_shove integer_mult exec_when (boolean_eq exec_empty integer_max) boolean_flush exec_y (integer_add boolean_dup_items) boolean_or boolean_frominteger boolean_invert_first_then_and integer_mod exec_k (integer_mult) (integer_mult boolean_yankdup in1 exec_dup_times (boolean_frominteger integer_swap boolean_dup_times integer_sub boolean_flush exec_k (exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) exec_do*count (integer_rot boolean_yankdup exec_do*range () exec_empty) exec_while (integer_lte integer_min))) ()))) () ())) ()))
Lexicase best errors: [0 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 101
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min})
Zero cases best program: (integer_swap in2 exec_noop in4 exec_eq boolean_xor integer_dup_items exec_do*times () print_integer boolean_rot exec_when (exec_pop (exec_dup_items exec_yankdup in2) exec_dup_times (boolean_dup_items in1 exec_flush exec_dup_times (print_newline integer_fromboolean boolean_invert_first_then_and exec_dup_items boolean_stackdepth) integer_dec) exec_s_when_autoconstructing (boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (boolean_dup_times exec_s (integer_dup integer_dup_items boolean_dup boolean_frominteger boolean_frominteger integer_shove integer_mult exec_when (boolean_eq exec_empty integer_max) boolean_flush exec_y (integer_add boolean_dup_items) boolean_or boolean_frominteger boolean_invert_first_then_and integer_mod exec_k (integer_mult) (integer_mult boolean_yankdup in1 exec_dup_times (boolean_frominteger integer_swap boolean_dup_times integer_sub boolean_flush exec_k (exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) exec_do*count (integer_rot boolean_yankdup exec_do*range () exec_empty) exec_while (integer_lte integer_min))) ()))) () ())) ()))
Zero cases best errors: [0 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 101
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 736 280 347 226 235 8 274 24 45)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (277 736 280 347 226 235 8 274 24 45)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items})
Best program: (integer_swap in2 in1 integer_swap exec_noop in4 exec_eq boolean_xor integer_dup_items exec_do*times () print_integer exec_k_when_autoconstructing (boolean_shove exec_when (exec_pop (in1 exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items boolean_stackdepth exec_flush integer_fromboolean)) print_newline integer_fromboolean boolean_shove exec_k_when_autoconstructing (exec_y (exec_dup (boolean_flush boolean_invert_first_then_and integer_empty exec_dup_items integer_dec) print_integer integer_rot boolean_or boolean_invert_first_then_and) exec_dup (exec_do*count (boolean_dup_times integer_empty integer_dup_items boolean_dup boolean_frominteger boolean_frominteger exec_y_when_autoconstructing (integer_shove integer_mult exec_when (boolean_eq exec_empty integer_max) integer_add integer_yank) boolean_frominteger integer_mod exec_k (integer_mult) (integer_mult boolean_frominteger in1 boolean_frominteger exec_s_when_autoconstructing (boolean_dup_times integer_sub boolean_flush exec_yankdup exec_k (boolean_yankdup print_exec (integer_gt) boolean_dup) (integer_rot in3 boolean_yankdup integer_lte) integer_empty exec_empty) (exec_while (integer_lte boolean_dup_items)) ())))) ())) ())
Errors: [0 0 0 1 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 82
Size: 106
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.548
Median total errors in population: 7
Error averages by case: (0.723 0.264 0.72 0.653 0.774 0.765 0.992 0.726 0.976 0.955)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.263
Average program size in population (points): 99.168
Average percent parens in population: 0.230
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3061714
--- Timings ---
Current time: 1559594125236 milliseconds
Total Time:          14.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.8 seconds, 55.6%
Fitness Testing:      4.1 seconds, 28.8%
Report:               2.1 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 700
Test mean error for best: 0.70000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output:                    
Correct output: -29                 | Program output: -29                
Correct output: 57                  | Program output:                    
Correct output: -64                 | Program output:                    
Correct output: -42                 | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output:                    
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 61                 
Correct output: 11                  | Program output: 27                 
Correct output: 19                  | Program output:                    
Correct output: 18                  | Program output: 18                 
Correct output: 59                  | Program output:                    
Correct output: 1                   | Program output:                    
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output:                    
Correct output: 17                  | Program output:                    
Correct output: 4                   | Program output: 15                 
Correct output: 21                  | Program output:                    
Correct output: 5                   | Program output: 5                  
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 89                 
Correct output: 27                  | Program output:                    
Correct output: 63                  | Program output:                    
Correct output: 25                  | Program output:                    
Correct output: 15                  | Program output: 36                 
Correct output: 1                   | Program output: 62                 
Correct output: 13                  | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -66                
Correct output: -97                 | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -38                 | Program output:                    
Correct output: -20                 | Program output:                    
Correct output: -80                 | Program output:                    
Correct output: -85                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output: -15                
Correct output: -60                 | Program output: -29                
Correct output: -90                 | Program output: -16                
Correct output: -69                 | Program output: -32                
Correct output: -86                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -90                
Correct output: 25                  | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output:                    
Correct output: -33                 | Program output: -8                 
Correct output: 36                  | Program output:                    
Correct output: -47                 | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: 6                   | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -31                
Correct output: -66                 | Program output: 17                 
Correct output: -7                  | Program output:                    
Correct output: -99                 | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: -31                 | Program output:                    
Correct output: -84                 | Program output: -56                
Correct output: 28                  | Program output:                    
Correct output: 46                  | Program output:                    
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: 13                  | Program output:                    
Correct output: -23                 | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output:                    
Correct output: -90                 | Program output:                    
Correct output: -28                 | Program output:                    
Correct output: -73                 | Program output:                    
Correct output: -90                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -92                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min})
Lexicase best program: (in2 in1 exec_noop in4 integer_dup_items boolean_xor integer_dup integer_dup_items integer_min in3 exec_do*times () print_integer exec_y_when_autoconstructing (boolean_rot exec_y_when_autoconstructing (boolean_shove exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items boolean_stackdepth exec_flush exec_dup_times (print_newline exec_do*range (integer_fromboolean exec_y (integer_shove boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) in3 exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_empty integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger integer_shove integer_mult boolean_eq exec_empty integer_max) exec_y (integer_mult integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup in1 boolean_frominteger boolean_dup_times boolean_flush exec_k (integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup exec_s_when_autoconstructing () (integer_gt) (integer_gt boolean_yankdup exec_do*range () exec_empty) exec_while (integer_shove integer_lte integer_min))) ()) ()))))))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 102
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min})
Zero cases best program: (in2 in1 exec_noop in4 integer_dup_items boolean_xor integer_dup integer_dup_items integer_min in3 exec_do*times () print_integer exec_y_when_autoconstructing (boolean_rot exec_y_when_autoconstructing (boolean_shove exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items boolean_stackdepth exec_flush exec_dup_times (print_newline exec_do*range (integer_fromboolean exec_y (integer_shove boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) in3 exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_empty integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger integer_shove integer_mult boolean_eq exec_empty integer_max) exec_y (integer_mult integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup in1 boolean_frominteger boolean_dup_times boolean_flush exec_k (integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup exec_s_when_autoconstructing () (integer_gt) (integer_gt boolean_yankdup exec_do*range () exec_empty) exec_while (integer_shove integer_lte integer_min))) ()) ()))))))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 102
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 246 654 107 291 115 115 117 101 56)
Population mean number of elite cases: 1.99
Count of perfect (error zero) individuals by case: (185 246 654 107 291 115 115 117 101 56)
Population mean number of perfect (error zero) cases: 1.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min})
Best program: (in2 in1 exec_noop in4 integer_dup_items boolean_xor integer_dup integer_dup_items integer_min in3 exec_do*times () print_integer exec_y_when_autoconstructing (boolean_rot exec_y_when_autoconstructing (boolean_shove exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items boolean_stackdepth exec_flush exec_dup_times (print_newline exec_do*range (integer_fromboolean exec_y (integer_shove boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) in3 exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_empty integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger integer_shove integer_mult boolean_eq exec_empty integer_max) exec_y (integer_mult integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup in1 boolean_frominteger boolean_dup_times boolean_flush exec_k (integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup exec_s_when_autoconstructing () (integer_gt) (integer_gt boolean_yankdup exec_do*range () exec_empty) exec_while (integer_shove integer_lte integer_min))) ()) ()))))))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 79
Size: 102
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 8.013
Median total errors in population: 8
Error averages by case: (0.815 0.754 0.346 0.893 0.709 0.885 0.885 0.883 0.899 0.944)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.602
Average program size in population (points): 100.445
Average percent parens in population: 0.247
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3596207
--- Timings ---
Current time: 1559594127253 milliseconds
Total Time:          16.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 55.9%
Fitness Testing:      4.5 seconds, 28.0%
Report:               2.5 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: -74                
Correct output: -29                 | Program output: -29                
Correct output: 57                  | Program output: 57                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: 58                 
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 24                 
Correct output: 18                  | Program output: 18                 
Correct output: 59                  | Program output: 63                 
Correct output: 1                   | Program output: 52                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 43                 
Correct output: 17                  | Program output: 35                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 16                 
Correct output: 27                  | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: 25                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 11                 
Correct output: 13                  | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -97                
Correct output: -48                 | Program output: -48                
Correct output: -38                 | Program output: 60                 
Correct output: -20                 | Program output: 11                 
Correct output: -80                 | Program output: -28                
Correct output: -85                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 11                 
Correct output: -32                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output: -15                
Correct output: -60                 | Program output: -29                
Correct output: -90                 | Program output: -16                
Correct output: -69                 | Program output: -32                
Correct output: -86                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -90                
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -58                
Correct output: -33                 | Program output: -8                 
Correct output: 36                  | Program output: 36                 
Correct output: -47                 | Program output: 8                  
Correct output: -76                 | Program output: 59                 
Correct output: 6                   | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -31                
Correct output: -66                 | Program output: 12                 
Correct output: -7                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 36                 
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: 28                  | Program output: 44                 
Correct output: 46                  | Program output: 78                 
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 60                 
Correct output: -81                 | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -23                 | Program output: 18                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 20                 
Correct output: -28                 | Program output: 7                  
Correct output: -73                 | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: -48                
Correct output: -92                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction 61} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (in2 in1 exec_noop in4 integer_min exec_eq boolean_xor boolean_frominteger integer_dup integer_dup_items integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) boolean_shove exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items exec_flush exec_dup_times (boolean_dup_times exec_y (boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) in3 boolean_dup_items) integer_swap exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_gte) boolean_eq exec_empty 61 integer_max) exec_y (exec_yankdup integer_mult integer_yank) boolean_or boolean_or integer_pop integer_mult) (boolean_yankdup boolean_frominteger boolean_flush boolean_xor integer_fromboolean exec_y_when_autoconstructing (exec_yank boolean_yankdup exec_s_when_autoconstructing () (boolean_dup_items integer_gt) (boolean_yankdup exec_do*range () exec_empty) exec_if (exec_while (integer_shove integer_lte)) ()))))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 99
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction 61} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (in2 in1 exec_noop in4 integer_min exec_eq boolean_xor boolean_frominteger integer_dup integer_dup_items integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) boolean_shove exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items exec_flush exec_dup_times (boolean_dup_times exec_y (boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) in3 boolean_dup_items) integer_swap exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_gte) boolean_eq exec_empty 61 integer_max) exec_y (exec_yankdup integer_mult integer_yank) boolean_or boolean_or integer_pop integer_mult) (boolean_yankdup boolean_frominteger boolean_flush boolean_xor integer_fromboolean exec_y_when_autoconstructing (exec_yank boolean_yankdup exec_s_when_autoconstructing () (boolean_dup_items integer_gt) (boolean_yankdup exec_do*range () exec_empty) exec_if (exec_while (integer_shove integer_lte)) ()))))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 99
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 167 29 336 107 190 445 364 155 134)
Population mean number of elite cases: 2.16
Count of perfect (error zero) individuals by case: (232 167 29 336 107 190 445 364 155 134)
Population mean number of perfect (error zero) cases: 2.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction 61} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Best program: (in2 in1 exec_noop in3 in4 exec_eq boolean_xor integer_dup integer_dup_items integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq exec_empty 61 integer_max) exec_y (exec_yankdup integer_mult integer_yank) boolean_or boolean_or boolean_frominteger integer_pop integer_mult) integer_mult boolean_yankdup boolean_frominteger boolean_dup_times boolean_flush boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (exec_s_when_autoconstructing () (integer_gt) (boolean_yankdup exec_do*range () exec_while (integer_lte)))))) ()))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 79
Size: 100
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 7.841
Median total errors in population: 8
Error averages by case: (0.768 0.833 0.971 0.664 0.893 0.81 0.555 0.636 0.845 0.866)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 78.738
Average program size in population (points): 101.927
Average percent parens in population: 0.227
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4297119
--- Timings ---
Current time: 1559594129196 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.1 seconds, 55.7%
Fitness Testing:      5.0 seconds, 27.8%
Report:               2.9 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 14                  | Program output: 47                 
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: 53                 
Correct output: -29                 | Program output: -29                
Correct output: 57                  | Program output: 57                 
Correct output: -64                 | Program output: 35                 
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 26                 
Correct output: 59                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 23                 
Correct output: 35                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 49                 
Correct output: 5                   | Program output: 23                 
Correct output: 14                  | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: 27                  | Program output: 27                 
Correct output: 63                  | Program output: 63                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 74                 
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -66                
Correct output: -97                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -38                 | Program output: -38                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: 18                 
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -32                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output: -15                
Correct output: -60                 | Program output: -29                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 25                  | Program output: 70                 
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: 7                  
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: 6                   | Program output: 55                 
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -99                 | Program output: -87                
Correct output: 7                   | Program output: 7                  
Correct output: -31                 | Program output: 37                 
Correct output: -84                 | Program output: -70                
Correct output: 28                  | Program output: 28                 
Correct output: 46                  | Program output: 75                 
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -81                 | Program output: 18                 
Correct output: 13                  | Program output: 56                 
Correct output: -23                 | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: 81                 
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: 56                 
Correct output: -48                 | Program output: 5                  
Correct output: -92                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (in2 in1 exec_noop in4 integer_min exec_eq boolean_xor boolean_frominteger integer_dup integer_dup_items integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) boolean_shove exec_yankdup exec_dup_times (boolean_dup_items exec_flush) exec_flush boolean_empty exec_dup_times (exec_y (boolean_invert_first_then_and exec_dup_items integer_flush in3 in1 integer_swap exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or boolean_invert_first_then_and) (integer_min) (integer_dup_items exec_dup (exec_do*range (boolean_stackdepth integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_gte) boolean_eq exec_empty boolean_stackdepth integer_max) exec_y (exec_yankdup integer_mult integer_yank) boolean_or integer_pop integer_mult) boolean_yankdup boolean_flush boolean_empty integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup exec_s_when_autoconstructing () (boolean_dup_items integer_gt) (boolean_yankdup exec_do*range () exec_empty) exec_if (exec_while (integer_shove integer_lte)) ()))))
Lexicase best errors: [0 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 97
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (in2 in1 exec_noop in4 integer_min exec_eq boolean_xor boolean_frominteger integer_dup integer_dup_items integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) boolean_shove exec_yankdup exec_dup_times (boolean_dup_items exec_flush) exec_flush boolean_empty exec_dup_times (exec_y (boolean_invert_first_then_and exec_dup_items integer_flush in3 in1 integer_swap exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or boolean_invert_first_then_and) (integer_min) (integer_dup_items exec_dup (exec_do*range (boolean_stackdepth integer_dup exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_gte) boolean_eq exec_empty boolean_stackdepth integer_max) exec_y (exec_yankdup integer_mult integer_yank) boolean_or integer_pop integer_mult) boolean_yankdup boolean_flush boolean_empty integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup exec_s_when_autoconstructing () (boolean_dup_items integer_gt) (boolean_yankdup exec_do*range () exec_empty) exec_if (exec_while (integer_shove integer_lte)) ()))))
Zero cases best errors: [0 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 97
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 275 305 291 233 348 336 281 330 268)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (283 275 305 291 233 348 336 281 330 268)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction 61} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_808} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte})
Best program: (in1 exec_noop in3 in4 boolean_and exec_do*while (boolean_xor integer_dup) integer_dup_items integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (boolean_dup_items exec_flush exec_dup_times (integer_rot exec_y (boolean_invert_first_then_and exec_dup_items integer_flush integer_dec) integer_shove in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or exec_dup (integer_empty integer_stackdepth exec_dup (boolean_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_fromboolean)) (integer_gte) (integer_lte exec_empty 61 integer_max) exec_y (exec_yankdup integer_mult integer_yank) boolean_or boolean_or boolean_frominteger integer_pop integer_mult boolean_yankdup boolean_frominteger in1 boolean_dup_times boolean_flush boolean_xor tagged_808 integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup in4 print_exec (exec_s_when_autoconstructing () (integer_gt) (boolean_yankdup exec_do*range () integer_min integer_lte)))))
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 79
Size: 97
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 7.05
Median total errors in population: 7
Error averages by case: (0.717 0.725 0.695 0.709 0.767 0.652 0.664 0.719 0.67 0.732)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.075
Average program size in population (points): 100.632
Average percent parens in population: 0.214
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4713666
--- Timings ---
Current time: 1559594130988 milliseconds
Total Time:          20.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.2 seconds, 56.4%
Fitness Testing:      5.4 seconds, 27.2%
Report:               3.2 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 230
Test mean error for best: 0.23000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: -74                
Correct output: -29                 | Program output: -29                
Correct output: 57                  | Program output: 57                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: 59                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 27                  | Program output: 27                 
Correct output: 63                  | Program output: 63                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -97                
Correct output: -48                 | Program output: -48                
Correct output: -38                 | Program output: -38                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -32                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output: -15                
Correct output: -60                 | Program output: -29                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -32                
Correct output: -86                 | Program output: -86                
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: 6                   | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: 28                  | Program output: 28                 
Correct output: 46                  | Program output: 75                 
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -81                 | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -23                 | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: -48                
Correct output: -92                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction 61} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Lexicase best program: (in2 integer_div in1 exec_noop print_boolean in3 exec_empty in4 boolean_dup exec_eq integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot boolean_dup_items integer_max exec_while (boolean_shove exec_dup_items exec_dup_times (integer_stackdepth boolean_or) boolean_dup_items exec_flush integer_inc exec_dup_times (boolean_and print_newline exec_y_when_autoconstructing (exec_y (boolean_invert_first_then_and boolean_empty exec_dup_items integer_yank integer_flush integer_dec) in3 exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or integer_fromboolean) (boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_empty integer_lt exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_mult exec_eq integer_yank) boolean_xor boolean_or boolean_or boolean_frominteger integer_mult) boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte))))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 103
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction 61} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Zero cases best program: (in2 integer_div in1 exec_noop print_boolean in3 exec_empty in4 boolean_dup exec_eq integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot boolean_dup_items integer_max exec_while (boolean_shove exec_dup_items exec_dup_times (integer_stackdepth boolean_or) boolean_dup_items exec_flush integer_inc exec_dup_times (boolean_and print_newline exec_y_when_autoconstructing (exec_y (boolean_invert_first_then_and boolean_empty exec_dup_items integer_yank integer_flush integer_dec) in3 exec_s_when_autoconstructing (integer_dup_times exec_eq boolean_or integer_fromboolean) (boolean_invert_first_then_and) (integer_dup_items exec_dup (exec_do*range (integer_empty integer_lt exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_mult exec_eq integer_yank) boolean_xor boolean_or boolean_or boolean_frominteger integer_mult) boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte))))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 103
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (666 322 384 466 625 378 304 321 554 333)
Population mean number of elite cases: 4.35
Count of perfect (error zero) individuals by case: (666 322 384 466 625 378 304 321 554 333)
Population mean number of perfect (error zero) cases: 4.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction 61} {:close 1, :instruction integer_max} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte})
Best program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 78
Size: 97
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5.647
Median total errors in population: 5
Error averages by case: (0.334 0.678 0.616 0.534 0.375 0.622 0.696 0.679 0.446 0.667)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 79.342
Average program size in population (points): 100.516
Average percent parens in population: 0.210
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5105995
--- Timings ---
Current time: 1559594132805 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.4 seconds, 56.9%
Fitness Testing:      5.8 seconds, 26.8%
Report:               3.4 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 97


Auto-simplifying with starting size: 97
step: 0
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 500
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 1000
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 1500
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 2000
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 2500
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 3000
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 3500
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 4000
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 4500
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

step: 5000
program: (integer_div in1 exec_noop print_boolean in3 in4 boolean_dup exec_eq boolean_xor integer_rot integer_dup integer_dup_items integer_min integer_min print_integer boolean_rot exec_y_when_autoconstructing (integer_max) in2 boolean_shove exec_dup_items exec_yankdup exec_dup_times (integer_stackdepth boolean_dup_items exec_flush exec_dup_times (print_newline exec_y (boolean_invert_first_then_and exec_flush boolean_empty exec_dup_items integer_flush integer_dec) exec_do*range (in3 boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times boolean_or integer_fromboolean) (integer_dup_items exec_dup (exec_do*range (integer_empty exec_swap (exec_dup (boolean_dup integer_dup integer_inc) boolean_frominteger boolean_frominteger integer_shove integer_mult integer_empty integer_gte) (boolean_eq 61 integer_max) exec_y (integer_yank) boolean_or boolean_frominteger integer_pop integer_mult) boolean_yankdup boolean_dup_times boolean_xor integer_fromboolean exec_y_when_autoconstructing (boolean_yankdup print_exec (integer_gt) boolean_yankdup exec_do*range () exec_while (integer_lte)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 97

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 230
Test mean error for best: 0.23000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -74                 | Program output: -74                
Correct output: -29                 | Program output: -29                
Correct output: 57                  | Program output: 57                 
Correct output: -64                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -44                 | Program output: -44                
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 78                  | Program output: 78                 
Correct output: 13                  | Program output: 13                 
Correct output: -77                 | Program output: -77                
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: 59                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 23                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 27                  | Program output: 27                 
Correct output: 63                  | Program output: 63                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -82                 | Program output: -82                
Correct output: -97                 | Program output: -97                
Correct output: -48                 | Program output: -48                
Correct output: -38                 | Program output: -38                
Correct output: -20                 | Program output: -20                
Correct output: -80                 | Program output: -28                
Correct output: -85                 | Program output: -85                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -32                 | Program output: -32                
Correct output: -81                 | Program output: -81                
Correct output: -15                 | Program output: -15                
Correct output: -60                 | Program output: -29                
Correct output: -90                 | Program output: -90                
Correct output: -69                 | Program output: -32                
Correct output: -86                 | Program output: -86                
Correct output: -58                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: 6                   | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: 28                  | Program output: 28                 
Correct output: 46                  | Program output: 75                 
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -81                 | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -23                 | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: -90                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: -48                
Correct output: -92                 | Program output: -43                
;;******************************
