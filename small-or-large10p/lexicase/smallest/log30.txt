Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-17 -17 -17 -87] -87] [[-68 -40 -40 -40] -68] [[76 76 76 -23] -23] [[56 -61 -61 -61] -61] [[-65 -65 66 -65] -65] [[-61 13 13 13] -61] [[98 98 98 65] 65] [[55 55 55 -61] -61] [[79 79 -20 79] -20] [[97 97 97 -22] -22] [(35 35 35 35) 35] [(-28 -28 -28 -28) -28] [(57 57 57 57) 57] [(22 22 22 22) 22] [(94 94 94 94) 94] [(9 52 53 33) 9] [(82 64 21 18) 18] [(15 83 39 18) 15] [(82 73 29 25) 25] [(93 9 98 16) 9] [(6 4 74 30) 4] [(42 14 52 3) 3] [(28 38 32 46) 28] [(9 27 62 80) 9] [(66 71 89 4) 4] [(42 93 14 72) 14] [(67 32 44 49) 32] [(70 7 45 47) 7] [(45 7 9 57) 7] [(41 100 23 42) 23] [(7 60 24 64) 7] [(71 46 90 13) 13] [(58 69 74 96) 58] [(76 36 15 36) 15] [(40 99 36 92) 36] [(68 -79 -83 -59) -83] [(-86 -24 38 -66) -86] [(-72 35 -88 100) -88] [(-20 -18 -50 27) -50] [(-91 2 -7 -64) -91] [(15 92 -4 92) -4] [(32 -56 59 46) -56] [(-33 -11 -74 -85) -85] [(-55 -59 -54 -80) -80] [(72 -74 85 -10) -74] [(32 50 -11 -69) -69] [(-80 44 -62 -73) -80] [(90 -49 88 42) -49] [(-56 5 56 -64) -64] [(-31 -100 32 -71) -100] [(82 -30 -85 17) -85] [(99 53 82 -42) -42] [(-83 -75 -52 -62) -83] [(40 -19 62 -76) -76] [(-87 -29 37 28) -87] [(-38 62 24 -62) -62] [(80 14 -6 -21) -21] [(21 -91 31 -45) -91] [(96 -59 -71 -18) -71] [(19 -87 99 -85) -87] [(-64 -83 -85 -41) -85] [(93 62 -96 -79) -96] [(-60 82 -76 -88) -88] [(98 24 -1 62) -1] [(77 83 20 -59) -59] [(-50 -58 -19 -63) -63] [(-10 -45 -4 10) -45] [(60 -91 -17 -73) -91] [(13 76 -57 16) -57] [(-48 42 -69 76) -69] [(81 -55 -92 66) -92] [(15 -45 -100 86) -100] [(-67 -40 -56 77) -67] [(62 35 -9 -45) -45] [(13 75 -5 -39) -39] [(24 -85 55 -9) -85] [(53 86 19 65) 19] [(-65 -3 -62 37) -65] [(-61 -12 3 2) -61] [(-29 96 99 -99) -99] [(47 -39 -15 -62) -62] [(-93 99 8 -25) -93] [(-76 21 55 -15) -76] [(12 -40 21 -87) -87] [(15 83 -21 56) -21] [(67 86 -62 -12) -62] [(70 -21 41 -85) -85] [(-16 -71 28 -60) -71] [(38 -1 60 -100) -100] [(-55 -4 -61 90) -61] [(39 -17 -79 81) -79] [(25 -66 54 30) -66] [(47 28 -30 7) -30] [(35 19 -90 19) -90] [(39 79 -31 84) -31])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-17 -17 -17 -87] -87]
Train Case:   6 | Input/Output: [[-68 -40 -40 -40] -68]
Train Case:   7 | Input/Output: [[76 76 76 -23] -23]
Train Case:   8 | Input/Output: [[56 -61 -61 -61] -61]
Train Case:   9 | Input/Output: [[-65 -65 66 -65] -65]
Train Case:  10 | Input/Output: [[-61 13 13 13] -61]
Train Case:  11 | Input/Output: [[98 98 98 65] 65]
Train Case:  12 | Input/Output: [[55 55 55 -61] -61]
Train Case:  13 | Input/Output: [[79 79 -20 79] -20]
Train Case:  14 | Input/Output: [[97 97 97 -22] -22]
Train Case:  15 | Input/Output: [(35 35 35 35) 35]
Train Case:  16 | Input/Output: [(-28 -28 -28 -28) -28]
Train Case:  17 | Input/Output: [(57 57 57 57) 57]
Train Case:  18 | Input/Output: [(22 22 22 22) 22]
Train Case:  19 | Input/Output: [(94 94 94 94) 94]
Train Case:  20 | Input/Output: [(9 52 53 33) 9]
Train Case:  21 | Input/Output: [(82 64 21 18) 18]
Train Case:  22 | Input/Output: [(15 83 39 18) 15]
Train Case:  23 | Input/Output: [(82 73 29 25) 25]
Train Case:  24 | Input/Output: [(93 9 98 16) 9]
Train Case:  25 | Input/Output: [(6 4 74 30) 4]
Train Case:  26 | Input/Output: [(42 14 52 3) 3]
Train Case:  27 | Input/Output: [(28 38 32 46) 28]
Train Case:  28 | Input/Output: [(9 27 62 80) 9]
Train Case:  29 | Input/Output: [(66 71 89 4) 4]
Train Case:  30 | Input/Output: [(42 93 14 72) 14]
Train Case:  31 | Input/Output: [(67 32 44 49) 32]
Train Case:  32 | Input/Output: [(70 7 45 47) 7]
Train Case:  33 | Input/Output: [(45 7 9 57) 7]
Train Case:  34 | Input/Output: [(41 100 23 42) 23]
Train Case:  35 | Input/Output: [(7 60 24 64) 7]
Train Case:  36 | Input/Output: [(71 46 90 13) 13]
Train Case:  37 | Input/Output: [(58 69 74 96) 58]
Train Case:  38 | Input/Output: [(76 36 15 36) 15]
Train Case:  39 | Input/Output: [(40 99 36 92) 36]
Train Case:  40 | Input/Output: [(68 -79 -83 -59) -83]
Train Case:  41 | Input/Output: [(-86 -24 38 -66) -86]
Train Case:  42 | Input/Output: [(-72 35 -88 100) -88]
Train Case:  43 | Input/Output: [(-20 -18 -50 27) -50]
Train Case:  44 | Input/Output: [(-91 2 -7 -64) -91]
Train Case:  45 | Input/Output: [(15 92 -4 92) -4]
Train Case:  46 | Input/Output: [(32 -56 59 46) -56]
Train Case:  47 | Input/Output: [(-33 -11 -74 -85) -85]
Train Case:  48 | Input/Output: [(-55 -59 -54 -80) -80]
Train Case:  49 | Input/Output: [(72 -74 85 -10) -74]
Train Case:  50 | Input/Output: [(32 50 -11 -69) -69]
Train Case:  51 | Input/Output: [(-80 44 -62 -73) -80]
Train Case:  52 | Input/Output: [(90 -49 88 42) -49]
Train Case:  53 | Input/Output: [(-56 5 56 -64) -64]
Train Case:  54 | Input/Output: [(-31 -100 32 -71) -100]
Train Case:  55 | Input/Output: [(82 -30 -85 17) -85]
Train Case:  56 | Input/Output: [(99 53 82 -42) -42]
Train Case:  57 | Input/Output: [(-83 -75 -52 -62) -83]
Train Case:  58 | Input/Output: [(40 -19 62 -76) -76]
Train Case:  59 | Input/Output: [(-87 -29 37 28) -87]
Train Case:  60 | Input/Output: [(-38 62 24 -62) -62]
Train Case:  61 | Input/Output: [(80 14 -6 -21) -21]
Train Case:  62 | Input/Output: [(21 -91 31 -45) -91]
Train Case:  63 | Input/Output: [(96 -59 -71 -18) -71]
Train Case:  64 | Input/Output: [(19 -87 99 -85) -87]
Train Case:  65 | Input/Output: [(-64 -83 -85 -41) -85]
Train Case:  66 | Input/Output: [(93 62 -96 -79) -96]
Train Case:  67 | Input/Output: [(-60 82 -76 -88) -88]
Train Case:  68 | Input/Output: [(98 24 -1 62) -1]
Train Case:  69 | Input/Output: [(77 83 20 -59) -59]
Train Case:  70 | Input/Output: [(-50 -58 -19 -63) -63]
Train Case:  71 | Input/Output: [(-10 -45 -4 10) -45]
Train Case:  72 | Input/Output: [(60 -91 -17 -73) -91]
Train Case:  73 | Input/Output: [(13 76 -57 16) -57]
Train Case:  74 | Input/Output: [(-48 42 -69 76) -69]
Train Case:  75 | Input/Output: [(81 -55 -92 66) -92]
Train Case:  76 | Input/Output: [(15 -45 -100 86) -100]
Train Case:  77 | Input/Output: [(-67 -40 -56 77) -67]
Train Case:  78 | Input/Output: [(62 35 -9 -45) -45]
Train Case:  79 | Input/Output: [(13 75 -5 -39) -39]
Train Case:  80 | Input/Output: [(24 -85 55 -9) -85]
Train Case:  81 | Input/Output: [(53 86 19 65) 19]
Train Case:  82 | Input/Output: [(-65 -3 -62 37) -65]
Train Case:  83 | Input/Output: [(-61 -12 3 2) -61]
Train Case:  84 | Input/Output: [(-29 96 99 -99) -99]
Train Case:  85 | Input/Output: [(47 -39 -15 -62) -62]
Train Case:  86 | Input/Output: [(-93 99 8 -25) -93]
Train Case:  87 | Input/Output: [(-76 21 55 -15) -76]
Train Case:  88 | Input/Output: [(12 -40 21 -87) -87]
Train Case:  89 | Input/Output: [(15 83 -21 56) -21]
Train Case:  90 | Input/Output: [(67 86 -62 -12) -62]
Train Case:  91 | Input/Output: [(70 -21 41 -85) -85]
Train Case:  92 | Input/Output: [(-16 -71 28 -60) -71]
Train Case:  93 | Input/Output: [(38 -1 60 -100) -100]
Train Case:  94 | Input/Output: [(-55 -4 -61 90) -61]
Train Case:  95 | Input/Output: [(39 -17 -79 81) -79]
Train Case:  96 | Input/Output: [(25 -66 54 30) -66]
Train Case:  97 | Input/Output: [(47 28 -30 7) -30]
Train Case:  98 | Input/Output: [(35 19 -90 19) -90]
Train Case:  99 | Input/Output: [(39 79 -31 84) -31]
Test Case:   0 | Input/Output: [[-72 -54 -54 -54] -72]
Test Case:   1 | Input/Output: [[95 95 95 -35] -35]
Test Case:   2 | Input/Output: [[94 94 94 -21] -21]
Test Case:   3 | Input/Output: [[-37 -37 89 -37] -37]
Test Case:   4 | Input/Output: [[34 34 -21 34] -21]
Test Case:   5 | Input/Output: [[0 21 21 21] 0]
Test Case:   6 | Input/Output: [[-68 -68 -68 58] -68]
Test Case:   7 | Input/Output: [[-35 -35 72 -35] -35]
Test Case:   8 | Input/Output: [[21 -11 -11 -11] -11]
Test Case:   9 | Input/Output: [[99 99 -94 99] -94]
Test Case:  10 | Input/Output: [[-16 -9 -16 -16] -16]
Test Case:  11 | Input/Output: [[58 -13 58 58] -13]
Test Case:  12 | Input/Output: [[99 99 26 99] 26]
Test Case:  13 | Input/Output: [[-76 -76 -76 -49] -76]
Test Case:  14 | Input/Output: [[-24 -1 -24 -24] -24]
Test Case:  15 | Input/Output: [[-21 -21 58 -21] -21]
Test Case:  16 | Input/Output: [[-11 -11 11 -11] -11]
Test Case:  17 | Input/Output: [[27 27 -91 27] -91]
Test Case:  18 | Input/Output: [[55 55 55 37] 37]
Test Case:  19 | Input/Output: [[22 20 20 20] 20]
Test Case:  20 | Input/Output: [[33 33 33 -15] -15]
Test Case:  21 | Input/Output: [[-66 -66 -66 -59] -66]
Test Case:  22 | Input/Output: [[55 -60 -60 -60] -60]
Test Case:  23 | Input/Output: [[-59 -59 79 -59] -59]
Test Case:  24 | Input/Output: [[84 89 84 84] 84]
Test Case:  25 | Input/Output: [[-73 96 -73 -73] -73]
Test Case:  26 | Input/Output: [[38 66 38 38] 38]
Test Case:  27 | Input/Output: [[8 8 8 -82] -82]
Test Case:  28 | Input/Output: [[-97 -97 -97 -76] -97]
Test Case:  29 | Input/Output: [[-19 -40 -19 -19] -40]
Test Case:  30 | Input/Output: [[31 23 31 31] 23]
Test Case:  31 | Input/Output: [[92 98 92 92] 92]
Test Case:  32 | Input/Output: [[-84 38 -84 -84] -84]
Test Case:  33 | Input/Output: [[66 -75 66 66] -75]
Test Case:  34 | Input/Output: [[4 -61 -61 -61] -61]
Test Case:  35 | Input/Output: [[48 0 0 0] 0]
Test Case:  36 | Input/Output: [[98 -82 98 98] -82]
Test Case:  37 | Input/Output: [[99 99 99 64] 64]
Test Case:  38 | Input/Output: [[30 30 30 -53] -53]
Test Case:  39 | Input/Output: [[-30 37 37 37] -30]
Test Case:  40 | Input/Output: [[75 75 48 75] 48]
Test Case:  41 | Input/Output: [[5 5 -93 5] -93]
Test Case:  42 | Input/Output: [[59 61 59 59] 59]
Test Case:  43 | Input/Output: [[33 33 -29 33] -29]
Test Case:  44 | Input/Output: [[69 -19 69 69] -19]
Test Case:  45 | Input/Output: [[73 73 73 -61] -61]
Test Case:  46 | Input/Output: [[-78 72 -78 -78] -78]
Test Case:  47 | Input/Output: [[-58 -58 -90 -58] -90]
Test Case:  48 | Input/Output: [[-74 -74 70 -74] -74]
Test Case:  49 | Input/Output: [[33 33 33 57] 33]
Test Case:  50 | Input/Output: [[-33 85 -33 -33] -33]
Test Case:  51 | Input/Output: [[10 10 10 -97] -97]
Test Case:  52 | Input/Output: [[-67 -78 -78 -78] -78]
Test Case:  53 | Input/Output: [[41 -76 41 41] -76]
Test Case:  54 | Input/Output: [[23 23 -92 23] -92]
Test Case:  55 | Input/Output: [[61 61 61 -50] -50]
Test Case:  56 | Input/Output: [[-42 -42 3 -42] -42]
Test Case:  57 | Input/Output: [[-99 -99 -99 0] -99]
Test Case:  58 | Input/Output: [[38 38 38 21] 21]
Test Case:  59 | Input/Output: [[59 59 59 -39] -39]
Test Case:  60 | Input/Output: [[95 95 -83 95] -83]
Test Case:  61 | Input/Output: [[25 25 25 -14] -14]
Test Case:  62 | Input/Output: [[-68 -68 -58 -68] -68]
Test Case:  63 | Input/Output: [[-92 -86 -92 -92] -92]
Test Case:  64 | Input/Output: [[36 58 36 36] 36]
Test Case:  65 | Input/Output: [[25 -30 -30 -30] -30]
Test Case:  66 | Input/Output: [[-75 -75 66 -75] -75]
Test Case:  67 | Input/Output: [[24 24 24 24] 24]
Test Case:  68 | Input/Output: [[-97 -97 -50 -97] -97]
Test Case:  69 | Input/Output: [[-78 -78 -36 -78] -78]
Test Case:  70 | Input/Output: [[5 5 69 5] 5]
Test Case:  71 | Input/Output: [[78 78 78 -28] -28]
Test Case:  72 | Input/Output: [[28 28 27 28] 27]
Test Case:  73 | Input/Output: [[-24 28 -24 -24] -24]
Test Case:  74 | Input/Output: [[-27 -27 94 -27] -27]
Test Case:  75 | Input/Output: [[-3 -3 -66 -3] -66]
Test Case:  76 | Input/Output: [[23 87 23 23] 23]
Test Case:  77 | Input/Output: [[61 -94 61 61] -94]
Test Case:  78 | Input/Output: [[13 -15 -15 -15] -15]
Test Case:  79 | Input/Output: [[-1 -38 -38 -38] -38]
Test Case:  80 | Input/Output: [[-40 10 -40 -40] -40]
Test Case:  81 | Input/Output: [[48 48 27 48] 27]
Test Case:  82 | Input/Output: [[-2 44 44 44] -2]
Test Case:  83 | Input/Output: [[60 67 60 60] 60]
Test Case:  84 | Input/Output: [[-48 34 -48 -48] -48]
Test Case:  85 | Input/Output: [[-27 -27 49 -27] -27]
Test Case:  86 | Input/Output: [[25 -40 -40 -40] -40]
Test Case:  87 | Input/Output: [[-19 -19 -19 5] -19]
Test Case:  88 | Input/Output: [[28 24 24 24] 24]
Test Case:  89 | Input/Output: [[4 4 87 4] 4]
Test Case:  90 | Input/Output: [[5 5 -88 5] -88]
Test Case:  91 | Input/Output: [[68 68 -80 68] -80]
Test Case:  92 | Input/Output: [[3 3 -16 3] -16]
Test Case:  93 | Input/Output: [[32 -27 -27 -27] -27]
Test Case:  94 | Input/Output: [[-15 -15 -15 -67] -67]
Test Case:  95 | Input/Output: [[-3 -13 -3 -3] -13]
Test Case:  96 | Input/Output: [[73 73 66 73] 66]
Test Case:  97 | Input/Output: [[17 17 51 17] 17]
Test Case:  98 | Input/Output: [[-57 -57 -87 -57] -87]
Test Case:  99 | Input/Output: [[-84 -73 -73 -73] -84]
Test Case: 100 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 101 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 102 | Input/Output: [(92 92 92 92) 92]
Test Case: 103 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 104 | Input/Output: [(95 95 95 95) 95]
Test Case: 105 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 106 | Input/Output: [(66 66 66 66) 66]
Test Case: 107 | Input/Output: [(58 58 58 58) 58]
Test Case: 108 | Input/Output: [(88 88 88 88) 88]
Test Case: 109 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 110 | Input/Output: [(92 92 92 92) 92]
Test Case: 111 | Input/Output: [(100 100 100 100) 100]
Test Case: 112 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 113 | Input/Output: [(56 56 56 56) 56]
Test Case: 114 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 115 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 116 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 117 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 118 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 119 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 120 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 121 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 122 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 123 | Input/Output: [(46 46 46 46) 46]
Test Case: 124 | Input/Output: [(85 85 85 85) 85]
Test Case: 125 | Input/Output: [(68 68 68 68) 68]
Test Case: 126 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 127 | Input/Output: [(49 49 49 49) 49]
Test Case: 128 | Input/Output: [(19 19 19 19) 19]
Test Case: 129 | Input/Output: [(26 26 26 26) 26]
Test Case: 130 | Input/Output: [(90 90 90 90) 90]
Test Case: 131 | Input/Output: [(32 32 32 32) 32]
Test Case: 132 | Input/Output: [(7 7 7 7) 7]
Test Case: 133 | Input/Output: [(16 16 16 16) 16]
Test Case: 134 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 135 | Input/Output: [(10 10 10 10) 10]
Test Case: 136 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 137 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 138 | Input/Output: [(32 32 32 32) 32]
Test Case: 139 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 140 | Input/Output: [(23 23 23 23) 23]
Test Case: 141 | Input/Output: [(59 59 59 59) 59]
Test Case: 142 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 143 | Input/Output: [(42 42 42 42) 42]
Test Case: 144 | Input/Output: [(41 41 41 41) 41]
Test Case: 145 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 146 | Input/Output: [(62 62 62 62) 62]
Test Case: 147 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 148 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 149 | Input/Output: [(59 59 59 59) 59]
Test Case: 150 | Input/Output: [(10 10 10 10) 10]
Test Case: 151 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 152 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 153 | Input/Output: [(82 82 82 82) 82]
Test Case: 154 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 155 | Input/Output: [(20 20 20 20) 20]
Test Case: 156 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 157 | Input/Output: [(69 69 69 69) 69]
Test Case: 158 | Input/Output: [(36 36 36 36) 36]
Test Case: 159 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 160 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 161 | Input/Output: [(73 73 73 73) 73]
Test Case: 162 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 163 | Input/Output: [(8 8 8 8) 8]
Test Case: 164 | Input/Output: [(19 19 19 19) 19]
Test Case: 165 | Input/Output: [(16 16 16 16) 16]
Test Case: 166 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 167 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 168 | Input/Output: [(32 32 32 32) 32]
Test Case: 169 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 170 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 171 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 172 | Input/Output: [(51 51 51 51) 51]
Test Case: 173 | Input/Output: [(13 13 13 13) 13]
Test Case: 174 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 175 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 176 | Input/Output: [(70 70 70 70) 70]
Test Case: 177 | Input/Output: [(76 76 76 76) 76]
Test Case: 178 | Input/Output: [(26 26 26 26) 26]
Test Case: 179 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 180 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 181 | Input/Output: [(95 95 95 95) 95]
Test Case: 182 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 183 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 184 | Input/Output: [(51 51 51 51) 51]
Test Case: 185 | Input/Output: [(76 76 76 76) 76]
Test Case: 186 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 187 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 188 | Input/Output: [(77 77 77 77) 77]
Test Case: 189 | Input/Output: [(74 74 74 74) 74]
Test Case: 190 | Input/Output: [(59 59 59 59) 59]
Test Case: 191 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 192 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 193 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 194 | Input/Output: [(63 63 63 63) 63]
Test Case: 195 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 196 | Input/Output: [(22 22 22 22) 22]
Test Case: 197 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 198 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 199 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 200 | Input/Output: [(39 17 6 35) 6]
Test Case: 201 | Input/Output: [(81 45 27 71) 27]
Test Case: 202 | Input/Output: [(54 2 93 14) 2]
Test Case: 203 | Input/Output: [(62 87 69 5) 5]
Test Case: 204 | Input/Output: [(71 54 26 25) 25]
Test Case: 205 | Input/Output: [(11 48 23 6) 6]
Test Case: 206 | Input/Output: [(25 74 42 53) 25]
Test Case: 207 | Input/Output: [(29 46 62 83) 29]
Test Case: 208 | Input/Output: [(2 30 84 78) 2]
Test Case: 209 | Input/Output: [(28 75 83 68) 28]
Test Case: 210 | Input/Output: [(96 52 51 54) 51]
Test Case: 211 | Input/Output: [(68 75 67 1) 1]
Test Case: 212 | Input/Output: [(34 74 90 94) 34]
Test Case: 213 | Input/Output: [(19 38 17 75) 17]
Test Case: 214 | Input/Output: [(87 19 58 84) 19]
Test Case: 215 | Input/Output: [(14 26 92 20) 14]
Test Case: 216 | Input/Output: [(88 41 36 1) 1]
Test Case: 217 | Input/Output: [(99 42 95 24) 24]
Test Case: 218 | Input/Output: [(71 54 38 81) 38]
Test Case: 219 | Input/Output: [(33 92 75 5) 5]
Test Case: 220 | Input/Output: [(78 14 73 81) 14]
Test Case: 221 | Input/Output: [(54 14 29 7) 7]
Test Case: 222 | Input/Output: [(78 77 60 44) 44]
Test Case: 223 | Input/Output: [(17 4 100 21) 4]
Test Case: 224 | Input/Output: [(58 63 81 73) 58]
Test Case: 225 | Input/Output: [(62 71 93 11) 11]
Test Case: 226 | Input/Output: [(98 2 17 98) 2]
Test Case: 227 | Input/Output: [(96 7 33 53) 7]
Test Case: 228 | Input/Output: [(30 0 85 10) 0]
Test Case: 229 | Input/Output: [(18 15 16 39) 15]
Test Case: 230 | Input/Output: [(24 41 51 26) 24]
Test Case: 231 | Input/Output: [(63 77 3 30) 3]
Test Case: 232 | Input/Output: [(65 29 21 97) 21]
Test Case: 233 | Input/Output: [(94 59 51 86) 51]
Test Case: 234 | Input/Output: [(45 66 35 16) 16]
Test Case: 235 | Input/Output: [(76 100 59 36) 36]
Test Case: 236 | Input/Output: [(81 18 81 1) 1]
Test Case: 237 | Input/Output: [(36 29 25 91) 25]
Test Case: 238 | Input/Output: [(89 20 85 89) 20]
Test Case: 239 | Input/Output: [(44 82 32 49) 32]
Test Case: 240 | Input/Output: [(86 68 62 59) 59]
Test Case: 241 | Input/Output: [(57 9 34 21) 9]
Test Case: 242 | Input/Output: [(46 81 73 84) 46]
Test Case: 243 | Input/Output: [(53 23 85 87) 23]
Test Case: 244 | Input/Output: [(56 75 17 61) 17]
Test Case: 245 | Input/Output: [(85 71 25 15) 15]
Test Case: 246 | Input/Output: [(3 31 14 2) 2]
Test Case: 247 | Input/Output: [(59 1 97 33) 1]
Test Case: 248 | Input/Output: [(66 9 40 38) 9]
Test Case: 249 | Input/Output: [(98 75 48 86) 48]
Test Case: 250 | Input/Output: [(42 21 76 59) 21]
Test Case: 251 | Input/Output: [(72 24 69 13) 13]
Test Case: 252 | Input/Output: [(11 62 15 83) 11]
Test Case: 253 | Input/Output: [(27 21 70 50) 21]
Test Case: 254 | Input/Output: [(47 20 50 29) 20]
Test Case: 255 | Input/Output: [(75 72 45 59) 45]
Test Case: 256 | Input/Output: [(52 25 21 26) 21]
Test Case: 257 | Input/Output: [(63 0 83 28) 0]
Test Case: 258 | Input/Output: [(91 43 25 24) 24]
Test Case: 259 | Input/Output: [(65 90 57 2) 2]
Test Case: 260 | Input/Output: [(53 53 56 38) 38]
Test Case: 261 | Input/Output: [(4 35 32 82) 4]
Test Case: 262 | Input/Output: [(29 10 45 3) 3]
Test Case: 263 | Input/Output: [(67 55 11 56) 11]
Test Case: 264 | Input/Output: [(10 6 41 91) 6]
Test Case: 265 | Input/Output: [(71 98 45 55) 45]
Test Case: 266 | Input/Output: [(46 81 100 28) 28]
Test Case: 267 | Input/Output: [(0 63 39 43) 0]
Test Case: 268 | Input/Output: [(56 99 28 13) 13]
Test Case: 269 | Input/Output: [(69 62 33 20) 20]
Test Case: 270 | Input/Output: [(87 58 13 39) 13]
Test Case: 271 | Input/Output: [(93 61 98 28) 28]
Test Case: 272 | Input/Output: [(73 19 96 3) 3]
Test Case: 273 | Input/Output: [(51 93 7 97) 7]
Test Case: 274 | Input/Output: [(99 93 8 13) 8]
Test Case: 275 | Input/Output: [(24 50 7 81) 7]
Test Case: 276 | Input/Output: [(51 72 70 78) 51]
Test Case: 277 | Input/Output: [(70 55 50 77) 50]
Test Case: 278 | Input/Output: [(17 35 85 51) 17]
Test Case: 279 | Input/Output: [(86 99 99 9) 9]
Test Case: 280 | Input/Output: [(19 66 21 24) 19]
Test Case: 281 | Input/Output: [(67 78 87 95) 67]
Test Case: 282 | Input/Output: [(91 79 74 32) 32]
Test Case: 283 | Input/Output: [(88 23 46 53) 23]
Test Case: 284 | Input/Output: [(91 57 84 83) 57]
Test Case: 285 | Input/Output: [(26 23 56 49) 23]
Test Case: 286 | Input/Output: [(28 58 59 50) 28]
Test Case: 287 | Input/Output: [(1 75 31 11) 1]
Test Case: 288 | Input/Output: [(87 27 26 11) 11]
Test Case: 289 | Input/Output: [(25 55 81 98) 25]
Test Case: 290 | Input/Output: [(46 31 64 97) 31]
Test Case: 291 | Input/Output: [(94 56 92 94) 56]
Test Case: 292 | Input/Output: [(48 26 94 38) 26]
Test Case: 293 | Input/Output: [(95 73 45 18) 18]
Test Case: 294 | Input/Output: [(96 24 38 26) 24]
Test Case: 295 | Input/Output: [(37 43 49 59) 37]
Test Case: 296 | Input/Output: [(45 58 26 87) 26]
Test Case: 297 | Input/Output: [(72 14 67 32) 14]
Test Case: 298 | Input/Output: [(80 90 23 87) 23]
Test Case: 299 | Input/Output: [(59 21 5 10) 5]
Test Case: 300 | Input/Output: [(19 18 50 87) 18]
Test Case: 301 | Input/Output: [(9 100 11 53) 9]
Test Case: 302 | Input/Output: [(5 76 26 60) 5]
Test Case: 303 | Input/Output: [(98 86 76 45) 45]
Test Case: 304 | Input/Output: [(49 27 52 48) 27]
Test Case: 305 | Input/Output: [(72 68 53 29) 29]
Test Case: 306 | Input/Output: [(46 72 99 9) 9]
Test Case: 307 | Input/Output: [(32 44 45 47) 32]
Test Case: 308 | Input/Output: [(98 5 22 4) 4]
Test Case: 309 | Input/Output: [(94 60 95 41) 41]
Test Case: 310 | Input/Output: [(36 87 64 16) 16]
Test Case: 311 | Input/Output: [(7 79 39 29) 7]
Test Case: 312 | Input/Output: [(44 77 26 60) 26]
Test Case: 313 | Input/Output: [(10 28 57 78) 10]
Test Case: 314 | Input/Output: [(4 72 15 8) 4]
Test Case: 315 | Input/Output: [(79 61 94 30) 30]
Test Case: 316 | Input/Output: [(67 43 18 3) 3]
Test Case: 317 | Input/Output: [(56 52 95 9) 9]
Test Case: 318 | Input/Output: [(58 44 59 36) 36]
Test Case: 319 | Input/Output: [(56 92 62 58) 56]
Test Case: 320 | Input/Output: [(3 73 0 43) 0]
Test Case: 321 | Input/Output: [(27 46 98 21) 21]
Test Case: 322 | Input/Output: [(65 12 23 30) 12]
Test Case: 323 | Input/Output: [(61 39 54 14) 14]
Test Case: 324 | Input/Output: [(39 95 63 61) 39]
Test Case: 325 | Input/Output: [(69 71 6 95) 6]
Test Case: 326 | Input/Output: [(79 8 52 66) 8]
Test Case: 327 | Input/Output: [(90 37 77 2) 2]
Test Case: 328 | Input/Output: [(49 72 22 97) 22]
Test Case: 329 | Input/Output: [(48 80 15 57) 15]
Test Case: 330 | Input/Output: [(51 97 20 23) 20]
Test Case: 331 | Input/Output: [(62 27 6 2) 2]
Test Case: 332 | Input/Output: [(66 33 44 69) 33]
Test Case: 333 | Input/Output: [(70 67 86 38) 38]
Test Case: 334 | Input/Output: [(43 60 40 60) 40]
Test Case: 335 | Input/Output: [(59 75 48 6) 6]
Test Case: 336 | Input/Output: [(19 10 9 67) 9]
Test Case: 337 | Input/Output: [(29 83 58 52) 29]
Test Case: 338 | Input/Output: [(29 14 61 0) 0]
Test Case: 339 | Input/Output: [(5 75 65 40) 5]
Test Case: 340 | Input/Output: [(18 35 96 80) 18]
Test Case: 341 | Input/Output: [(53 48 55 61) 48]
Test Case: 342 | Input/Output: [(70 91 77 35) 35]
Test Case: 343 | Input/Output: [(19 21 14 39) 14]
Test Case: 344 | Input/Output: [(5 77 88 3) 3]
Test Case: 345 | Input/Output: [(78 53 1 53) 1]
Test Case: 346 | Input/Output: [(82 42 56 59) 42]
Test Case: 347 | Input/Output: [(96 88 70 66) 66]
Test Case: 348 | Input/Output: [(28 30 77 52) 28]
Test Case: 349 | Input/Output: [(13 45 69 12) 12]
Test Case: 350 | Input/Output: [(35 74 0 13) 0]
Test Case: 351 | Input/Output: [(11 1 22 24) 1]
Test Case: 352 | Input/Output: [(52 65 51 10) 10]
Test Case: 353 | Input/Output: [(1 66 8 31) 1]
Test Case: 354 | Input/Output: [(46 18 55 86) 18]
Test Case: 355 | Input/Output: [(16 95 12 46) 12]
Test Case: 356 | Input/Output: [(38 60 81 75) 38]
Test Case: 357 | Input/Output: [(90 74 33 55) 33]
Test Case: 358 | Input/Output: [(26 70 20 11) 11]
Test Case: 359 | Input/Output: [(8 92 37 64) 8]
Test Case: 360 | Input/Output: [(72 23 38 5) 5]
Test Case: 361 | Input/Output: [(28 77 54 16) 16]
Test Case: 362 | Input/Output: [(26 77 2 2) 2]
Test Case: 363 | Input/Output: [(73 39 84 68) 39]
Test Case: 364 | Input/Output: [(26 39 54 35) 26]
Test Case: 365 | Input/Output: [(45 67 19 91) 19]
Test Case: 366 | Input/Output: [(93 14 73 94) 14]
Test Case: 367 | Input/Output: [(25 96 61 83) 25]
Test Case: 368 | Input/Output: [(33 87 74 15) 15]
Test Case: 369 | Input/Output: [(3 63 63 81) 3]
Test Case: 370 | Input/Output: [(94 54 19 29) 19]
Test Case: 371 | Input/Output: [(84 90 82 85) 82]
Test Case: 372 | Input/Output: [(25 34 28 2) 2]
Test Case: 373 | Input/Output: [(55 52 10 56) 10]
Test Case: 374 | Input/Output: [(33 19 50 11) 11]
Test Case: 375 | Input/Output: [(56 85 39 20) 20]
Test Case: 376 | Input/Output: [(44 7 83 86) 7]
Test Case: 377 | Input/Output: [(81 13 6 7) 6]
Test Case: 378 | Input/Output: [(25 89 0 49) 0]
Test Case: 379 | Input/Output: [(34 71 27 34) 27]
Test Case: 380 | Input/Output: [(3 18 98 50) 3]
Test Case: 381 | Input/Output: [(79 49 96 81) 49]
Test Case: 382 | Input/Output: [(74 12 54 47) 12]
Test Case: 383 | Input/Output: [(50 88 55 16) 16]
Test Case: 384 | Input/Output: [(2 78 62 66) 2]
Test Case: 385 | Input/Output: [(16 49 40 41) 16]
Test Case: 386 | Input/Output: [(33 95 95 5) 5]
Test Case: 387 | Input/Output: [(10 35 23 12) 10]
Test Case: 388 | Input/Output: [(81 7 22 43) 7]
Test Case: 389 | Input/Output: [(74 79 51 7) 7]
Test Case: 390 | Input/Output: [(19 27 3 89) 3]
Test Case: 391 | Input/Output: [(45 92 73 13) 13]
Test Case: 392 | Input/Output: [(62 6 56 91) 6]
Test Case: 393 | Input/Output: [(81 52 46 32) 32]
Test Case: 394 | Input/Output: [(26 84 72 82) 26]
Test Case: 395 | Input/Output: [(67 90 6 12) 6]
Test Case: 396 | Input/Output: [(40 8 73 56) 8]
Test Case: 397 | Input/Output: [(29 78 59 33) 29]
Test Case: 398 | Input/Output: [(18 63 8 36) 8]
Test Case: 399 | Input/Output: [(88 15 81 93) 15]
Test Case: 400 | Input/Output: [(-57 -89 -27 50) -89]
Test Case: 401 | Input/Output: [(-22 -44 -79 76) -79]
Test Case: 402 | Input/Output: [(-35 -84 55 -83) -84]
Test Case: 403 | Input/Output: [(-10 80 50 -78) -78]
Test Case: 404 | Input/Output: [(91 -63 -4 -99) -99]
Test Case: 405 | Input/Output: [(42 -35 73 63) -35]
Test Case: 406 | Input/Output: [(-86 -67 -70 76) -86]
Test Case: 407 | Input/Output: [(23 68 58 83) 23]
Test Case: 408 | Input/Output: [(-4 37 -39 70) -39]
Test Case: 409 | Input/Output: [(47 75 35 54) 35]
Test Case: 410 | Input/Output: [(-58 -25 -94 -44) -94]
Test Case: 411 | Input/Output: [(29 100 -84 -92) -92]
Test Case: 412 | Input/Output: [(-59 -73 96 87) -73]
Test Case: 413 | Input/Output: [(-4 -22 85 2) -22]
Test Case: 414 | Input/Output: [(32 -18 64 45) -18]
Test Case: 415 | Input/Output: [(-66 -77 -92 -74) -92]
Test Case: 416 | Input/Output: [(-63 -19 49 30) -63]
Test Case: 417 | Input/Output: [(-94 -26 82 21) -94]
Test Case: 418 | Input/Output: [(-6 64 -56 -42) -56]
Test Case: 419 | Input/Output: [(38 -48 0 -73) -73]
Test Case: 420 | Input/Output: [(-60 -19 80 95) -60]
Test Case: 421 | Input/Output: [(65 -52 -86 10) -86]
Test Case: 422 | Input/Output: [(58 -30 -46 -71) -71]
Test Case: 423 | Input/Output: [(27 -67 -95 -40) -95]
Test Case: 424 | Input/Output: [(-81 -75 47 -94) -94]
Test Case: 425 | Input/Output: [(20 80 7 12) 7]
Test Case: 426 | Input/Output: [(78 -37 42 59) -37]
Test Case: 427 | Input/Output: [(-58 96 -7 -86) -86]
Test Case: 428 | Input/Output: [(19 -92 -62 52) -92]
Test Case: 429 | Input/Output: [(-55 57 -97 -41) -97]
Test Case: 430 | Input/Output: [(69 23 -62 -93) -93]
Test Case: 431 | Input/Output: [(23 -79 -12 -62) -79]
Test Case: 432 | Input/Output: [(7 -55 16 -100) -100]
Test Case: 433 | Input/Output: [(-85 16 -27 46) -85]
Test Case: 434 | Input/Output: [(64 -59 61 -74) -74]
Test Case: 435 | Input/Output: [(-61 -79 69 -62) -79]
Test Case: 436 | Input/Output: [(-32 3 -71 -82) -82]
Test Case: 437 | Input/Output: [(-5 62 48 90) -5]
Test Case: 438 | Input/Output: [(34 91 74 -55) -55]
Test Case: 439 | Input/Output: [(-1 43 -33 -43) -43]
Test Case: 440 | Input/Output: [(86 -3 -60 12) -60]
Test Case: 441 | Input/Output: [(12 96 83 -65) -65]
Test Case: 442 | Input/Output: [(9 29 -71 13) -71]
Test Case: 443 | Input/Output: [(-66 36 89 -97) -97]
Test Case: 444 | Input/Output: [(50 -37 92 -50) -50]
Test Case: 445 | Input/Output: [(-18 -78 27 -5) -78]
Test Case: 446 | Input/Output: [(32 58 0 85) 0]
Test Case: 447 | Input/Output: [(41 39 58 55) 39]
Test Case: 448 | Input/Output: [(2 10 80 -58) -58]
Test Case: 449 | Input/Output: [(50 -17 92 69) -17]
Test Case: 450 | Input/Output: [(-64 -93 -18 -18) -93]
Test Case: 451 | Input/Output: [(58 30 67 76) 30]
Test Case: 452 | Input/Output: [(22 -31 78 -55) -55]
Test Case: 453 | Input/Output: [(63 -11 -61 15) -61]
Test Case: 454 | Input/Output: [(-9 -40 30 -54) -54]
Test Case: 455 | Input/Output: [(53 -17 73 -77) -77]
Test Case: 456 | Input/Output: [(27 6 -18 52) -18]
Test Case: 457 | Input/Output: [(-61 -88 -83 67) -88]
Test Case: 458 | Input/Output: [(-30 40 75 11) -30]
Test Case: 459 | Input/Output: [(78 42 35 28) 28]
Test Case: 460 | Input/Output: [(55 6 -74 -70) -74]
Test Case: 461 | Input/Output: [(-74 87 81 46) -74]
Test Case: 462 | Input/Output: [(-73 87 54 -55) -73]
Test Case: 463 | Input/Output: [(72 97 -48 20) -48]
Test Case: 464 | Input/Output: [(10 -4 -23 -55) -55]
Test Case: 465 | Input/Output: [(54 -58 88 26) -58]
Test Case: 466 | Input/Output: [(35 34 36 -76) -76]
Test Case: 467 | Input/Output: [(-18 18 -26 -53) -53]
Test Case: 468 | Input/Output: [(98 -58 10 2) -58]
Test Case: 469 | Input/Output: [(-41 -18 11 65) -41]
Test Case: 470 | Input/Output: [(4 -22 26 -57) -57]
Test Case: 471 | Input/Output: [(-95 -21 80 -80) -95]
Test Case: 472 | Input/Output: [(20 -97 -15 15) -97]
Test Case: 473 | Input/Output: [(-57 67 39 83) -57]
Test Case: 474 | Input/Output: [(69 -70 -76 -89) -89]
Test Case: 475 | Input/Output: [(65 47 -81 -31) -81]
Test Case: 476 | Input/Output: [(-76 69 22 -87) -87]
Test Case: 477 | Input/Output: [(-5 -76 18 -77) -77]
Test Case: 478 | Input/Output: [(23 -89 -53 87) -89]
Test Case: 479 | Input/Output: [(-36 34 66 88) -36]
Test Case: 480 | Input/Output: [(-42 -99 -51 85) -99]
Test Case: 481 | Input/Output: [(92 -96 -93 89) -96]
Test Case: 482 | Input/Output: [(-57 -12 -41 -61) -61]
Test Case: 483 | Input/Output: [(0 -11 -83 29) -83]
Test Case: 484 | Input/Output: [(5 -95 60 35) -95]
Test Case: 485 | Input/Output: [(64 -46 17 92) -46]
Test Case: 486 | Input/Output: [(-1 -11 91 -98) -98]
Test Case: 487 | Input/Output: [(-18 -37 93 -24) -37]
Test Case: 488 | Input/Output: [(89 87 88 -64) -64]
Test Case: 489 | Input/Output: [(-99 83 86 71) -99]
Test Case: 490 | Input/Output: [(-66 -55 6 97) -66]
Test Case: 491 | Input/Output: [(100 99 3 -10) -10]
Test Case: 492 | Input/Output: [(37 82 -30 -90) -90]
Test Case: 493 | Input/Output: [(40 -66 -74 -47) -74]
Test Case: 494 | Input/Output: [(72 -29 16 74) -29]
Test Case: 495 | Input/Output: [(-56 68 6 75) -56]
Test Case: 496 | Input/Output: [(-26 -5 -21 -18) -26]
Test Case: 497 | Input/Output: [(-40 -86 25 -79) -86]
Test Case: 498 | Input/Output: [(-76 -47 -59 3) -76]
Test Case: 499 | Input/Output: [(-15 -41 -45 53) -45]
Test Case: 500 | Input/Output: [(77 -72 -100 -85) -100]
Test Case: 501 | Input/Output: [(8 98 69 -35) -35]
Test Case: 502 | Input/Output: [(50 73 -23 -6) -23]
Test Case: 503 | Input/Output: [(-58 96 -35 -43) -58]
Test Case: 504 | Input/Output: [(-46 71 21 4) -46]
Test Case: 505 | Input/Output: [(-13 -79 100 50) -79]
Test Case: 506 | Input/Output: [(78 -12 90 -98) -98]
Test Case: 507 | Input/Output: [(23 40 -35 -22) -35]
Test Case: 508 | Input/Output: [(81 53 0 42) 0]
Test Case: 509 | Input/Output: [(10 64 8 -34) -34]
Test Case: 510 | Input/Output: [(-69 -44 91 42) -69]
Test Case: 511 | Input/Output: [(92 36 75 -6) -6]
Test Case: 512 | Input/Output: [(-5 -73 -58 18) -73]
Test Case: 513 | Input/Output: [(76 4 92 -36) -36]
Test Case: 514 | Input/Output: [(76 -72 47 -9) -72]
Test Case: 515 | Input/Output: [(-35 15 -90 -83) -90]
Test Case: 516 | Input/Output: [(-18 -18 -29 -79) -79]
Test Case: 517 | Input/Output: [(-96 84 -12 61) -96]
Test Case: 518 | Input/Output: [(32 60 64 32) 32]
Test Case: 519 | Input/Output: [(-14 -19 45 34) -19]
Test Case: 520 | Input/Output: [(-29 -59 39 28) -59]
Test Case: 521 | Input/Output: [(48 -44 -17 -19) -44]
Test Case: 522 | Input/Output: [(78 -63 64 -2) -63]
Test Case: 523 | Input/Output: [(-35 -26 -21 -13) -35]
Test Case: 524 | Input/Output: [(-53 38 -49 61) -53]
Test Case: 525 | Input/Output: [(76 64 -4 57) -4]
Test Case: 526 | Input/Output: [(62 -29 -71 -66) -71]
Test Case: 527 | Input/Output: [(36 68 -71 -18) -71]
Test Case: 528 | Input/Output: [(36 28 -47 87) -47]
Test Case: 529 | Input/Output: [(-87 84 -22 -14) -87]
Test Case: 530 | Input/Output: [(-74 85 -25 62) -74]
Test Case: 531 | Input/Output: [(-71 29 -82 -23) -82]
Test Case: 532 | Input/Output: [(82 6 -67 -40) -67]
Test Case: 533 | Input/Output: [(8 67 -33 -33) -33]
Test Case: 534 | Input/Output: [(-78 9 -34 -16) -78]
Test Case: 535 | Input/Output: [(-5 66 4 81) -5]
Test Case: 536 | Input/Output: [(-15 98 54 6) -15]
Test Case: 537 | Input/Output: [(-51 12 -62 85) -62]
Test Case: 538 | Input/Output: [(49 85 82 11) 11]
Test Case: 539 | Input/Output: [(45 -71 -73 -83) -83]
Test Case: 540 | Input/Output: [(-4 -5 32 -58) -58]
Test Case: 541 | Input/Output: [(-62 31 91 82) -62]
Test Case: 542 | Input/Output: [(-16 -51 72 79) -51]
Test Case: 543 | Input/Output: [(28 -19 -28 35) -28]
Test Case: 544 | Input/Output: [(21 -61 -71 71) -71]
Test Case: 545 | Input/Output: [(-3 45 33 31) -3]
Test Case: 546 | Input/Output: [(-80 40 46 -89) -89]
Test Case: 547 | Input/Output: [(95 98 11 -8) -8]
Test Case: 548 | Input/Output: [(-87 -45 65 -82) -87]
Test Case: 549 | Input/Output: [(9 -11 13 -2) -11]
Test Case: 550 | Input/Output: [(96 -4 53 70) -4]
Test Case: 551 | Input/Output: [(50 -20 -15 -61) -61]
Test Case: 552 | Input/Output: [(-23 -99 58 23) -99]
Test Case: 553 | Input/Output: [(-56 81 -3 -6) -56]
Test Case: 554 | Input/Output: [(-30 59 -34 42) -34]
Test Case: 555 | Input/Output: [(48 -71 -23 -27) -71]
Test Case: 556 | Input/Output: [(42 15 21 -46) -46]
Test Case: 557 | Input/Output: [(43 5 -37 2) -37]
Test Case: 558 | Input/Output: [(-21 6 86 24) -21]
Test Case: 559 | Input/Output: [(21 -63 12 -98) -98]
Test Case: 560 | Input/Output: [(-100 -39 23 -8) -100]
Test Case: 561 | Input/Output: [(0 -28 -15 -28) -28]
Test Case: 562 | Input/Output: [(71 -65 98 94) -65]
Test Case: 563 | Input/Output: [(7 49 6 -46) -46]
Test Case: 564 | Input/Output: [(-76 -9 -47 -39) -76]
Test Case: 565 | Input/Output: [(94 32 -30 4) -30]
Test Case: 566 | Input/Output: [(72 -78 56 82) -78]
Test Case: 567 | Input/Output: [(78 -24 19 88) -24]
Test Case: 568 | Input/Output: [(67 44 -37 54) -37]
Test Case: 569 | Input/Output: [(-43 -23 -55 69) -55]
Test Case: 570 | Input/Output: [(21 9 80 86) 9]
Test Case: 571 | Input/Output: [(28 -79 -80 -19) -80]
Test Case: 572 | Input/Output: [(-63 -63 -81 7) -81]
Test Case: 573 | Input/Output: [(-46 -40 -33 -62) -62]
Test Case: 574 | Input/Output: [(26 48 14 80) 14]
Test Case: 575 | Input/Output: [(-57 -64 -50 60) -64]
Test Case: 576 | Input/Output: [(-93 40 21 -56) -93]
Test Case: 577 | Input/Output: [(41 -92 79 -33) -92]
Test Case: 578 | Input/Output: [(-50 -92 -42 -31) -92]
Test Case: 579 | Input/Output: [(97 -72 40 -82) -82]
Test Case: 580 | Input/Output: [(70 77 37 -47) -47]
Test Case: 581 | Input/Output: [(79 -77 -35 -27) -77]
Test Case: 582 | Input/Output: [(11 -71 68 30) -71]
Test Case: 583 | Input/Output: [(-44 -78 -24 92) -78]
Test Case: 584 | Input/Output: [(-14 -94 -14 34) -94]
Test Case: 585 | Input/Output: [(73 -2 10 -28) -28]
Test Case: 586 | Input/Output: [(-92 54 -62 -17) -92]
Test Case: 587 | Input/Output: [(59 -44 -37 -99) -99]
Test Case: 588 | Input/Output: [(47 -73 -44 82) -73]
Test Case: 589 | Input/Output: [(78 95 -32 86) -32]
Test Case: 590 | Input/Output: [(-14 23 -71 1) -71]
Test Case: 591 | Input/Output: [(66 -60 0 92) -60]
Test Case: 592 | Input/Output: [(13 -81 93 57) -81]
Test Case: 593 | Input/Output: [(-64 -82 31 -65) -82]
Test Case: 594 | Input/Output: [(-43 -94 -10 1) -94]
Test Case: 595 | Input/Output: [(-6 15 50 -35) -35]
Test Case: 596 | Input/Output: [(81 -9 15 -84) -84]
Test Case: 597 | Input/Output: [(-59 -59 15 -89) -89]
Test Case: 598 | Input/Output: [(-49 32 -84 35) -84]
Test Case: 599 | Input/Output: [(30 -54 1 -38) -54]
Test Case: 600 | Input/Output: [(-29 -88 -74 74) -88]
Test Case: 601 | Input/Output: [(8 19 -99 -62) -99]
Test Case: 602 | Input/Output: [(12 83 -94 15) -94]
Test Case: 603 | Input/Output: [(-93 0 59 84) -93]
Test Case: 604 | Input/Output: [(13 49 -69 -72) -72]
Test Case: 605 | Input/Output: [(14 64 -29 25) -29]
Test Case: 606 | Input/Output: [(40 44 62 12) 12]
Test Case: 607 | Input/Output: [(4 -50 -86 41) -86]
Test Case: 608 | Input/Output: [(89 27 98 30) 27]
Test Case: 609 | Input/Output: [(64 45 -16 97) -16]
Test Case: 610 | Input/Output: [(49 44 -83 86) -83]
Test Case: 611 | Input/Output: [(67 -61 -46 52) -61]
Test Case: 612 | Input/Output: [(4 75 50 21) 4]
Test Case: 613 | Input/Output: [(34 -23 -48 25) -48]
Test Case: 614 | Input/Output: [(59 -25 -9 -28) -28]
Test Case: 615 | Input/Output: [(-45 71 -12 44) -45]
Test Case: 616 | Input/Output: [(-17 46 -40 -69) -69]
Test Case: 617 | Input/Output: [(-82 -70 58 -22) -82]
Test Case: 618 | Input/Output: [(-94 83 -59 -18) -94]
Test Case: 619 | Input/Output: [(20 57 -93 -49) -93]
Test Case: 620 | Input/Output: [(47 83 86 -57) -57]
Test Case: 621 | Input/Output: [(-78 2 -19 86) -78]
Test Case: 622 | Input/Output: [(99 74 23 -66) -66]
Test Case: 623 | Input/Output: [(47 88 -27 -96) -96]
Test Case: 624 | Input/Output: [(100 -95 99 51) -95]
Test Case: 625 | Input/Output: [(-33 85 51 14) -33]
Test Case: 626 | Input/Output: [(-90 17 -52 -49) -90]
Test Case: 627 | Input/Output: [(86 76 21 -2) -2]
Test Case: 628 | Input/Output: [(80 -99 78 27) -99]
Test Case: 629 | Input/Output: [(-12 16 -5 -33) -33]
Test Case: 630 | Input/Output: [(62 -82 -88 -90) -90]
Test Case: 631 | Input/Output: [(-18 66 37 38) -18]
Test Case: 632 | Input/Output: [(-95 70 9 79) -95]
Test Case: 633 | Input/Output: [(-59 10 -38 43) -59]
Test Case: 634 | Input/Output: [(90 83 30 -92) -92]
Test Case: 635 | Input/Output: [(92 78 -97 8) -97]
Test Case: 636 | Input/Output: [(88 -70 88 -7) -70]
Test Case: 637 | Input/Output: [(-44 -99 26 18) -99]
Test Case: 638 | Input/Output: [(16 -7 -54 5) -54]
Test Case: 639 | Input/Output: [(49 84 -47 50) -47]
Test Case: 640 | Input/Output: [(81 -24 55 8) -24]
Test Case: 641 | Input/Output: [(-26 -24 31 79) -26]
Test Case: 642 | Input/Output: [(-86 95 11 -73) -86]
Test Case: 643 | Input/Output: [(-26 -91 -7 71) -91]
Test Case: 644 | Input/Output: [(71 86 -97 87) -97]
Test Case: 645 | Input/Output: [(49 -57 -98 -59) -98]
Test Case: 646 | Input/Output: [(47 4 -94 13) -94]
Test Case: 647 | Input/Output: [(-1 -12 -70 86) -70]
Test Case: 648 | Input/Output: [(12 99 -51 82) -51]
Test Case: 649 | Input/Output: [(8 68 2 -14) -14]
Test Case: 650 | Input/Output: [(-67 64 -13 -84) -84]
Test Case: 651 | Input/Output: [(-30 -94 -15 14) -94]
Test Case: 652 | Input/Output: [(-4 66 -30 -3) -30]
Test Case: 653 | Input/Output: [(-36 6 -97 -55) -97]
Test Case: 654 | Input/Output: [(-16 -19 12 63) -19]
Test Case: 655 | Input/Output: [(-36 72 -6 9) -36]
Test Case: 656 | Input/Output: [(48 -15 39 -97) -97]
Test Case: 657 | Input/Output: [(-47 100 66 88) -47]
Test Case: 658 | Input/Output: [(95 92 44 81) 44]
Test Case: 659 | Input/Output: [(13 52 88 65) 13]
Test Case: 660 | Input/Output: [(54 9 37 54) 9]
Test Case: 661 | Input/Output: [(25 -7 -76 -75) -76]
Test Case: 662 | Input/Output: [(-20 40 30 72) -20]
Test Case: 663 | Input/Output: [(89 -98 20 86) -98]
Test Case: 664 | Input/Output: [(45 31 94 64) 31]
Test Case: 665 | Input/Output: [(-12 -81 74 -64) -81]
Test Case: 666 | Input/Output: [(100 -48 13 30) -48]
Test Case: 667 | Input/Output: [(24 -51 7 51) -51]
Test Case: 668 | Input/Output: [(26 -33 -18 17) -33]
Test Case: 669 | Input/Output: [(3 -9 92 -83) -83]
Test Case: 670 | Input/Output: [(18 75 -56 -49) -56]
Test Case: 671 | Input/Output: [(-89 -15 46 30) -89]
Test Case: 672 | Input/Output: [(87 -61 -22 -79) -79]
Test Case: 673 | Input/Output: [(-98 18 92 -46) -98]
Test Case: 674 | Input/Output: [(64 -29 90 -75) -75]
Test Case: 675 | Input/Output: [(-4 78 43 96) -4]
Test Case: 676 | Input/Output: [(-54 -62 22 -26) -62]
Test Case: 677 | Input/Output: [(-69 54 69 88) -69]
Test Case: 678 | Input/Output: [(-6 -44 -88 -59) -88]
Test Case: 679 | Input/Output: [(-53 -44 33 51) -53]
Test Case: 680 | Input/Output: [(48 -16 -26 -69) -69]
Test Case: 681 | Input/Output: [(-30 -53 -51 16) -53]
Test Case: 682 | Input/Output: [(-14 -17 -13 -15) -17]
Test Case: 683 | Input/Output: [(50 -77 -45 83) -77]
Test Case: 684 | Input/Output: [(-28 -97 62 5) -97]
Test Case: 685 | Input/Output: [(-33 -50 44 -52) -52]
Test Case: 686 | Input/Output: [(-55 7 -18 -20) -55]
Test Case: 687 | Input/Output: [(-8 -14 31 -83) -83]
Test Case: 688 | Input/Output: [(-55 58 73 72) -55]
Test Case: 689 | Input/Output: [(-5 -80 -58 -83) -83]
Test Case: 690 | Input/Output: [(-32 -43 57 33) -43]
Test Case: 691 | Input/Output: [(-53 48 19 -34) -53]
Test Case: 692 | Input/Output: [(-62 81 -68 17) -68]
Test Case: 693 | Input/Output: [(62 97 -99 0) -99]
Test Case: 694 | Input/Output: [(-12 -24 86 64) -24]
Test Case: 695 | Input/Output: [(99 38 84 -67) -67]
Test Case: 696 | Input/Output: [(-10 83 4 -85) -85]
Test Case: 697 | Input/Output: [(-94 -42 -62 -39) -94]
Test Case: 698 | Input/Output: [(-6 -18 -2 19) -18]
Test Case: 699 | Input/Output: [(-97 32 -57 73) -97]
Test Case: 700 | Input/Output: [(-99 -3 86 -88) -99]
Test Case: 701 | Input/Output: [(-98 -18 69 16) -98]
Test Case: 702 | Input/Output: [(61 86 86 42) 42]
Test Case: 703 | Input/Output: [(100 -30 57 42) -30]
Test Case: 704 | Input/Output: [(81 84 -89 -1) -89]
Test Case: 705 | Input/Output: [(86 45 -75 85) -75]
Test Case: 706 | Input/Output: [(-42 -88 -85 -11) -88]
Test Case: 707 | Input/Output: [(99 74 84 -99) -99]
Test Case: 708 | Input/Output: [(-50 -91 6 -34) -91]
Test Case: 709 | Input/Output: [(-86 39 -49 -60) -86]
Test Case: 710 | Input/Output: [(-88 8 76 83) -88]
Test Case: 711 | Input/Output: [(-72 -62 -56 -68) -72]
Test Case: 712 | Input/Output: [(-37 29 -10 -17) -37]
Test Case: 713 | Input/Output: [(-57 -64 44 18) -64]
Test Case: 714 | Input/Output: [(52 93 42 -1) -1]
Test Case: 715 | Input/Output: [(-53 -89 45 -1) -89]
Test Case: 716 | Input/Output: [(50 39 -54 -49) -54]
Test Case: 717 | Input/Output: [(-55 -19 -21 0) -55]
Test Case: 718 | Input/Output: [(31 -92 85 98) -92]
Test Case: 719 | Input/Output: [(83 -78 -63 -90) -90]
Test Case: 720 | Input/Output: [(-55 -11 52 20) -55]
Test Case: 721 | Input/Output: [(8 -5 -71 -47) -71]
Test Case: 722 | Input/Output: [(-12 -17 -12 39) -17]
Test Case: 723 | Input/Output: [(-82 -9 -40 71) -82]
Test Case: 724 | Input/Output: [(45 -7 -8 -73) -73]
Test Case: 725 | Input/Output: [(-31 81 3 -95) -95]
Test Case: 726 | Input/Output: [(38 -74 -33 62) -74]
Test Case: 727 | Input/Output: [(8 -71 31 -70) -71]
Test Case: 728 | Input/Output: [(88 -25 89 -6) -25]
Test Case: 729 | Input/Output: [(-98 40 -8 39) -98]
Test Case: 730 | Input/Output: [(-47 12 63 26) -47]
Test Case: 731 | Input/Output: [(-59 22 -56 38) -59]
Test Case: 732 | Input/Output: [(16 -46 -42 100) -46]
Test Case: 733 | Input/Output: [(97 -65 -53 64) -65]
Test Case: 734 | Input/Output: [(-41 -81 86 -52) -81]
Test Case: 735 | Input/Output: [(-50 20 32 -3) -50]
Test Case: 736 | Input/Output: [(46 11 99 -88) -88]
Test Case: 737 | Input/Output: [(-58 -48 -3 54) -58]
Test Case: 738 | Input/Output: [(79 -8 -45 43) -45]
Test Case: 739 | Input/Output: [(-67 93 -43 -14) -67]
Test Case: 740 | Input/Output: [(71 57 -2 42) -2]
Test Case: 741 | Input/Output: [(72 -99 -37 -4) -99]
Test Case: 742 | Input/Output: [(-41 -50 84 -98) -98]
Test Case: 743 | Input/Output: [(-79 87 69 84) -79]
Test Case: 744 | Input/Output: [(24 37 94 -43) -43]
Test Case: 745 | Input/Output: [(31 -20 1 68) -20]
Test Case: 746 | Input/Output: [(54 24 3 19) 3]
Test Case: 747 | Input/Output: [(66 -83 -41 30) -83]
Test Case: 748 | Input/Output: [(85 -22 59 -76) -76]
Test Case: 749 | Input/Output: [(-97 11 75 8) -97]
Test Case: 750 | Input/Output: [(-10 -62 96 -11) -62]
Test Case: 751 | Input/Output: [(-47 -96 64 87) -96]
Test Case: 752 | Input/Output: [(76 13 -24 -83) -83]
Test Case: 753 | Input/Output: [(73 82 53 9) 9]
Test Case: 754 | Input/Output: [(-9 -16 1 25) -16]
Test Case: 755 | Input/Output: [(-91 64 5 -30) -91]
Test Case: 756 | Input/Output: [(99 -92 -95 98) -95]
Test Case: 757 | Input/Output: [(-34 -97 -10 99) -97]
Test Case: 758 | Input/Output: [(-15 25 81 -83) -83]
Test Case: 759 | Input/Output: [(68 -11 -50 17) -50]
Test Case: 760 | Input/Output: [(56 74 80 62) 56]
Test Case: 761 | Input/Output: [(27 72 5 25) 5]
Test Case: 762 | Input/Output: [(-92 -44 -1 -67) -92]
Test Case: 763 | Input/Output: [(-61 47 100 -53) -61]
Test Case: 764 | Input/Output: [(76 -37 83 23) -37]
Test Case: 765 | Input/Output: [(21 -78 30 4) -78]
Test Case: 766 | Input/Output: [(57 74 -66 17) -66]
Test Case: 767 | Input/Output: [(62 0 -29 29) -29]
Test Case: 768 | Input/Output: [(65 -54 7 91) -54]
Test Case: 769 | Input/Output: [(49 51 -89 73) -89]
Test Case: 770 | Input/Output: [(58 -32 -52 -47) -52]
Test Case: 771 | Input/Output: [(-12 19 54 15) -12]
Test Case: 772 | Input/Output: [(-5 -40 -49 6) -49]
Test Case: 773 | Input/Output: [(-69 2 -56 18) -69]
Test Case: 774 | Input/Output: [(-31 -72 47 -60) -72]
Test Case: 775 | Input/Output: [(-63 36 62 -60) -63]
Test Case: 776 | Input/Output: [(-93 -67 95 32) -93]
Test Case: 777 | Input/Output: [(-56 12 88 -14) -56]
Test Case: 778 | Input/Output: [(69 11 37 -77) -77]
Test Case: 779 | Input/Output: [(-99 -72 -92 82) -99]
Test Case: 780 | Input/Output: [(93 -67 5 62) -67]
Test Case: 781 | Input/Output: [(-16 4 44 -62) -62]
Test Case: 782 | Input/Output: [(-77 36 -89 -40) -89]
Test Case: 783 | Input/Output: [(91 61 -39 74) -39]
Test Case: 784 | Input/Output: [(95 39 -44 -64) -64]
Test Case: 785 | Input/Output: [(32 -40 6 -20) -40]
Test Case: 786 | Input/Output: [(-33 40 -98 27) -98]
Test Case: 787 | Input/Output: [(49 32 -29 -57) -57]
Test Case: 788 | Input/Output: [(3 -51 -34 -31) -51]
Test Case: 789 | Input/Output: [(100 61 -90 39) -90]
Test Case: 790 | Input/Output: [(68 -35 -84 -44) -84]
Test Case: 791 | Input/Output: [(-98 27 -89 -2) -98]
Test Case: 792 | Input/Output: [(60 -22 -69 -85) -85]
Test Case: 793 | Input/Output: [(80 -77 -97 91) -97]
Test Case: 794 | Input/Output: [(-64 100 -5 73) -64]
Test Case: 795 | Input/Output: [(-84 -74 58 33) -84]
Test Case: 796 | Input/Output: [(46 45 -37 -2) -37]
Test Case: 797 | Input/Output: [(31 -66 57 -75) -75]
Test Case: 798 | Input/Output: [(92 -1 25 7) -1]
Test Case: 799 | Input/Output: [(-5 -7 -76 -45) -76]
Test Case: 800 | Input/Output: [(10 72 -100 -33) -100]
Test Case: 801 | Input/Output: [(70 -13 99 41) -13]
Test Case: 802 | Input/Output: [(-36 -24 -36 -88) -88]
Test Case: 803 | Input/Output: [(-84 -38 -27 88) -84]
Test Case: 804 | Input/Output: [(36 -98 83 -56) -98]
Test Case: 805 | Input/Output: [(-53 -48 21 32) -53]
Test Case: 806 | Input/Output: [(-43 -23 -33 -7) -43]
Test Case: 807 | Input/Output: [(-33 74 -90 42) -90]
Test Case: 808 | Input/Output: [(-50 -75 43 73) -75]
Test Case: 809 | Input/Output: [(-15 -11 8 -4) -15]
Test Case: 810 | Input/Output: [(-63 -7 -13 -31) -63]
Test Case: 811 | Input/Output: [(31 99 -93 96) -93]
Test Case: 812 | Input/Output: [(78 9 61 69) 9]
Test Case: 813 | Input/Output: [(62 95 -86 16) -86]
Test Case: 814 | Input/Output: [(23 11 66 80) 11]
Test Case: 815 | Input/Output: [(-37 85 -69 74) -69]
Test Case: 816 | Input/Output: [(-84 -72 -66 -46) -84]
Test Case: 817 | Input/Output: [(-50 84 -41 7) -50]
Test Case: 818 | Input/Output: [(-47 -12 74 31) -47]
Test Case: 819 | Input/Output: [(58 -99 -98 -78) -99]
Test Case: 820 | Input/Output: [(10 52 8 -19) -19]
Test Case: 821 | Input/Output: [(94 -34 93 12) -34]
Test Case: 822 | Input/Output: [(20 -33 61 -98) -98]
Test Case: 823 | Input/Output: [(23 -26 32 60) -26]
Test Case: 824 | Input/Output: [(-36 -51 67 -71) -71]
Test Case: 825 | Input/Output: [(25 10 -92 -8) -92]
Test Case: 826 | Input/Output: [(45 -21 7 65) -21]
Test Case: 827 | Input/Output: [(-95 48 -29 -84) -95]
Test Case: 828 | Input/Output: [(-89 -42 -10 -3) -89]
Test Case: 829 | Input/Output: [(-98 52 68 53) -98]
Test Case: 830 | Input/Output: [(75 11 -16 -56) -56]
Test Case: 831 | Input/Output: [(-62 -19 27 63) -62]
Test Case: 832 | Input/Output: [(-87 -12 100 77) -87]
Test Case: 833 | Input/Output: [(29 -34 -70 -41) -70]
Test Case: 834 | Input/Output: [(-21 -50 94 -1) -50]
Test Case: 835 | Input/Output: [(-77 47 91 -66) -77]
Test Case: 836 | Input/Output: [(-69 84 0 49) -69]
Test Case: 837 | Input/Output: [(26 100 -55 74) -55]
Test Case: 838 | Input/Output: [(-57 -95 42 64) -95]
Test Case: 839 | Input/Output: [(-67 25 60 -76) -76]
Test Case: 840 | Input/Output: [(22 -18 -28 -69) -69]
Test Case: 841 | Input/Output: [(-11 -24 31 52) -24]
Test Case: 842 | Input/Output: [(-38 -31 27 60) -38]
Test Case: 843 | Input/Output: [(21 -63 -71 82) -71]
Test Case: 844 | Input/Output: [(90 -46 -83 -25) -83]
Test Case: 845 | Input/Output: [(4 4 -35 -99) -99]
Test Case: 846 | Input/Output: [(59 -81 -83 -55) -83]
Test Case: 847 | Input/Output: [(-16 45 -92 -82) -92]
Test Case: 848 | Input/Output: [(57 5 -23 97) -23]
Test Case: 849 | Input/Output: [(1 77 98 -59) -59]
Test Case: 850 | Input/Output: [(-2 74 -58 61) -58]
Test Case: 851 | Input/Output: [(-13 -9 -90 -29) -90]
Test Case: 852 | Input/Output: [(68 -84 -64 -51) -84]
Test Case: 853 | Input/Output: [(54 -12 42 89) -12]
Test Case: 854 | Input/Output: [(-76 -64 13 -48) -76]
Test Case: 855 | Input/Output: [(56 -31 -21 -61) -61]
Test Case: 856 | Input/Output: [(90 54 -93 64) -93]
Test Case: 857 | Input/Output: [(38 -78 11 99) -78]
Test Case: 858 | Input/Output: [(85 63 -11 8) -11]
Test Case: 859 | Input/Output: [(12 -11 -12 -98) -98]
Test Case: 860 | Input/Output: [(-93 24 38 -70) -93]
Test Case: 861 | Input/Output: [(-45 -3 -95 94) -95]
Test Case: 862 | Input/Output: [(-93 0 82 -100) -100]
Test Case: 863 | Input/Output: [(57 16 -19 76) -19]
Test Case: 864 | Input/Output: [(24 -92 -83 -39) -92]
Test Case: 865 | Input/Output: [(20 -62 78 44) -62]
Test Case: 866 | Input/Output: [(-79 0 93 60) -79]
Test Case: 867 | Input/Output: [(-78 82 -31 -25) -78]
Test Case: 868 | Input/Output: [(91 -63 98 53) -63]
Test Case: 869 | Input/Output: [(77 34 23 38) 23]
Test Case: 870 | Input/Output: [(-12 58 16 -90) -90]
Test Case: 871 | Input/Output: [(6 -92 -31 -35) -92]
Test Case: 872 | Input/Output: [(14 38 -54 73) -54]
Test Case: 873 | Input/Output: [(50 -3 76 57) -3]
Test Case: 874 | Input/Output: [(83 32 -16 -53) -53]
Test Case: 875 | Input/Output: [(57 -35 -19 97) -35]
Test Case: 876 | Input/Output: [(-84 81 -61 -59) -84]
Test Case: 877 | Input/Output: [(1 40 -98 -14) -98]
Test Case: 878 | Input/Output: [(-14 -11 -83 60) -83]
Test Case: 879 | Input/Output: [(-96 94 -39 -88) -96]
Test Case: 880 | Input/Output: [(-56 12 -18 -34) -56]
Test Case: 881 | Input/Output: [(84 -37 82 36) -37]
Test Case: 882 | Input/Output: [(75 -18 -29 -66) -66]
Test Case: 883 | Input/Output: [(23 35 32 100) 23]
Test Case: 884 | Input/Output: [(-11 -8 -84 41) -84]
Test Case: 885 | Input/Output: [(66 99 82 -9) -9]
Test Case: 886 | Input/Output: [(37 -28 32 100) -28]
Test Case: 887 | Input/Output: [(95 -7 27 89) -7]
Test Case: 888 | Input/Output: [(59 -98 13 -55) -98]
Test Case: 889 | Input/Output: [(46 -34 -58 1) -58]
Test Case: 890 | Input/Output: [(-27 -68 8 84) -68]
Test Case: 891 | Input/Output: [(-36 -5 62 -90) -90]
Test Case: 892 | Input/Output: [(-77 65 11 63) -77]
Test Case: 893 | Input/Output: [(49 15 -11 46) -11]
Test Case: 894 | Input/Output: [(-44 -16 11 -89) -89]
Test Case: 895 | Input/Output: [(6 -51 64 -56) -56]
Test Case: 896 | Input/Output: [(48 49 -39 -1) -39]
Test Case: 897 | Input/Output: [(-35 89 -24 -89) -89]
Test Case: 898 | Input/Output: [(63 -95 -51 -48) -95]
Test Case: 899 | Input/Output: [(50 29 -77 58) -77]
Test Case: 900 | Input/Output: [(-99 -36 32 -63) -99]
Test Case: 901 | Input/Output: [(-19 83 90 -81) -81]
Test Case: 902 | Input/Output: [(62 48 -24 64) -24]
Test Case: 903 | Input/Output: [(-41 -11 -38 2) -41]
Test Case: 904 | Input/Output: [(15 9 -52 -56) -56]
Test Case: 905 | Input/Output: [(46 6 24 100) 6]
Test Case: 906 | Input/Output: [(5 79 31 -89) -89]
Test Case: 907 | Input/Output: [(100 17 -44 -37) -44]
Test Case: 908 | Input/Output: [(-31 -76 -37 -43) -76]
Test Case: 909 | Input/Output: [(-27 -30 -74 -4) -74]
Test Case: 910 | Input/Output: [(26 33 29 86) 26]
Test Case: 911 | Input/Output: [(-32 -6 -60 9) -60]
Test Case: 912 | Input/Output: [(94 -51 76 71) -51]
Test Case: 913 | Input/Output: [(-46 25 -52 38) -52]
Test Case: 914 | Input/Output: [(-84 12 49 52) -84]
Test Case: 915 | Input/Output: [(-41 -86 -79 -60) -86]
Test Case: 916 | Input/Output: [(26 65 62 79) 26]
Test Case: 917 | Input/Output: [(61 37 -40 62) -40]
Test Case: 918 | Input/Output: [(47 40 59 36) 36]
Test Case: 919 | Input/Output: [(-50 20 -9 -17) -50]
Test Case: 920 | Input/Output: [(-85 -71 56 -77) -85]
Test Case: 921 | Input/Output: [(-43 69 -73 -78) -78]
Test Case: 922 | Input/Output: [(94 78 10 10) 10]
Test Case: 923 | Input/Output: [(-37 72 3 34) -37]
Test Case: 924 | Input/Output: [(-70 62 -71 -42) -71]
Test Case: 925 | Input/Output: [(-74 22 -85 -53) -85]
Test Case: 926 | Input/Output: [(-89 -91 28 -19) -91]
Test Case: 927 | Input/Output: [(70 -62 69 57) -62]
Test Case: 928 | Input/Output: [(-40 3 -53 98) -53]
Test Case: 929 | Input/Output: [(-57 98 72 87) -57]
Test Case: 930 | Input/Output: [(-50 -90 -37 -20) -90]
Test Case: 931 | Input/Output: [(-15 -90 -41 71) -90]
Test Case: 932 | Input/Output: [(-74 -29 -19 -28) -74]
Test Case: 933 | Input/Output: [(87 -81 45 -36) -81]
Test Case: 934 | Input/Output: [(92 29 -83 -62) -83]
Test Case: 935 | Input/Output: [(50 65 -9 27) -9]
Test Case: 936 | Input/Output: [(35 -68 -82 -23) -82]
Test Case: 937 | Input/Output: [(-15 7 7 -58) -58]
Test Case: 938 | Input/Output: [(-62 82 -87 24) -87]
Test Case: 939 | Input/Output: [(8 -10 89 34) -10]
Test Case: 940 | Input/Output: [(82 54 -55 34) -55]
Test Case: 941 | Input/Output: [(41 -9 65 -66) -66]
Test Case: 942 | Input/Output: [(-70 -67 -21 -23) -70]
Test Case: 943 | Input/Output: [(94 62 46 8) 8]
Test Case: 944 | Input/Output: [(40 18 -16 81) -16]
Test Case: 945 | Input/Output: [(-78 -22 -22 16) -78]
Test Case: 946 | Input/Output: [(95 -3 98 87) -3]
Test Case: 947 | Input/Output: [(-32 31 82 36) -32]
Test Case: 948 | Input/Output: [(18 -9 -27 16) -27]
Test Case: 949 | Input/Output: [(4 -41 45 56) -41]
Test Case: 950 | Input/Output: [(-74 40 77 -56) -74]
Test Case: 951 | Input/Output: [(42 42 33 29) 29]
Test Case: 952 | Input/Output: [(-53 23 5 -22) -53]
Test Case: 953 | Input/Output: [(67 -82 48 68) -82]
Test Case: 954 | Input/Output: [(-28 30 -40 60) -40]
Test Case: 955 | Input/Output: [(-68 -35 60 91) -68]
Test Case: 956 | Input/Output: [(-98 -19 -34 -25) -98]
Test Case: 957 | Input/Output: [(2 -13 37 67) -13]
Test Case: 958 | Input/Output: [(38 48 57 25) 25]
Test Case: 959 | Input/Output: [(94 -86 80 -83) -86]
Test Case: 960 | Input/Output: [(-90 45 -19 -49) -90]
Test Case: 961 | Input/Output: [(-58 -98 35 -77) -98]
Test Case: 962 | Input/Output: [(45 -44 84 35) -44]
Test Case: 963 | Input/Output: [(57 54 10 -2) -2]
Test Case: 964 | Input/Output: [(-53 -15 -43 -9) -53]
Test Case: 965 | Input/Output: [(-11 63 93 66) -11]
Test Case: 966 | Input/Output: [(-28 39 -86 64) -86]
Test Case: 967 | Input/Output: [(-20 -21 19 31) -21]
Test Case: 968 | Input/Output: [(-16 99 18 -69) -69]
Test Case: 969 | Input/Output: [(70 -64 -52 40) -64]
Test Case: 970 | Input/Output: [(-76 34 42 20) -76]
Test Case: 971 | Input/Output: [(-29 -99 99 14) -99]
Test Case: 972 | Input/Output: [(-89 36 79 8) -89]
Test Case: 973 | Input/Output: [(17 68 -58 66) -58]
Test Case: 974 | Input/Output: [(-23 72 18 19) -23]
Test Case: 975 | Input/Output: [(-100 -18 -83 73) -100]
Test Case: 976 | Input/Output: [(93 61 -56 -100) -100]
Test Case: 977 | Input/Output: [(0 -47 -52 -20) -52]
Test Case: 978 | Input/Output: [(-39 -78 -5 -73) -78]
Test Case: 979 | Input/Output: [(-48 71 -57 -19) -57]
Test Case: 980 | Input/Output: [(8 44 69 82) 8]
Test Case: 981 | Input/Output: [(-93 43 -38 -53) -93]
Test Case: 982 | Input/Output: [(63 76 42 92) 42]
Test Case: 983 | Input/Output: [(61 -94 44 59) -94]
Test Case: 984 | Input/Output: [(-50 -24 2 -54) -54]
Test Case: 985 | Input/Output: [(96 81 27 -70) -70]
Test Case: 986 | Input/Output: [(-57 83 22 33) -57]
Test Case: 987 | Input/Output: [(99 -69 -92 42) -92]
Test Case: 988 | Input/Output: [(41 -3 -73 10) -73]
Test Case: 989 | Input/Output: [(42 -52 70 -69) -69]
Test Case: 990 | Input/Output: [(-88 -81 -36 41) -88]
Test Case: 991 | Input/Output: [(-74 13 91 -4) -74]
Test Case: 992 | Input/Output: [(-22 61 -49 94) -49]
Test Case: 993 | Input/Output: [(41 -99 -42 -49) -99]
Test Case: 994 | Input/Output: [(-89 78 -70 -90) -90]
Test Case: 995 | Input/Output: [(-44 -15 -21 91) -44]
Test Case: 996 | Input/Output: [(-60 -36 56 51) -60]
Test Case: 997 | Input/Output: [(-69 61 -76 -83) -83]
Test Case: 998 | Input/Output: [(-89 -89 -43 -89) -89]
Test Case: 999 | Input/Output: [(-100 65 -73 -100) -100]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 86 -82 -124 -118 -111 40 -81 -125 -113 122 100 -70 2 40 84 107
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-17 -17 -17 -87] -87] [[-68 -40 -40 -40] -68] [[76 76 76 -23] -23] [[56 -61 -61 -61] -61] [[-65 -65 66 -65] -65] [[-61 13 13 13] -61] [[98 98 98 65] 65] [[55 55 55 -61] -61] [[79 79 -20 79] -20] [[97 97 97 -22] -22] [(35 35 35 35) 35] [(-28 -28 -28 -28) -28] [(57 57 57 57) 57] [(22 22 22 22) 22] [(94 94 94 94) 94] [(9 52 53 33) 9] [(82 64 21 18) 18] [(15 83 39 18) 15] [(82 73 29 25) 25] [(93 9 98 16) 9] [(6 4 74 30) 4] [(42 14 52 3) 3] [(28 38 32 46) 28] [(9 27 62 80) 9] [(66 71 89 4) 4] [(42 93 14 72) 14] [(67 32 44 49) 32] [(70 7 45 47) 7] [(45 7 9 57) 7] [(41 100 23 42) 23] [(7 60 24 64) 7] [(71 46 90 13) 13] [(58 69 74 96) 58] [(76 36 15 36) 15] [(40 99 36 92) 36] [(68 -79 -83 -59) -83] [(-86 -24 38 -66) -86] [(-72 35 -88 100) -88] [(-20 -18 -50 27) -50] [(-91 2 -7 -64) -91] [(15 92 -4 92) -4] [(32 -56 59 46) -56] [(-33 -11 -74 -85) -85] [(-55 -59 -54 -80) -80] [(72 -74 85 -10) -74] [(32 50 -11 -69) -69] [(-80 44 -62 -73) -80] [(90 -49 88 42) -49] [(-56 5 56 -64) -64] [(-31 -100 32 -71) -100] [(82 -30 -85 17) -85] [(99 53 82 -42) -42] [(-83 -75 -52 -62) -83] [(40 -19 62 -76) -76] [(-87 -29 37 28) -87] [(-38 62 24 -62) -62] [(80 14 -6 -21) -21] [(21 -91 31 -45) -91] [(96 -59 -71 -18) -71] [(19 -87 99 -85) -87] [(-64 -83 -85 -41) -85] [(93 62 -96 -79) -96] [(-60 82 -76 -88) -88] [(98 24 -1 62) -1] [(77 83 20 -59) -59] [(-50 -58 -19 -63) -63] [(-10 -45 -4 10) -45] [(60 -91 -17 -73) -91] [(13 76 -57 16) -57] [(-48 42 -69 76) -69] [(81 -55 -92 66) -92] [(15 -45 -100 86) -100] [(-67 -40 -56 77) -67] [(62 35 -9 -45) -45] [(13 75 -5 -39) -39] [(24 -85 55 -9) -85] [(53 86 19 65) 19] [(-65 -3 -62 37) -65] [(-61 -12 3 2) -61] [(-29 96 99 -99) -99] [(47 -39 -15 -62) -62] [(-93 99 8 -25) -93] [(-76 21 55 -15) -76] [(12 -40 21 -87) -87] [(15 83 -21 56) -21] [(67 86 -62 -12) -62] [(70 -21 41 -85) -85] [(-16 -71 28 -60) -71] [(38 -1 60 -100) -100] [(-55 -4 -61 90) -61] [(39 -17 -79 81) -79] [(25 -66 54 30) -66] [(47 28 -30 7) -30] [(35 19 -90 19) -90] [(39 79 -31 84) -31])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: 79                 
Correct output: -22                 | Program output: -22                
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 46                 
Correct output: 9                   | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 32                  | Program output: 49                 
Correct output: 7                   | Program output: 47                 
Correct output: 7                   | Program output: 57                 
Correct output: 23                  | Program output: 42                 
Correct output: 7                   | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 58                  | Program output: 96                 
Correct output: 15                  | Program output: 36                 
Correct output: 36                  | Program output: 92                 
Correct output: -83                 | Program output: -59                
Correct output: -86                 | Program output: -66                
Correct output: -88                 | Program output: 100                
Correct output: -50                 | Program output: 27                 
Correct output: -91                 | Program output: -64                
Correct output: -4                  | Program output: 92                 
Correct output: -56                 | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -10                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: 42                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -71                
Correct output: -85                 | Program output: 17                 
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -62                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 28                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -45                
Correct output: -71                 | Program output: -18                
Correct output: -87                 | Program output: -85                
Correct output: -85                 | Program output: -41                
Correct output: -96                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -1                  | Program output: 62                 
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: 10                 
Correct output: -91                 | Program output: -73                
Correct output: -57                 | Program output: 16                 
Correct output: -69                 | Program output: 76                 
Correct output: -92                 | Program output: 66                 
Correct output: -100                | Program output: 86                 
Correct output: -67                 | Program output: 77                 
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: 19                  | Program output: 65                 
Correct output: -65                 | Program output: 37                 
Correct output: -61                 | Program output: 2                  
Correct output: -99                 | Program output: -99                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -25                
Correct output: -76                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 56                 
Correct output: -62                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -71                 | Program output: -60                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: 90                 
Correct output: -79                 | Program output: 81                 
Correct output: -66                 | Program output: 30                 
Correct output: -30                 | Program output: 7                  
Correct output: -90                 | Program output: 19                 
Correct output: -31                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_not} {:close 0, :instruction 18} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add})
Lexicase best program: (integer_eq integer_dec boolean_yankdup in4 print_integer boolean_invert_first_then_and integer_add exec_dup_times (boolean_dup_times exec_s_when_autoconstructing (integer_gt integer_eq integer_fromboolean) (integer_shove exec_eq exec_flush integer_inc integer_empty boolean_empty boolean_shove integer_gte integer_gt exec_stackdepth boolean_xor) (integer_flush boolean_empty integer_pop) integer_dec exec_when (boolean_and) exec_stackdepth) integer_lte boolean_eq boolean_dup exec_when () exec_pop (integer_mult) integer_shove exec_noop exec_while (integer_flush exec_s_when_autoconstructing (integer_lt in3 boolean_or exec_do*times () exec_dup_times (integer_lte exec_do*while (integer_sub) boolean_not) 18 boolean_flush integer_lt integer_lte) (integer_sub integer_swap exec_k (integer_rot exec_do*count (integer_mult integer_mod)) (boolean_invert_first_then_and exec_empty exec_s_when_autoconstructing (exec_shove ()) (boolean_or integer_add) ())) ()))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_not} {:close 0, :instruction 18} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add})
Zero cases best program: (integer_eq integer_dec boolean_yankdup in4 print_integer boolean_invert_first_then_and integer_add exec_dup_times (boolean_dup_times exec_s_when_autoconstructing (integer_gt integer_eq integer_fromboolean) (integer_shove exec_eq exec_flush integer_inc integer_empty boolean_empty boolean_shove integer_gte integer_gt exec_stackdepth boolean_xor) (integer_flush boolean_empty integer_pop) integer_dec exec_when (boolean_and) exec_stackdepth) integer_lte boolean_eq boolean_dup exec_when () exec_pop (integer_mult) integer_shove exec_noop exec_while (integer_flush exec_s_when_autoconstructing (integer_lt in3 boolean_or exec_do*times () exec_dup_times (integer_lte exec_do*while (integer_sub) boolean_not) 18 boolean_flush integer_lt integer_lte) (integer_sub integer_swap exec_k (integer_rot exec_do*count (integer_mult integer_mod)) (boolean_invert_first_then_and exec_empty exec_s_when_autoconstructing (exec_shove ()) (boolean_or integer_add) ())) ()))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 2 2 4 4 4 2 3 2 6)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (4 2 2 4 4 4 2 3 2 6)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 2, :instruction tagged_133} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction in4})
Best program: (exec_shove () exec_rot (in4 exec_pop (exec_dup_items boolean_flush boolean_eq boolean_rot) print_integer tagged_133) () (exec_yankdup) exec_swap (integer_shove exec_flush integer_dup_items exec_do*times (integer_empty exec_s (exec_do*range (integer_stackdepth integer_yankdup) integer_yank integer_rot exec_dup_items integer_empty) (integer_empty) (exec_swap (integer_dec) (integer_pop exec_swap (exec_eq integer_empty exec_k_when_autoconstructing (integer_inc boolean_yankdup exec_yankdup integer_mult boolean_dup_times integer_eq boolean_invert_first_then_and exec_if (exec_noop) (integer_lte) boolean_dup_items exec_do*times (integer_lt boolean_dup exec_dup () boolean_rot exec_dup_times (integer_shove integer_yankdup integer_lt exec_while (boolean_or boolean_swap) boolean_empty integer_dec integer_shove integer_div)) exec_do*count (integer_max boolean_dup_times) print_newline) () integer_dup_items exec_noop boolean_rot boolean_dup_times integer_mod in4) ())))) ())
Errors: [1 0 0 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 70
Size: 96
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.996 0.998 0.998 0.996 0.996 0.996 0.998 0.997 0.998 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.16
Average program size in population (points): 67.38
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 461626
--- Timings ---
Current time: 1559593843743 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.8 seconds, 33.0%
Fitness Testing:      1.6 seconds, 62.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -17                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: 76                 
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: 66                 
Correct output: -61                 | Program output: 13                 
Correct output: 65                  | Program output: 98                 
Correct output: -61                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -22                 | Program output: 97                 
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 53                 
Correct output: 18                  | Program output: 21                 
Correct output: 15                  | Program output: 39                 
Correct output: 25                  | Program output: 29                 
Correct output: 9                   | Program output: 98                 
Correct output: 4                   | Program output: 74                 
Correct output: 3                   | Program output: 52                 
Correct output: 28                  | Program output: 32                 
Correct output: 9                   | Program output: 62                 
Correct output: 4                   | Program output: 89                 
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 44                 
Correct output: 7                   | Program output: 45                 
Correct output: 7                   | Program output: 9                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 24                 
Correct output: 13                  | Program output: 90                 
Correct output: 58                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: 38                 
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -7                 
Correct output: -4                  | Program output: -4                 
Correct output: -56                 | Program output: 59                 
Correct output: -85                 | Program output: -74                
Correct output: -80                 | Program output: -54                
Correct output: -74                 | Program output: 85                 
Correct output: -69                 | Program output: -11                
Correct output: -80                 | Program output: -62                
Correct output: -49                 | Program output: 88                 
Correct output: -64                 | Program output: 56                 
Correct output: -100                | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: 82                 
Correct output: -83                 | Program output: -52                
Correct output: -76                 | Program output: 62                 
Correct output: -87                 | Program output: 37                 
Correct output: -62                 | Program output: 24                 
Correct output: -21                 | Program output: -6                 
Correct output: -91                 | Program output: 31                 
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -76                
Correct output: -1                  | Program output: -1                 
Correct output: -59                 | Program output: 20                 
Correct output: -63                 | Program output: -19                
Correct output: -45                 | Program output: -4                 
Correct output: -91                 | Program output: -17                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -45                 | Program output: -9                 
Correct output: -39                 | Program output: -5                 
Correct output: -85                 | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -62                
Correct output: -61                 | Program output: 3                  
Correct output: -99                 | Program output: 99                 
Correct output: -62                 | Program output: -15                
Correct output: -93                 | Program output: 8                  
Correct output: -76                 | Program output: 55                 
Correct output: -87                 | Program output: 21                 
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: 41                 
Correct output: -71                 | Program output: 28                 
Correct output: -100                | Program output: 60                 
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 54                 
Correct output: -30                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_inc integer_rot boolean_yank in4 in3 integer_rot print_integer boolean_and print_boolean boolean_xor exec_do*count (exec_swap (integer_yank integer_yank) (boolean_rot exec_pop (boolean_dup_times integer_lte))))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 23
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_inc integer_rot boolean_yank in4 in3 integer_rot print_integer boolean_and print_boolean boolean_xor exec_do*count (exec_swap (integer_yank integer_yank) (boolean_rot exec_pop (boolean_dup_times integer_lte))))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 23
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (264 584 296 620 254 266 262 63 610 263)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (264 584 296 620 254 266 262 63 610 263)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Best program: (integer_mod exec_noop integer_div boolean_swap boolean_xor exec_when () boolean_rot in3 integer_dup_times integer_sub print_integer boolean_and integer_shove integer_lt integer_inc in2 exec_rot (exec_flush integer_lte) (boolean_dup_items boolean_eq) (integer_inc tagged_321) boolean_yank integer_lt integer_inc exec_yank integer_gt boolean_invert_first_then_and boolean_or integer_empty print_boolean exec_stackdepth exec_empty exec_if (exec_y_when_autoconstructing (integer_inc boolean_stackdepth boolean_dup) exec_if (integer_swap) (exec_rot (print_exec (boolean_yank) integer_sub boolean_eq boolean_stackdepth in1 boolean_empty) (integer_div exec_if (exec_y (exec_s (in2 integer_inc exec_yankdup integer_dec boolean_frominteger boolean_not) (boolean_or exec_y (exec_s_when_autoconstructing (boolean_xor) (exec_stackdepth exec_do*while ()) ())) ())) ()) ())) ())
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 65
Size: 90
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.518
Median total errors in population: 6
Error averages by case: (0.736 0.416 0.704 0.38 0.746 0.734 0.738 0.937 0.39 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.449
Average program size in population (points): 75.265
Average percent parens in population: 0.244
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 931105
--- Timings ---
Current time: 1559593845584 milliseconds
Total Time:           4.4 seconds
Initialization:       0.1 seconds,  2.6%
Reproduction:         1.8 seconds, 41.9%
Fitness Testing:      2.1 seconds, 47.9%
Report:               0.3 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -17                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 46                 
Correct output: 9                   | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 32                  | Program output: 49                 
Correct output: 7                   | Program output: 47                 
Correct output: 7                   | Program output: 57                 
Correct output: 23                  | Program output: 42                 
Correct output: 7                   | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 58                  | Program output: 96                 
Correct output: 15                  | Program output: 36                 
Correct output: 36                  | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -7                 
Correct output: -4                  | Program output: -4                 
Correct output: -56                 | Program output: 46                 
Correct output: -85                 | Program output: -74                
Correct output: -80                 | Program output: -54                
Correct output: -74                 | Program output: -10                
Correct output: -69                 | Program output: -11                
Correct output: -80                 | Program output: -62                
Correct output: -49                 | Program output: 42                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 28                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -6                 
Correct output: -91                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -76                
Correct output: -1                  | Program output: -1                 
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -19                
Correct output: -45                 | Program output: -4                 
Correct output: -91                 | Program output: -17                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -45                 | Program output: -9                 
Correct output: -39                 | Program output: -5                 
Correct output: -85                 | Program output: -9                 
Correct output: 19                  | Program output: 65                 
Correct output: -65                 | Program output: -62                
Correct output: -61                 | Program output: 2                  
Correct output: -99                 | Program output: -99                
Correct output: -62                 | Program output: -15                
Correct output: -93                 | Program output: -25                
Correct output: -76                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -71                 | Program output: -60                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_mod exec_noop integer_stackdepth in3 boolean_xor exec_when () in4 boolean_rot in3 integer_dup_times print_integer boolean_and integer_shove integer_inc in2 exec_rot (exec_flush integer_lte) (boolean_dup_items boolean_eq) (integer_inc boolean_xor) print_newline tagged_321 boolean_yank boolean_invert_first_then_and integer_inc exec_yank integer_gt boolean_or integer_empty print_boolean exec_while () exec_if (exec_do*while (integer_eq boolean_stackdepth boolean_dup) exec_if (exec_rot (print_exec (boolean_eq boolean_stackdepth boolean_empty) exec_if (exec_s (exec_if (in2 integer_inc exec_yankdup -1 boolean_frominteger exec_dup (boolean_or exec_y (exec_s_when_autoconstructing (exec_while () boolean_xor) (exec_stackdepth exec_do*while ()) ()))) ()) () ()) ()) () ()) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 89
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_mod exec_noop integer_stackdepth in3 boolean_xor exec_when () in4 boolean_rot in3 integer_dup_times print_integer boolean_and integer_shove integer_inc in2 exec_rot (exec_flush integer_lte) (boolean_dup_items boolean_eq) (integer_inc boolean_xor) print_newline tagged_321 boolean_yank boolean_invert_first_then_and integer_inc exec_yank integer_gt boolean_or integer_empty print_boolean exec_while () exec_if (exec_do*while (integer_eq boolean_stackdepth boolean_dup) exec_if (exec_rot (print_exec (boolean_eq boolean_stackdepth boolean_empty) exec_if (exec_s (exec_if (in2 integer_inc exec_yankdup -1 boolean_frominteger exec_dup (boolean_or exec_y (exec_s_when_autoconstructing (exec_while () boolean_xor) (exec_stackdepth exec_do*while ()) ()))) ()) () ()) ()) () ()) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 89
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 456 79 592 465 465 459 190 4 80)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (190 456 79 592 465 465 459 190 4 80)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_495} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Best program: (integer_mod exec_noop boolean_swap integer_inc in3 boolean_xor exec_when () in4 boolean_rot in3 integer_dup_times print_integer boolean_and integer_shove in2 exec_rot (exec_flush integer_lte) (boolean_dup_items boolean_eq) (integer_inc boolean_xor) print_newline tagged_321 boolean_yank boolean_invert_first_then_and integer_inc exec_yank integer_gt boolean_or integer_empty print_boolean exec_empty exec_while () exec_if (integer_inc integer_eq boolean_dup) (exec_if (exec_rot (tagged_495 print_exec (boolean_yank) boolean_stackdepth boolean_empty) (exec_if (exec_s (integer_dup_items in2 exec_yankdup integer_dec -1 boolean_frominteger exec_dup (boolean_or exec_y (exec_s_when_autoconstructing (exec_while () boolean_xor) (exec_stackdepth exec_do*while ()) ()))) () ()) ()) ()) ()))
Errors: [0 0 1 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 61
Size: 87
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 7.02
Median total errors in population: 7
Error averages by case: (0.81 0.544 0.921 0.408 0.535 0.535 0.541 0.81 0.996 0.92)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.055
Average program size in population (points): 71.308
Average percent parens in population: 0.260
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1363424
--- Timings ---
Current time: 1559593847471 milliseconds
Total Time:           6.3 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         3.0 seconds, 47.3%
Fitness Testing:      2.6 seconds, 40.5%
Report:               0.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: 76                 
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: 13                 
Correct output: 65                  | Program output: 98                 
Correct output: -61                 | Program output: 55                 
Correct output: -20                 | Program output: 79                 
Correct output: -22                 | Program output: 97                 
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 52                 
Correct output: 18                  | Program output: 64                 
Correct output: 15                  | Program output: 83                 
Correct output: 25                  | Program output: 73                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 14                 
Correct output: 28                  | Program output: 38                 
Correct output: 9                   | Program output: 27                 
Correct output: 4                   | Program output: 71                 
Correct output: 14                  | Program output: 93                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 100                
Correct output: 7                   | Program output: 60                 
Correct output: 13                  | Program output: 46                 
Correct output: 58                  | Program output: 69                 
Correct output: 15                  | Program output: 36                 
Correct output: 36                  | Program output: 99                 
Correct output: -83                 | Program output: -59                
Correct output: -86                 | Program output: -24                
Correct output: -88                 | Program output: 100                
Correct output: -50                 | Program output: 27                 
Correct output: -91                 | Program output: -64                
Correct output: -4                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -64                 | Program output: 5                  
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 17                 
Correct output: -42                 | Program output: 53                 
Correct output: -83                 | Program output: -62                
Correct output: -76                 | Program output: -19                
Correct output: -87                 | Program output: -29                
Correct output: -62                 | Program output: 62                 
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -91                
Correct output: -71                 | Program output: -18                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -41                
Correct output: -96                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -1                  | Program output: 62                 
Correct output: -59                 | Program output: 83                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: 10                 
Correct output: -91                 | Program output: -73                
Correct output: -57                 | Program output: 16                 
Correct output: -69                 | Program output: 76                 
Correct output: -92                 | Program output: 66                 
Correct output: -100                | Program output: 86                 
Correct output: -67                 | Program output: 77                 
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 86                 
Correct output: -65                 | Program output: 37                 
Correct output: -61                 | Program output: -12                
Correct output: -99                 | Program output: 96                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: 99                 
Correct output: -76                 | Program output: 21                 
Correct output: -87                 | Program output: -40                
Correct output: -21                 | Program output: 56                 
Correct output: -62                 | Program output: -12                
Correct output: -85                 | Program output: -21                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -1                 
Correct output: -61                 | Program output: 90                 
Correct output: -79                 | Program output: 81                 
Correct output: -66                 | Program output: -66                
Correct output: -30                 | Program output: 7                  
Correct output: -90                 | Program output: 19                 
Correct output: -31                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction -73} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_337} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_mod exec_noop integer_div boolean_swap boolean_xor exec_when () in4 in2 boolean_rot in3 integer_dup_times print_integer boolean_and integer_shove integer_inc in2 exec_flush boolean_dup_items boolean_eq integer_inc boolean_xor integer_dup_times tagged_321 boolean_yank boolean_invert_first_then_and exec_yank integer_empty integer_gt boolean_or integer_empty print_boolean -73 boolean_dup_items exec_while () exec_if (integer_eq boolean_stackdepth exec_if (exec_rot (print_exec (boolean_yank) boolean_stackdepth boolean_empty) (exec_stackdepth exec_s (integer_dup_items in2 integer_mult integer_dec -1 boolean_eq boolean_frominteger exec_k_when_autoconstructing (tagged_337 exec_y (exec_s_when_autoconstructing (boolean_xor) (exec_do*while ()) ())) ()) () ()) ()) ()) ())
Lexicase best errors: [1 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction -73} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_337} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_mod exec_noop integer_div boolean_swap boolean_xor exec_when () in4 in2 boolean_rot in3 integer_dup_times print_integer boolean_and integer_shove integer_inc in2 exec_flush boolean_dup_items boolean_eq integer_inc boolean_xor integer_dup_times tagged_321 boolean_yank boolean_invert_first_then_and exec_yank integer_empty integer_gt boolean_or integer_empty print_boolean -73 boolean_dup_items exec_while () exec_if (integer_eq boolean_stackdepth exec_if (exec_rot (print_exec (boolean_yank) boolean_stackdepth boolean_empty) (exec_stackdepth exec_s (integer_dup_items in2 integer_mult integer_dec -1 boolean_eq boolean_frominteger exec_k_when_autoconstructing (tagged_337 exec_y (exec_s_when_autoconstructing (boolean_xor) (exec_do*while ()) ())) ()) () ()) ()) ()) ())
Zero cases best errors: [1 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (314 322 163 52 164 315 33 45 161 35)
Population mean number of elite cases: 1.60
Count of perfect (error zero) individuals by case: (314 322 163 52 164 315 33 45 161 35)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Best program: (integer_mod exec_noop integer_div boolean_swap integer_min in3 boolean_xor integer_lte in4 boolean_rot in2 in3 integer_dup_times print_integer boolean_and integer_shove integer_inc in2 integer_max exec_rot (exec_flush integer_lte) (boolean_eq) (integer_inc boolean_xor) tagged_321 boolean_invert_first_then_and integer_inc exec_yank integer_gt boolean_or integer_empty print_boolean exec_empty exec_yankdup exec_while () integer_inc integer_eq boolean_stackdepth exec_if (boolean_yank) (exec_noop) boolean_stackdepth boolean_empty exec_do*range () exec_if (exec_s (integer_dup_items integer_dup in2 boolean_dup integer_dec integer_inc exec_yankdup integer_dec -1 boolean_frominteger exec_dup (boolean_or exec_y (in3 exec_s_when_autoconstructing (exec_while () integer_empty exec_k () (boolean_xor) exec_stackdepth exec_do*while ()) () ()))) () ()) ())
Errors: [1 1 0 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 68
Size: 90
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 8.396
Median total errors in population: 8
Error averages by case: (0.686 0.678 0.837 0.948 0.836 0.685 0.967 0.955 0.839 0.965)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.019
Average program size in population (points): 82.764
Average percent parens in population: 0.268
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1764896
--- Timings ---
Current time: 1559593849417 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.2 seconds, 50.8%
Fitness Testing:      3.0 seconds, 36.5%
Report:               0.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -17                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: 76                 
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: 65                  | Program output: 98                 
Correct output: -61                 | Program output: 55                 
Correct output: -20                 | Program output: -20                
Correct output: -22                 | Program output: 97                 
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 82                 
Correct output: 9                   | Program output: 93                 
Correct output: 4                   | Program output: 6                  
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 66                 
Correct output: 14                  | Program output: 42                 
Correct output: 32                  | Program output: 67                 
Correct output: 7                   | Program output: 70                 
Correct output: 7                   | Program output: 45                 
Correct output: 23                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 13                  | Program output: 71                 
Correct output: 58                  | Program output: 58                 
Correct output: 15                  | Program output: 76                 
Correct output: 36                  | Program output: 40                 
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -7                 
Correct output: -4                  | Program output: -4                 
Correct output: -56                 | Program output: 32                 
Correct output: -85                 | Program output: -74                
Correct output: -80                 | Program output: -54                
Correct output: -74                 | Program output: 72                 
Correct output: -69                 | Program output: -11                
Correct output: -80                 | Program output: -62                
Correct output: -49                 | Program output: 90                 
Correct output: -64                 | Program output: -56                
Correct output: -100                | Program output: -31                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: 99                 
Correct output: -83                 | Program output: -52                
Correct output: -76                 | Program output: 40                 
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -38                
Correct output: -21                 | Program output: -6                 
Correct output: -91                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -76                
Correct output: -1                  | Program output: -1                 
Correct output: -59                 | Program output: 77                 
Correct output: -63                 | Program output: -19                
Correct output: -45                 | Program output: -4                 
Correct output: -91                 | Program output: -17                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -45                 | Program output: -9                 
Correct output: -39                 | Program output: -5                 
Correct output: -85                 | Program output: 24                 
Correct output: 19                  | Program output: 53                 
Correct output: -65                 | Program output: -62                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -29                
Correct output: -62                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: 70                 
Correct output: -71                 | Program output: -16                
Correct output: -100                | Program output: 38                 
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 25                 
Correct output: -30                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_mod integer_div boolean_swap in3 boolean_xor exec_when () in1 boolean_rot in3 integer_dup_times print_integer integer_shove integer_inc in2 exec_rot (boolean_eq exec_flush integer_lte) (integer_gt boolean_dup_items boolean_eq) (integer_inc boolean_xor) boolean_stackdepth tagged_321 boolean_yank boolean_invert_first_then_and integer_inc exec_yank integer_gt boolean_or integer_empty print_boolean exec_empty exec_while () exec_if (integer_inc integer_eq integer_mult) (boolean_stackdepth exec_when (boolean_dup) exec_if (exec_rot (print_exec (boolean_yank) boolean_stackdepth boolean_empty) (exec_if (exec_s (integer_dup_items integer_dup_items in2 integer_inc integer_dec -1 boolean_frominteger integer_yank print_boolean) () (exec_dup (boolean_or exec_yank) exec_dup_items exec_y (exec_s_when_autoconstructing (exec_while () integer_yankdup boolean_xor) (exec_stackdepth exec_do*while ()) ()))) ()) ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_mod integer_div boolean_swap in3 boolean_xor exec_when () in1 boolean_rot in3 integer_dup_times print_integer integer_shove integer_inc in2 exec_rot (boolean_eq exec_flush integer_lte) (integer_gt boolean_dup_items boolean_eq) (integer_inc boolean_xor) boolean_stackdepth tagged_321 boolean_yank boolean_invert_first_then_and integer_inc exec_yank integer_gt boolean_or integer_empty print_boolean exec_empty exec_while () exec_if (integer_inc integer_eq integer_mult) (boolean_stackdepth exec_when (boolean_dup) exec_if (exec_rot (print_exec (boolean_yank) boolean_stackdepth boolean_empty) (exec_if (exec_s (integer_dup_items integer_dup_items in2 integer_inc integer_dec -1 boolean_frominteger integer_yank print_boolean) () (exec_dup (boolean_or exec_yank) exec_dup_items exec_y (exec_s_when_autoconstructing (exec_while () integer_yankdup boolean_xor) (exec_stackdepth exec_do*while ()) ()))) ()) ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 252 305 305 220 227 242 64 183 59)
Population mean number of elite cases: 2.11
Count of perfect (error zero) individuals by case: (253 252 305 305 220 227 242 64 183 59)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 2, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction tagged_321} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth})
Best program: (integer_mod integer_div boolean_swap boolean_and in3 boolean_xor exec_when () in1 boolean_rot in3 integer_dup_times print_integer integer_shove integer_inc in2 exec_rot (boolean_eq exec_flush integer_gt boolean_dup_items boolean_eq) (integer_inc boolean_xor) (tagged_321) exec_stackdepth integer_inc exec_yank integer_gt boolean_or integer_empty print_boolean exec_empty exec_while () exec_if (integer_eq integer_mult) (boolean_stackdepth exec_when (boolean_dup) exec_if (exec_rot (print_exec (boolean_yank) boolean_stackdepth boolean_empty) (integer_swap exec_if (exec_s (integer_dup_items in2 integer_inc integer_dec -1 boolean_frominteger exec_dup (exec_yank) exec_s_when_autoconstructing (exec_while () boolean_xor) (exec_stackdepth) ()) () ()) ()) ()) ()))
Errors: [0 0 0 0 0 1 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 60
Size: 85
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.89
Median total errors in population: 8
Error averages by case: (0.747 0.748 0.695 0.695 0.78 0.773 0.758 0.936 0.817 0.941)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.088
Average program size in population (points): 86.825
Average percent parens in population: 0.271
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2060453
--- Timings ---
Current time: 1559593851172 milliseconds
Total Time:          10.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.3 seconds, 53.1%
Fitness Testing:      3.3 seconds, 33.2%
Report:               1.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: 79                 
Correct output: -22                 | Program output: -22                
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 38                 
Correct output: 9                   | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 42                 
Correct output: 7                   | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 58                  | Program output: 69                 
Correct output: 15                  | Program output: 36                 
Correct output: 36                  | Program output: 92                 
Correct output: -83                 | Program output: -79                
Correct output: -86                 | Program output: -66                
Correct output: -88                 | Program output: 35                 
Correct output: -50                 | Program output: -18                
Correct output: -91                 | Program output: -64                
Correct output: -4                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -30                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -91                
Correct output: -71                 | Program output: -59                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -83                
Correct output: -96                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -1                  | Program output: 24                 
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: 16                 
Correct output: -69                 | Program output: 42                 
Correct output: -92                 | Program output: -55                
Correct output: -100                | Program output: -45                
Correct output: -67                 | Program output: -40                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 65                 
Correct output: -65                 | Program output: -3                 
Correct output: -61                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -25                
Correct output: -76                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 56                 
Correct output: -62                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -4                 
Correct output: -79                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -30                 | Program output: 7                  
Correct output: -90                 | Program output: 19                 
Correct output: -31                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_321} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 1, :instruction tag_exec_362} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_mod exec_do*while (exec_noop) integer_div boolean_swap integer_min exec_noop boolean_xor integer_lte in4 boolean_rot in2 integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_max exec_rot (exec_flush integer_inc integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_gt boolean_or integer_empty print_boolean exec_empty exec_yankdup exec_while () integer_inc integer_eq boolean_stackdepth exec_if (boolean_yank) (exec_noop) boolean_stackdepth boolean_dup boolean_empty exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 boolean_dup exec_do*count (integer_dec integer_inc integer_dec -1 boolean_frominteger exec_dup (boolean_or exec_y (in3 boolean_dup_times exec_s_when_autoconstructing (in3 exec_while () tag_exec_362 () boolean_empty) (integer_gte) (exec_k () (boolean_xor) exec_stackdepth exec_do*while ()))))) () ()))
Lexicase best errors: [1 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_321} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 1, :instruction tag_exec_362} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_mod exec_do*while (exec_noop) integer_div boolean_swap integer_min exec_noop boolean_xor integer_lte in4 boolean_rot in2 integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_max exec_rot (exec_flush integer_inc integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_gt boolean_or integer_empty print_boolean exec_empty exec_yankdup exec_while () integer_inc integer_eq boolean_stackdepth exec_if (boolean_yank) (exec_noop) boolean_stackdepth boolean_dup boolean_empty exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 boolean_dup exec_do*count (integer_dec integer_inc integer_dec -1 boolean_frominteger exec_dup (boolean_or exec_y (in3 boolean_dup_times exec_s_when_autoconstructing (in3 exec_while () tag_exec_362 () boolean_empty) (integer_gte) (exec_k () (boolean_xor) exec_stackdepth exec_do*while ()))))) () ()))
Zero cases best errors: [1 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 80 129 91 128 156 101 168 140 537)
Population mean number of elite cases: 1.62
Count of perfect (error zero) individuals by case: (93 80 129 91 128 156 101 168 140 537)
Population mean number of perfect (error zero) cases: 1.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_321} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 1, :instruction tag_exec_362} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Best program: (integer_mod exec_do*while (exec_noop) integer_div boolean_swap integer_min exec_noop boolean_xor integer_lte in4 boolean_rot in2 integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_max exec_rot (exec_flush integer_inc integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_gt boolean_or integer_empty print_boolean exec_empty exec_yankdup exec_while () integer_inc integer_eq boolean_stackdepth exec_if (boolean_yank) (exec_noop) boolean_stackdepth boolean_dup boolean_empty exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 boolean_dup exec_do*count (integer_dec integer_inc integer_dec -1 boolean_frominteger exec_dup (boolean_or exec_y (in3 boolean_dup_times exec_s_when_autoconstructing (in3 exec_while () tag_exec_362 () boolean_empty) (integer_gte) (exec_k () (boolean_xor) exec_stackdepth exec_do*while ()))))) () ()))
Errors: [1 0 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 76
Size: 103
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 8.377
Median total errors in population: 8
Error averages by case: (0.907 0.92 0.871 0.909 0.872 0.844 0.899 0.832 0.86 0.463)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.31
Average program size in population (points): 91.358
Average percent parens in population: 0.262
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.366
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2473966
--- Timings ---
Current time: 1559593853477 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 54.5%
Fitness Testing:      3.7 seconds, 31.5%
Report:               1.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -17                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 46                 
Correct output: 9                   | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 32                  | Program output: 49                 
Correct output: 7                   | Program output: 47                 
Correct output: 7                   | Program output: 57                 
Correct output: 23                  | Program output: 42                 
Correct output: 7                   | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 58                  | Program output: 96                 
Correct output: 15                  | Program output: 36                 
Correct output: 36                  | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -7                 
Correct output: -4                  | Program output: -4                 
Correct output: -56                 | Program output: 46                 
Correct output: -85                 | Program output: -74                
Correct output: -80                 | Program output: -54                
Correct output: -74                 | Program output: -10                
Correct output: -69                 | Program output: -11                
Correct output: -80                 | Program output: -62                
Correct output: -49                 | Program output: 42                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -52                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 28                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -6                 
Correct output: -91                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -76                
Correct output: -1                  | Program output: -1                 
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -19                
Correct output: -45                 | Program output: -4                 
Correct output: -91                 | Program output: -17                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -45                 | Program output: -9                 
Correct output: -39                 | Program output: -5                 
Correct output: -85                 | Program output: -9                 
Correct output: 19                  | Program output: 65                 
Correct output: -65                 | Program output: -62                
Correct output: -61                 | Program output: 2                  
Correct output: -99                 | Program output: -99                
Correct output: -62                 | Program output: -15                
Correct output: -93                 | Program output: -25                
Correct output: -76                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -71                 | Program output: -60                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction -22} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction -1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_mod exec_noop boolean_swap boolean_dup_times in3 boolean_xor boolean_dup_times exec_when () in4 boolean_rot in3 integer_dup_times print_integer boolean_dup exec_swap () (integer_shove integer_inc) in2 exec_rot (exec_flush integer_lte) (boolean_eq) (integer_inc boolean_xor) print_newline exec_do*range (tagged_321) boolean_invert_first_then_and integer_inc integer_gt exec_shove (boolean_or print_boolean exec_empty integer_inc integer_eq integer_mod boolean_stackdepth boolean_dup) exec_if (exec_rot (-22 print_exec (boolean_yank) boolean_empty) (boolean_invert_second_then_and) (exec_if (exec_s (boolean_dup_times integer_dup_items boolean_frominteger in2 integer_inc exec_yankdup boolean_pop -1 exec_dup (boolean_swap exec_y (exec_empty exec_s_when_autoconstructing (exec_while () exec_dup_times (boolean_xor) exec_do*count () exec_stackdepth exec_do*while ()) () ()))) () ()) ())) ())
Lexicase best errors: [1 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 96
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_321} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction -22} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction -1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_mod exec_noop boolean_swap boolean_dup_times in3 boolean_xor boolean_dup_times exec_when () in4 boolean_rot in3 integer_dup_times print_integer boolean_dup exec_swap () (integer_shove integer_inc) in2 exec_rot (exec_flush integer_lte) (boolean_eq) (integer_inc boolean_xor) print_newline exec_do*range (tagged_321) boolean_invert_first_then_and integer_inc integer_gt exec_shove (boolean_or print_boolean exec_empty integer_inc integer_eq integer_mod boolean_stackdepth boolean_dup) exec_if (exec_rot (-22 print_exec (boolean_yank) boolean_empty) (boolean_invert_second_then_and) (exec_if (exec_s (boolean_dup_times integer_dup_items boolean_frominteger in2 integer_inc exec_yankdup boolean_pop -1 exec_dup (boolean_swap exec_y (exec_empty exec_s_when_autoconstructing (exec_while () exec_dup_times (boolean_xor) exec_do*count () exec_stackdepth exec_do*while ()) () ()))) () ()) ())) ())
Zero cases best errors: [1 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 96
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 154 228 261 93 260 152 255 145 381)
Population mean number of elite cases: 2.14
Count of perfect (error zero) individuals by case: (216 154 228 261 93 260 152 255 145 381)
Population mean number of perfect (error zero) cases: 2.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_when} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*while})
Best program: (integer_mod integer_div boolean_swap in3 exec_when () in4 boolean_rot in3 integer_dup_times print_integer integer_shove integer_inc in2 integer_yankdup exec_flush exec_dup_items boolean_dup_items integer_shove boolean_eq integer_inc exec_when (print_newline integer_mult boolean_yank boolean_invert_first_then_and exec_shove (exec_yank) exec_y (boolean_or integer_empty integer_sub print_boolean exec_empty exec_if (integer_inc integer_eq integer_mult) (boolean_stackdepth boolean_dup) boolean_yank integer_gte) exec_if (boolean_yank) (boolean_stackdepth exec_while (exec_s (in2 exec_y (-1 boolean_frominteger boolean_or exec_y (exec_while () exec_do*while ()))) () ()))))
Errors: [1 0 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 54
Size: 71
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 7.855
Median total errors in population: 9
Error averages by case: (0.784 0.846 0.772 0.739 0.907 0.74 0.848 0.745 0.855 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.372
Average program size in population (points): 93.02
Average percent parens in population: 0.253
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2957552
--- Timings ---
Current time: 1559593855382 milliseconds
Total Time:          14.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.6 seconds, 53.5%
Fitness Testing:      4.2 seconds, 29.6%
Report:               2.3 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: 79                 
Correct output: -22                 | Program output: -22                
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 38                 
Correct output: 9                   | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 72                 
Correct output: 32                  | Program output: 32                 
Correct output: 7                   | Program output: 7                  
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 42                 
Correct output: 7                   | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 58                  | Program output: 69                 
Correct output: 15                  | Program output: 36                 
Correct output: 36                  | Program output: 92                 
Correct output: -83                 | Program output: -79                
Correct output: -86                 | Program output: -66                
Correct output: -88                 | Program output: 35                 
Correct output: -50                 | Program output: -18                
Correct output: -91                 | Program output: -64                
Correct output: -4                  | Program output: 92                 
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -30                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -91                
Correct output: -71                 | Program output: -59                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -83                
Correct output: -96                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -1                  | Program output: 24                 
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -57                 | Program output: 16                 
Correct output: -69                 | Program output: 42                 
Correct output: -92                 | Program output: -55                
Correct output: -100                | Program output: -45                
Correct output: -67                 | Program output: -40                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 65                 
Correct output: -65                 | Program output: -3                 
Correct output: -61                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -25                
Correct output: -76                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 56                 
Correct output: -62                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -4                 
Correct output: -79                 | Program output: -17                
Correct output: -66                 | Program output: -66                
Correct output: -30                 | Program output: 7                  
Correct output: -90                 | Program output: 19                 
Correct output: -31                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_321} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 1, :instruction tag_exec_362} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_mod exec_do*while (integer_shove exec_noop) integer_div boolean_swap integer_min exec_noop integer_dec in4 boolean_rot in2 integer_min exec_if () (print_integer boolean_and boolean_or) integer_inc in2 integer_add in1 integer_max exec_flush exec_do*while (integer_dup_items) integer_empty tagged_321 integer_yank integer_inc exec_yank integer_gt integer_empty print_boolean exec_empty exec_yankdup integer_inc exec_while () integer_inc exec_k_when_autoconstructing () (integer_eq boolean_stackdepth exec_if (boolean_yank) (boolean_stackdepth boolean_dup boolean_empty) exec_do*range () exec_if (integer_swap) (print_exec (print_boolean integer_dup in2 boolean_dup exec_do*count (integer_dec integer_inc integer_dec -1 boolean_frominteger exec_dup (boolean_or exec_y (exec_s_when_autoconstructing (in3 exec_while () tag_exec_362 () boolean_empty) (integer_fromboolean exec_k () (boolean_xor) exec_stackdepth exec_do*while ()) ())))))))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 98
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_321} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 1, :instruction tag_exec_362} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_mod exec_do*while (integer_shove exec_noop) integer_div boolean_swap integer_min exec_noop integer_dec in4 boolean_rot in2 integer_min exec_if () (print_integer boolean_and boolean_or) integer_inc in2 integer_add in1 integer_max exec_flush exec_do*while (integer_dup_items) integer_empty tagged_321 integer_yank integer_inc exec_yank integer_gt integer_empty print_boolean exec_empty exec_yankdup integer_inc exec_while () integer_inc exec_k_when_autoconstructing () (integer_eq boolean_stackdepth exec_if (boolean_yank) (boolean_stackdepth boolean_dup boolean_empty) exec_do*range () exec_if (integer_swap) (print_exec (print_boolean integer_dup in2 boolean_dup exec_do*count (integer_dec integer_inc integer_dec -1 boolean_frominteger exec_dup (boolean_or exec_y (exec_s_when_autoconstructing (in3 exec_while () tag_exec_362 () boolean_empty) (integer_fromboolean exec_k () (boolean_xor) exec_stackdepth exec_do*while ()) ())))))))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 98
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 355 371 154 206 282 223 222 370 585)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (383 355 371 154 206 282 223 222 370 585)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_xor} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_321} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_362} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth})
Best program: (integer_mod exec_do*while (exec_noop) boolean_swap boolean_xor in4 boolean_rot in2 integer_min exec_if () (integer_dup_times print_integer boolean_and integer_lt integer_shove in2 in1 integer_max exec_rot (exec_flush integer_inc integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_gt boolean_or exec_empty exec_yankdup) exec_while () integer_inc integer_eq boolean_stackdepth exec_if (boolean_yank) (in2 exec_noop) boolean_stackdepth boolean_dup boolean_empty exec_do*range () exec_if (integer_swap) (integer_dup_items integer_dup in2 boolean_dup integer_dec integer_inc integer_dec -1 boolean_frominteger exec_dup (exec_y (in3 exec_shove (exec_stackdepth exec_s_when_autoconstructing (in3 exec_while () exec_eq tag_exec_362 () boolean_empty) (integer_gte) (exec_k () (boolean_xor) exec_stackdepth))))))
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 68
Size: 91
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 6.849
Median total errors in population: 8
Error averages by case: (0.617 0.645 0.629 0.846 0.794 0.718 0.777 0.778 0.63 0.415)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.785
Average program size in population (points): 89.553
Average percent parens in population: 0.253
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.323
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3367061
--- Timings ---
Current time: 1559593858203 milliseconds
Total Time:          16.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.8 seconds, 54.6%
Fitness Testing:      4.6 seconds, 28.7%
Report:               2.6 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 414
Test mean error for best: 0.41400
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 32                 
Correct output: 9                   | Program output: 62                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 44                 
Correct output: 7                   | Program output: 45                 
Correct output: 7                   | Program output: 9                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 24                 
Correct output: 13                  | Program output: 13                 
Correct output: 58                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -56                 | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -10                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: 42                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -62                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 28                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -1                  | Program output: -1                 
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -4                 
Correct output: -91                 | Program output: -73                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -62                
Correct output: -61                 | Program output: 2                  
Correct output: -99                 | Program output: -99                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -25                
Correct output: -76                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -71                 | Program output: -60                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 2, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_321} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tag_exec_362} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_pop exec_do*while (exec_noop) integer_div boolean_swap integer_min exec_noop boolean_xor integer_lte in4 in3 integer_min exec_if () (integer_dup_times print_integer boolean_and integer_inc) in2 exec_rot (exec_flush integer_lte) (integer_dup_items) (integer_empty tagged_321) integer_inc integer_gt boolean_or exec_y_when_autoconstructing () integer_dup_times integer_empty print_boolean exec_empty exec_yankdup exec_while () integer_inc integer_eq exec_if (exec_shove (boolean_yank) exec_noop) (integer_yankdup boolean_stackdepth boolean_not) boolean_dup boolean_empty exec_do*range () exec_if (integer_swap) (exec_s (integer_dup_items in2 boolean_dup exec_do*count (integer_inc integer_dec -1 boolean_frominteger exec_dup (print_exec (boolean_or integer_sub)) exec_y (integer_rot in3 boolean_dup_times exec_s_when_autoconstructing (in3 exec_while () exec_stackdepth tag_exec_362 () boolean_empty) (integer_gte) (integer_inc exec_k () (boolean_xor) exec_stackdepth exec_do*while ())))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 107
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 2, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_321} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tag_exec_362} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_pop exec_do*while (exec_noop) integer_div boolean_swap integer_min exec_noop boolean_xor integer_lte in4 in3 integer_min exec_if () (integer_dup_times print_integer boolean_and integer_inc) in2 exec_rot (exec_flush integer_lte) (integer_dup_items) (integer_empty tagged_321) integer_inc integer_gt boolean_or exec_y_when_autoconstructing () integer_dup_times integer_empty print_boolean exec_empty exec_yankdup exec_while () integer_inc integer_eq exec_if (exec_shove (boolean_yank) exec_noop) (integer_yankdup boolean_stackdepth boolean_not) boolean_dup boolean_empty exec_do*range () exec_if (integer_swap) (exec_s (integer_dup_items in2 boolean_dup exec_do*count (integer_inc integer_dec -1 boolean_frominteger exec_dup (print_exec (boolean_or integer_sub)) exec_y (integer_rot in3 boolean_dup_times exec_s_when_autoconstructing (in3 exec_while () exec_stackdepth tag_exec_362 () boolean_empty) (integer_gte) (integer_inc exec_k () (boolean_xor) exec_stackdepth exec_do*while ())))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 107
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 531 286 523 187 284 608 454 531 285)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (124 531 286 523 187 284 608 454 531 285)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 2, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_321} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 2, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction -1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_exec_362} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while})
Best program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 75
Size: 101
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 6.187
Median total errors in population: 6
Error averages by case: (0.876 0.469 0.714 0.477 0.813 0.716 0.392 0.546 0.469 0.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.109
Average program size in population (points): 85.034
Average percent parens in population: 0.256
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3810691
--- Timings ---
Current time: 1559593860076 milliseconds
Total Time:          18.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.9 seconds, 52.4%
Fitness Testing:      5.0 seconds, 26.7%
Report:               3.8 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 101


Auto-simplifying with starting size: 101
step: 0
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 500
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 1000
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 1500
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 2000
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 2500
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 3000
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 3500
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 4000
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 4500
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 5000
program: (integer_mod integer_div boolean_swap in3 integer_min exec_noop boolean_xor integer_lte in4 boolean_rot integer_min exec_if () (integer_dup_times print_integer boolean_and integer_shove integer_inc) in2 in1 integer_gt integer_max exec_rot (exec_flush integer_inc integer_swap integer_dup_items) (integer_empty tagged_321) (integer_inc exec_yank) integer_lte integer_gt boolean_or integer_empty exec_s_when_autoconstructing (exec_empty exec_yankdup) (exec_while () boolean_stackdepth exec_if (integer_fromboolean boolean_dup integer_empty boolean_not) () boolean_empty) (in1) exec_do*range () exec_if (integer_swap) (integer_lt exec_s (integer_dup_items integer_dup in2 exec_stackdepth exec_do*count (integer_inc -1 boolean_frominteger exec_dup (boolean_or integer_mod exec_y (in3 boolean_dup_times in3 exec_while () boolean_yank tag_exec_362 () boolean_empty) integer_gte) exec_k () (boolean_xor) exec_stackdepth exec_do*while ())) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 414
Test mean error for best: 0.41400
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -40                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -61                 | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: 35                  | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: 57                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 94                  | Program output: 94                 
Correct output: 9                   | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 9                   | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 32                 
Correct output: 9                   | Program output: 62                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 32                  | Program output: 44                 
Correct output: 7                   | Program output: 45                 
Correct output: 7                   | Program output: 9                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 24                 
Correct output: 13                  | Program output: 13                 
Correct output: 58                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -64                
Correct output: -4                  | Program output: -4                 
Correct output: -56                 | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -10                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -73                
Correct output: -49                 | Program output: 42                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -62                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 28                 
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -1                  | Program output: -1                 
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -4                 
Correct output: -91                 | Program output: -73                
Correct output: -57                 | Program output: -57                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -56                
Correct output: -45                 | Program output: -45                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -62                
Correct output: -61                 | Program output: 2                  
Correct output: -99                 | Program output: -99                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -25                
Correct output: -76                 | Program output: -15                
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -71                 | Program output: -60                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 30                 
Correct output: -30                 | Program output: -30                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
;;******************************
