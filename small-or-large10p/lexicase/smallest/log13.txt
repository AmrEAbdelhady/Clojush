Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[83 13 13 13] 13] [[42 -22 42 42] -22] [[-79 -79 -37 -79] -79] [[-75 -75 21 -75] -75] [[45 45 67 45] 45] [[-80 -80 -80 64] -80] [[85 85 85 1] 1] [[-76 -76 -79 -76] -79] [[5 5 5 82] 5] [[-80 -80 50 -80] -80] [(39 39 39 39) 39] [(-91 -91 -91 -91) -91] [(-89 -89 -89 -89) -89] [(-79 -79 -79 -79) -79] [(-2 -2 -2 -2) -2] [(16 99 77 37) 16] [(98 83 21 61) 21] [(6 63 11 91) 6] [(10 22 77 43) 10] [(32 16 20 15) 15] [(2 75 20 2) 2] [(40 83 89 40) 40] [(62 37 82 82) 37] [(21 57 10 92) 10] [(56 85 69 99) 56] [(58 19 11 77) 11] [(86 56 11 70) 11] [(71 76 60 46) 46] [(56 5 54 6) 5] [(29 28 47 25) 25] [(86 91 49 56) 49] [(33 45 98 33) 33] [(55 40 73 70) 40] [(6 24 57 25) 6] [(4 19 85 83) 4] [(-93 -57 15 -36) -93] [(-50 27 -79 76) -79] [(96 84 -80 52) -80] [(-72 5 57 -85) -85] [(53 48 19 -56) -56] [(-13 -50 23 -63) -63] [(-38 60 -8 17) -38] [(48 -29 84 35) -29] [(-100 -20 37 59) -100] [(19 87 -1 -35) -35] [(-96 -47 37 -61) -96] [(-28 -100 -74 10) -100] [(53 -93 79 -97) -97] [(-11 -45 42 38) -45] [(-2 -69 -16 63) -69] [(90 29 -80 96) -80] [(3 55 47 39) 3] [(51 55 -51 -86) -86] [(80 -97 3 35) -97] [(90 27 -23 10) -23] [(-35 -51 47 83) -51] [(-18 77 -25 10) -25] [(5 -72 97 -71) -72] [(-58 -89 50 99) -89] [(42 89 71 81) 42] [(-18 -14 -63 -24) -63] [(-78 77 88 1) -78] [(69 8 -89 -36) -89] [(-95 -56 21 -22) -95] [(-63 -85 -68 -81) -85] [(-8 -58 85 -46) -58] [(71 70 49 30) 30] [(-56 -58 -7 -72) -72] [(60 4 3 70) 3] [(-81 -53 -97 62) -97] [(91 87 90 -80) -80] [(80 -46 -33 -55) -55] [(53 -29 33 54) -29] [(88 37 -100 -53) -100] [(52 -5 79 -86) -86] [(-30 32 -90 -11) -90] [(-66 -27 -41 56) -66] [(-100 -65 60 -51) -100] [(82 -85 46 15) -85] [(-12 90 -52 -50) -52] [(47 59 23 63) 23] [(94 42 -18 -12) -18] [(-8 -77 -30 -30) -77] [(79 -76 98 -29) -76] [(58 -2 92 78) -2] [(-9 -49 -68 -8) -68] [(22 -45 -6 -27) -45] [(22 80 -16 -8) -16] [(62 71 -98 -13) -98] [(-49 22 -82 76) -82] [(-75 -88 66 33) -88] [(-79 100 14 -88) -88] [(2 75 -33 -2) -33] [(94 79 85 -47) -47] [(-29 16 -43 -64) -64])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[83 13 13 13] 13]
Train Case:   6 | Input/Output: [[42 -22 42 42] -22]
Train Case:   7 | Input/Output: [[-79 -79 -37 -79] -79]
Train Case:   8 | Input/Output: [[-75 -75 21 -75] -75]
Train Case:   9 | Input/Output: [[45 45 67 45] 45]
Train Case:  10 | Input/Output: [[-80 -80 -80 64] -80]
Train Case:  11 | Input/Output: [[85 85 85 1] 1]
Train Case:  12 | Input/Output: [[-76 -76 -79 -76] -79]
Train Case:  13 | Input/Output: [[5 5 5 82] 5]
Train Case:  14 | Input/Output: [[-80 -80 50 -80] -80]
Train Case:  15 | Input/Output: [(39 39 39 39) 39]
Train Case:  16 | Input/Output: [(-91 -91 -91 -91) -91]
Train Case:  17 | Input/Output: [(-89 -89 -89 -89) -89]
Train Case:  18 | Input/Output: [(-79 -79 -79 -79) -79]
Train Case:  19 | Input/Output: [(-2 -2 -2 -2) -2]
Train Case:  20 | Input/Output: [(16 99 77 37) 16]
Train Case:  21 | Input/Output: [(98 83 21 61) 21]
Train Case:  22 | Input/Output: [(6 63 11 91) 6]
Train Case:  23 | Input/Output: [(10 22 77 43) 10]
Train Case:  24 | Input/Output: [(32 16 20 15) 15]
Train Case:  25 | Input/Output: [(2 75 20 2) 2]
Train Case:  26 | Input/Output: [(40 83 89 40) 40]
Train Case:  27 | Input/Output: [(62 37 82 82) 37]
Train Case:  28 | Input/Output: [(21 57 10 92) 10]
Train Case:  29 | Input/Output: [(56 85 69 99) 56]
Train Case:  30 | Input/Output: [(58 19 11 77) 11]
Train Case:  31 | Input/Output: [(86 56 11 70) 11]
Train Case:  32 | Input/Output: [(71 76 60 46) 46]
Train Case:  33 | Input/Output: [(56 5 54 6) 5]
Train Case:  34 | Input/Output: [(29 28 47 25) 25]
Train Case:  35 | Input/Output: [(86 91 49 56) 49]
Train Case:  36 | Input/Output: [(33 45 98 33) 33]
Train Case:  37 | Input/Output: [(55 40 73 70) 40]
Train Case:  38 | Input/Output: [(6 24 57 25) 6]
Train Case:  39 | Input/Output: [(4 19 85 83) 4]
Train Case:  40 | Input/Output: [(-93 -57 15 -36) -93]
Train Case:  41 | Input/Output: [(-50 27 -79 76) -79]
Train Case:  42 | Input/Output: [(96 84 -80 52) -80]
Train Case:  43 | Input/Output: [(-72 5 57 -85) -85]
Train Case:  44 | Input/Output: [(53 48 19 -56) -56]
Train Case:  45 | Input/Output: [(-13 -50 23 -63) -63]
Train Case:  46 | Input/Output: [(-38 60 -8 17) -38]
Train Case:  47 | Input/Output: [(48 -29 84 35) -29]
Train Case:  48 | Input/Output: [(-100 -20 37 59) -100]
Train Case:  49 | Input/Output: [(19 87 -1 -35) -35]
Train Case:  50 | Input/Output: [(-96 -47 37 -61) -96]
Train Case:  51 | Input/Output: [(-28 -100 -74 10) -100]
Train Case:  52 | Input/Output: [(53 -93 79 -97) -97]
Train Case:  53 | Input/Output: [(-11 -45 42 38) -45]
Train Case:  54 | Input/Output: [(-2 -69 -16 63) -69]
Train Case:  55 | Input/Output: [(90 29 -80 96) -80]
Train Case:  56 | Input/Output: [(3 55 47 39) 3]
Train Case:  57 | Input/Output: [(51 55 -51 -86) -86]
Train Case:  58 | Input/Output: [(80 -97 3 35) -97]
Train Case:  59 | Input/Output: [(90 27 -23 10) -23]
Train Case:  60 | Input/Output: [(-35 -51 47 83) -51]
Train Case:  61 | Input/Output: [(-18 77 -25 10) -25]
Train Case:  62 | Input/Output: [(5 -72 97 -71) -72]
Train Case:  63 | Input/Output: [(-58 -89 50 99) -89]
Train Case:  64 | Input/Output: [(42 89 71 81) 42]
Train Case:  65 | Input/Output: [(-18 -14 -63 -24) -63]
Train Case:  66 | Input/Output: [(-78 77 88 1) -78]
Train Case:  67 | Input/Output: [(69 8 -89 -36) -89]
Train Case:  68 | Input/Output: [(-95 -56 21 -22) -95]
Train Case:  69 | Input/Output: [(-63 -85 -68 -81) -85]
Train Case:  70 | Input/Output: [(-8 -58 85 -46) -58]
Train Case:  71 | Input/Output: [(71 70 49 30) 30]
Train Case:  72 | Input/Output: [(-56 -58 -7 -72) -72]
Train Case:  73 | Input/Output: [(60 4 3 70) 3]
Train Case:  74 | Input/Output: [(-81 -53 -97 62) -97]
Train Case:  75 | Input/Output: [(91 87 90 -80) -80]
Train Case:  76 | Input/Output: [(80 -46 -33 -55) -55]
Train Case:  77 | Input/Output: [(53 -29 33 54) -29]
Train Case:  78 | Input/Output: [(88 37 -100 -53) -100]
Train Case:  79 | Input/Output: [(52 -5 79 -86) -86]
Train Case:  80 | Input/Output: [(-30 32 -90 -11) -90]
Train Case:  81 | Input/Output: [(-66 -27 -41 56) -66]
Train Case:  82 | Input/Output: [(-100 -65 60 -51) -100]
Train Case:  83 | Input/Output: [(82 -85 46 15) -85]
Train Case:  84 | Input/Output: [(-12 90 -52 -50) -52]
Train Case:  85 | Input/Output: [(47 59 23 63) 23]
Train Case:  86 | Input/Output: [(94 42 -18 -12) -18]
Train Case:  87 | Input/Output: [(-8 -77 -30 -30) -77]
Train Case:  88 | Input/Output: [(79 -76 98 -29) -76]
Train Case:  89 | Input/Output: [(58 -2 92 78) -2]
Train Case:  90 | Input/Output: [(-9 -49 -68 -8) -68]
Train Case:  91 | Input/Output: [(22 -45 -6 -27) -45]
Train Case:  92 | Input/Output: [(22 80 -16 -8) -16]
Train Case:  93 | Input/Output: [(62 71 -98 -13) -98]
Train Case:  94 | Input/Output: [(-49 22 -82 76) -82]
Train Case:  95 | Input/Output: [(-75 -88 66 33) -88]
Train Case:  96 | Input/Output: [(-79 100 14 -88) -88]
Train Case:  97 | Input/Output: [(2 75 -33 -2) -33]
Train Case:  98 | Input/Output: [(94 79 85 -47) -47]
Train Case:  99 | Input/Output: [(-29 16 -43 -64) -64]
Test Case:   0 | Input/Output: [[-4 -71 -71 -71] -71]
Test Case:   1 | Input/Output: [[-63 -63 -63 13] -63]
Test Case:   2 | Input/Output: [[-29 22 -29 -29] -29]
Test Case:   3 | Input/Output: [[-79 -96 -79 -79] -96]
Test Case:   4 | Input/Output: [[83 83 -70 83] -70]
Test Case:   5 | Input/Output: [[21 21 21 -99] -99]
Test Case:   6 | Input/Output: [[-12 -83 -83 -83] -83]
Test Case:   7 | Input/Output: [[59 -22 59 59] -22]
Test Case:   8 | Input/Output: [[0 -29 0 0] -29]
Test Case:   9 | Input/Output: [[-18 8 8 8] -18]
Test Case:  10 | Input/Output: [[-66 -66 -66 -31] -66]
Test Case:  11 | Input/Output: [[85 92 92 92] 85]
Test Case:  12 | Input/Output: [[-18 80 -18 -18] -18]
Test Case:  13 | Input/Output: [[37 37 -73 37] -73]
Test Case:  14 | Input/Output: [[-96 20 -96 -96] -96]
Test Case:  15 | Input/Output: [[-51 -51 -51 -27] -51]
Test Case:  16 | Input/Output: [[23 23 23 -27] -27]
Test Case:  17 | Input/Output: [[83 83 83 -46] -46]
Test Case:  18 | Input/Output: [[-57 -3 -3 -3] -57]
Test Case:  19 | Input/Output: [[-70 -70 99 -70] -70]
Test Case:  20 | Input/Output: [[-86 -86 -86 47] -86]
Test Case:  21 | Input/Output: [[50 50 -62 50] -62]
Test Case:  22 | Input/Output: [[-72 -72 46 -72] -72]
Test Case:  23 | Input/Output: [[-8 32 32 32] -8]
Test Case:  24 | Input/Output: [[36 36 36 -76] -76]
Test Case:  25 | Input/Output: [[-96 -17 -17 -17] -96]
Test Case:  26 | Input/Output: [[90 90 98 90] 90]
Test Case:  27 | Input/Output: [[-19 -19 -19 -65] -65]
Test Case:  28 | Input/Output: [[-57 42 -57 -57] -57]
Test Case:  29 | Input/Output: [[-58 -58 -40 -58] -58]
Test Case:  30 | Input/Output: [[-35 -35 -35 81] -35]
Test Case:  31 | Input/Output: [[52 -22 52 52] -22]
Test Case:  32 | Input/Output: [[-42 -42 -61 -42] -61]
Test Case:  33 | Input/Output: [[58 30 30 30] 30]
Test Case:  34 | Input/Output: [[39 39 6 39] 6]
Test Case:  35 | Input/Output: [[-35 -35 0 -35] -35]
Test Case:  36 | Input/Output: [[-11 -52 -52 -52] -52]
Test Case:  37 | Input/Output: [[-76 -76 -62 -76] -76]
Test Case:  38 | Input/Output: [[-61 -25 -25 -25] -61]
Test Case:  39 | Input/Output: [[-46 -46 -79 -46] -79]
Test Case:  40 | Input/Output: [[-62 -62 -62 -89] -89]
Test Case:  41 | Input/Output: [[7 7 7 -4] -4]
Test Case:  42 | Input/Output: [[98 -41 -41 -41] -41]
Test Case:  43 | Input/Output: [[97 -6 97 97] -6]
Test Case:  44 | Input/Output: [[-34 -34 -70 -34] -70]
Test Case:  45 | Input/Output: [[-34 -34 85 -34] -34]
Test Case:  46 | Input/Output: [[-39 52 -39 -39] -39]
Test Case:  47 | Input/Output: [[38 93 38 38] 38]
Test Case:  48 | Input/Output: [[92 87 92 92] 87]
Test Case:  49 | Input/Output: [[-14 76 -14 -14] -14]
Test Case:  50 | Input/Output: [[95 95 22 95] 22]
Test Case:  51 | Input/Output: [[-56 -47 -47 -47] -56]
Test Case:  52 | Input/Output: [[-9 5 -9 -9] -9]
Test Case:  53 | Input/Output: [[42 42 42 79] 42]
Test Case:  54 | Input/Output: [[-4 -4 -4 -89] -89]
Test Case:  55 | Input/Output: [[-49 -49 85 -49] -49]
Test Case:  56 | Input/Output: [[-48 -48 97 -48] -48]
Test Case:  57 | Input/Output: [[-40 -40 78 -40] -40]
Test Case:  58 | Input/Output: [[-75 -75 -75 -45] -75]
Test Case:  59 | Input/Output: [[81 81 81 -51] -51]
Test Case:  60 | Input/Output: [[71 -100 71 71] -100]
Test Case:  61 | Input/Output: [[-100 -63 -100 -100] -100]
Test Case:  62 | Input/Output: [[-24 -24 -24 -78] -78]
Test Case:  63 | Input/Output: [[1 1 35 1] 1]
Test Case:  64 | Input/Output: [[33 33 58 33] 33]
Test Case:  65 | Input/Output: [[-57 50 50 50] -57]
Test Case:  66 | Input/Output: [[79 -100 79 79] -100]
Test Case:  67 | Input/Output: [[-24 -64 -24 -24] -64]
Test Case:  68 | Input/Output: [[-3 -38 -38 -38] -38]
Test Case:  69 | Input/Output: [[-74 -74 -74 46] -74]
Test Case:  70 | Input/Output: [[-13 -13 -33 -13] -33]
Test Case:  71 | Input/Output: [[-46 -29 -29 -29] -46]
Test Case:  72 | Input/Output: [[74 47 74 74] 47]
Test Case:  73 | Input/Output: [[-21 -21 -16 -21] -21]
Test Case:  74 | Input/Output: [[-83 -83 -7 -83] -83]
Test Case:  75 | Input/Output: [[24 24 -23 24] -23]
Test Case:  76 | Input/Output: [[-46 44 -46 -46] -46]
Test Case:  77 | Input/Output: [[-33 -44 -33 -33] -44]
Test Case:  78 | Input/Output: [[74 74 74 -30] -30]
Test Case:  79 | Input/Output: [[-29 14 14 14] -29]
Test Case:  80 | Input/Output: [[-80 -50 -50 -50] -80]
Test Case:  81 | Input/Output: [[-21 -14 -14 -14] -21]
Test Case:  82 | Input/Output: [[89 89 24 89] 24]
Test Case:  83 | Input/Output: [[-60 51 -60 -60] -60]
Test Case:  84 | Input/Output: [[-29 95 -29 -29] -29]
Test Case:  85 | Input/Output: [[-7 -7 -7 43] -7]
Test Case:  86 | Input/Output: [[-6 -22 -22 -22] -22]
Test Case:  87 | Input/Output: [[65 65 65 29] 29]
Test Case:  88 | Input/Output: [[-80 58 -80 -80] -80]
Test Case:  89 | Input/Output: [[-56 74 -56 -56] -56]
Test Case:  90 | Input/Output: [[-49 49 49 49] -49]
Test Case:  91 | Input/Output: [[-34 5 -34 -34] -34]
Test Case:  92 | Input/Output: [[34 34 34 -52] -52]
Test Case:  93 | Input/Output: [[-2 -85 -85 -85] -85]
Test Case:  94 | Input/Output: [[-23 83 83 83] -23]
Test Case:  95 | Input/Output: [[-10 32 -10 -10] -10]
Test Case:  96 | Input/Output: [[-28 -28 -52 -28] -52]
Test Case:  97 | Input/Output: [[89 89 89 -36] -36]
Test Case:  98 | Input/Output: [[89 60 60 60] 60]
Test Case:  99 | Input/Output: [[-25 -25 -25 52] -25]
Test Case: 100 | Input/Output: [(25 25 25 25) 25]
Test Case: 101 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 102 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 103 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 104 | Input/Output: [(65 65 65 65) 65]
Test Case: 105 | Input/Output: [(60 60 60 60) 60]
Test Case: 106 | Input/Output: [(11 11 11 11) 11]
Test Case: 107 | Input/Output: [(9 9 9 9) 9]
Test Case: 108 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 109 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 110 | Input/Output: [(85 85 85 85) 85]
Test Case: 111 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 112 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 113 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 114 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 115 | Input/Output: [(34 34 34 34) 34]
Test Case: 116 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 117 | Input/Output: [(11 11 11 11) 11]
Test Case: 118 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 119 | Input/Output: [(76 76 76 76) 76]
Test Case: 120 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 121 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 122 | Input/Output: [(80 80 80 80) 80]
Test Case: 123 | Input/Output: [(60 60 60 60) 60]
Test Case: 124 | Input/Output: [(66 66 66 66) 66]
Test Case: 125 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 126 | Input/Output: [(20 20 20 20) 20]
Test Case: 127 | Input/Output: [(13 13 13 13) 13]
Test Case: 128 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 129 | Input/Output: [(100 100 100 100) 100]
Test Case: 130 | Input/Output: [(65 65 65 65) 65]
Test Case: 131 | Input/Output: [(77 77 77 77) 77]
Test Case: 132 | Input/Output: [(96 96 96 96) 96]
Test Case: 133 | Input/Output: [(98 98 98 98) 98]
Test Case: 134 | Input/Output: [(57 57 57 57) 57]
Test Case: 135 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 136 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 137 | Input/Output: [(47 47 47 47) 47]
Test Case: 138 | Input/Output: [(76 76 76 76) 76]
Test Case: 139 | Input/Output: [(45 45 45 45) 45]
Test Case: 140 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 141 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 142 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 143 | Input/Output: [(57 57 57 57) 57]
Test Case: 144 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 145 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 146 | Input/Output: [(21 21 21 21) 21]
Test Case: 147 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 148 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 149 | Input/Output: [(17 17 17 17) 17]
Test Case: 150 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 151 | Input/Output: [(81 81 81 81) 81]
Test Case: 152 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 153 | Input/Output: [(69 69 69 69) 69]
Test Case: 154 | Input/Output: [(39 39 39 39) 39]
Test Case: 155 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 156 | Input/Output: [(29 29 29 29) 29]
Test Case: 157 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 158 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 159 | Input/Output: [(7 7 7 7) 7]
Test Case: 160 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 161 | Input/Output: [(50 50 50 50) 50]
Test Case: 162 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 163 | Input/Output: [(72 72 72 72) 72]
Test Case: 164 | Input/Output: [(73 73 73 73) 73]
Test Case: 165 | Input/Output: [(53 53 53 53) 53]
Test Case: 166 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 167 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 168 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 169 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 170 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 171 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 172 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 173 | Input/Output: [(18 18 18 18) 18]
Test Case: 174 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 175 | Input/Output: [(97 97 97 97) 97]
Test Case: 176 | Input/Output: [(12 12 12 12) 12]
Test Case: 177 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 178 | Input/Output: [(96 96 96 96) 96]
Test Case: 179 | Input/Output: [(29 29 29 29) 29]
Test Case: 180 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 181 | Input/Output: [(21 21 21 21) 21]
Test Case: 182 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 183 | Input/Output: [(72 72 72 72) 72]
Test Case: 184 | Input/Output: [(6 6 6 6) 6]
Test Case: 185 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 186 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 187 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 188 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 189 | Input/Output: [(56 56 56 56) 56]
Test Case: 190 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 191 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 192 | Input/Output: [(59 59 59 59) 59]
Test Case: 193 | Input/Output: [(36 36 36 36) 36]
Test Case: 194 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 195 | Input/Output: [(11 11 11 11) 11]
Test Case: 196 | Input/Output: [(83 83 83 83) 83]
Test Case: 197 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 198 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 199 | Input/Output: [(79 79 79 79) 79]
Test Case: 200 | Input/Output: [(76 67 4 95) 4]
Test Case: 201 | Input/Output: [(88 19 80 35) 19]
Test Case: 202 | Input/Output: [(51 59 29 77) 29]
Test Case: 203 | Input/Output: [(32 74 65 73) 32]
Test Case: 204 | Input/Output: [(49 89 88 75) 49]
Test Case: 205 | Input/Output: [(17 66 93 15) 15]
Test Case: 206 | Input/Output: [(58 71 17 83) 17]
Test Case: 207 | Input/Output: [(96 54 30 49) 30]
Test Case: 208 | Input/Output: [(47 31 97 7) 7]
Test Case: 209 | Input/Output: [(24 91 23 5) 5]
Test Case: 210 | Input/Output: [(13 98 100 2) 2]
Test Case: 211 | Input/Output: [(98 72 85 0) 0]
Test Case: 212 | Input/Output: [(7 47 59 32) 7]
Test Case: 213 | Input/Output: [(98 20 26 26) 20]
Test Case: 214 | Input/Output: [(18 27 43 37) 18]
Test Case: 215 | Input/Output: [(65 1 38 3) 1]
Test Case: 216 | Input/Output: [(53 15 40 18) 15]
Test Case: 217 | Input/Output: [(18 5 71 49) 5]
Test Case: 218 | Input/Output: [(92 90 51 55) 51]
Test Case: 219 | Input/Output: [(46 71 77 69) 46]
Test Case: 220 | Input/Output: [(9 16 96 40) 9]
Test Case: 221 | Input/Output: [(34 69 29 88) 29]
Test Case: 222 | Input/Output: [(6 65 82 57) 6]
Test Case: 223 | Input/Output: [(83 40 43 51) 40]
Test Case: 224 | Input/Output: [(39 100 58 41) 39]
Test Case: 225 | Input/Output: [(51 23 93 81) 23]
Test Case: 226 | Input/Output: [(68 68 56 28) 28]
Test Case: 227 | Input/Output: [(9 8 50 40) 8]
Test Case: 228 | Input/Output: [(52 6 7 51) 6]
Test Case: 229 | Input/Output: [(40 17 94 87) 17]
Test Case: 230 | Input/Output: [(29 54 14 10) 10]
Test Case: 231 | Input/Output: [(58 34 14 53) 14]
Test Case: 232 | Input/Output: [(96 8 19 56) 8]
Test Case: 233 | Input/Output: [(93 100 7 68) 7]
Test Case: 234 | Input/Output: [(11 27 43 66) 11]
Test Case: 235 | Input/Output: [(16 84 69 6) 6]
Test Case: 236 | Input/Output: [(51 77 48 15) 15]
Test Case: 237 | Input/Output: [(49 81 59 94) 49]
Test Case: 238 | Input/Output: [(29 62 54 90) 29]
Test Case: 239 | Input/Output: [(54 14 98 71) 14]
Test Case: 240 | Input/Output: [(58 7 92 5) 5]
Test Case: 241 | Input/Output: [(41 58 17 7) 7]
Test Case: 242 | Input/Output: [(41 55 21 58) 21]
Test Case: 243 | Input/Output: [(66 74 94 26) 26]
Test Case: 244 | Input/Output: [(30 1 65 92) 1]
Test Case: 245 | Input/Output: [(46 22 5 33) 5]
Test Case: 246 | Input/Output: [(12 6 31 20) 6]
Test Case: 247 | Input/Output: [(32 79 5 80) 5]
Test Case: 248 | Input/Output: [(84 91 68 36) 36]
Test Case: 249 | Input/Output: [(11 61 65 27) 11]
Test Case: 250 | Input/Output: [(4 10 98 51) 4]
Test Case: 251 | Input/Output: [(97 87 55 67) 55]
Test Case: 252 | Input/Output: [(16 47 92 81) 16]
Test Case: 253 | Input/Output: [(95 69 53 87) 53]
Test Case: 254 | Input/Output: [(78 57 81 12) 12]
Test Case: 255 | Input/Output: [(48 51 21 98) 21]
Test Case: 256 | Input/Output: [(66 20 43 63) 20]
Test Case: 257 | Input/Output: [(54 10 0 51) 0]
Test Case: 258 | Input/Output: [(5 100 39 5) 5]
Test Case: 259 | Input/Output: [(64 2 30 41) 2]
Test Case: 260 | Input/Output: [(72 11 9 13) 9]
Test Case: 261 | Input/Output: [(93 88 66 96) 66]
Test Case: 262 | Input/Output: [(19 29 84 0) 0]
Test Case: 263 | Input/Output: [(54 52 39 51) 39]
Test Case: 264 | Input/Output: [(87 80 31 23) 23]
Test Case: 265 | Input/Output: [(26 6 89 84) 6]
Test Case: 266 | Input/Output: [(10 22 53 30) 10]
Test Case: 267 | Input/Output: [(63 49 85 93) 49]
Test Case: 268 | Input/Output: [(4 36 59 19) 4]
Test Case: 269 | Input/Output: [(39 26 100 39) 26]
Test Case: 270 | Input/Output: [(31 66 21 13) 13]
Test Case: 271 | Input/Output: [(76 43 27 47) 27]
Test Case: 272 | Input/Output: [(19 97 88 9) 9]
Test Case: 273 | Input/Output: [(72 84 61 85) 61]
Test Case: 274 | Input/Output: [(66 96 5 49) 5]
Test Case: 275 | Input/Output: [(87 85 74 61) 61]
Test Case: 276 | Input/Output: [(66 12 73 26) 12]
Test Case: 277 | Input/Output: [(51 33 35 76) 33]
Test Case: 278 | Input/Output: [(2 20 71 36) 2]
Test Case: 279 | Input/Output: [(58 58 4 53) 4]
Test Case: 280 | Input/Output: [(94 49 12 99) 12]
Test Case: 281 | Input/Output: [(81 97 10 44) 10]
Test Case: 282 | Input/Output: [(53 24 100 98) 24]
Test Case: 283 | Input/Output: [(75 44 20 78) 20]
Test Case: 284 | Input/Output: [(97 73 18 19) 18]
Test Case: 285 | Input/Output: [(14 20 36 44) 14]
Test Case: 286 | Input/Output: [(53 13 45 61) 13]
Test Case: 287 | Input/Output: [(3 23 15 85) 3]
Test Case: 288 | Input/Output: [(5 36 36 15) 5]
Test Case: 289 | Input/Output: [(41 52 36 61) 36]
Test Case: 290 | Input/Output: [(64 66 26 15) 15]
Test Case: 291 | Input/Output: [(46 39 23 41) 23]
Test Case: 292 | Input/Output: [(32 90 18 96) 18]
Test Case: 293 | Input/Output: [(6 94 81 10) 6]
Test Case: 294 | Input/Output: [(96 58 36 80) 36]
Test Case: 295 | Input/Output: [(48 82 48 81) 48]
Test Case: 296 | Input/Output: [(10 69 50 27) 10]
Test Case: 297 | Input/Output: [(46 31 3 3) 3]
Test Case: 298 | Input/Output: [(23 45 80 94) 23]
Test Case: 299 | Input/Output: [(15 69 4 14) 4]
Test Case: 300 | Input/Output: [(29 54 10 23) 10]
Test Case: 301 | Input/Output: [(74 97 86 69) 69]
Test Case: 302 | Input/Output: [(31 62 27 44) 27]
Test Case: 303 | Input/Output: [(95 61 13 90) 13]
Test Case: 304 | Input/Output: [(11 84 58 62) 11]
Test Case: 305 | Input/Output: [(65 12 36 5) 5]
Test Case: 306 | Input/Output: [(43 3 54 90) 3]
Test Case: 307 | Input/Output: [(18 72 51 41) 18]
Test Case: 308 | Input/Output: [(54 19 48 88) 19]
Test Case: 309 | Input/Output: [(2 65 54 19) 2]
Test Case: 310 | Input/Output: [(0 22 69 86) 0]
Test Case: 311 | Input/Output: [(7 86 81 12) 7]
Test Case: 312 | Input/Output: [(19 69 43 35) 19]
Test Case: 313 | Input/Output: [(72 87 61 34) 34]
Test Case: 314 | Input/Output: [(52 31 3 77) 3]
Test Case: 315 | Input/Output: [(27 17 49 67) 17]
Test Case: 316 | Input/Output: [(8 98 79 76) 8]
Test Case: 317 | Input/Output: [(41 92 81 59) 41]
Test Case: 318 | Input/Output: [(79 55 26 68) 26]
Test Case: 319 | Input/Output: [(52 81 76 35) 35]
Test Case: 320 | Input/Output: [(36 57 79 23) 23]
Test Case: 321 | Input/Output: [(11 91 33 28) 11]
Test Case: 322 | Input/Output: [(5 34 66 72) 5]
Test Case: 323 | Input/Output: [(13 99 91 2) 2]
Test Case: 324 | Input/Output: [(5 1 49 85) 1]
Test Case: 325 | Input/Output: [(1 67 98 21) 1]
Test Case: 326 | Input/Output: [(26 76 89 75) 26]
Test Case: 327 | Input/Output: [(13 88 69 81) 13]
Test Case: 328 | Input/Output: [(95 82 33 59) 33]
Test Case: 329 | Input/Output: [(12 48 84 78) 12]
Test Case: 330 | Input/Output: [(46 51 98 64) 46]
Test Case: 331 | Input/Output: [(71 34 22 85) 22]
Test Case: 332 | Input/Output: [(44 40 36 78) 36]
Test Case: 333 | Input/Output: [(1 39 71 0) 0]
Test Case: 334 | Input/Output: [(80 75 25 38) 25]
Test Case: 335 | Input/Output: [(44 43 0 1) 0]
Test Case: 336 | Input/Output: [(67 35 24 18) 18]
Test Case: 337 | Input/Output: [(14 24 35 2) 2]
Test Case: 338 | Input/Output: [(86 93 75 36) 36]
Test Case: 339 | Input/Output: [(71 38 28 16) 16]
Test Case: 340 | Input/Output: [(59 47 7 83) 7]
Test Case: 341 | Input/Output: [(17 88 85 23) 17]
Test Case: 342 | Input/Output: [(2 93 82 40) 2]
Test Case: 343 | Input/Output: [(5 20 86 60) 5]
Test Case: 344 | Input/Output: [(0 94 100 51) 0]
Test Case: 345 | Input/Output: [(73 94 48 33) 33]
Test Case: 346 | Input/Output: [(15 22 25 22) 15]
Test Case: 347 | Input/Output: [(92 85 82 54) 54]
Test Case: 348 | Input/Output: [(25 19 59 100) 19]
Test Case: 349 | Input/Output: [(15 32 72 20) 15]
Test Case: 350 | Input/Output: [(10 74 50 44) 10]
Test Case: 351 | Input/Output: [(16 61 79 55) 16]
Test Case: 352 | Input/Output: [(4 74 35 96) 4]
Test Case: 353 | Input/Output: [(54 19 59 69) 19]
Test Case: 354 | Input/Output: [(87 77 26 27) 26]
Test Case: 355 | Input/Output: [(31 10 8 64) 8]
Test Case: 356 | Input/Output: [(70 31 10 40) 10]
Test Case: 357 | Input/Output: [(51 50 95 63) 50]
Test Case: 358 | Input/Output: [(4 9 86 72) 4]
Test Case: 359 | Input/Output: [(53 9 25 29) 9]
Test Case: 360 | Input/Output: [(17 86 57 78) 17]
Test Case: 361 | Input/Output: [(52 11 93 88) 11]
Test Case: 362 | Input/Output: [(59 21 38 98) 21]
Test Case: 363 | Input/Output: [(9 55 76 95) 9]
Test Case: 364 | Input/Output: [(72 96 41 41) 41]
Test Case: 365 | Input/Output: [(58 25 13 12) 12]
Test Case: 366 | Input/Output: [(5 47 27 61) 5]
Test Case: 367 | Input/Output: [(91 21 51 66) 21]
Test Case: 368 | Input/Output: [(8 68 81 59) 8]
Test Case: 369 | Input/Output: [(22 27 20 87) 20]
Test Case: 370 | Input/Output: [(68 78 43 87) 43]
Test Case: 371 | Input/Output: [(24 85 26 43) 24]
Test Case: 372 | Input/Output: [(9 51 88 0) 0]
Test Case: 373 | Input/Output: [(8 16 62 16) 8]
Test Case: 374 | Input/Output: [(61 46 97 10) 10]
Test Case: 375 | Input/Output: [(58 41 39 52) 39]
Test Case: 376 | Input/Output: [(45 53 37 19) 19]
Test Case: 377 | Input/Output: [(10 73 53 29) 10]
Test Case: 378 | Input/Output: [(13 39 83 66) 13]
Test Case: 379 | Input/Output: [(43 92 36 41) 36]
Test Case: 380 | Input/Output: [(79 61 73 55) 55]
Test Case: 381 | Input/Output: [(39 39 79 45) 39]
Test Case: 382 | Input/Output: [(69 97 93 12) 12]
Test Case: 383 | Input/Output: [(48 13 71 98) 13]
Test Case: 384 | Input/Output: [(99 97 68 86) 68]
Test Case: 385 | Input/Output: [(51 99 83 91) 51]
Test Case: 386 | Input/Output: [(85 92 9 12) 9]
Test Case: 387 | Input/Output: [(1 98 24 35) 1]
Test Case: 388 | Input/Output: [(16 21 28 70) 16]
Test Case: 389 | Input/Output: [(51 11 96 32) 11]
Test Case: 390 | Input/Output: [(53 11 37 86) 11]
Test Case: 391 | Input/Output: [(9 43 5 16) 5]
Test Case: 392 | Input/Output: [(23 59 84 93) 23]
Test Case: 393 | Input/Output: [(76 0 58 66) 0]
Test Case: 394 | Input/Output: [(5 3 25 88) 3]
Test Case: 395 | Input/Output: [(27 54 77 50) 27]
Test Case: 396 | Input/Output: [(6 73 52 93) 6]
Test Case: 397 | Input/Output: [(16 91 56 17) 16]
Test Case: 398 | Input/Output: [(8 50 80 90) 8]
Test Case: 399 | Input/Output: [(19 46 44 20) 19]
Test Case: 400 | Input/Output: [(-35 34 61 65) -35]
Test Case: 401 | Input/Output: [(52 -80 -93 -7) -93]
Test Case: 402 | Input/Output: [(-33 -44 37 20) -44]
Test Case: 403 | Input/Output: [(7 92 39 -96) -96]
Test Case: 404 | Input/Output: [(-58 -31 4 3) -58]
Test Case: 405 | Input/Output: [(-39 -74 64 -41) -74]
Test Case: 406 | Input/Output: [(-58 60 -35 -35) -58]
Test Case: 407 | Input/Output: [(-93 -24 82 96) -93]
Test Case: 408 | Input/Output: [(-4 -60 -46 -23) -60]
Test Case: 409 | Input/Output: [(-53 -5 -49 32) -53]
Test Case: 410 | Input/Output: [(62 53 89 80) 53]
Test Case: 411 | Input/Output: [(-93 0 83 62) -93]
Test Case: 412 | Input/Output: [(-40 -51 89 -30) -51]
Test Case: 413 | Input/Output: [(-11 91 -70 75) -70]
Test Case: 414 | Input/Output: [(34 29 -52 86) -52]
Test Case: 415 | Input/Output: [(-55 11 -75 83) -75]
Test Case: 416 | Input/Output: [(-17 -38 62 -88) -88]
Test Case: 417 | Input/Output: [(-40 89 -46 13) -46]
Test Case: 418 | Input/Output: [(-97 -9 44 12) -97]
Test Case: 419 | Input/Output: [(-35 -37 7 -47) -47]
Test Case: 420 | Input/Output: [(-62 87 6 95) -62]
Test Case: 421 | Input/Output: [(91 54 55 97) 54]
Test Case: 422 | Input/Output: [(59 67 -38 82) -38]
Test Case: 423 | Input/Output: [(-72 79 -32 -22) -72]
Test Case: 424 | Input/Output: [(-70 91 -81 -38) -81]
Test Case: 425 | Input/Output: [(-20 -13 100 58) -20]
Test Case: 426 | Input/Output: [(-53 -70 -96 41) -96]
Test Case: 427 | Input/Output: [(45 -64 -84 -74) -84]
Test Case: 428 | Input/Output: [(-3 -92 55 53) -92]
Test Case: 429 | Input/Output: [(-56 -54 97 -65) -65]
Test Case: 430 | Input/Output: [(-12 95 -28 -85) -85]
Test Case: 431 | Input/Output: [(16 -29 100 -68) -68]
Test Case: 432 | Input/Output: [(-87 65 95 100) -87]
Test Case: 433 | Input/Output: [(12 93 97 -79) -79]
Test Case: 434 | Input/Output: [(46 -52 10 -25) -52]
Test Case: 435 | Input/Output: [(58 -82 31 26) -82]
Test Case: 436 | Input/Output: [(-84 -47 39 -97) -97]
Test Case: 437 | Input/Output: [(-16 -92 -61 29) -92]
Test Case: 438 | Input/Output: [(16 -64 -77 19) -77]
Test Case: 439 | Input/Output: [(-86 35 -34 -67) -86]
Test Case: 440 | Input/Output: [(-45 30 17 69) -45]
Test Case: 441 | Input/Output: [(-40 48 -54 99) -54]
Test Case: 442 | Input/Output: [(-45 2 9 4) -45]
Test Case: 443 | Input/Output: [(6 5 36 49) 5]
Test Case: 444 | Input/Output: [(64 85 27 46) 27]
Test Case: 445 | Input/Output: [(-12 60 67 66) -12]
Test Case: 446 | Input/Output: [(-36 19 -41 -14) -41]
Test Case: 447 | Input/Output: [(5 -99 -87 -33) -99]
Test Case: 448 | Input/Output: [(-51 2 -39 78) -51]
Test Case: 449 | Input/Output: [(53 10 -43 60) -43]
Test Case: 450 | Input/Output: [(-55 -56 -54 -13) -56]
Test Case: 451 | Input/Output: [(29 17 -32 100) -32]
Test Case: 452 | Input/Output: [(43 -57 -29 39) -57]
Test Case: 453 | Input/Output: [(-41 -60 -18 77) -60]
Test Case: 454 | Input/Output: [(-21 -33 -18 16) -33]
Test Case: 455 | Input/Output: [(58 82 61 -33) -33]
Test Case: 456 | Input/Output: [(-45 -43 44 49) -45]
Test Case: 457 | Input/Output: [(-60 -56 -97 80) -97]
Test Case: 458 | Input/Output: [(78 -83 83 12) -83]
Test Case: 459 | Input/Output: [(-1 -84 83 68) -84]
Test Case: 460 | Input/Output: [(68 33 -4 48) -4]
Test Case: 461 | Input/Output: [(24 35 -41 13) -41]
Test Case: 462 | Input/Output: [(99 -91 83 64) -91]
Test Case: 463 | Input/Output: [(-15 29 -70 -62) -70]
Test Case: 464 | Input/Output: [(40 85 65 0) 0]
Test Case: 465 | Input/Output: [(89 75 42 -55) -55]
Test Case: 466 | Input/Output: [(-57 -30 91 2) -57]
Test Case: 467 | Input/Output: [(-57 11 81 62) -57]
Test Case: 468 | Input/Output: [(-28 32 -82 -75) -82]
Test Case: 469 | Input/Output: [(-17 -11 -11 47) -17]
Test Case: 470 | Input/Output: [(-8 77 8 -46) -46]
Test Case: 471 | Input/Output: [(96 98 -40 -43) -43]
Test Case: 472 | Input/Output: [(-87 89 80 -34) -87]
Test Case: 473 | Input/Output: [(-82 -52 99 6) -82]
Test Case: 474 | Input/Output: [(-28 70 96 0) -28]
Test Case: 475 | Input/Output: [(-90 -65 -66 -23) -90]
Test Case: 476 | Input/Output: [(-8 47 -81 -22) -81]
Test Case: 477 | Input/Output: [(77 44 82 -23) -23]
Test Case: 478 | Input/Output: [(27 30 -91 -43) -91]
Test Case: 479 | Input/Output: [(47 61 58 41) 41]
Test Case: 480 | Input/Output: [(49 -1 28 -51) -51]
Test Case: 481 | Input/Output: [(-83 -74 72 -77) -83]
Test Case: 482 | Input/Output: [(38 -13 36 -6) -13]
Test Case: 483 | Input/Output: [(14 1 -14 10) -14]
Test Case: 484 | Input/Output: [(40 -3 -5 -88) -88]
Test Case: 485 | Input/Output: [(90 22 73 78) 22]
Test Case: 486 | Input/Output: [(-79 15 -10 45) -79]
Test Case: 487 | Input/Output: [(-40 4 -50 -26) -50]
Test Case: 488 | Input/Output: [(98 -20 -93 -53) -93]
Test Case: 489 | Input/Output: [(29 -74 76 39) -74]
Test Case: 490 | Input/Output: [(-37 92 9 -40) -40]
Test Case: 491 | Input/Output: [(-9 38 -92 -74) -92]
Test Case: 492 | Input/Output: [(-82 -50 44 -52) -82]
Test Case: 493 | Input/Output: [(-18 -45 -55 1) -55]
Test Case: 494 | Input/Output: [(43 -58 -79 -93) -93]
Test Case: 495 | Input/Output: [(72 20 -91 -8) -91]
Test Case: 496 | Input/Output: [(90 99 -93 18) -93]
Test Case: 497 | Input/Output: [(-82 -15 -11 56) -82]
Test Case: 498 | Input/Output: [(35 78 -49 50) -49]
Test Case: 499 | Input/Output: [(58 -65 -98 -26) -98]
Test Case: 500 | Input/Output: [(66 -85 -45 -40) -85]
Test Case: 501 | Input/Output: [(96 71 61 -17) -17]
Test Case: 502 | Input/Output: [(-26 49 67 99) -26]
Test Case: 503 | Input/Output: [(48 62 37 19) 19]
Test Case: 504 | Input/Output: [(-33 -22 52 70) -33]
Test Case: 505 | Input/Output: [(12 0 81 33) 0]
Test Case: 506 | Input/Output: [(43 19 90 93) 19]
Test Case: 507 | Input/Output: [(54 60 88 47) 47]
Test Case: 508 | Input/Output: [(-30 1 -34 -76) -76]
Test Case: 509 | Input/Output: [(68 27 3 82) 3]
Test Case: 510 | Input/Output: [(-2 -99 -19 -83) -99]
Test Case: 511 | Input/Output: [(91 91 -22 5) -22]
Test Case: 512 | Input/Output: [(46 24 27 -3) -3]
Test Case: 513 | Input/Output: [(62 52 -82 17) -82]
Test Case: 514 | Input/Output: [(18 19 52 -86) -86]
Test Case: 515 | Input/Output: [(-10 -26 -78 -78) -78]
Test Case: 516 | Input/Output: [(62 84 48 -42) -42]
Test Case: 517 | Input/Output: [(-30 79 34 -23) -30]
Test Case: 518 | Input/Output: [(11 -88 68 -20) -88]
Test Case: 519 | Input/Output: [(28 -18 -83 10) -83]
Test Case: 520 | Input/Output: [(20 -68 -19 73) -68]
Test Case: 521 | Input/Output: [(15 -62 18 -77) -77]
Test Case: 522 | Input/Output: [(47 -60 95 19) -60]
Test Case: 523 | Input/Output: [(-71 19 67 -5) -71]
Test Case: 524 | Input/Output: [(-89 -8 -17 -74) -89]
Test Case: 525 | Input/Output: [(-44 -53 75 8) -53]
Test Case: 526 | Input/Output: [(-28 -60 -44 64) -60]
Test Case: 527 | Input/Output: [(54 21 -59 19) -59]
Test Case: 528 | Input/Output: [(20 64 38 66) 20]
Test Case: 529 | Input/Output: [(-68 -55 7 87) -68]
Test Case: 530 | Input/Output: [(71 42 26 77) 26]
Test Case: 531 | Input/Output: [(-63 57 95 -67) -67]
Test Case: 532 | Input/Output: [(-7 61 -29 60) -29]
Test Case: 533 | Input/Output: [(-96 33 -6 -7) -96]
Test Case: 534 | Input/Output: [(-15 -67 -27 53) -67]
Test Case: 535 | Input/Output: [(-7 -53 -63 49) -63]
Test Case: 536 | Input/Output: [(1 -10 60 -43) -43]
Test Case: 537 | Input/Output: [(20 -3 36 -35) -35]
Test Case: 538 | Input/Output: [(-75 -31 55 27) -75]
Test Case: 539 | Input/Output: [(70 77 61 71) 61]
Test Case: 540 | Input/Output: [(-59 15 -7 -27) -59]
Test Case: 541 | Input/Output: [(-58 8 -4 92) -58]
Test Case: 542 | Input/Output: [(2 -73 -55 44) -73]
Test Case: 543 | Input/Output: [(-81 21 42 83) -81]
Test Case: 544 | Input/Output: [(26 -70 -30 42) -70]
Test Case: 545 | Input/Output: [(-85 18 55 89) -85]
Test Case: 546 | Input/Output: [(-93 -19 -82 -3) -93]
Test Case: 547 | Input/Output: [(-100 -61 92 -45) -100]
Test Case: 548 | Input/Output: [(-76 100 -62 25) -76]
Test Case: 549 | Input/Output: [(-27 -27 -23 -59) -59]
Test Case: 550 | Input/Output: [(-95 -78 36 61) -95]
Test Case: 551 | Input/Output: [(73 -79 1 -6) -79]
Test Case: 552 | Input/Output: [(42 4 59 87) 4]
Test Case: 553 | Input/Output: [(20 20 68 61) 20]
Test Case: 554 | Input/Output: [(-45 -29 22 -88) -88]
Test Case: 555 | Input/Output: [(-73 38 -43 -15) -73]
Test Case: 556 | Input/Output: [(-36 65 -71 95) -71]
Test Case: 557 | Input/Output: [(-99 -72 39 -72) -99]
Test Case: 558 | Input/Output: [(60 -56 -60 -23) -60]
Test Case: 559 | Input/Output: [(-74 -15 -51 -4) -74]
Test Case: 560 | Input/Output: [(9 -84 -45 25) -84]
Test Case: 561 | Input/Output: [(32 23 17 -13) -13]
Test Case: 562 | Input/Output: [(14 31 -14 67) -14]
Test Case: 563 | Input/Output: [(-87 5 -18 20) -87]
Test Case: 564 | Input/Output: [(53 -30 43 -48) -48]
Test Case: 565 | Input/Output: [(-97 -9 88 -1) -97]
Test Case: 566 | Input/Output: [(-66 -52 -30 -6) -66]
Test Case: 567 | Input/Output: [(-99 -86 -17 -15) -99]
Test Case: 568 | Input/Output: [(-23 -21 -82 78) -82]
Test Case: 569 | Input/Output: [(-66 65 5 -98) -98]
Test Case: 570 | Input/Output: [(92 -8 58 26) -8]
Test Case: 571 | Input/Output: [(-18 66 23 -27) -27]
Test Case: 572 | Input/Output: [(89 -96 -73 100) -96]
Test Case: 573 | Input/Output: [(-62 -15 -56 -96) -96]
Test Case: 574 | Input/Output: [(-18 57 40 -25) -25]
Test Case: 575 | Input/Output: [(-52 -47 -98 -52) -98]
Test Case: 576 | Input/Output: [(62 -69 28 -25) -69]
Test Case: 577 | Input/Output: [(38 -100 64 -68) -100]
Test Case: 578 | Input/Output: [(66 5 -47 38) -47]
Test Case: 579 | Input/Output: [(65 -27 63 41) -27]
Test Case: 580 | Input/Output: [(-22 19 -76 68) -76]
Test Case: 581 | Input/Output: [(22 -3 22 2) -3]
Test Case: 582 | Input/Output: [(54 83 50 60) 50]
Test Case: 583 | Input/Output: [(-44 82 32 39) -44]
Test Case: 584 | Input/Output: [(-100 35 6 -61) -100]
Test Case: 585 | Input/Output: [(94 18 -27 -82) -82]
Test Case: 586 | Input/Output: [(-64 -20 -64 1) -64]
Test Case: 587 | Input/Output: [(-79 46 -65 -95) -95]
Test Case: 588 | Input/Output: [(65 -54 -47 91) -54]
Test Case: 589 | Input/Output: [(50 75 -8 51) -8]
Test Case: 590 | Input/Output: [(-32 9 42 -74) -74]
Test Case: 591 | Input/Output: [(-93 -14 -44 -44) -93]
Test Case: 592 | Input/Output: [(79 -24 -19 90) -24]
Test Case: 593 | Input/Output: [(53 -56 -5 86) -56]
Test Case: 594 | Input/Output: [(-71 -98 -90 -77) -98]
Test Case: 595 | Input/Output: [(-67 -58 12 34) -67]
Test Case: 596 | Input/Output: [(-84 48 72 -68) -84]
Test Case: 597 | Input/Output: [(52 -35 22 75) -35]
Test Case: 598 | Input/Output: [(10 80 33 -70) -70]
Test Case: 599 | Input/Output: [(95 -36 -94 -40) -94]
Test Case: 600 | Input/Output: [(-39 86 -65 92) -65]
Test Case: 601 | Input/Output: [(-37 -91 -74 -68) -91]
Test Case: 602 | Input/Output: [(60 -66 69 -28) -66]
Test Case: 603 | Input/Output: [(-66 18 11 65) -66]
Test Case: 604 | Input/Output: [(-64 5 -97 -65) -97]
Test Case: 605 | Input/Output: [(62 63 -28 -24) -28]
Test Case: 606 | Input/Output: [(-91 35 -59 -27) -91]
Test Case: 607 | Input/Output: [(-42 -25 4 12) -42]
Test Case: 608 | Input/Output: [(63 42 -42 80) -42]
Test Case: 609 | Input/Output: [(90 -91 42 -77) -91]
Test Case: 610 | Input/Output: [(-69 7 -2 60) -69]
Test Case: 611 | Input/Output: [(-78 15 47 11) -78]
Test Case: 612 | Input/Output: [(-30 -42 -93 78) -93]
Test Case: 613 | Input/Output: [(-37 54 100 -3) -37]
Test Case: 614 | Input/Output: [(-29 -78 -7 35) -78]
Test Case: 615 | Input/Output: [(-80 20 -91 -3) -91]
Test Case: 616 | Input/Output: [(62 98 7 -40) -40]
Test Case: 617 | Input/Output: [(-74 -81 90 -46) -81]
Test Case: 618 | Input/Output: [(36 -93 -95 -100) -100]
Test Case: 619 | Input/Output: [(-47 -23 15 32) -47]
Test Case: 620 | Input/Output: [(73 86 -36 -70) -70]
Test Case: 621 | Input/Output: [(-68 64 -99 36) -99]
Test Case: 622 | Input/Output: [(-81 -74 -22 35) -81]
Test Case: 623 | Input/Output: [(-28 -43 -45 25) -45]
Test Case: 624 | Input/Output: [(23 -7 -34 56) -34]
Test Case: 625 | Input/Output: [(60 -34 6 -36) -36]
Test Case: 626 | Input/Output: [(-37 52 -43 -14) -43]
Test Case: 627 | Input/Output: [(-1 -86 19 68) -86]
Test Case: 628 | Input/Output: [(-52 -27 -61 -24) -61]
Test Case: 629 | Input/Output: [(59 0 62 -94) -94]
Test Case: 630 | Input/Output: [(100 -39 -56 67) -56]
Test Case: 631 | Input/Output: [(-74 37 55 -51) -74]
Test Case: 632 | Input/Output: [(-43 -12 -92 9) -92]
Test Case: 633 | Input/Output: [(1 -12 20 -14) -14]
Test Case: 634 | Input/Output: [(50 50 55 -91) -91]
Test Case: 635 | Input/Output: [(77 -67 97 74) -67]
Test Case: 636 | Input/Output: [(92 -68 83 -88) -88]
Test Case: 637 | Input/Output: [(96 23 91 -3) -3]
Test Case: 638 | Input/Output: [(66 6 -68 85) -68]
Test Case: 639 | Input/Output: [(-15 60 -38 -34) -38]
Test Case: 640 | Input/Output: [(-98 59 78 -92) -98]
Test Case: 641 | Input/Output: [(59 -94 0 37) -94]
Test Case: 642 | Input/Output: [(8 -99 19 77) -99]
Test Case: 643 | Input/Output: [(48 -1 71 -15) -15]
Test Case: 644 | Input/Output: [(14 -7 67 -60) -60]
Test Case: 645 | Input/Output: [(62 -95 -42 -39) -95]
Test Case: 646 | Input/Output: [(7 28 11 98) 7]
Test Case: 647 | Input/Output: [(31 86 -65 11) -65]
Test Case: 648 | Input/Output: [(-26 -34 -20 -32) -34]
Test Case: 649 | Input/Output: [(56 80 42 20) 20]
Test Case: 650 | Input/Output: [(41 17 34 49) 17]
Test Case: 651 | Input/Output: [(24 52 3 94) 3]
Test Case: 652 | Input/Output: [(1 -62 77 -8) -62]
Test Case: 653 | Input/Output: [(-45 -43 88 -73) -73]
Test Case: 654 | Input/Output: [(42 -96 46 66) -96]
Test Case: 655 | Input/Output: [(53 -93 52 95) -93]
Test Case: 656 | Input/Output: [(-94 -98 74 36) -98]
Test Case: 657 | Input/Output: [(-79 -95 -69 -82) -95]
Test Case: 658 | Input/Output: [(64 -60 75 -34) -60]
Test Case: 659 | Input/Output: [(41 -55 78 94) -55]
Test Case: 660 | Input/Output: [(-32 -1 -3 91) -32]
Test Case: 661 | Input/Output: [(-59 24 6 -94) -94]
Test Case: 662 | Input/Output: [(-35 32 -84 26) -84]
Test Case: 663 | Input/Output: [(25 92 15 66) 15]
Test Case: 664 | Input/Output: [(8 -17 -6 -84) -84]
Test Case: 665 | Input/Output: [(55 16 95 44) 16]
Test Case: 666 | Input/Output: [(8 87 85 82) 8]
Test Case: 667 | Input/Output: [(-89 29 -16 16) -89]
Test Case: 668 | Input/Output: [(75 86 -83 48) -83]
Test Case: 669 | Input/Output: [(86 5 99 -72) -72]
Test Case: 670 | Input/Output: [(-63 37 -24 -81) -81]
Test Case: 671 | Input/Output: [(75 -45 -52 86) -52]
Test Case: 672 | Input/Output: [(68 22 -1 89) -1]
Test Case: 673 | Input/Output: [(88 -95 66 -60) -95]
Test Case: 674 | Input/Output: [(-99 -30 -19 -35) -99]
Test Case: 675 | Input/Output: [(87 100 10 8) 8]
Test Case: 676 | Input/Output: [(-93 42 -61 -98) -98]
Test Case: 677 | Input/Output: [(-54 -33 3 10) -54]
Test Case: 678 | Input/Output: [(11 -72 40 37) -72]
Test Case: 679 | Input/Output: [(-75 -73 -15 8) -75]
Test Case: 680 | Input/Output: [(-17 -14 24 -79) -79]
Test Case: 681 | Input/Output: [(82 -48 39 -93) -93]
Test Case: 682 | Input/Output: [(97 72 -52 47) -52]
Test Case: 683 | Input/Output: [(-53 53 -4 99) -53]
Test Case: 684 | Input/Output: [(-99 -44 -18 -57) -99]
Test Case: 685 | Input/Output: [(38 40 -7 25) -7]
Test Case: 686 | Input/Output: [(66 -33 -6 -33) -33]
Test Case: 687 | Input/Output: [(-8 29 -16 100) -16]
Test Case: 688 | Input/Output: [(-87 39 -72 5) -87]
Test Case: 689 | Input/Output: [(-78 -23 99 52) -78]
Test Case: 690 | Input/Output: [(25 8 37 -77) -77]
Test Case: 691 | Input/Output: [(64 -32 -11 39) -32]
Test Case: 692 | Input/Output: [(14 -82 59 -81) -82]
Test Case: 693 | Input/Output: [(87 9 -92 0) -92]
Test Case: 694 | Input/Output: [(-13 -88 60 -31) -88]
Test Case: 695 | Input/Output: [(9 -15 81 -9) -15]
Test Case: 696 | Input/Output: [(-90 -8 55 -42) -90]
Test Case: 697 | Input/Output: [(-22 14 -44 80) -44]
Test Case: 698 | Input/Output: [(-60 95 43 4) -60]
Test Case: 699 | Input/Output: [(-26 68 -43 -75) -75]
Test Case: 700 | Input/Output: [(-71 -79 -22 60) -79]
Test Case: 701 | Input/Output: [(17 75 12 -7) -7]
Test Case: 702 | Input/Output: [(12 83 -51 78) -51]
Test Case: 703 | Input/Output: [(-12 72 56 -78) -78]
Test Case: 704 | Input/Output: [(32 -44 36 -13) -44]
Test Case: 705 | Input/Output: [(56 -72 -23 -99) -99]
Test Case: 706 | Input/Output: [(84 55 -38 -17) -38]
Test Case: 707 | Input/Output: [(-100 42 51 -87) -100]
Test Case: 708 | Input/Output: [(-83 18 -50 -26) -83]
Test Case: 709 | Input/Output: [(-58 -55 -53 51) -58]
Test Case: 710 | Input/Output: [(40 -55 45 -59) -59]
Test Case: 711 | Input/Output: [(67 82 51 -41) -41]
Test Case: 712 | Input/Output: [(79 20 -68 80) -68]
Test Case: 713 | Input/Output: [(77 -18 77 -60) -60]
Test Case: 714 | Input/Output: [(36 16 -12 67) -12]
Test Case: 715 | Input/Output: [(-90 15 -78 21) -90]
Test Case: 716 | Input/Output: [(-62 25 -78 -29) -78]
Test Case: 717 | Input/Output: [(69 42 -8 -24) -24]
Test Case: 718 | Input/Output: [(87 83 -86 -48) -86]
Test Case: 719 | Input/Output: [(-25 -93 6 32) -93]
Test Case: 720 | Input/Output: [(73 76 7 -94) -94]
Test Case: 721 | Input/Output: [(41 -41 -29 9) -41]
Test Case: 722 | Input/Output: [(53 2 -55 -58) -58]
Test Case: 723 | Input/Output: [(-48 -69 69 33) -69]
Test Case: 724 | Input/Output: [(40 90 -28 47) -28]
Test Case: 725 | Input/Output: [(75 -4 -72 -40) -72]
Test Case: 726 | Input/Output: [(27 87 -21 84) -21]
Test Case: 727 | Input/Output: [(14 20 12 -93) -93]
Test Case: 728 | Input/Output: [(-42 -76 90 -73) -76]
Test Case: 729 | Input/Output: [(-15 -21 -6 80) -21]
Test Case: 730 | Input/Output: [(-1 -72 13 -34) -72]
Test Case: 731 | Input/Output: [(-13 56 85 47) -13]
Test Case: 732 | Input/Output: [(-17 -26 -68 -27) -68]
Test Case: 733 | Input/Output: [(-5 -6 -21 94) -21]
Test Case: 734 | Input/Output: [(-65 30 30 -59) -65]
Test Case: 735 | Input/Output: [(-24 -91 54 30) -91]
Test Case: 736 | Input/Output: [(-33 -88 11 15) -88]
Test Case: 737 | Input/Output: [(-21 -90 -42 100) -90]
Test Case: 738 | Input/Output: [(97 -85 30 54) -85]
Test Case: 739 | Input/Output: [(-48 83 -63 -79) -79]
Test Case: 740 | Input/Output: [(63 -64 74 -62) -64]
Test Case: 741 | Input/Output: [(74 -13 39 80) -13]
Test Case: 742 | Input/Output: [(49 18 72 -43) -43]
Test Case: 743 | Input/Output: [(-45 -79 52 -98) -98]
Test Case: 744 | Input/Output: [(-46 9 81 -73) -73]
Test Case: 745 | Input/Output: [(-98 45 11 -21) -98]
Test Case: 746 | Input/Output: [(-91 -100 32 -13) -100]
Test Case: 747 | Input/Output: [(99 30 -61 -30) -61]
Test Case: 748 | Input/Output: [(-63 95 5 -16) -63]
Test Case: 749 | Input/Output: [(-98 -76 -10 100) -98]
Test Case: 750 | Input/Output: [(59 77 -46 87) -46]
Test Case: 751 | Input/Output: [(24 9 67 98) 9]
Test Case: 752 | Input/Output: [(-71 -86 34 -63) -86]
Test Case: 753 | Input/Output: [(74 -82 73 31) -82]
Test Case: 754 | Input/Output: [(53 -23 -90 55) -90]
Test Case: 755 | Input/Output: [(-20 56 30 46) -20]
Test Case: 756 | Input/Output: [(-88 90 94 -59) -88]
Test Case: 757 | Input/Output: [(68 -99 -91 -33) -99]
Test Case: 758 | Input/Output: [(23 12 81 56) 12]
Test Case: 759 | Input/Output: [(26 19 -38 -66) -66]
Test Case: 760 | Input/Output: [(65 0 -96 46) -96]
Test Case: 761 | Input/Output: [(-76 -26 90 -86) -86]
Test Case: 762 | Input/Output: [(-61 95 25 16) -61]
Test Case: 763 | Input/Output: [(88 -21 -70 -86) -86]
Test Case: 764 | Input/Output: [(33 40 55 -92) -92]
Test Case: 765 | Input/Output: [(-56 -15 22 65) -56]
Test Case: 766 | Input/Output: [(44 30 -36 44) -36]
Test Case: 767 | Input/Output: [(80 -19 -74 76) -74]
Test Case: 768 | Input/Output: [(27 25 -2 -3) -3]
Test Case: 769 | Input/Output: [(75 -70 7 24) -70]
Test Case: 770 | Input/Output: [(33 -58 -40 -53) -58]
Test Case: 771 | Input/Output: [(59 28 4 74) 4]
Test Case: 772 | Input/Output: [(15 29 39 100) 15]
Test Case: 773 | Input/Output: [(99 53 -4 1) -4]
Test Case: 774 | Input/Output: [(-73 -19 54 -38) -73]
Test Case: 775 | Input/Output: [(-18 80 -67 -18) -67]
Test Case: 776 | Input/Output: [(25 -39 -24 -73) -73]
Test Case: 777 | Input/Output: [(98 85 -9 -31) -31]
Test Case: 778 | Input/Output: [(-62 44 13 49) -62]
Test Case: 779 | Input/Output: [(84 71 -79 -64) -79]
Test Case: 780 | Input/Output: [(-66 90 40 -41) -66]
Test Case: 781 | Input/Output: [(-40 -82 -30 -43) -82]
Test Case: 782 | Input/Output: [(-14 57 14 4) -14]
Test Case: 783 | Input/Output: [(35 18 -14 72) -14]
Test Case: 784 | Input/Output: [(-81 -3 57 27) -81]
Test Case: 785 | Input/Output: [(98 -43 48 -43) -43]
Test Case: 786 | Input/Output: [(-75 1 66 -16) -75]
Test Case: 787 | Input/Output: [(36 -32 -96 -47) -96]
Test Case: 788 | Input/Output: [(86 -76 -17 15) -76]
Test Case: 789 | Input/Output: [(50 47 13 10) 10]
Test Case: 790 | Input/Output: [(-49 -16 -72 24) -72]
Test Case: 791 | Input/Output: [(33 83 8 81) 8]
Test Case: 792 | Input/Output: [(-68 -17 99 78) -68]
Test Case: 793 | Input/Output: [(-100 36 -23 -3) -100]
Test Case: 794 | Input/Output: [(-46 28 -73 33) -73]
Test Case: 795 | Input/Output: [(-11 88 -5 84) -11]
Test Case: 796 | Input/Output: [(-96 40 -49 8) -96]
Test Case: 797 | Input/Output: [(-69 16 67 26) -69]
Test Case: 798 | Input/Output: [(-92 -76 -74 80) -92]
Test Case: 799 | Input/Output: [(86 -59 89 93) -59]
Test Case: 800 | Input/Output: [(62 -30 -34 -43) -43]
Test Case: 801 | Input/Output: [(20 66 15 37) 15]
Test Case: 802 | Input/Output: [(-77 70 -73 87) -77]
Test Case: 803 | Input/Output: [(-11 -16 24 -45) -45]
Test Case: 804 | Input/Output: [(49 -7 -15 44) -15]
Test Case: 805 | Input/Output: [(-9 84 -55 -90) -90]
Test Case: 806 | Input/Output: [(81 -88 -100 71) -100]
Test Case: 807 | Input/Output: [(-99 17 60 -37) -99]
Test Case: 808 | Input/Output: [(-3 -3 -57 -59) -59]
Test Case: 809 | Input/Output: [(51 -27 54 40) -27]
Test Case: 810 | Input/Output: [(14 53 -83 -97) -97]
Test Case: 811 | Input/Output: [(-94 -99 -2 7) -99]
Test Case: 812 | Input/Output: [(44 -50 44 15) -50]
Test Case: 813 | Input/Output: [(-50 -30 -33 89) -50]
Test Case: 814 | Input/Output: [(-42 59 -81 -76) -81]
Test Case: 815 | Input/Output: [(-4 70 -15 2) -15]
Test Case: 816 | Input/Output: [(69 -68 9 96) -68]
Test Case: 817 | Input/Output: [(82 46 -66 -31) -66]
Test Case: 818 | Input/Output: [(-30 80 -96 -61) -96]
Test Case: 819 | Input/Output: [(27 0 -10 -24) -24]
Test Case: 820 | Input/Output: [(-12 -30 -20 37) -30]
Test Case: 821 | Input/Output: [(31 4 34 -23) -23]
Test Case: 822 | Input/Output: [(-1 -30 95 42) -30]
Test Case: 823 | Input/Output: [(83 24 -30 62) -30]
Test Case: 824 | Input/Output: [(-32 -52 83 68) -52]
Test Case: 825 | Input/Output: [(-45 2 -74 -36) -74]
Test Case: 826 | Input/Output: [(89 -74 0 28) -74]
Test Case: 827 | Input/Output: [(96 16 83 87) 16]
Test Case: 828 | Input/Output: [(76 -3 45 46) -3]
Test Case: 829 | Input/Output: [(89 56 -92 92) -92]
Test Case: 830 | Input/Output: [(37 -33 -11 -51) -51]
Test Case: 831 | Input/Output: [(85 2 -13 19) -13]
Test Case: 832 | Input/Output: [(25 -29 46 74) -29]
Test Case: 833 | Input/Output: [(-3 51 -10 10) -10]
Test Case: 834 | Input/Output: [(71 -82 8 -69) -82]
Test Case: 835 | Input/Output: [(29 16 -98 53) -98]
Test Case: 836 | Input/Output: [(-59 -14 86 0) -59]
Test Case: 837 | Input/Output: [(-8 -7 22 8) -8]
Test Case: 838 | Input/Output: [(-69 -28 -49 -65) -69]
Test Case: 839 | Input/Output: [(-82 96 99 62) -82]
Test Case: 840 | Input/Output: [(41 63 45 -34) -34]
Test Case: 841 | Input/Output: [(62 44 53 88) 44]
Test Case: 842 | Input/Output: [(84 96 -17 -99) -99]
Test Case: 843 | Input/Output: [(49 53 38 29) 29]
Test Case: 844 | Input/Output: [(67 -34 -95 -30) -95]
Test Case: 845 | Input/Output: [(-22 -5 -6 51) -22]
Test Case: 846 | Input/Output: [(77 -73 4 -7) -73]
Test Case: 847 | Input/Output: [(15 47 72 -11) -11]
Test Case: 848 | Input/Output: [(-45 -92 -94 -5) -94]
Test Case: 849 | Input/Output: [(11 46 45 -77) -77]
Test Case: 850 | Input/Output: [(49 -45 26 78) -45]
Test Case: 851 | Input/Output: [(-53 -89 -100 33) -100]
Test Case: 852 | Input/Output: [(-37 -61 14 40) -61]
Test Case: 853 | Input/Output: [(85 -30 23 2) -30]
Test Case: 854 | Input/Output: [(76 49 41 -23) -23]
Test Case: 855 | Input/Output: [(40 -79 -28 -58) -79]
Test Case: 856 | Input/Output: [(-50 -28 47 43) -50]
Test Case: 857 | Input/Output: [(-37 56 -29 88) -37]
Test Case: 858 | Input/Output: [(28 -41 28 -90) -90]
Test Case: 859 | Input/Output: [(-93 -47 49 14) -93]
Test Case: 860 | Input/Output: [(-5 45 -54 25) -54]
Test Case: 861 | Input/Output: [(52 78 33 16) 16]
Test Case: 862 | Input/Output: [(73 21 -63 17) -63]
Test Case: 863 | Input/Output: [(1 -58 -9 -48) -58]
Test Case: 864 | Input/Output: [(-56 14 20 74) -56]
Test Case: 865 | Input/Output: [(-87 -4 52 -42) -87]
Test Case: 866 | Input/Output: [(-75 -49 -8 18) -75]
Test Case: 867 | Input/Output: [(3 -33 -25 -8) -33]
Test Case: 868 | Input/Output: [(-74 19 -67 35) -74]
Test Case: 869 | Input/Output: [(-45 16 -67 -82) -82]
Test Case: 870 | Input/Output: [(90 -79 -3 -38) -79]
Test Case: 871 | Input/Output: [(-21 93 -58 -24) -58]
Test Case: 872 | Input/Output: [(-49 -1 -62 45) -62]
Test Case: 873 | Input/Output: [(-71 -86 -67 -89) -89]
Test Case: 874 | Input/Output: [(4 90 16 61) 4]
Test Case: 875 | Input/Output: [(-8 0 38 52) -8]
Test Case: 876 | Input/Output: [(49 -12 -99 9) -99]
Test Case: 877 | Input/Output: [(58 13 60 -55) -55]
Test Case: 878 | Input/Output: [(-72 -3 68 75) -72]
Test Case: 879 | Input/Output: [(-61 19 10 80) -61]
Test Case: 880 | Input/Output: [(70 -11 37 -87) -87]
Test Case: 881 | Input/Output: [(-30 43 45 -71) -71]
Test Case: 882 | Input/Output: [(-49 13 30 17) -49]
Test Case: 883 | Input/Output: [(-83 42 88 -83) -83]
Test Case: 884 | Input/Output: [(-26 96 -7 -48) -48]
Test Case: 885 | Input/Output: [(44 -90 -2 64) -90]
Test Case: 886 | Input/Output: [(-12 84 -57 -53) -57]
Test Case: 887 | Input/Output: [(23 35 -82 51) -82]
Test Case: 888 | Input/Output: [(-99 41 -88 -70) -99]
Test Case: 889 | Input/Output: [(-98 -46 -99 -4) -99]
Test Case: 890 | Input/Output: [(-83 29 11 -86) -86]
Test Case: 891 | Input/Output: [(47 -58 48 -49) -58]
Test Case: 892 | Input/Output: [(-21 54 51 -36) -36]
Test Case: 893 | Input/Output: [(-79 10 -32 -58) -79]
Test Case: 894 | Input/Output: [(45 91 -64 53) -64]
Test Case: 895 | Input/Output: [(-50 -27 78 -30) -50]
Test Case: 896 | Input/Output: [(21 -91 -82 -8) -91]
Test Case: 897 | Input/Output: [(-48 -18 -7 77) -48]
Test Case: 898 | Input/Output: [(-33 44 19 3) -33]
Test Case: 899 | Input/Output: [(-27 28 -37 -59) -59]
Test Case: 900 | Input/Output: [(22 -25 -55 54) -55]
Test Case: 901 | Input/Output: [(-28 23 61 9) -28]
Test Case: 902 | Input/Output: [(-90 -8 -8 36) -90]
Test Case: 903 | Input/Output: [(-63 64 29 47) -63]
Test Case: 904 | Input/Output: [(-69 40 -40 48) -69]
Test Case: 905 | Input/Output: [(30 11 -80 -11) -80]
Test Case: 906 | Input/Output: [(-26 20 -91 -66) -91]
Test Case: 907 | Input/Output: [(93 -95 14 -89) -95]
Test Case: 908 | Input/Output: [(44 -51 85 51) -51]
Test Case: 909 | Input/Output: [(13 -50 43 -20) -50]
Test Case: 910 | Input/Output: [(-6 15 61 65) -6]
Test Case: 911 | Input/Output: [(-91 28 63 93) -91]
Test Case: 912 | Input/Output: [(-68 -27 -2 -7) -68]
Test Case: 913 | Input/Output: [(-97 13 -71 -4) -97]
Test Case: 914 | Input/Output: [(32 78 95 -79) -79]
Test Case: 915 | Input/Output: [(40 -80 -88 30) -88]
Test Case: 916 | Input/Output: [(-93 -45 44 94) -93]
Test Case: 917 | Input/Output: [(11 10 23 53) 10]
Test Case: 918 | Input/Output: [(26 100 38 -28) -28]
Test Case: 919 | Input/Output: [(46 85 41 42) 41]
Test Case: 920 | Input/Output: [(-66 -89 89 -40) -89]
Test Case: 921 | Input/Output: [(-46 -37 69 -99) -99]
Test Case: 922 | Input/Output: [(51 -53 93 -36) -53]
Test Case: 923 | Input/Output: [(-51 97 67 -12) -51]
Test Case: 924 | Input/Output: [(45 -41 17 69) -41]
Test Case: 925 | Input/Output: [(20 -15 3 47) -15]
Test Case: 926 | Input/Output: [(3 -92 70 6) -92]
Test Case: 927 | Input/Output: [(-72 -39 96 -97) -97]
Test Case: 928 | Input/Output: [(53 -45 100 49) -45]
Test Case: 929 | Input/Output: [(28 91 -34 66) -34]
Test Case: 930 | Input/Output: [(51 46 -32 -77) -77]
Test Case: 931 | Input/Output: [(47 -9 31 9) -9]
Test Case: 932 | Input/Output: [(-20 -88 61 -25) -88]
Test Case: 933 | Input/Output: [(-32 56 26 -91) -91]
Test Case: 934 | Input/Output: [(-71 -53 10 -82) -82]
Test Case: 935 | Input/Output: [(48 -33 -75 -26) -75]
Test Case: 936 | Input/Output: [(19 -33 -73 -17) -73]
Test Case: 937 | Input/Output: [(-13 73 -46 64) -46]
Test Case: 938 | Input/Output: [(-52 -80 -43 73) -80]
Test Case: 939 | Input/Output: [(-3 -51 -30 95) -51]
Test Case: 940 | Input/Output: [(52 -17 49 -27) -27]
Test Case: 941 | Input/Output: [(37 34 -80 46) -80]
Test Case: 942 | Input/Output: [(-38 77 -21 -58) -58]
Test Case: 943 | Input/Output: [(99 23 60 -92) -92]
Test Case: 944 | Input/Output: [(-87 2 35 54) -87]
Test Case: 945 | Input/Output: [(-20 -25 13 -49) -49]
Test Case: 946 | Input/Output: [(77 -14 53 53) -14]
Test Case: 947 | Input/Output: [(0 21 95 85) 0]
Test Case: 948 | Input/Output: [(92 -92 78 -73) -92]
Test Case: 949 | Input/Output: [(14 -94 -83 89) -94]
Test Case: 950 | Input/Output: [(45 -73 76 -52) -73]
Test Case: 951 | Input/Output: [(-67 97 19 9) -67]
Test Case: 952 | Input/Output: [(-87 -62 -18 7) -87]
Test Case: 953 | Input/Output: [(87 -71 -50 -59) -71]
Test Case: 954 | Input/Output: [(0 86 15 -98) -98]
Test Case: 955 | Input/Output: [(-44 78 -41 48) -44]
Test Case: 956 | Input/Output: [(-2 -40 -72 -76) -76]
Test Case: 957 | Input/Output: [(-39 45 8 6) -39]
Test Case: 958 | Input/Output: [(57 -26 7 -18) -26]
Test Case: 959 | Input/Output: [(14 59 -8 67) -8]
Test Case: 960 | Input/Output: [(-35 48 85 38) -35]
Test Case: 961 | Input/Output: [(-17 -62 -14 22) -62]
Test Case: 962 | Input/Output: [(-18 -92 -49 -86) -92]
Test Case: 963 | Input/Output: [(27 33 -41 -12) -41]
Test Case: 964 | Input/Output: [(16 -71 68 33) -71]
Test Case: 965 | Input/Output: [(44 -62 70 84) -62]
Test Case: 966 | Input/Output: [(20 -48 80 34) -48]
Test Case: 967 | Input/Output: [(57 -97 -95 -20) -97]
Test Case: 968 | Input/Output: [(53 -65 54 84) -65]
Test Case: 969 | Input/Output: [(-59 47 -66 -59) -66]
Test Case: 970 | Input/Output: [(-44 -38 -39 72) -44]
Test Case: 971 | Input/Output: [(68 -33 -52 9) -52]
Test Case: 972 | Input/Output: [(-87 13 33 30) -87]
Test Case: 973 | Input/Output: [(-36 8 -53 34) -53]
Test Case: 974 | Input/Output: [(32 -33 -7 -98) -98]
Test Case: 975 | Input/Output: [(83 95 -91 40) -91]
Test Case: 976 | Input/Output: [(41 79 59 46) 41]
Test Case: 977 | Input/Output: [(-35 82 -30 40) -35]
Test Case: 978 | Input/Output: [(-29 18 -69 66) -69]
Test Case: 979 | Input/Output: [(3 -12 54 -9) -12]
Test Case: 980 | Input/Output: [(42 -57 96 -67) -67]
Test Case: 981 | Input/Output: [(17 79 -22 -72) -72]
Test Case: 982 | Input/Output: [(-68 -61 -72 -30) -72]
Test Case: 983 | Input/Output: [(-34 73 -73 -48) -73]
Test Case: 984 | Input/Output: [(-39 -74 70 47) -74]
Test Case: 985 | Input/Output: [(79 5 -51 -96) -96]
Test Case: 986 | Input/Output: [(-55 12 -93 -1) -93]
Test Case: 987 | Input/Output: [(-31 -89 95 -68) -89]
Test Case: 988 | Input/Output: [(-65 50 10 67) -65]
Test Case: 989 | Input/Output: [(-64 0 65 -95) -95]
Test Case: 990 | Input/Output: [(-87 -57 36 53) -87]
Test Case: 991 | Input/Output: [(-19 76 82 54) -19]
Test Case: 992 | Input/Output: [(-4 22 75 -74) -74]
Test Case: 993 | Input/Output: [(40 60 99 38) 38]
Test Case: 994 | Input/Output: [(89 -95 18 -49) -95]
Test Case: 995 | Input/Output: [(29 10 0 60) 0]
Test Case: 996 | Input/Output: [(71 -32 -14 40) -32]
Test Case: 997 | Input/Output: [(31 50 -57 6) -57]
Test Case: 998 | Input/Output: [(2 66 -14 -58) -58]
Test Case: 999 | Input/Output: [(-86 78 76 14) -86]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -46 -15 121 -112 93 26 6 -83 34 -111 25 63 -13 -60 57 -57
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[83 13 13 13] 13] [[42 -22 42 42] -22] [[-79 -79 -37 -79] -79] [[-75 -75 21 -75] -75] [[45 45 67 45] 45] [[-80 -80 -80 64] -80] [[85 85 85 1] 1] [[-76 -76 -79 -76] -79] [[5 5 5 82] 5] [[-80 -80 50 -80] -80] [(39 39 39 39) 39] [(-91 -91 -91 -91) -91] [(-89 -89 -89 -89) -89] [(-79 -79 -79 -79) -79] [(-2 -2 -2 -2) -2] [(16 99 77 37) 16] [(98 83 21 61) 21] [(6 63 11 91) 6] [(10 22 77 43) 10] [(32 16 20 15) 15] [(2 75 20 2) 2] [(40 83 89 40) 40] [(62 37 82 82) 37] [(21 57 10 92) 10] [(56 85 69 99) 56] [(58 19 11 77) 11] [(86 56 11 70) 11] [(71 76 60 46) 46] [(56 5 54 6) 5] [(29 28 47 25) 25] [(86 91 49 56) 49] [(33 45 98 33) 33] [(55 40 73 70) 40] [(6 24 57 25) 6] [(4 19 85 83) 4] [(-93 -57 15 -36) -93] [(-50 27 -79 76) -79] [(96 84 -80 52) -80] [(-72 5 57 -85) -85] [(53 48 19 -56) -56] [(-13 -50 23 -63) -63] [(-38 60 -8 17) -38] [(48 -29 84 35) -29] [(-100 -20 37 59) -100] [(19 87 -1 -35) -35] [(-96 -47 37 -61) -96] [(-28 -100 -74 10) -100] [(53 -93 79 -97) -97] [(-11 -45 42 38) -45] [(-2 -69 -16 63) -69] [(90 29 -80 96) -80] [(3 55 47 39) 3] [(51 55 -51 -86) -86] [(80 -97 3 35) -97] [(90 27 -23 10) -23] [(-35 -51 47 83) -51] [(-18 77 -25 10) -25] [(5 -72 97 -71) -72] [(-58 -89 50 99) -89] [(42 89 71 81) 42] [(-18 -14 -63 -24) -63] [(-78 77 88 1) -78] [(69 8 -89 -36) -89] [(-95 -56 21 -22) -95] [(-63 -85 -68 -81) -85] [(-8 -58 85 -46) -58] [(71 70 49 30) 30] [(-56 -58 -7 -72) -72] [(60 4 3 70) 3] [(-81 -53 -97 62) -97] [(91 87 90 -80) -80] [(80 -46 -33 -55) -55] [(53 -29 33 54) -29] [(88 37 -100 -53) -100] [(52 -5 79 -86) -86] [(-30 32 -90 -11) -90] [(-66 -27 -41 56) -66] [(-100 -65 60 -51) -100] [(82 -85 46 15) -85] [(-12 90 -52 -50) -52] [(47 59 23 63) 23] [(94 42 -18 -12) -18] [(-8 -77 -30 -30) -77] [(79 -76 98 -29) -76] [(58 -2 92 78) -2] [(-9 -49 -68 -8) -68] [(22 -45 -6 -27) -45] [(22 80 -16 -8) -16] [(62 71 -98 -13) -98] [(-49 22 -82 76) -82] [(-75 -88 66 33) -88] [(-79 100 14 -88) -88] [(2 75 -33 -2) -33] [(94 79 85 -47) -47] [(-29 16 -43 -64) -64])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 619
Test mean error for best: 0.61900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div})
Lexicase best program: (integer_yank exec_empty boolean_yank integer_mod exec_dup_items exec_dup_items exec_do*times () integer_max integer_min exec_s_when_autoconstructing (exec_noop) (boolean_invert_second_then_and integer_inc in2 exec_swap (in1 exec_y (boolean_pop print_integer integer_eq integer_swap exec_eq exec_s_when_autoconstructing (integer_dup_times) () (integer_sub exec_k (exec_s_when_autoconstructing (boolean_invert_second_then_and) (in3 integer_gte boolean_invert_first_then_and boolean_eq integer_lt) (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_or boolean_yank exec_y_when_autoconstructing (boolean_not integer_yank) exec_shove () exec_eq) (in4 integer_swap exec_when (exec_dup (exec_shove (exec_yank) exec_dup_items boolean_empty print_boolean exec_swap (integer_fromboolean exec_empty exec_y_when_autoconstructing (exec_pop (print_boolean exec_pop (exec_k_when_autoconstructing (exec_rot (integer_lt integer_stackdepth) (boolean_yank integer_mult integer_max) (exec_dup_times (boolean_rot boolean_and in4 integer_mod integer_fromboolean exec_do*while (integer_dup_items integer_dup) exec_yankdup) boolean_stackdepth boolean_rot print_integer exec_pop (in1 boolean_rot integer_min integer_lte in1 integer_eq exec_dup_times () exec_dup (integer_div)))) ())))) ()))) ())) ()))) ()) ())
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 129
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div})
Zero cases best program: (integer_yank exec_empty boolean_yank integer_mod exec_dup_items exec_dup_items exec_do*times () integer_max integer_min exec_s_when_autoconstructing (exec_noop) (boolean_invert_second_then_and integer_inc in2 exec_swap (in1 exec_y (boolean_pop print_integer integer_eq integer_swap exec_eq exec_s_when_autoconstructing (integer_dup_times) () (integer_sub exec_k (exec_s_when_autoconstructing (boolean_invert_second_then_and) (in3 integer_gte boolean_invert_first_then_and boolean_eq integer_lt) (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_or boolean_yank exec_y_when_autoconstructing (boolean_not integer_yank) exec_shove () exec_eq) (in4 integer_swap exec_when (exec_dup (exec_shove (exec_yank) exec_dup_items boolean_empty print_boolean exec_swap (integer_fromboolean exec_empty exec_y_when_autoconstructing (exec_pop (print_boolean exec_pop (exec_k_when_autoconstructing (exec_rot (integer_lt integer_stackdepth) (boolean_yank integer_mult integer_max) (exec_dup_times (boolean_rot boolean_and in4 integer_mod integer_fromboolean exec_do*while (integer_dup_items integer_dup) exec_yankdup) boolean_stackdepth boolean_rot print_integer exec_pop (in1 boolean_rot integer_min integer_lte in1 integer_eq exec_dup_times () exec_dup (integer_div)))) ())))) ()))) ())) ()))) ()) ())
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 129
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 1 1 2 1 4 4 6 2 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (14 1 1 2 1 4 4 6 2 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup})
Best program: (integer_lte in1 integer_add integer_gt print_integer integer_yankdup)
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 9.96
Median total errors in population: 10
Error averages by case: (0.986 0.999 0.999 0.998 0.999 0.996 0.996 0.994 0.998 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.857
Average program size in population (points): 70.404
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 464123
--- Timings ---
Current time: 1559593785585 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 31.5%
Fitness Testing:      1.6 seconds, 64.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: 50                 
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times})
Lexicase best program: (boolean_flush exec_k (boolean_swap integer_eq) (boolean_shove boolean_or exec_do*times (boolean_dup) boolean_empty) integer_sub exec_s_when_autoconstructing (print_boolean integer_flush integer_stackdepth print_boolean boolean_eq integer_dup_items integer_mult exec_do*times (exec_k (exec_k (exec_dup_times (in3 print_integer boolean_yank integer_stackdepth)) (boolean_rot exec_y (exec_empty integer_eq boolean_xor exec_yank boolean_and boolean_eq in2 exec_do*times (integer_rot) in3 integer_stackdepth integer_dup_times exec_stackdepth in4 integer_dec integer_gte print_exec (exec_shove (exec_do*times ()))))) ())) () ())
Lexicase best errors: [0 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times})
Zero cases best program: (boolean_flush exec_k (boolean_swap integer_eq) (boolean_shove boolean_or exec_do*times (boolean_dup) boolean_empty) integer_sub exec_s_when_autoconstructing (print_boolean integer_flush integer_stackdepth print_boolean boolean_eq integer_dup_items integer_mult exec_do*times (exec_k (exec_k (exec_dup_times (in3 print_integer boolean_yank integer_stackdepth)) (boolean_rot exec_y (exec_empty integer_eq boolean_xor exec_yank boolean_and boolean_eq in2 exec_do*times (integer_rot) in3 integer_stackdepth integer_dup_times exec_stackdepth in4 integer_dec integer_gte print_exec (exec_shove (exec_do*times ()))))) ())) () ())
Zero cases best errors: [0 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (652 62 62 109 62 455 62 107 204 63)
Population mean number of elite cases: 1.84
Count of perfect (error zero) individuals by case: (652 62 62 109 62 455 62 107 204 63)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times})
Best program: (boolean_flush integer_mod exec_k (boolean_swap integer_eq) (print_boolean boolean_shove integer_add) boolean_or exec_do*times (boolean_dup) integer_sub print_boolean integer_flush integer_stackdepth print_boolean boolean_eq exec_if () (integer_dup_items boolean_frominteger integer_mult exec_do*times (exec_k (exec_k (in3 print_integer boolean_yank boolean_rot exec_y (boolean_xor exec_yank boolean_and boolean_eq in2 exec_do*times (integer_rot) in3 integer_stackdepth integer_dup_times exec_stackdepth in4 integer_dec exec_shove (exec_do*times ()))) ()) ())))
Errors: [0 0 0 1 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 59
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 8.162
Median total errors in population: 8
Error averages by case: (0.348 0.938 0.938 0.891 0.938 0.545 0.938 0.893 0.796 0.937)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.841
Average program size in population (points): 94.545
Average percent parens in population: 0.261
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1053930
--- Timings ---
Current time: 1559593788238 milliseconds
Total Time:           4.6 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         1.8 seconds, 39.2%
Fitness Testing:      2.4 seconds, 52.6%
Report:               0.3 seconds,  6.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 4241               
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: 21-76              
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: 50-81              
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 545                
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15-37              
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57-86              
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23-64              
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 8434               
Correct output: -100                | Program output: 3758               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37-62              
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79-98              
Correct output: -45                 | Program output: 4237               
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 4782               
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97-72              
Correct output: -89                 | Program output: 5098               
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21-23              
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85-47              
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 3353               
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79-87              
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60-52              
Correct output: -85                 | Program output: 4614               
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98-30              
Correct output: -2                  | Program output: 9277               
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 6632               
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times})
Lexicase best program: (boolean_flush exec_k (boolean_swap integer_eq) (boolean_and integer_yank print_boolean boolean_shove boolean_invert_second_then_and boolean_or exec_do*times (boolean_dup) boolean_empty) integer_sub print_boolean integer_flush integer_stackdepth print_boolean boolean_eq exec_if () (integer_dup_items boolean_swap integer_empty boolean_frominteger integer_mult exec_do*times (exec_k (exec_k (exec_dup_times (in3 print_integer boolean_yank boolean_rot exec_y (exec_empty boolean_flush boolean_xor exec_yank boolean_and boolean_eq in2 exec_do*times (integer_rot) boolean_pop in3 integer_stackdepth integer_dup_times exec_stackdepth in4 integer_dec integer_lte exec_do*times ()))) ()) ())))
Lexicase best errors: [0 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times})
Zero cases best program: (boolean_flush exec_k (boolean_swap integer_eq) (boolean_and integer_yank print_boolean boolean_shove boolean_invert_second_then_and boolean_or exec_do*times (boolean_dup) boolean_empty) integer_sub print_boolean integer_flush integer_stackdepth print_boolean boolean_eq exec_if () (integer_dup_items boolean_swap integer_empty boolean_frominteger integer_mult exec_do*times (exec_k (exec_k (exec_dup_times (in3 print_integer boolean_yank boolean_rot exec_y (exec_empty boolean_flush boolean_xor exec_yank boolean_and boolean_eq in2 exec_do*times (integer_rot) boolean_pop in3 integer_stackdepth integer_dup_times exec_stackdepth in4 integer_dec integer_lte exec_do*times ()))) ()) ())))
Zero cases best errors: [0 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 97 4 139 236 117 448 232 95 231)
Population mean number of elite cases: 1.84
Count of perfect (error zero) individuals by case: (236 97 4 139 236 117 448 232 95 231)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times})
Best program: (boolean_flush exec_k (boolean_swap integer_gte integer_eq) (print_boolean boolean_or integer_eq exec_do*times (boolean_dup) boolean_empty) integer_sub print_boolean print_boolean exec_if () (integer_dup_items boolean_frominteger integer_lt) integer_mult exec_do*times (exec_k (exec_dup_times (integer_fromboolean in3 print_integer exec_k_when_autoconstructing (exec_do*times (boolean_yank boolean_rot exec_y (exec_empty boolean_xor exec_yank boolean_and boolean_eq in2 exec_do*times (integer_rot) in3 integer_dup_times integer_stackdepth integer_dup_times exec_stackdepth in4 integer_dec in3) integer_gte exec_shove (print_integer exec_do*times ()))) ())) ()))
Errors: [0 1 1 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 67
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 8.165
Median total errors in population: 10
Error averages by case: (0.764 0.903 0.996 0.861 0.764 0.883 0.552 0.768 0.905 0.769)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.63
Average program size in population (points): 69.894
Average percent parens in population: 0.263
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1974898
--- Timings ---
Current time: 1559593791272 milliseconds
Total Time:           7.6 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.0 seconds, 39.8%
Fitness Testing:      3.4 seconds, 44.9%
Report:               1.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: 21                 
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: 50                 
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: 23                 
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: 37                 
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 79                 
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 97                 
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: 21                 
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: 85                 
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 79                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: 60                 
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 98                 
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_941} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_do*while (boolean_yank exec_k (exec_s (boolean_swap integer_eq) (print_boolean boolean_shove exec_do*times (boolean_flush boolean_dup) boolean_empty) (print_boolean integer_flush integer_stackdepth boolean_eq exec_if () (integer_dup_items integer_mult exec_do*times (tag_integer_941 exec_k (exec_k (in3 boolean_yankdup exec_swap (print_integer boolean_yank boolean_rot exec_y (boolean_invert_first_then_and exec_empty boolean_xor exec_yank boolean_and boolean_invert_second_then_and boolean_eq in2 exec_do*times (integer_rot) integer_stackdepth boolean_rot exec_stackdepth in4 integer_dec exec_shove ())) ()) ()) ())))) ()))
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_941} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_do*while (boolean_yank exec_k (exec_s (boolean_swap integer_eq) (print_boolean boolean_shove exec_do*times (boolean_flush boolean_dup) boolean_empty) (print_boolean integer_flush integer_stackdepth boolean_eq exec_if () (integer_dup_items integer_mult exec_do*times (tag_integer_941 exec_k (exec_k (in3 boolean_yankdup exec_swap (print_integer boolean_yank boolean_rot exec_y (boolean_invert_first_then_and exec_empty boolean_xor exec_yank boolean_and boolean_invert_second_then_and boolean_eq in2 exec_do*times (integer_rot) integer_stackdepth boolean_rot exec_stackdepth in4 integer_dec exec_shove ())) ()) ()) ())))) ()))
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (118 216 69 160 576 211 160 216 212 159)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (118 216 69 160 576 211 160 216 212 159)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times})
Best program: (boolean_flush integer_eq integer_gt boolean_shove boolean_or exec_do*times (in2 boolean_dup) integer_sub print_boolean integer_flush integer_stackdepth print_boolean boolean_eq exec_if () (integer_dup_items integer_mult exec_do*times (exec_k (exec_k (exec_dup_times (in3 print_integer exec_y (exec_while (exec_empty boolean_xor exec_shove () exec_k_when_autoconstructing (exec_yank boolean_and integer_mult boolean_eq in2 boolean_dup) (exec_do*times (in3 integer_dup_times exec_stackdepth integer_yank integer_dec exec_k_when_autoconstructing (integer_mod integer_gte exec_shove (exec_do*times ())) ())))))) ()) ())))
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 46
Size: 66
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.903
Median total errors in population: 8
Error averages by case: (0.882 0.784 0.931 0.84 0.424 0.789 0.84 0.784 0.788 0.841)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.648
Average program size in population (points): 74.079
Average percent parens in population: 0.259
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.957
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.957
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2745318
--- Timings ---
Current time: 1559593794376 milliseconds
Total Time:          10.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.3 seconds, 41.2%
Fitness Testing:      4.2 seconds, 39.8%
Report:               1.9 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 619
Test mean error for best: 0.61900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 96                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: 51                 
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: 69                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: 80                 
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: 94                 
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: 22                 
Correct output: -16                 | Program output: 22                 
Correct output: -98                 | Program output: 62                 
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: 2                  
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_lte in1 integer_add integer_add integer_gt print_integer exec_do*count (integer_yankdup boolean_flush))
Lexicase best errors: [1 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 11
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_lte in1 integer_add integer_add integer_gt print_integer exec_do*count (integer_yankdup boolean_flush))
Zero cases best errors: [1 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 11
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 73 208 73 78 206 251 251 326 321)
Population mean number of elite cases: 1.86
Count of perfect (error zero) individuals by case: (72 73 208 73 78 206 251 251 326 321)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup})
Best program: (integer_lte in1 integer_add integer_gt boolean_shove print_integer integer_yankdup)
Errors: [1 1 1 1 1 1 0 0 0 0]
Total: 6
Mean: 0.6
Genome size: 7
Size: 8
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 8.141
Median total errors in population: 8
Error averages by case: (0.928 0.927 0.792 0.927 0.922 0.794 0.749 0.749 0.674 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.085
Average program size in population (points): 61.686
Average percent parens in population: 0.248
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3365993
--- Timings ---
Current time: 1559593796290 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.5 seconds, 41.1%
Fitness Testing:      4.8 seconds, 35.7%
Report:               3.0 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_363} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_rot} {:close 1, :instruction tag_boolean_951} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_max} {:close 1, :instruction 21} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Lexicase best program: (exec_dup (integer_stackdepth boolean_eq in4) integer_dup print_integer boolean_invert_first_then_and exec_shove (tag_exec_363 (boolean_swap boolean_invert_second_then_and exec_k (integer_fromboolean boolean_stackdepth exec_do*count (exec_rot (exec_flush boolean_invert_first_then_and) (exec_do*times (boolean_and boolean_swap) integer_pop integer_yankdup exec_dup (integer_dup) exec_eq exec_dup (integer_mult exec_stackdepth integer_yankdup exec_do*range () integer_rot) tag_boolean_951) (boolean_rot boolean_eq) integer_rot exec_do*while (boolean_stackdepth boolean_or exec_flush integer_flush integer_gt exec_s () (boolean_pop integer_div exec_do*times () exec_pop (exec_k_when_autoconstructing (exec_while (exec_do*times () integer_sub in2 integer_empty print_newline) boolean_frominteger boolean_xor exec_shove (boolean_invert_second_then_and integer_sub)) (exec_when (exec_when () integer_dup_times in3) exec_while (integer_mod integer_swap integer_max) 21) exec_do*times (print_boolean print_boolean) in2) boolean_not integer_max boolean_dup_items boolean_eq boolean_flush) (exec_while (exec_if () (integer_dup boolean_stackdepth exec_do*range (boolean_yank boolean_dup integer_gte)) integer_eq integer_yank) boolean_stackdepth exec_dup_items print_exec (in3 exec_k_when_autoconstructing (in2 boolean_frominteger boolean_eq print_boolean exec_k_when_autoconstructing () () integer_lte exec_do*times (integer_dup_times exec_k () () boolean_dup integer_sub print_integer)) ()))))) ())))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 145
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_exec_363} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_rot} {:close 1, :instruction tag_boolean_951} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_max} {:close 1, :instruction 21} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Zero cases best program: (exec_dup (integer_stackdepth boolean_eq in4) integer_dup print_integer boolean_invert_first_then_and exec_shove (tag_exec_363 (boolean_swap boolean_invert_second_then_and exec_k (integer_fromboolean boolean_stackdepth exec_do*count (exec_rot (exec_flush boolean_invert_first_then_and) (exec_do*times (boolean_and boolean_swap) integer_pop integer_yankdup exec_dup (integer_dup) exec_eq exec_dup (integer_mult exec_stackdepth integer_yankdup exec_do*range () integer_rot) tag_boolean_951) (boolean_rot boolean_eq) integer_rot exec_do*while (boolean_stackdepth boolean_or exec_flush integer_flush integer_gt exec_s () (boolean_pop integer_div exec_do*times () exec_pop (exec_k_when_autoconstructing (exec_while (exec_do*times () integer_sub in2 integer_empty print_newline) boolean_frominteger boolean_xor exec_shove (boolean_invert_second_then_and integer_sub)) (exec_when (exec_when () integer_dup_times in3) exec_while (integer_mod integer_swap integer_max) 21) exec_do*times (print_boolean print_boolean) in2) boolean_not integer_max boolean_dup_items boolean_eq boolean_flush) (exec_while (exec_if () (integer_dup boolean_stackdepth exec_do*range (boolean_yank boolean_dup integer_gte)) integer_eq integer_yank) boolean_stackdepth exec_dup_items print_exec (in3 exec_k_when_autoconstructing (in2 boolean_frominteger boolean_eq print_boolean exec_k_when_autoconstructing () () integer_lte exec_do*times (integer_dup_times exec_k () () boolean_dup integer_sub print_integer)) ()))))) ())))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 145
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (228 211 215 209 209 123 209 93 125 235)
Population mean number of elite cases: 1.86
Count of perfect (error zero) individuals by case: (228 211 215 209 209 123 209 93 125 235)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_34} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 21} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction tagged_272} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_453} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop})
Best program: (in2 integer_stackdepth in4 boolean_not integer_dup print_integer boolean_invert_first_then_and boolean_invert_second_then_and exec_flush boolean_invert_second_then_and boolean_and boolean_swap integer_pop exec_k (integer_pop boolean_and tagged_34 boolean_invert_first_then_and integer_yankdup exec_s (exec_s_when_autoconstructing (integer_gt integer_dup) (print_integer) (exec_eq integer_dup_items exec_y (exec_dup (integer_swap integer_mult print_integer boolean_invert_second_then_and integer_rot) boolean_xor) exec_noop boolean_eq) exec_pop () tagged_560 exec_s (boolean_yank integer_swap exec_do*while (integer_dup_items boolean_frominteger boolean_yank exec_s () (integer_add boolean_pop integer_shove exec_if (exec_when (integer_sub boolean_invert_second_then_and) in2 boolean_frominteger boolean_eq exec_empty exec_do*times (boolean_invert_second_then_and integer_sub)) (exec_when (exec_k (integer_div exec_while (integer_mod integer_max 21) exec_yank print_boolean integer_lte exec_rot (exec_do*while (integer_dec boolean_rot boolean_dup_items boolean_flush) exec_when (exec_while (exec_if () (boolean_rot boolean_stackdepth boolean_dup exec_y_when_autoconstructing (integer_eq exec_if () (boolean_stackdepth in3 exec_eq) exec_k_when_autoconstructing (in2 tagged_272 boolean_or boolean_invert_second_then_and print_boolean boolean_pop exec_k_when_autoconstructing () () tagged_453 integer_lte integer_swap exec_noop) (exec_k () () boolean_dup integer_sub print_integer boolean_pop)))))) () ()) ()))) ())) () ()) () ()) ())
Errors: [1 0 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 105
Size: 149
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 8.143
Median total errors in population: 8
Error averages by case: (0.772 0.789 0.785 0.791 0.791 0.877 0.791 0.907 0.875 0.765)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.727
Average program size in population (points): 76.752
Average percent parens in population: 0.253
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3858206
--- Timings ---
Current time: 1559593798159 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 43.9%
Fitness Testing:      5.3 seconds, 34.7%
Report:               3.2 seconds, 20.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: 64                 
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 76                 
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 17                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: 63                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: 10                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: 62                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: 56                 
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 76                 
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -5} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 1, :instruction tag_boolean_951} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_381} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_dup (in2 exec_y_when_autoconstructing (integer_shove in2 integer_yank) integer_stackdepth in4) integer_dup in3 integer_eq print_integer boolean_swap boolean_invert_second_then_and exec_k (integer_pop integer_yankdup integer_div exec_dup () integer_gt integer_dup) (exec_eq integer_dup_items integer_stackdepth exec_dup (exec_stackdepth integer_dec integer_shove) boolean_invert_second_then_and -5 exec_yankdup) boolean_not integer_rot tag_boolean_951 integer_rot exec_do*while (exec_flush integer_gt integer_dup exec_s () (integer_dup_items tag_integer_381 exec_stackdepth integer_gt exec_do*times () exec_k_when_autoconstructing (in3 integer_yank in2 integer_lt exec_y_when_autoconstructing () boolean_invert_first_then_and print_newline) (print_newline exec_when (integer_lt) boolean_xor boolean_invert_second_then_and integer_sub)) (integer_dup_items exec_when (integer_div integer_mod print_boolean exec_rot (print_boolean) (exec_s_when_autoconstructing (integer_max boolean_dup_items boolean_flush) (exec_while (exec_if () (exec_do*range (boolean_dup exec_y (integer_yank) boolean_stackdepth exec_dup_items boolean_yankdup in3 exec_k_when_autoconstructing (integer_empty boolean_frominteger boolean_eq print_boolean boolean_empty integer_lte exec_do*times (exec_k () () integer_sub print_integer exec_dup ())) ())))) ()) ()))))
Lexicase best errors: [1 0 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 126
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -5} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 1, :instruction tag_boolean_951} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_381} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_dup (in2 exec_y_when_autoconstructing (integer_shove in2 integer_yank) integer_stackdepth in4) integer_dup in3 integer_eq print_integer boolean_swap boolean_invert_second_then_and exec_k (integer_pop integer_yankdup integer_div exec_dup () integer_gt integer_dup) (exec_eq integer_dup_items integer_stackdepth exec_dup (exec_stackdepth integer_dec integer_shove) boolean_invert_second_then_and -5 exec_yankdup) boolean_not integer_rot tag_boolean_951 integer_rot exec_do*while (exec_flush integer_gt integer_dup exec_s () (integer_dup_items tag_integer_381 exec_stackdepth integer_gt exec_do*times () exec_k_when_autoconstructing (in3 integer_yank in2 integer_lt exec_y_when_autoconstructing () boolean_invert_first_then_and print_newline) (print_newline exec_when (integer_lt) boolean_xor boolean_invert_second_then_and integer_sub)) (integer_dup_items exec_when (integer_div integer_mod print_boolean exec_rot (print_boolean) (exec_s_when_autoconstructing (integer_max boolean_dup_items boolean_flush) (exec_while (exec_if () (exec_do*range (boolean_dup exec_y (integer_yank) boolean_stackdepth exec_dup_items boolean_yankdup in3 exec_k_when_autoconstructing (integer_empty boolean_frominteger boolean_eq print_boolean boolean_empty integer_lte exec_do*times (exec_k () () integer_sub print_integer exec_dup ())) ())))) ()) ()))))
Zero cases best errors: [1 0 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 126
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (54 715 382 329 152 701 130 151 332 700)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (54 715 382 329 152 701 130 151 332 700)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction 41} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction -5} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_381} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mod} {:close 1, :instruction 21} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k} {:close 0, :instruction print_integer})
Best program: (exec_dup (41 in2 integer_stackdepth integer_min exec_empty) in4 integer_dup in1 boolean_eq boolean_swap in3 integer_eq print_integer boolean_invert_first_then_and boolean_invert_second_then_and exec_k (exec_y (integer_fromboolean boolean_eq integer_yank exec_while (exec_swap (exec_flush boolean_swap) (print_boolean integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_gt integer_fromboolean integer_flush) (integer_dup_items exec_dup (boolean_invert_second_then_and boolean_eq exec_do*range () -5 tag_boolean_951) boolean_eq) (tagged_560 exec_do*count (exec_s (exec_do*while (in3) boolean_stackdepth integer_lte integer_flush exec_dup_times (exec_k_when_autoconstructing () (integer_dup_items boolean_pop tag_integer_381 exec_stackdepth integer_pop) integer_sub boolean_empty integer_yank in2 integer_empty boolean_invert_first_then_and print_newline) boolean_frominteger boolean_xor exec_y_when_autoconstructing () boolean_not) (boolean_xor boolean_invert_second_then_and integer_sub integer_sub) () exec_when (integer_div exec_while (integer_mod 21) integer_div boolean_flush exec_s_when_autoconstructing (print_boolean) (integer_max boolean_eq boolean_dup_items exec_while ()) (exec_y_when_autoconstructing (exec_while (exec_y ()) boolean_stackdepth boolean_dup integer_eq integer_yank) boolean_stackdepth exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 integer_empty exec_yankdup boolean_frominteger boolean_eq print_boolean integer_yankdup boolean_invert_first_then_and exec_k_when_autoconstructing () () exec_do*count (exec_do*times (exec_k () () print_integer))) ()))))))) ())
Errors: [1 0 0 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 108
Size: 147
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.354
Median total errors in population: 5
Error averages by case: (0.946 0.285 0.618 0.671 0.848 0.299 0.87 0.849 0.668 0.3)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.103
Average program size in population (points): 98.177
Average percent parens in population: 0.264
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.177
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4306462
--- Timings ---
Current time: 1559593801959 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.8 seconds, 46.0%
Fitness Testing:      5.7 seconds, 33.7%
Report:               3.3 seconds, 19.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 530
Test mean error for best: 0.53000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 83                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 21                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 58                 
Correct output: 11                  | Program output: 86                 
Correct output: 46                  | Program output: 71                 
Correct output: 5                   | Program output: 56                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 86                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 80                 
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 71                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 60                 
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 53                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 47                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: 58                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Lexicase best program: (exec_dup (in2 integer_dup integer_fromboolean) in1 boolean_eq in3 exec_do*times (print_integer integer_lt boolean_invert_first_then_and boolean_invert_second_then_and exec_k (integer_fromboolean exec_while (boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_gt boolean_dup_times integer_fromboolean integer_dup) (integer_dec exec_eq integer_dup_items exec_stackdepth boolean_invert_second_then_and exec_pop () -5 tag_boolean_951) (boolean_eq) tagged_560 boolean_dup_items exec_do*count (exec_s (in4 exec_do*while (boolean_stackdepth exec_flush exec_flush integer_lte integer_flush exec_k_when_autoconstructing () (exec_s () (integer_dup_items boolean_pop tag_integer_381 integer_mod exec_do*times () integer_sub integer_empty boolean_invert_first_then_and integer_min boolean_xor boolean_xor boolean_invert_second_then_and integer_sub) () exec_when (integer_div integer_mod 21) print_boolean) integer_max boolean_eq boolean_dup_items integer_min boolean_eq exec_y_when_autoconstructing (exec_while (exec_yank exec_y ()) integer_inc boolean_stackdepth exec_dup_items exec_do*range (boolean_dup integer_eq integer_shove integer_yank) boolean_stackdepth exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger print_boolean boolean_dup exec_k_when_autoconstructing () () integer_shove exec_do*count (integer_gt exec_do*times (exec_k () ()))) ())) () ())) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 130
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Zero cases best program: (exec_dup (in2 integer_dup integer_fromboolean) in1 boolean_eq in3 exec_do*times (print_integer integer_lt boolean_invert_first_then_and boolean_invert_second_then_and exec_k (integer_fromboolean exec_while (boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_gt boolean_dup_times integer_fromboolean integer_dup) (integer_dec exec_eq integer_dup_items exec_stackdepth boolean_invert_second_then_and exec_pop () -5 tag_boolean_951) (boolean_eq) tagged_560 boolean_dup_items exec_do*count (exec_s (in4 exec_do*while (boolean_stackdepth exec_flush exec_flush integer_lte integer_flush exec_k_when_autoconstructing () (exec_s () (integer_dup_items boolean_pop tag_integer_381 integer_mod exec_do*times () integer_sub integer_empty boolean_invert_first_then_and integer_min boolean_xor boolean_xor boolean_invert_second_then_and integer_sub) () exec_when (integer_div integer_mod 21) print_boolean) integer_max boolean_eq boolean_dup_items integer_min boolean_eq exec_y_when_autoconstructing (exec_while (exec_yank exec_y ()) integer_inc boolean_stackdepth exec_dup_items exec_do*range (boolean_dup integer_eq integer_shove integer_yank) boolean_stackdepth exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger print_boolean boolean_dup exec_k_when_autoconstructing () () integer_shove exec_do*count (integer_gt exec_do*times (exec_k () ()))) ())) () ())) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 130
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 493 166 293 297 143 297 534 41 181)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (307 493 166 293 297 143 297 534 41 181)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_381} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Best program: (exec_dup (in2 boolean_not in4) integer_dup integer_fromboolean in1 boolean_or boolean_eq in3 exec_do*times (print_integer boolean_invert_first_then_and boolean_invert_second_then_and exec_k (integer_fromboolean exec_while (boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_gt exec_do*times () boolean_dup_times integer_mult) (integer_fromboolean integer_dup) (exec_eq integer_dup_items exec_y () exec_dup (exec_stackdepth boolean_invert_second_then_and exec_pop () -5 tag_boolean_951) boolean_eq) tagged_560 exec_do*count (exec_s (in4 exec_do*while (boolean_stackdepth exec_flush integer_rot) integer_flush exec_k_when_autoconstructing () (exec_s () (integer_dup_items boolean_pop tag_integer_381 exec_do*times () integer_sub integer_empty boolean_invert_first_then_and boolean_stackdepth) (print_newline) boolean_frominteger boolean_xor integer_add) boolean_xor boolean_invert_second_then_and integer_sub integer_sub) () (exec_when (integer_mod 21) print_boolean) integer_max boolean_eq boolean_dup_items integer_min boolean_eq exec_yankdup exec_y_when_autoconstructing (exec_while (exec_s (exec_y ()) (integer_inc boolean_stackdepth boolean_stackdepth exec_dup_items exec_do*range (boolean_dup integer_eq integer_shove integer_yank) boolean_stackdepth exec_dup_items exec_eq) (exec_k_when_autoconstructing (boolean_xor) (in2 exec_yankdup print_boolean integer_pop exec_k_when_autoconstructing () () exec_do*count (exec_do*times (exec_k () ())))))))) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 101
Size: 141
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.248
Median total errors in population: 8
Error averages by case: (0.693 0.507 0.834 0.707 0.703 0.857 0.703 0.466 0.959 0.819)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.538
Average program size in population (points): 132.732
Average percent parens in population: 0.272
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.341
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4873759
--- Timings ---
Current time: 1559593804222 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.0 seconds, 43.2%
Fitness Testing:      6.3 seconds, 30.0%
Report:               5.5 seconds, 26.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 84                 
Correct output: -100                | Program output: 37                 
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 42                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 47                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 50                 
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: 33                 
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 46                 
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 92                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 66                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction 0} {:close 0, :instruction in2} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_381} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction -21} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_dup (0 in2 integer_max) boolean_not in4 integer_dup integer_fromboolean in1 boolean_eq in3 in4 exec_do*times (print_integer boolean_invert_first_then_and boolean_invert_second_then_and exec_k (integer_fromboolean exec_while (boolean_swap) integer_sub integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_add boolean_dup_times integer_fromboolean exec_pop () integer_dup) (integer_dec exec_eq integer_dup_items exec_dup (exec_stackdepth boolean_invert_second_then_and exec_if (exec_stackdepth exec_pop () -5 tag_boolean_951) (boolean_eq) tagged_560 exec_do*count (exec_s (in4 exec_do*while (boolean_stackdepth exec_flush integer_lte integer_rot) exec_k_when_autoconstructing () (boolean_dup_times)) (exec_s () (integer_dup_items boolean_pop exec_dup_items tag_integer_381 exec_do*times () integer_sub integer_empty boolean_invert_first_then_and print_newline) (boolean_frominteger integer_min boolean_xor exec_dup () boolean_xor boolean_invert_second_then_and integer_sub exec_when (integer_div integer_mod 21) print_boolean) integer_max boolean_eq boolean_dup_items integer_min -21 boolean_yankdup boolean_eq exec_y_when_autoconstructing (exec_while (exec_y ()) integer_inc boolean_stackdepth exec_dup_items exec_do*range (integer_eq integer_shove integer_yank) boolean_stackdepth exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger print_boolean exec_k_when_autoconstructing () () exec_do*count (integer_gt exec_do*times (exec_k () () boolean_or))) ()) ()))) ()) ()))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 145
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction 0} {:close 0, :instruction in2} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_381} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction -21} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_dup (0 in2 integer_max) boolean_not in4 integer_dup integer_fromboolean in1 boolean_eq in3 in4 exec_do*times (print_integer boolean_invert_first_then_and boolean_invert_second_then_and exec_k (integer_fromboolean exec_while (boolean_swap) integer_sub integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_add boolean_dup_times integer_fromboolean exec_pop () integer_dup) (integer_dec exec_eq integer_dup_items exec_dup (exec_stackdepth boolean_invert_second_then_and exec_if (exec_stackdepth exec_pop () -5 tag_boolean_951) (boolean_eq) tagged_560 exec_do*count (exec_s (in4 exec_do*while (boolean_stackdepth exec_flush integer_lte integer_rot) exec_k_when_autoconstructing () (boolean_dup_times)) (exec_s () (integer_dup_items boolean_pop exec_dup_items tag_integer_381 exec_do*times () integer_sub integer_empty boolean_invert_first_then_and print_newline) (boolean_frominteger integer_min boolean_xor exec_dup () boolean_xor boolean_invert_second_then_and integer_sub exec_when (integer_div integer_mod 21) print_boolean) integer_max boolean_eq boolean_dup_items integer_min -21 boolean_yankdup boolean_eq exec_y_when_autoconstructing (exec_while (exec_y ()) integer_inc boolean_stackdepth exec_dup_items exec_do*range (integer_eq integer_shove integer_yank) boolean_stackdepth exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger print_boolean exec_k_when_autoconstructing () () exec_do*count (integer_gt exec_do*times (exec_k () () boolean_or))) ()) ()))) ()) ()))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 145
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (39 504 39 46 74 20 792 250 523 46)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (39 504 39 46 74 20 792 250 523 46)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction 0} {:close 0, :instruction in2} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_381} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction -21} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_or})
Best program: (exec_dup (0 in2 integer_max) boolean_not in4 integer_dup integer_fromboolean in1 boolean_eq in3 in4 exec_do*times (print_integer boolean_invert_first_then_and boolean_invert_second_then_and exec_k (integer_fromboolean exec_while (boolean_swap) integer_sub integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_add boolean_dup_times integer_fromboolean exec_pop () integer_dup) (integer_dec exec_eq integer_dup_items exec_dup (exec_stackdepth boolean_invert_second_then_and exec_if (exec_stackdepth exec_pop () -5 tag_boolean_951) (boolean_eq) tagged_560 exec_do*count (exec_s (in4 exec_do*while (boolean_stackdepth exec_flush integer_lte integer_rot) exec_k_when_autoconstructing () (boolean_dup_times)) (exec_s () (integer_dup_items boolean_pop exec_dup_items tag_integer_381 exec_do*times () integer_sub integer_empty boolean_invert_first_then_and print_newline) (boolean_frominteger integer_min boolean_xor exec_dup () boolean_xor boolean_invert_second_then_and integer_sub exec_when (integer_div integer_mod 21) print_boolean) integer_max boolean_eq boolean_dup_items integer_min -21 boolean_yankdup boolean_eq exec_y_when_autoconstructing (exec_while (exec_y ()) integer_inc boolean_stackdepth exec_dup_items exec_do*range (integer_eq integer_shove integer_yank) boolean_stackdepth exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger print_boolean exec_k_when_autoconstructing () () exec_do*count (integer_gt exec_do*times (exec_k () () boolean_or))) ()) ()))) ()) ()))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 106
Size: 145
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.667
Median total errors in population: 7
Error averages by case: (0.961 0.496 0.961 0.954 0.926 0.98 0.208 0.75 0.477 0.954)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.124
Average program size in population (points): 130.852
Average percent parens in population: 0.273
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5390972
--- Timings ---
Current time: 1559593806325 milliseconds
Total Time:          23.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.2 seconds, 44.0%
Fitness Testing:      6.7 seconds, 29.2%
Report:               6.1 seconds, 26.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: 42                 
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: 35                 
Correct output: -100                | Program output: 59                 
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 38                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 39                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: 35                 
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: 83                 
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: 99                 
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: 15                 
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction tag_integer_714} {:close 2, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 0, :instruction integer_dec} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction tag_integer_381} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_k})
Lexicase best program: (in2 boolean_not tag_integer_714 in4 integer_fromboolean boolean_eq in3 exec_do*times (print_integer boolean_invert_first_then_and boolean_invert_second_then_and exec_k (exec_eq integer_fromboolean exec_while (boolean_swap) integer_pop boolean_invert_first_then_and boolean_and integer_yankdup exec_s_when_autoconstructing (integer_gt boolean_dup_times integer_dup) (exec_eq integer_dup_items exec_dup (exec_stackdepth boolean_invert_second_then_and exec_pop () -5 integer_dec tag_boolean_951) boolean_eq) (tagged_560 exec_do*count (exec_s (in4 boolean_stackdepth exec_flush exec_flush integer_lte exec_swap () (integer_flush exec_k_when_autoconstructing () (exec_s () (integer_dup_items boolean_pop integer_flush exec_while (tag_integer_381 exec_do*times () integer_sub integer_empty boolean_invert_first_then_and boolean_frominteger integer_min boolean_xor boolean_xor exec_pop (integer_sub)) exec_when (integer_div integer_mod integer_flush 21) print_boolean) (integer_max boolean_eq boolean_dup_items integer_min exec_do*while (boolean_eq integer_pop exec_y ()) integer_inc exec_dup_items exec_do*range (boolean_dup in4 integer_eq integer_swap integer_gt exec_if () (integer_dup_items integer_yank) boolean_stackdepth exec_dup_items integer_yank exec_eq) in3 exec_k_when_autoconstructing (in2 in1) (print_boolean exec_k_when_autoconstructing () () exec_do*count (integer_gt exec_k () ())))))) () ()))) ()))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 136
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction tag_integer_714} {:close 2, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 0, :instruction integer_dec} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction tag_integer_381} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_k})
Zero cases best program: (in2 boolean_not tag_integer_714 in4 integer_fromboolean boolean_eq in3 exec_do*times (print_integer boolean_invert_first_then_and boolean_invert_second_then_and exec_k (exec_eq integer_fromboolean exec_while (boolean_swap) integer_pop boolean_invert_first_then_and boolean_and integer_yankdup exec_s_when_autoconstructing (integer_gt boolean_dup_times integer_dup) (exec_eq integer_dup_items exec_dup (exec_stackdepth boolean_invert_second_then_and exec_pop () -5 integer_dec tag_boolean_951) boolean_eq) (tagged_560 exec_do*count (exec_s (in4 boolean_stackdepth exec_flush exec_flush integer_lte exec_swap () (integer_flush exec_k_when_autoconstructing () (exec_s () (integer_dup_items boolean_pop integer_flush exec_while (tag_integer_381 exec_do*times () integer_sub integer_empty boolean_invert_first_then_and boolean_frominteger integer_min boolean_xor boolean_xor exec_pop (integer_sub)) exec_when (integer_div integer_mod integer_flush 21) print_boolean) (integer_max boolean_eq boolean_dup_items integer_min exec_do*while (boolean_eq integer_pop exec_y ()) integer_inc exec_dup_items exec_do*range (boolean_dup in4 integer_eq integer_swap integer_gt exec_if () (integer_dup_items integer_yank) boolean_stackdepth exec_dup_items integer_yank exec_eq) in3 exec_k_when_autoconstructing (in2 in1) (print_boolean exec_k_when_autoconstructing () () exec_do*count (integer_gt exec_k () ())))))) () ()))) ()))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 136
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (161 329 621 13 199 294 507 7 242 21)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (161 329 621 13 199 294 507 7 242 21)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_381} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_555} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 1, :instruction 21} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Best program: (exec_dup (in2 exec_swap () (boolean_not in4)) integer_dup integer_fromboolean boolean_eq in3 exec_do*times (print_integer boolean_invert_first_then_and exec_k (integer_yankdup exec_while (boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup integer_gt boolean_dup_times integer_fromboolean exec_flush integer_dup) (exec_eq boolean_invert_second_then_and exec_pop () tag_boolean_951) boolean_eq) tagged_560 exec_do*count (in4 exec_flush exec_flush integer_rot) integer_flush exec_k_when_autoconstructing (integer_add exec_k_when_autoconstructing () (integer_gte) exec_s () (integer_dup_items boolean_pop tag_integer_381 exec_do*times () integer_empty tag_integer_555 integer_inc boolean_dup_items integer_yank boolean_frominteger integer_min boolean_invert_second_then_and in3) (integer_sub)) (exec_when (integer_div integer_mod 21) in4 print_boolean) integer_max boolean_eq boolean_dup_items integer_min integer_yank boolean_invert_second_then_and exec_y_when_autoconstructing (boolean_or) exec_y () integer_inc exec_while (boolean_stackdepth exec_dup_items exec_do*range (boolean_dup integer_shove boolean_stackdepth exec_dup_items exec_eq) exec_k_when_autoconstructing (exec_stackdepth in2 exec_yankdup exec_eq boolean_frominteger print_boolean exec_s (exec_do*count (integer_gt exec_do*times (exec_k () ()))) () ()) ()))
Errors: [0 0 0 1 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 92
Size: 124
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.606
Median total errors in population: 8
Error averages by case: (0.839 0.671 0.379 0.987 0.801 0.706 0.493 0.993 0.758 0.979)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 102.322
Average program size in population (points): 140.012
Average percent parens in population: 0.269
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.443
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6045159
--- Timings ---
Current time: 1559593808423 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.3 seconds, 44.8%
Fitness Testing:      7.3 seconds, 29.0%
Report:               6.5 seconds, 25.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 532
Test mean error for best: 0.53200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: 57                 
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -14                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Lexicase best program: (exec_dup (in2 boolean_not in4) integer_dup in1 boolean_eq integer_yank in3 in2 exec_do*times (print_integer boolean_invert_second_then_and exec_y (exec_k (integer_fromboolean exec_while (boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_gt boolean_dup_times integer_dup) (integer_dup_items exec_stackdepth boolean_invert_second_then_and exec_pop () -5 boolean_eq) (boolean_dup_items exec_do*count (boolean_yank exec_y_when_autoconstructing (in4 integer_swap exec_do*while (exec_dup_items exec_flush exec_flush integer_lte boolean_empty exec_do*count (exec_k_when_autoconstructing () (exec_s () (tag_integer_381 tag_integer_767 integer_sub integer_empty print_newline) (boolean_frominteger boolean_xor boolean_xor boolean_invert_second_then_and boolean_not exec_when (integer_div boolean_dup integer_mod boolean_or 21) print_boolean) integer_dup exec_do*while (boolean_eq exec_dup (tag_boolean_692 boolean_eq exec_y_when_autoconstructing (exec_while (in4 integer_flush exec_y ()) exec_flush boolean_yank integer_inc exec_dup_items exec_do*range (boolean_dup integer_eq integer_shove integer_shove exec_do*times (integer_yank) print_exec (exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger exec_do*count (integer_empty exec_k_when_autoconstructing (exec_do*times (exec_k () ())) ())) ()))))))))))) ())))
Lexicase best errors: [1 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 134
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Zero cases best program: (exec_dup (in2 boolean_not in4) integer_dup in1 boolean_eq integer_yank in3 in2 exec_do*times (print_integer boolean_invert_second_then_and exec_y (exec_k (integer_fromboolean exec_while (boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_gt boolean_dup_times integer_dup) (integer_dup_items exec_stackdepth boolean_invert_second_then_and exec_pop () -5 boolean_eq) (boolean_dup_items exec_do*count (boolean_yank exec_y_when_autoconstructing (in4 integer_swap exec_do*while (exec_dup_items exec_flush exec_flush integer_lte boolean_empty exec_do*count (exec_k_when_autoconstructing () (exec_s () (tag_integer_381 tag_integer_767 integer_sub integer_empty print_newline) (boolean_frominteger boolean_xor boolean_xor boolean_invert_second_then_and boolean_not exec_when (integer_div boolean_dup integer_mod boolean_or 21) print_boolean) integer_dup exec_do*while (boolean_eq exec_dup (tag_boolean_692 boolean_eq exec_y_when_autoconstructing (exec_while (in4 integer_flush exec_y ()) exec_flush boolean_yank integer_inc exec_dup_items exec_do*range (boolean_dup integer_eq integer_shove integer_shove exec_do*times (integer_yank) print_exec (exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger exec_do*count (integer_empty exec_k_when_autoconstructing (exec_do*times (exec_k () ())) ())) ()))))))))))) ())))
Zero cases best errors: [1 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 134
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (44 292 252 200 128 450 561 111 199 57)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (44 292 252 200 128 450 561 111 199 57)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -5} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_381} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times})
Best program: (boolean_not integer_dup integer_fromboolean exec_s_when_autoconstructing (in3) (in2 exec_do*times (print_integer exec_do*range () boolean_invert_second_then_and exec_k (exec_while (boolean_swap) integer_pop integer_yankdup exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_dup_times integer_dup) (exec_eq exec_k_when_autoconstructing (integer_dup_items exec_dup_times (exec_dup (exec_y (exec_stackdepth boolean_invert_second_then_and exec_pop () integer_fromboolean -5 tag_boolean_951) boolean_eq) integer_mod in4 exec_s_when_autoconstructing (exec_do*while (boolean_stackdepth integer_lte exec_flush exec_flush integer_rot) exec_y_when_autoconstructing (integer_flush boolean_swap) exec_k_when_autoconstructing () (integer_dup_items boolean_pop tag_integer_381 exec_do*times () integer_empty exec_do*range (in3) integer_stackdepth boolean_invert_first_then_and print_newline) boolean_frominteger integer_min boolean_xor boolean_invert_second_then_and exec_swap (integer_sub integer_sub) () exec_when (integer_div integer_mod 21) print_boolean) (integer_max boolean_eq exec_dup_times () boolean_dup_items integer_min in2 boolean_eq integer_gte in2 exec_y_when_autoconstructing (exec_dup (exec_while (exec_y ()) integer_inc boolean_stackdepth integer_div) exec_dup_items integer_shove integer_yank) boolean_stackdepth exec_eq) (exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger print_boolean exec_k_when_autoconstructing () () integer_gt exec_do*times ()) ()))) ()) ()) ())) ())
Errors: [1 1 0 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 96
Size: 136
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.706
Median total errors in population: 7
Error averages by case: (0.956 0.708 0.748 0.8 0.872 0.55 0.439 0.889 0.801 0.943)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.411
Average program size in population (points): 135.343
Average percent parens in population: 0.280
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.319
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6733897
--- Timings ---
Current time: 1559593810804 milliseconds
Total Time:          27.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.5 seconds, 45.3%
Fitness Testing:      8.0 seconds, 29.2%
Report:               6.9 seconds, 25.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 75                 
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -36                
Correct output: -79                 | Program output: 27                 
Correct output: -80                 | Program output: 84                 
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 29                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 27                 
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: 77                 
Correct output: -72                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 77                 
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -22                
Correct output: -85                 | Program output: -81                
Correct output: -58                 | Program output: -46                
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: -29                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -8                 
Correct output: -45                 | Program output: -27                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: 22                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Lexicase best program: (exec_dup (in2 boolean_not in4) boolean_eq integer_yank in3 integer_gt print_integer boolean_invert_second_then_and exec_k (boolean_eq integer_fromboolean boolean_swap) (boolean_pop integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_gt boolean_dup_times integer_dup) (exec_eq integer_dup_items exec_y_when_autoconstructing (exec_pop (exec_stackdepth boolean_invert_second_then_and exec_pop () integer_lt -5 boolean_eq) integer_shove boolean_dup_items exec_do*count (exec_s (boolean_yank exec_y_when_autoconstructing (in4 exec_do*range () integer_add integer_swap exec_do*while (exec_flush boolean_stackdepth exec_flush exec_do*count (exec_k_when_autoconstructing () (exec_s () (integer_shove) (tag_integer_381 integer_sub integer_empty boolean_xor boolean_xor boolean_invert_second_then_and integer_sub)) exec_when (integer_max integer_div integer_mod integer_gt boolean_or 21) print_boolean) integer_dup exec_do*while (boolean_eq boolean_yank exec_dup (tag_boolean_692 boolean_eq exec_y_when_autoconstructing (exec_while (in4 integer_flush exec_y ()) exec_flush boolean_yank integer_inc exec_dup_items integer_yankdup exec_do*range (boolean_dup integer_eq) exec_do*times () integer_min integer_shove integer_yank) integer_dup_times) print_exec (boolean_shove boolean_invert_second_then_and boolean_rot exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 integer_inc exec_yankdup boolean_frominteger exec_do*count (exec_k_when_autoconstructing (exec_do*times (exec_k () ())) ())) ())))) () ()))) ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 145
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Zero cases best program: (exec_dup (in2 boolean_not in4) boolean_eq integer_yank in3 integer_gt print_integer boolean_invert_second_then_and exec_k (boolean_eq integer_fromboolean boolean_swap) (boolean_pop integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_gt boolean_dup_times integer_dup) (exec_eq integer_dup_items exec_y_when_autoconstructing (exec_pop (exec_stackdepth boolean_invert_second_then_and exec_pop () integer_lt -5 boolean_eq) integer_shove boolean_dup_items exec_do*count (exec_s (boolean_yank exec_y_when_autoconstructing (in4 exec_do*range () integer_add integer_swap exec_do*while (exec_flush boolean_stackdepth exec_flush exec_do*count (exec_k_when_autoconstructing () (exec_s () (integer_shove) (tag_integer_381 integer_sub integer_empty boolean_xor boolean_xor boolean_invert_second_then_and integer_sub)) exec_when (integer_max integer_div integer_mod integer_gt boolean_or 21) print_boolean) integer_dup exec_do*while (boolean_eq boolean_yank exec_dup (tag_boolean_692 boolean_eq exec_y_when_autoconstructing (exec_while (in4 integer_flush exec_y ()) exec_flush boolean_yank integer_inc exec_dup_items integer_yankdup exec_do*range (boolean_dup integer_eq) exec_do*times () integer_min integer_shove integer_yank) integer_dup_times) print_exec (boolean_shove boolean_invert_second_then_and boolean_rot exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 integer_inc exec_yankdup boolean_frominteger exec_do*count (exec_k_when_autoconstructing (exec_do*times (exec_k () ())) ())) ())))) () ()))) ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 145
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (766 372 222 445 165 225 165 108 442 374)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (766 372 222 445 165 225 165 108 442 374)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction -5} {:close 0, :instruction exec_if} {:close 1, :instruction tag_boolean_951} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction 36} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction -68} {:close 2, :instruction exec_k})
Best program: (exec_dup (in2 exec_s_when_autoconstructing (boolean_not in4) () (integer_dup boolean_eq exec_while (integer_yank in3) exec_shove () exec_do*times (print_integer boolean_invert_second_then_and exec_y (exec_k (boolean_eq exec_do*while () integer_fromboolean boolean_swap) (boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (exec_dup_items) (integer_gt boolean_dup_times integer_dup) (boolean_or exec_eq integer_dup_items exec_pop (exec_stackdepth boolean_invert_second_then_and exec_pop () -5 exec_if (tag_boolean_951) (boolean_eq) integer_yank tagged_560 exec_do*count (exec_s (boolean_yank integer_dup_items exec_y_when_autoconstructing (in4 exec_do*while (exec_flush exec_s (integer_flush integer_dec exec_do*count (exec_k_when_autoconstructing () (integer_sub exec_s () (integer_sub) (boolean_pop tag_integer_767 integer_sub exec_do*while (integer_empty 36 print_newline) boolean_frominteger exec_pop (boolean_xor boolean_xor boolean_invert_second_then_and exec_when (integer_div integer_flush exec_empty integer_rot integer_mod boolean_or 21) print_boolean) integer_max integer_dup exec_do*while (boolean_eq exec_dup (tag_boolean_692 boolean_eq integer_mod) exec_y_when_autoconstructing (integer_flush exec_y ()) exec_flush integer_inc exec_dup_items exec_do*range (boolean_dup) integer_eq boolean_rot integer_shove integer_mod integer_yank) print_exec (exec_dup_items exec_eq) exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger integer_gt integer_div exec_do*times (-68) exec_k () ()) ())))) () ()))) () ())))))))))
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 110
Size: 158
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.716
Median total errors in population: 7
Error averages by case: (0.234 0.628 0.778 0.555 0.835 0.775 0.835 0.892 0.558 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 100.63
Average program size in population (points): 141.254
Average percent parens in population: 0.287
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7577644
--- Timings ---
Current time: 1559593815022 milliseconds
Total Time:          30.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.6 seconds, 44.8%
Fitness Testing:      9.2 seconds, 30.4%
Report:               7.4 seconds, 24.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 561
Test mean error for best: 0.56100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -37                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 99                 
Correct output: 21                  | Program output: 83                 
Correct output: 6                   | Program output: 63                 
Correct output: 10                  | Program output: 22                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 83                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 57                 
Correct output: 56                  | Program output: 85                 
Correct output: 11                  | Program output: 19                 
Correct output: 11                  | Program output: 56                 
Correct output: 46                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 91                 
Correct output: 33                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 24                 
Correct output: 4                   | Program output: 19                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 53                 
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -74                
Correct output: -97                 | Program output: 53                 
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: 5                  
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 89                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -68                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 70                 
Correct output: -72                 | Program output: -7                 
Correct output: 3                   | Program output: 4                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 91                 
Correct output: -55                 | Program output: -33                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: 52                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 59                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -30                
Correct output: -76                 | Program output: 79                 
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 94                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_767} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction 36} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 1, :instruction -68} {:close 2, :instruction exec_k})
Lexicase best program: (exec_dup (in2 exec_empty integer_yank boolean_not in4) integer_dup exec_do*while (in1) in4 boolean_eq integer_yank in3 exec_do*times (print_integer boolean_invert_second_then_and exec_y (exec_k (boolean_eq exec_flush) (boolean_dup_items) integer_pop integer_fromboolean integer_dup_times exec_while (exec_while (exec_y () integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_shove) (integer_gt boolean_dup_times exec_eq exec_pop (exec_stackdepth exec_pop () boolean_xor -5 boolean_eq) tagged_560 exec_s (boolean_yank exec_y_when_autoconstructing (in4 integer_dec exec_do*while (exec_dup_items exec_s (exec_do*count (exec_y ()) exec_do*range (exec_k_when_autoconstructing () (exec_rot () (integer_sub exec_s () (boolean_pop tag_integer_767 exec_do*times () integer_sub integer_empty 36 print_newline) (integer_stackdepth integer_flush boolean_xor boolean_flush boolean_xor boolean_invert_second_then_and integer_sub)) (exec_y (integer_flush integer_mod exec_dup_items boolean_or print_boolean) integer_max integer_mult integer_dup exec_do*while (boolean_eq exec_yankdup exec_dup (integer_mult) boolean_eq exec_y_when_autoconstructing (exec_while (integer_mult exec_y ()) exec_dup_items boolean_dup integer_eq boolean_rot integer_shove integer_mod integer_yank) exec_do*while (exec_dup_items exec_k_when_autoconstructing (in2 exec_pop (exec_yankdup boolean_frominteger exec_do*count (integer_gt exec_do*times (-68) exec_k () ()))) ())))))) () ()))) () ()) ())))))
Lexicase best errors: [0 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 158
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_767} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction 36} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 1, :instruction -68} {:close 2, :instruction exec_k})
Zero cases best program: (exec_dup (in2 exec_empty integer_yank boolean_not in4) integer_dup exec_do*while (in1) in4 boolean_eq integer_yank in3 exec_do*times (print_integer boolean_invert_second_then_and exec_y (exec_k (boolean_eq exec_flush) (boolean_dup_items) integer_pop integer_fromboolean integer_dup_times exec_while (exec_while (exec_y () integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_shove) (integer_gt boolean_dup_times exec_eq exec_pop (exec_stackdepth exec_pop () boolean_xor -5 boolean_eq) tagged_560 exec_s (boolean_yank exec_y_when_autoconstructing (in4 integer_dec exec_do*while (exec_dup_items exec_s (exec_do*count (exec_y ()) exec_do*range (exec_k_when_autoconstructing () (exec_rot () (integer_sub exec_s () (boolean_pop tag_integer_767 exec_do*times () integer_sub integer_empty 36 print_newline) (integer_stackdepth integer_flush boolean_xor boolean_flush boolean_xor boolean_invert_second_then_and integer_sub)) (exec_y (integer_flush integer_mod exec_dup_items boolean_or print_boolean) integer_max integer_mult integer_dup exec_do*while (boolean_eq exec_yankdup exec_dup (integer_mult) boolean_eq exec_y_when_autoconstructing (exec_while (integer_mult exec_y ()) exec_dup_items boolean_dup integer_eq boolean_rot integer_shove integer_mod integer_yank) exec_do*while (exec_dup_items exec_k_when_autoconstructing (in2 exec_pop (exec_yankdup boolean_frominteger exec_do*count (integer_gt exec_do*times (-68) exec_k () ()))) ())))))) () ()))) () ()) ())))))
Zero cases best errors: [0 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 158
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 105 125 532 149 85 674 349 150 339)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (91 105 125 532 149 85 674 349 150 339)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_y} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_767} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction 36} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction -68} {:close 2, :instruction exec_k})
Best program: (exec_dup (in2 boolean_not in4) integer_dup exec_do*while (in1) in4 boolean_eq integer_yank in3 exec_do*times (print_integer exec_dup_items exec_y (integer_mod exec_k (boolean_dup_items boolean_eq exec_flush) (boolean_dup_items) integer_fromboolean integer_dup_times exec_while (exec_y () integer_pop boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_shove) (integer_gt boolean_dup_times exec_eq exec_pop (exec_stackdepth exec_pop () boolean_xor -5 boolean_eq) tagged_560 exec_s (boolean_yank exec_y_when_autoconstructing (in4 exec_do*while (exec_dup_items integer_lte exec_s (exec_do*count (exec_y ()) exec_k_when_autoconstructing () (exec_rot () (integer_sub exec_s () (boolean_pop tag_integer_767 exec_do*times () integer_sub integer_empty 36 print_newline) (integer_stackdepth integer_stackdepth integer_flush boolean_xor boolean_xor boolean_invert_second_then_and integer_sub)) (exec_y (integer_flush integer_mod exec_dup_items boolean_or 21) print_boolean) integer_max integer_dup exec_do*while (boolean_eq exec_yankdup exec_dup (integer_mult) tag_boolean_692 boolean_eq exec_y_when_autoconstructing (exec_while (integer_mult exec_y ()) exec_dup_items exec_do*range (integer_eq boolean_rot integer_shove integer_mod integer_yank) print_exec (exec_while (exec_dup_items exec_k_when_autoconstructing (in2 exec_pop (exec_yankdup boolean_frominteger exec_do*count (integer_gt integer_div exec_do*times (-68) exec_k () ()))) ())))))) () ()))) () ()) ()))))
Errors: [1 1 0 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 109
Size: 158
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.401
Median total errors in population: 8
Error averages by case: (0.909 0.895 0.875 0.468 0.851 0.915 0.326 0.651 0.85 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 104.082
Average program size in population (points): 145.829
Average percent parens in population: 0.286
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.352
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8423295
--- Timings ---
Current time: 1559593817876 milliseconds
Total Time:          34.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.8 seconds, 42.7%
Fitness Testing:     10.5 seconds, 30.3%
Report:               9.2 seconds, 26.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 486
Test mean error for best: 0.48600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 37                 
Correct output: 21                  | Program output: 61                 
Correct output: 6                   | Program output: 91                 
Correct output: 10                  | Program output: 43                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 92                 
Correct output: 56                  | Program output: 99                 
Correct output: 11                  | Program output: 77                 
Correct output: 11                  | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 6                  
Correct output: 25                  | Program output: 25                 
Correct output: 49                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 70                 
Correct output: 6                   | Program output: 25                 
Correct output: 4                   | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -50                
Correct output: -80                 | Program output: 52                 
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -28                
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -11                
Correct output: -69                 | Program output: -2                 
Correct output: -80                 | Program output: 96                 
Correct output: 3                   | Program output: 55                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 10                 
Correct output: -51                 | Program output: -35                
Correct output: -25                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -58                
Correct output: 42                  | Program output: 81                 
Correct output: -63                 | Program output: -18                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -63                
Correct output: -58                 | Program output: -8                 
Correct output: 30                  | Program output: 30                 
Correct output: -72                 | Program output: -56                
Correct output: 3                   | Program output: 70                 
Correct output: -97                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -30                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -12                
Correct output: 23                  | Program output: 63                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -9                 
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_678} {:close 0, :instruction in2} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction -87} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction 21} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Lexicase best program: (exec_dup (in2 boolean_not integer_dup in1) integer_min exec_rot () (boolean_eq integer_yank in3) (in2) integer_min exec_do*times (print_integer integer_pop boolean_invert_second_then_and exec_y (integer_fromboolean boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup exec_yank) exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_shove integer_gt boolean_dup_times integer_dup) (boolean_stackdepth boolean_yank) (integer_dup_items exec_stackdepth boolean_invert_second_then_and tagged_678 in2 -5 boolean_eq) boolean_dup_items integer_eq exec_do*count (boolean_frominteger exec_y_when_autoconstructing (exec_k (boolean_dup_times integer_swap exec_dup_items exec_flush exec_flush -87 integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 integer_sub exec_rot (integer_empty print_newline) (boolean_frominteger exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_div boolean_dup exec_shove (boolean_or boolean_dup boolean_dup 21) integer_yankdup) print_boolean) (integer_dup exec_do*while (exec_dup (tag_boolean_692 integer_swap exec_y_when_autoconstructing (exec_while (boolean_rot in4 integer_flush exec_y ()) exec_pop (exec_flush integer_inc boolean_invert_first_then_and exec_dup_items integer_eq integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))) ())))))))) ()))) ()))))
Lexicase best errors: [0 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 157
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_678} {:close 0, :instruction in2} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction -87} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction 21} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Zero cases best program: (exec_dup (in2 boolean_not integer_dup in1) integer_min exec_rot () (boolean_eq integer_yank in3) (in2) integer_min exec_do*times (print_integer integer_pop boolean_invert_second_then_and exec_y (integer_fromboolean boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup exec_yank) exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_shove integer_gt boolean_dup_times integer_dup) (boolean_stackdepth boolean_yank) (integer_dup_items exec_stackdepth boolean_invert_second_then_and tagged_678 in2 -5 boolean_eq) boolean_dup_items integer_eq exec_do*count (boolean_frominteger exec_y_when_autoconstructing (exec_k (boolean_dup_times integer_swap exec_dup_items exec_flush exec_flush -87 integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 integer_sub exec_rot (integer_empty print_newline) (boolean_frominteger exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_div boolean_dup exec_shove (boolean_or boolean_dup boolean_dup 21) integer_yankdup) print_boolean) (integer_dup exec_do*while (exec_dup (tag_boolean_692 integer_swap exec_y_when_autoconstructing (exec_while (boolean_rot in4 integer_flush exec_y ()) exec_pop (exec_flush integer_inc boolean_invert_first_then_and exec_dup_items integer_eq integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))) ())))))))) ()))) ()))))
Zero cases best errors: [0 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 157
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 256 288 63 280 262 280 294 781 332)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (254 256 288 63 280 262 280 294 781 332)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction tagged_507} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_560} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_767} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction 36} {:close 1, :instruction print_newline} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 1, :instruction -68} {:close 2, :instruction exec_k})
Best program: (exec_dup (in2 exec_empty integer_yank boolean_not in4) tagged_507 integer_dup exec_do*while (in1) boolean_eq integer_min integer_yank exec_stackdepth exec_do*times (print_integer boolean_invert_second_then_and in1 exec_y (exec_k (boolean_eq exec_flush) (boolean_dup_items) integer_pop integer_fromboolean integer_dup_times exec_while (integer_dup exec_while (exec_y () boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (integer_shove) (integer_gt boolean_dup_times exec_eq exec_pop (exec_stackdepth exec_pop () exec_pop (boolean_xor -5 boolean_eq) tagged_560 exec_s (boolean_yank exec_y_when_autoconstructing (in4 integer_dec exec_do*while (exec_s (exec_do*count (exec_y ()) exec_do*range (exec_k_when_autoconstructing () (exec_rot () (integer_sub boolean_pop tag_integer_767 boolean_shove) (exec_do*times () integer_empty 36 print_newline) exec_eq integer_stackdepth integer_flush boolean_xor boolean_flush boolean_xor boolean_invert_second_then_and integer_sub)) exec_y (integer_flush integer_mod exec_dup_items boolean_or integer_max integer_mult integer_dup exec_do*while (boolean_eq exec_k_when_autoconstructing (exec_yankdup exec_dup (integer_mult) boolean_eq exec_y_when_autoconstructing (exec_while (integer_mult exec_y ()) exec_dup_items boolean_dup integer_eq boolean_rot integer_shove integer_mod integer_yank) exec_do*while (exec_dup_items exec_k_when_autoconstructing (in2 integer_lt exec_pop (exec_yankdup exec_y (boolean_frominteger exec_do*count (integer_gt exec_do*times (-68) exec_k () ())))) ())) ()))) () ()))) () ())) ())))))
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 113
Size: 163
Percent parens: 0.307
--- Population Statistics ---
Average total errors in population: 6.91
Median total errors in population: 7
Error averages by case: (0.746 0.744 0.712 0.937 0.72 0.738 0.72 0.706 0.219 0.668)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 108.184
Average program size in population (points): 154.966
Average percent parens in population: 0.301
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 9031632
--- Timings ---
Current time: 1559593820493 milliseconds
Total Time:          37.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.0 seconds, 42.9%
Fitness Testing:     11.5 seconds, 30.8%
Report:               9.7 seconds, 26.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 533
Test mean error for best: 0.53300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: -4                 
Correct output: 13                  | Program output: -4                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: -4                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: -4                 
Correct output: 21                  | Program output: -4                 
Correct output: 6                   | Program output: -4                 
Correct output: 10                  | Program output: -4                 
Correct output: 15                  | Program output: -4                 
Correct output: 2                   | Program output: -4                 
Correct output: 40                  | Program output: -4                 
Correct output: 37                  | Program output: -4                 
Correct output: 10                  | Program output: -4                 
Correct output: 56                  | Program output: -4                 
Correct output: 11                  | Program output: -4                 
Correct output: 11                  | Program output: -4                 
Correct output: 46                  | Program output: -4                 
Correct output: 5                   | Program output: -4                 
Correct output: 25                  | Program output: -4                 
Correct output: 49                  | Program output: -4                 
Correct output: 33                  | Program output: -4                 
Correct output: 40                  | Program output: -4                 
Correct output: 6                   | Program output: -4                 
Correct output: 4                   | Program output: -4                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -4                 
Correct output: -56                 | Program output: -4                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -4                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: -4                 
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: -4                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -4                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -4                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -4                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k} {:close 0, :instruction integer_div})
Lexicase best program: (exec_dup (boolean_not in4) integer_dup in1 boolean_eq integer_yank in3 in2 integer_min exec_do*times (print_integer boolean_invert_second_then_and exec_y (integer_empty boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup print_exec (exec_s_when_autoconstructing (integer_gt exec_noop boolean_dup_times boolean_yank) (integer_lt integer_dup_items boolean_invert_second_then_and) (exec_stackdepth boolean_invert_second_then_and boolean_eq) boolean_dup_items exec_do*count (boolean_frominteger boolean_dup boolean_yank exec_y_when_autoconstructing (boolean_eq in4 integer_swap exec_dup_items exec_flush integer_dup integer_gt integer_lte exec_do*count (integer_eq tag_integer_767 integer_sub integer_mult) integer_empty print_newline) boolean_frominteger tagged_447) exec_when (integer_div boolean_dup exec_shove (boolean_or boolean_or print_boolean) exec_k (integer_dup exec_eq) (exec_do*while (exec_dup (tag_boolean_692 exec_dup_items) integer_min) boolean_rot in4 exec_s_when_autoconstructing (integer_flush exec_y ()) (exec_pop (exec_flush boolean_yank exec_k_when_autoconstructing (integer_swap) (integer_inc integer_lte exec_dup_items integer_eq integer_shove exec_flush integer_shove exec_s_when_autoconstructing () () (exec_do*times (in2 integer_yank) print_exec (exec_dup_items exec_eq) exec_dup_times (in2 boolean_frominteger integer_gte exec_do*times (exec_k () () integer_div)))))) ())))))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 133
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k} {:close 0, :instruction integer_div})
Zero cases best program: (exec_dup (boolean_not in4) integer_dup in1 boolean_eq integer_yank in3 in2 integer_min exec_do*times (print_integer boolean_invert_second_then_and exec_y (integer_empty boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup print_exec (exec_s_when_autoconstructing (integer_gt exec_noop boolean_dup_times boolean_yank) (integer_lt integer_dup_items boolean_invert_second_then_and) (exec_stackdepth boolean_invert_second_then_and boolean_eq) boolean_dup_items exec_do*count (boolean_frominteger boolean_dup boolean_yank exec_y_when_autoconstructing (boolean_eq in4 integer_swap exec_dup_items exec_flush integer_dup integer_gt integer_lte exec_do*count (integer_eq tag_integer_767 integer_sub integer_mult) integer_empty print_newline) boolean_frominteger tagged_447) exec_when (integer_div boolean_dup exec_shove (boolean_or boolean_or print_boolean) exec_k (integer_dup exec_eq) (exec_do*while (exec_dup (tag_boolean_692 exec_dup_items) integer_min) boolean_rot in4 exec_s_when_autoconstructing (integer_flush exec_y ()) (exec_pop (exec_flush boolean_yank exec_k_when_autoconstructing (integer_swap) (integer_inc integer_lte exec_dup_items integer_eq integer_shove exec_flush integer_shove exec_s_when_autoconstructing () () (exec_do*times (in2 integer_yank) print_exec (exec_dup_items exec_eq) exec_dup_times (in2 boolean_frominteger integer_gte exec_do*times (exec_k () () integer_div)))))) ())))))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 133
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (482 307 214 373 729 346 373 355 361 294)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (482 307 214 373 729 346 373 355 361 294)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -4} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_678} {:close 0, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction -87} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction 21} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Best program: (-4 in2 boolean_not in1 integer_min exec_rot () (boolean_eq integer_yank in3) (in2) integer_min exec_do*times (print_integer integer_pop boolean_invert_second_then_and exec_y (integer_fromboolean boolean_swap) integer_pop boolean_invert_first_then_and exec_yank) exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_shove integer_gt boolean_dup_times integer_dup) (exec_swap (boolean_yank) (integer_dup_items exec_stackdepth boolean_invert_second_then_and integer_add tagged_678 in2 boolean_eq) boolean_dup_items integer_eq exec_do*count (boolean_frominteger exec_flush exec_y_when_autoconstructing (exec_k (boolean_dup_times integer_swap exec_dup_items exec_flush -87 integer_dup integer_inc integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 integer_sub integer_empty print_newline) (boolean_frominteger exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_div boolean_dup in1 exec_shove (boolean_or boolean_dup boolean_dup 21) integer_yankdup) print_boolean) integer_dup exec_do*while (exec_dup (tag_boolean_692 exec_y_when_autoconstructing (exec_while (boolean_rot in4 integer_flush exec_y ()) exec_pop (exec_flush integer_inc boolean_invert_first_then_and exec_dup_items integer_rot) integer_eq integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (in2 exec_yankdup boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))) ()))))))) ()))) ()))
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 108
Size: 151
Percent parens: 0.285
--- Population Statistics ---
Average total errors in population: 6.166
Median total errors in population: 6
Error averages by case: (0.518 0.693 0.786 0.627 0.271 0.654 0.627 0.645 0.639 0.706)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 108.948
Average program size in population (points): 154.559
Average percent parens in population: 0.294
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9844963
--- Timings ---
Current time: 1559593823353 milliseconds
Total Time:          39.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.1 seconds, 43.1%
Fitness Testing:     12.4 seconds, 31.1%
Report:              10.2 seconds, 25.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 239
Test mean error for best: 0.23900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 62                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 29                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 90                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 85                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction -87} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction 21} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Lexicase best program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_not boolean_xor) (in1) integer_min exec_rot () (boolean_eq integer_yank in3) (in2) integer_min print_integer integer_pop exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times integer_dup) (exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items exec_stackdepth exec_yank boolean_invert_second_then_and in2 -5 boolean_eq) (boolean_dup_items integer_eq integer_mult exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_dup exec_empty) () integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 exec_rot (integer_empty print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_div boolean_dup exec_shove (boolean_or boolean_dup boolean_dup 21) integer_yankdup) print_boolean) (integer_dup exec_do*while (exec_dup (tag_boolean_692 integer_swap exec_y_when_autoconstructing (exec_while (in4 integer_flush exec_y ()) integer_inc boolean_invert_first_then_and exec_dup_items integer_eq integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))) ()))))))) ()))) ()))))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 158
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction -87} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction 21} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Zero cases best program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_not boolean_xor) (in1) integer_min exec_rot () (boolean_eq integer_yank in3) (in2) integer_min print_integer integer_pop exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times integer_dup) (exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items exec_stackdepth exec_yank boolean_invert_second_then_and in2 -5 boolean_eq) (boolean_dup_items integer_eq integer_mult exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_dup exec_empty) () integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 exec_rot (integer_empty print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_div boolean_dup exec_shove (boolean_or boolean_dup boolean_dup 21) integer_yankdup) print_boolean) (integer_dup exec_do*while (exec_dup (tag_boolean_692 integer_swap exec_y_when_autoconstructing (exec_while (in4 integer_flush exec_y ()) integer_inc boolean_invert_first_then_and exec_dup_items integer_eq integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))) ()))))))) ()))) ()))))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 158
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (60 282 291 279 54 184 555 491 304 749)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (60 282 291 279 54 184 555 491 304 749)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_678} {:close 0, :instruction in2} {:close 0, :instruction -5} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction -87} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction 21} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_692} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_142} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Best program: (exec_dup (in2 integer_dup_times boolean_not integer_dup in1) integer_min exec_rot () (boolean_eq integer_yank in3) (in2) integer_min print_integer integer_pop boolean_invert_second_then_and exec_y (integer_fromboolean boolean_swap) integer_pop boolean_invert_first_then_and integer_yankdup exec_yank integer_inc integer_inc integer_shove boolean_dup_times exec_do*times (integer_dup) boolean_stackdepth in1 boolean_yank boolean_invert_second_then_and tagged_678 in2 -5 boolean_dup_items exec_do*count (boolean_frominteger exec_y_when_autoconstructing (exec_k (boolean_dup_times boolean_not) (exec_dup_items exec_flush exec_flush -87 integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (tag_integer_381 integer_sub exec_rot (integer_empty print_newline) (boolean_frominteger integer_sub exec_k_when_autoconstructing (boolean_not exec_when (boolean_not integer_div boolean_dup exec_shove (boolean_or integer_empty boolean_dup boolean_dup 21) print_boolean) integer_dup exec_do*while (exec_dup (tag_boolean_692 integer_swap integer_yank exec_y_when_autoconstructing (boolean_rot in4 integer_flush exec_y ()) exec_pop (exec_flush integer_inc exec_empty) exec_dup_items integer_inc integer_eq integer_shove integer_inc in1) boolean_eq integer_yank) print_exec (exec_stackdepth exec_dup_items boolean_dup_items tagged_142 in2 exec_yankdup boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte boolean_eq) exec_do*times (exec_k () ()))) ()) ()))))))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 109
Size: 141
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.751
Median total errors in population: 6
Error averages by case: (0.94 0.718 0.709 0.721 0.946 0.816 0.445 0.509 0.696 0.251)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 108.199
Average program size in population (points): 151.259
Average percent parens in population: 0.283
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 10779527
--- Timings ---
Current time: 1559593826563 milliseconds
Total Time:          43.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.3 seconds, 42.6%
Fitness Testing:     13.7 seconds, 31.8%
Report:              10.9 seconds, 25.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -76                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 11                 
Correct output: 10                  | Program output: 77                 
Correct output: 15                  | Program output: 20                 
Correct output: 2                   | Program output: 20                 
Correct output: 40                  | Program output: 89                 
Correct output: 37                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 98                 
Correct output: 40                  | Program output: 73                 
Correct output: 6                   | Program output: 57                 
Correct output: 4                   | Program output: 85                 
Correct output: -93                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -38                 | Program output: -8                 
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 71                 
Correct output: -63                 | Program output: -24                
Correct output: -78                 | Program output: 88                 
Correct output: -89                 | Program output: -36                
Correct output: -95                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -72                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -53                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -11                
Correct output: -66                 | Program output: -27                
Correct output: -100                | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -50                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -8                 
Correct output: -98                 | Program output: -13                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 2, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 2, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup (in2 boolean_not integer_inc exec_shove () in4) in1 exec_while (integer_yank integer_yank in3) in2 integer_min integer_min boolean_dup_times exec_do*times (print_integer integer_pop boolean_invert_second_then_and exec_y (exec_k (in1 integer_fromboolean boolean_swap) (integer_pop exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_shove integer_gt boolean_dup_times boolean_pop integer_dup_items boolean_yank) (boolean_dup exec_stackdepth -5 boolean_eq) (integer_flush exec_y_when_autoconstructing (in4 integer_mult) exec_flush boolean_and integer_rot integer_dup boolean_stackdepth integer_lte exec_do*count (exec_k_when_autoconstructing () (exec_s () (tag_integer_381 integer_sub in4) (exec_stackdepth tag_integer_767 integer_sub exec_rot (exec_stackdepth exec_yank boolean_not tagged_447) (exec_while (exec_when (integer_div integer_shove boolean_dup exec_shove (exec_swap (boolean_or integer_dup exec_dup_times (boolean_pop) integer_dup exec_eq integer_shove boolean_eq exec_dup (exec_y_when_autoconstructing (exec_noop) integer_dup integer_shove in4 integer_add exec_y ()) exec_dup_items exec_stackdepth boolean_or exec_flush boolean_yank integer_inc boolean_dup boolean_swap boolean_shove) (integer_eq integer_shove exec_rot () (integer_shove exec_k_when_autoconstructing (exec_s_when_autoconstructing () () (integer_mult exec_k_when_autoconstructing () (exec_do*times (print_exec (exec_dup_items integer_empty) print_exec (exec_k_when_autoconstructing (in2 boolean_frominteger exec_do*count (exec_dup_items integer_flush integer_empty integer_dup integer_gte exec_do*times ())) ()))))) ()) ()))))) ()))))) () ()))))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 166
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 2, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -5} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 2, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup (in2 boolean_not integer_inc exec_shove () in4) in1 exec_while (integer_yank integer_yank in3) in2 integer_min integer_min boolean_dup_times exec_do*times (print_integer integer_pop boolean_invert_second_then_and exec_y (exec_k (in1 integer_fromboolean boolean_swap) (integer_pop exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_shove integer_gt boolean_dup_times boolean_pop integer_dup_items boolean_yank) (boolean_dup exec_stackdepth -5 boolean_eq) (integer_flush exec_y_when_autoconstructing (in4 integer_mult) exec_flush boolean_and integer_rot integer_dup boolean_stackdepth integer_lte exec_do*count (exec_k_when_autoconstructing () (exec_s () (tag_integer_381 integer_sub in4) (exec_stackdepth tag_integer_767 integer_sub exec_rot (exec_stackdepth exec_yank boolean_not tagged_447) (exec_while (exec_when (integer_div integer_shove boolean_dup exec_shove (exec_swap (boolean_or integer_dup exec_dup_times (boolean_pop) integer_dup exec_eq integer_shove boolean_eq exec_dup (exec_y_when_autoconstructing (exec_noop) integer_dup integer_shove in4 integer_add exec_y ()) exec_dup_items exec_stackdepth boolean_or exec_flush boolean_yank integer_inc boolean_dup boolean_swap boolean_shove) (integer_eq integer_shove exec_rot () (integer_shove exec_k_when_autoconstructing (exec_s_when_autoconstructing () () (integer_mult exec_k_when_autoconstructing () (exec_do*times (print_exec (exec_dup_items integer_empty) print_exec (exec_k_when_autoconstructing (in2 boolean_frominteger exec_do*count (exec_dup_items integer_flush integer_empty integer_dup integer_gte exec_do*times ())) ()))))) ()) ()))))) ()))))) () ()))))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 166
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 446 470 441 275 375 321 447 406 438)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (372 446 470 441 275 375 321 447 406 438)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_integer_204} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction -54} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction 27} {:close 0, :instruction boolean_or} {:close 1, :instruction 21} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Best program: (exec_dup (boolean_not in4) boolean_empty integer_fromboolean boolean_dup_items in1 integer_yank in3 integer_swap in2 integer_min exec_do*times (print_integer integer_pop exec_y (integer_fromboolean boolean_swap) exec_pop (exec_shove (in2 boolean_invert_first_then_and integer_yankdup tag_integer_204 exec_s_when_autoconstructing (integer_shove integer_dup) (integer_dup_items exec_stackdepth boolean_dup_items integer_rot integer_inc boolean_frominteger exec_y_when_autoconstructing (boolean_eq in4 exec_flush integer_dup exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 tag_integer_767 integer_sub exec_swap (-54 integer_min integer_empty print_newline) (boolean_frominteger exec_when (integer_div boolean_dup integer_mod 27 boolean_or 21) print_boolean integer_lte integer_dup_times integer_inc) print_boolean) (exec_stackdepth boolean_eq boolean_eq exec_while (boolean_rot in4 integer_flush boolean_dup_times exec_y ()) exec_pop (exec_flush boolean_yank integer_inc integer_swap exec_y (exec_dup_items boolean_invert_second_then_and integer_shove exec_s_when_autoconstructing () () (integer_yank) exec_yank) exec_dup_items exec_eq) exec_stackdepth exec_k_when_autoconstructing (integer_lte exec_flush boolean_frominteger exec_do*count (boolean_empty integer_gte exec_do*times (exec_k () ()))) ()))))) ()))))
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 96
Size: 128
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.009
Median total errors in population: 6
Error averages by case: (0.628 0.554 0.53 0.559 0.725 0.625 0.679 0.553 0.594 0.562)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 105.877
Average program size in population (points): 145.148
Average percent parens in population: 0.269
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 11819447
--- Timings ---
Current time: 1559593829612 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.5 seconds, 42.3%
Fitness Testing:     14.8 seconds, 32.1%
Report:              11.7 seconds, 25.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 186
Test mean error for best: 0.18600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction tag_boolean_652} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup (in2 exec_do*while (boolean_not in4)) in1 exec_while (print_boolean integer_yank in4) in3 exec_if (in2) (integer_min) integer_min boolean_dup_times print_integer integer_pop boolean_invert_second_then_and exec_y (exec_k (boolean_invert_second_then_and integer_fromboolean boolean_swap) (integer_gte integer_dec exec_s_when_autoconstructing (integer_shove integer_gt boolean_dup_times integer_dup_items boolean_yank) (integer_dup_items exec_stackdepth integer_div integer_yankdup integer_rot integer_gt integer_shove) () exec_y_when_autoconstructing (boolean_eq in4 integer_mult) exec_empty) exec_flush boolean_and boolean_dup integer_rot boolean_stackdepth integer_lte boolean_frominteger exec_do*count (exec_k_when_autoconstructing () (exec_s () (tag_integer_381 in4) (tag_integer_767 integer_sub exec_rot (exec_yank integer_empty boolean_not tagged_447) (exec_while (integer_div integer_shove boolean_dup exec_shove (exec_swap (boolean_frominteger) (boolean_or exec_dup_times (boolean_pop) exec_do*while (exec_do*times (integer_shove boolean_eq exec_dup (exec_y_when_autoconstructing (exec_s (exec_noop) (integer_shove integer_add exec_y ()) (integer_max boolean_pop exec_yankdup exec_dup_items exec_dup (exec_flush boolean_yank exec_do*times () tag_boolean_652 integer_inc boolean_dup boolean_swap boolean_shove) integer_eq integer_shove exec_rot () (integer_shove exec_k_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_dup_times integer_mult exec_k_when_autoconstructing () (exec_do*times (print_exec (exec_dup_items print_exec (exec_k_when_autoconstructing (in2 boolean_frominteger exec_do*count (exec_dup_items integer_flush integer_empty integer_gte exec_do*times ())) ())))))) ()) ()))))))))) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 173
Percent parens: 0.312
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 2, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 1, :instruction in4} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction tag_boolean_652} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup (in2 exec_do*while (boolean_not in4)) in1 exec_while (print_boolean integer_yank in4) in3 exec_if (in2) (integer_min) integer_min boolean_dup_times print_integer integer_pop boolean_invert_second_then_and exec_y (exec_k (boolean_invert_second_then_and integer_fromboolean boolean_swap) (integer_gte integer_dec exec_s_when_autoconstructing (integer_shove integer_gt boolean_dup_times integer_dup_items boolean_yank) (integer_dup_items exec_stackdepth integer_div integer_yankdup integer_rot integer_gt integer_shove) () exec_y_when_autoconstructing (boolean_eq in4 integer_mult) exec_empty) exec_flush boolean_and boolean_dup integer_rot boolean_stackdepth integer_lte boolean_frominteger exec_do*count (exec_k_when_autoconstructing () (exec_s () (tag_integer_381 in4) (tag_integer_767 integer_sub exec_rot (exec_yank integer_empty boolean_not tagged_447) (exec_while (integer_div integer_shove boolean_dup exec_shove (exec_swap (boolean_frominteger) (boolean_or exec_dup_times (boolean_pop) exec_do*while (exec_do*times (integer_shove boolean_eq exec_dup (exec_y_when_autoconstructing (exec_s (exec_noop) (integer_shove integer_add exec_y ()) (integer_max boolean_pop exec_yankdup exec_dup_items exec_dup (exec_flush boolean_yank exec_do*times () tag_boolean_652 integer_inc boolean_dup boolean_swap boolean_shove) integer_eq integer_shove exec_rot () (integer_shove exec_k_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_dup_times integer_mult exec_k_when_autoconstructing () (exec_do*times (print_exec (exec_dup_items print_exec (exec_k_when_autoconstructing (in2 boolean_frominteger exec_do*count (exec_dup_items integer_flush integer_empty integer_gte exec_do*times ())) ())))))) ()) ()))))))))) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 173
Percent parens: 0.312
--- Lexicase Population Statistics ---
Count of elite individuals by case: (631 386 151 529 417 352 711 242 309 322)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (631 386 151 529 417 352 711 242 309 322)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction -5} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction -87} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction tag_integer_381} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_447} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction 21} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction tag_exec_850} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_k})
Best program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 112
Size: 160
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.95
Median total errors in population: 6
Error averages by case: (0.369 0.614 0.849 0.471 0.583 0.648 0.289 0.758 0.691 0.678)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 110.044
Average program size in population (points): 153.58
Average percent parens in population: 0.281
Minimum age in population: 17.0
Maximum age in population: 17.0
Average age in population: 17.0
Median age in population: 17.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 12781998
--- Timings ---
Current time: 1559593832818 milliseconds
Total Time:          49.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.7 seconds, 42.0%
Fitness Testing:     16.1 seconds, 32.6%
Report:              12.4 seconds, 25.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 160


Auto-simplifying with starting size: 160
step: 0
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 500
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 1000
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 1500
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 2000
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 2500
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 3000
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 3500
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 4000
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 4500
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

step: 5000
program: (exec_s_when_autoconstructing (integer_dup) (in2 boolean_yankdup boolean_not boolean_xor) (boolean_xor in1) boolean_and integer_min exec_rot () (integer_yank in3) (in2) integer_min print_integer exec_y (boolean_swap) boolean_invert_first_then_and boolean_flush integer_yankdup exec_yank exec_y_when_autoconstructing (exec_s_when_autoconstructing (integer_inc integer_inc integer_gt boolean_dup_times exec_dup (boolean_stackdepth boolean_yank) integer_flush integer_dup_items integer_lte) (exec_yank boolean_invert_second_then_and in2 -5 exec_noop boolean_eq) (boolean_dup_items integer_eq integer_dup_items exec_do*count (boolean_frominteger exec_s () (exec_k (boolean_dup_times integer_rot integer_swap in1 exec_dup_items exec_flush exec_flush -87 integer_rot integer_dup integer_inc exec_do*count (integer_eq exec_k_when_autoconstructing () (exec_s () (tag_integer_381 print_integer exec_rot (print_newline) (exec_if () (integer_sub boolean_not tagged_447) exec_when (integer_shove) integer_div boolean_dup exec_shove (integer_div) boolean_or boolean_dup boolean_dup 21) (integer_dup exec_yankdup exec_do*while (exec_dup (integer_swap exec_while (in4 integer_flush integer_inc boolean_invert_first_then_and exec_dup_items boolean_xor) integer_eq tag_exec_850 () integer_shove exec_s_when_autoconstructing () () (exec_do*times (integer_yank) boolean_rot print_exec (exec_stackdepth exec_dup_items exec_k_when_autoconstructing (exec_yankdup exec_flush integer_fromboolean) (boolean_frominteger exec_do*count (exec_y_when_autoconstructing () integer_gte exec_do*times (exec_k () ()))))))))) ()))) ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 160

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 186
Test mean error for best: 0.18600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -75                 | Program output: -75                
Correct output: 45                  | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: 5                   | Program output: 5                  
Correct output: -80                 | Program output: -80                
Correct output: 39                  | Program output: 39                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: 16                  | Program output: 16                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 40                  | Program output: 40                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 56                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 28                 
Correct output: 49                  | Program output: 49                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -85                 | Program output: -72                
Correct output: -56                 | Program output: 19                 
Correct output: -63                 | Program output: -50                
Correct output: -38                 | Program output: -38                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -100                | Program output: -100               
Correct output: -97                 | Program output: -93                
Correct output: -45                 | Program output: -45                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: 3                   | Program output: 3                  
Correct output: -86                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -51                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: 42                  | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: 30                  | Program output: 49                 
Correct output: -72                 | Program output: -58                
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 87                 
Correct output: -55                 | Program output: -46                
Correct output: -29                 | Program output: -29                
Correct output: -100                | Program output: -100               
Correct output: -86                 | Program output: -5                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -52                 | Program output: -52                
Correct output: 23                  | Program output: 23                 
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -2                  | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -79                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: 79                 
Correct output: -64                 | Program output: -43                
;;******************************
