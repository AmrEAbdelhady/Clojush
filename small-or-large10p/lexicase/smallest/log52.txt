Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[2 2 2 -73] -73] [[-33 -79 -33 -33] -79] [[-74 -74 -74 -23] -74] [[-73 -73 -73 -44] -73] [[2 2 10 2] 2] [[-57 -52 -52 -52] -57] [[-87 54 54 54] -87] [[28 -63 28 28] -63] [[2 2 2 -100] -100] [[3 3 3 49] 3] [(-14 -14 -14 -14) -14] [(-43 -43 -43 -43) -43] [(-43 -43 -43 -43) -43] [(36 36 36 36) 36] [(-72 -72 -72 -72) -72] [(40 25 48 49) 25] [(6 52 86 41) 6] [(45 13 1 7) 1] [(92 81 30 6) 6] [(34 68 27 75) 27] [(8 20 77 26) 8] [(12 14 59 25) 12] [(39 67 76 38) 38] [(47 73 33 34) 33] [(40 55 80 85) 40] [(43 10 71 64) 10] [(58 30 21 57) 21] [(15 8 14 39) 8] [(28 29 31 25) 25] [(78 48 62 36) 36] [(14 50 97 7) 7] [(57 47 69 87) 47] [(47 43 9 88) 9] [(43 96 61 29) 29] [(62 46 91 30) 30] [(-29 27 -85 -24) -85] [(7 54 41 46) 7] [(7 93 40 -48) -48] [(-28 6 -80 72) -80] [(-27 44 40 -89) -89] [(42 90 85 37) 37] [(27 86 37 1) 1] [(91 82 36 -79) -79] [(79 75 -47 -43) -47] [(-65 94 -20 71) -65] [(15 28 56 -75) -75] [(-94 -60 25 -59) -94] [(-51 -66 -45 58) -66] [(77 -100 55 -11) -100] [(-36 -56 -47 -32) -56] [(91 -10 60 77) -10] [(-44 -36 -9 11) -44] [(-61 -25 68 -81) -81] [(37 34 90 -89) -89] [(-33 -31 75 -25) -33] [(-41 -75 80 89) -75] [(-4 91 -7 1) -7] [(16 -25 -36 -100) -100] [(-6 39 -79 -59) -79] [(2 76 78 -39) -39] [(-93 93 -1 35) -93] [(-94 55 -27 6) -94] [(99 75 -99 -30) -99] [(-100 84 -80 90) -100] [(-1 -56 93 33) -56] [(-60 47 92 100) -60] [(-29 60 50 80) -29] [(2 59 -74 -23) -74] [(-42 68 -9 -62) -62] [(-15 -51 69 93) -51] [(12 10 82 28) 10] [(29 -35 -62 -26) -62] [(46 47 64 61) 46] [(-15 -11 -19 48) -19] [(26 93 -34 62) -34] [(96 -67 -93 -50) -93] [(13 -5 95 -37) -37] [(-6 36 -34 -89) -89] [(-74 98 -36 -55) -74] [(-30 22 6 -100) -100] [(-98 19 20 95) -98] [(81 41 42 9) 9] [(12 -86 15 59) -86] [(-60 44 -77 85) -77] [(8 6 20 96) 6] [(67 -17 -98 46) -98] [(12 -76 28 -42) -76] [(-99 -1 -57 71) -99] [(-22 -3 -48 23) -48] [(63 -91 -43 64) -91] [(97 46 -98 1) -98] [(-30 -90 -28 -69) -90] [(-25 -8 66 -10) -25] [(-8 -33 89 66) -33] [(98 81 -5 82) -5])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[2 2 2 -73] -73]
Train Case:   6 | Input/Output: [[-33 -79 -33 -33] -79]
Train Case:   7 | Input/Output: [[-74 -74 -74 -23] -74]
Train Case:   8 | Input/Output: [[-73 -73 -73 -44] -73]
Train Case:   9 | Input/Output: [[2 2 10 2] 2]
Train Case:  10 | Input/Output: [[-57 -52 -52 -52] -57]
Train Case:  11 | Input/Output: [[-87 54 54 54] -87]
Train Case:  12 | Input/Output: [[28 -63 28 28] -63]
Train Case:  13 | Input/Output: [[2 2 2 -100] -100]
Train Case:  14 | Input/Output: [[3 3 3 49] 3]
Train Case:  15 | Input/Output: [(-14 -14 -14 -14) -14]
Train Case:  16 | Input/Output: [(-43 -43 -43 -43) -43]
Train Case:  17 | Input/Output: [(-43 -43 -43 -43) -43]
Train Case:  18 | Input/Output: [(36 36 36 36) 36]
Train Case:  19 | Input/Output: [(-72 -72 -72 -72) -72]
Train Case:  20 | Input/Output: [(40 25 48 49) 25]
Train Case:  21 | Input/Output: [(6 52 86 41) 6]
Train Case:  22 | Input/Output: [(45 13 1 7) 1]
Train Case:  23 | Input/Output: [(92 81 30 6) 6]
Train Case:  24 | Input/Output: [(34 68 27 75) 27]
Train Case:  25 | Input/Output: [(8 20 77 26) 8]
Train Case:  26 | Input/Output: [(12 14 59 25) 12]
Train Case:  27 | Input/Output: [(39 67 76 38) 38]
Train Case:  28 | Input/Output: [(47 73 33 34) 33]
Train Case:  29 | Input/Output: [(40 55 80 85) 40]
Train Case:  30 | Input/Output: [(43 10 71 64) 10]
Train Case:  31 | Input/Output: [(58 30 21 57) 21]
Train Case:  32 | Input/Output: [(15 8 14 39) 8]
Train Case:  33 | Input/Output: [(28 29 31 25) 25]
Train Case:  34 | Input/Output: [(78 48 62 36) 36]
Train Case:  35 | Input/Output: [(14 50 97 7) 7]
Train Case:  36 | Input/Output: [(57 47 69 87) 47]
Train Case:  37 | Input/Output: [(47 43 9 88) 9]
Train Case:  38 | Input/Output: [(43 96 61 29) 29]
Train Case:  39 | Input/Output: [(62 46 91 30) 30]
Train Case:  40 | Input/Output: [(-29 27 -85 -24) -85]
Train Case:  41 | Input/Output: [(7 54 41 46) 7]
Train Case:  42 | Input/Output: [(7 93 40 -48) -48]
Train Case:  43 | Input/Output: [(-28 6 -80 72) -80]
Train Case:  44 | Input/Output: [(-27 44 40 -89) -89]
Train Case:  45 | Input/Output: [(42 90 85 37) 37]
Train Case:  46 | Input/Output: [(27 86 37 1) 1]
Train Case:  47 | Input/Output: [(91 82 36 -79) -79]
Train Case:  48 | Input/Output: [(79 75 -47 -43) -47]
Train Case:  49 | Input/Output: [(-65 94 -20 71) -65]
Train Case:  50 | Input/Output: [(15 28 56 -75) -75]
Train Case:  51 | Input/Output: [(-94 -60 25 -59) -94]
Train Case:  52 | Input/Output: [(-51 -66 -45 58) -66]
Train Case:  53 | Input/Output: [(77 -100 55 -11) -100]
Train Case:  54 | Input/Output: [(-36 -56 -47 -32) -56]
Train Case:  55 | Input/Output: [(91 -10 60 77) -10]
Train Case:  56 | Input/Output: [(-44 -36 -9 11) -44]
Train Case:  57 | Input/Output: [(-61 -25 68 -81) -81]
Train Case:  58 | Input/Output: [(37 34 90 -89) -89]
Train Case:  59 | Input/Output: [(-33 -31 75 -25) -33]
Train Case:  60 | Input/Output: [(-41 -75 80 89) -75]
Train Case:  61 | Input/Output: [(-4 91 -7 1) -7]
Train Case:  62 | Input/Output: [(16 -25 -36 -100) -100]
Train Case:  63 | Input/Output: [(-6 39 -79 -59) -79]
Train Case:  64 | Input/Output: [(2 76 78 -39) -39]
Train Case:  65 | Input/Output: [(-93 93 -1 35) -93]
Train Case:  66 | Input/Output: [(-94 55 -27 6) -94]
Train Case:  67 | Input/Output: [(99 75 -99 -30) -99]
Train Case:  68 | Input/Output: [(-100 84 -80 90) -100]
Train Case:  69 | Input/Output: [(-1 -56 93 33) -56]
Train Case:  70 | Input/Output: [(-60 47 92 100) -60]
Train Case:  71 | Input/Output: [(-29 60 50 80) -29]
Train Case:  72 | Input/Output: [(2 59 -74 -23) -74]
Train Case:  73 | Input/Output: [(-42 68 -9 -62) -62]
Train Case:  74 | Input/Output: [(-15 -51 69 93) -51]
Train Case:  75 | Input/Output: [(12 10 82 28) 10]
Train Case:  76 | Input/Output: [(29 -35 -62 -26) -62]
Train Case:  77 | Input/Output: [(46 47 64 61) 46]
Train Case:  78 | Input/Output: [(-15 -11 -19 48) -19]
Train Case:  79 | Input/Output: [(26 93 -34 62) -34]
Train Case:  80 | Input/Output: [(96 -67 -93 -50) -93]
Train Case:  81 | Input/Output: [(13 -5 95 -37) -37]
Train Case:  82 | Input/Output: [(-6 36 -34 -89) -89]
Train Case:  83 | Input/Output: [(-74 98 -36 -55) -74]
Train Case:  84 | Input/Output: [(-30 22 6 -100) -100]
Train Case:  85 | Input/Output: [(-98 19 20 95) -98]
Train Case:  86 | Input/Output: [(81 41 42 9) 9]
Train Case:  87 | Input/Output: [(12 -86 15 59) -86]
Train Case:  88 | Input/Output: [(-60 44 -77 85) -77]
Train Case:  89 | Input/Output: [(8 6 20 96) 6]
Train Case:  90 | Input/Output: [(67 -17 -98 46) -98]
Train Case:  91 | Input/Output: [(12 -76 28 -42) -76]
Train Case:  92 | Input/Output: [(-99 -1 -57 71) -99]
Train Case:  93 | Input/Output: [(-22 -3 -48 23) -48]
Train Case:  94 | Input/Output: [(63 -91 -43 64) -91]
Train Case:  95 | Input/Output: [(97 46 -98 1) -98]
Train Case:  96 | Input/Output: [(-30 -90 -28 -69) -90]
Train Case:  97 | Input/Output: [(-25 -8 66 -10) -25]
Train Case:  98 | Input/Output: [(-8 -33 89 66) -33]
Train Case:  99 | Input/Output: [(98 81 -5 82) -5]
Test Case:   0 | Input/Output: [[83 83 57 83] 57]
Test Case:   1 | Input/Output: [[2 2 -100 2] -100]
Test Case:   2 | Input/Output: [[78 35 35 35] 35]
Test Case:   3 | Input/Output: [[-35 -42 -42 -42] -42]
Test Case:   4 | Input/Output: [[-67 -67 -67 -48] -67]
Test Case:   5 | Input/Output: [[-67 -67 -53 -67] -67]
Test Case:   6 | Input/Output: [[-13 -13 -13 -80] -80]
Test Case:   7 | Input/Output: [[-31 -31 -79 -31] -79]
Test Case:   8 | Input/Output: [[15 15 15 24] 15]
Test Case:   9 | Input/Output: [[35 35 29 35] 29]
Test Case:  10 | Input/Output: [[-15 -15 -15 -78] -78]
Test Case:  11 | Input/Output: [[-50 86 86 86] -50]
Test Case:  12 | Input/Output: [[88 87 88 88] 87]
Test Case:  13 | Input/Output: [[66 -70 -70 -70] -70]
Test Case:  14 | Input/Output: [[-57 -82 -57 -57] -82]
Test Case:  15 | Input/Output: [[72 -88 72 72] -88]
Test Case:  16 | Input/Output: [[76 76 -26 76] -26]
Test Case:  17 | Input/Output: [[-87 -91 -87 -87] -91]
Test Case:  18 | Input/Output: [[-89 -89 -89 -60] -89]
Test Case:  19 | Input/Output: [[-37 -37 -37 -66] -66]
Test Case:  20 | Input/Output: [[-79 -79 -79 92] -79]
Test Case:  21 | Input/Output: [[-9 -9 88 -9] -9]
Test Case:  22 | Input/Output: [[82 30 30 30] 30]
Test Case:  23 | Input/Output: [[-91 55 -91 -91] -91]
Test Case:  24 | Input/Output: [[49 49 49 -20] -20]
Test Case:  25 | Input/Output: [[-96 -96 -96 82] -96]
Test Case:  26 | Input/Output: [[-77 -15 -15 -15] -77]
Test Case:  27 | Input/Output: [[-9 -9 -6 -9] -9]
Test Case:  28 | Input/Output: [[3 3 -81 3] -81]
Test Case:  29 | Input/Output: [[-10 28 28 28] -10]
Test Case:  30 | Input/Output: [[45 -13 45 45] -13]
Test Case:  31 | Input/Output: [[10 27 27 27] 10]
Test Case:  32 | Input/Output: [[4 42 4 4] 4]
Test Case:  33 | Input/Output: [[47 47 0 47] 0]
Test Case:  34 | Input/Output: [[-28 -28 -45 -28] -45]
Test Case:  35 | Input/Output: [[-65 -65 -65 -94] -94]
Test Case:  36 | Input/Output: [[-16 -16 -16 -6] -16]
Test Case:  37 | Input/Output: [[30 30 30 46] 30]
Test Case:  38 | Input/Output: [[44 44 44 84] 44]
Test Case:  39 | Input/Output: [[-48 -75 -75 -75] -75]
Test Case:  40 | Input/Output: [[86 86 -48 86] -48]
Test Case:  41 | Input/Output: [[48 -46 -46 -46] -46]
Test Case:  42 | Input/Output: [[-18 26 26 26] -18]
Test Case:  43 | Input/Output: [[39 39 -45 39] -45]
Test Case:  44 | Input/Output: [[48 48 3 48] 3]
Test Case:  45 | Input/Output: [[0 0 -26 0] -26]
Test Case:  46 | Input/Output: [[47 47 34 47] 34]
Test Case:  47 | Input/Output: [[-74 -81 -74 -74] -81]
Test Case:  48 | Input/Output: [[15 -35 -35 -35] -35]
Test Case:  49 | Input/Output: [[27 27 27 -19] -19]
Test Case:  50 | Input/Output: [[51 -79 51 51] -79]
Test Case:  51 | Input/Output: [[-73 -73 -72 -73] -73]
Test Case:  52 | Input/Output: [[-72 72 72 72] -72]
Test Case:  53 | Input/Output: [[-86 55 55 55] -86]
Test Case:  54 | Input/Output: [[7 7 7 43] 7]
Test Case:  55 | Input/Output: [[-75 -65 -65 -65] -75]
Test Case:  56 | Input/Output: [[73 -21 -21 -21] -21]
Test Case:  57 | Input/Output: [[-21 45 45 45] -21]
Test Case:  58 | Input/Output: [[-58 97 -58 -58] -58]
Test Case:  59 | Input/Output: [[14 58 58 58] 14]
Test Case:  60 | Input/Output: [[-89 -87 -87 -87] -89]
Test Case:  61 | Input/Output: [[-47 -47 -47 -39] -47]
Test Case:  62 | Input/Output: [[-80 -80 50 -80] -80]
Test Case:  63 | Input/Output: [[-76 27 27 27] -76]
Test Case:  64 | Input/Output: [[84 84 84 64] 64]
Test Case:  65 | Input/Output: [[-86 -86 68 -86] -86]
Test Case:  66 | Input/Output: [[78 78 -4 78] -4]
Test Case:  67 | Input/Output: [[-62 -62 -40 -62] -62]
Test Case:  68 | Input/Output: [[32 32 96 32] 32]
Test Case:  69 | Input/Output: [[-74 -74 93 -74] -74]
Test Case:  70 | Input/Output: [[94 40 40 40] 40]
Test Case:  71 | Input/Output: [[-73 -73 89 -73] -73]
Test Case:  72 | Input/Output: [[-49 -49 -23 -49] -49]
Test Case:  73 | Input/Output: [[-33 -33 -33 -18] -33]
Test Case:  74 | Input/Output: [[-17 -17 -17 -70] -70]
Test Case:  75 | Input/Output: [[70 72 70 70] 70]
Test Case:  76 | Input/Output: [[-91 97 97 97] -91]
Test Case:  77 | Input/Output: [[-57 -57 39 -57] -57]
Test Case:  78 | Input/Output: [[-97 -33 -33 -33] -97]
Test Case:  79 | Input/Output: [[22 22 22 22] 22]
Test Case:  80 | Input/Output: [[51 -84 51 51] -84]
Test Case:  81 | Input/Output: [[56 -73 -73 -73] -73]
Test Case:  82 | Input/Output: [[-76 -76 6 -76] -76]
Test Case:  83 | Input/Output: [[-68 -68 15 -68] -68]
Test Case:  84 | Input/Output: [[60 26 26 26] 26]
Test Case:  85 | Input/Output: [[-100 -100 -100 -29] -100]
Test Case:  86 | Input/Output: [[51 -89 -89 -89] -89]
Test Case:  87 | Input/Output: [[-51 -51 76 -51] -51]
Test Case:  88 | Input/Output: [[80 -70 -70 -70] -70]
Test Case:  89 | Input/Output: [[-74 -74 -74 -51] -74]
Test Case:  90 | Input/Output: [[32 32 33 32] 32]
Test Case:  91 | Input/Output: [[-54 -54 -54 77] -54]
Test Case:  92 | Input/Output: [[-50 -50 -64 -50] -64]
Test Case:  93 | Input/Output: [[-81 65 65 65] -81]
Test Case:  94 | Input/Output: [[58 58 58 8] 8]
Test Case:  95 | Input/Output: [[61 61 61 90] 61]
Test Case:  96 | Input/Output: [[-45 65 -45 -45] -45]
Test Case:  97 | Input/Output: [[66 66 -15 66] -15]
Test Case:  98 | Input/Output: [[-1 -1 -44 -1] -44]
Test Case:  99 | Input/Output: [[-96 -98 -96 -96] -98]
Test Case: 100 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 101 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 102 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 103 | Input/Output: [(91 91 91 91) 91]
Test Case: 104 | Input/Output: [(17 17 17 17) 17]
Test Case: 105 | Input/Output: [(66 66 66 66) 66]
Test Case: 106 | Input/Output: [(48 48 48 48) 48]
Test Case: 107 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 108 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 109 | Input/Output: [(87 87 87 87) 87]
Test Case: 110 | Input/Output: [(5 5 5 5) 5]
Test Case: 111 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 112 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 113 | Input/Output: [(99 99 99 99) 99]
Test Case: 114 | Input/Output: [(29 29 29 29) 29]
Test Case: 115 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 116 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 117 | Input/Output: [(93 93 93 93) 93]
Test Case: 118 | Input/Output: [(7 7 7 7) 7]
Test Case: 119 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 120 | Input/Output: [(70 70 70 70) 70]
Test Case: 121 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 122 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 123 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 124 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 125 | Input/Output: [(65 65 65 65) 65]
Test Case: 126 | Input/Output: [(53 53 53 53) 53]
Test Case: 127 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 128 | Input/Output: [(95 95 95 95) 95]
Test Case: 129 | Input/Output: [(40 40 40 40) 40]
Test Case: 130 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 131 | Input/Output: [(77 77 77 77) 77]
Test Case: 132 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 133 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 134 | Input/Output: [(47 47 47 47) 47]
Test Case: 135 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 136 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 137 | Input/Output: [(43 43 43 43) 43]
Test Case: 138 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 139 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 140 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 141 | Input/Output: [(91 91 91 91) 91]
Test Case: 142 | Input/Output: [(32 32 32 32) 32]
Test Case: 143 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 144 | Input/Output: [(42 42 42 42) 42]
Test Case: 145 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 146 | Input/Output: [(67 67 67 67) 67]
Test Case: 147 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 148 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 149 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 150 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 151 | Input/Output: [(19 19 19 19) 19]
Test Case: 152 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 153 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 154 | Input/Output: [(65 65 65 65) 65]
Test Case: 155 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 156 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 157 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 158 | Input/Output: [(28 28 28 28) 28]
Test Case: 159 | Input/Output: [(0 0 0 0) 0]
Test Case: 160 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 161 | Input/Output: [(39 39 39 39) 39]
Test Case: 162 | Input/Output: [(94 94 94 94) 94]
Test Case: 163 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 164 | Input/Output: [(73 73 73 73) 73]
Test Case: 165 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 166 | Input/Output: [(69 69 69 69) 69]
Test Case: 167 | Input/Output: [(53 53 53 53) 53]
Test Case: 168 | Input/Output: [(36 36 36 36) 36]
Test Case: 169 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 170 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 171 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 172 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 173 | Input/Output: [(1 1 1 1) 1]
Test Case: 174 | Input/Output: [(8 8 8 8) 8]
Test Case: 175 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 176 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 177 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 178 | Input/Output: [(25 25 25 25) 25]
Test Case: 179 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 180 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 181 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 182 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 183 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 184 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 185 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 186 | Input/Output: [(58 58 58 58) 58]
Test Case: 187 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 188 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 189 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 190 | Input/Output: [(43 43 43 43) 43]
Test Case: 191 | Input/Output: [(13 13 13 13) 13]
Test Case: 192 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 193 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 194 | Input/Output: [(69 69 69 69) 69]
Test Case: 195 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 196 | Input/Output: [(66 66 66 66) 66]
Test Case: 197 | Input/Output: [(62 62 62 62) 62]
Test Case: 198 | Input/Output: [(94 94 94 94) 94]
Test Case: 199 | Input/Output: [(38 38 38 38) 38]
Test Case: 200 | Input/Output: [(37 42 45 93) 37]
Test Case: 201 | Input/Output: [(99 14 28 5) 5]
Test Case: 202 | Input/Output: [(47 79 75 100) 47]
Test Case: 203 | Input/Output: [(62 1 28 66) 1]
Test Case: 204 | Input/Output: [(72 7 42 78) 7]
Test Case: 205 | Input/Output: [(59 53 80 34) 34]
Test Case: 206 | Input/Output: [(84 89 59 12) 12]
Test Case: 207 | Input/Output: [(5 83 79 24) 5]
Test Case: 208 | Input/Output: [(8 70 26 100) 8]
Test Case: 209 | Input/Output: [(76 98 59 49) 49]
Test Case: 210 | Input/Output: [(40 44 51 55) 40]
Test Case: 211 | Input/Output: [(18 37 60 50) 18]
Test Case: 212 | Input/Output: [(91 68 95 10) 10]
Test Case: 213 | Input/Output: [(50 55 85 38) 38]
Test Case: 214 | Input/Output: [(0 66 76 62) 0]
Test Case: 215 | Input/Output: [(84 3 73 55) 3]
Test Case: 216 | Input/Output: [(69 26 31 15) 15]
Test Case: 217 | Input/Output: [(1 76 23 97) 1]
Test Case: 218 | Input/Output: [(81 12 15 21) 12]
Test Case: 219 | Input/Output: [(58 79 82 81) 58]
Test Case: 220 | Input/Output: [(37 6 50 28) 6]
Test Case: 221 | Input/Output: [(100 57 4 32) 4]
Test Case: 222 | Input/Output: [(55 56 47 95) 47]
Test Case: 223 | Input/Output: [(76 99 12 10) 10]
Test Case: 224 | Input/Output: [(41 7 50 61) 7]
Test Case: 225 | Input/Output: [(56 33 63 82) 33]
Test Case: 226 | Input/Output: [(22 87 72 65) 22]
Test Case: 227 | Input/Output: [(100 3 44 27) 3]
Test Case: 228 | Input/Output: [(19 13 53 32) 13]
Test Case: 229 | Input/Output: [(17 36 79 59) 17]
Test Case: 230 | Input/Output: [(10 38 80 66) 10]
Test Case: 231 | Input/Output: [(37 69 26 7) 7]
Test Case: 232 | Input/Output: [(23 42 71 5) 5]
Test Case: 233 | Input/Output: [(23 54 36 11) 11]
Test Case: 234 | Input/Output: [(34 25 0 64) 0]
Test Case: 235 | Input/Output: [(41 74 5 96) 5]
Test Case: 236 | Input/Output: [(37 65 26 16) 16]
Test Case: 237 | Input/Output: [(68 92 62 21) 21]
Test Case: 238 | Input/Output: [(13 72 39 31) 13]
Test Case: 239 | Input/Output: [(30 96 5 96) 5]
Test Case: 240 | Input/Output: [(66 56 75 13) 13]
Test Case: 241 | Input/Output: [(42 2 83 10) 2]
Test Case: 242 | Input/Output: [(12 82 13 50) 12]
Test Case: 243 | Input/Output: [(2 6 94 72) 2]
Test Case: 244 | Input/Output: [(2 26 54 0) 0]
Test Case: 245 | Input/Output: [(52 8 82 20) 8]
Test Case: 246 | Input/Output: [(38 28 92 14) 14]
Test Case: 247 | Input/Output: [(12 57 37 63) 12]
Test Case: 248 | Input/Output: [(94 22 40 83) 22]
Test Case: 249 | Input/Output: [(31 18 3 30) 3]
Test Case: 250 | Input/Output: [(9 76 20 46) 9]
Test Case: 251 | Input/Output: [(6 86 17 11) 6]
Test Case: 252 | Input/Output: [(88 68 74 98) 68]
Test Case: 253 | Input/Output: [(2 10 12 54) 2]
Test Case: 254 | Input/Output: [(8 35 29 95) 8]
Test Case: 255 | Input/Output: [(74 6 89 48) 6]
Test Case: 256 | Input/Output: [(89 18 53 2) 2]
Test Case: 257 | Input/Output: [(94 89 70 73) 70]
Test Case: 258 | Input/Output: [(27 1 44 63) 1]
Test Case: 259 | Input/Output: [(94 82 31 78) 31]
Test Case: 260 | Input/Output: [(69 86 67 55) 55]
Test Case: 261 | Input/Output: [(62 31 57 82) 31]
Test Case: 262 | Input/Output: [(48 71 99 64) 48]
Test Case: 263 | Input/Output: [(77 43 58 69) 43]
Test Case: 264 | Input/Output: [(58 24 67 98) 24]
Test Case: 265 | Input/Output: [(74 91 43 60) 43]
Test Case: 266 | Input/Output: [(2 93 19 83) 2]
Test Case: 267 | Input/Output: [(39 38 84 98) 38]
Test Case: 268 | Input/Output: [(1 80 65 57) 1]
Test Case: 269 | Input/Output: [(79 88 9 62) 9]
Test Case: 270 | Input/Output: [(58 72 42 75) 42]
Test Case: 271 | Input/Output: [(88 60 78 96) 60]
Test Case: 272 | Input/Output: [(16 32 97 1) 1]
Test Case: 273 | Input/Output: [(2 94 50 65) 2]
Test Case: 274 | Input/Output: [(41 92 11 49) 11]
Test Case: 275 | Input/Output: [(41 85 3 27) 3]
Test Case: 276 | Input/Output: [(9 94 65 91) 9]
Test Case: 277 | Input/Output: [(25 14 35 8) 8]
Test Case: 278 | Input/Output: [(44 52 26 93) 26]
Test Case: 279 | Input/Output: [(8 39 77 76) 8]
Test Case: 280 | Input/Output: [(90 77 16 49) 16]
Test Case: 281 | Input/Output: [(37 31 35 23) 23]
Test Case: 282 | Input/Output: [(76 6 28 29) 6]
Test Case: 283 | Input/Output: [(85 91 5 39) 5]
Test Case: 284 | Input/Output: [(10 91 87 94) 10]
Test Case: 285 | Input/Output: [(37 70 44 16) 16]
Test Case: 286 | Input/Output: [(51 77 87 91) 51]
Test Case: 287 | Input/Output: [(15 58 66 37) 15]
Test Case: 288 | Input/Output: [(91 78 30 54) 30]
Test Case: 289 | Input/Output: [(58 1 10 77) 1]
Test Case: 290 | Input/Output: [(85 65 87 0) 0]
Test Case: 291 | Input/Output: [(39 20 95 27) 20]
Test Case: 292 | Input/Output: [(84 21 32 42) 21]
Test Case: 293 | Input/Output: [(11 46 11 44) 11]
Test Case: 294 | Input/Output: [(74 57 8 60) 8]
Test Case: 295 | Input/Output: [(85 93 49 83) 49]
Test Case: 296 | Input/Output: [(61 99 60 28) 28]
Test Case: 297 | Input/Output: [(16 11 59 87) 11]
Test Case: 298 | Input/Output: [(48 8 3 97) 3]
Test Case: 299 | Input/Output: [(76 73 38 61) 38]
Test Case: 300 | Input/Output: [(21 88 65 16) 16]
Test Case: 301 | Input/Output: [(95 85 73 96) 73]
Test Case: 302 | Input/Output: [(75 41 90 83) 41]
Test Case: 303 | Input/Output: [(36 46 26 77) 26]
Test Case: 304 | Input/Output: [(70 70 9 29) 9]
Test Case: 305 | Input/Output: [(3 27 79 73) 3]
Test Case: 306 | Input/Output: [(75 32 4 48) 4]
Test Case: 307 | Input/Output: [(80 75 15 40) 15]
Test Case: 308 | Input/Output: [(12 72 81 37) 12]
Test Case: 309 | Input/Output: [(28 9 72 15) 9]
Test Case: 310 | Input/Output: [(40 53 82 90) 40]
Test Case: 311 | Input/Output: [(82 78 60 56) 56]
Test Case: 312 | Input/Output: [(35 2 86 79) 2]
Test Case: 313 | Input/Output: [(66 78 71 12) 12]
Test Case: 314 | Input/Output: [(57 5 34 43) 5]
Test Case: 315 | Input/Output: [(12 32 22 91) 12]
Test Case: 316 | Input/Output: [(78 56 20 93) 20]
Test Case: 317 | Input/Output: [(89 35 17 89) 17]
Test Case: 318 | Input/Output: [(64 56 28 46) 28]
Test Case: 319 | Input/Output: [(56 80 2 34) 2]
Test Case: 320 | Input/Output: [(72 59 63 30) 30]
Test Case: 321 | Input/Output: [(47 61 76 55) 47]
Test Case: 322 | Input/Output: [(42 22 60 73) 22]
Test Case: 323 | Input/Output: [(61 22 35 34) 22]
Test Case: 324 | Input/Output: [(29 72 78 49) 29]
Test Case: 325 | Input/Output: [(3 14 5 67) 3]
Test Case: 326 | Input/Output: [(34 42 61 28) 28]
Test Case: 327 | Input/Output: [(21 80 87 93) 21]
Test Case: 328 | Input/Output: [(81 63 24 52) 24]
Test Case: 329 | Input/Output: [(37 94 28 72) 28]
Test Case: 330 | Input/Output: [(72 14 98 53) 14]
Test Case: 331 | Input/Output: [(92 100 23 81) 23]
Test Case: 332 | Input/Output: [(9 37 38 30) 9]
Test Case: 333 | Input/Output: [(24 20 30 2) 2]
Test Case: 334 | Input/Output: [(1 91 22 79) 1]
Test Case: 335 | Input/Output: [(61 66 5 67) 5]
Test Case: 336 | Input/Output: [(43 18 43 93) 18]
Test Case: 337 | Input/Output: [(52 2 73 94) 2]
Test Case: 338 | Input/Output: [(37 28 47 67) 28]
Test Case: 339 | Input/Output: [(92 18 4 58) 4]
Test Case: 340 | Input/Output: [(55 48 78 80) 48]
Test Case: 341 | Input/Output: [(30 52 44 14) 14]
Test Case: 342 | Input/Output: [(95 6 70 41) 6]
Test Case: 343 | Input/Output: [(94 50 6 87) 6]
Test Case: 344 | Input/Output: [(54 95 68 86) 54]
Test Case: 345 | Input/Output: [(29 10 21 95) 10]
Test Case: 346 | Input/Output: [(60 8 11 59) 8]
Test Case: 347 | Input/Output: [(41 18 96 4) 4]
Test Case: 348 | Input/Output: [(66 68 10 1) 1]
Test Case: 349 | Input/Output: [(89 73 54 69) 54]
Test Case: 350 | Input/Output: [(58 9 96 75) 9]
Test Case: 351 | Input/Output: [(63 94 98 33) 33]
Test Case: 352 | Input/Output: [(11 87 4 57) 4]
Test Case: 353 | Input/Output: [(20 81 95 25) 20]
Test Case: 354 | Input/Output: [(31 35 4 65) 4]
Test Case: 355 | Input/Output: [(48 17 14 31) 14]
Test Case: 356 | Input/Output: [(31 58 65 39) 31]
Test Case: 357 | Input/Output: [(62 43 85 80) 43]
Test Case: 358 | Input/Output: [(94 27 13 41) 13]
Test Case: 359 | Input/Output: [(79 36 71 47) 36]
Test Case: 360 | Input/Output: [(70 79 48 75) 48]
Test Case: 361 | Input/Output: [(33 31 45 35) 31]
Test Case: 362 | Input/Output: [(58 0 80 41) 0]
Test Case: 363 | Input/Output: [(27 65 43 26) 26]
Test Case: 364 | Input/Output: [(81 11 53 79) 11]
Test Case: 365 | Input/Output: [(78 3 68 12) 3]
Test Case: 366 | Input/Output: [(62 72 20 83) 20]
Test Case: 367 | Input/Output: [(90 6 29 95) 6]
Test Case: 368 | Input/Output: [(94 85 26 46) 26]
Test Case: 369 | Input/Output: [(46 43 0 40) 0]
Test Case: 370 | Input/Output: [(91 34 11 67) 11]
Test Case: 371 | Input/Output: [(84 8 3 73) 3]
Test Case: 372 | Input/Output: [(20 31 82 79) 20]
Test Case: 373 | Input/Output: [(89 51 38 47) 38]
Test Case: 374 | Input/Output: [(91 32 75 22) 22]
Test Case: 375 | Input/Output: [(54 3 36 9) 3]
Test Case: 376 | Input/Output: [(100 18 22 93) 18]
Test Case: 377 | Input/Output: [(92 46 5 91) 5]
Test Case: 378 | Input/Output: [(88 67 100 38) 38]
Test Case: 379 | Input/Output: [(95 71 10 55) 10]
Test Case: 380 | Input/Output: [(86 8 62 18) 8]
Test Case: 381 | Input/Output: [(94 17 10 63) 10]
Test Case: 382 | Input/Output: [(33 63 6 12) 6]
Test Case: 383 | Input/Output: [(16 39 63 45) 16]
Test Case: 384 | Input/Output: [(36 85 13 80) 13]
Test Case: 385 | Input/Output: [(56 32 61 55) 32]
Test Case: 386 | Input/Output: [(18 18 71 37) 18]
Test Case: 387 | Input/Output: [(17 92 13 23) 13]
Test Case: 388 | Input/Output: [(41 53 56 87) 41]
Test Case: 389 | Input/Output: [(74 42 47 50) 42]
Test Case: 390 | Input/Output: [(7 11 23 31) 7]
Test Case: 391 | Input/Output: [(2 77 74 53) 2]
Test Case: 392 | Input/Output: [(74 1 22 47) 1]
Test Case: 393 | Input/Output: [(19 52 25 94) 19]
Test Case: 394 | Input/Output: [(47 57 41 96) 41]
Test Case: 395 | Input/Output: [(94 6 57 72) 6]
Test Case: 396 | Input/Output: [(94 77 88 93) 77]
Test Case: 397 | Input/Output: [(19 98 68 90) 19]
Test Case: 398 | Input/Output: [(71 34 38 76) 34]
Test Case: 399 | Input/Output: [(84 62 96 4) 4]
Test Case: 400 | Input/Output: [(-12 70 26 -36) -36]
Test Case: 401 | Input/Output: [(-59 -82 93 -7) -82]
Test Case: 402 | Input/Output: [(-35 60 2 -46) -46]
Test Case: 403 | Input/Output: [(-70 -7 29 72) -70]
Test Case: 404 | Input/Output: [(34 78 -34 -85) -85]
Test Case: 405 | Input/Output: [(42 52 -41 -40) -41]
Test Case: 406 | Input/Output: [(92 4 -79 -35) -79]
Test Case: 407 | Input/Output: [(-90 -70 37 6) -90]
Test Case: 408 | Input/Output: [(-84 63 -89 24) -89]
Test Case: 409 | Input/Output: [(47 3 -7 -54) -54]
Test Case: 410 | Input/Output: [(-86 4 -67 -6) -86]
Test Case: 411 | Input/Output: [(-87 -35 -42 81) -87]
Test Case: 412 | Input/Output: [(-88 -97 -89 -82) -97]
Test Case: 413 | Input/Output: [(86 -89 -51 65) -89]
Test Case: 414 | Input/Output: [(24 69 70 45) 24]
Test Case: 415 | Input/Output: [(-2 -38 -81 26) -81]
Test Case: 416 | Input/Output: [(-40 81 12 -80) -80]
Test Case: 417 | Input/Output: [(-30 -58 -4 74) -58]
Test Case: 418 | Input/Output: [(-98 2 -51 61) -98]
Test Case: 419 | Input/Output: [(-26 17 -82 -27) -82]
Test Case: 420 | Input/Output: [(68 1 -93 6) -93]
Test Case: 421 | Input/Output: [(80 67 12 78) 12]
Test Case: 422 | Input/Output: [(-10 -23 -91 55) -91]
Test Case: 423 | Input/Output: [(-98 60 -13 61) -98]
Test Case: 424 | Input/Output: [(-59 7 5 8) -59]
Test Case: 425 | Input/Output: [(-77 60 -30 -8) -77]
Test Case: 426 | Input/Output: [(32 75 71 -9) -9]
Test Case: 427 | Input/Output: [(-86 54 -37 -14) -86]
Test Case: 428 | Input/Output: [(-5 80 12 -65) -65]
Test Case: 429 | Input/Output: [(62 17 9 -71) -71]
Test Case: 430 | Input/Output: [(-86 72 31 -76) -86]
Test Case: 431 | Input/Output: [(-37 -81 33 -34) -81]
Test Case: 432 | Input/Output: [(62 43 6 -49) -49]
Test Case: 433 | Input/Output: [(77 32 -88 37) -88]
Test Case: 434 | Input/Output: [(32 14 96 -68) -68]
Test Case: 435 | Input/Output: [(72 94 -78 68) -78]
Test Case: 436 | Input/Output: [(-26 -73 -64 -76) -76]
Test Case: 437 | Input/Output: [(-50 -97 100 -12) -97]
Test Case: 438 | Input/Output: [(-14 -50 59 23) -50]
Test Case: 439 | Input/Output: [(-49 21 -85 -53) -85]
Test Case: 440 | Input/Output: [(-83 80 -5 -65) -83]
Test Case: 441 | Input/Output: [(88 54 1 6) 1]
Test Case: 442 | Input/Output: [(64 -81 -77 26) -81]
Test Case: 443 | Input/Output: [(65 -85 25 91) -85]
Test Case: 444 | Input/Output: [(82 -41 53 26) -41]
Test Case: 445 | Input/Output: [(-66 31 -71 -45) -71]
Test Case: 446 | Input/Output: [(90 7 74 -66) -66]
Test Case: 447 | Input/Output: [(-93 99 -75 -66) -93]
Test Case: 448 | Input/Output: [(19 38 87 -50) -50]
Test Case: 449 | Input/Output: [(55 46 -15 -3) -15]
Test Case: 450 | Input/Output: [(-23 -99 69 -18) -99]
Test Case: 451 | Input/Output: [(-22 77 77 -72) -72]
Test Case: 452 | Input/Output: [(88 -79 -47 -10) -79]
Test Case: 453 | Input/Output: [(-67 -67 -90 -11) -90]
Test Case: 454 | Input/Output: [(39 -70 -93 31) -93]
Test Case: 455 | Input/Output: [(2 54 -49 35) -49]
Test Case: 456 | Input/Output: [(-90 10 -81 -100) -100]
Test Case: 457 | Input/Output: [(-78 -46 93 23) -78]
Test Case: 458 | Input/Output: [(29 -55 -70 -85) -85]
Test Case: 459 | Input/Output: [(-69 61 57 -83) -83]
Test Case: 460 | Input/Output: [(-67 3 76 -96) -96]
Test Case: 461 | Input/Output: [(66 60 -4 18) -4]
Test Case: 462 | Input/Output: [(17 5 23 34) 5]
Test Case: 463 | Input/Output: [(95 -10 71 46) -10]
Test Case: 464 | Input/Output: [(-28 75 82 -65) -65]
Test Case: 465 | Input/Output: [(58 21 -92 97) -92]
Test Case: 466 | Input/Output: [(-55 -78 1 -9) -78]
Test Case: 467 | Input/Output: [(-56 -39 -66 -4) -66]
Test Case: 468 | Input/Output: [(20 36 -47 79) -47]
Test Case: 469 | Input/Output: [(17 -33 90 -51) -51]
Test Case: 470 | Input/Output: [(-3 -52 11 17) -52]
Test Case: 471 | Input/Output: [(76 5 -18 -47) -47]
Test Case: 472 | Input/Output: [(100 -87 30 20) -87]
Test Case: 473 | Input/Output: [(-83 -59 -31 -72) -83]
Test Case: 474 | Input/Output: [(-98 -67 -56 17) -98]
Test Case: 475 | Input/Output: [(-56 -92 84 -63) -92]
Test Case: 476 | Input/Output: [(-34 19 -36 -53) -53]
Test Case: 477 | Input/Output: [(-2 87 -4 -24) -24]
Test Case: 478 | Input/Output: [(-34 92 82 15) -34]
Test Case: 479 | Input/Output: [(-79 98 -82 94) -82]
Test Case: 480 | Input/Output: [(78 -92 -14 -7) -92]
Test Case: 481 | Input/Output: [(9 2 39 72) 2]
Test Case: 482 | Input/Output: [(24 -19 -97 -86) -97]
Test Case: 483 | Input/Output: [(51 -81 -100 -66) -100]
Test Case: 484 | Input/Output: [(-80 -12 15 78) -80]
Test Case: 485 | Input/Output: [(-95 83 -98 -44) -98]
Test Case: 486 | Input/Output: [(80 83 -83 -49) -83]
Test Case: 487 | Input/Output: [(-53 43 74 -96) -96]
Test Case: 488 | Input/Output: [(-5 -72 -25 -1) -72]
Test Case: 489 | Input/Output: [(55 28 -78 -42) -78]
Test Case: 490 | Input/Output: [(52 63 84 -27) -27]
Test Case: 491 | Input/Output: [(-73 7 -37 -2) -73]
Test Case: 492 | Input/Output: [(-6 3 78 -23) -23]
Test Case: 493 | Input/Output: [(-44 95 -4 -98) -98]
Test Case: 494 | Input/Output: [(65 -38 29 24) -38]
Test Case: 495 | Input/Output: [(-87 -60 -57 88) -87]
Test Case: 496 | Input/Output: [(58 78 89 -9) -9]
Test Case: 497 | Input/Output: [(24 75 -71 -97) -97]
Test Case: 498 | Input/Output: [(-23 -65 -52 98) -65]
Test Case: 499 | Input/Output: [(54 -97 25 -60) -97]
Test Case: 500 | Input/Output: [(-99 55 -61 -95) -99]
Test Case: 501 | Input/Output: [(10 72 66 -6) -6]
Test Case: 502 | Input/Output: [(19 85 -61 56) -61]
Test Case: 503 | Input/Output: [(-14 79 -81 33) -81]
Test Case: 504 | Input/Output: [(-75 -21 -65 -73) -75]
Test Case: 505 | Input/Output: [(-98 35 95 75) -98]
Test Case: 506 | Input/Output: [(-73 62 -49 5) -73]
Test Case: 507 | Input/Output: [(-13 8 13 73) -13]
Test Case: 508 | Input/Output: [(76 -24 -42 2) -42]
Test Case: 509 | Input/Output: [(30 -74 35 -18) -74]
Test Case: 510 | Input/Output: [(2 98 -75 -59) -75]
Test Case: 511 | Input/Output: [(-99 -57 49 3) -99]
Test Case: 512 | Input/Output: [(40 35 98 81) 35]
Test Case: 513 | Input/Output: [(52 -98 6 17) -98]
Test Case: 514 | Input/Output: [(74 -15 -18 70) -18]
Test Case: 515 | Input/Output: [(-10 -9 9 -39) -39]
Test Case: 516 | Input/Output: [(-32 -20 -1 36) -32]
Test Case: 517 | Input/Output: [(12 42 26 84) 12]
Test Case: 518 | Input/Output: [(-24 -73 -88 -75) -88]
Test Case: 519 | Input/Output: [(77 18 -61 -15) -61]
Test Case: 520 | Input/Output: [(-78 -94 -28 32) -94]
Test Case: 521 | Input/Output: [(-24 -74 -42 -72) -74]
Test Case: 522 | Input/Output: [(49 -65 -86 -52) -86]
Test Case: 523 | Input/Output: [(-13 51 35 -72) -72]
Test Case: 524 | Input/Output: [(48 -64 -57 51) -64]
Test Case: 525 | Input/Output: [(-65 -76 -44 -68) -76]
Test Case: 526 | Input/Output: [(14 30 97 56) 14]
Test Case: 527 | Input/Output: [(80 -20 13 73) -20]
Test Case: 528 | Input/Output: [(19 -52 76 82) -52]
Test Case: 529 | Input/Output: [(96 46 -63 66) -63]
Test Case: 530 | Input/Output: [(-46 40 55 -95) -95]
Test Case: 531 | Input/Output: [(50 -12 9 43) -12]
Test Case: 532 | Input/Output: [(33 -46 -19 53) -46]
Test Case: 533 | Input/Output: [(-28 38 81 -91) -91]
Test Case: 534 | Input/Output: [(71 83 -43 -14) -43]
Test Case: 535 | Input/Output: [(76 -77 -21 13) -77]
Test Case: 536 | Input/Output: [(-92 12 -26 39) -92]
Test Case: 537 | Input/Output: [(77 -52 44 -79) -79]
Test Case: 538 | Input/Output: [(28 -85 -61 -15) -85]
Test Case: 539 | Input/Output: [(-23 10 81 -49) -49]
Test Case: 540 | Input/Output: [(-23 -54 -32 -87) -87]
Test Case: 541 | Input/Output: [(-85 -3 -90 16) -90]
Test Case: 542 | Input/Output: [(61 51 33 70) 33]
Test Case: 543 | Input/Output: [(1 -38 34 -94) -94]
Test Case: 544 | Input/Output: [(-14 13 -6 -13) -14]
Test Case: 545 | Input/Output: [(-72 45 -63 34) -72]
Test Case: 546 | Input/Output: [(-14 32 -9 91) -14]
Test Case: 547 | Input/Output: [(45 -30 -60 -84) -84]
Test Case: 548 | Input/Output: [(91 4 97 -14) -14]
Test Case: 549 | Input/Output: [(81 -42 -52 93) -52]
Test Case: 550 | Input/Output: [(90 -68 -64 22) -68]
Test Case: 551 | Input/Output: [(29 2 -88 -7) -88]
Test Case: 552 | Input/Output: [(-18 43 -17 -83) -83]
Test Case: 553 | Input/Output: [(-91 -82 -37 82) -91]
Test Case: 554 | Input/Output: [(-2 24 -43 -84) -84]
Test Case: 555 | Input/Output: [(-49 9 14 -89) -89]
Test Case: 556 | Input/Output: [(23 62 -2 -68) -68]
Test Case: 557 | Input/Output: [(-8 65 -23 -35) -35]
Test Case: 558 | Input/Output: [(-54 71 -32 59) -54]
Test Case: 559 | Input/Output: [(34 23 -76 77) -76]
Test Case: 560 | Input/Output: [(-62 18 100 -82) -82]
Test Case: 561 | Input/Output: [(49 38 -4 -52) -52]
Test Case: 562 | Input/Output: [(70 -46 -78 60) -78]
Test Case: 563 | Input/Output: [(-37 35 6 57) -37]
Test Case: 564 | Input/Output: [(-92 61 -94 -46) -94]
Test Case: 565 | Input/Output: [(-80 -58 46 -59) -80]
Test Case: 566 | Input/Output: [(-28 93 42 -60) -60]
Test Case: 567 | Input/Output: [(-92 -88 -73 16) -92]
Test Case: 568 | Input/Output: [(-87 -45 -95 97) -95]
Test Case: 569 | Input/Output: [(-17 -46 -5 -73) -73]
Test Case: 570 | Input/Output: [(-31 98 7 -46) -46]
Test Case: 571 | Input/Output: [(-11 -93 11 -52) -93]
Test Case: 572 | Input/Output: [(-9 -7 14 9) -9]
Test Case: 573 | Input/Output: [(62 -39 -47 -61) -61]
Test Case: 574 | Input/Output: [(12 -86 -45 65) -86]
Test Case: 575 | Input/Output: [(-54 -19 -7 77) -54]
Test Case: 576 | Input/Output: [(36 -17 -51 -47) -51]
Test Case: 577 | Input/Output: [(43 3 -93 -31) -93]
Test Case: 578 | Input/Output: [(-47 -64 37 -1) -64]
Test Case: 579 | Input/Output: [(73 -83 -26 -26) -83]
Test Case: 580 | Input/Output: [(48 61 -100 41) -100]
Test Case: 581 | Input/Output: [(21 -29 40 -49) -49]
Test Case: 582 | Input/Output: [(-90 85 29 -82) -90]
Test Case: 583 | Input/Output: [(73 85 92 -29) -29]
Test Case: 584 | Input/Output: [(-63 75 19 -53) -63]
Test Case: 585 | Input/Output: [(-27 89 32 -28) -28]
Test Case: 586 | Input/Output: [(-73 93 5 -41) -73]
Test Case: 587 | Input/Output: [(9 28 -87 0) -87]
Test Case: 588 | Input/Output: [(-61 1 98 44) -61]
Test Case: 589 | Input/Output: [(84 -45 -87 27) -87]
Test Case: 590 | Input/Output: [(-45 29 39 82) -45]
Test Case: 591 | Input/Output: [(8 12 91 44) 8]
Test Case: 592 | Input/Output: [(15 26 -54 -69) -69]
Test Case: 593 | Input/Output: [(-46 14 56 -6) -46]
Test Case: 594 | Input/Output: [(67 -67 -47 -32) -67]
Test Case: 595 | Input/Output: [(93 25 -20 -97) -97]
Test Case: 596 | Input/Output: [(26 27 59 4) 4]
Test Case: 597 | Input/Output: [(35 25 39 -10) -10]
Test Case: 598 | Input/Output: [(-32 22 -94 -89) -94]
Test Case: 599 | Input/Output: [(-40 40 -69 -60) -69]
Test Case: 600 | Input/Output: [(-65 -63 -44 -62) -65]
Test Case: 601 | Input/Output: [(-71 18 43 41) -71]
Test Case: 602 | Input/Output: [(-63 62 51 -12) -63]
Test Case: 603 | Input/Output: [(16 -6 13 -15) -15]
Test Case: 604 | Input/Output: [(21 -48 -25 100) -48]
Test Case: 605 | Input/Output: [(-81 56 -2 82) -81]
Test Case: 606 | Input/Output: [(75 69 46 -99) -99]
Test Case: 607 | Input/Output: [(18 57 -85 -10) -85]
Test Case: 608 | Input/Output: [(45 -48 -30 -83) -83]
Test Case: 609 | Input/Output: [(2 -73 27 -9) -73]
Test Case: 610 | Input/Output: [(86 -15 -66 -10) -66]
Test Case: 611 | Input/Output: [(-10 10 70 21) -10]
Test Case: 612 | Input/Output: [(75 -87 41 -27) -87]
Test Case: 613 | Input/Output: [(84 18 -69 -33) -69]
Test Case: 614 | Input/Output: [(-48 -82 -98 -29) -98]
Test Case: 615 | Input/Output: [(-71 -44 -66 -18) -71]
Test Case: 616 | Input/Output: [(-67 -26 -23 68) -67]
Test Case: 617 | Input/Output: [(33 -76 -72 -80) -80]
Test Case: 618 | Input/Output: [(-99 74 87 25) -99]
Test Case: 619 | Input/Output: [(-6 -58 92 65) -58]
Test Case: 620 | Input/Output: [(-3 -96 20 30) -96]
Test Case: 621 | Input/Output: [(95 89 76 18) 18]
Test Case: 622 | Input/Output: [(-43 39 -80 -44) -80]
Test Case: 623 | Input/Output: [(60 -87 75 81) -87]
Test Case: 624 | Input/Output: [(-86 100 -84 11) -86]
Test Case: 625 | Input/Output: [(76 -33 73 89) -33]
Test Case: 626 | Input/Output: [(-27 -24 -82 -19) -82]
Test Case: 627 | Input/Output: [(54 37 72 26) 26]
Test Case: 628 | Input/Output: [(-47 -37 -16 -21) -47]
Test Case: 629 | Input/Output: [(-81 12 -53 -19) -81]
Test Case: 630 | Input/Output: [(-93 -47 89 59) -93]
Test Case: 631 | Input/Output: [(77 11 93 -58) -58]
Test Case: 632 | Input/Output: [(-26 67 30 -72) -72]
Test Case: 633 | Input/Output: [(-36 46 58 57) -36]
Test Case: 634 | Input/Output: [(-29 -56 100 92) -56]
Test Case: 635 | Input/Output: [(68 -85 -27 57) -85]
Test Case: 636 | Input/Output: [(-24 -69 81 28) -69]
Test Case: 637 | Input/Output: [(86 -80 70 74) -80]
Test Case: 638 | Input/Output: [(-27 23 -88 -11) -88]
Test Case: 639 | Input/Output: [(-59 -33 -70 -57) -70]
Test Case: 640 | Input/Output: [(-52 18 -61 -60) -61]
Test Case: 641 | Input/Output: [(90 -14 -95 26) -95]
Test Case: 642 | Input/Output: [(16 82 36 61) 16]
Test Case: 643 | Input/Output: [(-38 9 -13 -52) -52]
Test Case: 644 | Input/Output: [(-55 -18 59 79) -55]
Test Case: 645 | Input/Output: [(59 17 -61 -36) -61]
Test Case: 646 | Input/Output: [(87 34 77 8) 8]
Test Case: 647 | Input/Output: [(-4 73 -85 -95) -95]
Test Case: 648 | Input/Output: [(-34 11 -27 -94) -94]
Test Case: 649 | Input/Output: [(-2 -18 77 74) -18]
Test Case: 650 | Input/Output: [(2 -50 75 32) -50]
Test Case: 651 | Input/Output: [(-65 36 75 -22) -65]
Test Case: 652 | Input/Output: [(-56 3 35 -35) -56]
Test Case: 653 | Input/Output: [(-72 -37 36 -5) -72]
Test Case: 654 | Input/Output: [(81 48 -78 -35) -78]
Test Case: 655 | Input/Output: [(55 -41 -30 38) -41]
Test Case: 656 | Input/Output: [(32 39 60 91) 32]
Test Case: 657 | Input/Output: [(-68 -81 82 -89) -89]
Test Case: 658 | Input/Output: [(14 79 55 -91) -91]
Test Case: 659 | Input/Output: [(-16 7 -35 68) -35]
Test Case: 660 | Input/Output: [(-53 -24 57 -21) -53]
Test Case: 661 | Input/Output: [(-31 -94 15 25) -94]
Test Case: 662 | Input/Output: [(-81 2 67 94) -81]
Test Case: 663 | Input/Output: [(-86 -1 81 39) -86]
Test Case: 664 | Input/Output: [(-54 -52 -17 -95) -95]
Test Case: 665 | Input/Output: [(-40 -4 5 -97) -97]
Test Case: 666 | Input/Output: [(74 67 -33 5) -33]
Test Case: 667 | Input/Output: [(37 71 -73 -2) -73]
Test Case: 668 | Input/Output: [(18 -82 12 -7) -82]
Test Case: 669 | Input/Output: [(-92 -52 25 -52) -92]
Test Case: 670 | Input/Output: [(55 22 88 -23) -23]
Test Case: 671 | Input/Output: [(52 73 29 -61) -61]
Test Case: 672 | Input/Output: [(44 3 -77 23) -77]
Test Case: 673 | Input/Output: [(-40 -92 -63 -58) -92]
Test Case: 674 | Input/Output: [(-92 -59 90 -94) -94]
Test Case: 675 | Input/Output: [(-100 98 -13 66) -100]
Test Case: 676 | Input/Output: [(-29 -70 63 15) -70]
Test Case: 677 | Input/Output: [(14 -78 48 -81) -81]
Test Case: 678 | Input/Output: [(82 -76 -76 -50) -76]
Test Case: 679 | Input/Output: [(-7 -33 15 -46) -46]
Test Case: 680 | Input/Output: [(11 -56 -73 41) -73]
Test Case: 681 | Input/Output: [(-55 81 91 -45) -55]
Test Case: 682 | Input/Output: [(-96 -70 -52 89) -96]
Test Case: 683 | Input/Output: [(-51 -73 6 -36) -73]
Test Case: 684 | Input/Output: [(38 -21 -52 60) -52]
Test Case: 685 | Input/Output: [(-60 -17 -89 -17) -89]
Test Case: 686 | Input/Output: [(47 90 -81 -93) -93]
Test Case: 687 | Input/Output: [(70 -16 -9 93) -16]
Test Case: 688 | Input/Output: [(-16 -39 -26 -47) -47]
Test Case: 689 | Input/Output: [(27 59 35 -81) -81]
Test Case: 690 | Input/Output: [(85 -68 86 85) -68]
Test Case: 691 | Input/Output: [(83 15 -91 -17) -91]
Test Case: 692 | Input/Output: [(54 -90 -21 -62) -90]
Test Case: 693 | Input/Output: [(57 -55 -46 -30) -55]
Test Case: 694 | Input/Output: [(-53 -11 -31 -21) -53]
Test Case: 695 | Input/Output: [(72 6 -16 -37) -37]
Test Case: 696 | Input/Output: [(-14 53 93 -2) -14]
Test Case: 697 | Input/Output: [(-18 81 86 -62) -62]
Test Case: 698 | Input/Output: [(-92 -60 61 21) -92]
Test Case: 699 | Input/Output: [(-69 76 -75 -28) -75]
Test Case: 700 | Input/Output: [(41 92 92 47) 41]
Test Case: 701 | Input/Output: [(-63 71 -59 99) -63]
Test Case: 702 | Input/Output: [(-36 -87 22 29) -87]
Test Case: 703 | Input/Output: [(81 -75 -37 -70) -75]
Test Case: 704 | Input/Output: [(62 87 -18 -1) -18]
Test Case: 705 | Input/Output: [(-31 19 -31 -7) -31]
Test Case: 706 | Input/Output: [(48 72 95 3) 3]
Test Case: 707 | Input/Output: [(-75 87 100 20) -75]
Test Case: 708 | Input/Output: [(-86 -58 -66 -8) -86]
Test Case: 709 | Input/Output: [(57 89 -26 50) -26]
Test Case: 710 | Input/Output: [(-68 4 -16 -100) -100]
Test Case: 711 | Input/Output: [(-38 -28 -27 -47) -47]
Test Case: 712 | Input/Output: [(-74 -21 35 -63) -74]
Test Case: 713 | Input/Output: [(25 62 -12 -42) -42]
Test Case: 714 | Input/Output: [(-71 -90 -26 9) -90]
Test Case: 715 | Input/Output: [(-55 80 -37 -90) -90]
Test Case: 716 | Input/Output: [(-14 69 0 31) -14]
Test Case: 717 | Input/Output: [(5 -7 -76 13) -76]
Test Case: 718 | Input/Output: [(63 -6 -20 65) -20]
Test Case: 719 | Input/Output: [(-33 78 89 -87) -87]
Test Case: 720 | Input/Output: [(48 45 -6 -41) -41]
Test Case: 721 | Input/Output: [(-38 80 -100 -14) -100]
Test Case: 722 | Input/Output: [(-51 -92 -75 73) -92]
Test Case: 723 | Input/Output: [(46 53 -91 67) -91]
Test Case: 724 | Input/Output: [(48 -12 36 41) -12]
Test Case: 725 | Input/Output: [(96 28 95 88) 28]
Test Case: 726 | Input/Output: [(-67 70 -15 34) -67]
Test Case: 727 | Input/Output: [(-75 -92 -70 -28) -92]
Test Case: 728 | Input/Output: [(-38 -10 -68 92) -68]
Test Case: 729 | Input/Output: [(-56 -43 44 -26) -56]
Test Case: 730 | Input/Output: [(-89 91 -37 45) -89]
Test Case: 731 | Input/Output: [(84 -66 15 88) -66]
Test Case: 732 | Input/Output: [(-38 45 10 15) -38]
Test Case: 733 | Input/Output: [(-4 -23 -60 58) -60]
Test Case: 734 | Input/Output: [(-66 -7 -31 -91) -91]
Test Case: 735 | Input/Output: [(-9 -71 0 -22) -71]
Test Case: 736 | Input/Output: [(-83 83 -87 -32) -87]
Test Case: 737 | Input/Output: [(93 24 64 43) 24]
Test Case: 738 | Input/Output: [(91 -91 89 -5) -91]
Test Case: 739 | Input/Output: [(-73 94 -95 -69) -95]
Test Case: 740 | Input/Output: [(73 -79 22 57) -79]
Test Case: 741 | Input/Output: [(47 -86 -93 -35) -93]
Test Case: 742 | Input/Output: [(-88 -92 78 16) -92]
Test Case: 743 | Input/Output: [(-58 -95 28 17) -95]
Test Case: 744 | Input/Output: [(-15 90 45 -96) -96]
Test Case: 745 | Input/Output: [(-24 20 35 -7) -24]
Test Case: 746 | Input/Output: [(26 3 -75 37) -75]
Test Case: 747 | Input/Output: [(-62 -25 86 -90) -90]
Test Case: 748 | Input/Output: [(-82 85 -75 8) -82]
Test Case: 749 | Input/Output: [(-80 -82 -43 -65) -82]
Test Case: 750 | Input/Output: [(58 100 3 -42) -42]
Test Case: 751 | Input/Output: [(32 32 -8 -78) -78]
Test Case: 752 | Input/Output: [(23 -18 -63 67) -63]
Test Case: 753 | Input/Output: [(-28 -15 -87 49) -87]
Test Case: 754 | Input/Output: [(-60 94 -37 12) -60]
Test Case: 755 | Input/Output: [(28 -97 98 -2) -97]
Test Case: 756 | Input/Output: [(6 -62 -96 61) -96]
Test Case: 757 | Input/Output: [(-35 -11 30 71) -35]
Test Case: 758 | Input/Output: [(-11 -55 65 34) -55]
Test Case: 759 | Input/Output: [(44 -69 -25 -75) -75]
Test Case: 760 | Input/Output: [(22 13 -90 -39) -90]
Test Case: 761 | Input/Output: [(81 -52 96 -61) -61]
Test Case: 762 | Input/Output: [(-34 42 38 35) -34]
Test Case: 763 | Input/Output: [(-75 -88 33 -45) -88]
Test Case: 764 | Input/Output: [(-20 97 44 56) -20]
Test Case: 765 | Input/Output: [(51 -31 23 -100) -100]
Test Case: 766 | Input/Output: [(76 -61 37 -15) -61]
Test Case: 767 | Input/Output: [(-48 -71 76 64) -71]
Test Case: 768 | Input/Output: [(16 -22 -90 -14) -90]
Test Case: 769 | Input/Output: [(12 -23 66 -6) -23]
Test Case: 770 | Input/Output: [(69 -15 -8 -6) -15]
Test Case: 771 | Input/Output: [(-96 49 99 -15) -96]
Test Case: 772 | Input/Output: [(-62 -6 35 5) -62]
Test Case: 773 | Input/Output: [(76 -98 -35 -60) -98]
Test Case: 774 | Input/Output: [(-55 -60 66 3) -60]
Test Case: 775 | Input/Output: [(-34 89 28 82) -34]
Test Case: 776 | Input/Output: [(25 0 -86 63) -86]
Test Case: 777 | Input/Output: [(-3 65 88 -98) -98]
Test Case: 778 | Input/Output: [(-88 50 -74 -7) -88]
Test Case: 779 | Input/Output: [(50 -73 -7 -16) -73]
Test Case: 780 | Input/Output: [(34 -78 -73 -68) -78]
Test Case: 781 | Input/Output: [(4 -68 -79 -82) -82]
Test Case: 782 | Input/Output: [(2 -41 89 79) -41]
Test Case: 783 | Input/Output: [(-39 -79 94 -1) -79]
Test Case: 784 | Input/Output: [(95 -8 -77 -83) -83]
Test Case: 785 | Input/Output: [(0 95 77 -54) -54]
Test Case: 786 | Input/Output: [(-39 85 62 8) -39]
Test Case: 787 | Input/Output: [(-28 -62 5 -90) -90]
Test Case: 788 | Input/Output: [(55 6 95 16) 6]
Test Case: 789 | Input/Output: [(5 43 -56 44) -56]
Test Case: 790 | Input/Output: [(39 -8 39 18) -8]
Test Case: 791 | Input/Output: [(41 -23 -82 10) -82]
Test Case: 792 | Input/Output: [(30 -36 18 33) -36]
Test Case: 793 | Input/Output: [(85 85 -94 92) -94]
Test Case: 794 | Input/Output: [(33 -36 -34 49) -36]
Test Case: 795 | Input/Output: [(30 2 13 57) 2]
Test Case: 796 | Input/Output: [(58 -39 -59 55) -59]
Test Case: 797 | Input/Output: [(89 27 -37 -45) -45]
Test Case: 798 | Input/Output: [(-94 2 63 -78) -94]
Test Case: 799 | Input/Output: [(100 92 57 -78) -78]
Test Case: 800 | Input/Output: [(44 -8 -76 34) -76]
Test Case: 801 | Input/Output: [(-79 -91 86 -48) -91]
Test Case: 802 | Input/Output: [(37 31 3 -35) -35]
Test Case: 803 | Input/Output: [(-73 2 -35 -89) -89]
Test Case: 804 | Input/Output: [(-55 -69 -40 -36) -69]
Test Case: 805 | Input/Output: [(99 26 47 -34) -34]
Test Case: 806 | Input/Output: [(95 -52 13 -95) -95]
Test Case: 807 | Input/Output: [(-87 34 -52 -26) -87]
Test Case: 808 | Input/Output: [(73 88 88 -48) -48]
Test Case: 809 | Input/Output: [(-50 82 -53 2) -53]
Test Case: 810 | Input/Output: [(-73 28 69 -18) -73]
Test Case: 811 | Input/Output: [(81 36 -11 45) -11]
Test Case: 812 | Input/Output: [(-82 -35 -90 -89) -90]
Test Case: 813 | Input/Output: [(86 33 57 -47) -47]
Test Case: 814 | Input/Output: [(-14 -79 -24 -74) -79]
Test Case: 815 | Input/Output: [(-46 41 -43 -48) -48]
Test Case: 816 | Input/Output: [(-65 -64 69 66) -65]
Test Case: 817 | Input/Output: [(-23 89 71 89) -23]
Test Case: 818 | Input/Output: [(100 63 -47 -47) -47]
Test Case: 819 | Input/Output: [(43 -87 -71 -53) -87]
Test Case: 820 | Input/Output: [(29 -16 41 10) -16]
Test Case: 821 | Input/Output: [(-5 86 45 -74) -74]
Test Case: 822 | Input/Output: [(-39 25 75 26) -39]
Test Case: 823 | Input/Output: [(-88 -95 89 23) -95]
Test Case: 824 | Input/Output: [(-47 -60 6 49) -60]
Test Case: 825 | Input/Output: [(-2 5 63 -2) -2]
Test Case: 826 | Input/Output: [(-90 5 -32 41) -90]
Test Case: 827 | Input/Output: [(25 -89 68 10) -89]
Test Case: 828 | Input/Output: [(-57 13 -97 1) -97]
Test Case: 829 | Input/Output: [(-62 -5 94 -94) -94]
Test Case: 830 | Input/Output: [(82 97 63 -78) -78]
Test Case: 831 | Input/Output: [(-3 -4 -16 6) -16]
Test Case: 832 | Input/Output: [(79 22 -97 37) -97]
Test Case: 833 | Input/Output: [(14 -57 -85 -67) -85]
Test Case: 834 | Input/Output: [(75 29 74 -22) -22]
Test Case: 835 | Input/Output: [(88 36 30 4) 4]
Test Case: 836 | Input/Output: [(-95 -46 -89 81) -95]
Test Case: 837 | Input/Output: [(83 29 54 68) 29]
Test Case: 838 | Input/Output: [(29 -94 64 -39) -94]
Test Case: 839 | Input/Output: [(-66 -32 9 -97) -97]
Test Case: 840 | Input/Output: [(-2 -65 -53 44) -65]
Test Case: 841 | Input/Output: [(-18 -92 61 -90) -92]
Test Case: 842 | Input/Output: [(89 9 -35 39) -35]
Test Case: 843 | Input/Output: [(20 70 52 29) 20]
Test Case: 844 | Input/Output: [(-51 -19 -14 -35) -51]
Test Case: 845 | Input/Output: [(43 -97 -98 96) -98]
Test Case: 846 | Input/Output: [(80 90 -12 -42) -42]
Test Case: 847 | Input/Output: [(43 12 47 96) 12]
Test Case: 848 | Input/Output: [(67 89 -60 -8) -60]
Test Case: 849 | Input/Output: [(-26 9 47 64) -26]
Test Case: 850 | Input/Output: [(90 80 -51 -72) -72]
Test Case: 851 | Input/Output: [(-71 88 22 21) -71]
Test Case: 852 | Input/Output: [(-17 87 58 -13) -17]
Test Case: 853 | Input/Output: [(-18 -67 19 -4) -67]
Test Case: 854 | Input/Output: [(25 82 0 -20) -20]
Test Case: 855 | Input/Output: [(-35 13 -62 -93) -93]
Test Case: 856 | Input/Output: [(-73 -40 0 4) -73]
Test Case: 857 | Input/Output: [(18 -7 -17 -81) -81]
Test Case: 858 | Input/Output: [(-19 43 -58 -90) -90]
Test Case: 859 | Input/Output: [(70 94 -81 -39) -81]
Test Case: 860 | Input/Output: [(82 25 -90 75) -90]
Test Case: 861 | Input/Output: [(76 -15 92 73) -15]
Test Case: 862 | Input/Output: [(-24 62 3 -39) -39]
Test Case: 863 | Input/Output: [(-69 -83 -21 67) -83]
Test Case: 864 | Input/Output: [(52 51 28 97) 28]
Test Case: 865 | Input/Output: [(59 -59 -57 -6) -59]
Test Case: 866 | Input/Output: [(52 71 0 47) 0]
Test Case: 867 | Input/Output: [(89 18 -25 -53) -53]
Test Case: 868 | Input/Output: [(2 91 -20 93) -20]
Test Case: 869 | Input/Output: [(13 18 -2 -80) -80]
Test Case: 870 | Input/Output: [(-49 -86 -40 -1) -86]
Test Case: 871 | Input/Output: [(-78 51 -48 70) -78]
Test Case: 872 | Input/Output: [(22 -95 87 56) -95]
Test Case: 873 | Input/Output: [(-72 -95 -93 29) -95]
Test Case: 874 | Input/Output: [(42 98 21 -14) -14]
Test Case: 875 | Input/Output: [(-34 28 74 28) -34]
Test Case: 876 | Input/Output: [(70 -70 63 10) -70]
Test Case: 877 | Input/Output: [(71 36 -12 -45) -45]
Test Case: 878 | Input/Output: [(28 -75 6 2) -75]
Test Case: 879 | Input/Output: [(-57 40 27 82) -57]
Test Case: 880 | Input/Output: [(-6 -92 33 70) -92]
Test Case: 881 | Input/Output: [(48 -42 -79 -62) -79]
Test Case: 882 | Input/Output: [(75 12 23 -13) -13]
Test Case: 883 | Input/Output: [(52 -97 44 94) -97]
Test Case: 884 | Input/Output: [(2 -24 -22 44) -24]
Test Case: 885 | Input/Output: [(-6 63 -26 89) -26]
Test Case: 886 | Input/Output: [(18 64 76 35) 18]
Test Case: 887 | Input/Output: [(77 -14 -45 -57) -57]
Test Case: 888 | Input/Output: [(-3 -86 15 67) -86]
Test Case: 889 | Input/Output: [(-52 48 -97 95) -97]
Test Case: 890 | Input/Output: [(-40 -78 2 66) -78]
Test Case: 891 | Input/Output: [(72 40 43 57) 40]
Test Case: 892 | Input/Output: [(99 -3 -33 51) -33]
Test Case: 893 | Input/Output: [(72 34 -74 -38) -74]
Test Case: 894 | Input/Output: [(-64 -57 -91 -69) -91]
Test Case: 895 | Input/Output: [(12 -87 -41 78) -87]
Test Case: 896 | Input/Output: [(-52 -82 90 65) -82]
Test Case: 897 | Input/Output: [(66 -73 -53 52) -73]
Test Case: 898 | Input/Output: [(52 -76 -86 3) -86]
Test Case: 899 | Input/Output: [(-78 95 -50 98) -78]
Test Case: 900 | Input/Output: [(9 17 27 -14) -14]
Test Case: 901 | Input/Output: [(9 -97 -46 78) -97]
Test Case: 902 | Input/Output: [(-32 -100 -41 -31) -100]
Test Case: 903 | Input/Output: [(-11 68 87 50) -11]
Test Case: 904 | Input/Output: [(44 -13 -36 69) -36]
Test Case: 905 | Input/Output: [(-17 2 -34 15) -34]
Test Case: 906 | Input/Output: [(-100 -98 9 80) -100]
Test Case: 907 | Input/Output: [(23 61 -37 -69) -69]
Test Case: 908 | Input/Output: [(37 90 -82 -51) -82]
Test Case: 909 | Input/Output: [(81 13 14 22) 13]
Test Case: 910 | Input/Output: [(52 89 37 14) 14]
Test Case: 911 | Input/Output: [(72 16 -70 -6) -70]
Test Case: 912 | Input/Output: [(-8 71 36 62) -8]
Test Case: 913 | Input/Output: [(-30 -56 -94 -63) -94]
Test Case: 914 | Input/Output: [(78 -65 100 97) -65]
Test Case: 915 | Input/Output: [(35 91 -82 49) -82]
Test Case: 916 | Input/Output: [(51 59 21 19) 19]
Test Case: 917 | Input/Output: [(3 45 62 -14) -14]
Test Case: 918 | Input/Output: [(-30 39 -27 26) -30]
Test Case: 919 | Input/Output: [(-6 -18 -95 19) -95]
Test Case: 920 | Input/Output: [(91 51 -9 -37) -37]
Test Case: 921 | Input/Output: [(28 -76 -47 33) -76]
Test Case: 922 | Input/Output: [(-48 -1 -4 38) -48]
Test Case: 923 | Input/Output: [(42 76 68 -43) -43]
Test Case: 924 | Input/Output: [(-40 -12 0 -34) -40]
Test Case: 925 | Input/Output: [(-38 30 -90 -90) -90]
Test Case: 926 | Input/Output: [(-77 -53 39 -73) -77]
Test Case: 927 | Input/Output: [(-82 -25 12 -53) -82]
Test Case: 928 | Input/Output: [(93 -6 -63 -23) -63]
Test Case: 929 | Input/Output: [(58 35 37 -10) -10]
Test Case: 930 | Input/Output: [(-30 38 58 92) -30]
Test Case: 931 | Input/Output: [(-80 -88 -75 -29) -88]
Test Case: 932 | Input/Output: [(-63 60 -64 20) -64]
Test Case: 933 | Input/Output: [(-58 53 73 -72) -72]
Test Case: 934 | Input/Output: [(18 22 29 -22) -22]
Test Case: 935 | Input/Output: [(62 -2 5 80) -2]
Test Case: 936 | Input/Output: [(-17 -25 -18 -18) -25]
Test Case: 937 | Input/Output: [(-42 31 -25 60) -42]
Test Case: 938 | Input/Output: [(-17 82 -35 -33) -35]
Test Case: 939 | Input/Output: [(-8 34 8 -36) -36]
Test Case: 940 | Input/Output: [(48 23 -82 -45) -82]
Test Case: 941 | Input/Output: [(-47 -37 97 48) -47]
Test Case: 942 | Input/Output: [(14 92 81 92) 14]
Test Case: 943 | Input/Output: [(38 91 98 -89) -89]
Test Case: 944 | Input/Output: [(-38 36 -26 47) -38]
Test Case: 945 | Input/Output: [(74 -20 -66 28) -66]
Test Case: 946 | Input/Output: [(-72 -71 -17 -15) -72]
Test Case: 947 | Input/Output: [(8 88 25 66) 8]
Test Case: 948 | Input/Output: [(0 -100 34 3) -100]
Test Case: 949 | Input/Output: [(-83 -11 -62 -60) -83]
Test Case: 950 | Input/Output: [(-56 11 57 48) -56]
Test Case: 951 | Input/Output: [(0 90 81 85) 0]
Test Case: 952 | Input/Output: [(80 97 34 -67) -67]
Test Case: 953 | Input/Output: [(65 41 8 -73) -73]
Test Case: 954 | Input/Output: [(32 -30 39 3) -30]
Test Case: 955 | Input/Output: [(-17 60 84 27) -17]
Test Case: 956 | Input/Output: [(24 -67 24 -88) -88]
Test Case: 957 | Input/Output: [(16 64 -89 86) -89]
Test Case: 958 | Input/Output: [(-96 38 44 -47) -96]
Test Case: 959 | Input/Output: [(-58 -97 -33 -7) -97]
Test Case: 960 | Input/Output: [(12 33 -58 -80) -80]
Test Case: 961 | Input/Output: [(43 -35 80 34) -35]
Test Case: 962 | Input/Output: [(90 77 -71 -37) -71]
Test Case: 963 | Input/Output: [(-100 -42 98 -47) -100]
Test Case: 964 | Input/Output: [(79 66 60 15) 15]
Test Case: 965 | Input/Output: [(-2 26 85 91) -2]
Test Case: 966 | Input/Output: [(92 78 -9 42) -9]
Test Case: 967 | Input/Output: [(28 -19 -37 11) -37]
Test Case: 968 | Input/Output: [(-87 -83 80 99) -87]
Test Case: 969 | Input/Output: [(-36 50 62 37) -36]
Test Case: 970 | Input/Output: [(-79 -4 -46 46) -79]
Test Case: 971 | Input/Output: [(-4 24 99 -49) -49]
Test Case: 972 | Input/Output: [(44 20 81 99) 20]
Test Case: 973 | Input/Output: [(14 -50 -80 85) -80]
Test Case: 974 | Input/Output: [(9 -36 96 61) -36]
Test Case: 975 | Input/Output: [(91 69 -87 -76) -87]
Test Case: 976 | Input/Output: [(61 -41 -85 -76) -85]
Test Case: 977 | Input/Output: [(24 30 0 -76) -76]
Test Case: 978 | Input/Output: [(-78 91 -72 47) -78]
Test Case: 979 | Input/Output: [(-20 20 19 35) -20]
Test Case: 980 | Input/Output: [(69 -81 29 -78) -81]
Test Case: 981 | Input/Output: [(30 97 -59 -88) -88]
Test Case: 982 | Input/Output: [(-38 66 39 -12) -38]
Test Case: 983 | Input/Output: [(-7 19 24 -50) -50]
Test Case: 984 | Input/Output: [(80 -30 39 1) -30]
Test Case: 985 | Input/Output: [(-2 -76 40 -63) -76]
Test Case: 986 | Input/Output: [(26 92 -58 79) -58]
Test Case: 987 | Input/Output: [(94 81 -68 77) -68]
Test Case: 988 | Input/Output: [(60 79 19 43) 19]
Test Case: 989 | Input/Output: [(-64 -40 88 74) -64]
Test Case: 990 | Input/Output: [(-93 69 39 29) -93]
Test Case: 991 | Input/Output: [(91 -38 -8 -87) -87]
Test Case: 992 | Input/Output: [(-86 -39 -52 4) -86]
Test Case: 993 | Input/Output: [(-8 19 -92 75) -92]
Test Case: 994 | Input/Output: [(-98 -45 -19 69) -98]
Test Case: 995 | Input/Output: [(-51 20 88 -30) -51]
Test Case: 996 | Input/Output: [(3 56 59 100) 3]
Test Case: 997 | Input/Output: [(-81 -68 -5 -67) -81]
Test Case: 998 | Input/Output: [(29 -87 -85 24) -87]
Test Case: 999 | Input/Output: [(-88 21 -38 93) -88]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 68 -26 68 -20 -8 53 -62 -10 78 -52 101 -30 115 15 -74 -34
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[2 2 2 -73] -73] [[-33 -79 -33 -33] -79] [[-74 -74 -74 -23] -74] [[-73 -73 -73 -44] -73] [[2 2 10 2] 2] [[-57 -52 -52 -52] -57] [[-87 54 54 54] -87] [[28 -63 28 28] -63] [[2 2 2 -100] -100] [[3 3 3 49] 3] [(-14 -14 -14 -14) -14] [(-43 -43 -43 -43) -43] [(-43 -43 -43 -43) -43] [(36 36 36 36) 36] [(-72 -72 -72 -72) -72] [(40 25 48 49) 25] [(6 52 86 41) 6] [(45 13 1 7) 1] [(92 81 30 6) 6] [(34 68 27 75) 27] [(8 20 77 26) 8] [(12 14 59 25) 12] [(39 67 76 38) 38] [(47 73 33 34) 33] [(40 55 80 85) 40] [(43 10 71 64) 10] [(58 30 21 57) 21] [(15 8 14 39) 8] [(28 29 31 25) 25] [(78 48 62 36) 36] [(14 50 97 7) 7] [(57 47 69 87) 47] [(47 43 9 88) 9] [(43 96 61 29) 29] [(62 46 91 30) 30] [(-29 27 -85 -24) -85] [(7 54 41 46) 7] [(7 93 40 -48) -48] [(-28 6 -80 72) -80] [(-27 44 40 -89) -89] [(42 90 85 37) 37] [(27 86 37 1) 1] [(91 82 36 -79) -79] [(79 75 -47 -43) -47] [(-65 94 -20 71) -65] [(15 28 56 -75) -75] [(-94 -60 25 -59) -94] [(-51 -66 -45 58) -66] [(77 -100 55 -11) -100] [(-36 -56 -47 -32) -56] [(91 -10 60 77) -10] [(-44 -36 -9 11) -44] [(-61 -25 68 -81) -81] [(37 34 90 -89) -89] [(-33 -31 75 -25) -33] [(-41 -75 80 89) -75] [(-4 91 -7 1) -7] [(16 -25 -36 -100) -100] [(-6 39 -79 -59) -79] [(2 76 78 -39) -39] [(-93 93 -1 35) -93] [(-94 55 -27 6) -94] [(99 75 -99 -30) -99] [(-100 84 -80 90) -100] [(-1 -56 93 33) -56] [(-60 47 92 100) -60] [(-29 60 50 80) -29] [(2 59 -74 -23) -74] [(-42 68 -9 -62) -62] [(-15 -51 69 93) -51] [(12 10 82 28) 10] [(29 -35 -62 -26) -62] [(46 47 64 61) 46] [(-15 -11 -19 48) -19] [(26 93 -34 62) -34] [(96 -67 -93 -50) -93] [(13 -5 95 -37) -37] [(-6 36 -34 -89) -89] [(-74 98 -36 -55) -74] [(-30 22 6 -100) -100] [(-98 19 20 95) -98] [(81 41 42 9) 9] [(12 -86 15 59) -86] [(-60 44 -77 85) -77] [(8 6 20 96) 6] [(67 -17 -98 46) -98] [(12 -76 28 -42) -76] [(-99 -1 -57 71) -99] [(-22 -3 -48 23) -48] [(63 -91 -43 64) -91] [(97 46 -98 1) -98] [(-30 -90 -28 -69) -90] [(-25 -8 66 -10) -25] [(-8 -33 89 66) -33] [(98 81 -5 82) -5])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 28                 
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 45                 
Correct output: 6                   | Program output: 92                 
Correct output: 27                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 39                 
Correct output: 33                  | Program output: 47                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 43                 
Correct output: 21                  | Program output: 58                 
Correct output: 8                   | Program output: 15                 
Correct output: 25                  | Program output: 28                 
Correct output: 36                  | Program output: 78                 
Correct output: 7                   | Program output: 14                 
Correct output: 47                  | Program output: 57                 
Correct output: 9                   | Program output: 47                 
Correct output: 29                  | Program output: 43                 
Correct output: 30                  | Program output: 62                 
Correct output: -85                 | Program output: -29                
Correct output: 7                   | Program output: 7                  
Correct output: -48                 | Program output: 7                  
Correct output: -80                 | Program output: -28                
Correct output: -89                 | Program output: -27                
Correct output: 37                  | Program output: 42                 
Correct output: 1                   | Program output: 27                 
Correct output: -79                 | Program output: 91                 
Correct output: -47                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -51                
Correct output: -100                | Program output: 77                 
Correct output: -56                 | Program output: -36                
Correct output: -10                 | Program output: 91                 
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -61                
Correct output: -89                 | Program output: 37                 
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -41                
Correct output: -7                  | Program output: -4                 
Correct output: -100                | Program output: 16                 
Correct output: -79                 | Program output: -6                 
Correct output: -39                 | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: 2                  
Correct output: -62                 | Program output: -42                
Correct output: -51                 | Program output: -15                
Correct output: 10                  | Program output: 12                 
Correct output: -62                 | Program output: 29                 
Correct output: 46                  | Program output: 46                 
Correct output: -19                 | Program output: -15                
Correct output: -34                 | Program output: 26                 
Correct output: -93                 | Program output: 96                 
Correct output: -37                 | Program output: 13                 
Correct output: -89                 | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: 9                   | Program output: 81                 
Correct output: -86                 | Program output: 12                 
Correct output: -77                 | Program output: -60                
Correct output: 6                   | Program output: 8                  
Correct output: -98                 | Program output: 67                 
Correct output: -76                 | Program output: 12                 
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -22                
Correct output: -91                 | Program output: 63                 
Correct output: -98                 | Program output: 97                 
Correct output: -90                 | Program output: -30                
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -8                 
Correct output: -5                  | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_336} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction 7} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_935} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction -9} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -57} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_shove boolean_dup_items boolean_and exec_eq boolean_dup integer_empty exec_empty integer_rot integer_dec integer_dec integer_rot exec_when (integer_stackdepth) integer_div boolean_dup_items exec_do*range (exec_when (integer_dup integer_gte)) exec_yankdup integer_gte in1 print_integer integer_add exec_do*range (integer_shove) exec_rot (in2) (in2 integer_eq integer_dec integer_mult boolean_eq) (exec_y (boolean_shove exec_pop (boolean_stackdepth integer_stackdepth exec_do*times (tagged_336 boolean_not exec_do*while (integer_dec exec_stackdepth 7)) boolean_stackdepth) exec_do*while () integer_lt integer_lte boolean_empty integer_sub in3 boolean_frominteger boolean_stackdepth integer_yank integer_dec integer_shove) tag_boolean_935 in3 exec_k_when_autoconstructing (exec_empty integer_dec integer_shove boolean_swap exec_do*times (exec_flush integer_yank)) (boolean_dup_items boolean_flush print_integer exec_s_when_autoconstructing (boolean_or integer_empty integer_swap boolean_dup_items exec_do*count () boolean_pop -9 boolean_dup_times -57 print_integer exec_stackdepth boolean_yankdup integer_stackdepth exec_s_when_autoconstructing (integer_swap integer_yank exec_noop exec_s_when_autoconstructing (exec_shove ()) () ()) () ()) () ())))
Lexicase best errors: [1 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 117
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_336} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction 7} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_935} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction -9} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -57} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_shove boolean_dup_items boolean_and exec_eq boolean_dup integer_empty exec_empty integer_rot integer_dec integer_dec integer_rot exec_when (integer_stackdepth) integer_div boolean_dup_items exec_do*range (exec_when (integer_dup integer_gte)) exec_yankdup integer_gte in1 print_integer integer_add exec_do*range (integer_shove) exec_rot (in2) (in2 integer_eq integer_dec integer_mult boolean_eq) (exec_y (boolean_shove exec_pop (boolean_stackdepth integer_stackdepth exec_do*times (tagged_336 boolean_not exec_do*while (integer_dec exec_stackdepth 7)) boolean_stackdepth) exec_do*while () integer_lt integer_lte boolean_empty integer_sub in3 boolean_frominteger boolean_stackdepth integer_yank integer_dec integer_shove) tag_boolean_935 in3 exec_k_when_autoconstructing (exec_empty integer_dec integer_shove boolean_swap exec_do*times (exec_flush integer_yank)) (boolean_dup_items boolean_flush print_integer exec_s_when_autoconstructing (boolean_or integer_empty integer_swap boolean_dup_items exec_do*count () boolean_pop -9 boolean_dup_times -57 print_integer exec_stackdepth boolean_yankdup integer_stackdepth exec_s_when_autoconstructing (integer_swap integer_yank exec_noop exec_s_when_autoconstructing (exec_shove ()) () ()) () ()) () ())))
Zero cases best errors: [1 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 117
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 3 4 1 2 1 1 1 9)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 2 3 4 1 2 1 1 1 9)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_336} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction 7} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_935} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction -9} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -57} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove})
Best program: (integer_shove boolean_dup_items boolean_and exec_eq boolean_dup integer_empty exec_empty integer_rot integer_dec integer_dec integer_rot exec_when (integer_stackdepth) integer_div boolean_dup_items exec_do*range (exec_when (integer_dup integer_gte)) exec_yankdup integer_gte in1 print_integer integer_add exec_do*range (integer_shove) exec_rot (in2) (in2 integer_eq integer_dec integer_mult boolean_eq) (exec_y (boolean_shove exec_pop (boolean_stackdepth integer_stackdepth exec_do*times (tagged_336 boolean_not exec_do*while (integer_dec exec_stackdepth 7)) boolean_stackdepth) exec_do*while () integer_lt integer_lte boolean_empty integer_sub in3 boolean_frominteger boolean_stackdepth integer_yank integer_dec integer_shove) tag_boolean_935 in3 exec_k_when_autoconstructing (exec_empty integer_dec integer_shove boolean_swap exec_do*times (exec_flush integer_yank)) (boolean_dup_items boolean_flush print_integer exec_s_when_autoconstructing (boolean_or integer_empty integer_swap boolean_dup_items exec_do*count () boolean_pop -9 boolean_dup_times -57 print_integer exec_stackdepth boolean_yankdup integer_stackdepth exec_s_when_autoconstructing (integer_swap integer_yank exec_noop exec_s_when_autoconstructing (exec_shove ()) () ()) () ()) () ())))
Errors: [1 1 1 0 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 90
Size: 117
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 9.974
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.997 0.996 0.999 0.998 0.999 0.999 0.999 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.454
Average program size in population (points): 71.016
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 451073
--- Timings ---
Current time: 1559593959348 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.9 seconds, 32.9%
Fitness Testing:      1.7 seconds, 63.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 52                 
Correct output: 1                   | Program output: 13                 
Correct output: 6                   | Program output: 81                 
Correct output: 27                  | Program output: 68                 
Correct output: 8                   | Program output: 20                 
Correct output: 12                  | Program output: 14                 
Correct output: 38                  | Program output: 67                 
Correct output: 33                  | Program output: 73                 
Correct output: 40                  | Program output: 55                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 29                 
Correct output: 36                  | Program output: 48                 
Correct output: 7                   | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 43                 
Correct output: 29                  | Program output: 96                 
Correct output: 30                  | Program output: 46                 
Correct output: -85                 | Program output: 27                 
Correct output: 7                   | Program output: 54                 
Correct output: -48                 | Program output: 93                 
Correct output: -80                 | Program output: 6                  
Correct output: -89                 | Program output: 44                 
Correct output: 37                  | Program output: 90                 
Correct output: 1                   | Program output: 86                 
Correct output: -79                 | Program output: 82                 
Correct output: -47                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -75                 | Program output: 28                 
Correct output: -94                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -36                
Correct output: -81                 | Program output: -25                
Correct output: -89                 | Program output: 34                 
Correct output: -33                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: 91                 
Correct output: -100                | Program output: -25                
Correct output: -79                 | Program output: 39                 
Correct output: -39                 | Program output: 76                 
Correct output: -93                 | Program output: 93                 
Correct output: -94                 | Program output: 55                 
Correct output: -99                 | Program output: 75                 
Correct output: -100                | Program output: 84                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 47                 
Correct output: -29                 | Program output: 60                 
Correct output: -74                 | Program output: 59                 
Correct output: -62                 | Program output: 68                 
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 10                 
Correct output: -62                 | Program output: -35                
Correct output: 46                  | Program output: 47                 
Correct output: -19                 | Program output: -11                
Correct output: -34                 | Program output: 93                 
Correct output: -93                 | Program output: -67                
Correct output: -37                 | Program output: -5                 
Correct output: -89                 | Program output: 36                 
Correct output: -74                 | Program output: 98                 
Correct output: -100                | Program output: 22                 
Correct output: -98                 | Program output: 19                 
Correct output: 9                   | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -17                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -1                 
Correct output: -48                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: 46                 
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_174} {:close 1, :instruction integer_dec} {:close 0, :instruction 15} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_526} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 2, :instruction tag_boolean_366} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup})
Lexicase best program: (integer_yank integer_shove boolean_and tagged_174 integer_dec 15 boolean_rot integer_fromboolean boolean_empty integer_dup exec_eq exec_stackdepth exec_do*times (in4) integer_fromboolean exec_while (in2 integer_add boolean_dup boolean_or print_integer integer_dup_items integer_max integer_rot exec_do*count () integer_swap boolean_empty exec_y (integer_fromboolean in2 exec_flush integer_gte exec_y_when_autoconstructing (exec_empty integer_empty integer_min boolean_flush integer_dec) boolean_invert_second_then_and in3 integer_div integer_yank boolean_not exec_rot (boolean_shove) (boolean_dup_items exec_y_when_autoconstructing () boolean_shove exec_shove () exec_if (exec_do*times (integer_swap exec_swap (integer_yankdup integer_inc boolean_stackdepth integer_sub exec_yank) (exec_do*while () exec_pop () boolean_pop exec_s_when_autoconstructing () (exec_empty exec_do*count (in4 boolean_frominteger) print_integer tag_boolean_526 boolean_yank boolean_stackdepth integer_gt) (tag_boolean_366)) integer_lt boolean_shove boolean_eq integer_max print_exec () boolean_or in4 integer_dup exec_do*while (exec_do*range (print_newline exec_yankdup)))) ()) ())))
Lexicase best errors: [1 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 109
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_174} {:close 1, :instruction integer_dec} {:close 0, :instruction 15} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_526} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 2, :instruction tag_boolean_366} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup})
Zero cases best program: (integer_yank integer_shove boolean_and tagged_174 integer_dec 15 boolean_rot integer_fromboolean boolean_empty integer_dup exec_eq exec_stackdepth exec_do*times (in4) integer_fromboolean exec_while (in2 integer_add boolean_dup boolean_or print_integer integer_dup_items integer_max integer_rot exec_do*count () integer_swap boolean_empty exec_y (integer_fromboolean in2 exec_flush integer_gte exec_y_when_autoconstructing (exec_empty integer_empty integer_min boolean_flush integer_dec) boolean_invert_second_then_and in3 integer_div integer_yank boolean_not exec_rot (boolean_shove) (boolean_dup_items exec_y_when_autoconstructing () boolean_shove exec_shove () exec_if (exec_do*times (integer_swap exec_swap (integer_yankdup integer_inc boolean_stackdepth integer_sub exec_yank) (exec_do*while () exec_pop () boolean_pop exec_s_when_autoconstructing () (exec_empty exec_do*count (in4 boolean_frominteger) print_integer tag_boolean_526 boolean_yank boolean_stackdepth integer_gt) (tag_boolean_366)) integer_lt boolean_shove boolean_eq integer_max print_exec () boolean_or in4 integer_dup exec_do*while (exec_do*range (print_newline exec_yankdup)))) ()) ())))
Zero cases best errors: [1 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 109
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (292 3 4 58 355 227 3 293 585 226)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (292 3 4 58 355 227 3 293 585 226)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_736} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_583} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction tagged_652} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_880} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction 34} {:close 0, :instruction boolean_pop} {:close 2, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_834} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add})
Best program: (exec_do*while () in3 boolean_dup_times integer_mod boolean_yankdup in2 exec_k_when_autoconstructing (print_integer integer_lte exec_do*times (integer_min integer_yankdup integer_shove integer_rot tag_boolean_736 in3) integer_shove exec_if (exec_eq boolean_or exec_s (boolean_rot) (integer_shove integer_shove) () boolean_rot) (boolean_stackdepth integer_inc integer_sub exec_swap (tagged_583 boolean_xor exec_do*range (exec_if () (boolean_empty exec_y () integer_empty boolean_xor) tagged_652) boolean_rot integer_yankdup tagged_880 exec_k (exec_s (print_integer boolean_not) (34 boolean_pop print_integer) () integer_stackdepth exec_dup_times () boolean_empty) (exec_k_when_autoconstructing (integer_inc integer_swap integer_pop exec_k (exec_do*range (integer_dup integer_yankdup) print_exec (exec_flush)) (integer_add boolean_empty tag_exec_834 (print_boolean exec_empty integer_sub) exec_when () exec_dup_items boolean_rot integer_add boolean_shove integer_add)) ())) ())) ())
Errors: [1 0 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 73
Size: 103
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 7.954
Median total errors in population: 7
Error averages by case: (0.708 0.997 0.996 0.942 0.645 0.773 0.997 0.707 0.415 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.695
Average program size in population (points): 100.974
Average percent parens in population: 0.258
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1390009
--- Timings ---
Current time: 1559593962584 milliseconds
Total Time:           6.4 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.1 seconds, 32.5%
Fitness Testing:      3.1 seconds, 48.2%
Report:               1.1 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 52                 
Correct output: 1                   | Program output: 13                 
Correct output: 6                   | Program output: 81                 
Correct output: 27                  | Program output: 68                 
Correct output: 8                   | Program output: 20                 
Correct output: 12                  | Program output: 14                 
Correct output: 38                  | Program output: 67                 
Correct output: 33                  | Program output: 73                 
Correct output: 40                  | Program output: 55                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 29                 
Correct output: 36                  | Program output: 48                 
Correct output: 7                   | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 43                 
Correct output: 29                  | Program output: 96                 
Correct output: 30                  | Program output: 46                 
Correct output: -85                 | Program output: 27                 
Correct output: 7                   | Program output: 54                 
Correct output: -48                 | Program output: 93                 
Correct output: -80                 | Program output: 6                  
Correct output: -89                 | Program output: 44                 
Correct output: 37                  | Program output: 90                 
Correct output: 1                   | Program output: 86                 
Correct output: -79                 | Program output: 82                 
Correct output: -47                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -75                 | Program output: 28                 
Correct output: -94                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -36                
Correct output: -81                 | Program output: -25                
Correct output: -89                 | Program output: 34                 
Correct output: -33                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: 91                 
Correct output: -100                | Program output: -25                
Correct output: -79                 | Program output: 39                 
Correct output: -39                 | Program output: 76                 
Correct output: -93                 | Program output: 93                 
Correct output: -94                 | Program output: 55                 
Correct output: -99                 | Program output: 75                 
Correct output: -100                | Program output: 84                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 47                 
Correct output: -29                 | Program output: 60                 
Correct output: -74                 | Program output: 59                 
Correct output: -62                 | Program output: 68                 
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 10                 
Correct output: -62                 | Program output: -35                
Correct output: 46                  | Program output: 47                 
Correct output: -19                 | Program output: -11                
Correct output: -34                 | Program output: 93                 
Correct output: -93                 | Program output: -67                
Correct output: -37                 | Program output: -5                 
Correct output: -89                 | Program output: 36                 
Correct output: -74                 | Program output: 98                 
Correct output: -100                | Program output: 22                 
Correct output: -98                 | Program output: 19                 
Correct output: 9                   | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -17                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -1                 
Correct output: -48                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: 46                 
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_174} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction 15} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction -98} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_exec} {:close 2, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction tagged_170} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_526} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction tag_boolean_366} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup})
Lexicase best program: (integer_yank integer_shove -25 boolean_and tagged_174 exec_when (integer_dec) 15 boolean_rot integer_fromboolean boolean_empty -98 integer_dup exec_eq exec_stackdepth print_exec (in4) boolean_xor exec_while (boolean_dup boolean_or print_integer integer_dup_items integer_rot exec_do*count () integer_swap boolean_empty exec_y (in2 boolean_empty integer_gte tagged_170) exec_empty integer_min boolean_flush integer_dec) boolean_invert_second_then_and in3 integer_div exec_y_when_autoconstructing (integer_swap integer_yank boolean_not exec_while (exec_rot (boolean_dup_items exec_y_when_autoconstructing () integer_add boolean_shove exec_if (exec_do*times (boolean_flush integer_gte integer_swap exec_swap (boolean_flush integer_yankdup boolean_invert_first_then_and exec_do*range () boolean_stackdepth integer_sub exec_yank) (exec_do*while () boolean_stackdepth) boolean_pop exec_empty exec_do*count (in4 integer_fromboolean integer_swap print_integer tag_boolean_526 boolean_stackdepth integer_gt) integer_stackdepth tag_boolean_366)) (exec_k () (exec_do*count () boolean_shove integer_max print_exec () boolean_or in4 integer_eq integer_dup exec_stackdepth exec_do*while (integer_dup exec_do*range (exec_swap (print_newline boolean_or exec_yankdup) ()))))) () ())))
Lexicase best errors: [0 1 1 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 121
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_174} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dec} {:close 0, :instruction 15} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction -98} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_exec} {:close 2, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction tagged_170} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_526} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction tag_boolean_366} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup})
Zero cases best program: (integer_yank integer_shove -25 boolean_and tagged_174 exec_when (integer_dec) 15 boolean_rot integer_fromboolean boolean_empty -98 integer_dup exec_eq exec_stackdepth print_exec (in4) boolean_xor exec_while (boolean_dup boolean_or print_integer integer_dup_items integer_rot exec_do*count () integer_swap boolean_empty exec_y (in2 boolean_empty integer_gte tagged_170) exec_empty integer_min boolean_flush integer_dec) boolean_invert_second_then_and in3 integer_div exec_y_when_autoconstructing (integer_swap integer_yank boolean_not exec_while (exec_rot (boolean_dup_items exec_y_when_autoconstructing () integer_add boolean_shove exec_if (exec_do*times (boolean_flush integer_gte integer_swap exec_swap (boolean_flush integer_yankdup boolean_invert_first_then_and exec_do*range () boolean_stackdepth integer_sub exec_yank) (exec_do*while () boolean_stackdepth) boolean_pop exec_empty exec_do*count (in4 integer_fromboolean integer_swap print_integer tag_boolean_526 boolean_stackdepth integer_gt) integer_stackdepth tag_boolean_366)) (exec_k () (exec_do*count () boolean_shove integer_max print_exec () boolean_or in4 integer_eq integer_dup exec_stackdepth exec_do*while (integer_dup exec_do*range (exec_swap (print_newline boolean_or exec_yankdup) ()))))) () ())))
Zero cases best errors: [0 1 1 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 121
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (35 208 195 155 35 209 35 156 187 187)
Population mean number of elite cases: 1.40
Count of perfect (error zero) individuals by case: (35 208 195 155 35 209 35 156 187 187)
Population mean number of perfect (error zero) cases: 1.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_174} {:close 1, :instruction integer_dec} {:close 0, :instruction 15} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 1, :instruction -49} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_526} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 2, :instruction tag_boolean_366} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup})
Best program: (integer_yank integer_shove boolean_and tagged_174 integer_dec 15 boolean_rot integer_fromboolean boolean_empty integer_dup exec_eq exec_stackdepth exec_do*times (in4) integer_fromboolean exec_do*times (exec_while (in2 integer_add boolean_pop boolean_dup boolean_or print_integer integer_dup_items integer_max integer_rot exec_do*count () boolean_empty exec_y (integer_fromboolean in2 exec_flush integer_gte exec_y_when_autoconstructing (exec_empty boolean_and integer_min boolean_flush integer_dec) boolean_invert_second_then_and in3 integer_yank boolean_not exec_rot (boolean_shove) (boolean_dup_items exec_y_when_autoconstructing () boolean_shove exec_shove () integer_shove) (exec_if (exec_while (exec_do*times (integer_swap exec_swap (integer_yankdup integer_inc boolean_stackdepth integer_sub exec_eq exec_yank) (exec_pop () boolean_pop exec_s_when_autoconstructing () (exec_empty exec_s (exec_do*count (in4 exec_flush -49) print_integer tag_boolean_526 boolean_yank boolean_invert_second_then_and) (boolean_stackdepth integer_gt) (tag_boolean_366)) (integer_lt boolean_eq integer_max print_exec () boolean_or in4 boolean_empty) integer_dup exec_do*while (exec_do*range (print_newline exec_yankdup)))))) ())))))
Errors: [1 0 0 1 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 89
Size: 118
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 8.598
Median total errors in population: 8
Error averages by case: (0.965 0.792 0.805 0.845 0.965 0.791 0.965 0.844 0.813 0.813)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.876
Average program size in population (points): 102.212
Average percent parens in population: 0.253
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2290388
--- Timings ---
Current time: 1559593965377 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         3.3 seconds, 35.2%
Fitness Testing:      4.1 seconds, 44.0%
Report:               1.9 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 52                 
Correct output: 1                   | Program output: 13                 
Correct output: 6                   | Program output: 81                 
Correct output: 27                  | Program output: 68                 
Correct output: 8                   | Program output: 20                 
Correct output: 12                  | Program output: 14                 
Correct output: 38                  | Program output: 67                 
Correct output: 33                  | Program output: 73                 
Correct output: 40                  | Program output: 55                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 29                 
Correct output: 36                  | Program output: 48                 
Correct output: 7                   | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 43                 
Correct output: 29                  | Program output: 96                 
Correct output: 30                  | Program output: 46                 
Correct output: -85                 | Program output: 27                 
Correct output: 7                   | Program output: 54                 
Correct output: -48                 | Program output: 93                 
Correct output: -80                 | Program output: 6                  
Correct output: -89                 | Program output: 44                 
Correct output: 37                  | Program output: 90                 
Correct output: 1                   | Program output: 86                 
Correct output: -79                 | Program output: 82                 
Correct output: -47                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -75                 | Program output: 28                 
Correct output: -94                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -36                
Correct output: -81                 | Program output: -25                
Correct output: -89                 | Program output: 34                 
Correct output: -33                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: 91                 
Correct output: -100                | Program output: -25                
Correct output: -79                 | Program output: 39                 
Correct output: -39                 | Program output: 76                 
Correct output: -93                 | Program output: 93                 
Correct output: -94                 | Program output: 55                 
Correct output: -99                 | Program output: 75                 
Correct output: -100                | Program output: 84                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 47                 
Correct output: -29                 | Program output: 60                 
Correct output: -74                 | Program output: 59                 
Correct output: -62                 | Program output: 68                 
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 10                 
Correct output: -62                 | Program output: -35                
Correct output: 46                  | Program output: 47                 
Correct output: -19                 | Program output: -11                
Correct output: -34                 | Program output: 93                 
Correct output: -93                 | Program output: -67                
Correct output: -37                 | Program output: -5                 
Correct output: -89                 | Program output: 36                 
Correct output: -74                 | Program output: 98                 
Correct output: -100                | Program output: 22                 
Correct output: -98                 | Program output: 19                 
Correct output: 9                   | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -17                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -1                 
Correct output: -48                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: 46                 
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_174} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_526} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 2, :instruction tag_boolean_366} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_noop integer_shove boolean_and tagged_174 integer_dec boolean_rot boolean_empty integer_dup exec_eq exec_stackdepth exec_do*times (integer_fromboolean exec_while (exec_pop () in2 integer_add boolean_dup boolean_or exec_do*while (print_integer integer_dup_items integer_max integer_rot exec_do*count () integer_swap exec_flush boolean_yankdup boolean_empty boolean_yank) exec_y (integer_fromboolean in2 integer_gte exec_eq exec_y_when_autoconstructing (exec_eq exec_empty integer_empty integer_min integer_dec) exec_eq) boolean_invert_second_then_and integer_div integer_yank integer_stackdepth boolean_not exec_rot (boolean_shove) (boolean_dup_items exec_y_when_autoconstructing () boolean_shove exec_when () exec_shove () exec_if (integer_swap exec_swap (integer_eq exec_if (integer_inc exec_do*while () exec_pop () boolean_pop exec_s_when_autoconstructing () (exec_empty integer_shove) (exec_do*count (boolean_pop print_integer exec_do*count (tag_boolean_526 boolean_yank integer_gt) tag_boolean_366)) integer_lt integer_max print_exec () integer_yank in4 integer_dup boolean_dup_items exec_do*while (exec_do*range (print_boolean print_newline integer_dec exec_yankdup))) ()) ()) ()) ())))
Lexicase best errors: [1 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 116
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_174} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_boolean_526} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 2, :instruction tag_boolean_366} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_noop integer_shove boolean_and tagged_174 integer_dec boolean_rot boolean_empty integer_dup exec_eq exec_stackdepth exec_do*times (integer_fromboolean exec_while (exec_pop () in2 integer_add boolean_dup boolean_or exec_do*while (print_integer integer_dup_items integer_max integer_rot exec_do*count () integer_swap exec_flush boolean_yankdup boolean_empty boolean_yank) exec_y (integer_fromboolean in2 integer_gte exec_eq exec_y_when_autoconstructing (exec_eq exec_empty integer_empty integer_min integer_dec) exec_eq) boolean_invert_second_then_and integer_div integer_yank integer_stackdepth boolean_not exec_rot (boolean_shove) (boolean_dup_items exec_y_when_autoconstructing () boolean_shove exec_when () exec_shove () exec_if (integer_swap exec_swap (integer_eq exec_if (integer_inc exec_do*while () exec_pop () boolean_pop exec_s_when_autoconstructing () (exec_empty integer_shove) (exec_do*count (boolean_pop print_integer exec_do*count (tag_boolean_526 boolean_yank integer_gt) tag_boolean_366)) integer_lt integer_max print_exec () integer_yank in4 integer_dup boolean_dup_items exec_do*while (exec_do*range (print_boolean print_newline integer_dec exec_yankdup))) ()) ()) ()) ())))
Zero cases best errors: [1 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 116
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 151 145 118 119 119 163 140 407 400)
Population mean number of elite cases: 1.87
Count of perfect (error zero) individuals by case: (112 151 145 118 119 119 163 140 407 400)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 2, :instruction 7} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 1, :instruction tagged_942} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_935} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction -9} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -57} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove})
Best program: (integer_shove boolean_and boolean_dup_items boolean_and exec_eq exec_empty integer_dec integer_dec integer_rot exec_when (integer_div) exec_do*range (exec_when (integer_dup integer_gte)) integer_gte in1 in2 print_integer integer_fromboolean integer_shove exec_rot (in2) (in2 integer_dec integer_mult boolean_eq) (boolean_yankdup exec_y (boolean_shove integer_empty boolean_stackdepth integer_stackdepth exec_do*times (boolean_not exec_do*while (exec_stackdepth integer_lt 7)) integer_lt integer_lte boolean_empty integer_sub in3 tagged_942) boolean_frominteger boolean_stackdepth integer_shove integer_dec integer_shove) tag_boolean_935 in3 exec_k_when_autoconstructing (exec_empty boolean_not integer_dec integer_shove boolean_swap exec_flush integer_yank) () boolean_dup_items boolean_flush integer_empty integer_swap boolean_dup_items exec_do*count () boolean_pop -9 boolean_dup_times exec_yankdup -57 exec_stackdepth boolean_yankdup integer_stackdepth integer_flush integer_swap integer_yank exec_noop boolean_and exec_shove ())
Errors: [1 0 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 80
Size: 94
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 8.126
Median total errors in population: 8
Error averages by case: (0.888 0.849 0.855 0.882 0.881 0.881 0.837 0.86 0.593 0.6)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.82
Average program size in population (points): 103.303
Average percent parens in population: 0.251
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3168561
--- Timings ---
Current time: 1559593968433 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.6 seconds, 37.7%
Fitness Testing:      5.1 seconds, 42.3%
Report:               2.3 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 10                 
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: 28                 
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 48                 
Correct output: 6                   | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 77                 
Correct output: 12                  | Program output: 59                 
Correct output: 38                  | Program output: 76                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 80                 
Correct output: 10                  | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 14                 
Correct output: 25                  | Program output: 31                 
Correct output: 36                  | Program output: 62                 
Correct output: 7                   | Program output: 97                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 61                 
Correct output: 30                  | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 41                 
Correct output: -48                 | Program output: 40                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: 40                 
Correct output: 37                  | Program output: 85                 
Correct output: 1                   | Program output: 37                 
Correct output: -79                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -20                
Correct output: -75                 | Program output: 56                 
Correct output: -94                 | Program output: 25                 
Correct output: -66                 | Program output: -45                
Correct output: -100                | Program output: 55                 
Correct output: -56                 | Program output: -47                
Correct output: -10                 | Program output: 60                 
Correct output: -44                 | Program output: -9                 
Correct output: -81                 | Program output: 68                 
Correct output: -89                 | Program output: 90                 
Correct output: -33                 | Program output: 75                 
Correct output: -75                 | Program output: 80                 
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: 78                 
Correct output: -93                 | Program output: -1                 
Correct output: -94                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -80                
Correct output: -56                 | Program output: 93                 
Correct output: -60                 | Program output: 92                 
Correct output: -29                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -9                 
Correct output: -51                 | Program output: 69                 
Correct output: 10                  | Program output: 82                 
Correct output: -62                 | Program output: -62                
Correct output: 46                  | Program output: 64                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: 95                 
Correct output: -89                 | Program output: -34                
Correct output: -74                 | Program output: -36                
Correct output: -100                | Program output: 6                  
Correct output: -98                 | Program output: 20                 
Correct output: 9                   | Program output: 42                 
Correct output: -86                 | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 20                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 28                 
Correct output: -99                 | Program output: -57                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -28                
Correct output: -25                 | Program output: 66                 
Correct output: -33                 | Program output: 89                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 2, :instruction 7} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_935} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -57} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_shove boolean_dup_items boolean_and print_integer integer_empty boolean_pop integer_rot integer_dec integer_rot integer_stackdepth integer_div boolean_stackdepth boolean_yank exec_when (integer_inc) integer_dup boolean_frominteger integer_gte exec_yankdup exec_shove (integer_gte exec_swap (in1 print_integer) (integer_add) exec_do*range (exec_rot (in2) (exec_do*while ()) (integer_mult exec_y (boolean_shove exec_pop (integer_stackdepth exec_do*times (exec_s (boolean_not integer_stackdepth) (exec_do*while (integer_dec 7)) (boolean_stackdepth) integer_dup) integer_lte boolean_stackdepth integer_yank boolean_shove integer_dec integer_shove) tag_boolean_935 boolean_yankdup exec_dup_items) boolean_not exec_flush) in3 exec_k_when_autoconstructing (exec_empty integer_dec integer_shove in4 exec_do*times (integer_yank)) (boolean_dup_items print_integer exec_s_when_autoconstructing (integer_div exec_s () (integer_empty integer_swap boolean_dup_items exec_do*count () integer_empty) (boolean_pop boolean_dup_times -57 print_integer exec_dup_times (exec_stackdepth boolean_yankdup integer_stackdepth exec_dup () exec_s_when_autoconstructing (exec_noop exec_s_when_autoconstructing (exec_pop (exec_shove ())) () ()) () ()))) () ()))))
Lexicase best errors: [0 1 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 123
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 2, :instruction 7} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_935} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction -57} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_shove boolean_dup_items boolean_and print_integer integer_empty boolean_pop integer_rot integer_dec integer_rot integer_stackdepth integer_div boolean_stackdepth boolean_yank exec_when (integer_inc) integer_dup boolean_frominteger integer_gte exec_yankdup exec_shove (integer_gte exec_swap (in1 print_integer) (integer_add) exec_do*range (exec_rot (in2) (exec_do*while ()) (integer_mult exec_y (boolean_shove exec_pop (integer_stackdepth exec_do*times (exec_s (boolean_not integer_stackdepth) (exec_do*while (integer_dec 7)) (boolean_stackdepth) integer_dup) integer_lte boolean_stackdepth integer_yank boolean_shove integer_dec integer_shove) tag_boolean_935 boolean_yankdup exec_dup_items) boolean_not exec_flush) in3 exec_k_when_autoconstructing (exec_empty integer_dec integer_shove in4 exec_do*times (integer_yank)) (boolean_dup_items print_integer exec_s_when_autoconstructing (integer_div exec_s () (integer_empty integer_swap boolean_dup_items exec_do*count () integer_empty) (boolean_pop boolean_dup_times -57 print_integer exec_dup_times (exec_stackdepth boolean_yankdup integer_stackdepth exec_dup () exec_s_when_autoconstructing (exec_noop exec_s_when_autoconstructing (exec_pop (exec_shove ())) () ()) () ()))) () ()))))
Zero cases best errors: [0 1 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 123
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 52 156 263 581 165 50 163 263 265)
Population mean number of elite cases: 2.12
Count of perfect (error zero) individuals by case: (164 52 156 263 581 165 50 163 263 265)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction 73} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup})
Best program: (print_boolean boolean_yank boolean_yankdup integer_yank exec_swap (integer_flush 73) (exec_dup_items in3 print_integer) integer_gte exec_do*times (boolean_dup_items exec_if (exec_while (integer_yankdup boolean_not print_exec (print_boolean exec_s_when_autoconstructing () (integer_yank) (boolean_stackdepth) integer_yankdup))) ()))
Errors: [1 1 1 0 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 7.878
Median total errors in population: 8
Error averages by case: (0.836 0.948 0.844 0.737 0.419 0.835 0.95 0.837 0.737 0.735)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.904
Average program size in population (points): 95.235
Average percent parens in population: 0.262
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3950296
--- Timings ---
Current time: 1559593971250 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.9 seconds, 38.8%
Fitness Testing:      6.0 seconds, 39.8%
Report:               3.1 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 10                 
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: 28                 
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 48                 
Correct output: 6                   | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 77                 
Correct output: 12                  | Program output: 59                 
Correct output: 38                  | Program output: 76                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 80                 
Correct output: 10                  | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 14                 
Correct output: 25                  | Program output: 31                 
Correct output: 36                  | Program output: 62                 
Correct output: 7                   | Program output: 97                 
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 61                 
Correct output: 30                  | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 41                 
Correct output: -48                 | Program output: 40                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: 40                 
Correct output: 37                  | Program output: 85                 
Correct output: 1                   | Program output: 37                 
Correct output: -79                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -20                
Correct output: -75                 | Program output: 56                 
Correct output: -94                 | Program output: 25                 
Correct output: -66                 | Program output: -45                
Correct output: -100                | Program output: 55                 
Correct output: -56                 | Program output: -47                
Correct output: -10                 | Program output: 60                 
Correct output: -44                 | Program output: -9                 
Correct output: -81                 | Program output: 68                 
Correct output: -89                 | Program output: 90                 
Correct output: -33                 | Program output: 75                 
Correct output: -75                 | Program output: 80                 
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: 78                 
Correct output: -93                 | Program output: -1                 
Correct output: -94                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -80                
Correct output: -56                 | Program output: 93                 
Correct output: -60                 | Program output: 92                 
Correct output: -29                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -9                 
Correct output: -51                 | Program output: 69                 
Correct output: 10                  | Program output: 82                 
Correct output: -62                 | Program output: -62                
Correct output: 46                  | Program output: 64                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: 95                 
Correct output: -89                 | Program output: -34                
Correct output: -74                 | Program output: -36                
Correct output: -100                | Program output: 6                  
Correct output: -98                 | Program output: 20                 
Correct output: 9                   | Program output: 42                 
Correct output: -86                 | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 20                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 28                 
Correct output: -99                 | Program output: -57                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -28                
Correct output: -25                 | Program output: 66                 
Correct output: -33                 | Program output: 89                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_174} {:close 1, :instruction integer_dec} {:close 0, :instruction 15} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction tag_boolean_366} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_yank integer_shove boolean_and tagged_174 integer_dec 15 exec_do*times () integer_fromboolean boolean_empty integer_min exec_do*times (in4) integer_add boolean_dup boolean_or print_integer exec_shove (integer_inc integer_dup_items integer_rot integer_dup) integer_swap boolean_empty boolean_empty exec_while (exec_empty integer_empty boolean_flush boolean_xor exec_flush in3 integer_yank exec_yankdup boolean_not exec_rot (boolean_dup_items exec_y_when_autoconstructing () integer_pop integer_add exec_shove () exec_if (exec_do*while () exec_y () integer_swap exec_dup_times (integer_yankdup boolean_stackdepth exec_yank) exec_flush boolean_pop exec_empty boolean_yank exec_do*count (in4 boolean_frominteger) in4 print_integer boolean_pop boolean_yank boolean_stackdepth integer_gt) (print_newline) integer_stackdepth tag_boolean_366) () (integer_lt exec_k () (exec_do*count () boolean_shove integer_lte integer_max exec_dup_times (print_exec () boolean_pop exec_stackdepth exec_do*while (exec_do*range (exec_swap (print_newline exec_yankdup integer_yankdup integer_yankdup) ())))))))
Lexicase best errors: [0 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 106
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_174} {:close 1, :instruction integer_dec} {:close 0, :instruction 15} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction tag_boolean_366} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_yank integer_shove boolean_and tagged_174 integer_dec 15 exec_do*times () integer_fromboolean boolean_empty integer_min exec_do*times (in4) integer_add boolean_dup boolean_or print_integer exec_shove (integer_inc integer_dup_items integer_rot integer_dup) integer_swap boolean_empty boolean_empty exec_while (exec_empty integer_empty boolean_flush boolean_xor exec_flush in3 integer_yank exec_yankdup boolean_not exec_rot (boolean_dup_items exec_y_when_autoconstructing () integer_pop integer_add exec_shove () exec_if (exec_do*while () exec_y () integer_swap exec_dup_times (integer_yankdup boolean_stackdepth exec_yank) exec_flush boolean_pop exec_empty boolean_yank exec_do*count (in4 boolean_frominteger) in4 print_integer boolean_pop boolean_yank boolean_stackdepth integer_gt) (print_newline) integer_stackdepth tag_boolean_366) () (integer_lt exec_k () (exec_do*count () boolean_shove integer_lte integer_max exec_dup_times (print_exec () boolean_pop exec_stackdepth exec_do*while (exec_do*range (exec_swap (print_newline exec_yankdup integer_yankdup integer_yankdup) ())))))))
Zero cases best errors: [0 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 106
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (77 77 188 232 76 233 233 498 187 77)
Population mean number of elite cases: 1.88
Count of perfect (error zero) individuals by case: (77 77 188 232 76 233 233 498 187 77)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_652} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction -6} {:close 0, :instruction print_exec} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove})
Best program: (integer_rot boolean_eq integer_gte in3 integer_mod exec_k_when_autoconstructing (print_integer boolean_stackdepth integer_lte exec_do*times (integer_gte integer_mult) integer_mult) (integer_shove boolean_and boolean_and integer_rot in3) integer_shove exec_dup_times (exec_if (boolean_or boolean_swap exec_s (integer_shove boolean_not) (boolean_stackdepth integer_inc print_integer exec_swap (exec_do*range (exec_if () (integer_dec) integer_empty tagged_652) integer_swap boolean_rot integer_yankdup exec_k (print_exec (print_integer integer_yank boolean_pop integer_stackdepth exec_dup_times () boolean_rot) integer_pop exec_k (boolean_empty) (exec_do*range (integer_yankdup) -6 print_exec (exec_flush)) integer_add boolean_empty exec_do*while (exec_empty integer_add) boolean_or integer_sub) (in4 integer_fromboolean exec_dup_items exec_yankdup integer_add boolean_shove)) ()) ()) ()))
Errors: [1 1 1 0 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 67
Size: 91
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 8.122
Median total errors in population: 9
Error averages by case: (0.923 0.923 0.812 0.768 0.924 0.767 0.767 0.502 0.813 0.923)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.518
Average program size in population (points): 97.189
Average percent parens in population: 0.259
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4715586
--- Timings ---
Current time: 1559593973604 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.1 seconds, 39.8%
Fitness Testing:      6.9 seconds, 38.5%
Report:               3.8 seconds, 21.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -33                
Correct output: -74                 | Program output: -23                
Correct output: -73                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: 28                 
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 49                 
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 49                 
Correct output: 6                   | Program output: 41                 
Correct output: 1                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 27                  | Program output: 75                 
Correct output: 8                   | Program output: 26                 
Correct output: 12                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 33                  | Program output: 34                 
Correct output: 40                  | Program output: 85                 
Correct output: 10                  | Program output: 64                 
Correct output: 21                  | Program output: 57                 
Correct output: 8                   | Program output: 39                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 87                 
Correct output: 9                   | Program output: 88                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: -85                 | Program output: -24                
Correct output: 7                   | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -80                 | Program output: 72                 
Correct output: -89                 | Program output: -89                
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -43                
Correct output: -65                 | Program output: 71                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: 58                 
Correct output: -100                | Program output: -11                
Correct output: -56                 | Program output: -32                
Correct output: -10                 | Program output: 77                 
Correct output: -44                 | Program output: 11                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -33                 | Program output: -25                
Correct output: -75                 | Program output: 89                 
Correct output: -7                  | Program output: 1                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -59                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: 35                 
Correct output: -94                 | Program output: 6                  
Correct output: -99                 | Program output: -30                
Correct output: -100                | Program output: 90                 
Correct output: -56                 | Program output: 33                 
Correct output: -60                 | Program output: 100                
Correct output: -29                 | Program output: 80                 
Correct output: -74                 | Program output: -23                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: 93                 
Correct output: 10                  | Program output: 28                 
Correct output: -62                 | Program output: -26                
Correct output: 46                  | Program output: 61                 
Correct output: -19                 | Program output: 48                 
Correct output: -34                 | Program output: 62                 
Correct output: -93                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -89                 | Program output: -89                
Correct output: -74                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: -86                 | Program output: 59                 
Correct output: -77                 | Program output: 85                 
Correct output: 6                   | Program output: 96                 
Correct output: -98                 | Program output: 46                 
Correct output: -76                 | Program output: -42                
Correct output: -99                 | Program output: 71                 
Correct output: -48                 | Program output: 23                 
Correct output: -91                 | Program output: 64                 
Correct output: -98                 | Program output: 1                  
Correct output: -90                 | Program output: -69                
Correct output: -25                 | Program output: -10                
Correct output: -33                 | Program output: 66                 
Correct output: -5                  | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup})
Lexicase best program: (integer_shove boolean_and integer_dec boolean_rot boolean_dup_items exec_eq exec_stackdepth exec_do*times (in4) exec_while (integer_stackdepth integer_add boolean_dup exec_eq) integer_lte integer_max print_integer integer_max exec_do*while (integer_rot boolean_flush exec_do*count () exec_k (integer_swap exec_yankdup integer_fromboolean exec_flush exec_y_when_autoconstructing (integer_sub exec_empty integer_empty integer_yank) integer_min boolean_flush boolean_invert_second_then_and in3 boolean_not exec_dup_times (integer_shove boolean_shove) print_newline) (boolean_dup_items exec_y_when_autoconstructing () boolean_shove exec_shove () exec_if (exec_do*times (integer_dec) integer_swap boolean_flush exec_swap (integer_inc integer_sub exec_yank) (exec_do*while () exec_pop () exec_dup_items exec_empty boolean_frominteger) print_integer boolean_stackdepth boolean_or integer_lt exec_s_when_autoconstructing () (boolean_shove integer_lte integer_eq) (integer_max print_exec () in4 integer_dup exec_do*range (print_integer print_newline exec_yankdup))) ())))
Lexicase best errors: [1 1 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 98
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 2, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup})
Zero cases best program: (integer_shove boolean_and integer_dec boolean_rot boolean_dup_items exec_eq exec_stackdepth exec_do*times (in4) exec_while (integer_stackdepth integer_add boolean_dup exec_eq) integer_lte integer_max print_integer integer_max exec_do*while (integer_rot boolean_flush exec_do*count () exec_k (integer_swap exec_yankdup integer_fromboolean exec_flush exec_y_when_autoconstructing (integer_sub exec_empty integer_empty integer_yank) integer_min boolean_flush boolean_invert_second_then_and in3 boolean_not exec_dup_times (integer_shove boolean_shove) print_newline) (boolean_dup_items exec_y_when_autoconstructing () boolean_shove exec_shove () exec_if (exec_do*times (integer_dec) integer_swap boolean_flush exec_swap (integer_inc integer_sub exec_yank) (exec_do*while () exec_pop () exec_dup_items exec_empty boolean_frominteger) print_integer boolean_stackdepth boolean_or integer_lt exec_s_when_autoconstructing () (boolean_shove integer_lte integer_eq) (integer_max print_exec () in4 integer_dup exec_do*range (print_integer print_newline exec_yankdup))) ())))
Zero cases best errors: [1 1 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 98
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 4 281 4 164 115 167 4 114 164)
Population mean number of elite cases: 1.30
Count of perfect (error zero) individuals by case: (283 4 281 4 164 115 167 4 114 164)
Population mean number of perfect (error zero) cases: 1.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction tagged_169} {:close 0, :instruction tagged_174} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_857} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction print_newline} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup})
Best program: (boolean_and tagged_169 tagged_174 integer_stackdepth integer_dec boolean_rot boolean_empty exec_eq exec_swap () (integer_stackdepth in4) integer_fromboolean exec_while (integer_add boolean_dup boolean_or print_integer integer_max integer_shove) exec_when (exec_y () integer_swap boolean_empty exec_dup_items integer_lt) exec_y (integer_min integer_fromboolean exec_dup (in2 exec_flush exec_y_when_autoconstructing (integer_dec integer_gte integer_lt exec_y_when_autoconstructing (tagged_857 integer_min exec_k () (print_newline) exec_pop (boolean_invert_second_then_and in3 integer_div integer_yank boolean_not exec_rot (boolean_shove) (exec_y_when_autoconstructing () exec_if (exec_s_when_autoconstructing (exec_do*times (exec_do*while (exec_swap (integer_yankdup integer_inc integer_dec) (integer_dup_items exec_do*while () exec_pop () boolean_invert_second_then_and boolean_pop integer_eq exec_s_when_autoconstructing () (boolean_xor) (boolean_frominteger) print_integer boolean_yank boolean_stackdepth integer_gt) exec_y (integer_lt integer_max exec_dup (boolean_invert_first_then_and print_exec () exec_pop (integer_dup exec_do*range (exec_yankdup))))))) () ()) ()) ()))))))
Errors: [1 1 1 1 0 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 80
Size: 116
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 8.7
Median total errors in population: 8
Error averages by case: (0.717 0.996 0.719 0.996 0.836 0.885 0.833 0.996 0.886 0.836)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.852
Average program size in population (points): 93.359
Average percent parens in population: 0.267
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5409188
--- Timings ---
Current time: 1559593976216 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.4 seconds, 41.5%
Fitness Testing:      7.7 seconds, 38.0%
Report:               4.0 seconds, 20.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 52                 
Correct output: 1                   | Program output: 13                 
Correct output: 6                   | Program output: 81                 
Correct output: 27                  | Program output: 68                 
Correct output: 8                   | Program output: 20                 
Correct output: 12                  | Program output: 14                 
Correct output: 38                  | Program output: 67                 
Correct output: 33                  | Program output: 73                 
Correct output: 40                  | Program output: 55                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 29                 
Correct output: 36                  | Program output: 48                 
Correct output: 7                   | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 43                 
Correct output: 29                  | Program output: 96                 
Correct output: 30                  | Program output: 46                 
Correct output: -85                 | Program output: 27                 
Correct output: 7                   | Program output: 54                 
Correct output: -48                 | Program output: 93                 
Correct output: -80                 | Program output: 6                  
Correct output: -89                 | Program output: 44                 
Correct output: 37                  | Program output: 90                 
Correct output: 1                   | Program output: 86                 
Correct output: -79                 | Program output: 82                 
Correct output: -47                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -75                 | Program output: 28                 
Correct output: -94                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -36                
Correct output: -81                 | Program output: -25                
Correct output: -89                 | Program output: 34                 
Correct output: -33                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: 91                 
Correct output: -100                | Program output: -25                
Correct output: -79                 | Program output: 39                 
Correct output: -39                 | Program output: 76                 
Correct output: -93                 | Program output: 93                 
Correct output: -94                 | Program output: 55                 
Correct output: -99                 | Program output: 75                 
Correct output: -100                | Program output: 84                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 47                 
Correct output: -29                 | Program output: 60                 
Correct output: -74                 | Program output: 59                 
Correct output: -62                 | Program output: 68                 
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 10                 
Correct output: -62                 | Program output: -35                
Correct output: 46                  | Program output: 47                 
Correct output: -19                 | Program output: -11                
Correct output: -34                 | Program output: 93                 
Correct output: -93                 | Program output: -67                
Correct output: -37                 | Program output: -5                 
Correct output: -89                 | Program output: 36                 
Correct output: -74                 | Program output: 98                 
Correct output: -100                | Program output: 22                 
Correct output: -98                 | Program output: 19                 
Correct output: 9                   | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -17                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -1                 
Correct output: -48                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: 46                 
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 16} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_526} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_502} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup})
Lexicase best program: (integer_yank exec_s_when_autoconstructing (exec_pop (integer_shove boolean_and in4 boolean_pop exec_yankdup integer_dec) integer_dup_items boolean_rot boolean_empty) (integer_dup exec_k (exec_eq) (exec_stackdepth exec_do*times (boolean_frominteger) in4)) (exec_while (integer_add boolean_yankdup boolean_dup in2 print_integer exec_rot (integer_fromboolean integer_max integer_rot boolean_empty exec_y (boolean_not integer_fromboolean boolean_empty exec_do*count (exec_flush integer_gte exec_k (boolean_invert_second_then_and in3 exec_empty boolean_not exec_rot (exec_flush) (boolean_shove) (boolean_dup_items print_newline integer_swap integer_empty exec_do*while (boolean_shove exec_shove () exec_if (integer_yankdup 16 integer_sub exec_yank) (exec_do*while () exec_pop () boolean_yank exec_y (boolean_pop exec_do*range (in1 exec_rot (exec_do*count (integer_lte) print_integer tag_boolean_526 boolean_yank exec_flush boolean_stackdepth tag_integer_502 integer_swap in3 boolean_shove integer_gt integer_fromboolean boolean_not exec_do*while (print_newline boolean_flush) boolean_xor in2) (in2 exec_yankdup) ())))))) ()))) () ())))
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 118
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 16} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_526} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_502} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup})
Zero cases best program: (integer_yank exec_s_when_autoconstructing (exec_pop (integer_shove boolean_and in4 boolean_pop exec_yankdup integer_dec) integer_dup_items boolean_rot boolean_empty) (integer_dup exec_k (exec_eq) (exec_stackdepth exec_do*times (boolean_frominteger) in4)) (exec_while (integer_add boolean_yankdup boolean_dup in2 print_integer exec_rot (integer_fromboolean integer_max integer_rot boolean_empty exec_y (boolean_not integer_fromboolean boolean_empty exec_do*count (exec_flush integer_gte exec_k (boolean_invert_second_then_and in3 exec_empty boolean_not exec_rot (exec_flush) (boolean_shove) (boolean_dup_items print_newline integer_swap integer_empty exec_do*while (boolean_shove exec_shove () exec_if (integer_yankdup 16 integer_sub exec_yank) (exec_do*while () exec_pop () boolean_yank exec_y (boolean_pop exec_do*range (in1 exec_rot (exec_do*count (integer_lte) print_integer tag_boolean_526 boolean_yank exec_flush boolean_stackdepth tag_integer_502 integer_swap in3 boolean_shove integer_gt integer_fromboolean boolean_not exec_do*while (print_newline boolean_flush) boolean_xor in2) (in2 exec_yankdup) ())))))) ()))) () ())))
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 118
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 149 137 142 103 107 140 137 140 388)
Population mean number of elite cases: 1.58
Count of perfect (error zero) individuals by case: (137 149 137 142 103 107 140 137 140 388)
Population mean number of perfect (error zero) cases: 1.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_boolean_736} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_if} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add})
Best program: (exec_do*while () boolean_dup_times integer_mod boolean_yankdup integer_inc boolean_frominteger in2 exec_k_when_autoconstructing (boolean_xor print_integer integer_lte exec_do*times (boolean_shove integer_min boolean_rot integer_yankdup integer_shove exec_pop () tag_boolean_736 integer_dup integer_lt exec_yankdup in3) integer_swap integer_dup exec_eq integer_inc exec_swap (boolean_xor exec_y (exec_do*range (boolean_stackdepth exec_dup_items exec_if () (print_boolean) exec_k (exec_y () tagged_652) (exec_k (boolean_and print_integer boolean_pop integer_yankdup exec_when (print_integer)) (integer_sub) integer_stackdepth integer_mult exec_dup_times () integer_swap integer_pop exec_k (integer_dup print_exec (integer_add exec_rot (tag_exec_834 (exec_empty exec_empty) boolean_or integer_sub) (exec_when () exec_dup_items boolean_rot integer_add integer_add) ())) ())))) ()) ())
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 66
Size: 93
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 8.42
Median total errors in population: 8
Error averages by case: (0.863 0.851 0.863 0.858 0.897 0.893 0.86 0.863 0.86 0.612)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.453
Average program size in population (points): 96.941
Average percent parens in population: 0.274
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6069966
--- Timings ---
Current time: 1559593978971 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.7 seconds, 42.5%
Fitness Testing:      8.4 seconds, 36.9%
Report:               4.6 seconds, 20.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: 28                 
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 48                 
Correct output: 6                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 26                 
Correct output: 12                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 80                 
Correct output: 10                  | Program output: 64                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 41                 
Correct output: -48                 | Program output: -48                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -45                
Correct output: -100                | Program output: -11                
Correct output: -56                 | Program output: -47                
Correct output: -10                 | Program output: 60                 
Correct output: -44                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -33                 | Program output: -25                
Correct output: -75                 | Program output: 80                 
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -1                 
Correct output: -94                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -80                
Correct output: -56                 | Program output: 33                 
Correct output: -60                 | Program output: 92                 
Correct output: -29                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: 69                 
Correct output: 10                  | Program output: 28                 
Correct output: -62                 | Program output: -62                
Correct output: 46                  | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -37                
Correct output: -89                 | Program output: -89                
Correct output: -74                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: -86                 | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 20                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -42                
Correct output: -99                 | Program output: -57                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -69                
Correct output: -25                 | Program output: -10                
Correct output: -33                 | Program output: 66                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add})
Lexicase best program: (in3 integer_add integer_mod in4 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_flush boolean_yankdup -49 exec_eq boolean_or boolean_eq exec_s (exec_yank) (integer_shove integer_shove) () boolean_rot) (exec_swap (tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_inc boolean_or integer_empty tagged_652) (exec_dup_times (boolean_rot integer_yankdup integer_lte boolean_pop exec_y (boolean_empty exec_k (integer_dup_items print_integer in3 integer_yank integer_max boolean_stackdepth integer_pop integer_eq exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_swap)) (exec_k (boolean_pop print_exec (in1 boolean_empty integer_mult tag_exec_834 (exec_empty) exec_if () (boolean_empty integer_gt boolean_or boolean_or integer_dup_times) boolean_rot exec_do*while (integer_add integer_add))) ())))))) ())
Lexicase best errors: [0 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 94
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add})
Zero cases best program: (in3 integer_add integer_mod in4 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_flush boolean_yankdup -49 exec_eq boolean_or boolean_eq exec_s (exec_yank) (integer_shove integer_shove) () boolean_rot) (exec_swap (tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_inc boolean_or integer_empty tagged_652) (exec_dup_times (boolean_rot integer_yankdup integer_lte boolean_pop exec_y (boolean_empty exec_k (integer_dup_items print_integer in3 integer_yank integer_max boolean_stackdepth integer_pop integer_eq exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_swap)) (exec_k (boolean_pop print_exec (in1 boolean_empty integer_mult tag_exec_834 (exec_empty) exec_if () (boolean_empty integer_gt boolean_or boolean_or integer_dup_times) boolean_rot exec_do*while (integer_add integer_add))) ())))))) ())
Zero cases best errors: [0 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 94
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 135 105 145 132 105 190 134 191 432)
Population mean number of elite cases: 1.67
Count of perfect (error zero) individuals by case: (103 135 105 145 132 105 190 134 191 432)
Population mean number of perfect (error zero) cases: 1.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add})
Best program: (in3 integer_add integer_mod in4 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_flush boolean_yankdup -49 exec_eq boolean_or boolean_eq exec_s (exec_yank) (integer_shove integer_shove) () boolean_rot) (exec_swap (tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_inc boolean_or integer_empty tagged_652) (exec_dup_times (boolean_rot integer_yankdup integer_lte boolean_pop exec_y (boolean_empty exec_k (integer_dup_items print_integer in3 integer_yank integer_max boolean_stackdepth integer_pop integer_eq exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_swap)) (exec_k (boolean_pop print_exec (in1 boolean_empty integer_mult tag_exec_834 (exec_empty) exec_if () (boolean_empty integer_gt boolean_or boolean_or integer_dup_times) boolean_rot exec_do*while (integer_add integer_add))) ())))))) ())
Errors: [0 1 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 70
Size: 94
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 8.328
Median total errors in population: 9
Error averages by case: (0.897 0.865 0.895 0.855 0.868 0.895 0.81 0.866 0.809 0.568)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.049
Average program size in population (points): 92.987
Average percent parens in population: 0.271
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6704632
--- Timings ---
Current time: 1559593982149 milliseconds
Total Time:          25.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.1 seconds, 43.4%
Fitness Testing:      9.1 seconds, 35.7%
Report:               5.3 seconds, 20.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: 28                 
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 48                 
Correct output: 6                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 26                 
Correct output: 12                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 80                 
Correct output: 10                  | Program output: 64                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 41                 
Correct output: -48                 | Program output: -48                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -45                
Correct output: -100                | Program output: -11                
Correct output: -56                 | Program output: -47                
Correct output: -10                 | Program output: 60                 
Correct output: -44                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -33                 | Program output: -25                
Correct output: -75                 | Program output: 80                 
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -1                 
Correct output: -94                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -80                
Correct output: -56                 | Program output: 33                 
Correct output: -60                 | Program output: 92                 
Correct output: -29                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: 69                 
Correct output: 10                  | Program output: 28                 
Correct output: -62                 | Program output: -62                
Correct output: 46                  | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -37                
Correct output: -89                 | Program output: -89                
Correct output: -74                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: -86                 | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 20                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -42                
Correct output: -99                 | Program output: -57                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -69                
Correct output: -25                 | Program output: -10                
Correct output: -33                 | Program output: 66                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add})
Lexicase best program: (in3 integer_add integer_mod in4 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer exec_y_when_autoconstructing (integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_flush boolean_yankdup -49 exec_eq boolean_eq exec_s (exec_empty) (exec_yank) (integer_shove integer_shove)) (boolean_rot) exec_swap (tag_boolean_448 boolean_swap exec_dup_items integer_yankdup boolean_or integer_empty tagged_652) (exec_dup_times (boolean_rot integer_yankdup integer_lte boolean_pop exec_y (boolean_empty exec_k (integer_dup_items print_integer exec_do*times (in3 integer_yank boolean_swap boolean_stackdepth integer_pop integer_eq exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_swap)) exec_k (boolean_pop in1 boolean_empty integer_mult tag_exec_834 (boolean_frominteger exec_empty) exec_if () (boolean_empty integer_gt boolean_or boolean_or integer_dup_times) boolean_rot exec_do*while (exec_flush integer_add integer_add)) ()) ()))))) ())
Lexicase best errors: [0 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 97
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add})
Zero cases best program: (in3 integer_add integer_mod in4 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer exec_y_when_autoconstructing (integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_flush boolean_yankdup -49 exec_eq boolean_eq exec_s (exec_empty) (exec_yank) (integer_shove integer_shove)) (boolean_rot) exec_swap (tag_boolean_448 boolean_swap exec_dup_items integer_yankdup boolean_or integer_empty tagged_652) (exec_dup_times (boolean_rot integer_yankdup integer_lte boolean_pop exec_y (boolean_empty exec_k (integer_dup_items print_integer exec_do*times (in3 integer_yank boolean_swap boolean_stackdepth integer_pop integer_eq exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_swap)) exec_k (boolean_pop in1 boolean_empty integer_mult tag_exec_834 (boolean_frominteger exec_empty) exec_if () (boolean_empty integer_gt boolean_or boolean_or integer_dup_times) boolean_rot exec_do*while (exec_flush integer_add integer_add)) ()) ()))))) ())
Zero cases best errors: [0 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 97
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 210 220 207 209 210 202 200 205 136)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (226 210 220 207 209 210 202 200 205 136)
Population mean number of perfect (error zero) cases: 2.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add})
Best program: (in3 integer_add integer_mod in4 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush in3) (boolean_yankdup -49 exec_eq boolean_or boolean_eq exec_s (integer_shove boolean_rot) (exec_swap (tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_inc boolean_or integer_empty exec_dup_times (boolean_rot integer_lte boolean_pop exec_y (boolean_empty exec_k (integer_dup_items print_integer in3 integer_yank integer_max integer_pop integer_eq exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_swap)) (exec_k (boolean_pop print_exec (in1 boolean_empty integer_mult tag_exec_834 (exec_empty) exec_if () (boolean_empty integer_gt boolean_or boolean_or boolean_rot exec_do*while (integer_add integer_add)))) ())))) ()) ()) ()) ())
Errors: [0 0 0 0 0 0 1 1 0 1]
Total: 3
Mean: 0.3
Genome size: 62
Size: 86
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 7.975
Median total errors in population: 9
Error averages by case: (0.774 0.79 0.78 0.793 0.791 0.79 0.798 0.8 0.795 0.864)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.902
Average program size in population (points): 96.913
Average percent parens in population: 0.259
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7671881
--- Timings ---
Current time: 1559593985452 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.3 seconds, 42.6%
Fitness Testing:     10.2 seconds, 35.1%
Report:               6.4 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: 28                 
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 48                 
Correct output: 6                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 26                 
Correct output: 12                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 80                 
Correct output: 10                  | Program output: 64                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 69                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 41                 
Correct output: -48                 | Program output: -48                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -59                
Correct output: -66                 | Program output: -45                
Correct output: -100                | Program output: -11                
Correct output: -56                 | Program output: -47                
Correct output: -10                 | Program output: 60                 
Correct output: -44                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -33                 | Program output: -25                
Correct output: -75                 | Program output: 80                 
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -1                 
Correct output: -94                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -80                
Correct output: -56                 | Program output: 33                 
Correct output: -60                 | Program output: 92                 
Correct output: -29                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: 69                 
Correct output: 10                  | Program output: 28                 
Correct output: -62                 | Program output: -62                
Correct output: 46                  | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -37                
Correct output: -89                 | Program output: -89                
Correct output: -74                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: -86                 | Program output: 15                 
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 20                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -42                
Correct output: -99                 | Program output: -57                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -69                
Correct output: -25                 | Program output: -10                
Correct output: -33                 | Program output: 66                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add})
Lexicase best program: (in3 integer_mod in4 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_flush boolean_yank boolean_yankdup -49 boolean_yank exec_eq boolean_or boolean_eq exec_s (exec_yank) (integer_shove integer_shove) () exec_swap (tag_boolean_448 boolean_swap exec_dup_items boolean_empty boolean_invert_first_then_and) (boolean_or integer_empty tagged_652) exec_dup_times (boolean_rot integer_lte) integer_lte in1 exec_rot (boolean_pop exec_y (boolean_empty exec_k (integer_dup_items print_integer in3 integer_yank integer_max boolean_stackdepth integer_pop integer_eq integer_min exec_k_when_autoconstructing (boolean_dup_times) (in3 boolean_rot integer_swap)) (boolean_pop print_exec (exec_k (in1 boolean_empty integer_mult tag_exec_834 (exec_empty) exec_if () (boolean_empty integer_gt boolean_or boolean_or integer_dup_times) boolean_rot exec_do*while (integer_add)) ())))) () ()) ()) ())
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 100
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add})
Zero cases best program: (in3 integer_mod in4 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_flush boolean_yank boolean_yankdup -49 boolean_yank exec_eq boolean_or boolean_eq exec_s (exec_yank) (integer_shove integer_shove) () exec_swap (tag_boolean_448 boolean_swap exec_dup_items boolean_empty boolean_invert_first_then_and) (boolean_or integer_empty tagged_652) exec_dup_times (boolean_rot integer_lte) integer_lte in1 exec_rot (boolean_pop exec_y (boolean_empty exec_k (integer_dup_items print_integer in3 integer_yank integer_max boolean_stackdepth integer_pop integer_eq integer_min exec_k_when_autoconstructing (boolean_dup_times) (in3 boolean_rot integer_swap)) (boolean_pop print_exec (exec_k (in1 boolean_empty integer_mult tag_exec_834 (exec_empty) exec_if () (boolean_empty integer_gt boolean_or boolean_or integer_dup_times) boolean_rot exec_do*while (integer_add)) ())))) () ()) ()) ())
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 100
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 316 534 148 148 63 509 621 65 315)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (313 316 534 148 148 63 509 621 65 315)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add})
Best program: (in3 in4 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer integer_lte exec_swap (exec_s_when_autoconstructing (integer_flush integer_flush boolean_yankdup -49 exec_eq boolean_or boolean_eq exec_eq exec_s (integer_shove) () (integer_fromboolean boolean_rot) exec_swap (tag_boolean_448 boolean_swap boolean_empty integer_swap boolean_or exec_dup_items) (tagged_652) exec_dup_times (boolean_eq boolean_rot integer_yankdup exec_do*times (integer_lte boolean_pop exec_y (boolean_empty exec_k (integer_dup_items print_integer integer_yank integer_max boolean_stackdepth boolean_not exec_dup (integer_pop integer_eq boolean_invert_second_then_and) exec_k_when_autoconstructing (boolean_rot boolean_flush exec_k (boolean_pop print_exec (in1 in1 integer_gte boolean_empty integer_mult tag_exec_834 (exec_empty) exec_if () (boolean_empty integer_gt boolean_or integer_dup_times) exec_do*while (integer_add))) ()) ()) ())))) () ()) ()) ())
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 69
Size: 97
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 6.968
Median total errors in population: 7
Error averages by case: (0.687 0.684 0.466 0.852 0.852 0.937 0.491 0.379 0.935 0.685)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.644
Average program size in population (points): 97.007
Average percent parens in population: 0.261
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8764689
--- Timings ---
Current time: 1559593988064 milliseconds
Total Time:          32.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.5 seconds, 41.9%
Fitness Testing:     11.3 seconds, 35.1%
Report:               7.3 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 52                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 20                 
Correct output: 12                  | Program output: 14                 
Correct output: 38                  | Program output: 67                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 29                 
Correct output: 36                  | Program output: 48                 
Correct output: 7                   | Program output: 50                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 61                 
Correct output: 30                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 41                 
Correct output: -48                 | Program output: 40                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: 40                 
Correct output: 37                  | Program output: 85                 
Correct output: 1                   | Program output: 37                 
Correct output: -79                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -20                
Correct output: -75                 | Program output: 28                 
Correct output: -94                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -36                
Correct output: -81                 | Program output: -25                
Correct output: -89                 | Program output: 34                 
Correct output: -33                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: 76                 
Correct output: -93                 | Program output: -1                 
Correct output: -94                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -80                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 47                 
Correct output: -29                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 10                 
Correct output: -62                 | Program output: -62                
Correct output: 46                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -5                 
Correct output: -89                 | Program output: -34                
Correct output: -74                 | Program output: -36                
Correct output: -100                | Program output: 6                  
Correct output: -98                 | Program output: 19                 
Correct output: 9                   | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -57                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 1, :instruction tag_boolean_82} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add})
Lexicase best program: (in3 integer_mod tag_boolean_82 in2 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_add integer_flush boolean_yankdup -49 exec_eq exec_shove () exec_do*times (boolean_or boolean_eq exec_s (integer_shove) () (integer_fromboolean boolean_rot) tag_boolean_448 boolean_swap exec_dup_items boolean_or integer_empty exec_dup_items) tagged_652) (exec_dup_times (boolean_eq boolean_rot integer_yankdup exec_do*times (integer_lte boolean_pop exec_y (boolean_empty exec_k (boolean_pop exec_k (print_integer integer_yank integer_max boolean_stackdepth exec_dup (integer_eq integer_pop integer_fromboolean) integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (exec_k (boolean_rot integer_swap) () exec_k (boolean_pop print_exec (in1 integer_gte integer_mult tag_exec_834 (exec_empty) exec_if () (boolean_empty boolean_yank integer_gt boolean_or boolean_or integer_dup_times) exec_do*while (integer_add))) ()) ())) ()))))) ())
Lexicase best errors: [0 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 105
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 1, :instruction tag_boolean_82} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_652} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add})
Zero cases best program: (in3 integer_mod tag_boolean_82 in2 boolean_yankdup integer_min exec_k_when_autoconstructing (print_integer integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_add integer_flush boolean_yankdup -49 exec_eq exec_shove () exec_do*times (boolean_or boolean_eq exec_s (integer_shove) () (integer_fromboolean boolean_rot) tag_boolean_448 boolean_swap exec_dup_items boolean_or integer_empty exec_dup_items) tagged_652) (exec_dup_times (boolean_eq boolean_rot integer_yankdup exec_do*times (integer_lte boolean_pop exec_y (boolean_empty exec_k (boolean_pop exec_k (print_integer integer_yank integer_max boolean_stackdepth exec_dup (integer_eq integer_pop integer_fromboolean) integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (exec_k (boolean_rot integer_swap) () exec_k (boolean_pop print_exec (in1 integer_gte integer_mult tag_exec_834 (exec_empty) exec_if () (boolean_empty boolean_yank integer_gt boolean_or boolean_or integer_dup_times) exec_do*while (integer_add))) ()) ())) ()))))) ())
Zero cases best errors: [0 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 105
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 224 185 337 199 189 336 195 554 224)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (333 224 185 337 199 189 336 195 554 224)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_652} {:close 1, :instruction 60} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while})
Best program: (in3 integer_mod integer_yank in2 boolean_yankdup integer_min integer_max print_integer integer_dup_items integer_lte exec_s_when_autoconstructing (integer_flush in3) (integer_flush -49 exec_eq boolean_or boolean_eq exec_s (exec_yank) (integer_shove) () integer_fromboolean exec_swap (tag_boolean_448 exec_dup_items boolean_empty integer_swap boolean_or integer_empty exec_dup_items) (tagged_652) 60) (exec_dup_times (integer_yank boolean_eq boolean_rot integer_yankdup exec_do*times (integer_lte boolean_pop exec_y (boolean_empty exec_k (exec_if () (print_integer integer_dup_items integer_yank boolean_stackdepth exec_dup (integer_pop integer_eq boolean_invert_second_then_and) print_exec (boolean_dup_times) boolean_rot boolean_flush exec_k (boolean_yankdup boolean_pop print_exec (in1 integer_gte boolean_empty integer_mult tag_exec_834 (boolean_rot) exec_empty) boolean_empty integer_gt print_boolean) (boolean_or print_exec (boolean_or integer_dup_times) exec_do*while ()))) ())))))
Errors: [0 1 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 75
Size: 99
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 7.224
Median total errors in population: 7
Error averages by case: (0.667 0.776 0.815 0.663 0.801 0.811 0.664 0.805 0.446 0.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.686
Average program size in population (points): 97.629
Average percent parens in population: 0.265
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.368
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9779312
--- Timings ---
Current time: 1559593991333 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.7 seconds, 42.3%
Fitness Testing:     12.4 seconds, 35.6%
Report:               7.6 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -33                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 28                 
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 39                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 43                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 14                 
Correct output: 25                  | Program output: 28                 
Correct output: 36                  | Program output: 62                 
Correct output: 7                   | Program output: 14                 
Correct output: 47                  | Program output: 57                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 43                 
Correct output: 30                  | Program output: 62                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 7                  
Correct output: -48                 | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -27                
Correct output: 37                  | Program output: 42                 
Correct output: 1                   | Program output: 27                 
Correct output: -79                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -51                
Correct output: -100                | Program output: 55                 
Correct output: -56                 | Program output: -47                
Correct output: -10                 | Program output: 60                 
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -61                
Correct output: -89                 | Program output: 37                 
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -41                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -1                 
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -42                
Correct output: -51                 | Program output: -15                
Correct output: 10                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 46                  | Program output: 46                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: 13                 
Correct output: -89                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: 9                   | Program output: 42                 
Correct output: -86                 | Program output: 12                 
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 8                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 12                 
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -30                
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -8                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_while} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_652} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 2, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot})
Lexicase best program: (in3 exec_while () integer_mod in4 boolean_dup in2 boolean_yankdup exec_do*times (integer_min integer_dup exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush print_boolean boolean_yankdup -49 exec_eq boolean_or boolean_invert_second_then_and boolean_eq exec_s (integer_fromboolean) (integer_shove) () exec_eq exec_dup_times (boolean_rot) tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) (print_integer tagged_652) (60) integer_add) (exec_dup_times (boolean_eq boolean_rot integer_yankdup exec_do*times (integer_lte exec_y (boolean_empty integer_dec)) exec_k (integer_dup_items boolean_and integer_max boolean_stackdepth exec_dup (integer_gte integer_pop integer_eq boolean_invert_second_then_and) exec_k_when_autoconstructing (boolean_rot integer_dup_items integer_swap) () boolean_flush integer_pop exec_k (boolean_pop print_exec (in1 integer_gte boolean_empty integer_mult tag_exec_834 (integer_fromboolean) exec_dup_times (exec_empty) integer_div exec_do*times (exec_if () (boolean_empty print_exec ()) integer_gt boolean_or boolean_or integer_dup_times) exec_do*while (integer_add exec_rot () () ()))) ()) ()))))
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 119
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_while} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_652} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 2, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot})
Zero cases best program: (in3 exec_while () integer_mod in4 boolean_dup in2 boolean_yankdup exec_do*times (integer_min integer_dup exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush print_boolean boolean_yankdup -49 exec_eq boolean_or boolean_invert_second_then_and boolean_eq exec_s (integer_fromboolean) (integer_shove) () exec_eq exec_dup_times (boolean_rot) tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) (print_integer tagged_652) (60) integer_add) (exec_dup_times (boolean_eq boolean_rot integer_yankdup exec_do*times (integer_lte exec_y (boolean_empty integer_dec)) exec_k (integer_dup_items boolean_and integer_max boolean_stackdepth exec_dup (integer_gte integer_pop integer_eq boolean_invert_second_then_and) exec_k_when_autoconstructing (boolean_rot integer_dup_items integer_swap) () boolean_flush integer_pop exec_k (boolean_pop print_exec (in1 integer_gte boolean_empty integer_mult tag_exec_834 (integer_fromboolean) exec_dup_times (exec_empty) integer_div exec_do*times (exec_if () (boolean_empty print_exec ()) integer_gt boolean_or boolean_or integer_dup_times) exec_do*while (integer_add exec_rot () () ()))) ()) ()))))
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 119
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (118 260 116 335 116 334 241 570 341 341)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (118 260 116 335 116 334 241 570 341 341)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction -49} {:close 0, :instruction tag_integer_289} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_652} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (in3 integer_mult integer_add integer_mod in1 boolean_yank integer_min print_integer exec_stackdepth exec_shove () integer_flush in3 integer_flush exec_do*while (-49 tag_integer_289 exec_eq exec_yank) integer_shove boolean_rot exec_swap (integer_swap tag_boolean_448 boolean_swap boolean_empty exec_if (boolean_or integer_empty tagged_652) (boolean_rot integer_yankdup integer_lte integer_dup_items boolean_pop exec_y (integer_yank) integer_max boolean_empty exec_k (integer_dup_items print_integer exec_rot (boolean_and integer_yank print_boolean boolean_and integer_max boolean_stackdepth integer_eq exec_k_when_autoconstructing (integer_swap) () exec_k (boolean_pop exec_k () () integer_yank print_exec (in1 boolean_empty boolean_pop integer_mult exec_empty) exec_if () (boolean_or exec_while (boolean_or integer_dup_times) boolean_rot exec_do*while (integer_add integer_add exec_k_when_autoconstructing () ()))) ()) () ()) ())) ())
Errors: [0 1 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 71
Size: 97
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.228
Median total errors in population: 7
Error averages by case: (0.882 0.74 0.884 0.665 0.884 0.666 0.759 0.43 0.659 0.659)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.016
Average program size in population (points): 103.708
Average percent parens in population: 0.266
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.359
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10825169
--- Timings ---
Current time: 1559593994289 milliseconds
Total Time:          38.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.9 seconds, 41.7%
Fitness Testing:     13.4 seconds, 35.2%
Report:               8.7 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 39                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 28                 
Correct output: 36                  | Program output: 48                 
Correct output: 7                   | Program output: 14                 
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 43                 
Correct output: 30                  | Program output: 46                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 7                  
Correct output: -48                 | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -27                
Correct output: 37                  | Program output: 42                 
Correct output: 1                   | Program output: 27                 
Correct output: -79                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -61                
Correct output: -89                 | Program output: 34                 
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -42                
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 10                 
Correct output: -62                 | Program output: -62                
Correct output: 46                  | Program output: 46                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -5                 
Correct output: -89                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: 9                   | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction tag_exec_735} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot})
Lexicase best program: (in3 integer_mod in4 in1 in2 boolean_yankdup exec_do*times (integer_min print_integer exec_s_when_autoconstructing (integer_flush print_boolean integer_flush boolean_yankdup -49 exec_eq boolean_or boolean_eq boolean_dup_items exec_s (integer_fromboolean) (integer_shove) () integer_empty exec_flush exec_dup_times (boolean_rot) tag_boolean_448 boolean_swap exec_dup_items exec_s (integer_swap exec_dup_items) (print_integer 60) (integer_add) boolean_rot integer_yankdup integer_lte exec_y (boolean_rot integer_dec)) (integer_dup_items print_integer integer_max integer_sub boolean_stackdepth boolean_shove exec_dup (integer_pop integer_eq boolean_invert_second_then_and) exec_k_when_autoconstructing (exec_swap (boolean_dup_times) (exec_k (tag_exec_735 () boolean_rot integer_dup_items integer_swap) () boolean_flush exec_flush integer_pop integer_add) exec_k (boolean_pop print_exec (integer_gt in1 boolean_empty integer_mult tag_exec_834 (exec_dup_times (exec_dup (exec_if () (boolean_empty integer_gt boolean_or exec_yankdup boolean_or integer_dup_times) integer_add exec_rot () () ()))))) ()) ()) ()))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 114
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction tag_exec_735} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot})
Zero cases best program: (in3 integer_mod in4 in1 in2 boolean_yankdup exec_do*times (integer_min print_integer exec_s_when_autoconstructing (integer_flush print_boolean integer_flush boolean_yankdup -49 exec_eq boolean_or boolean_eq boolean_dup_items exec_s (integer_fromboolean) (integer_shove) () integer_empty exec_flush exec_dup_times (boolean_rot) tag_boolean_448 boolean_swap exec_dup_items exec_s (integer_swap exec_dup_items) (print_integer 60) (integer_add) boolean_rot integer_yankdup integer_lte exec_y (boolean_rot integer_dec)) (integer_dup_items print_integer integer_max integer_sub boolean_stackdepth boolean_shove exec_dup (integer_pop integer_eq boolean_invert_second_then_and) exec_k_when_autoconstructing (exec_swap (boolean_dup_times) (exec_k (tag_exec_735 () boolean_rot integer_dup_items integer_swap) () boolean_flush exec_flush integer_pop integer_add) exec_k (boolean_pop print_exec (integer_gt in1 boolean_empty integer_mult tag_exec_834 (exec_dup_times (exec_dup (exec_if () (boolean_empty integer_gt boolean_or exec_yankdup boolean_or integer_dup_times) integer_add exec_rot () () ()))))) ()) ()) ()))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 114
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 242 328 288 330 230 498 290 261 330)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (330 242 328 288 330 230 498 290 261 330)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 2, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 3, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_701} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add})
Best program: (in3 integer_mod exec_k_when_autoconstructing (in1) (in2 boolean_yankdup integer_min integer_min exec_k_when_autoconstructing (integer_empty print_integer exec_k (exec_dup_items integer_lte integer_flush exec_do*range (boolean_yankdup -49 boolean_or boolean_eq exec_yank) integer_shove) () in2 integer_eq boolean_rot) (integer_add)) exec_swap (boolean_swap exec_dup_items exec_y ()) () integer_swap boolean_or integer_empty boolean_not exec_dup_items exec_dup_times (exec_eq boolean_eq tagged_701 integer_min integer_yankdup exec_do*times (integer_lte boolean_pop boolean_yank) exec_y (boolean_empty integer_dup_items print_integer integer_max boolean_stackdepth integer_swap) exec_dup (integer_pop exec_empty print_integer) integer_eq boolean_invert_second_then_and) boolean_dup_times integer_swap boolean_flush exec_k (exec_do*range (boolean_pop print_exec (boolean_dup_items in1 integer_dup_times integer_swap integer_gte boolean_empty integer_swap tag_exec_834 (exec_when (exec_if () (exec_do*count (integer_gt boolean_or boolean_or boolean_and) integer_dup_times) exec_do*while (integer_add)))))) ())
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 83
Size: 108
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.873
Median total errors in population: 7
Error averages by case: (0.67 0.758 0.672 0.712 0.67 0.77 0.502 0.71 0.739 0.67)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.036
Average program size in population (points): 104.606
Average percent parens in population: 0.272
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.353
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11805905
--- Timings ---
Current time: 1559593997103 milliseconds
Total Time:          41.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.1 seconds, 41.8%
Fitness Testing:     14.4 seconds, 35.0%
Report:               9.4 seconds, 22.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 328
Test mean error for best: 0.32800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: 2                  
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 30                 
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 39                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 43                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 14                 
Correct output: 25                  | Program output: 28                 
Correct output: 36                  | Program output: 62                 
Correct output: 7                   | Program output: 14                 
Correct output: 47                  | Program output: 57                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 43                 
Correct output: 30                  | Program output: 62                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 7                  
Correct output: -48                 | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -27                
Correct output: 37                  | Program output: 42                 
Correct output: 1                   | Program output: 27                 
Correct output: -79                 | Program output: 36                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: 15                 
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -61                
Correct output: -89                 | Program output: 37                 
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -25                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -42                
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 12                 
Correct output: -62                 | Program output: -35                
Correct output: 46                  | Program output: 46                 
Correct output: -19                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -67                
Correct output: -37                 | Program output: -5                 
Correct output: -89                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: 9                   | Program output: 42                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 8                  
Correct output: -98                 | Program output: -17                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction tag_exec_735} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot})
Lexicase best program: (in3 integer_mod in4 in1 exec_swap (in2 boolean_yankdup exec_do*times (integer_min print_integer exec_s_when_autoconstructing (integer_flush print_boolean integer_flush -49 exec_eq boolean_or boolean_dup_items integer_fromboolean) (integer_empty integer_pop exec_dup_times (boolean_rot) boolean_swap exec_dup_items exec_s (integer_swap exec_dup_items) (print_integer 60) (integer_add) boolean_rot integer_yankdup integer_lte exec_y (boolean_rot integer_dec)) (integer_dup_items print_integer integer_max integer_sub boolean_stackdepth boolean_shove exec_dup (integer_pop integer_eq boolean_invert_second_then_and) exec_k_when_autoconstructing (exec_swap (boolean_dup_times) (exec_k (tag_exec_735 () boolean_rot in1 integer_swap) () boolean_flush exec_k_when_autoconstructing (exec_flush integer_pop integer_add) (integer_add exec_k (print_exec (integer_gt in1 boolean_empty integer_mult tag_exec_834 (boolean_pop exec_dup_times (exec_do*count (exec_if () (boolean_empty integer_gt boolean_or exec_yankdup integer_dup_times) integer_add exec_rot () () ()))))) ()))) ()))) ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 112
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction tag_exec_735} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_834} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot})
Zero cases best program: (in3 integer_mod in4 in1 exec_swap (in2 boolean_yankdup exec_do*times (integer_min print_integer exec_s_when_autoconstructing (integer_flush print_boolean integer_flush -49 exec_eq boolean_or boolean_dup_items integer_fromboolean) (integer_empty integer_pop exec_dup_times (boolean_rot) boolean_swap exec_dup_items exec_s (integer_swap exec_dup_items) (print_integer 60) (integer_add) boolean_rot integer_yankdup integer_lte exec_y (boolean_rot integer_dec)) (integer_dup_items print_integer integer_max integer_sub boolean_stackdepth boolean_shove exec_dup (integer_pop integer_eq boolean_invert_second_then_and) exec_k_when_autoconstructing (exec_swap (boolean_dup_times) (exec_k (tag_exec_735 () boolean_rot in1 integer_swap) () boolean_flush exec_k_when_autoconstructing (exec_flush integer_pop integer_add) (integer_add exec_k (print_exec (integer_gt in1 boolean_empty integer_mult tag_exec_834 (boolean_pop exec_dup_times (exec_do*count (exec_if () (boolean_empty integer_gt boolean_or exec_yankdup integer_dup_times) integer_add exec_rot () () ()))))) ()))) ()))) ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 112
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (438 648 292 536 305 341 440 305 288 535)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (438 648 292 536 305 341 440 305 288 535)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot})
Best program: (in3 integer_mod in4 in3 in1 in2 boolean_yankdup exec_do*times (integer_min print_integer exec_s_when_autoconstructing (integer_flush print_boolean integer_flush boolean_yankdup -49 exec_eq boolean_or boolean_eq boolean_dup_items exec_s (integer_fromboolean) (integer_shove) () integer_empty exec_flush exec_dup_times (boolean_rot) tag_boolean_448 boolean_swap exec_dup_items exec_s (integer_swap exec_dup_items) (print_integer integer_add) (boolean_rot integer_yankdup integer_lte exec_y (boolean_rot integer_dec)) integer_dup_items print_integer integer_max integer_sub boolean_stackdepth boolean_shove exec_dup (integer_pop integer_eq boolean_invert_second_then_and) exec_k_when_autoconstructing (exec_swap (boolean_dup_times) (exec_k (boolean_rot integer_dup_items integer_swap) () boolean_flush boolean_dup_items exec_flush integer_pop integer_add) exec_k (boolean_and boolean_pop print_exec (print_boolean integer_gt in1 boolean_empty tag_exec_834 (exec_dup (exec_if () (integer_gt boolean_or exec_yankdup boolean_or integer_dup_times) integer_add exec_rot () () ())))) ()) ()) () ()))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 81
Size: 111
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 5.872
Median total errors in population: 5
Error averages by case: (0.562 0.352 0.708 0.464 0.695 0.659 0.56 0.695 0.712 0.465)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 81.143
Average program size in population (points): 111.742
Average percent parens in population: 0.273
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 12628439
--- Timings ---
Current time: 1559593999431 milliseconds
Total Time:          43.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.3 seconds, 42.0%
Fitness Testing:     15.2 seconds, 34.8%
Report:              10.0 seconds, 23.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 275
Test mean error for best: 0.27500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -52                
Correct output: -87                 | Program output: 54                 
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 41                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 27                  | Program output: 27                 
Correct output: 8                   | Program output: 20                 
Correct output: 12                  | Program output: 14                 
Correct output: 38                  | Program output: 38                 
Correct output: 33                  | Program output: 33                 
Correct output: 40                  | Program output: 55                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: 7                   | Program output: 41                 
Correct output: -48                 | Program output: -48                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -89                
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -36                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -33                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -1                 
Correct output: -94                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -80                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: 47                 
Correct output: -29                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 10                 
Correct output: -62                 | Program output: -35                
Correct output: 46                  | Program output: 47                 
Correct output: -19                 | Program output: -11                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -89                 | Program output: -89                
Correct output: -74                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: 19                 
Correct output: 9                   | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -17                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -1                 
Correct output: -48                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while})
Lexicase best program: (in3 boolean_dup_times integer_mod in4 in2 boolean_yankdup integer_min integer_min exec_k_when_autoconstructing (print_integer integer_flush exec_flush integer_div boolean_yankdup -49 exec_eq boolean_eq exec_s (integer_shove) () (integer_gt boolean_rot exec_eq exec_dup_times (boolean_rot) integer_inc) tag_boolean_448 boolean_swap boolean_empty integer_swap boolean_invert_second_then_and boolean_or print_integer 60) (integer_add) exec_dup_times (boolean_eq boolean_eq boolean_rot print_newline integer_yankdup integer_gt exec_s_when_autoconstructing (print_boolean exec_y (boolean_rot integer_dup_items integer_rot) print_integer integer_max print_integer integer_lte integer_sub exec_noop) (integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items integer_dup_items integer_lte boolean_flush exec_if () (integer_pop exec_k (print_exec (in1 integer_gte in2 boolean_empty boolean_yank integer_mult exec_dup_times (exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) exec_do*while ()) ()))) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 108
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while})
Zero cases best program: (in3 boolean_dup_times integer_mod in4 in2 boolean_yankdup integer_min integer_min exec_k_when_autoconstructing (print_integer integer_flush exec_flush integer_div boolean_yankdup -49 exec_eq boolean_eq exec_s (integer_shove) () (integer_gt boolean_rot exec_eq exec_dup_times (boolean_rot) integer_inc) tag_boolean_448 boolean_swap boolean_empty integer_swap boolean_invert_second_then_and boolean_or print_integer 60) (integer_add) exec_dup_times (boolean_eq boolean_eq boolean_rot print_newline integer_yankdup integer_gt exec_s_when_autoconstructing (print_boolean exec_y (boolean_rot integer_dup_items integer_rot) print_integer integer_max print_integer integer_lte integer_sub exec_noop) (integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items integer_dup_items integer_lte boolean_flush exec_if () (integer_pop exec_k (print_exec (in1 integer_gte in2 boolean_empty boolean_yank integer_mult exec_dup_times (exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) exec_do*while ()) ()))) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 108
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 361 274 505 505 273 304 156 160 491)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (194 361 274 505 505 273 304 156 160 491)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction -49} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_652} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 2, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot})
Best program: (in3 in2 integer_min in4 in2 boolean_yankdup exec_do*times (integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (print_boolean integer_flush -49 integer_flush exec_eq boolean_or boolean_eq exec_s (exec_flush) (integer_fromboolean) (integer_dup_times integer_shove)) (exec_eq integer_empty boolean_rot) (boolean_swap print_boolean) integer_swap exec_dup_items) (tagged_652) boolean_or boolean_eq integer_yankdup exec_if (exec_do*times (integer_lte integer_stackdepth boolean_pop boolean_invert_first_then_and integer_dec)) (exec_k (boolean_stackdepth print_integer integer_max integer_sub exec_s (integer_pop integer_eq exec_k_when_autoconstructing (exec_y (exec_yankdup boolean_rot integer_dup_items integer_swap)) (boolean_flush boolean_and integer_stackdepth exec_dup (print_exec (in1 integer_min integer_gte exec_empty) exec_do*times (print_exec ()) integer_gt integer_lte boolean_or integer_dup_times) exec_do*while (boolean_shove) integer_add exec_rot () () ())) () ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 74
Size: 103
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.777
Median total errors in population: 6
Error averages by case: (0.806 0.639 0.726 0.495 0.495 0.727 0.696 0.844 0.84 0.509)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.832
Average program size in population (points): 113.372
Average percent parens in population: 0.268
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.333
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 13242257
--- Timings ---
Current time: 1559594001600 milliseconds
Total Time:          45.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.5 seconds, 42.7%
Fitness Testing:     15.8 seconds, 34.5%
Report:              10.3 seconds, 22.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 213
Test mean error for best: 0.21300
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 27                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 33                  | Program output: 34                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 43                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: -85                 | Program output: -29                
Correct output: 7                   | Program output: 7                  
Correct output: -48                 | Program output: -48                
Correct output: -80                 | Program output: -28                
Correct output: -89                 | Program output: -89                
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -43                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -59                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -23                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 10                 
Correct output: -62                 | Program output: -35                
Correct output: 46                  | Program output: 46                 
Correct output: -19                 | Program output: -15                
Correct output: -34                 | Program output: 26                 
Correct output: -93                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -89                 | Program output: -89                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: 9                   | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -17                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: 1                  
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_boolean_448} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction -67} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_xor in3 boolean_dup_times integer_mod in4 in2 boolean_yankdup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_flush integer_div boolean_yankdup -49 exec_eq boolean_eq exec_s (integer_shove) () (integer_gt boolean_rot exec_eq exec_dup_times (boolean_rot) integer_inc) tag_boolean_448 boolean_yank) (boolean_empty integer_swap boolean_invert_second_then_and boolean_or print_integer 60) integer_add exec_dup_times (boolean_eq boolean_eq exec_s_when_autoconstructing (boolean_rot integer_yankdup integer_gt exec_s_when_autoconstructing (print_boolean -67) (exec_y (boolean_rot integer_rot) print_integer integer_max print_integer integer_lte print_newline integer_sub integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (integer_dup_items integer_dup_items integer_lte boolean_flush integer_pop exec_k (print_exec (in1 integer_gte in2 boolean_empty boolean_yank integer_mult exec_dup_times (exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) exec_do*while ()) ()))) ()))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 107
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_boolean_448} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction -67} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_xor in3 boolean_dup_times integer_mod in4 in2 boolean_yankdup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_flush integer_div boolean_yankdup -49 exec_eq boolean_eq exec_s (integer_shove) () (integer_gt boolean_rot exec_eq exec_dup_times (boolean_rot) integer_inc) tag_boolean_448 boolean_yank) (boolean_empty integer_swap boolean_invert_second_then_and boolean_or print_integer 60) integer_add exec_dup_times (boolean_eq boolean_eq exec_s_when_autoconstructing (boolean_rot integer_yankdup integer_gt exec_s_when_autoconstructing (print_boolean -67) (exec_y (boolean_rot integer_rot) print_integer integer_max print_integer integer_lte print_newline integer_sub integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (integer_dup_items integer_dup_items integer_lte boolean_flush integer_pop exec_k (print_exec (in1 integer_gte in2 boolean_empty boolean_yank integer_mult exec_dup_times (exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) exec_do*while ()) ()))) ()))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 107
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 341 480 692 485 446 340 583 638 341)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (185 341 480 692 485 446 340 583 638 341)
Population mean number of perfect (error zero) cases: 4.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -49} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_boolean_448} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction 60} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_834} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add})
Best program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 91
Size: 125
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 5.469
Median total errors in population: 5
Error averages by case: (0.815 0.659 0.52 0.308 0.515 0.554 0.66 0.417 0.362 0.659)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 83.485
Average program size in population (points): 112.531
Average percent parens in population: 0.256
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 13800373
--- Timings ---
Current time: 1559594003751 milliseconds
Total Time:          47.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.8 seconds, 43.3%
Fitness Testing:     16.4 seconds, 34.2%
Report:              10.7 seconds, 22.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 16
Successful program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 125


Auto-simplifying with starting size: 125
step: 0
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 500
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 1000
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 1500
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 2000
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 2500
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 3000
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 3500
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 4000
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 4500
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

step: 5000
program: (in3 boolean_dup_times integer_lte integer_mod in4 in2 boolean_yankdup boolean_dup exec_k_when_autoconstructing (boolean_dup in1 integer_min integer_min exec_k_when_autoconstructing (print_integer exec_s_when_autoconstructing (integer_flush exec_flush integer_div print_boolean boolean_yankdup -49 print_boolean exec_eq boolean_eq exec_s (integer_fromboolean) (integer_shove) () integer_gt boolean_rot exec_eq exec_swap (exec_dup_times (boolean_rot) integer_inc) (print_boolean tag_boolean_448 boolean_swap exec_dup_items boolean_empty integer_swap boolean_or exec_dup_items) print_integer 60) (integer_add) (integer_min exec_dup_times (boolean_rot integer_yankdup exec_while (integer_gt exec_s_when_autoconstructing (exec_y (boolean_dup_items print_integer integer_max print_integer integer_lte integer_sub exec_noop) integer_pop integer_eq boolean_invert_second_then_and) (exec_k_when_autoconstructing (boolean_dup_times) (boolean_rot integer_dup_items exec_flush integer_swap)) (boolean_flush exec_if () (integer_pop exec_if (exec_k (boolean_pop print_exec (in1 integer_gte in2 exec_do*times (integer_mult exec_k (tag_exec_834 (exec_dup_times (exec_empty) boolean_empty integer_gt boolean_or integer_dup_times) integer_add) ()))) ()) ())))))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 125

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 213
Test mean error for best: 0.21300
Test Case    0 | Error: 1
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -74                 | Program output: -74                
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 3                  
Correct output: -14                 | Program output: -14                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: 36                  | Program output: 36                 
Correct output: -72                 | Program output: -72                
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 27                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 33                  | Program output: 34                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 25                  | Program output: 25                 
Correct output: 36                  | Program output: 36                 
Correct output: 7                   | Program output: 7                  
Correct output: 47                  | Program output: 47                 
Correct output: 9                   | Program output: 43                 
Correct output: 29                  | Program output: 29                 
Correct output: 30                  | Program output: 30                 
Correct output: -85                 | Program output: -29                
Correct output: 7                   | Program output: 7                  
Correct output: -48                 | Program output: -48                
Correct output: -80                 | Program output: -28                
Correct output: -89                 | Program output: -89                
Correct output: 37                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -43                
Correct output: -65                 | Program output: -65                
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -10                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: -7                  | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -59                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -23                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: 10                  | Program output: 10                 
Correct output: -62                 | Program output: -35                
Correct output: 46                  | Program output: 46                 
Correct output: -19                 | Program output: -15                
Correct output: -34                 | Program output: 26                 
Correct output: -93                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -89                 | Program output: -89                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: 9                   | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -17                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -99                
Correct output: -48                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: 1                  
Correct output: -90                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -33                 | Program output: -33                
Correct output: -5                  | Program output: 81                 
;;******************************
