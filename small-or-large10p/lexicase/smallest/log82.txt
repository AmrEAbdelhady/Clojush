Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[94 94 23 94] 23] [[-2 -2 -2 -76] -76] [[59 59 -63 59] -63] [[-18 -91 -91 -91] -91] [[100 100 -48 100] -48] [[10 10 10 -88] -88] [[48 -66 -66 -66] -66] [[63 -80 -80 -80] -80] [[92 92 75 92] 75] [[-48 -99 -48 -48] -99] [(25 25 25 25) 25] [(-93 -93 -93 -93) -93] [(-29 -29 -29 -29) -29] [(21 21 21 21) 21] [(98 98 98 98) 98] [(95 26 39 49) 26] [(14 66 4 27) 4] [(71 91 78 55) 55] [(68 72 19 31) 19] [(96 7 57 78) 7] [(14 81 64 28) 14] [(21 60 37 88) 21] [(38 52 85 45) 38] [(35 74 6 2) 2] [(34 84 58 28) 28] [(71 42 27 66) 27] [(92 56 33 32) 32] [(82 85 13 16) 13] [(36 20 85 36) 20] [(92 86 26 74) 26] [(35 87 78 60) 35] [(84 40 17 39) 17] [(84 83 8 59) 8] [(9 21 15 74) 9] [(12 48 53 49) 12] [(-26 -47 -98 1) -98] [(38 -88 -23 -14) -88] [(-74 -40 -19 -23) -74] [(13 69 67 58) 13] [(49 3 -45 -3) -45] [(77 -4 -54 -73) -73] [(-98 -3 64 32) -98] [(12 -42 73 21) -42] [(-49 -57 20 -100) -100] [(-37 98 -91 -38) -91] [(-67 -14 74 -50) -67] [(-60 -38 -20 4) -60] [(-98 81 -24 43) -98] [(5 -93 17 8) -93] [(-47 -3 -100 27) -100] [(-98 68 16 -44) -98] [(-91 56 -28 68) -91] [(-41 11 -70 -4) -70] [(56 70 15 -97) -97] [(-10 -73 56 -15) -73] [(-17 -91 9 71) -91] [(-16 -31 13 89) -31] [(31 3 91 28) 3] [(17 -44 -32 43) -44] [(-64 -71 96 90) -71] [(8 39 -45 12) -45] [(-30 -89 18 56) -89] [(5 -14 78 69) -14] [(78 56 45 -12) -12] [(-90 32 85 45) -90] [(-19 2 9 -56) -56] [(35 3 -100 -61) -100] [(-93 67 -59 -84) -93] [(34 7 100 -10) -10] [(2 77 39 65) 2] [(-74 -82 6 40) -82] [(68 -4 31 -99) -99] [(86 -8 -11 5) -11] [(38 41 79 -4) -4] [(63 68 -38 -39) -39] [(9 -28 -70 18) -70] [(-32 90 58 30) -32] [(82 97 37 -25) -25] [(74 50 -98 96) -98] [(-40 -30 -59 44) -59] [(-60 32 52 60) -60] [(-29 76 -87 79) -87] [(-43 -9 57 -37) -43] [(100 -21 -21 -8) -21] [(-41 -16 23 -3) -41] [(-86 24 39 21) -86] [(10 14 35 25) 10] [(12 -98 -15 -29) -98] [(-29 74 -61 -7) -61] [(64 98 -84 -47) -84] [(-40 -32 -40 -27) -40] [(32 -80 -42 -56) -80] [(62 -38 37 -80) -80] [(-6 -19 58 98) -19] [(-37 93 -60 -51) -60])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[94 94 23 94] 23]
Train Case:   6 | Input/Output: [[-2 -2 -2 -76] -76]
Train Case:   7 | Input/Output: [[59 59 -63 59] -63]
Train Case:   8 | Input/Output: [[-18 -91 -91 -91] -91]
Train Case:   9 | Input/Output: [[100 100 -48 100] -48]
Train Case:  10 | Input/Output: [[10 10 10 -88] -88]
Train Case:  11 | Input/Output: [[48 -66 -66 -66] -66]
Train Case:  12 | Input/Output: [[63 -80 -80 -80] -80]
Train Case:  13 | Input/Output: [[92 92 75 92] 75]
Train Case:  14 | Input/Output: [[-48 -99 -48 -48] -99]
Train Case:  15 | Input/Output: [(25 25 25 25) 25]
Train Case:  16 | Input/Output: [(-93 -93 -93 -93) -93]
Train Case:  17 | Input/Output: [(-29 -29 -29 -29) -29]
Train Case:  18 | Input/Output: [(21 21 21 21) 21]
Train Case:  19 | Input/Output: [(98 98 98 98) 98]
Train Case:  20 | Input/Output: [(95 26 39 49) 26]
Train Case:  21 | Input/Output: [(14 66 4 27) 4]
Train Case:  22 | Input/Output: [(71 91 78 55) 55]
Train Case:  23 | Input/Output: [(68 72 19 31) 19]
Train Case:  24 | Input/Output: [(96 7 57 78) 7]
Train Case:  25 | Input/Output: [(14 81 64 28) 14]
Train Case:  26 | Input/Output: [(21 60 37 88) 21]
Train Case:  27 | Input/Output: [(38 52 85 45) 38]
Train Case:  28 | Input/Output: [(35 74 6 2) 2]
Train Case:  29 | Input/Output: [(34 84 58 28) 28]
Train Case:  30 | Input/Output: [(71 42 27 66) 27]
Train Case:  31 | Input/Output: [(92 56 33 32) 32]
Train Case:  32 | Input/Output: [(82 85 13 16) 13]
Train Case:  33 | Input/Output: [(36 20 85 36) 20]
Train Case:  34 | Input/Output: [(92 86 26 74) 26]
Train Case:  35 | Input/Output: [(35 87 78 60) 35]
Train Case:  36 | Input/Output: [(84 40 17 39) 17]
Train Case:  37 | Input/Output: [(84 83 8 59) 8]
Train Case:  38 | Input/Output: [(9 21 15 74) 9]
Train Case:  39 | Input/Output: [(12 48 53 49) 12]
Train Case:  40 | Input/Output: [(-26 -47 -98 1) -98]
Train Case:  41 | Input/Output: [(38 -88 -23 -14) -88]
Train Case:  42 | Input/Output: [(-74 -40 -19 -23) -74]
Train Case:  43 | Input/Output: [(13 69 67 58) 13]
Train Case:  44 | Input/Output: [(49 3 -45 -3) -45]
Train Case:  45 | Input/Output: [(77 -4 -54 -73) -73]
Train Case:  46 | Input/Output: [(-98 -3 64 32) -98]
Train Case:  47 | Input/Output: [(12 -42 73 21) -42]
Train Case:  48 | Input/Output: [(-49 -57 20 -100) -100]
Train Case:  49 | Input/Output: [(-37 98 -91 -38) -91]
Train Case:  50 | Input/Output: [(-67 -14 74 -50) -67]
Train Case:  51 | Input/Output: [(-60 -38 -20 4) -60]
Train Case:  52 | Input/Output: [(-98 81 -24 43) -98]
Train Case:  53 | Input/Output: [(5 -93 17 8) -93]
Train Case:  54 | Input/Output: [(-47 -3 -100 27) -100]
Train Case:  55 | Input/Output: [(-98 68 16 -44) -98]
Train Case:  56 | Input/Output: [(-91 56 -28 68) -91]
Train Case:  57 | Input/Output: [(-41 11 -70 -4) -70]
Train Case:  58 | Input/Output: [(56 70 15 -97) -97]
Train Case:  59 | Input/Output: [(-10 -73 56 -15) -73]
Train Case:  60 | Input/Output: [(-17 -91 9 71) -91]
Train Case:  61 | Input/Output: [(-16 -31 13 89) -31]
Train Case:  62 | Input/Output: [(31 3 91 28) 3]
Train Case:  63 | Input/Output: [(17 -44 -32 43) -44]
Train Case:  64 | Input/Output: [(-64 -71 96 90) -71]
Train Case:  65 | Input/Output: [(8 39 -45 12) -45]
Train Case:  66 | Input/Output: [(-30 -89 18 56) -89]
Train Case:  67 | Input/Output: [(5 -14 78 69) -14]
Train Case:  68 | Input/Output: [(78 56 45 -12) -12]
Train Case:  69 | Input/Output: [(-90 32 85 45) -90]
Train Case:  70 | Input/Output: [(-19 2 9 -56) -56]
Train Case:  71 | Input/Output: [(35 3 -100 -61) -100]
Train Case:  72 | Input/Output: [(-93 67 -59 -84) -93]
Train Case:  73 | Input/Output: [(34 7 100 -10) -10]
Train Case:  74 | Input/Output: [(2 77 39 65) 2]
Train Case:  75 | Input/Output: [(-74 -82 6 40) -82]
Train Case:  76 | Input/Output: [(68 -4 31 -99) -99]
Train Case:  77 | Input/Output: [(86 -8 -11 5) -11]
Train Case:  78 | Input/Output: [(38 41 79 -4) -4]
Train Case:  79 | Input/Output: [(63 68 -38 -39) -39]
Train Case:  80 | Input/Output: [(9 -28 -70 18) -70]
Train Case:  81 | Input/Output: [(-32 90 58 30) -32]
Train Case:  82 | Input/Output: [(82 97 37 -25) -25]
Train Case:  83 | Input/Output: [(74 50 -98 96) -98]
Train Case:  84 | Input/Output: [(-40 -30 -59 44) -59]
Train Case:  85 | Input/Output: [(-60 32 52 60) -60]
Train Case:  86 | Input/Output: [(-29 76 -87 79) -87]
Train Case:  87 | Input/Output: [(-43 -9 57 -37) -43]
Train Case:  88 | Input/Output: [(100 -21 -21 -8) -21]
Train Case:  89 | Input/Output: [(-41 -16 23 -3) -41]
Train Case:  90 | Input/Output: [(-86 24 39 21) -86]
Train Case:  91 | Input/Output: [(10 14 35 25) 10]
Train Case:  92 | Input/Output: [(12 -98 -15 -29) -98]
Train Case:  93 | Input/Output: [(-29 74 -61 -7) -61]
Train Case:  94 | Input/Output: [(64 98 -84 -47) -84]
Train Case:  95 | Input/Output: [(-40 -32 -40 -27) -40]
Train Case:  96 | Input/Output: [(32 -80 -42 -56) -80]
Train Case:  97 | Input/Output: [(62 -38 37 -80) -80]
Train Case:  98 | Input/Output: [(-6 -19 58 98) -19]
Train Case:  99 | Input/Output: [(-37 93 -60 -51) -60]
Test Case:   0 | Input/Output: [[-63 -63 73 -63] -63]
Test Case:   1 | Input/Output: [[-19 -26 -19 -19] -26]
Test Case:   2 | Input/Output: [[85 57 85 85] 57]
Test Case:   3 | Input/Output: [[-56 93 -56 -56] -56]
Test Case:   4 | Input/Output: [[3 3 68 3] 3]
Test Case:   5 | Input/Output: [[-97 -97 -62 -97] -97]
Test Case:   6 | Input/Output: [[-6 -28 -28 -28] -28]
Test Case:   7 | Input/Output: [[-23 -23 -23 21] -23]
Test Case:   8 | Input/Output: [[2 59 2 2] 2]
Test Case:   9 | Input/Output: [[-45 -18 -18 -18] -45]
Test Case:  10 | Input/Output: [[73 97 73 73] 73]
Test Case:  11 | Input/Output: [[-4 -86 -4 -4] -86]
Test Case:  12 | Input/Output: [[21 -65 21 21] -65]
Test Case:  13 | Input/Output: [[79 -4 79 79] -4]
Test Case:  14 | Input/Output: [[38 38 64 38] 38]
Test Case:  15 | Input/Output: [[-91 -91 -91 -100] -100]
Test Case:  16 | Input/Output: [[51 51 51 -91] -91]
Test Case:  17 | Input/Output: [[-69 -15 -69 -69] -69]
Test Case:  18 | Input/Output: [[75 77 75 75] 75]
Test Case:  19 | Input/Output: [[-7 -7 -7 88] -7]
Test Case:  20 | Input/Output: [[3 3 3 -29] -29]
Test Case:  21 | Input/Output: [[-93 -93 94 -93] -93]
Test Case:  22 | Input/Output: [[10 -29 -29 -29] -29]
Test Case:  23 | Input/Output: [[63 64 63 63] 63]
Test Case:  24 | Input/Output: [[-76 -97 -97 -97] -97]
Test Case:  25 | Input/Output: [[2 69 69 69] 2]
Test Case:  26 | Input/Output: [[-33 -33 -33 67] -33]
Test Case:  27 | Input/Output: [[12 12 12 50] 12]
Test Case:  28 | Input/Output: [[12 12 43 12] 12]
Test Case:  29 | Input/Output: [[-54 -27 -27 -27] -54]
Test Case:  30 | Input/Output: [[-58 -18 -58 -58] -58]
Test Case:  31 | Input/Output: [[-82 -82 -10 -82] -82]
Test Case:  32 | Input/Output: [[-59 -59 -45 -59] -59]
Test Case:  33 | Input/Output: [[83 83 83 16] 16]
Test Case:  34 | Input/Output: [[-60 57 -60 -60] -60]
Test Case:  35 | Input/Output: [[-59 44 44 44] -59]
Test Case:  36 | Input/Output: [[91 -5 91 91] -5]
Test Case:  37 | Input/Output: [[-9 -9 -9 -10] -10]
Test Case:  38 | Input/Output: [[-96 15 -96 -96] -96]
Test Case:  39 | Input/Output: [[-8 -8 33 -8] -8]
Test Case:  40 | Input/Output: [[-98 -98 -11 -98] -98]
Test Case:  41 | Input/Output: [[55 57 57 57] 55]
Test Case:  42 | Input/Output: [[45 92 92 92] 45]
Test Case:  43 | Input/Output: [[-82 -82 -82 -20] -82]
Test Case:  44 | Input/Output: [[-94 -64 -64 -64] -94]
Test Case:  45 | Input/Output: [[-1 62 -1 -1] -1]
Test Case:  46 | Input/Output: [[22 22 22 -88] -88]
Test Case:  47 | Input/Output: [[29 82 29 29] 29]
Test Case:  48 | Input/Output: [[-21 -41 -41 -41] -41]
Test Case:  49 | Input/Output: [[-90 -78 -78 -78] -90]
Test Case:  50 | Input/Output: [[-20 -74 -20 -20] -74]
Test Case:  51 | Input/Output: [[5 -80 -80 -80] -80]
Test Case:  52 | Input/Output: [[49 49 49 -2] -2]
Test Case:  53 | Input/Output: [[-23 -23 26 -23] -23]
Test Case:  54 | Input/Output: [[83 83 -52 83] -52]
Test Case:  55 | Input/Output: [[30 30 -98 30] -98]
Test Case:  56 | Input/Output: [[19 19 34 19] 19]
Test Case:  57 | Input/Output: [[-33 -33 -33 -56] -56]
Test Case:  58 | Input/Output: [[-33 -33 -33 38] -33]
Test Case:  59 | Input/Output: [[-69 -69 -69 -20] -69]
Test Case:  60 | Input/Output: [[45 97 97 97] 45]
Test Case:  61 | Input/Output: [[16 16 16 20] 16]
Test Case:  62 | Input/Output: [[99 99 -92 99] -92]
Test Case:  63 | Input/Output: [[-26 -26 -26 89] -26]
Test Case:  64 | Input/Output: [[53 53 53 89] 53]
Test Case:  65 | Input/Output: [[5 5 5 -25] -25]
Test Case:  66 | Input/Output: [[74 95 95 95] 74]
Test Case:  67 | Input/Output: [[-24 -24 -24 23] -24]
Test Case:  68 | Input/Output: [[-73 -73 -73 -73] -73]
Test Case:  69 | Input/Output: [[-78 23 -78 -78] -78]
Test Case:  70 | Input/Output: [[-89 -89 -89 -96] -96]
Test Case:  71 | Input/Output: [[75 -66 -66 -66] -66]
Test Case:  72 | Input/Output: [[-68 -6 -6 -6] -68]
Test Case:  73 | Input/Output: [[-32 -32 -32 -29] -32]
Test Case:  74 | Input/Output: [[-39 75 -39 -39] -39]
Test Case:  75 | Input/Output: [[-48 -77 -77 -77] -77]
Test Case:  76 | Input/Output: [[40 40 4 40] 4]
Test Case:  77 | Input/Output: [[-88 -99 -88 -88] -99]
Test Case:  78 | Input/Output: [[-23 -49 -23 -23] -49]
Test Case:  79 | Input/Output: [[-62 7 7 7] -62]
Test Case:  80 | Input/Output: [[77 77 -3 77] -3]
Test Case:  81 | Input/Output: [[-30 11 11 11] -30]
Test Case:  82 | Input/Output: [[76 84 76 76] 76]
Test Case:  83 | Input/Output: [[50 50 -45 50] -45]
Test Case:  84 | Input/Output: [[61 61 61 4] 4]
Test Case:  85 | Input/Output: [[-64 94 -64 -64] -64]
Test Case:  86 | Input/Output: [[93 93 93 12] 12]
Test Case:  87 | Input/Output: [[100 2 2 2] 2]
Test Case:  88 | Input/Output: [[53 53 -47 53] -47]
Test Case:  89 | Input/Output: [[-28 62 -28 -28] -28]
Test Case:  90 | Input/Output: [[31 -25 31 31] -25]
Test Case:  91 | Input/Output: [[-13 -13 57 -13] -13]
Test Case:  92 | Input/Output: [[42 42 77 42] 42]
Test Case:  93 | Input/Output: [[17 17 17 54] 17]
Test Case:  94 | Input/Output: [[87 -56 -56 -56] -56]
Test Case:  95 | Input/Output: [[68 26 68 68] 26]
Test Case:  96 | Input/Output: [[63 63 -26 63] -26]
Test Case:  97 | Input/Output: [[93 93 93 78] 78]
Test Case:  98 | Input/Output: [[83 85 83 83] 83]
Test Case:  99 | Input/Output: [[49 84 49 49] 49]
Test Case: 100 | Input/Output: [(53 53 53 53) 53]
Test Case: 101 | Input/Output: [(24 24 24 24) 24]
Test Case: 102 | Input/Output: [(100 100 100 100) 100]
Test Case: 103 | Input/Output: [(22 22 22 22) 22]
Test Case: 104 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 105 | Input/Output: [(94 94 94 94) 94]
Test Case: 106 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 107 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 108 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 109 | Input/Output: [(17 17 17 17) 17]
Test Case: 110 | Input/Output: [(44 44 44 44) 44]
Test Case: 111 | Input/Output: [(78 78 78 78) 78]
Test Case: 112 | Input/Output: [(86 86 86 86) 86]
Test Case: 113 | Input/Output: [(47 47 47 47) 47]
Test Case: 114 | Input/Output: [(43 43 43 43) 43]
Test Case: 115 | Input/Output: [(75 75 75 75) 75]
Test Case: 116 | Input/Output: [(78 78 78 78) 78]
Test Case: 117 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 118 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 119 | Input/Output: [(65 65 65 65) 65]
Test Case: 120 | Input/Output: [(47 47 47 47) 47]
Test Case: 121 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 122 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 123 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 124 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 125 | Input/Output: [(63 63 63 63) 63]
Test Case: 126 | Input/Output: [(33 33 33 33) 33]
Test Case: 127 | Input/Output: [(81 81 81 81) 81]
Test Case: 128 | Input/Output: [(20 20 20 20) 20]
Test Case: 129 | Input/Output: [(81 81 81 81) 81]
Test Case: 130 | Input/Output: [(27 27 27 27) 27]
Test Case: 131 | Input/Output: [(88 88 88 88) 88]
Test Case: 132 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 133 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 134 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 135 | Input/Output: [(72 72 72 72) 72]
Test Case: 136 | Input/Output: [(1 1 1 1) 1]
Test Case: 137 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 138 | Input/Output: [(10 10 10 10) 10]
Test Case: 139 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 140 | Input/Output: [(92 92 92 92) 92]
Test Case: 141 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 142 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 143 | Input/Output: [(58 58 58 58) 58]
Test Case: 144 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 145 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 146 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 147 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 148 | Input/Output: [(65 65 65 65) 65]
Test Case: 149 | Input/Output: [(69 69 69 69) 69]
Test Case: 150 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 151 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 152 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 153 | Input/Output: [(75 75 75 75) 75]
Test Case: 154 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 155 | Input/Output: [(98 98 98 98) 98]
Test Case: 156 | Input/Output: [(79 79 79 79) 79]
Test Case: 157 | Input/Output: [(37 37 37 37) 37]
Test Case: 158 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 159 | Input/Output: [(61 61 61 61) 61]
Test Case: 160 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 161 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 162 | Input/Output: [(66 66 66 66) 66]
Test Case: 163 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 164 | Input/Output: [(29 29 29 29) 29]
Test Case: 165 | Input/Output: [(57 57 57 57) 57]
Test Case: 166 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 167 | Input/Output: [(29 29 29 29) 29]
Test Case: 168 | Input/Output: [(29 29 29 29) 29]
Test Case: 169 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 170 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 171 | Input/Output: [(75 75 75 75) 75]
Test Case: 172 | Input/Output: [(76 76 76 76) 76]
Test Case: 173 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 174 | Input/Output: [(95 95 95 95) 95]
Test Case: 175 | Input/Output: [(100 100 100 100) 100]
Test Case: 176 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 177 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 178 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 179 | Input/Output: [(89 89 89 89) 89]
Test Case: 180 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 181 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 182 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 183 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 184 | Input/Output: [(32 32 32 32) 32]
Test Case: 185 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 186 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 187 | Input/Output: [(10 10 10 10) 10]
Test Case: 188 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 189 | Input/Output: [(37 37 37 37) 37]
Test Case: 190 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 191 | Input/Output: [(46 46 46 46) 46]
Test Case: 192 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 193 | Input/Output: [(71 71 71 71) 71]
Test Case: 194 | Input/Output: [(42 42 42 42) 42]
Test Case: 195 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 196 | Input/Output: [(19 19 19 19) 19]
Test Case: 197 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 198 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 199 | Input/Output: [(74 74 74 74) 74]
Test Case: 200 | Input/Output: [(72 18 79 51) 18]
Test Case: 201 | Input/Output: [(49 0 44 69) 0]
Test Case: 202 | Input/Output: [(94 80 27 15) 15]
Test Case: 203 | Input/Output: [(93 13 16 7) 7]
Test Case: 204 | Input/Output: [(74 66 7 9) 7]
Test Case: 205 | Input/Output: [(98 34 67 10) 10]
Test Case: 206 | Input/Output: [(45 70 63 94) 45]
Test Case: 207 | Input/Output: [(87 88 85 90) 85]
Test Case: 208 | Input/Output: [(15 19 83 50) 15]
Test Case: 209 | Input/Output: [(17 67 89 82) 17]
Test Case: 210 | Input/Output: [(53 37 9 81) 9]
Test Case: 211 | Input/Output: [(67 36 32 43) 32]
Test Case: 212 | Input/Output: [(72 35 15 66) 15]
Test Case: 213 | Input/Output: [(71 32 57 7) 7]
Test Case: 214 | Input/Output: [(29 26 86 79) 26]
Test Case: 215 | Input/Output: [(92 42 94 0) 0]
Test Case: 216 | Input/Output: [(80 84 82 11) 11]
Test Case: 217 | Input/Output: [(18 50 97 17) 17]
Test Case: 218 | Input/Output: [(53 46 58 30) 30]
Test Case: 219 | Input/Output: [(13 60 36 40) 13]
Test Case: 220 | Input/Output: [(45 78 70 35) 35]
Test Case: 221 | Input/Output: [(12 56 2 69) 2]
Test Case: 222 | Input/Output: [(25 38 17 72) 17]
Test Case: 223 | Input/Output: [(71 4 74 52) 4]
Test Case: 224 | Input/Output: [(93 40 34 73) 34]
Test Case: 225 | Input/Output: [(19 25 32 26) 19]
Test Case: 226 | Input/Output: [(81 91 88 5) 5]
Test Case: 227 | Input/Output: [(84 20 7 71) 7]
Test Case: 228 | Input/Output: [(49 22 16 95) 16]
Test Case: 229 | Input/Output: [(7 76 93 42) 7]
Test Case: 230 | Input/Output: [(78 49 73 1) 1]
Test Case: 231 | Input/Output: [(20 15 50 30) 15]
Test Case: 232 | Input/Output: [(61 57 47 1) 1]
Test Case: 233 | Input/Output: [(99 27 11 20) 11]
Test Case: 234 | Input/Output: [(52 87 24 30) 24]
Test Case: 235 | Input/Output: [(96 63 33 25) 25]
Test Case: 236 | Input/Output: [(67 0 99 17) 0]
Test Case: 237 | Input/Output: [(34 14 81 24) 14]
Test Case: 238 | Input/Output: [(37 67 58 49) 37]
Test Case: 239 | Input/Output: [(89 78 20 44) 20]
Test Case: 240 | Input/Output: [(47 35 69 91) 35]
Test Case: 241 | Input/Output: [(25 79 18 84) 18]
Test Case: 242 | Input/Output: [(15 70 90 39) 15]
Test Case: 243 | Input/Output: [(33 46 19 41) 19]
Test Case: 244 | Input/Output: [(59 99 30 80) 30]
Test Case: 245 | Input/Output: [(40 65 79 94) 40]
Test Case: 246 | Input/Output: [(61 37 50 14) 14]
Test Case: 247 | Input/Output: [(21 71 18 14) 14]
Test Case: 248 | Input/Output: [(51 44 78 46) 44]
Test Case: 249 | Input/Output: [(31 72 59 72) 31]
Test Case: 250 | Input/Output: [(57 12 88 75) 12]
Test Case: 251 | Input/Output: [(39 9 81 63) 9]
Test Case: 252 | Input/Output: [(10 27 39 28) 10]
Test Case: 253 | Input/Output: [(32 30 79 22) 22]
Test Case: 254 | Input/Output: [(37 10 54 53) 10]
Test Case: 255 | Input/Output: [(6 36 45 18) 6]
Test Case: 256 | Input/Output: [(1 72 97 54) 1]
Test Case: 257 | Input/Output: [(27 24 72 20) 20]
Test Case: 258 | Input/Output: [(51 80 79 94) 51]
Test Case: 259 | Input/Output: [(37 97 49 50) 37]
Test Case: 260 | Input/Output: [(57 50 63 65) 50]
Test Case: 261 | Input/Output: [(43 52 58 38) 38]
Test Case: 262 | Input/Output: [(28 30 89 33) 28]
Test Case: 263 | Input/Output: [(24 75 76 51) 24]
Test Case: 264 | Input/Output: [(48 99 9 55) 9]
Test Case: 265 | Input/Output: [(16 30 67 97) 16]
Test Case: 266 | Input/Output: [(83 5 11 22) 5]
Test Case: 267 | Input/Output: [(8 45 72 2) 2]
Test Case: 268 | Input/Output: [(3 54 77 52) 3]
Test Case: 269 | Input/Output: [(92 39 5 83) 5]
Test Case: 270 | Input/Output: [(35 32 95 41) 32]
Test Case: 271 | Input/Output: [(64 7 83 71) 7]
Test Case: 272 | Input/Output: [(58 61 19 17) 17]
Test Case: 273 | Input/Output: [(14 59 23 98) 14]
Test Case: 274 | Input/Output: [(93 83 35 100) 35]
Test Case: 275 | Input/Output: [(57 75 30 28) 28]
Test Case: 276 | Input/Output: [(45 46 45 55) 45]
Test Case: 277 | Input/Output: [(37 80 81 38) 37]
Test Case: 278 | Input/Output: [(79 10 20 100) 10]
Test Case: 279 | Input/Output: [(47 41 63 21) 21]
Test Case: 280 | Input/Output: [(45 29 0 42) 0]
Test Case: 281 | Input/Output: [(40 62 9 7) 7]
Test Case: 282 | Input/Output: [(45 42 46 67) 42]
Test Case: 283 | Input/Output: [(84 3 87 73) 3]
Test Case: 284 | Input/Output: [(56 90 92 41) 41]
Test Case: 285 | Input/Output: [(41 6 58 76) 6]
Test Case: 286 | Input/Output: [(92 25 55 14) 14]
Test Case: 287 | Input/Output: [(2 68 65 74) 2]
Test Case: 288 | Input/Output: [(90 27 32 85) 27]
Test Case: 289 | Input/Output: [(54 57 77 42) 42]
Test Case: 290 | Input/Output: [(99 51 30 54) 30]
Test Case: 291 | Input/Output: [(78 35 29 26) 26]
Test Case: 292 | Input/Output: [(64 72 42 76) 42]
Test Case: 293 | Input/Output: [(3 48 20 23) 3]
Test Case: 294 | Input/Output: [(62 19 22 64) 19]
Test Case: 295 | Input/Output: [(44 86 56 29) 29]
Test Case: 296 | Input/Output: [(27 20 13 30) 13]
Test Case: 297 | Input/Output: [(16 16 69 87) 16]
Test Case: 298 | Input/Output: [(26 63 50 75) 26]
Test Case: 299 | Input/Output: [(48 22 98 12) 12]
Test Case: 300 | Input/Output: [(56 22 52 85) 22]
Test Case: 301 | Input/Output: [(21 70 30 93) 21]
Test Case: 302 | Input/Output: [(14 83 17 89) 14]
Test Case: 303 | Input/Output: [(97 23 59 62) 23]
Test Case: 304 | Input/Output: [(15 87 24 61) 15]
Test Case: 305 | Input/Output: [(91 75 36 42) 36]
Test Case: 306 | Input/Output: [(20 27 62 65) 20]
Test Case: 307 | Input/Output: [(100 33 91 70) 33]
Test Case: 308 | Input/Output: [(27 47 93 10) 10]
Test Case: 309 | Input/Output: [(31 73 54 12) 12]
Test Case: 310 | Input/Output: [(82 20 32 80) 20]
Test Case: 311 | Input/Output: [(23 100 64 94) 23]
Test Case: 312 | Input/Output: [(79 62 43 84) 43]
Test Case: 313 | Input/Output: [(15 37 9 21) 9]
Test Case: 314 | Input/Output: [(97 10 67 32) 10]
Test Case: 315 | Input/Output: [(13 19 67 48) 13]
Test Case: 316 | Input/Output: [(86 79 15 54) 15]
Test Case: 317 | Input/Output: [(51 86 52 94) 51]
Test Case: 318 | Input/Output: [(98 58 15 4) 4]
Test Case: 319 | Input/Output: [(62 89 98 29) 29]
Test Case: 320 | Input/Output: [(18 48 65 75) 18]
Test Case: 321 | Input/Output: [(92 34 96 5) 5]
Test Case: 322 | Input/Output: [(57 57 15 90) 15]
Test Case: 323 | Input/Output: [(39 33 89 12) 12]
Test Case: 324 | Input/Output: [(64 18 56 89) 18]
Test Case: 325 | Input/Output: [(62 52 13 92) 13]
Test Case: 326 | Input/Output: [(17 38 97 66) 17]
Test Case: 327 | Input/Output: [(3 35 0 97) 0]
Test Case: 328 | Input/Output: [(19 23 93 25) 19]
Test Case: 329 | Input/Output: [(86 84 68 41) 41]
Test Case: 330 | Input/Output: [(59 47 78 71) 47]
Test Case: 331 | Input/Output: [(39 19 42 86) 19]
Test Case: 332 | Input/Output: [(99 44 38 5) 5]
Test Case: 333 | Input/Output: [(52 47 81 47) 47]
Test Case: 334 | Input/Output: [(72 40 75 11) 11]
Test Case: 335 | Input/Output: [(27 11 7 14) 7]
Test Case: 336 | Input/Output: [(26 78 71 33) 26]
Test Case: 337 | Input/Output: [(16 35 67 64) 16]
Test Case: 338 | Input/Output: [(93 78 43 13) 13]
Test Case: 339 | Input/Output: [(2 83 96 19) 2]
Test Case: 340 | Input/Output: [(52 92 73 89) 52]
Test Case: 341 | Input/Output: [(61 82 2 67) 2]
Test Case: 342 | Input/Output: [(79 32 1 46) 1]
Test Case: 343 | Input/Output: [(61 83 25 8) 8]
Test Case: 344 | Input/Output: [(68 72 80 92) 68]
Test Case: 345 | Input/Output: [(51 24 88 52) 24]
Test Case: 346 | Input/Output: [(11 2 76 13) 2]
Test Case: 347 | Input/Output: [(83 3 66 3) 3]
Test Case: 348 | Input/Output: [(39 34 47 72) 34]
Test Case: 349 | Input/Output: [(68 5 97 95) 5]
Test Case: 350 | Input/Output: [(86 25 2 40) 2]
Test Case: 351 | Input/Output: [(28 96 75 96) 28]
Test Case: 352 | Input/Output: [(99 99 14 11) 11]
Test Case: 353 | Input/Output: [(18 75 70 15) 15]
Test Case: 354 | Input/Output: [(57 97 46 70) 46]
Test Case: 355 | Input/Output: [(31 3 41 4) 3]
Test Case: 356 | Input/Output: [(97 79 73 79) 73]
Test Case: 357 | Input/Output: [(28 39 60 29) 28]
Test Case: 358 | Input/Output: [(69 87 26 60) 26]
Test Case: 359 | Input/Output: [(87 11 56 28) 11]
Test Case: 360 | Input/Output: [(66 68 86 47) 47]
Test Case: 361 | Input/Output: [(80 18 70 2) 2]
Test Case: 362 | Input/Output: [(12 48 24 94) 12]
Test Case: 363 | Input/Output: [(44 39 92 76) 39]
Test Case: 364 | Input/Output: [(21 51 7 99) 7]
Test Case: 365 | Input/Output: [(38 52 14 51) 14]
Test Case: 366 | Input/Output: [(48 75 73 23) 23]
Test Case: 367 | Input/Output: [(86 59 74 29) 29]
Test Case: 368 | Input/Output: [(58 94 48 21) 21]
Test Case: 369 | Input/Output: [(9 21 84 1) 1]
Test Case: 370 | Input/Output: [(47 53 73 58) 47]
Test Case: 371 | Input/Output: [(12 11 30 45) 11]
Test Case: 372 | Input/Output: [(11 25 74 39) 11]
Test Case: 373 | Input/Output: [(28 15 4 40) 4]
Test Case: 374 | Input/Output: [(22 45 9 18) 9]
Test Case: 375 | Input/Output: [(71 62 74 90) 62]
Test Case: 376 | Input/Output: [(47 46 8 94) 8]
Test Case: 377 | Input/Output: [(57 76 49 85) 49]
Test Case: 378 | Input/Output: [(60 63 81 23) 23]
Test Case: 379 | Input/Output: [(6 76 79 10) 6]
Test Case: 380 | Input/Output: [(8 42 69 90) 8]
Test Case: 381 | Input/Output: [(37 83 85 53) 37]
Test Case: 382 | Input/Output: [(11 55 75 70) 11]
Test Case: 383 | Input/Output: [(74 45 90 3) 3]
Test Case: 384 | Input/Output: [(14 7 71 91) 7]
Test Case: 385 | Input/Output: [(25 59 77 86) 25]
Test Case: 386 | Input/Output: [(96 52 29 58) 29]
Test Case: 387 | Input/Output: [(63 0 95 25) 0]
Test Case: 388 | Input/Output: [(37 59 6 8) 6]
Test Case: 389 | Input/Output: [(24 88 39 25) 24]
Test Case: 390 | Input/Output: [(67 90 85 26) 26]
Test Case: 391 | Input/Output: [(32 25 49 94) 25]
Test Case: 392 | Input/Output: [(8 18 68 61) 8]
Test Case: 393 | Input/Output: [(17 97 72 57) 17]
Test Case: 394 | Input/Output: [(11 63 37 90) 11]
Test Case: 395 | Input/Output: [(100 81 99 54) 54]
Test Case: 396 | Input/Output: [(30 96 19 10) 10]
Test Case: 397 | Input/Output: [(0 13 52 17) 0]
Test Case: 398 | Input/Output: [(36 91 8 96) 8]
Test Case: 399 | Input/Output: [(84 15 36 43) 15]
Test Case: 400 | Input/Output: [(91 0 -69 -88) -88]
Test Case: 401 | Input/Output: [(-64 -71 21 24) -71]
Test Case: 402 | Input/Output: [(-90 -58 46 -76) -90]
Test Case: 403 | Input/Output: [(-64 -20 58 33) -64]
Test Case: 404 | Input/Output: [(-82 -19 2 67) -82]
Test Case: 405 | Input/Output: [(28 83 67 -80) -80]
Test Case: 406 | Input/Output: [(88 32 -26 -25) -26]
Test Case: 407 | Input/Output: [(43 -28 -19 54) -28]
Test Case: 408 | Input/Output: [(61 17 -57 -98) -98]
Test Case: 409 | Input/Output: [(-94 -94 -67 22) -94]
Test Case: 410 | Input/Output: [(-74 -61 19 -16) -74]
Test Case: 411 | Input/Output: [(71 -56 18 -14) -56]
Test Case: 412 | Input/Output: [(95 -79 -3 -14) -79]
Test Case: 413 | Input/Output: [(-1 -73 -79 -98) -98]
Test Case: 414 | Input/Output: [(-88 46 42 43) -88]
Test Case: 415 | Input/Output: [(72 72 -20 16) -20]
Test Case: 416 | Input/Output: [(33 -97 -84 -80) -97]
Test Case: 417 | Input/Output: [(-57 -81 -47 2) -81]
Test Case: 418 | Input/Output: [(-65 99 -88 31) -88]
Test Case: 419 | Input/Output: [(95 64 -71 45) -71]
Test Case: 420 | Input/Output: [(83 42 -41 22) -41]
Test Case: 421 | Input/Output: [(99 96 -52 -36) -52]
Test Case: 422 | Input/Output: [(-6 61 -99 -6) -99]
Test Case: 423 | Input/Output: [(-25 -12 -33 40) -33]
Test Case: 424 | Input/Output: [(60 43 90 91) 43]
Test Case: 425 | Input/Output: [(61 83 52 -89) -89]
Test Case: 426 | Input/Output: [(68 93 -65 70) -65]
Test Case: 427 | Input/Output: [(31 -17 27 77) -17]
Test Case: 428 | Input/Output: [(-25 80 22 -9) -25]
Test Case: 429 | Input/Output: [(-73 -88 -80 67) -88]
Test Case: 430 | Input/Output: [(93 -19 -69 17) -69]
Test Case: 431 | Input/Output: [(-22 48 34 -69) -69]
Test Case: 432 | Input/Output: [(100 -6 29 61) -6]
Test Case: 433 | Input/Output: [(-66 76 67 -21) -66]
Test Case: 434 | Input/Output: [(-81 -47 12 18) -81]
Test Case: 435 | Input/Output: [(-61 12 -82 -95) -95]
Test Case: 436 | Input/Output: [(-89 -20 -62 79) -89]
Test Case: 437 | Input/Output: [(-23 6 -29 62) -29]
Test Case: 438 | Input/Output: [(8 7 23 -91) -91]
Test Case: 439 | Input/Output: [(49 78 8 -66) -66]
Test Case: 440 | Input/Output: [(-26 -80 29 -54) -80]
Test Case: 441 | Input/Output: [(-79 -54 92 -20) -79]
Test Case: 442 | Input/Output: [(84 -7 -98 15) -98]
Test Case: 443 | Input/Output: [(7 99 60 30) 7]
Test Case: 444 | Input/Output: [(-71 -1 3 -100) -100]
Test Case: 445 | Input/Output: [(-77 -53 75 -21) -77]
Test Case: 446 | Input/Output: [(41 69 -48 57) -48]
Test Case: 447 | Input/Output: [(-64 46 -55 -91) -91]
Test Case: 448 | Input/Output: [(46 -76 -38 -14) -76]
Test Case: 449 | Input/Output: [(-25 -76 -15 75) -76]
Test Case: 450 | Input/Output: [(45 -88 76 54) -88]
Test Case: 451 | Input/Output: [(-68 -31 -90 47) -90]
Test Case: 452 | Input/Output: [(6 -28 97 -24) -28]
Test Case: 453 | Input/Output: [(58 51 -18 74) -18]
Test Case: 454 | Input/Output: [(-34 -14 28 -50) -50]
Test Case: 455 | Input/Output: [(19 -83 -99 -80) -99]
Test Case: 456 | Input/Output: [(-42 -51 14 62) -51]
Test Case: 457 | Input/Output: [(6 53 62 -10) -10]
Test Case: 458 | Input/Output: [(-52 8 34 -57) -57]
Test Case: 459 | Input/Output: [(-49 55 14 73) -49]
Test Case: 460 | Input/Output: [(90 -93 3 66) -93]
Test Case: 461 | Input/Output: [(-27 -58 -14 -39) -58]
Test Case: 462 | Input/Output: [(-39 -5 -51 -12) -51]
Test Case: 463 | Input/Output: [(-17 -81 96 79) -81]
Test Case: 464 | Input/Output: [(16 -16 78 55) -16]
Test Case: 465 | Input/Output: [(37 84 -34 -41) -41]
Test Case: 466 | Input/Output: [(-91 55 50 60) -91]
Test Case: 467 | Input/Output: [(24 -19 -34 55) -34]
Test Case: 468 | Input/Output: [(58 -37 -13 -24) -37]
Test Case: 469 | Input/Output: [(-83 8 -36 -17) -83]
Test Case: 470 | Input/Output: [(67 -11 -45 -37) -45]
Test Case: 471 | Input/Output: [(-41 -54 -8 13) -54]
Test Case: 472 | Input/Output: [(-34 14 -49 37) -49]
Test Case: 473 | Input/Output: [(-53 -52 -54 83) -54]
Test Case: 474 | Input/Output: [(21 -7 -83 38) -83]
Test Case: 475 | Input/Output: [(12 10 -46 -89) -89]
Test Case: 476 | Input/Output: [(67 35 65 -82) -82]
Test Case: 477 | Input/Output: [(33 -49 -75 49) -75]
Test Case: 478 | Input/Output: [(29 24 -3 46) -3]
Test Case: 479 | Input/Output: [(56 58 -90 -45) -90]
Test Case: 480 | Input/Output: [(-51 4 -97 79) -97]
Test Case: 481 | Input/Output: [(62 -64 -53 76) -64]
Test Case: 482 | Input/Output: [(-12 -52 28 -40) -52]
Test Case: 483 | Input/Output: [(-67 -96 19 -60) -96]
Test Case: 484 | Input/Output: [(-66 42 -11 -62) -66]
Test Case: 485 | Input/Output: [(-22 25 83 90) -22]
Test Case: 486 | Input/Output: [(87 48 35 29) 29]
Test Case: 487 | Input/Output: [(81 -58 -92 -20) -92]
Test Case: 488 | Input/Output: [(-40 84 -88 95) -88]
Test Case: 489 | Input/Output: [(82 -69 -88 -74) -88]
Test Case: 490 | Input/Output: [(-9 -40 78 71) -40]
Test Case: 491 | Input/Output: [(-62 72 -45 -59) -62]
Test Case: 492 | Input/Output: [(75 7 48 18) 7]
Test Case: 493 | Input/Output: [(22 -44 -84 -11) -84]
Test Case: 494 | Input/Output: [(84 -55 -64 70) -64]
Test Case: 495 | Input/Output: [(-64 -35 93 50) -64]
Test Case: 496 | Input/Output: [(9 53 -7 21) -7]
Test Case: 497 | Input/Output: [(-64 40 50 19) -64]
Test Case: 498 | Input/Output: [(78 19 -22 -2) -22]
Test Case: 499 | Input/Output: [(-96 50 -79 -96) -96]
Test Case: 500 | Input/Output: [(-78 -41 35 -7) -78]
Test Case: 501 | Input/Output: [(-33 68 -53 -18) -53]
Test Case: 502 | Input/Output: [(-34 1 1 -80) -80]
Test Case: 503 | Input/Output: [(-70 -51 -69 -20) -70]
Test Case: 504 | Input/Output: [(40 60 -45 43) -45]
Test Case: 505 | Input/Output: [(-29 7 97 18) -29]
Test Case: 506 | Input/Output: [(21 37 71 6) 6]
Test Case: 507 | Input/Output: [(-60 6 -80 -91) -91]
Test Case: 508 | Input/Output: [(-15 -93 -46 7) -93]
Test Case: 509 | Input/Output: [(-75 -85 11 85) -85]
Test Case: 510 | Input/Output: [(62 -14 -14 -31) -31]
Test Case: 511 | Input/Output: [(48 -9 83 -68) -68]
Test Case: 512 | Input/Output: [(-28 26 26 -9) -28]
Test Case: 513 | Input/Output: [(-51 53 -81 16) -81]
Test Case: 514 | Input/Output: [(24 29 95 79) 24]
Test Case: 515 | Input/Output: [(-10 -39 40 -40) -40]
Test Case: 516 | Input/Output: [(-59 -85 -23 88) -85]
Test Case: 517 | Input/Output: [(76 35 -98 -41) -98]
Test Case: 518 | Input/Output: [(-87 -78 -60 -42) -87]
Test Case: 519 | Input/Output: [(41 31 -77 -85) -85]
Test Case: 520 | Input/Output: [(51 -53 35 -3) -53]
Test Case: 521 | Input/Output: [(90 -16 4 -58) -58]
Test Case: 522 | Input/Output: [(-4 35 -76 74) -76]
Test Case: 523 | Input/Output: [(27 -41 28 -63) -63]
Test Case: 524 | Input/Output: [(-44 -57 -51 78) -57]
Test Case: 525 | Input/Output: [(27 -63 -15 -92) -92]
Test Case: 526 | Input/Output: [(80 -38 8 47) -38]
Test Case: 527 | Input/Output: [(34 -6 -46 91) -46]
Test Case: 528 | Input/Output: [(33 44 -66 98) -66]
Test Case: 529 | Input/Output: [(-26 8 57 99) -26]
Test Case: 530 | Input/Output: [(90 -10 76 98) -10]
Test Case: 531 | Input/Output: [(-65 68 27 25) -65]
Test Case: 532 | Input/Output: [(-82 -98 -9 3) -98]
Test Case: 533 | Input/Output: [(1 95 -47 52) -47]
Test Case: 534 | Input/Output: [(-16 67 -100 -69) -100]
Test Case: 535 | Input/Output: [(93 -28 -71 -83) -83]
Test Case: 536 | Input/Output: [(60 68 -26 -63) -63]
Test Case: 537 | Input/Output: [(13 43 -61 44) -61]
Test Case: 538 | Input/Output: [(-60 -83 22 -66) -83]
Test Case: 539 | Input/Output: [(-71 90 52 51) -71]
Test Case: 540 | Input/Output: [(68 76 -3 -87) -87]
Test Case: 541 | Input/Output: [(-33 34 30 90) -33]
Test Case: 542 | Input/Output: [(97 -1 -37 -4) -37]
Test Case: 543 | Input/Output: [(66 -5 -75 -61) -75]
Test Case: 544 | Input/Output: [(20 -35 57 -100) -100]
Test Case: 545 | Input/Output: [(-36 -64 54 -84) -84]
Test Case: 546 | Input/Output: [(69 -96 -22 -79) -96]
Test Case: 547 | Input/Output: [(40 -39 59 93) -39]
Test Case: 548 | Input/Output: [(54 -35 61 44) -35]
Test Case: 549 | Input/Output: [(77 71 13 -74) -74]
Test Case: 550 | Input/Output: [(20 -52 -29 -17) -52]
Test Case: 551 | Input/Output: [(-41 -57 75 -44) -57]
Test Case: 552 | Input/Output: [(-39 -57 -97 56) -97]
Test Case: 553 | Input/Output: [(99 -77 -68 90) -77]
Test Case: 554 | Input/Output: [(-36 49 -70 -17) -70]
Test Case: 555 | Input/Output: [(53 -62 -16 91) -62]
Test Case: 556 | Input/Output: [(47 72 -87 -26) -87]
Test Case: 557 | Input/Output: [(87 36 -99 44) -99]
Test Case: 558 | Input/Output: [(-59 12 -15 24) -59]
Test Case: 559 | Input/Output: [(74 8 -22 28) -22]
Test Case: 560 | Input/Output: [(11 -41 -100 44) -100]
Test Case: 561 | Input/Output: [(-41 46 -99 -7) -99]
Test Case: 562 | Input/Output: [(-55 -8 -1 46) -55]
Test Case: 563 | Input/Output: [(-57 -83 -63 91) -83]
Test Case: 564 | Input/Output: [(-49 -43 40 -36) -49]
Test Case: 565 | Input/Output: [(0 -41 25 2) -41]
Test Case: 566 | Input/Output: [(30 64 29 -26) -26]
Test Case: 567 | Input/Output: [(-17 -54 -42 -59) -59]
Test Case: 568 | Input/Output: [(-69 10 -45 -32) -69]
Test Case: 569 | Input/Output: [(25 74 2 72) 2]
Test Case: 570 | Input/Output: [(79 -59 77 -41) -59]
Test Case: 571 | Input/Output: [(-23 12 70 -24) -24]
Test Case: 572 | Input/Output: [(34 27 -71 57) -71]
Test Case: 573 | Input/Output: [(-16 15 -72 -90) -90]
Test Case: 574 | Input/Output: [(-94 -37 -37 -58) -94]
Test Case: 575 | Input/Output: [(-48 -50 -20 88) -50]
Test Case: 576 | Input/Output: [(13 -4 73 52) -4]
Test Case: 577 | Input/Output: [(55 -63 58 77) -63]
Test Case: 578 | Input/Output: [(-18 -19 -36 48) -36]
Test Case: 579 | Input/Output: [(5 -65 93 43) -65]
Test Case: 580 | Input/Output: [(-52 -49 10 -62) -62]
Test Case: 581 | Input/Output: [(20 -63 -42 55) -63]
Test Case: 582 | Input/Output: [(-24 -6 -5 8) -24]
Test Case: 583 | Input/Output: [(-23 47 60 -68) -68]
Test Case: 584 | Input/Output: [(-43 63 -28 -32) -43]
Test Case: 585 | Input/Output: [(-62 36 77 46) -62]
Test Case: 586 | Input/Output: [(68 -77 -44 63) -77]
Test Case: 587 | Input/Output: [(96 23 82 82) 23]
Test Case: 588 | Input/Output: [(3 -16 -20 99) -20]
Test Case: 589 | Input/Output: [(15 -95 44 50) -95]
Test Case: 590 | Input/Output: [(-61 -59 -49 5) -61]
Test Case: 591 | Input/Output: [(50 -37 -5 -18) -37]
Test Case: 592 | Input/Output: [(38 -33 26 -23) -33]
Test Case: 593 | Input/Output: [(83 16 -66 41) -66]
Test Case: 594 | Input/Output: [(-99 85 44 -58) -99]
Test Case: 595 | Input/Output: [(28 53 -86 -16) -86]
Test Case: 596 | Input/Output: [(36 62 46 35) 35]
Test Case: 597 | Input/Output: [(-1 17 -94 78) -94]
Test Case: 598 | Input/Output: [(-29 18 -72 -97) -97]
Test Case: 599 | Input/Output: [(-51 16 19 46) -51]
Test Case: 600 | Input/Output: [(-13 38 -6 90) -13]
Test Case: 601 | Input/Output: [(75 21 42 49) 21]
Test Case: 602 | Input/Output: [(-17 -90 -17 95) -90]
Test Case: 603 | Input/Output: [(18 -18 70 92) -18]
Test Case: 604 | Input/Output: [(34 25 -55 -31) -55]
Test Case: 605 | Input/Output: [(-32 71 61 -68) -68]
Test Case: 606 | Input/Output: [(-27 46 -5 78) -27]
Test Case: 607 | Input/Output: [(-60 -86 -86 -33) -86]
Test Case: 608 | Input/Output: [(-22 78 1 50) -22]
Test Case: 609 | Input/Output: [(-74 -97 25 56) -97]
Test Case: 610 | Input/Output: [(77 33 2 40) 2]
Test Case: 611 | Input/Output: [(-85 18 -44 50) -85]
Test Case: 612 | Input/Output: [(-66 -85 16 0) -85]
Test Case: 613 | Input/Output: [(11 -85 24 -96) -96]
Test Case: 614 | Input/Output: [(-39 53 41 -93) -93]
Test Case: 615 | Input/Output: [(-64 51 -1 -24) -64]
Test Case: 616 | Input/Output: [(-85 83 97 -31) -85]
Test Case: 617 | Input/Output: [(39 -10 58 97) -10]
Test Case: 618 | Input/Output: [(28 -52 -91 3) -91]
Test Case: 619 | Input/Output: [(-55 33 91 51) -55]
Test Case: 620 | Input/Output: [(92 34 34 31) 31]
Test Case: 621 | Input/Output: [(-25 -58 -1 53) -58]
Test Case: 622 | Input/Output: [(60 89 -83 87) -83]
Test Case: 623 | Input/Output: [(6 -31 -2 62) -31]
Test Case: 624 | Input/Output: [(-53 -85 97 -42) -85]
Test Case: 625 | Input/Output: [(-58 -71 86 19) -71]
Test Case: 626 | Input/Output: [(-87 -18 -77 5) -87]
Test Case: 627 | Input/Output: [(-42 0 -37 17) -42]
Test Case: 628 | Input/Output: [(-73 41 87 91) -73]
Test Case: 629 | Input/Output: [(48 48 -59 64) -59]
Test Case: 630 | Input/Output: [(-2 65 32 -45) -45]
Test Case: 631 | Input/Output: [(-55 9 -55 53) -55]
Test Case: 632 | Input/Output: [(-89 92 38 23) -89]
Test Case: 633 | Input/Output: [(-54 49 -95 -38) -95]
Test Case: 634 | Input/Output: [(-41 -99 44 21) -99]
Test Case: 635 | Input/Output: [(29 1 -25 -38) -38]
Test Case: 636 | Input/Output: [(-64 -90 25 -31) -90]
Test Case: 637 | Input/Output: [(-92 -24 -68 -67) -92]
Test Case: 638 | Input/Output: [(32 -80 94 12) -80]
Test Case: 639 | Input/Output: [(-42 85 -58 35) -58]
Test Case: 640 | Input/Output: [(89 -19 -8 -95) -95]
Test Case: 641 | Input/Output: [(-82 44 5 -6) -82]
Test Case: 642 | Input/Output: [(81 43 86 -22) -22]
Test Case: 643 | Input/Output: [(42 75 -83 -76) -83]
Test Case: 644 | Input/Output: [(-85 2 25 57) -85]
Test Case: 645 | Input/Output: [(20 15 86 28) 15]
Test Case: 646 | Input/Output: [(9 -96 -34 81) -96]
Test Case: 647 | Input/Output: [(31 22 -17 -33) -33]
Test Case: 648 | Input/Output: [(-33 51 0 -5) -33]
Test Case: 649 | Input/Output: [(17 -88 -60 -79) -88]
Test Case: 650 | Input/Output: [(46 71 -30 23) -30]
Test Case: 651 | Input/Output: [(-56 -64 -32 -54) -64]
Test Case: 652 | Input/Output: [(89 -54 32 46) -54]
Test Case: 653 | Input/Output: [(32 36 -57 -3) -57]
Test Case: 654 | Input/Output: [(-29 -47 -28 -10) -47]
Test Case: 655 | Input/Output: [(-93 -81 83 43) -93]
Test Case: 656 | Input/Output: [(-18 -88 30 -31) -88]
Test Case: 657 | Input/Output: [(80 28 -74 -46) -74]
Test Case: 658 | Input/Output: [(-73 72 100 2) -73]
Test Case: 659 | Input/Output: [(13 78 -42 24) -42]
Test Case: 660 | Input/Output: [(-20 -98 -6 -41) -98]
Test Case: 661 | Input/Output: [(81 -88 55 43) -88]
Test Case: 662 | Input/Output: [(31 -22 -93 -94) -94]
Test Case: 663 | Input/Output: [(-12 -28 23 36) -28]
Test Case: 664 | Input/Output: [(-72 -65 -47 -23) -72]
Test Case: 665 | Input/Output: [(34 -4 -83 40) -83]
Test Case: 666 | Input/Output: [(-5 28 33 -90) -90]
Test Case: 667 | Input/Output: [(-90 41 -5 31) -90]
Test Case: 668 | Input/Output: [(-16 32 -79 -30) -79]
Test Case: 669 | Input/Output: [(14 -23 -28 -69) -69]
Test Case: 670 | Input/Output: [(-33 -24 -47 9) -47]
Test Case: 671 | Input/Output: [(9 -36 -42 -100) -100]
Test Case: 672 | Input/Output: [(88 3 18 -29) -29]
Test Case: 673 | Input/Output: [(-34 46 -75 -27) -75]
Test Case: 674 | Input/Output: [(28 57 93 23) 23]
Test Case: 675 | Input/Output: [(65 -28 45 -24) -28]
Test Case: 676 | Input/Output: [(10 32 -62 80) -62]
Test Case: 677 | Input/Output: [(-82 48 -68 17) -82]
Test Case: 678 | Input/Output: [(81 31 77 37) 31]
Test Case: 679 | Input/Output: [(90 89 5 -15) -15]
Test Case: 680 | Input/Output: [(82 48 87 89) 48]
Test Case: 681 | Input/Output: [(31 66 41 -14) -14]
Test Case: 682 | Input/Output: [(-39 45 -39 -17) -39]
Test Case: 683 | Input/Output: [(-75 76 -7 42) -75]
Test Case: 684 | Input/Output: [(54 6 -67 -65) -67]
Test Case: 685 | Input/Output: [(-96 76 38 -88) -96]
Test Case: 686 | Input/Output: [(76 9 85 84) 9]
Test Case: 687 | Input/Output: [(-93 -47 -9 23) -93]
Test Case: 688 | Input/Output: [(6 -98 51 99) -98]
Test Case: 689 | Input/Output: [(-4 85 -91 -38) -91]
Test Case: 690 | Input/Output: [(30 58 -70 55) -70]
Test Case: 691 | Input/Output: [(-24 53 -78 -22) -78]
Test Case: 692 | Input/Output: [(-32 55 77 -23) -32]
Test Case: 693 | Input/Output: [(-37 -79 8 -21) -79]
Test Case: 694 | Input/Output: [(-42 -87 14 1) -87]
Test Case: 695 | Input/Output: [(67 -84 -69 -100) -100]
Test Case: 696 | Input/Output: [(6 81 -94 68) -94]
Test Case: 697 | Input/Output: [(-90 97 42 66) -90]
Test Case: 698 | Input/Output: [(-73 -98 90 2) -98]
Test Case: 699 | Input/Output: [(-27 19 -14 -30) -30]
Test Case: 700 | Input/Output: [(-45 9 71 -20) -45]
Test Case: 701 | Input/Output: [(25 63 -63 -11) -63]
Test Case: 702 | Input/Output: [(-8 -44 -43 -20) -44]
Test Case: 703 | Input/Output: [(99 -50 -87 -29) -87]
Test Case: 704 | Input/Output: [(-70 -27 -10 -24) -70]
Test Case: 705 | Input/Output: [(-44 89 13 50) -44]
Test Case: 706 | Input/Output: [(41 99 97 15) 15]
Test Case: 707 | Input/Output: [(58 -46 30 -60) -60]
Test Case: 708 | Input/Output: [(-21 -46 73 42) -46]
Test Case: 709 | Input/Output: [(66 -81 18 -84) -84]
Test Case: 710 | Input/Output: [(-33 83 26 32) -33]
Test Case: 711 | Input/Output: [(56 -79 -16 73) -79]
Test Case: 712 | Input/Output: [(-62 -87 40 89) -87]
Test Case: 713 | Input/Output: [(-70 -50 47 74) -70]
Test Case: 714 | Input/Output: [(86 -15 51 -50) -50]
Test Case: 715 | Input/Output: [(90 -22 3 77) -22]
Test Case: 716 | Input/Output: [(-46 -58 68 -45) -58]
Test Case: 717 | Input/Output: [(97 16 -92 -51) -92]
Test Case: 718 | Input/Output: [(49 47 -9 -73) -73]
Test Case: 719 | Input/Output: [(-46 -62 53 39) -62]
Test Case: 720 | Input/Output: [(0 91 -22 34) -22]
Test Case: 721 | Input/Output: [(20 -16 -26 -97) -97]
Test Case: 722 | Input/Output: [(47 -16 -81 -78) -81]
Test Case: 723 | Input/Output: [(-60 26 -71 35) -71]
Test Case: 724 | Input/Output: [(-60 -42 72 -19) -60]
Test Case: 725 | Input/Output: [(43 78 83 76) 43]
Test Case: 726 | Input/Output: [(-42 -9 99 12) -42]
Test Case: 727 | Input/Output: [(42 -99 16 -73) -99]
Test Case: 728 | Input/Output: [(63 29 -68 90) -68]
Test Case: 729 | Input/Output: [(87 20 -47 -17) -47]
Test Case: 730 | Input/Output: [(26 -96 24 -75) -96]
Test Case: 731 | Input/Output: [(83 -13 -74 63) -74]
Test Case: 732 | Input/Output: [(-62 10 92 -19) -62]
Test Case: 733 | Input/Output: [(62 -34 -81 -39) -81]
Test Case: 734 | Input/Output: [(-82 20 -62 53) -82]
Test Case: 735 | Input/Output: [(40 -35 6 -21) -35]
Test Case: 736 | Input/Output: [(70 -40 -31 -24) -40]
Test Case: 737 | Input/Output: [(94 -5 -26 30) -26]
Test Case: 738 | Input/Output: [(-61 -3 -87 -75) -87]
Test Case: 739 | Input/Output: [(-46 -68 30 84) -68]
Test Case: 740 | Input/Output: [(9 55 -31 56) -31]
Test Case: 741 | Input/Output: [(-48 27 30 87) -48]
Test Case: 742 | Input/Output: [(-71 86 57 -60) -71]
Test Case: 743 | Input/Output: [(-63 8 -26 -56) -63]
Test Case: 744 | Input/Output: [(30 12 -39 -56) -56]
Test Case: 745 | Input/Output: [(29 69 -36 -21) -36]
Test Case: 746 | Input/Output: [(30 98 -19 18) -19]
Test Case: 747 | Input/Output: [(79 15 -71 13) -71]
Test Case: 748 | Input/Output: [(-100 -53 -66 -3) -100]
Test Case: 749 | Input/Output: [(-75 -24 22 45) -75]
Test Case: 750 | Input/Output: [(-74 -99 -3 35) -99]
Test Case: 751 | Input/Output: [(-70 -64 34 68) -70]
Test Case: 752 | Input/Output: [(42 -98 53 -42) -98]
Test Case: 753 | Input/Output: [(94 -67 86 89) -67]
Test Case: 754 | Input/Output: [(11 1 15 42) 1]
Test Case: 755 | Input/Output: [(98 18 50 75) 18]
Test Case: 756 | Input/Output: [(84 -98 -47 28) -98]
Test Case: 757 | Input/Output: [(92 -10 51 -78) -78]
Test Case: 758 | Input/Output: [(60 -21 97 95) -21]
Test Case: 759 | Input/Output: [(95 -54 -62 -71) -71]
Test Case: 760 | Input/Output: [(71 -86 74 -46) -86]
Test Case: 761 | Input/Output: [(-50 89 -6 5) -50]
Test Case: 762 | Input/Output: [(51 -70 21 14) -70]
Test Case: 763 | Input/Output: [(3 -83 -31 73) -83]
Test Case: 764 | Input/Output: [(62 -63 -20 81) -63]
Test Case: 765 | Input/Output: [(-9 -64 47 -16) -64]
Test Case: 766 | Input/Output: [(98 20 -52 -27) -52]
Test Case: 767 | Input/Output: [(94 24 -4 86) -4]
Test Case: 768 | Input/Output: [(-53 -16 -17 -4) -53]
Test Case: 769 | Input/Output: [(-62 25 11 6) -62]
Test Case: 770 | Input/Output: [(18 -84 -54 -95) -95]
Test Case: 771 | Input/Output: [(53 51 57 -80) -80]
Test Case: 772 | Input/Output: [(-2 -68 34 -92) -92]
Test Case: 773 | Input/Output: [(13 -34 -26 30) -34]
Test Case: 774 | Input/Output: [(-28 69 -28 54) -28]
Test Case: 775 | Input/Output: [(82 51 35 -45) -45]
Test Case: 776 | Input/Output: [(7 73 -53 15) -53]
Test Case: 777 | Input/Output: [(100 -38 -56 75) -56]
Test Case: 778 | Input/Output: [(-69 -66 -25 83) -69]
Test Case: 779 | Input/Output: [(49 77 -95 78) -95]
Test Case: 780 | Input/Output: [(-16 8 -95 -63) -95]
Test Case: 781 | Input/Output: [(60 24 90 43) 24]
Test Case: 782 | Input/Output: [(7 21 -45 -98) -98]
Test Case: 783 | Input/Output: [(-99 73 46 22) -99]
Test Case: 784 | Input/Output: [(73 77 2 -28) -28]
Test Case: 785 | Input/Output: [(41 -63 43 -56) -63]
Test Case: 786 | Input/Output: [(-81 73 -20 38) -81]
Test Case: 787 | Input/Output: [(97 62 85 7) 7]
Test Case: 788 | Input/Output: [(-80 -8 23 54) -80]
Test Case: 789 | Input/Output: [(48 -80 -70 90) -80]
Test Case: 790 | Input/Output: [(91 79 -83 -4) -83]
Test Case: 791 | Input/Output: [(-3 -16 53 -62) -62]
Test Case: 792 | Input/Output: [(93 -45 11 54) -45]
Test Case: 793 | Input/Output: [(-53 7 -88 -97) -97]
Test Case: 794 | Input/Output: [(20 -99 -35 -74) -99]
Test Case: 795 | Input/Output: [(-46 -25 90 -74) -74]
Test Case: 796 | Input/Output: [(-77 93 -53 39) -77]
Test Case: 797 | Input/Output: [(71 -46 94 84) -46]
Test Case: 798 | Input/Output: [(-37 70 48 8) -37]
Test Case: 799 | Input/Output: [(34 53 -68 20) -68]
Test Case: 800 | Input/Output: [(64 25 29 72) 25]
Test Case: 801 | Input/Output: [(72 -99 3 85) -99]
Test Case: 802 | Input/Output: [(15 -69 -1 -87) -87]
Test Case: 803 | Input/Output: [(-52 92 95 34) -52]
Test Case: 804 | Input/Output: [(74 39 100 77) 39]
Test Case: 805 | Input/Output: [(-49 94 -28 -18) -49]
Test Case: 806 | Input/Output: [(33 2 -23 62) -23]
Test Case: 807 | Input/Output: [(-3 -66 -66 82) -66]
Test Case: 808 | Input/Output: [(-41 72 -57 -89) -89]
Test Case: 809 | Input/Output: [(73 -20 84 -7) -20]
Test Case: 810 | Input/Output: [(-38 -36 -52 0) -52]
Test Case: 811 | Input/Output: [(-78 14 96 100) -78]
Test Case: 812 | Input/Output: [(84 -97 -53 5) -97]
Test Case: 813 | Input/Output: [(-49 1 -82 3) -82]
Test Case: 814 | Input/Output: [(-83 -73 16 53) -83]
Test Case: 815 | Input/Output: [(-79 -76 6 -10) -79]
Test Case: 816 | Input/Output: [(94 79 -44 -7) -44]
Test Case: 817 | Input/Output: [(98 45 -94 6) -94]
Test Case: 818 | Input/Output: [(20 75 -20 64) -20]
Test Case: 819 | Input/Output: [(-51 7 -90 -67) -90]
Test Case: 820 | Input/Output: [(71 51 8 82) 8]
Test Case: 821 | Input/Output: [(-34 -57 67 -25) -57]
Test Case: 822 | Input/Output: [(99 13 -58 11) -58]
Test Case: 823 | Input/Output: [(-26 -46 2 66) -46]
Test Case: 824 | Input/Output: [(-75 -84 -20 -67) -84]
Test Case: 825 | Input/Output: [(34 -81 -93 -98) -98]
Test Case: 826 | Input/Output: [(93 -75 43 -67) -75]
Test Case: 827 | Input/Output: [(24 -70 -71 38) -71]
Test Case: 828 | Input/Output: [(-3 95 -51 -73) -73]
Test Case: 829 | Input/Output: [(27 7 -48 -44) -48]
Test Case: 830 | Input/Output: [(33 55 -25 21) -25]
Test Case: 831 | Input/Output: [(-65 27 -11 -62) -65]
Test Case: 832 | Input/Output: [(-6 30 -90 -20) -90]
Test Case: 833 | Input/Output: [(70 -66 -48 -46) -66]
Test Case: 834 | Input/Output: [(81 -58 60 61) -58]
Test Case: 835 | Input/Output: [(-70 40 21 50) -70]
Test Case: 836 | Input/Output: [(-7 -86 -54 -26) -86]
Test Case: 837 | Input/Output: [(-5 -63 63 59) -63]
Test Case: 838 | Input/Output: [(25 9 -29 -50) -50]
Test Case: 839 | Input/Output: [(41 49 -78 -35) -78]
Test Case: 840 | Input/Output: [(-84 -22 18 18) -84]
Test Case: 841 | Input/Output: [(-92 -51 -27 -80) -92]
Test Case: 842 | Input/Output: [(-62 -20 86 85) -62]
Test Case: 843 | Input/Output: [(-49 56 68 -86) -86]
Test Case: 844 | Input/Output: [(4 -53 8 -92) -92]
Test Case: 845 | Input/Output: [(42 77 91 69) 42]
Test Case: 846 | Input/Output: [(-77 -37 -51 60) -77]
Test Case: 847 | Input/Output: [(-30 -92 55 -59) -92]
Test Case: 848 | Input/Output: [(15 -47 26 19) -47]
Test Case: 849 | Input/Output: [(13 93 -5 40) -5]
Test Case: 850 | Input/Output: [(6 -34 -37 30) -37]
Test Case: 851 | Input/Output: [(35 -27 36 -1) -27]
Test Case: 852 | Input/Output: [(100 92 -16 17) -16]
Test Case: 853 | Input/Output: [(81 -20 -92 -13) -92]
Test Case: 854 | Input/Output: [(58 85 -8 45) -8]
Test Case: 855 | Input/Output: [(55 42 -47 -50) -50]
Test Case: 856 | Input/Output: [(-16 -22 1 91) -22]
Test Case: 857 | Input/Output: [(-17 3 94 -57) -57]
Test Case: 858 | Input/Output: [(48 97 28 13) 13]
Test Case: 859 | Input/Output: [(-40 44 -86 -30) -86]
Test Case: 860 | Input/Output: [(44 -48 35 -61) -61]
Test Case: 861 | Input/Output: [(89 29 -67 -57) -67]
Test Case: 862 | Input/Output: [(-30 69 78 93) -30]
Test Case: 863 | Input/Output: [(83 32 -66 89) -66]
Test Case: 864 | Input/Output: [(15 66 33 -34) -34]
Test Case: 865 | Input/Output: [(40 2 -6 -16) -16]
Test Case: 866 | Input/Output: [(64 -40 -71 61) -71]
Test Case: 867 | Input/Output: [(-3 2 -99 -10) -99]
Test Case: 868 | Input/Output: [(-67 -4 41 -4) -67]
Test Case: 869 | Input/Output: [(31 79 -68 -96) -96]
Test Case: 870 | Input/Output: [(-34 -86 25 -33) -86]
Test Case: 871 | Input/Output: [(18 40 -95 -96) -96]
Test Case: 872 | Input/Output: [(55 67 45 -5) -5]
Test Case: 873 | Input/Output: [(38 1 7 74) 1]
Test Case: 874 | Input/Output: [(-23 -91 33 -54) -91]
Test Case: 875 | Input/Output: [(-60 14 -37 81) -60]
Test Case: 876 | Input/Output: [(12 -48 58 57) -48]
Test Case: 877 | Input/Output: [(-7 -59 -41 5) -59]
Test Case: 878 | Input/Output: [(77 93 -24 -1) -24]
Test Case: 879 | Input/Output: [(-6 79 38 57) -6]
Test Case: 880 | Input/Output: [(46 -67 -11 9) -67]
Test Case: 881 | Input/Output: [(-31 51 44 50) -31]
Test Case: 882 | Input/Output: [(7 81 63 49) 7]
Test Case: 883 | Input/Output: [(-42 76 -7 79) -42]
Test Case: 884 | Input/Output: [(-60 62 39 3) -60]
Test Case: 885 | Input/Output: [(63 -91 19 -100) -100]
Test Case: 886 | Input/Output: [(31 94 56 -65) -65]
Test Case: 887 | Input/Output: [(6 -24 57 -66) -66]
Test Case: 888 | Input/Output: [(96 38 -17 56) -17]
Test Case: 889 | Input/Output: [(24 -41 -19 93) -41]
Test Case: 890 | Input/Output: [(77 85 -85 -50) -85]
Test Case: 891 | Input/Output: [(38 25 0 -20) -20]
Test Case: 892 | Input/Output: [(-66 41 100 26) -66]
Test Case: 893 | Input/Output: [(27 30 77 79) 27]
Test Case: 894 | Input/Output: [(34 45 -59 -3) -59]
Test Case: 895 | Input/Output: [(-74 19 74 83) -74]
Test Case: 896 | Input/Output: [(16 -59 21 18) -59]
Test Case: 897 | Input/Output: [(-91 -27 49 -38) -91]
Test Case: 898 | Input/Output: [(-90 43 97 -82) -90]
Test Case: 899 | Input/Output: [(1 -80 -11 -93) -93]
Test Case: 900 | Input/Output: [(-66 26 -100 44) -100]
Test Case: 901 | Input/Output: [(47 95 -100 80) -100]
Test Case: 902 | Input/Output: [(-82 -42 29 -15) -82]
Test Case: 903 | Input/Output: [(-62 93 -15 30) -62]
Test Case: 904 | Input/Output: [(-48 92 -97 -9) -97]
Test Case: 905 | Input/Output: [(28 6 -94 -3) -94]
Test Case: 906 | Input/Output: [(-97 -2 -5 -55) -97]
Test Case: 907 | Input/Output: [(-73 73 -75 76) -75]
Test Case: 908 | Input/Output: [(63 73 -99 -89) -99]
Test Case: 909 | Input/Output: [(0 17 -47 3) -47]
Test Case: 910 | Input/Output: [(-29 86 -7 -41) -41]
Test Case: 911 | Input/Output: [(-53 55 59 -30) -53]
Test Case: 912 | Input/Output: [(87 23 -45 -28) -45]
Test Case: 913 | Input/Output: [(-20 -14 27 -8) -20]
Test Case: 914 | Input/Output: [(18 -26 -39 -82) -82]
Test Case: 915 | Input/Output: [(79 16 63 -53) -53]
Test Case: 916 | Input/Output: [(-12 -34 -37 75) -37]
Test Case: 917 | Input/Output: [(-38 88 9 -66) -66]
Test Case: 918 | Input/Output: [(0 -38 -35 35) -38]
Test Case: 919 | Input/Output: [(30 2 56 84) 2]
Test Case: 920 | Input/Output: [(98 -57 -27 -49) -57]
Test Case: 921 | Input/Output: [(-10 -36 -57 -37) -57]
Test Case: 922 | Input/Output: [(-96 50 -12 -26) -96]
Test Case: 923 | Input/Output: [(-34 -15 -61 -35) -61]
Test Case: 924 | Input/Output: [(83 93 93 -39) -39]
Test Case: 925 | Input/Output: [(67 17 6 93) 6]
Test Case: 926 | Input/Output: [(-22 23 -76 -23) -76]
Test Case: 927 | Input/Output: [(59 -23 95 40) -23]
Test Case: 928 | Input/Output: [(-11 46 -1 59) -11]
Test Case: 929 | Input/Output: [(46 -2 -4 -82) -82]
Test Case: 930 | Input/Output: [(-96 -82 0 -42) -96]
Test Case: 931 | Input/Output: [(-70 -30 98 -95) -95]
Test Case: 932 | Input/Output: [(-32 -94 9 52) -94]
Test Case: 933 | Input/Output: [(68 10 -69 15) -69]
Test Case: 934 | Input/Output: [(79 -34 49 -43) -43]
Test Case: 935 | Input/Output: [(-24 14 -85 47) -85]
Test Case: 936 | Input/Output: [(-98 6 50 54) -98]
Test Case: 937 | Input/Output: [(-54 94 -64 12) -64]
Test Case: 938 | Input/Output: [(63 36 -92 32) -92]
Test Case: 939 | Input/Output: [(90 92 62 -11) -11]
Test Case: 940 | Input/Output: [(62 -38 70 -92) -92]
Test Case: 941 | Input/Output: [(25 46 13 8) 8]
Test Case: 942 | Input/Output: [(-68 -71 69 56) -71]
Test Case: 943 | Input/Output: [(11 10 29 -56) -56]
Test Case: 944 | Input/Output: [(-71 29 13 22) -71]
Test Case: 945 | Input/Output: [(-68 -54 -41 15) -68]
Test Case: 946 | Input/Output: [(-7 78 76 -80) -80]
Test Case: 947 | Input/Output: [(-17 -23 66 -14) -23]
Test Case: 948 | Input/Output: [(-45 99 49 -95) -95]
Test Case: 949 | Input/Output: [(-55 -19 -51 -86) -86]
Test Case: 950 | Input/Output: [(51 31 -4 -40) -40]
Test Case: 951 | Input/Output: [(26 38 95 81) 26]
Test Case: 952 | Input/Output: [(-87 73 -57 33) -87]
Test Case: 953 | Input/Output: [(22 67 95 4) 4]
Test Case: 954 | Input/Output: [(4 -18 92 27) -18]
Test Case: 955 | Input/Output: [(91 -93 87 58) -93]
Test Case: 956 | Input/Output: [(-15 -42 31 -69) -69]
Test Case: 957 | Input/Output: [(77 34 47 68) 34]
Test Case: 958 | Input/Output: [(42 -10 71 -32) -32]
Test Case: 959 | Input/Output: [(-71 -27 5 38) -71]
Test Case: 960 | Input/Output: [(-14 -7 14 -74) -74]
Test Case: 961 | Input/Output: [(5 34 79 -81) -81]
Test Case: 962 | Input/Output: [(-57 12 18 19) -57]
Test Case: 963 | Input/Output: [(-75 -44 -46 -77) -77]
Test Case: 964 | Input/Output: [(-23 -92 -97 96) -97]
Test Case: 965 | Input/Output: [(14 -12 54 -67) -67]
Test Case: 966 | Input/Output: [(82 -88 -17 -19) -88]
Test Case: 967 | Input/Output: [(-12 -21 -88 62) -88]
Test Case: 968 | Input/Output: [(-65 17 46 1) -65]
Test Case: 969 | Input/Output: [(93 -26 -42 -51) -51]
Test Case: 970 | Input/Output: [(51 -75 78 12) -75]
Test Case: 971 | Input/Output: [(-81 85 -1 0) -81]
Test Case: 972 | Input/Output: [(90 -66 -69 -46) -69]
Test Case: 973 | Input/Output: [(-30 -3 32 4) -30]
Test Case: 974 | Input/Output: [(67 -37 29 -26) -37]
Test Case: 975 | Input/Output: [(91 -19 -90 -62) -90]
Test Case: 976 | Input/Output: [(46 -57 10 -17) -57]
Test Case: 977 | Input/Output: [(24 33 -79 -95) -95]
Test Case: 978 | Input/Output: [(62 -12 -91 97) -91]
Test Case: 979 | Input/Output: [(18 37 -74 0) -74]
Test Case: 980 | Input/Output: [(-7 91 20 16) -7]
Test Case: 981 | Input/Output: [(-82 -42 45 100) -82]
Test Case: 982 | Input/Output: [(5 -100 87 -6) -100]
Test Case: 983 | Input/Output: [(-76 -73 -17 58) -76]
Test Case: 984 | Input/Output: [(39 -7 -97 -18) -97]
Test Case: 985 | Input/Output: [(-48 -52 34 -100) -100]
Test Case: 986 | Input/Output: [(-3 -10 48 16) -10]
Test Case: 987 | Input/Output: [(-100 14 29 99) -100]
Test Case: 988 | Input/Output: [(-59 45 35 -18) -59]
Test Case: 989 | Input/Output: [(-76 79 83 -51) -76]
Test Case: 990 | Input/Output: [(-36 23 -8 52) -36]
Test Case: 991 | Input/Output: [(-62 -33 -19 49) -62]
Test Case: 992 | Input/Output: [(56 -5 -75 19) -75]
Test Case: 993 | Input/Output: [(27 -7 -96 58) -96]
Test Case: 994 | Input/Output: [(66 -58 95 -89) -89]
Test Case: 995 | Input/Output: [(-41 97 -38 -69) -69]
Test Case: 996 | Input/Output: [(6 -52 76 74) -52]
Test Case: 997 | Input/Output: [(0 -19 -36 62) -36]
Test Case: 998 | Input/Output: [(-59 -83 4 -43) -83]
Test Case: 999 | Input/Output: [(56 90 -3 27) -3]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 32 111 48 -81 114 -81 -20 -59 -71 27 -29 -17 21 72 12 -103
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[94 94 23 94] 23] [[-2 -2 -2 -76] -76] [[59 59 -63 59] -63] [[-18 -91 -91 -91] -91] [[100 100 -48 100] -48] [[10 10 10 -88] -88] [[48 -66 -66 -66] -66] [[63 -80 -80 -80] -80] [[92 92 75 92] 75] [[-48 -99 -48 -48] -99] [(25 25 25 25) 25] [(-93 -93 -93 -93) -93] [(-29 -29 -29 -29) -29] [(21 21 21 21) 21] [(98 98 98 98) 98] [(95 26 39 49) 26] [(14 66 4 27) 4] [(71 91 78 55) 55] [(68 72 19 31) 19] [(96 7 57 78) 7] [(14 81 64 28) 14] [(21 60 37 88) 21] [(38 52 85 45) 38] [(35 74 6 2) 2] [(34 84 58 28) 28] [(71 42 27 66) 27] [(92 56 33 32) 32] [(82 85 13 16) 13] [(36 20 85 36) 20] [(92 86 26 74) 26] [(35 87 78 60) 35] [(84 40 17 39) 17] [(84 83 8 59) 8] [(9 21 15 74) 9] [(12 48 53 49) 12] [(-26 -47 -98 1) -98] [(38 -88 -23 -14) -88] [(-74 -40 -19 -23) -74] [(13 69 67 58) 13] [(49 3 -45 -3) -45] [(77 -4 -54 -73) -73] [(-98 -3 64 32) -98] [(12 -42 73 21) -42] [(-49 -57 20 -100) -100] [(-37 98 -91 -38) -91] [(-67 -14 74 -50) -67] [(-60 -38 -20 4) -60] [(-98 81 -24 43) -98] [(5 -93 17 8) -93] [(-47 -3 -100 27) -100] [(-98 68 16 -44) -98] [(-91 56 -28 68) -91] [(-41 11 -70 -4) -70] [(56 70 15 -97) -97] [(-10 -73 56 -15) -73] [(-17 -91 9 71) -91] [(-16 -31 13 89) -31] [(31 3 91 28) 3] [(17 -44 -32 43) -44] [(-64 -71 96 90) -71] [(8 39 -45 12) -45] [(-30 -89 18 56) -89] [(5 -14 78 69) -14] [(78 56 45 -12) -12] [(-90 32 85 45) -90] [(-19 2 9 -56) -56] [(35 3 -100 -61) -100] [(-93 67 -59 -84) -93] [(34 7 100 -10) -10] [(2 77 39 65) 2] [(-74 -82 6 40) -82] [(68 -4 31 -99) -99] [(86 -8 -11 5) -11] [(38 41 79 -4) -4] [(63 68 -38 -39) -39] [(9 -28 -70 18) -70] [(-32 90 58 30) -32] [(82 97 37 -25) -25] [(74 50 -98 96) -98] [(-40 -30 -59 44) -59] [(-60 32 52 60) -60] [(-29 76 -87 79) -87] [(-43 -9 57 -37) -43] [(100 -21 -21 -8) -21] [(-41 -16 23 -3) -41] [(-86 24 39 21) -86] [(10 14 35 25) 10] [(12 -98 -15 -29) -98] [(-29 74 -61 -7) -61] [(64 98 -84 -47) -84] [(-40 -32 -40 -27) -40] [(32 -80 -42 -56) -80] [(62 -38 37 -80) -80] [(-6 -19 58 98) -19] [(-37 93 -60 -51) -60])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -76                 | Program output: -2                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: 10                 
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -48                
Correct output: 25                  | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -29                
Correct output: 21                  | Program output: 21                 
Correct output: 98                  | Program output: 98                 
Correct output: 26                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 55                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 57                 
Correct output: 14                  | Program output: 64                 
Correct output: 21                  | Program output: 37                 
Correct output: 38                  | Program output: 85                 
Correct output: 2                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 85                 
Correct output: 26                  | Program output: 26                 
Correct output: 35                  | Program output: 78                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 15                 
Correct output: 12                  | Program output: 53                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -23                
Correct output: -74                 | Program output: -19                
Correct output: 13                  | Program output: 67                 
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -54                
Correct output: -98                 | Program output: 64                 
Correct output: -42                 | Program output: 73                 
Correct output: -100                | Program output: 20                 
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: 74                 
Correct output: -60                 | Program output: -20                
Correct output: -98                 | Program output: -24                
Correct output: -93                 | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: 16                 
Correct output: -91                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 15                 
Correct output: -73                 | Program output: 56                 
Correct output: -91                 | Program output: 9                  
Correct output: -31                 | Program output: 13                 
Correct output: 3                   | Program output: 91                 
Correct output: -44                 | Program output: -32                
Correct output: -71                 | Program output: 96                 
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: 18                 
Correct output: -14                 | Program output: 78                 
Correct output: -12                 | Program output: 45                 
Correct output: -90                 | Program output: 85                 
Correct output: -56                 | Program output: 9                  
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -59                
Correct output: -10                 | Program output: 100                
Correct output: 2                   | Program output: 39                 
Correct output: -82                 | Program output: 6                  
Correct output: -99                 | Program output: 31                 
Correct output: -11                 | Program output: -11                
Correct output: -4                  | Program output: 79                 
Correct output: -39                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: 58                 
Correct output: -25                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 52                 
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 57                 
Correct output: -21                 | Program output: -21                
Correct output: -41                 | Program output: 23                 
Correct output: -86                 | Program output: 39                 
Correct output: 10                  | Program output: 35                 
Correct output: -98                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -42                
Correct output: -80                 | Program output: 37                 
Correct output: -19                 | Program output: 58                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 2, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 2, :instruction -41} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_657} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (exec_swap (in3 integer_rot) () boolean_stackdepth in1 exec_rot (tagged_169) (boolean_rot boolean_or integer_rot) (exec_dup_items) exec_s (boolean_swap exec_yank print_integer integer_add) (exec_flush exec_k () (print_newline print_integer integer_lte exec_while (exec_do*while (integer_fromboolean integer_lte boolean_empty exec_yank print_exec (integer_yank exec_dup_items integer_empty exec_dup_items tagged_30 -41)) exec_s (exec_rot (integer_div) (exec_if (exec_dup () exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_yankdup exec_shove (in4) exec_do*range (integer_dec integer_eq boolean_eq exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank boolean_shove) (exec_s_when_autoconstructing (integer_gte) () (integer_dup_times exec_yankdup) in2 boolean_xor integer_eq exec_dup_times (boolean_frominteger boolean_and)) exec_do*range (in1 exec_while () integer_eq integer_lte) exec_k_when_autoconstructing (boolean_dup_items exec_dup (boolean_dup exec_do*count (exec_shove (print_newline) integer_pop exec_s (integer_mod integer_stackdepth boolean_dup_times) () ()))) ()))) ()) ()) () ()))) ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 129
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 2, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 2, :instruction -41} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_657} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (exec_swap (in3 integer_rot) () boolean_stackdepth in1 exec_rot (tagged_169) (boolean_rot boolean_or integer_rot) (exec_dup_items) exec_s (boolean_swap exec_yank print_integer integer_add) (exec_flush exec_k () (print_newline print_integer integer_lte exec_while (exec_do*while (integer_fromboolean integer_lte boolean_empty exec_yank print_exec (integer_yank exec_dup_items integer_empty exec_dup_items tagged_30 -41)) exec_s (exec_rot (integer_div) (exec_if (exec_dup () exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_yankdup exec_shove (in4) exec_do*range (integer_dec integer_eq boolean_eq exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank boolean_shove) (exec_s_when_autoconstructing (integer_gte) () (integer_dup_times exec_yankdup) in2 boolean_xor integer_eq exec_dup_times (boolean_frominteger boolean_and)) exec_do*range (in1 exec_while () integer_eq integer_lte) exec_k_when_autoconstructing (boolean_dup_items exec_dup (boolean_dup exec_do*count (exec_shove (print_newline) integer_pop exec_s (integer_mod integer_stackdepth boolean_dup_times) () ()))) ()))) ()) ()) () ()))) ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 129
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 2 4 3 12 4 2 14 23 2)
Population mean number of elite cases: 0.07
Count of perfect (error zero) individuals by case: (3 2 4 3 12 4 2 14 23 2)
Population mean number of perfect (error zero) cases: 0.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if})
Best program: (exec_do*while (integer_gte) in3 exec_empty exec_empty boolean_flush print_integer boolean_eq integer_yankdup exec_s_when_autoconstructing (boolean_dup in4 boolean_dup_times) (integer_shove integer_min exec_dup (exec_eq exec_s (integer_gte print_integer) (exec_do*while (exec_when (boolean_stackdepth boolean_invert_first_then_and boolean_yankdup)) in1 integer_shove in4) (exec_s (exec_s_when_autoconstructing (exec_yankdup integer_dec) (boolean_swap in4 exec_do*times (exec_if () ())) ()) () ()))) ())
Errors: [0 1 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 36
Size: 56
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 9.931
Median total errors in population: 10
Error averages by case: (0.997 0.998 0.996 0.997 0.988 0.996 0.998 0.986 0.977 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.969
Average program size in population (points): 67.473
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 473994
--- Timings ---
Current time: 1559594105543 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 31.1%
Fitness Testing:      1.7 seconds, 65.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 23                  | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -63                 | Program output: 59                 
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: 100                
Correct output: -88                 | Program output: -88                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: 75                  | Program output: 92                 
Correct output: -99                 | Program output: -48                
Correct output: 25                  | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -29                
Correct output: 21                  | Program output: 21                 
Correct output: 98                  | Program output: 98                 
Correct output: 26                  | Program output: 49                 
Correct output: 4                   | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 31                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 28                 
Correct output: 21                  | Program output: 88                 
Correct output: 38                  | Program output: 45                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 66                 
Correct output: 32                  | Program output: 32                 
Correct output: 13                  | Program output: 16                 
Correct output: 20                  | Program output: 36                 
Correct output: 26                  | Program output: 74                 
Correct output: 35                  | Program output: 60                 
Correct output: 17                  | Program output: 39                 
Correct output: 8                   | Program output: 59                 
Correct output: 9                   | Program output: 74                 
Correct output: 12                  | Program output: 49                 
Correct output: -98                 | Program output: 1                  
Correct output: -88                 | Program output: -14                
Correct output: -74                 | Program output: -23                
Correct output: 13                  | Program output: 58                 
Correct output: -45                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -98                 | Program output: 32                 
Correct output: -42                 | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -38                
Correct output: -67                 | Program output: -50                
Correct output: -60                 | Program output: 4                  
Correct output: -98                 | Program output: 43                 
Correct output: -93                 | Program output: 8                  
Correct output: -100                | Program output: 27                 
Correct output: -98                 | Program output: -44                
Correct output: -91                 | Program output: 68                 
Correct output: -70                 | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: -15                
Correct output: -91                 | Program output: 71                 
Correct output: -31                 | Program output: 89                 
Correct output: 3                   | Program output: 28                 
Correct output: -44                 | Program output: 43                 
Correct output: -71                 | Program output: 90                 
Correct output: -45                 | Program output: 12                 
Correct output: -89                 | Program output: 56                 
Correct output: -14                 | Program output: 69                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: 45                 
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -84                
Correct output: -10                 | Program output: -10                
Correct output: 2                   | Program output: 65                 
Correct output: -82                 | Program output: 40                 
Correct output: -99                 | Program output: -99                
Correct output: -11                 | Program output: 5                  
Correct output: -4                  | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -70                 | Program output: 18                 
Correct output: -32                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: 96                 
Correct output: -59                 | Program output: 44                 
Correct output: -60                 | Program output: 60                 
Correct output: -87                 | Program output: 79                 
Correct output: -43                 | Program output: -37                
Correct output: -21                 | Program output: -8                 
Correct output: -41                 | Program output: -3                 
Correct output: -86                 | Program output: 21                 
Correct output: 10                  | Program output: 25                 
Correct output: -98                 | Program output: -29                
Correct output: -61                 | Program output: -7                 
Correct output: -84                 | Program output: -47                
Correct output: -40                 | Program output: -27                
Correct output: -80                 | Program output: -56                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: 98                 
Correct output: -60                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_div} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_331} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3})
Lexicase best program: (exec_k_when_autoconstructing (in4 integer_gte exec_noop print_boolean integer_add boolean_eq) () integer_mult boolean_not exec_swap (print_integer integer_min integer_gt exec_dup_items print_integer exec_empty) (boolean_xor) boolean_dup_items boolean_rot integer_yankdup boolean_flush integer_sub in1 integer_yank exec_yankdup integer_div integer_lte integer_dup_times exec_s_when_autoconstructing (boolean_swap in4) (exec_eq exec_dup_times (exec_k (boolean_dup_items integer_gt integer_eq exec_y_when_autoconstructing (exec_dup_times (integer_max boolean_yankdup boolean_invert_second_then_and) integer_mult integer_gte) integer_rot) (integer_yankdup) exec_dup_items) exec_pop (integer_yank boolean_xor integer_rot exec_shove (exec_do*count (boolean_yank integer_div exec_flush boolean_invert_second_then_and exec_eq exec_do*times (exec_while (integer_add boolean_swap print_exec (exec_y_when_autoconstructing (integer_dup_items exec_shove (boolean_xor) integer_shove integer_mult print_integer) boolean_or integer_flush integer_sub boolean_eq) integer_lte exec_do*times (exec_dup () boolean_dup) boolean_stackdepth exec_dup_times ()) integer_rot) exec_do*range (exec_empty exec_yankdup in4 print_integer integer_yankdup exec_do*times () boolean_invert_first_then_and) print_integer exec_swap (tag_integer_331 exec_empty) (boolean_yank) in3)))) ())
Lexicase best errors: [0 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 123
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_div} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_331} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction in3})
Zero cases best program: (exec_k_when_autoconstructing (in4 integer_gte exec_noop print_boolean integer_add boolean_eq) () integer_mult boolean_not exec_swap (print_integer integer_min integer_gt exec_dup_items print_integer exec_empty) (boolean_xor) boolean_dup_items boolean_rot integer_yankdup boolean_flush integer_sub in1 integer_yank exec_yankdup integer_div integer_lte integer_dup_times exec_s_when_autoconstructing (boolean_swap in4) (exec_eq exec_dup_times (exec_k (boolean_dup_items integer_gt integer_eq exec_y_when_autoconstructing (exec_dup_times (integer_max boolean_yankdup boolean_invert_second_then_and) integer_mult integer_gte) integer_rot) (integer_yankdup) exec_dup_items) exec_pop (integer_yank boolean_xor integer_rot exec_shove (exec_do*count (boolean_yank integer_div exec_flush boolean_invert_second_then_and exec_eq exec_do*times (exec_while (integer_add boolean_swap print_exec (exec_y_when_autoconstructing (integer_dup_items exec_shove (boolean_xor) integer_shove integer_mult print_integer) boolean_or integer_flush integer_sub boolean_eq) integer_lte exec_do*times (exec_dup () boolean_dup) boolean_stackdepth exec_dup_times ()) integer_rot) exec_do*range (exec_empty exec_yankdup in4 print_integer integer_yankdup exec_do*times () boolean_invert_first_then_and) print_integer exec_swap (tag_integer_331 exec_empty) (boolean_yank) in3)))) ())
Zero cases best errors: [0 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 123
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 157 173 176 182 7 173 157 177 6)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (176 157 173 176 182 7 173 157 177 6)
Population mean number of perfect (error zero) cases: 1.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank})
Best program: (boolean_stackdepth exec_yankdup boolean_dup_times exec_if (in4 boolean_xor print_integer in4 boolean_or integer_dec exec_rot (integer_lte boolean_invert_first_then_and integer_add exec_y (boolean_yank integer_pop exec_yank) integer_inc) (integer_lt exec_when (integer_yank)) ()) ())
Errors: [0 1 0 0 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 8.616
Median total errors in population: 10
Error averages by case: (0.824 0.843 0.827 0.824 0.818 0.993 0.827 0.843 0.823 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.704
Average program size in population (points): 66.227
Average percent parens in population: 0.300
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1024600
--- Timings ---
Current time: 1559594108102 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.9 seconds, 37.3%
Fitness Testing:      2.5 seconds, 48.5%
Report:               0.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -76                 | Program output: -2                 
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: 10                 
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -48                
Correct output: 25                  | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -29                
Correct output: 21                  | Program output: 21                 
Correct output: 98                  | Program output: 98                 
Correct output: 26                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 55                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 57                 
Correct output: 14                  | Program output: 64                 
Correct output: 21                  | Program output: 37                 
Correct output: 38                  | Program output: 85                 
Correct output: 2                   | Program output: 6                  
Correct output: 28                  | Program output: 58                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 85                 
Correct output: 26                  | Program output: 26                 
Correct output: 35                  | Program output: 78                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 15                 
Correct output: 12                  | Program output: 53                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -23                
Correct output: -74                 | Program output: -19                
Correct output: 13                  | Program output: 67                 
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -54                
Correct output: -98                 | Program output: 64                 
Correct output: -42                 | Program output: 73                 
Correct output: -100                | Program output: 20                 
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: 74                 
Correct output: -60                 | Program output: -20                
Correct output: -98                 | Program output: -24                
Correct output: -93                 | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: 16                 
Correct output: -91                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 15                 
Correct output: -73                 | Program output: 56                 
Correct output: -91                 | Program output: 9                  
Correct output: -31                 | Program output: 13                 
Correct output: 3                   | Program output: 91                 
Correct output: -44                 | Program output: -32                
Correct output: -71                 | Program output: 96                 
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: 18                 
Correct output: -14                 | Program output: 78                 
Correct output: -12                 | Program output: 45                 
Correct output: -90                 | Program output: 85                 
Correct output: -56                 | Program output: 9                  
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -59                
Correct output: -10                 | Program output: 100                
Correct output: 2                   | Program output: 39                 
Correct output: -82                 | Program output: 6                  
Correct output: -99                 | Program output: 31                 
Correct output: -11                 | Program output: -11                
Correct output: -4                  | Program output: 79                 
Correct output: -39                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: 58                 
Correct output: -25                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 52                 
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: 57                 
Correct output: -21                 | Program output: -21                
Correct output: -41                 | Program output: 23                 
Correct output: -86                 | Program output: 39                 
Correct output: 10                  | Program output: 35                 
Correct output: -98                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -42                
Correct output: -80                 | Program output: 37                 
Correct output: -19                 | Program output: 58                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if})
Lexicase best program: (exec_do*while (exec_dup_items integer_gte) in3 integer_gte exec_noop exec_empty exec_empty print_integer exec_yankdup exec_s_when_autoconstructing (boolean_dup in4 boolean_dup_times) (integer_shove integer_min exec_dup (exec_eq exec_s (boolean_stackdepth integer_gte print_integer) (exec_do*while (exec_when (boolean_invert_first_then_and boolean_yankdup)) in1 integer_shove in4) (exec_s (exec_do*count (exec_s_when_autoconstructing (exec_yankdup boolean_swap in4 exec_do*times (exec_if () ())) () ())) () ()))) ())
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.362
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if})
Zero cases best program: (exec_do*while (exec_dup_items integer_gte) in3 integer_gte exec_noop exec_empty exec_empty print_integer exec_yankdup exec_s_when_autoconstructing (boolean_dup in4 boolean_dup_times) (integer_shove integer_min exec_dup (exec_eq exec_s (boolean_stackdepth integer_gte print_integer) (exec_do*while (exec_when (boolean_invert_first_then_and boolean_yankdup)) in1 integer_shove in4) (exec_s (exec_do*count (exec_s_when_autoconstructing (exec_yankdup boolean_swap in4 exec_do*times (exec_if () ())) () ())) () ()))) ())
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.362
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 81 24 631 25 28 416 27 25 422)
Population mean number of elite cases: 1.75
Count of perfect (error zero) individuals by case: (76 81 24 631 25 28 416 27 25 422)
Population mean number of perfect (error zero) cases: 1.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction tagged_30} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction -41} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times})
Best program: (exec_swap (in3 boolean_stackdepth) (in1) exec_rot (tagged_169) (boolean_rot boolean_frominteger boolean_or integer_rot) (boolean_stackdepth exec_dup_items) integer_fromboolean exec_s (boolean_swap exec_yank print_integer exec_dup (exec_flush exec_k () (print_newline print_integer integer_lte exec_while (exec_do*while (integer_fromboolean integer_lte boolean_empty print_exec (integer_yank exec_dup_items integer_empty exec_dup_items exec_swap () (tagged_30 integer_max boolean_dup_items -41)) boolean_or exec_s (exec_rot (integer_stackdepth) (integer_div) (exec_if (in2 exec_dup () integer_add) (boolean_dup_items exec_pop (integer_eq integer_yank integer_yankdup exec_y_when_autoconstructing () exec_shove (boolean_pop in4) exec_rot () (exec_do*range (integer_dec boolean_eq exec_k_when_autoconstructing (exec_flush exec_do*times () print_newline integer_yank exec_y (boolean_shove) exec_s_when_autoconstructing (integer_gte) () (boolean_shove) exec_yankdup) (in2 integer_min integer_eq integer_fromboolean exec_dup_times (boolean_frominteger boolean_and)) exec_do*range (in1 exec_while () integer_eq exec_k_when_autoconstructing (integer_stackdepth boolean_dup_items exec_dup (exec_noop boolean_dup exec_when (exec_do*count (exec_shove (print_newline) integer_pop exec_s (integer_mod integer_stackdepth boolean_dup_times) () ())))) ()))) ())))) () ()))))) () ())
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 97
Size: 149
Percent parens: 0.349
--- Population Statistics ---
Average total errors in population: 8.245
Median total errors in population: 7
Error averages by case: (0.924 0.919 0.976 0.369 0.975 0.972 0.584 0.973 0.975 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.703
Average program size in population (points): 68.512
Average percent parens in population: 0.282
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1739571
--- Timings ---
Current time: 1559594110431 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.1 seconds, 39.5%
Fitness Testing:      3.3 seconds, 42.5%
Report:               1.3 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 94                 
Correct output: -76                 | Program output: -2                 
Correct output: -63                 | Program output: 59                 
Correct output: -91                 | Program output: -18                
Correct output: -48                 | Program output: 100                
Correct output: -88                 | Program output: 10                 
Correct output: -66                 | Program output: 48                 
Correct output: -80                 | Program output: 63                 
Correct output: 75                  | Program output: 92                 
Correct output: -99                 | Program output: -48                
Correct output: 25                  | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -29                
Correct output: 21                  | Program output: 21                 
Correct output: 98                  | Program output: 98                 
Correct output: 26                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: 55                  | Program output: 71                 
Correct output: 19                  | Program output: 68                 
Correct output: 7                   | Program output: 96                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 35                 
Correct output: 28                  | Program output: 34                 
Correct output: 27                  | Program output: 71                 
Correct output: 32                  | Program output: 92                 
Correct output: 13                  | Program output: 82                 
Correct output: 20                  | Program output: 36                 
Correct output: 26                  | Program output: 92                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 84                 
Correct output: 8                   | Program output: 84                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: -98                 | Program output: -26                
Correct output: -88                 | Program output: 38                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: -45                 | Program output: 49                 
Correct output: -73                 | Program output: 77                 
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 12                 
Correct output: -100                | Program output: -49                
Correct output: -91                 | Program output: -37                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: 5                  
Correct output: -100                | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 56                 
Correct output: -73                 | Program output: -10                
Correct output: -91                 | Program output: -17                
Correct output: -31                 | Program output: -16                
Correct output: 3                   | Program output: 31                 
Correct output: -44                 | Program output: 17                 
Correct output: -71                 | Program output: -64                
Correct output: -45                 | Program output: 8                  
Correct output: -89                 | Program output: -30                
Correct output: -14                 | Program output: 5                  
Correct output: -12                 | Program output: 78                 
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -19                
Correct output: -100                | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -10                 | Program output: 34                 
Correct output: 2                   | Program output: 2                  
Correct output: -82                 | Program output: -74                
Correct output: -99                 | Program output: 68                 
Correct output: -11                 | Program output: 86                 
Correct output: -4                  | Program output: 38                 
Correct output: -39                 | Program output: 63                 
Correct output: -70                 | Program output: 9                  
Correct output: -32                 | Program output: -32                
Correct output: -25                 | Program output: 82                 
Correct output: -98                 | Program output: 74                 
Correct output: -59                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -29                
Correct output: -43                 | Program output: -43                
Correct output: -21                 | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -86                 | Program output: -86                
Correct output: 10                  | Program output: 10                 
Correct output: -98                 | Program output: 12                 
Correct output: -61                 | Program output: -29                
Correct output: -84                 | Program output: 64                 
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 32                 
Correct output: -80                 | Program output: 62                 
Correct output: -19                 | Program output: -6                 
Correct output: -60                 | Program output: -37                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 2, :instruction -41} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in3 boolean_empty integer_rot boolean_stackdepth in1 exec_rot (exec_s_when_autoconstructing () (tagged_169) (boolean_rot exec_swap (boolean_or integer_rot) (in3 exec_s (boolean_swap exec_yank print_integer integer_add) (exec_flush exec_if (print_newline print_integer exec_while (exec_do*while (integer_fromboolean integer_lte boolean_eq boolean_empty boolean_invert_second_then_and) exec_yank exec_eq print_exec (integer_dup boolean_dup_items integer_yank exec_dup_items integer_empty exec_dup_items print_boolean) -41)) (exec_s (boolean_frominteger exec_rot (exec_do*times () integer_div) (integer_empty exec_dup () exec_empty boolean_dup_items exec_pop (integer_yankdup exec_yankdup exec_shove (in4) exec_do*range (integer_dec exec_if () (exec_k_when_autoconstructing (exec_flush exec_do*times () integer_gt integer_yank boolean_shove) (exec_s_when_autoconstructing (integer_gte) () (in2 boolean_flush integer_eq boolean_frominteger in1 exec_while () integer_eq integer_lte) boolean_dup_items integer_add exec_dup (boolean_dup exec_do*count (exec_shove (print_newline) integer_pop exec_s (integer_mod exec_do*while (integer_stackdepth boolean_dup_times)) () ()))))))) ()) () ())) ()))) () ())
Lexicase best errors: [1 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 130
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 2, :instruction -41} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in3 boolean_empty integer_rot boolean_stackdepth in1 exec_rot (exec_s_when_autoconstructing () (tagged_169) (boolean_rot exec_swap (boolean_or integer_rot) (in3 exec_s (boolean_swap exec_yank print_integer integer_add) (exec_flush exec_if (print_newline print_integer exec_while (exec_do*while (integer_fromboolean integer_lte boolean_eq boolean_empty boolean_invert_second_then_and) exec_yank exec_eq print_exec (integer_dup boolean_dup_items integer_yank exec_dup_items integer_empty exec_dup_items print_boolean) -41)) (exec_s (boolean_frominteger exec_rot (exec_do*times () integer_div) (integer_empty exec_dup () exec_empty boolean_dup_items exec_pop (integer_yankdup exec_yankdup exec_shove (in4) exec_do*range (integer_dec exec_if () (exec_k_when_autoconstructing (exec_flush exec_do*times () integer_gt integer_yank boolean_shove) (exec_s_when_autoconstructing (integer_gte) () (in2 boolean_flush integer_eq boolean_frominteger in1 exec_while () integer_eq integer_lte) boolean_dup_items integer_add exec_dup (boolean_dup exec_do*count (exec_shove (print_newline) integer_pop exec_s (integer_mod exec_do*while (integer_stackdepth boolean_dup_times)) () ()))))))) ()) () ())) ()))) () ())
Zero cases best errors: [1 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 130
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (145 62 1 127 1 297 144 1000 1000 62)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (145 62 1 127 1 297 144 0 0 62)
Population mean number of perfect (error zero) cases: 0.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_652} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_30} {:close 2, :instruction -41} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times})
Best program: (in3 boolean_empty integer_rot boolean_stackdepth in1 exec_rot (tagged_652 boolean_rot exec_swap (boolean_or integer_rot) (in3 exec_s (boolean_swap exec_yank print_integer integer_add) (exec_when (exec_flush exec_if (exec_k () (print_newline boolean_and) print_integer exec_while (exec_do*while (integer_fromboolean exec_noop integer_lte boolean_empty boolean_invert_second_then_and) exec_yank exec_eq print_exec (boolean_dup_items integer_lte) integer_yank exec_yank integer_empty print_boolean) tagged_30 -41) () exec_s (exec_rot (exec_do*times () integer_div) (integer_empty exec_dup () exec_empty boolean_dup_items exec_pop (integer_gt integer_yankdup exec_yankdup exec_shove (in4) exec_do*range (integer_dec boolean_invert_second_then_and integer_eq boolean_eq exec_if () (exec_k_when_autoconstructing (exec_flush exec_if (integer_gt integer_yank boolean_shove) (exec_if (exec_do*count (exec_s_when_autoconstructing (integer_gte) () (in2 boolean_dup boolean_frominteger in1 exec_while () integer_eq integer_lte) boolean_dup_items print_exec (exec_dup (integer_add exec_dup (boolean_dup exec_empty exec_do*count (exec_shove (print_newline) print_newline) integer_pop exec_s (integer_mod boolean_dup_times) () ()))))) ())) ())))) ()) () ())) ())) () ())
Errors: [1 0 1 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 94
Size: 143
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 9.161
Median total errors in population: 9
Error averages by case: (0.855 0.938 0.999 0.873 0.999 0.703 0.856 1.0 1.0 0.938)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 65.195
Average program size in population (points): 94.834
Average percent parens in population: 0.309
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2271492
--- Timings ---
Current time: 1559594112628 milliseconds
Total Time:          10.0 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.4 seconds, 43.8%
Fitness Testing:      3.9 seconds, 39.6%
Report:               1.6 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -76                 | Program output: -2                 
Correct output: -63                 | Program output: 59                 
Correct output: -91                 | Program output: -18                
Correct output: -48                 | Program output: 100                
Correct output: -88                 | Program output: -88                
Correct output: -66                 | Program output: 48                 
Correct output: -80                 | Program output: 63                 
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -48                
Correct output: 25                  | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -29                
Correct output: 21                  | Program output: 21                 
Correct output: 98                  | Program output: 98                 
Correct output: 26                  | Program output: 39                 
Correct output: 4                   | Program output: 04                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 57                 
Correct output: 14                  | Program output: 28                 
Correct output: 21                  | Program output: 37                 
Correct output: 38                  | Program output: 45                 
Correct output: 2                   | Program output: 35                 
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 36                 
Correct output: 26                  | Program output: 26                 
Correct output: 35                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 84
                
Correct output: 9                   | Program output: 15                 
Correct output: 12                  | Program output: 49                 
Correct output: -98                 | Program output: -26                
Correct output: -88                 | Program output: 38                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 58                 
Correct output: -45                 | Program output: 49                 
Correct output: -73                 | Program output: 77                 
Correct output: -98                 | Program output: 32                 
Correct output: -42                 | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -37                
Correct output: -67                 | Program output: -50                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: 8                  
Correct output: -100                | Program output: -47                
Correct output: -98                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: -15                
Correct output: -91                 | Program output: -17                
Correct output: -31                 | Program output: 13                 
Correct output: 3                   | Program output: 28                 
Correct output: -44                 | Program output: 17                 
Correct output: -71                 | Program output: 90                 
Correct output: -45                 | Program output: 8                  
Correct output: -89                 | Program output: 18                 
Correct output: -14                 | Program output: 69                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: 45                 
Correct output: -56                 | Program output: -19                
Correct output: -100                | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -10                 | Program output: -10                
Correct output: 2                   | Program output: 39                 
Correct output: -82                 | Program output: -74                
Correct output: -99                 | Program output: -99                
Correct output: -11                 | Program output: 86                 
Correct output: -4                  | Program output: -4                 
Correct output: -39                 | Program output: 63                 
Correct output: -70                 | Program output: 9                  
Correct output: -32                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: 74                 
Correct output: -59                 | Program output: -40                
Correct output: -60                 | Program output: 52                 
Correct output: -87                 | Program output: -29                
Correct output: -43                 | Program output: -37                
Correct output: -21                 | Program output: 100                
Correct output: -41                 | Program output: -3                 
Correct output: -86                 | Program output: 21                 
Correct output: 10                  | Program output: 25                 
Correct output: -98                 | Program output: 12                 
Correct output: -61                 | Program output: -29                
Correct output: -84                 | Program output: 64                 
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 32                 
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: 58                 
Correct output: -60                 | Program output: -37                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction tagged_657} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in3 in4 integer_rot integer_min boolean_stackdepth in1 in1 exec_rot (tagged_169) (boolean_rot boolean_or integer_rot) (exec_do*range (in3 exec_s (exec_yank print_integer integer_add) (exec_flush boolean_pop) (in1) exec_do*times () exec_k () (print_integer print_boolean exec_while (exec_do*while (integer_fromboolean integer_fromboolean integer_lte exec_y_when_autoconstructing (integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 exec_noop integer_div integer_div) exec_if (exec_dup () boolean_or) (exec_empty boolean_dup_items exec_do*times (exec_pop (in3) integer_eq integer_gt tagged_657) exec_while (integer_yankdup exec_shove (exec_y (integer_dup_items in4) integer_dec exec_k_when_autoconstructing (boolean_eq exec_stackdepth exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank boolean_shove) (integer_gte)) (in2 boolean_xor boolean_invert_first_then_and integer_eq boolean_invert_first_then_and boolean_frominteger boolean_and)) in1 integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_do*count (exec_shove (print_newline) integer_pop integer_mod integer_min) boolean_dup_times)))))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 121
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction tagged_657} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in3 in4 integer_rot integer_min boolean_stackdepth in1 in1 exec_rot (tagged_169) (boolean_rot boolean_or integer_rot) (exec_do*range (in3 exec_s (exec_yank print_integer integer_add) (exec_flush boolean_pop) (in1) exec_do*times () exec_k () (print_integer print_boolean exec_while (exec_do*while (integer_fromboolean integer_fromboolean integer_lte exec_y_when_autoconstructing (integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 exec_noop integer_div integer_div) exec_if (exec_dup () boolean_or) (exec_empty boolean_dup_items exec_do*times (exec_pop (in3) integer_eq integer_gt tagged_657) exec_while (integer_yankdup exec_shove (exec_y (integer_dup_items in4) integer_dec exec_k_when_autoconstructing (boolean_eq exec_stackdepth exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank boolean_shove) (integer_gte)) (in2 boolean_xor boolean_invert_first_then_and integer_eq boolean_invert_first_then_and boolean_frominteger boolean_and)) in1 integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_do*count (exec_shove (print_newline) integer_pop integer_mod integer_min) boolean_dup_times)))))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 121
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 54 314 36 96 546 108 88 108 122)
Population mean number of elite cases: 1.58
Count of perfect (error zero) individuals by case: (110 54 314 36 96 546 108 88 108 122)
Population mean number of perfect (error zero) cases: 1.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction tagged_657} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (in3 in4 integer_rot integer_min boolean_stackdepth in1 in1 exec_rot (tagged_169) (boolean_rot boolean_or integer_rot) (exec_do*range (in3 exec_s (exec_yank print_integer integer_add) (exec_flush boolean_pop) (in1) exec_do*times () exec_k () (print_integer print_boolean exec_while (exec_do*while (integer_fromboolean integer_fromboolean integer_lte exec_y_when_autoconstructing (integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 exec_noop integer_div integer_div) exec_if (exec_dup () boolean_or) (exec_empty boolean_dup_items exec_do*times (exec_pop (in3) integer_eq integer_gt tagged_657) exec_while (integer_yankdup exec_shove (exec_y (integer_dup_items in4) integer_dec exec_k_when_autoconstructing (boolean_eq exec_stackdepth exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank boolean_shove) (integer_gte)) (in2 boolean_xor boolean_invert_first_then_and integer_eq boolean_invert_first_then_and boolean_frominteger boolean_and)) in1 integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_do*count (exec_shove (print_newline) integer_pop integer_mod integer_min) boolean_dup_times)))))
Errors: [0 1 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 91
Size: 121
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 8.418
Median total errors in population: 9
Error averages by case: (0.89 0.946 0.686 0.964 0.904 0.454 0.892 0.912 0.892 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.81
Average program size in population (points): 129.172
Average percent parens in population: 0.285
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.342
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2637763
--- Timings ---
Current time: 1559594114683 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.6 seconds, 46.7%
Fitness Testing:      4.4 seconds, 36.7%
Report:               1.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 462
Test mean error for best: 0.46200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -76                 | Program output: -76                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -48                
Correct output: 25                  | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -29                
Correct output: 21                  | Program output: 21                 
Correct output: 98                  | Program output: 98                 
Correct output: 26                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 57                 
Correct output: 14                  | Program output: 28                 
Correct output: 21                  | Program output: 37                 
Correct output: 38                  | Program output: 45                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 36                 
Correct output: 26                  | Program output: 26                 
Correct output: 35                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 84                 
Correct output: 9                   | Program output:                    
Correct output: 12                  | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -23                
Correct output: -74                 | Program output: -23                
Correct output: 13                  | Program output: 58                 
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -98                 | Program output: 32                 
Correct output: -42                 | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -50                
Correct output: -60                 | Program output: -20                
Correct output: -98                 | Program output: -24                
Correct output: -93                 | Program output: 8                  
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -44                
Correct output: -91                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output:                    
Correct output: -73                 | Program output: -15                
Correct output: -91                 | Program output:                    
Correct output: -31                 | Program output: 13                 
Correct output: 3                   | Program output: 28                 
Correct output: -44                 | Program output: -32                
Correct output: -71                 | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output:                    
Correct output: -14                 | Program output: 69                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: 45                 
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -84                
Correct output: -10                 | Program output: -10                
Correct output: 2                   | Program output: 39                 
Correct output: -82                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: -11                 | Program output: -11                
Correct output: -4                  | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: 52                 
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -41                 | Program output: -3                 
Correct output: -86                 | Program output: 21                 
Correct output: 10                  | Program output: 25                 
Correct output: -98                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -56                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: 58                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction tagged_657} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min})
Lexicase best program: (in3 in4 integer_rot integer_min boolean_stackdepth in1 in1 exec_rot (boolean_rot boolean_or integer_lt exec_do*range (in3 exec_s (integer_dec exec_yank print_integer integer_add) (exec_flush boolean_pop) (in1) exec_do*times () exec_k () (print_integer print_boolean exec_while (exec_do*while (integer_fromboolean integer_div integer_lte exec_y_when_autoconstructing (integer_swap) boolean_empty exec_do*count (boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 exec_noop integer_div integer_div) exec_if (exec_dup () boolean_or) (integer_dup_times exec_empty exec_noop boolean_dup_items exec_do*times (in1 exec_pop (in3) exec_eq integer_eq integer_gt tagged_657) exec_while (integer_yankdup exec_shove (exec_y (integer_empty integer_dup_items in4) integer_dec exec_k_when_autoconstructing (boolean_eq exec_stackdepth exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank boolean_shove) (integer_gte)) (in2 boolean_xor boolean_invert_first_then_and integer_eq integer_div boolean_invert_first_then_and boolean_frominteger boolean_and)) in1 integer_eq integer_lte) boolean_dup_items integer_add boolean_dup exec_if (integer_inc exec_do*count (exec_shove (print_newline) integer_pop integer_mod integer_min)) ()))))) () ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 131
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction tagged_657} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min})
Zero cases best program: (in3 in4 integer_rot integer_min boolean_stackdepth in1 in1 exec_rot (boolean_rot boolean_or integer_lt exec_do*range (in3 exec_s (integer_dec exec_yank print_integer integer_add) (exec_flush boolean_pop) (in1) exec_do*times () exec_k () (print_integer print_boolean exec_while (exec_do*while (integer_fromboolean integer_div integer_lte exec_y_when_autoconstructing (integer_swap) boolean_empty exec_do*count (boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 exec_noop integer_div integer_div) exec_if (exec_dup () boolean_or) (integer_dup_times exec_empty exec_noop boolean_dup_items exec_do*times (in1 exec_pop (in3) exec_eq integer_eq integer_gt tagged_657) exec_while (integer_yankdup exec_shove (exec_y (integer_empty integer_dup_items in4) integer_dec exec_k_when_autoconstructing (boolean_eq exec_stackdepth exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank boolean_shove) (integer_gte)) (in2 boolean_xor boolean_invert_first_then_and integer_eq integer_div boolean_invert_first_then_and boolean_frominteger boolean_and)) in1 integer_eq integer_lte) boolean_dup_items integer_add boolean_dup exec_if (integer_inc exec_do*count (exec_shove (print_newline) integer_pop integer_mod integer_min)) ()))))) () ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 131
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (37 82 393 174 357 147 34 152 236 143)
Population mean number of elite cases: 1.75
Count of perfect (error zero) individuals by case: (37 82 393 174 357 147 34 152 236 143)
Population mean number of perfect (error zero) cases: 1.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction tagged_657} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_shove} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (in3 in4 integer_rot integer_min in1 exec_rot (tagged_169) (boolean_rot boolean_or integer_rot) (exec_do*range (in3 exec_s (integer_fromboolean) () (exec_yank print_integer integer_add) exec_flush boolean_pop) exec_swap () (in1) exec_do*times () boolean_not print_integer print_boolean exec_while (exec_do*while (integer_fromboolean integer_lte exec_y_when_autoconstructing (boolean_not integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items exec_noop integer_div integer_rot integer_div) exec_if (exec_dup () boolean_or) (exec_empty boolean_dup_items exec_do*times (exec_pop (in3) integer_eq integer_gt tagged_657) exec_while (integer_yankdup exec_shove (exec_y (integer_dup_items boolean_yank integer_dec exec_k_when_autoconstructing (exec_dup_times (boolean_eq exec_stackdepth exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank boolean_shove) (integer_gte)) in2 boolean_invert_first_then_and integer_fromboolean integer_eq boolean_invert_first_then_and boolean_and) () in1 integer_eq integer_lte) integer_add boolean_dup_items boolean_dup integer_inc exec_do*count (exec_shove (integer_pop integer_mod integer_min) boolean_dup_times))))))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 90
Size: 121
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 8.245
Median total errors in population: 9
Error averages by case: (0.963 0.918 0.607 0.826 0.643 0.853 0.966 0.848 0.764 0.857)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.091
Average program size in population (points): 119.373
Average percent parens in population: 0.250
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.482
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3181722
--- Timings ---
Current time: 1559594116806 milliseconds
Total Time:          14.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.8 seconds, 48.3%
Fitness Testing:      5.0 seconds, 35.3%
Report:               2.2 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -44-7              
Correct output: -99                 | Program output: -33-99             
Correct output: -22                 | Program output: -22-22             
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 94                 
Correct output: -76                 | Program output: -76-2              
Correct output: -63                 | Program output: 59-63              
Correct output: -91                 | Program output: -91-91             
Correct output: -48                 | Program output: 100-48             
Correct output: -88                 | Program output: -88                
Correct output: -66                 | Program output: -66-66             
Correct output: -80                 | Program output: -80-80             
Correct output: 75                  | Program output: 92                 
Correct output: -99                 | Program output: -48-48             
Correct output: 25                  | Program output: 25                 
Correct output: -93                 | Program output: -93-93             
Correct output: -29                 | Program output: -29-29             
Correct output: 21                  | Program output: 21                 
Correct output: 98                  | Program output: 98                 
Correct output: 26                  | Program output: 49                 
Correct output: 4                   | Program output: 14                 
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 31                 
Correct output: 7                   | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 66                 
Correct output: 32                  | Program output: 32                 
Correct output: 13                  | Program output: 16                 
Correct output: 20                  | Program output: 36                 
Correct output: 26                  | Program output: 74                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 39                 
Correct output: 8                   | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: -98                 | Program output: -26-98             
Correct output: -88                 | Program output: -14-23             
Correct output: -74                 | Program output: -74-19             
Correct output: 13                  | Program output: 13                 
Correct output: -45                 | Program output: -3-45              
Correct output: -73                 | Program output: -73-54             
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -38-91             
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60-20             
Correct output: -98                 | Program output: -98-24             
Correct output: -93                 | Program output: 5                  
Correct output: -100                | Program output: -47-100            
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91-28             
Correct output: -70                 | Program output: -41-70             
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: -15                
Correct output: -91                 | Program output: -17                
Correct output: -31                 | Program output: -16                
Correct output: 3                   | Program output: 28                 
Correct output: -44                 | Program output: 17-32              
Correct output: -71                 | Program output: -64                
Correct output: -45                 | Program output: 8-45               
Correct output: -89                 | Program output: -30                
Correct output: -14                 | Program output: 5                  
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -61-100            
Correct output: -93                 | Program output: -93-59             
Correct output: -10                 | Program output: -10                
Correct output: 2                   | Program output: 2                  
Correct output: -82                 | Program output: -74                
Correct output: -99                 | Program output: -99                
Correct output: -11                 | Program output: 5-11               
Correct output: -4                  | Program output: -4                 
Correct output: -39                 | Program output: -39-38             
Correct output: -70                 | Program output: 9-70               
Correct output: -32                 | Program output: -32                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: 74-98              
Correct output: -59                 | Program output: -40-59             
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -29-87             
Correct output: -43                 | Program output: -43                
Correct output: -21                 | Program output: -8-21              
Correct output: -41                 | Program output: -41                
Correct output: -86                 | Program output: -86                
Correct output: 10                  | Program output: 10                 
Correct output: -98                 | Program output: -29-15             
Correct output: -61                 | Program output: -29-61             
Correct output: -84                 | Program output: -47-84             
Correct output: -40                 | Program output: -40-40             
Correct output: -80                 | Program output: -56-42             
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -6                 
Correct output: -60                 | Program output: -51-60             
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_529} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_657} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in3 in4 integer_rot in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot boolean_or tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) exec_stackdepth boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_shove (exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank integer_gte) () in2 exec_do*count (boolean_xor boolean_invert_first_then_and in3 integer_eq boolean_invert_first_then_and boolean_and)) (boolean_invert_second_then_and integer_eq integer_lte) (boolean_dup_items integer_add boolean_dup integer_inc exec_do*count (exec_shove (print_newline) integer_swap integer_pop boolean_dup_times))) ()))))) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 126
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_529} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_657} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in3 in4 integer_rot in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot boolean_or tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) exec_stackdepth boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_shove (exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank integer_gte) () in2 exec_do*count (boolean_xor boolean_invert_first_then_and in3 integer_eq boolean_invert_first_then_and boolean_and)) (boolean_invert_second_then_and integer_eq integer_lte) (boolean_dup_items integer_add boolean_dup integer_inc exec_do*count (exec_shove (print_newline) integer_swap integer_pop boolean_dup_times))) ()))))) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 126
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 64 198 283 63 199 452 197 65 477)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (190 64 198 283 63 199 452 197 65 477)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_529} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_657} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times})
Best program: (in3 in4 integer_rot in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot boolean_or tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) exec_stackdepth boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_shove (exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank integer_gte) () in2 exec_do*count (boolean_xor boolean_invert_first_then_and in3 integer_eq boolean_invert_first_then_and boolean_and)) (boolean_invert_second_then_and integer_eq integer_lte) (boolean_dup_items integer_add boolean_dup integer_inc exec_do*count (exec_shove (print_newline) integer_swap integer_pop boolean_dup_times))) ()))))) ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 92
Size: 126
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.812
Median total errors in population: 9
Error averages by case: (0.81 0.936 0.802 0.717 0.937 0.801 0.548 0.803 0.935 0.523)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.145
Average program size in population (points): 129.304
Average percent parens in population: 0.278
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.373
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3542956
--- Timings ---
Current time: 1559594119274 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.1 seconds, 49.9%
Fitness Testing:      5.5 seconds, 33.7%
Report:               2.6 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 215
Test mean error for best: 0.21500
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -76                 | Program output: -76                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -48                
Correct output: 25                  | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -29                
Correct output: 21                  | Program output: 21                 
Correct output: 98                  | Program output: 98                 
Correct output: 26                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 36                 
Correct output: 26                  | Program output: 26                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: 5                  
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: -15                
Correct output: -91                 | Program output: -17                
Correct output: -31                 | Program output: -16                
Correct output: 3                   | Program output: 28                 
Correct output: -44                 | Program output: -32                
Correct output: -71                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -30                
Correct output: -14                 | Program output: 5                  
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -10                 | Program output: -10                
Correct output: 2                   | Program output: 2                  
Correct output: -82                 | Program output: -74                
Correct output: -99                 | Program output: -99                
Correct output: -11                 | Program output: -11                
Correct output: -4                  | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -32                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -86                 | Program output: -86                
Correct output: 10                  | Program output: 10                 
Correct output: -98                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -56                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -6                 
Correct output: -60                 | Program output: -60                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_529} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_657} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in3 in4 integer_min integer_rot in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot boolean_or tagged_529 exec_do*range (exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_yankdup exec_do*times () exec_k () (print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) exec_stackdepth boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (integer_swap exec_empty boolean_dup_items boolean_yank exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_shove (exec_y (integer_dup_items in4) exec_k_when_autoconstructing (exec_empty boolean_eq integer_gt exec_s (exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank integer_div integer_gte) () in2 exec_do*count (boolean_xor boolean_invert_first_then_and in3 integer_eq boolean_and)) (boolean_invert_second_then_and integer_eq integer_lte) (boolean_dup_items integer_add boolean_dup integer_inc integer_swap integer_pop boolean_dup_times)) ())))))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 124
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_529} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_657} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in3 in4 integer_min integer_rot in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot boolean_or tagged_529 exec_do*range (exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_yankdup exec_do*times () exec_k () (print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) exec_stackdepth boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (integer_swap exec_empty boolean_dup_items boolean_yank exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_shove (exec_y (integer_dup_items in4) exec_k_when_autoconstructing (exec_empty boolean_eq integer_gt exec_s (exec_k_when_autoconstructing (exec_flush exec_do*times () integer_yank integer_div integer_gte) () in2 exec_do*count (boolean_xor boolean_invert_first_then_and in3 integer_eq boolean_and)) (boolean_invert_second_then_and integer_eq integer_lte) (boolean_dup_items integer_add boolean_dup integer_inc integer_swap integer_pop boolean_dup_times)) ())))))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 124
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 180 338 209 220 216 195 196 384 254)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (205 180 338 209 220 216 195 196 384 254)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_169} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_529} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_30} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_657} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 1, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times})
Best program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 88
Size: 118
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.603
Median total errors in population: 9
Error averages by case: (0.795 0.82 0.662 0.791 0.78 0.784 0.805 0.804 0.616 0.746)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.914
Average program size in population (points): 124.134
Average percent parens in population: 0.259
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.441
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4177581
--- Timings ---
Current time: 1559594122002 milliseconds
Total Time:          18.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.3 seconds, 49.5%
Fitness Testing:      6.1 seconds, 32.4%
Report:               3.3 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 118


Auto-simplifying with starting size: 118
step: 0
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 500
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 1000
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 1500
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 2000
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 2500
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 3000
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 3500
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 4000
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 4500
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

step: 5000
program: (in3 in4 integer_rot integer_min in1 integer_min boolean_stackdepth in1 in1 integer_sub exec_rot (tagged_169) (boolean_rot tagged_529 exec_do*range (integer_dec exec_s (exec_yank print_integer integer_add) (exec_do*while (exec_flush boolean_pop) in1) (exec_do*times () exec_k () (exec_yankdup) print_integer print_boolean exec_do*while (integer_fromboolean integer_fromboolean exec_y_when_autoconstructing (integer_dup integer_swap) boolean_empty boolean_invert_second_then_and) exec_yank print_exec (integer_lte) integer_yank exec_dup_items tagged_30 integer_div integer_div) exec_do*range () exec_if (exec_dup () boolean_dup_times boolean_or) (in1) integer_swap exec_empty boolean_dup_items exec_do*times (exec_pop (integer_eq tagged_657) integer_yankdup exec_stackdepth exec_y (integer_dup_items in4) exec_k_when_autoconstructing (boolean_eq exec_s (exec_do*times () integer_yank integer_gte) () (in2 exec_do*count (boolean_invert_first_then_and in3 exec_noop integer_eq boolean_invert_first_then_and boolean_invert_second_then_and integer_eq integer_lte) boolean_dup_items integer_add boolean_dup integer_inc exec_shove (print_newline) integer_swap integer_pop boolean_dup_times)) ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 118

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 215
Test mean error for best: 0.21500
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -76                 | Program output: -76                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: 75                  | Program output: 75                 
Correct output: -99                 | Program output: -48                
Correct output: 25                  | Program output: 25                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -29                
Correct output: 21                  | Program output: 21                 
Correct output: 98                  | Program output: 98                 
Correct output: 26                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 55                  | Program output: 55                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 36                 
Correct output: 26                  | Program output: 26                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: 5                  
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: -15                
Correct output: -91                 | Program output: -17                
Correct output: -31                 | Program output: -16                
Correct output: 3                   | Program output: 28                 
Correct output: -44                 | Program output: -32                
Correct output: -71                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -30                
Correct output: -14                 | Program output: 5                  
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -10                 | Program output: -10                
Correct output: 2                   | Program output: 2                  
Correct output: -82                 | Program output: -74                
Correct output: -99                 | Program output: -99                
Correct output: -11                 | Program output: -11                
Correct output: -4                  | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -70                 | Program output: -70                
Correct output: -32                 | Program output: -32                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -43                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -86                 | Program output: -86                
Correct output: 10                  | Program output: 10                 
Correct output: -98                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -84                 | Program output: -84                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -56                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -6                 
Correct output: -60                 | Program output: -60                
;;******************************
