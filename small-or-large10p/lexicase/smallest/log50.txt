Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-92 -92 -92 12] -92] [[79 73 79 79] 73] [[-24 1 1 1] -24] [[-88 -88 -88 -53] -88] [[80 -69 -69 -69] -69] [[-15 -18 -15 -15] -18] [[45 58 58 58] 45] [[59 66 66 66] 59] [[-34 41 -34 -34] -34] [[-91 29 29 29] -91] [(16 16 16 16) 16] [(2 2 2 2) 2] [(9 9 9 9) 9] [(14 14 14 14) 14] [(-2 -2 -2 -2) -2] [(22 39 99 57) 22] [(99 14 35 30) 14] [(72 67 71 90) 67] [(45 97 35 78) 35] [(96 41 97 85) 41] [(51 78 73 70) 51] [(99 94 95 81) 81] [(54 16 28 100) 16] [(89 22 1 13) 1] [(40 93 22 15) 15] [(89 28 67 19) 19] [(50 94 30 47) 30] [(89 27 3 92) 3] [(37 57 68 59) 37] [(81 50 29 35) 29] [(74 58 21 42) 21] [(78 30 73 68) 30] [(98 8 68 98) 8] [(46 39 91 70) 39] [(76 38 27 0) 0] [(-8 -66 94 -67) -67] [(-27 -80 -63 91) -80] [(-82 -33 -93 -10) -93] [(-54 -42 -30 -92) -92] [(-67 43 78 -77) -77] [(-82 -33 -34 -91) -91] [(-65 63 -13 0) -65] [(53 -35 31 -71) -71] [(9 -80 -46 73) -80] [(-21 86 37 85) -21] [(-61 56 -3 -90) -90] [(-59 77 -73 71) -73] [(44 -1 -53 36) -53] [(52 -28 -63 -38) -63] [(-5 -23 -6 -41) -41] [(-38 -90 -93 -6) -93] [(78 -25 77 62) -25] [(-45 -68 -74 75) -74] [(-91 26 72 14) -91] [(100 80 -3 -82) -82] [(-94 15 -96 19) -96] [(100 59 63 -67) -67] [(-44 -43 45 -52) -52] [(91 -89 -100 -46) -100] [(98 5 -1 32) -1] [(-75 -8 48 -28) -75] [(-65 30 -5 55) -65] [(-63 40 97 35) -63] [(-5 43 -89 -77) -89] [(21 42 7 -53) -53] [(92 -28 97 80) -28] [(-8 -63 74 7) -63] [(37 58 25 13) 13] [(29 6 -19 -91) -91] [(12 -43 -12 25) -43] [(-29 94 -71 40) -71] [(-28 86 -73 -35) -73] [(28 -46 -66 -51) -66] [(-77 -86 89 -45) -86] [(-44 -90 -59 13) -90] [(46 15 22 45) 15] [(89 -39 28 -60) -60] [(22 -36 -63 94) -63] [(-92 -96 20 -21) -96] [(97 11 59 54) 11] [(-58 40 -12 2) -58] [(-25 23 -64 24) -64] [(31 63 73 11) 11] [(59 44 -28 -64) -64] [(96 98 -67 53) -67] [(69 20 -51 41) -51] [(82 -87 63 6) -87] [(-47 12 37 38) -47] [(-76 -14 -69 -19) -76] [(57 -80 -89 -94) -94] [(-5 87 71 -36) -36] [(-30 65 47 -53) -53] [(18 -37 -34 -70) -70] [(55 18 86 24) 18] [(96 98 -35 61) -35])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-92 -92 -92 12] -92]
Train Case:   6 | Input/Output: [[79 73 79 79] 73]
Train Case:   7 | Input/Output: [[-24 1 1 1] -24]
Train Case:   8 | Input/Output: [[-88 -88 -88 -53] -88]
Train Case:   9 | Input/Output: [[80 -69 -69 -69] -69]
Train Case:  10 | Input/Output: [[-15 -18 -15 -15] -18]
Train Case:  11 | Input/Output: [[45 58 58 58] 45]
Train Case:  12 | Input/Output: [[59 66 66 66] 59]
Train Case:  13 | Input/Output: [[-34 41 -34 -34] -34]
Train Case:  14 | Input/Output: [[-91 29 29 29] -91]
Train Case:  15 | Input/Output: [(16 16 16 16) 16]
Train Case:  16 | Input/Output: [(2 2 2 2) 2]
Train Case:  17 | Input/Output: [(9 9 9 9) 9]
Train Case:  18 | Input/Output: [(14 14 14 14) 14]
Train Case:  19 | Input/Output: [(-2 -2 -2 -2) -2]
Train Case:  20 | Input/Output: [(22 39 99 57) 22]
Train Case:  21 | Input/Output: [(99 14 35 30) 14]
Train Case:  22 | Input/Output: [(72 67 71 90) 67]
Train Case:  23 | Input/Output: [(45 97 35 78) 35]
Train Case:  24 | Input/Output: [(96 41 97 85) 41]
Train Case:  25 | Input/Output: [(51 78 73 70) 51]
Train Case:  26 | Input/Output: [(99 94 95 81) 81]
Train Case:  27 | Input/Output: [(54 16 28 100) 16]
Train Case:  28 | Input/Output: [(89 22 1 13) 1]
Train Case:  29 | Input/Output: [(40 93 22 15) 15]
Train Case:  30 | Input/Output: [(89 28 67 19) 19]
Train Case:  31 | Input/Output: [(50 94 30 47) 30]
Train Case:  32 | Input/Output: [(89 27 3 92) 3]
Train Case:  33 | Input/Output: [(37 57 68 59) 37]
Train Case:  34 | Input/Output: [(81 50 29 35) 29]
Train Case:  35 | Input/Output: [(74 58 21 42) 21]
Train Case:  36 | Input/Output: [(78 30 73 68) 30]
Train Case:  37 | Input/Output: [(98 8 68 98) 8]
Train Case:  38 | Input/Output: [(46 39 91 70) 39]
Train Case:  39 | Input/Output: [(76 38 27 0) 0]
Train Case:  40 | Input/Output: [(-8 -66 94 -67) -67]
Train Case:  41 | Input/Output: [(-27 -80 -63 91) -80]
Train Case:  42 | Input/Output: [(-82 -33 -93 -10) -93]
Train Case:  43 | Input/Output: [(-54 -42 -30 -92) -92]
Train Case:  44 | Input/Output: [(-67 43 78 -77) -77]
Train Case:  45 | Input/Output: [(-82 -33 -34 -91) -91]
Train Case:  46 | Input/Output: [(-65 63 -13 0) -65]
Train Case:  47 | Input/Output: [(53 -35 31 -71) -71]
Train Case:  48 | Input/Output: [(9 -80 -46 73) -80]
Train Case:  49 | Input/Output: [(-21 86 37 85) -21]
Train Case:  50 | Input/Output: [(-61 56 -3 -90) -90]
Train Case:  51 | Input/Output: [(-59 77 -73 71) -73]
Train Case:  52 | Input/Output: [(44 -1 -53 36) -53]
Train Case:  53 | Input/Output: [(52 -28 -63 -38) -63]
Train Case:  54 | Input/Output: [(-5 -23 -6 -41) -41]
Train Case:  55 | Input/Output: [(-38 -90 -93 -6) -93]
Train Case:  56 | Input/Output: [(78 -25 77 62) -25]
Train Case:  57 | Input/Output: [(-45 -68 -74 75) -74]
Train Case:  58 | Input/Output: [(-91 26 72 14) -91]
Train Case:  59 | Input/Output: [(100 80 -3 -82) -82]
Train Case:  60 | Input/Output: [(-94 15 -96 19) -96]
Train Case:  61 | Input/Output: [(100 59 63 -67) -67]
Train Case:  62 | Input/Output: [(-44 -43 45 -52) -52]
Train Case:  63 | Input/Output: [(91 -89 -100 -46) -100]
Train Case:  64 | Input/Output: [(98 5 -1 32) -1]
Train Case:  65 | Input/Output: [(-75 -8 48 -28) -75]
Train Case:  66 | Input/Output: [(-65 30 -5 55) -65]
Train Case:  67 | Input/Output: [(-63 40 97 35) -63]
Train Case:  68 | Input/Output: [(-5 43 -89 -77) -89]
Train Case:  69 | Input/Output: [(21 42 7 -53) -53]
Train Case:  70 | Input/Output: [(92 -28 97 80) -28]
Train Case:  71 | Input/Output: [(-8 -63 74 7) -63]
Train Case:  72 | Input/Output: [(37 58 25 13) 13]
Train Case:  73 | Input/Output: [(29 6 -19 -91) -91]
Train Case:  74 | Input/Output: [(12 -43 -12 25) -43]
Train Case:  75 | Input/Output: [(-29 94 -71 40) -71]
Train Case:  76 | Input/Output: [(-28 86 -73 -35) -73]
Train Case:  77 | Input/Output: [(28 -46 -66 -51) -66]
Train Case:  78 | Input/Output: [(-77 -86 89 -45) -86]
Train Case:  79 | Input/Output: [(-44 -90 -59 13) -90]
Train Case:  80 | Input/Output: [(46 15 22 45) 15]
Train Case:  81 | Input/Output: [(89 -39 28 -60) -60]
Train Case:  82 | Input/Output: [(22 -36 -63 94) -63]
Train Case:  83 | Input/Output: [(-92 -96 20 -21) -96]
Train Case:  84 | Input/Output: [(97 11 59 54) 11]
Train Case:  85 | Input/Output: [(-58 40 -12 2) -58]
Train Case:  86 | Input/Output: [(-25 23 -64 24) -64]
Train Case:  87 | Input/Output: [(31 63 73 11) 11]
Train Case:  88 | Input/Output: [(59 44 -28 -64) -64]
Train Case:  89 | Input/Output: [(96 98 -67 53) -67]
Train Case:  90 | Input/Output: [(69 20 -51 41) -51]
Train Case:  91 | Input/Output: [(82 -87 63 6) -87]
Train Case:  92 | Input/Output: [(-47 12 37 38) -47]
Train Case:  93 | Input/Output: [(-76 -14 -69 -19) -76]
Train Case:  94 | Input/Output: [(57 -80 -89 -94) -94]
Train Case:  95 | Input/Output: [(-5 87 71 -36) -36]
Train Case:  96 | Input/Output: [(-30 65 47 -53) -53]
Train Case:  97 | Input/Output: [(18 -37 -34 -70) -70]
Train Case:  98 | Input/Output: [(55 18 86 24) 18]
Train Case:  99 | Input/Output: [(96 98 -35 61) -35]
Test Case:   0 | Input/Output: [[-55 -16 -55 -55] -55]
Test Case:   1 | Input/Output: [[59 -88 59 59] -88]
Test Case:   2 | Input/Output: [[97 -85 -85 -85] -85]
Test Case:   3 | Input/Output: [[-49 -49 -38 -49] -49]
Test Case:   4 | Input/Output: [[86 -46 -46 -46] -46]
Test Case:   5 | Input/Output: [[67 -82 -82 -82] -82]
Test Case:   6 | Input/Output: [[62 62 -70 62] -70]
Test Case:   7 | Input/Output: [[-48 -4 -4 -4] -48]
Test Case:   8 | Input/Output: [[-86 -86 86 -86] -86]
Test Case:   9 | Input/Output: [[-7 -71 -71 -71] -71]
Test Case:  10 | Input/Output: [[-77 20 20 20] -77]
Test Case:  11 | Input/Output: [[-41 -41 -41 -4] -41]
Test Case:  12 | Input/Output: [[99 99 99 30] 30]
Test Case:  13 | Input/Output: [[-64 -44 -44 -44] -64]
Test Case:  14 | Input/Output: [[-85 -49 -49 -49] -85]
Test Case:  15 | Input/Output: [[11 -33 11 11] -33]
Test Case:  16 | Input/Output: [[-21 -21 -21 -90] -90]
Test Case:  17 | Input/Output: [[31 31 -72 31] -72]
Test Case:  18 | Input/Output: [[86 59 59 59] 59]
Test Case:  19 | Input/Output: [[3 3 3 66] 3]
Test Case:  20 | Input/Output: [[-38 -18 -38 -38] -38]
Test Case:  21 | Input/Output: [[64 64 64 15] 15]
Test Case:  22 | Input/Output: [[-60 -60 74 -60] -60]
Test Case:  23 | Input/Output: [[-40 -72 -40 -40] -72]
Test Case:  24 | Input/Output: [[81 -79 81 81] -79]
Test Case:  25 | Input/Output: [[71 71 71 -56] -56]
Test Case:  26 | Input/Output: [[-28 -28 -28 22] -28]
Test Case:  27 | Input/Output: [[4 -7 -7 -7] -7]
Test Case:  28 | Input/Output: [[-62 -62 -62 -53] -62]
Test Case:  29 | Input/Output: [[-73 -73 -73 53] -73]
Test Case:  30 | Input/Output: [[33 33 -69 33] -69]
Test Case:  31 | Input/Output: [[98 66 66 66] 66]
Test Case:  32 | Input/Output: [[97 4 4 4] 4]
Test Case:  33 | Input/Output: [[49 49 -32 49] -32]
Test Case:  34 | Input/Output: [[-67 -67 74 -67] -67]
Test Case:  35 | Input/Output: [[90 90 52 90] 52]
Test Case:  36 | Input/Output: [[-96 -96 88 -96] -96]
Test Case:  37 | Input/Output: [[-47 -47 12 -47] -47]
Test Case:  38 | Input/Output: [[64 -89 64 64] -89]
Test Case:  39 | Input/Output: [[62 -21 -21 -21] -21]
Test Case:  40 | Input/Output: [[-53 -32 -53 -53] -53]
Test Case:  41 | Input/Output: [[25 25 67 25] 25]
Test Case:  42 | Input/Output: [[14 14 60 14] 14]
Test Case:  43 | Input/Output: [[-45 -45 -45 15] -45]
Test Case:  44 | Input/Output: [[-90 -90 -90 -14] -90]
Test Case:  45 | Input/Output: [[17 17 -55 17] -55]
Test Case:  46 | Input/Output: [[62 79 79 79] 62]
Test Case:  47 | Input/Output: [[26 83 83 83] 26]
Test Case:  48 | Input/Output: [[46 42 46 46] 42]
Test Case:  49 | Input/Output: [[-36 -36 5 -36] -36]
Test Case:  50 | Input/Output: [[-40 29 29 29] -40]
Test Case:  51 | Input/Output: [[91 91 -68 91] -68]
Test Case:  52 | Input/Output: [[70 4 4 4] 4]
Test Case:  53 | Input/Output: [[28 22 28 28] 22]
Test Case:  54 | Input/Output: [[-4 -4 -4 29] -4]
Test Case:  55 | Input/Output: [[-72 62 62 62] -72]
Test Case:  56 | Input/Output: [[-54 -54 -54 69] -54]
Test Case:  57 | Input/Output: [[-89 10 10 10] -89]
Test Case:  58 | Input/Output: [[-97 -97 90 -97] -97]
Test Case:  59 | Input/Output: [[70 -38 70 70] -38]
Test Case:  60 | Input/Output: [[0 -52 0 0] -52]
Test Case:  61 | Input/Output: [[-23 -99 -99 -99] -99]
Test Case:  62 | Input/Output: [[-3 -3 0 -3] -3]
Test Case:  63 | Input/Output: [[-4 74 -4 -4] -4]
Test Case:  64 | Input/Output: [[-17 -17 -17 87] -17]
Test Case:  65 | Input/Output: [[-70 -97 -70 -70] -97]
Test Case:  66 | Input/Output: [[58 58 58 -50] -50]
Test Case:  67 | Input/Output: [[37 37 -12 37] -12]
Test Case:  68 | Input/Output: [[93 93 93 25] 25]
Test Case:  69 | Input/Output: [[71 -78 71 71] -78]
Test Case:  70 | Input/Output: [[33 33 33 85] 33]
Test Case:  71 | Input/Output: [[-70 72 -70 -70] -70]
Test Case:  72 | Input/Output: [[-1 -1 -85 -1] -85]
Test Case:  73 | Input/Output: [[-54 -54 -74 -54] -74]
Test Case:  74 | Input/Output: [[-3 -3 -96 -3] -96]
Test Case:  75 | Input/Output: [[91 -15 -15 -15] -15]
Test Case:  76 | Input/Output: [[-99 -69 -69 -69] -99]
Test Case:  77 | Input/Output: [[27 45 27 27] 27]
Test Case:  78 | Input/Output: [[-57 -57 -57 -23] -57]
Test Case:  79 | Input/Output: [[92 -30 92 92] -30]
Test Case:  80 | Input/Output: [[75 -36 75 75] -36]
Test Case:  81 | Input/Output: [[-14 73 73 73] -14]
Test Case:  82 | Input/Output: [[-34 27 -34 -34] -34]
Test Case:  83 | Input/Output: [[99 -43 99 99] -43]
Test Case:  84 | Input/Output: [[86 86 86 -67] -67]
Test Case:  85 | Input/Output: [[-2 -2 0 -2] -2]
Test Case:  86 | Input/Output: [[70 100 100 100] 70]
Test Case:  87 | Input/Output: [[6 76 76 76] 6]
Test Case:  88 | Input/Output: [[-97 37 37 37] -97]
Test Case:  89 | Input/Output: [[-10 -10 38 -10] -10]
Test Case:  90 | Input/Output: [[79 79 -17 79] -17]
Test Case:  91 | Input/Output: [[-59 -79 -79 -79] -79]
Test Case:  92 | Input/Output: [[68 68 64 68] 64]
Test Case:  93 | Input/Output: [[0 0 16 0] 0]
Test Case:  94 | Input/Output: [[0 0 0 48] 0]
Test Case:  95 | Input/Output: [[-49 -49 -49 83] -49]
Test Case:  96 | Input/Output: [[-51 -51 30 -51] -51]
Test Case:  97 | Input/Output: [[57 57 3 57] 3]
Test Case:  98 | Input/Output: [[-91 -91 10 -91] -91]
Test Case:  99 | Input/Output: [[-19 30 -19 -19] -19]
Test Case: 100 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 101 | Input/Output: [(18 18 18 18) 18]
Test Case: 102 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 103 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 104 | Input/Output: [(14 14 14 14) 14]
Test Case: 105 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 106 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 107 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 108 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 109 | Input/Output: [(29 29 29 29) 29]
Test Case: 110 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 111 | Input/Output: [(8 8 8 8) 8]
Test Case: 112 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 113 | Input/Output: [(83 83 83 83) 83]
Test Case: 114 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 115 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 116 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 117 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 118 | Input/Output: [(35 35 35 35) 35]
Test Case: 119 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 120 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 121 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 122 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 123 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 124 | Input/Output: [(44 44 44 44) 44]
Test Case: 125 | Input/Output: [(40 40 40 40) 40]
Test Case: 126 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 127 | Input/Output: [(4 4 4 4) 4]
Test Case: 128 | Input/Output: [(96 96 96 96) 96]
Test Case: 129 | Input/Output: [(78 78 78 78) 78]
Test Case: 130 | Input/Output: [(98 98 98 98) 98]
Test Case: 131 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 132 | Input/Output: [(52 52 52 52) 52]
Test Case: 133 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 134 | Input/Output: [(46 46 46 46) 46]
Test Case: 135 | Input/Output: [(7 7 7 7) 7]
Test Case: 136 | Input/Output: [(30 30 30 30) 30]
Test Case: 137 | Input/Output: [(95 95 95 95) 95]
Test Case: 138 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 139 | Input/Output: [(10 10 10 10) 10]
Test Case: 140 | Input/Output: [(77 77 77 77) 77]
Test Case: 141 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 142 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 143 | Input/Output: [(93 93 93 93) 93]
Test Case: 144 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 145 | Input/Output: [(62 62 62 62) 62]
Test Case: 146 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 147 | Input/Output: [(5 5 5 5) 5]
Test Case: 148 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 149 | Input/Output: [(26 26 26 26) 26]
Test Case: 150 | Input/Output: [(59 59 59 59) 59]
Test Case: 151 | Input/Output: [(55 55 55 55) 55]
Test Case: 152 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 153 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 154 | Input/Output: [(17 17 17 17) 17]
Test Case: 155 | Input/Output: [(18 18 18 18) 18]
Test Case: 156 | Input/Output: [(13 13 13 13) 13]
Test Case: 157 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 158 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 159 | Input/Output: [(36 36 36 36) 36]
Test Case: 160 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 161 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 162 | Input/Output: [(0 0 0 0) 0]
Test Case: 163 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 164 | Input/Output: [(7 7 7 7) 7]
Test Case: 165 | Input/Output: [(52 52 52 52) 52]
Test Case: 166 | Input/Output: [(24 24 24 24) 24]
Test Case: 167 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 168 | Input/Output: [(81 81 81 81) 81]
Test Case: 169 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 170 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 171 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 172 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 173 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 174 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 175 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 176 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 177 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 178 | Input/Output: [(41 41 41 41) 41]
Test Case: 179 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 180 | Input/Output: [(21 21 21 21) 21]
Test Case: 181 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 182 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 183 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 184 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 185 | Input/Output: [(88 88 88 88) 88]
Test Case: 186 | Input/Output: [(90 90 90 90) 90]
Test Case: 187 | Input/Output: [(8 8 8 8) 8]
Test Case: 188 | Input/Output: [(0 0 0 0) 0]
Test Case: 189 | Input/Output: [(77 77 77 77) 77]
Test Case: 190 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 191 | Input/Output: [(49 49 49 49) 49]
Test Case: 192 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 193 | Input/Output: [(36 36 36 36) 36]
Test Case: 194 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 195 | Input/Output: [(32 32 32 32) 32]
Test Case: 196 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 197 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 198 | Input/Output: [(51 51 51 51) 51]
Test Case: 199 | Input/Output: [(47 47 47 47) 47]
Test Case: 200 | Input/Output: [(13 64 85 64) 13]
Test Case: 201 | Input/Output: [(14 83 56 17) 14]
Test Case: 202 | Input/Output: [(9 70 97 18) 9]
Test Case: 203 | Input/Output: [(38 91 93 64) 38]
Test Case: 204 | Input/Output: [(93 83 36 9) 9]
Test Case: 205 | Input/Output: [(11 82 2 93) 2]
Test Case: 206 | Input/Output: [(1 77 39 85) 1]
Test Case: 207 | Input/Output: [(41 48 0 68) 0]
Test Case: 208 | Input/Output: [(30 51 2 68) 2]
Test Case: 209 | Input/Output: [(79 96 8 88) 8]
Test Case: 210 | Input/Output: [(32 82 75 96) 32]
Test Case: 211 | Input/Output: [(47 14 57 32) 14]
Test Case: 212 | Input/Output: [(87 74 25 6) 6]
Test Case: 213 | Input/Output: [(90 44 10 32) 10]
Test Case: 214 | Input/Output: [(84 34 12 44) 12]
Test Case: 215 | Input/Output: [(21 37 73 32) 21]
Test Case: 216 | Input/Output: [(76 19 32 27) 19]
Test Case: 217 | Input/Output: [(57 68 77 67) 57]
Test Case: 218 | Input/Output: [(60 67 30 9) 9]
Test Case: 219 | Input/Output: [(77 98 60 44) 44]
Test Case: 220 | Input/Output: [(24 48 15 56) 15]
Test Case: 221 | Input/Output: [(38 78 92 59) 38]
Test Case: 222 | Input/Output: [(44 66 5 99) 5]
Test Case: 223 | Input/Output: [(20 44 24 11) 11]
Test Case: 224 | Input/Output: [(90 51 29 96) 29]
Test Case: 225 | Input/Output: [(94 23 2 47) 2]
Test Case: 226 | Input/Output: [(6 2 80 28) 2]
Test Case: 227 | Input/Output: [(13 81 23 38) 13]
Test Case: 228 | Input/Output: [(45 67 97 38) 38]
Test Case: 229 | Input/Output: [(74 97 10 44) 10]
Test Case: 230 | Input/Output: [(61 69 93 24) 24]
Test Case: 231 | Input/Output: [(26 75 72 36) 26]
Test Case: 232 | Input/Output: [(50 45 6 77) 6]
Test Case: 233 | Input/Output: [(15 43 80 9) 9]
Test Case: 234 | Input/Output: [(45 1 14 19) 1]
Test Case: 235 | Input/Output: [(40 88 20 22) 20]
Test Case: 236 | Input/Output: [(80 62 25 43) 25]
Test Case: 237 | Input/Output: [(82 98 19 26) 19]
Test Case: 238 | Input/Output: [(5 87 70 9) 5]
Test Case: 239 | Input/Output: [(98 88 3 36) 3]
Test Case: 240 | Input/Output: [(48 51 7 12) 7]
Test Case: 241 | Input/Output: [(88 70 44 98) 44]
Test Case: 242 | Input/Output: [(10 78 9 39) 9]
Test Case: 243 | Input/Output: [(60 33 88 4) 4]
Test Case: 244 | Input/Output: [(77 87 52 82) 52]
Test Case: 245 | Input/Output: [(58 54 98 51) 51]
Test Case: 246 | Input/Output: [(82 49 61 22) 22]
Test Case: 247 | Input/Output: [(95 31 57 58) 31]
Test Case: 248 | Input/Output: [(85 68 28 48) 28]
Test Case: 249 | Input/Output: [(27 66 22 26) 22]
Test Case: 250 | Input/Output: [(74 58 44 36) 36]
Test Case: 251 | Input/Output: [(31 85 77 12) 12]
Test Case: 252 | Input/Output: [(74 79 81 54) 54]
Test Case: 253 | Input/Output: [(40 46 48 29) 29]
Test Case: 254 | Input/Output: [(62 90 70 19) 19]
Test Case: 255 | Input/Output: [(53 100 24 44) 24]
Test Case: 256 | Input/Output: [(26 15 76 60) 15]
Test Case: 257 | Input/Output: [(32 55 28 38) 28]
Test Case: 258 | Input/Output: [(56 39 46 76) 39]
Test Case: 259 | Input/Output: [(48 12 10 40) 10]
Test Case: 260 | Input/Output: [(97 44 6 58) 6]
Test Case: 261 | Input/Output: [(95 0 65 47) 0]
Test Case: 262 | Input/Output: [(95 5 9 84) 5]
Test Case: 263 | Input/Output: [(58 17 72 52) 17]
Test Case: 264 | Input/Output: [(85 6 88 89) 6]
Test Case: 265 | Input/Output: [(58 29 27 37) 27]
Test Case: 266 | Input/Output: [(5 75 35 6) 5]
Test Case: 267 | Input/Output: [(58 47 80 97) 47]
Test Case: 268 | Input/Output: [(55 49 67 70) 49]
Test Case: 269 | Input/Output: [(66 48 18 56) 18]
Test Case: 270 | Input/Output: [(7 15 37 22) 7]
Test Case: 271 | Input/Output: [(14 90 12 69) 12]
Test Case: 272 | Input/Output: [(43 80 12 68) 12]
Test Case: 273 | Input/Output: [(64 77 75 93) 64]
Test Case: 274 | Input/Output: [(55 52 64 3) 3]
Test Case: 275 | Input/Output: [(65 55 47 97) 47]
Test Case: 276 | Input/Output: [(74 18 12 26) 12]
Test Case: 277 | Input/Output: [(10 43 50 88) 10]
Test Case: 278 | Input/Output: [(99 95 58 2) 2]
Test Case: 279 | Input/Output: [(55 48 15 98) 15]
Test Case: 280 | Input/Output: [(17 11 55 89) 11]
Test Case: 281 | Input/Output: [(7 17 56 76) 7]
Test Case: 282 | Input/Output: [(65 58 52 70) 52]
Test Case: 283 | Input/Output: [(97 98 29 81) 29]
Test Case: 284 | Input/Output: [(74 83 96 46) 46]
Test Case: 285 | Input/Output: [(96 50 18 84) 18]
Test Case: 286 | Input/Output: [(10 68 76 88) 10]
Test Case: 287 | Input/Output: [(91 12 30 45) 12]
Test Case: 288 | Input/Output: [(9 43 76 67) 9]
Test Case: 289 | Input/Output: [(42 10 74 93) 10]
Test Case: 290 | Input/Output: [(85 56 29 73) 29]
Test Case: 291 | Input/Output: [(97 88 40 77) 40]
Test Case: 292 | Input/Output: [(71 72 65 56) 56]
Test Case: 293 | Input/Output: [(24 76 10 9) 9]
Test Case: 294 | Input/Output: [(74 11 23 0) 0]
Test Case: 295 | Input/Output: [(92 88 2 9) 2]
Test Case: 296 | Input/Output: [(72 90 78 26) 26]
Test Case: 297 | Input/Output: [(51 76 38 39) 38]
Test Case: 298 | Input/Output: [(80 51 10 86) 10]
Test Case: 299 | Input/Output: [(32 28 60 26) 26]
Test Case: 300 | Input/Output: [(70 92 45 87) 45]
Test Case: 301 | Input/Output: [(75 87 57 80) 57]
Test Case: 302 | Input/Output: [(77 41 97 69) 41]
Test Case: 303 | Input/Output: [(49 82 31 33) 31]
Test Case: 304 | Input/Output: [(15 42 49 87) 15]
Test Case: 305 | Input/Output: [(32 60 87 20) 20]
Test Case: 306 | Input/Output: [(52 8 4 26) 4]
Test Case: 307 | Input/Output: [(85 43 36 74) 36]
Test Case: 308 | Input/Output: [(27 35 19 30) 19]
Test Case: 309 | Input/Output: [(94 91 19 65) 19]
Test Case: 310 | Input/Output: [(9 50 79 17) 9]
Test Case: 311 | Input/Output: [(69 27 5 15) 5]
Test Case: 312 | Input/Output: [(28 49 88 60) 28]
Test Case: 313 | Input/Output: [(75 96 92 80) 75]
Test Case: 314 | Input/Output: [(46 58 42 7) 7]
Test Case: 315 | Input/Output: [(3 32 34 28) 3]
Test Case: 316 | Input/Output: [(57 5 73 14) 5]
Test Case: 317 | Input/Output: [(14 63 68 51) 14]
Test Case: 318 | Input/Output: [(58 95 78 57) 57]
Test Case: 319 | Input/Output: [(22 4 28 33) 4]
Test Case: 320 | Input/Output: [(99 24 33 44) 24]
Test Case: 321 | Input/Output: [(73 21 3 20) 3]
Test Case: 322 | Input/Output: [(16 34 74 50) 16]
Test Case: 323 | Input/Output: [(38 45 84 82) 38]
Test Case: 324 | Input/Output: [(21 56 58 71) 21]
Test Case: 325 | Input/Output: [(73 40 68 87) 40]
Test Case: 326 | Input/Output: [(77 70 69 12) 12]
Test Case: 327 | Input/Output: [(44 93 51 39) 39]
Test Case: 328 | Input/Output: [(3 14 46 4) 3]
Test Case: 329 | Input/Output: [(13 77 76 44) 13]
Test Case: 330 | Input/Output: [(81 12 7 83) 7]
Test Case: 331 | Input/Output: [(58 9 14 99) 9]
Test Case: 332 | Input/Output: [(78 57 31 93) 31]
Test Case: 333 | Input/Output: [(25 95 37 95) 25]
Test Case: 334 | Input/Output: [(58 85 30 75) 30]
Test Case: 335 | Input/Output: [(40 22 21 98) 21]
Test Case: 336 | Input/Output: [(37 35 41 37) 35]
Test Case: 337 | Input/Output: [(66 88 30 40) 30]
Test Case: 338 | Input/Output: [(21 30 38 84) 21]
Test Case: 339 | Input/Output: [(13 56 94 97) 13]
Test Case: 340 | Input/Output: [(77 27 27 95) 27]
Test Case: 341 | Input/Output: [(89 14 56 56) 14]
Test Case: 342 | Input/Output: [(91 74 92 84) 74]
Test Case: 343 | Input/Output: [(60 28 99 29) 28]
Test Case: 344 | Input/Output: [(35 80 58 30) 30]
Test Case: 345 | Input/Output: [(74 18 45 21) 18]
Test Case: 346 | Input/Output: [(18 94 89 24) 18]
Test Case: 347 | Input/Output: [(22 64 5 24) 5]
Test Case: 348 | Input/Output: [(55 53 76 98) 53]
Test Case: 349 | Input/Output: [(66 42 3 77) 3]
Test Case: 350 | Input/Output: [(49 12 12 89) 12]
Test Case: 351 | Input/Output: [(30 6 2 89) 2]
Test Case: 352 | Input/Output: [(19 54 90 8) 8]
Test Case: 353 | Input/Output: [(78 59 96 84) 59]
Test Case: 354 | Input/Output: [(35 8 0 77) 0]
Test Case: 355 | Input/Output: [(81 78 28 76) 28]
Test Case: 356 | Input/Output: [(31 24 93 25) 24]
Test Case: 357 | Input/Output: [(53 36 5 75) 5]
Test Case: 358 | Input/Output: [(16 32 62 16) 16]
Test Case: 359 | Input/Output: [(83 42 10 23) 10]
Test Case: 360 | Input/Output: [(5 85 49 62) 5]
Test Case: 361 | Input/Output: [(0 16 1 24) 0]
Test Case: 362 | Input/Output: [(89 35 51 90) 35]
Test Case: 363 | Input/Output: [(27 15 12 57) 12]
Test Case: 364 | Input/Output: [(66 26 37 26) 26]
Test Case: 365 | Input/Output: [(88 58 77 3) 3]
Test Case: 366 | Input/Output: [(38 25 43 38) 25]
Test Case: 367 | Input/Output: [(90 41 41 82) 41]
Test Case: 368 | Input/Output: [(42 4 89 52) 4]
Test Case: 369 | Input/Output: [(5 9 58 42) 5]
Test Case: 370 | Input/Output: [(63 49 83 31) 31]
Test Case: 371 | Input/Output: [(71 65 54 8) 8]
Test Case: 372 | Input/Output: [(6 93 49 43) 6]
Test Case: 373 | Input/Output: [(48 32 48 73) 32]
Test Case: 374 | Input/Output: [(76 78 55 74) 55]
Test Case: 375 | Input/Output: [(69 46 80 50) 46]
Test Case: 376 | Input/Output: [(11 32 10 14) 10]
Test Case: 377 | Input/Output: [(70 37 61 22) 22]
Test Case: 378 | Input/Output: [(88 8 99 9) 8]
Test Case: 379 | Input/Output: [(93 0 22 0) 0]
Test Case: 380 | Input/Output: [(8 3 82 67) 3]
Test Case: 381 | Input/Output: [(20 80 29 19) 19]
Test Case: 382 | Input/Output: [(70 11 99 22) 11]
Test Case: 383 | Input/Output: [(4 44 34 27) 4]
Test Case: 384 | Input/Output: [(44 33 35 81) 33]
Test Case: 385 | Input/Output: [(85 20 86 71) 20]
Test Case: 386 | Input/Output: [(100 85 87 35) 35]
Test Case: 387 | Input/Output: [(96 27 15 49) 15]
Test Case: 388 | Input/Output: [(46 61 99 69) 46]
Test Case: 389 | Input/Output: [(81 72 91 73) 72]
Test Case: 390 | Input/Output: [(65 70 40 59) 40]
Test Case: 391 | Input/Output: [(81 82 65 9) 9]
Test Case: 392 | Input/Output: [(82 87 19 73) 19]
Test Case: 393 | Input/Output: [(65 54 30 4) 4]
Test Case: 394 | Input/Output: [(23 18 55 71) 18]
Test Case: 395 | Input/Output: [(18 53 11 100) 11]
Test Case: 396 | Input/Output: [(13 36 72 67) 13]
Test Case: 397 | Input/Output: [(65 16 24 75) 16]
Test Case: 398 | Input/Output: [(96 54 30 33) 30]
Test Case: 399 | Input/Output: [(38 67 30 77) 30]
Test Case: 400 | Input/Output: [(4 19 -95 74) -95]
Test Case: 401 | Input/Output: [(-74 20 85 -35) -74]
Test Case: 402 | Input/Output: [(5 77 -100 6) -100]
Test Case: 403 | Input/Output: [(9 1 -65 -72) -72]
Test Case: 404 | Input/Output: [(-71 13 34 38) -71]
Test Case: 405 | Input/Output: [(-82 7 37 -78) -82]
Test Case: 406 | Input/Output: [(4 -74 -9 65) -74]
Test Case: 407 | Input/Output: [(-25 -84 7 61) -84]
Test Case: 408 | Input/Output: [(42 -71 -86 -33) -86]
Test Case: 409 | Input/Output: [(34 27 34 65) 27]
Test Case: 410 | Input/Output: [(71 -27 53 32) -27]
Test Case: 411 | Input/Output: [(82 -82 4 -5) -82]
Test Case: 412 | Input/Output: [(-5 -9 25 53) -9]
Test Case: 413 | Input/Output: [(70 -11 86 -66) -66]
Test Case: 414 | Input/Output: [(-69 -96 -61 -7) -96]
Test Case: 415 | Input/Output: [(69 -33 26 15) -33]
Test Case: 416 | Input/Output: [(13 61 99 58) 13]
Test Case: 417 | Input/Output: [(-34 99 64 -80) -80]
Test Case: 418 | Input/Output: [(-6 86 -24 70) -24]
Test Case: 419 | Input/Output: [(30 -7 -5 -67) -67]
Test Case: 420 | Input/Output: [(-61 -75 -43 -9) -75]
Test Case: 421 | Input/Output: [(73 -80 -25 76) -80]
Test Case: 422 | Input/Output: [(69 -37 -89 25) -89]
Test Case: 423 | Input/Output: [(-43 -29 20 28) -43]
Test Case: 424 | Input/Output: [(43 23 86 -97) -97]
Test Case: 425 | Input/Output: [(-4 17 60 31) -4]
Test Case: 426 | Input/Output: [(-43 26 30 -68) -68]
Test Case: 427 | Input/Output: [(21 -8 -98 9) -98]
Test Case: 428 | Input/Output: [(-64 98 71 -56) -64]
Test Case: 429 | Input/Output: [(2 31 71 -98) -98]
Test Case: 430 | Input/Output: [(40 -79 -99 0) -99]
Test Case: 431 | Input/Output: [(-50 93 -33 -64) -64]
Test Case: 432 | Input/Output: [(-14 8 64 90) -14]
Test Case: 433 | Input/Output: [(50 8 82 -47) -47]
Test Case: 434 | Input/Output: [(58 44 -7 -81) -81]
Test Case: 435 | Input/Output: [(-30 -3 -40 55) -40]
Test Case: 436 | Input/Output: [(69 3 69 29) 3]
Test Case: 437 | Input/Output: [(94 -33 -12 -14) -33]
Test Case: 438 | Input/Output: [(-10 -32 -89 60) -89]
Test Case: 439 | Input/Output: [(43 30 -40 -83) -83]
Test Case: 440 | Input/Output: [(30 4 -2 95) -2]
Test Case: 441 | Input/Output: [(18 76 -42 31) -42]
Test Case: 442 | Input/Output: [(-47 7 33 -94) -94]
Test Case: 443 | Input/Output: [(-38 9 -65 84) -65]
Test Case: 444 | Input/Output: [(-4 -21 0 72) -21]
Test Case: 445 | Input/Output: [(-60 3 -47 -55) -60]
Test Case: 446 | Input/Output: [(13 -15 33 0) -15]
Test Case: 447 | Input/Output: [(32 -16 -37 59) -37]
Test Case: 448 | Input/Output: [(-23 -6 -16 -21) -23]
Test Case: 449 | Input/Output: [(-23 -11 -68 -78) -78]
Test Case: 450 | Input/Output: [(-86 -40 17 78) -86]
Test Case: 451 | Input/Output: [(69 7 18 -85) -85]
Test Case: 452 | Input/Output: [(-42 -8 66 -72) -72]
Test Case: 453 | Input/Output: [(-37 -57 -84 -75) -84]
Test Case: 454 | Input/Output: [(29 6 26 -6) -6]
Test Case: 455 | Input/Output: [(-51 62 79 -97) -97]
Test Case: 456 | Input/Output: [(66 -35 -43 53) -43]
Test Case: 457 | Input/Output: [(35 -73 61 3) -73]
Test Case: 458 | Input/Output: [(82 22 -59 -97) -97]
Test Case: 459 | Input/Output: [(70 43 94 -51) -51]
Test Case: 460 | Input/Output: [(53 -17 98 -20) -20]
Test Case: 461 | Input/Output: [(-2 -77 -16 -51) -77]
Test Case: 462 | Input/Output: [(8 47 8 -88) -88]
Test Case: 463 | Input/Output: [(-99 -42 -23 13) -99]
Test Case: 464 | Input/Output: [(-72 14 96 4) -72]
Test Case: 465 | Input/Output: [(-99 -52 -45 -42) -99]
Test Case: 466 | Input/Output: [(98 -30 54 40) -30]
Test Case: 467 | Input/Output: [(31 91 36 87) 31]
Test Case: 468 | Input/Output: [(-67 -99 -71 -25) -99]
Test Case: 469 | Input/Output: [(-5 70 28 56) -5]
Test Case: 470 | Input/Output: [(-15 -25 17 27) -25]
Test Case: 471 | Input/Output: [(-74 1 14 18) -74]
Test Case: 472 | Input/Output: [(-80 -29 -62 -98) -98]
Test Case: 473 | Input/Output: [(-56 -37 -35 -20) -56]
Test Case: 474 | Input/Output: [(55 -76 26 -92) -92]
Test Case: 475 | Input/Output: [(-86 -51 -63 -82) -86]
Test Case: 476 | Input/Output: [(-49 -27 -33 19) -49]
Test Case: 477 | Input/Output: [(28 -73 -58 -100) -100]
Test Case: 478 | Input/Output: [(-91 78 84 29) -91]
Test Case: 479 | Input/Output: [(-21 -41 59 21) -41]
Test Case: 480 | Input/Output: [(-10 -47 -72 -49) -72]
Test Case: 481 | Input/Output: [(55 60 40 -19) -19]
Test Case: 482 | Input/Output: [(38 81 -20 -69) -69]
Test Case: 483 | Input/Output: [(-22 -93 99 0) -93]
Test Case: 484 | Input/Output: [(-60 -60 15 -69) -69]
Test Case: 485 | Input/Output: [(12 54 18 -19) -19]
Test Case: 486 | Input/Output: [(30 -30 42 40) -30]
Test Case: 487 | Input/Output: [(-36 58 -22 97) -36]
Test Case: 488 | Input/Output: [(-15 -5 -77 89) -77]
Test Case: 489 | Input/Output: [(-14 96 -44 -25) -44]
Test Case: 490 | Input/Output: [(98 52 -3 -34) -34]
Test Case: 491 | Input/Output: [(39 70 -60 65) -60]
Test Case: 492 | Input/Output: [(-73 26 94 22) -73]
Test Case: 493 | Input/Output: [(-55 72 55 81) -55]
Test Case: 494 | Input/Output: [(-52 -35 26 -36) -52]
Test Case: 495 | Input/Output: [(63 -35 -84 83) -84]
Test Case: 496 | Input/Output: [(-32 -94 75 26) -94]
Test Case: 497 | Input/Output: [(60 61 -56 94) -56]
Test Case: 498 | Input/Output: [(-8 36 34 38) -8]
Test Case: 499 | Input/Output: [(26 39 10 49) 10]
Test Case: 500 | Input/Output: [(-81 15 99 -90) -90]
Test Case: 501 | Input/Output: [(-38 38 -3 -72) -72]
Test Case: 502 | Input/Output: [(-70 9 -25 -46) -70]
Test Case: 503 | Input/Output: [(-53 41 41 20) -53]
Test Case: 504 | Input/Output: [(20 -32 -65 53) -65]
Test Case: 505 | Input/Output: [(-69 -73 -14 -64) -73]
Test Case: 506 | Input/Output: [(97 5 14 -24) -24]
Test Case: 507 | Input/Output: [(-50 37 -53 -78) -78]
Test Case: 508 | Input/Output: [(-43 26 -11 58) -43]
Test Case: 509 | Input/Output: [(97 -55 -85 18) -85]
Test Case: 510 | Input/Output: [(75 -23 40 -85) -85]
Test Case: 511 | Input/Output: [(41 -80 -45 -30) -80]
Test Case: 512 | Input/Output: [(80 79 61 -74) -74]
Test Case: 513 | Input/Output: [(-84 93 -6 0) -84]
Test Case: 514 | Input/Output: [(-10 -61 -33 45) -61]
Test Case: 515 | Input/Output: [(-88 13 5 10) -88]
Test Case: 516 | Input/Output: [(10 -66 -30 -66) -66]
Test Case: 517 | Input/Output: [(75 -90 16 -55) -90]
Test Case: 518 | Input/Output: [(28 -95 -57 36) -95]
Test Case: 519 | Input/Output: [(51 -82 67 -94) -94]
Test Case: 520 | Input/Output: [(22 -16 34 71) -16]
Test Case: 521 | Input/Output: [(-87 -62 -51 2) -87]
Test Case: 522 | Input/Output: [(93 59 -49 -98) -98]
Test Case: 523 | Input/Output: [(33 -80 -45 -52) -80]
Test Case: 524 | Input/Output: [(-21 -81 18 -12) -81]
Test Case: 525 | Input/Output: [(10 -37 77 97) -37]
Test Case: 526 | Input/Output: [(10 53 67 -49) -49]
Test Case: 527 | Input/Output: [(43 19 90 -75) -75]
Test Case: 528 | Input/Output: [(28 -13 -53 -19) -53]
Test Case: 529 | Input/Output: [(-38 98 18 -23) -38]
Test Case: 530 | Input/Output: [(17 1 -24 -84) -84]
Test Case: 531 | Input/Output: [(76 41 -19 36) -19]
Test Case: 532 | Input/Output: [(7 -36 -28 -57) -57]
Test Case: 533 | Input/Output: [(98 -84 -14 85) -84]
Test Case: 534 | Input/Output: [(-28 -73 99 -76) -76]
Test Case: 535 | Input/Output: [(56 -8 -13 83) -13]
Test Case: 536 | Input/Output: [(-34 -66 43 85) -66]
Test Case: 537 | Input/Output: [(-27 43 98 -51) -51]
Test Case: 538 | Input/Output: [(41 -47 -57 -92) -92]
Test Case: 539 | Input/Output: [(-92 -99 -51 38) -99]
Test Case: 540 | Input/Output: [(56 -65 68 -71) -71]
Test Case: 541 | Input/Output: [(-56 14 44 12) -56]
Test Case: 542 | Input/Output: [(52 -43 -34 -16) -43]
Test Case: 543 | Input/Output: [(-3 -68 -73 81) -73]
Test Case: 544 | Input/Output: [(73 88 -21 -57) -57]
Test Case: 545 | Input/Output: [(34 -86 -60 -68) -86]
Test Case: 546 | Input/Output: [(-30 98 76 -33) -33]
Test Case: 547 | Input/Output: [(15 0 -100 -80) -100]
Test Case: 548 | Input/Output: [(-49 49 -17 49) -49]
Test Case: 549 | Input/Output: [(-67 -39 -74 84) -74]
Test Case: 550 | Input/Output: [(-69 29 -2 7) -69]
Test Case: 551 | Input/Output: [(-49 84 -4 22) -49]
Test Case: 552 | Input/Output: [(-81 21 -2 -82) -82]
Test Case: 553 | Input/Output: [(-8 -96 -41 -10) -96]
Test Case: 554 | Input/Output: [(87 40 99 -1) -1]
Test Case: 555 | Input/Output: [(-61 -65 -59 -29) -65]
Test Case: 556 | Input/Output: [(-36 94 4 -3) -36]
Test Case: 557 | Input/Output: [(37 -77 -60 -37) -77]
Test Case: 558 | Input/Output: [(-61 -78 68 62) -78]
Test Case: 559 | Input/Output: [(-93 19 30 0) -93]
Test Case: 560 | Input/Output: [(-21 1 6 10) -21]
Test Case: 561 | Input/Output: [(4 55 -33 81) -33]
Test Case: 562 | Input/Output: [(91 92 -49 54) -49]
Test Case: 563 | Input/Output: [(-27 -52 -83 64) -83]
Test Case: 564 | Input/Output: [(99 -17 -34 -8) -34]
Test Case: 565 | Input/Output: [(-67 92 -7 -54) -67]
Test Case: 566 | Input/Output: [(-77 -6 -54 -62) -77]
Test Case: 567 | Input/Output: [(52 -83 52 -64) -83]
Test Case: 568 | Input/Output: [(-55 47 29 47) -55]
Test Case: 569 | Input/Output: [(-65 -86 48 -85) -86]
Test Case: 570 | Input/Output: [(38 38 81 75) 38]
Test Case: 571 | Input/Output: [(-9 -36 -98 -30) -98]
Test Case: 572 | Input/Output: [(-29 96 -75 -60) -75]
Test Case: 573 | Input/Output: [(-77 -97 -80 -90) -97]
Test Case: 574 | Input/Output: [(-8 34 -57 62) -57]
Test Case: 575 | Input/Output: [(33 90 -63 -93) -93]
Test Case: 576 | Input/Output: [(-69 -90 89 34) -90]
Test Case: 577 | Input/Output: [(-91 -2 14 94) -91]
Test Case: 578 | Input/Output: [(-54 -1 36 25) -54]
Test Case: 579 | Input/Output: [(-49 34 -91 -63) -91]
Test Case: 580 | Input/Output: [(-82 11 55 41) -82]
Test Case: 581 | Input/Output: [(12 47 -97 -79) -97]
Test Case: 582 | Input/Output: [(95 33 30 -45) -45]
Test Case: 583 | Input/Output: [(-95 1 -31 19) -95]
Test Case: 584 | Input/Output: [(-69 -70 81 97) -70]
Test Case: 585 | Input/Output: [(-24 -99 96 -59) -99]
Test Case: 586 | Input/Output: [(-85 -54 80 44) -85]
Test Case: 587 | Input/Output: [(-60 -79 -6 87) -79]
Test Case: 588 | Input/Output: [(57 97 38 -21) -21]
Test Case: 589 | Input/Output: [(-69 42 8 20) -69]
Test Case: 590 | Input/Output: [(15 77 -94 -8) -94]
Test Case: 591 | Input/Output: [(82 39 -28 44) -28]
Test Case: 592 | Input/Output: [(-77 45 -9 74) -77]
Test Case: 593 | Input/Output: [(-67 -93 83 -77) -93]
Test Case: 594 | Input/Output: [(75 98 15 -45) -45]
Test Case: 595 | Input/Output: [(-5 -20 38 -32) -32]
Test Case: 596 | Input/Output: [(26 37 4 29) 4]
Test Case: 597 | Input/Output: [(78 0 57 13) 0]
Test Case: 598 | Input/Output: [(62 75 69 73) 62]
Test Case: 599 | Input/Output: [(24 -30 40 -67) -67]
Test Case: 600 | Input/Output: [(82 -76 66 -88) -88]
Test Case: 601 | Input/Output: [(-55 52 -98 -70) -98]
Test Case: 602 | Input/Output: [(-93 -92 24 16) -93]
Test Case: 603 | Input/Output: [(14 90 -41 -1) -41]
Test Case: 604 | Input/Output: [(-37 9 -64 -95) -95]
Test Case: 605 | Input/Output: [(8 -70 95 -80) -80]
Test Case: 606 | Input/Output: [(-30 -40 71 -55) -55]
Test Case: 607 | Input/Output: [(-50 -96 -36 51) -96]
Test Case: 608 | Input/Output: [(-9 98 -98 -83) -98]
Test Case: 609 | Input/Output: [(53 -18 -47 56) -47]
Test Case: 610 | Input/Output: [(-15 55 52 -14) -15]
Test Case: 611 | Input/Output: [(-77 67 100 -95) -95]
Test Case: 612 | Input/Output: [(100 74 -82 -82) -82]
Test Case: 613 | Input/Output: [(-80 55 27 -21) -80]
Test Case: 614 | Input/Output: [(92 -94 11 -96) -96]
Test Case: 615 | Input/Output: [(83 68 -45 28) -45]
Test Case: 616 | Input/Output: [(-73 92 68 63) -73]
Test Case: 617 | Input/Output: [(69 -69 -20 90) -69]
Test Case: 618 | Input/Output: [(48 89 -25 -88) -88]
Test Case: 619 | Input/Output: [(15 -75 17 -53) -75]
Test Case: 620 | Input/Output: [(-8 -74 16 -32) -74]
Test Case: 621 | Input/Output: [(86 29 9 55) 9]
Test Case: 622 | Input/Output: [(-48 -17 40 -98) -98]
Test Case: 623 | Input/Output: [(-19 -46 -36 -62) -62]
Test Case: 624 | Input/Output: [(56 -25 -9 100) -25]
Test Case: 625 | Input/Output: [(-82 -95 34 -91) -95]
Test Case: 626 | Input/Output: [(6 16 5 -44) -44]
Test Case: 627 | Input/Output: [(32 -79 -31 -75) -79]
Test Case: 628 | Input/Output: [(6 26 51 86) 6]
Test Case: 629 | Input/Output: [(84 -10 -17 -48) -48]
Test Case: 630 | Input/Output: [(32 -89 92 25) -89]
Test Case: 631 | Input/Output: [(-46 88 -16 97) -46]
Test Case: 632 | Input/Output: [(-68 70 -39 71) -68]
Test Case: 633 | Input/Output: [(84 0 39 -68) -68]
Test Case: 634 | Input/Output: [(60 74 -59 4) -59]
Test Case: 635 | Input/Output: [(86 -98 -33 -65) -98]
Test Case: 636 | Input/Output: [(-48 -45 72 24) -48]
Test Case: 637 | Input/Output: [(27 6 -59 -16) -59]
Test Case: 638 | Input/Output: [(95 -25 49 -83) -83]
Test Case: 639 | Input/Output: [(-66 63 13 8) -66]
Test Case: 640 | Input/Output: [(5 54 -97 56) -97]
Test Case: 641 | Input/Output: [(73 -50 40 93) -50]
Test Case: 642 | Input/Output: [(16 -94 84 -63) -94]
Test Case: 643 | Input/Output: [(59 -37 -30 71) -37]
Test Case: 644 | Input/Output: [(-45 36 -13 95) -45]
Test Case: 645 | Input/Output: [(-81 -98 -52 -32) -98]
Test Case: 646 | Input/Output: [(84 15 69 99) 15]
Test Case: 647 | Input/Output: [(45 -24 -1 -100) -100]
Test Case: 648 | Input/Output: [(-12 -5 35 -68) -68]
Test Case: 649 | Input/Output: [(-41 -43 -53 83) -53]
Test Case: 650 | Input/Output: [(-93 93 82 -85) -93]
Test Case: 651 | Input/Output: [(33 -65 89 -58) -65]
Test Case: 652 | Input/Output: [(-56 -43 6 45) -56]
Test Case: 653 | Input/Output: [(-48 -26 -47 11) -48]
Test Case: 654 | Input/Output: [(-35 -22 94 -61) -61]
Test Case: 655 | Input/Output: [(-49 -24 40 73) -49]
Test Case: 656 | Input/Output: [(-33 16 -10 65) -33]
Test Case: 657 | Input/Output: [(11 65 -42 24) -42]
Test Case: 658 | Input/Output: [(63 -32 -48 -53) -53]
Test Case: 659 | Input/Output: [(87 -16 -64 52) -64]
Test Case: 660 | Input/Output: [(-70 -80 58 71) -80]
Test Case: 661 | Input/Output: [(-11 -54 -74 -57) -74]
Test Case: 662 | Input/Output: [(-19 73 -91 75) -91]
Test Case: 663 | Input/Output: [(2 29 -85 17) -85]
Test Case: 664 | Input/Output: [(68 -44 17 -4) -44]
Test Case: 665 | Input/Output: [(-4 97 -38 -59) -59]
Test Case: 666 | Input/Output: [(39 -4 -27 11) -27]
Test Case: 667 | Input/Output: [(-42 -54 8 -69) -69]
Test Case: 668 | Input/Output: [(-49 53 68 -58) -58]
Test Case: 669 | Input/Output: [(50 70 -33 59) -33]
Test Case: 670 | Input/Output: [(44 -98 77 -10) -98]
Test Case: 671 | Input/Output: [(-34 50 37 52) -34]
Test Case: 672 | Input/Output: [(81 44 -88 91) -88]
Test Case: 673 | Input/Output: [(-74 -67 -67 -82) -82]
Test Case: 674 | Input/Output: [(0 32 43 93) 0]
Test Case: 675 | Input/Output: [(-13 -76 93 18) -76]
Test Case: 676 | Input/Output: [(9 -32 44 76) -32]
Test Case: 677 | Input/Output: [(-59 -27 -19 62) -59]
Test Case: 678 | Input/Output: [(19 34 10 21) 10]
Test Case: 679 | Input/Output: [(-1 -71 55 -60) -71]
Test Case: 680 | Input/Output: [(-31 -19 32 -52) -52]
Test Case: 681 | Input/Output: [(-64 85 40 50) -64]
Test Case: 682 | Input/Output: [(38 -76 22 70) -76]
Test Case: 683 | Input/Output: [(64 13 -93 64) -93]
Test Case: 684 | Input/Output: [(59 97 -32 30) -32]
Test Case: 685 | Input/Output: [(30 48 -85 -33) -85]
Test Case: 686 | Input/Output: [(77 -96 59 -19) -96]
Test Case: 687 | Input/Output: [(39 -78 97 -8) -78]
Test Case: 688 | Input/Output: [(39 59 -39 -53) -53]
Test Case: 689 | Input/Output: [(55 -7 -8 -81) -81]
Test Case: 690 | Input/Output: [(-98 -89 -52 35) -98]
Test Case: 691 | Input/Output: [(66 -87 46 -46) -87]
Test Case: 692 | Input/Output: [(-60 64 51 -50) -60]
Test Case: 693 | Input/Output: [(-52 -19 -76 5) -76]
Test Case: 694 | Input/Output: [(48 31 70 -61) -61]
Test Case: 695 | Input/Output: [(7 10 13 12) 7]
Test Case: 696 | Input/Output: [(-9 5 -61 40) -61]
Test Case: 697 | Input/Output: [(-33 91 -94 -45) -94]
Test Case: 698 | Input/Output: [(-97 -15 -97 -37) -97]
Test Case: 699 | Input/Output: [(16 34 -35 -26) -35]
Test Case: 700 | Input/Output: [(43 -34 70 84) -34]
Test Case: 701 | Input/Output: [(-35 52 3 79) -35]
Test Case: 702 | Input/Output: [(19 -64 -42 -10) -64]
Test Case: 703 | Input/Output: [(16 -1 -92 -38) -92]
Test Case: 704 | Input/Output: [(-90 78 67 53) -90]
Test Case: 705 | Input/Output: [(-72 -78 -55 55) -78]
Test Case: 706 | Input/Output: [(-52 48 -66 1) -66]
Test Case: 707 | Input/Output: [(-83 53 67 -38) -83]
Test Case: 708 | Input/Output: [(-53 -85 77 -50) -85]
Test Case: 709 | Input/Output: [(90 8 68 -18) -18]
Test Case: 710 | Input/Output: [(-33 -71 -56 87) -71]
Test Case: 711 | Input/Output: [(-99 -74 71 8) -99]
Test Case: 712 | Input/Output: [(21 -36 -49 64) -49]
Test Case: 713 | Input/Output: [(0 41 17 96) 0]
Test Case: 714 | Input/Output: [(-10 82 -82 -63) -82]
Test Case: 715 | Input/Output: [(47 56 37 -10) -10]
Test Case: 716 | Input/Output: [(-64 -75 -81 -30) -81]
Test Case: 717 | Input/Output: [(-17 -10 41 -63) -63]
Test Case: 718 | Input/Output: [(-29 100 -19 96) -29]
Test Case: 719 | Input/Output: [(-15 -23 53 -61) -61]
Test Case: 720 | Input/Output: [(-15 11 -23 33) -23]
Test Case: 721 | Input/Output: [(-100 -83 99 60) -100]
Test Case: 722 | Input/Output: [(-36 56 35 -12) -36]
Test Case: 723 | Input/Output: [(-39 -30 13 27) -39]
Test Case: 724 | Input/Output: [(14 -7 55 -86) -86]
Test Case: 725 | Input/Output: [(71 76 -92 -54) -92]
Test Case: 726 | Input/Output: [(-90 33 -80 67) -90]
Test Case: 727 | Input/Output: [(65 -21 -95 -28) -95]
Test Case: 728 | Input/Output: [(-16 17 -57 -28) -57]
Test Case: 729 | Input/Output: [(99 91 -42 12) -42]
Test Case: 730 | Input/Output: [(-72 1 44 56) -72]
Test Case: 731 | Input/Output: [(36 -42 -67 -31) -67]
Test Case: 732 | Input/Output: [(-44 8 -87 -92) -92]
Test Case: 733 | Input/Output: [(-87 -27 -22 69) -87]
Test Case: 734 | Input/Output: [(-48 -32 -97 3) -97]
Test Case: 735 | Input/Output: [(24 91 -72 -50) -72]
Test Case: 736 | Input/Output: [(-17 49 -50 -14) -50]
Test Case: 737 | Input/Output: [(-38 -53 -12 40) -53]
Test Case: 738 | Input/Output: [(-19 34 -58 -100) -100]
Test Case: 739 | Input/Output: [(21 21 74 9) 9]
Test Case: 740 | Input/Output: [(37 -3 33 -77) -77]
Test Case: 741 | Input/Output: [(-28 -77 26 -13) -77]
Test Case: 742 | Input/Output: [(-82 -34 41 10) -82]
Test Case: 743 | Input/Output: [(22 17 92 65) 17]
Test Case: 744 | Input/Output: [(-53 64 86 1) -53]
Test Case: 745 | Input/Output: [(-67 95 -85 -4) -85]
Test Case: 746 | Input/Output: [(14 97 64 7) 7]
Test Case: 747 | Input/Output: [(39 -79 30 -41) -79]
Test Case: 748 | Input/Output: [(98 -83 -57 83) -83]
Test Case: 749 | Input/Output: [(-32 38 89 61) -32]
Test Case: 750 | Input/Output: [(72 61 91 7) 7]
Test Case: 751 | Input/Output: [(61 50 26 2) 2]
Test Case: 752 | Input/Output: [(55 20 74 -30) -30]
Test Case: 753 | Input/Output: [(-69 71 67 74) -69]
Test Case: 754 | Input/Output: [(44 -72 -23 -76) -76]
Test Case: 755 | Input/Output: [(-69 51 -89 24) -89]
Test Case: 756 | Input/Output: [(-47 53 93 -43) -47]
Test Case: 757 | Input/Output: [(-27 -65 59 73) -65]
Test Case: 758 | Input/Output: [(-68 -33 51 89) -68]
Test Case: 759 | Input/Output: [(-16 -71 -75 15) -75]
Test Case: 760 | Input/Output: [(-41 40 -64 85) -64]
Test Case: 761 | Input/Output: [(75 82 90 50) 50]
Test Case: 762 | Input/Output: [(86 -4 -33 40) -33]
Test Case: 763 | Input/Output: [(11 27 0 2) 0]
Test Case: 764 | Input/Output: [(-53 -78 -21 60) -78]
Test Case: 765 | Input/Output: [(-79 -43 -53 -96) -96]
Test Case: 766 | Input/Output: [(34 -79 -65 85) -79]
Test Case: 767 | Input/Output: [(-14 -48 91 96) -48]
Test Case: 768 | Input/Output: [(-48 34 39 98) -48]
Test Case: 769 | Input/Output: [(0 25 -71 -5) -71]
Test Case: 770 | Input/Output: [(-54 44 -45 57) -54]
Test Case: 771 | Input/Output: [(87 91 90 -82) -82]
Test Case: 772 | Input/Output: [(-97 30 73 -1) -97]
Test Case: 773 | Input/Output: [(-30 45 -36 23) -36]
Test Case: 774 | Input/Output: [(97 88 -87 -39) -87]
Test Case: 775 | Input/Output: [(-55 26 48 -72) -72]
Test Case: 776 | Input/Output: [(-27 -55 -72 -28) -72]
Test Case: 777 | Input/Output: [(-12 1 -39 -57) -57]
Test Case: 778 | Input/Output: [(24 68 -7 -25) -25]
Test Case: 779 | Input/Output: [(-94 -48 -78 37) -94]
Test Case: 780 | Input/Output: [(-56 -23 37 71) -56]
Test Case: 781 | Input/Output: [(-77 1 89 -62) -77]
Test Case: 782 | Input/Output: [(-88 63 73 22) -88]
Test Case: 783 | Input/Output: [(98 -32 55 74) -32]
Test Case: 784 | Input/Output: [(45 42 -63 20) -63]
Test Case: 785 | Input/Output: [(-56 71 66 89) -56]
Test Case: 786 | Input/Output: [(83 -9 30 27) -9]
Test Case: 787 | Input/Output: [(-24 43 -25 -69) -69]
Test Case: 788 | Input/Output: [(-20 -43 87 -8) -43]
Test Case: 789 | Input/Output: [(-83 -66 -82 -83) -83]
Test Case: 790 | Input/Output: [(55 39 -76 -23) -76]
Test Case: 791 | Input/Output: [(-94 50 -27 -52) -94]
Test Case: 792 | Input/Output: [(-12 -34 -40 5) -40]
Test Case: 793 | Input/Output: [(57 52 4 -3) -3]
Test Case: 794 | Input/Output: [(33 -68 -48 24) -68]
Test Case: 795 | Input/Output: [(-61 -56 -56 55) -61]
Test Case: 796 | Input/Output: [(-37 -82 -90 75) -90]
Test Case: 797 | Input/Output: [(94 87 -90 -58) -90]
Test Case: 798 | Input/Output: [(-69 28 87 -43) -69]
Test Case: 799 | Input/Output: [(56 77 90 -2) -2]
Test Case: 800 | Input/Output: [(99 -63 58 -73) -73]
Test Case: 801 | Input/Output: [(46 24 89 46) 24]
Test Case: 802 | Input/Output: [(-99 -29 -40 51) -99]
Test Case: 803 | Input/Output: [(47 17 89 28) 17]
Test Case: 804 | Input/Output: [(-86 21 -49 -69) -86]
Test Case: 805 | Input/Output: [(-12 -20 -68 -94) -94]
Test Case: 806 | Input/Output: [(61 -80 47 -32) -80]
Test Case: 807 | Input/Output: [(97 -67 -47 -86) -86]
Test Case: 808 | Input/Output: [(5 -42 -23 100) -42]
Test Case: 809 | Input/Output: [(5 90 95 96) 5]
Test Case: 810 | Input/Output: [(97 -95 -6 -31) -95]
Test Case: 811 | Input/Output: [(-91 47 28 -58) -91]
Test Case: 812 | Input/Output: [(-16 85 40 31) -16]
Test Case: 813 | Input/Output: [(22 -41 71 -70) -70]
Test Case: 814 | Input/Output: [(-13 -9 25 -48) -48]
Test Case: 815 | Input/Output: [(2 76 -99 71) -99]
Test Case: 816 | Input/Output: [(93 -36 -36 10) -36]
Test Case: 817 | Input/Output: [(-73 -77 -1 77) -77]
Test Case: 818 | Input/Output: [(-24 -8 31 49) -24]
Test Case: 819 | Input/Output: [(34 74 9 -1) -1]
Test Case: 820 | Input/Output: [(-22 31 -91 -37) -91]
Test Case: 821 | Input/Output: [(-70 -30 63 -31) -70]
Test Case: 822 | Input/Output: [(-68 78 -90 82) -90]
Test Case: 823 | Input/Output: [(21 -30 -37 -90) -90]
Test Case: 824 | Input/Output: [(-25 -4 89 -8) -25]
Test Case: 825 | Input/Output: [(-77 84 -39 27) -77]
Test Case: 826 | Input/Output: [(-85 4 -71 24) -85]
Test Case: 827 | Input/Output: [(26 59 22 74) 22]
Test Case: 828 | Input/Output: [(87 27 -41 23) -41]
Test Case: 829 | Input/Output: [(79 51 -57 70) -57]
Test Case: 830 | Input/Output: [(5 -30 -3 81) -30]
Test Case: 831 | Input/Output: [(-33 -49 -4 -51) -51]
Test Case: 832 | Input/Output: [(43 -73 9 39) -73]
Test Case: 833 | Input/Output: [(89 26 -41 -37) -41]
Test Case: 834 | Input/Output: [(21 -82 -82 65) -82]
Test Case: 835 | Input/Output: [(-69 -23 50 35) -69]
Test Case: 836 | Input/Output: [(-77 -75 -64 -23) -77]
Test Case: 837 | Input/Output: [(-82 -56 47 1) -82]
Test Case: 838 | Input/Output: [(-41 63 48 -33) -41]
Test Case: 839 | Input/Output: [(86 -83 -86 37) -86]
Test Case: 840 | Input/Output: [(69 -19 35 -79) -79]
Test Case: 841 | Input/Output: [(-71 85 -83 -44) -83]
Test Case: 842 | Input/Output: [(64 -77 -95 -25) -95]
Test Case: 843 | Input/Output: [(66 -96 91 -48) -96]
Test Case: 844 | Input/Output: [(-50 2 -74 16) -74]
Test Case: 845 | Input/Output: [(85 -28 97 27) -28]
Test Case: 846 | Input/Output: [(-35 75 28 -13) -35]
Test Case: 847 | Input/Output: [(-37 87 -32 -80) -80]
Test Case: 848 | Input/Output: [(-30 30 5 -10) -30]
Test Case: 849 | Input/Output: [(-52 53 -49 47) -52]
Test Case: 850 | Input/Output: [(62 34 -40 -55) -55]
Test Case: 851 | Input/Output: [(-66 31 -55 -92) -92]
Test Case: 852 | Input/Output: [(45 94 5 64) 5]
Test Case: 853 | Input/Output: [(-38 -60 -43 -40) -60]
Test Case: 854 | Input/Output: [(-84 -71 -2 28) -84]
Test Case: 855 | Input/Output: [(-85 -38 -70 67) -85]
Test Case: 856 | Input/Output: [(-57 -82 -11 -62) -82]
Test Case: 857 | Input/Output: [(-34 -91 -63 -68) -91]
Test Case: 858 | Input/Output: [(-20 46 -59 17) -59]
Test Case: 859 | Input/Output: [(-64 -73 82 -12) -73]
Test Case: 860 | Input/Output: [(-38 -17 -11 -62) -62]
Test Case: 861 | Input/Output: [(22 59 -83 31) -83]
Test Case: 862 | Input/Output: [(87 -68 32 -82) -82]
Test Case: 863 | Input/Output: [(61 66 74 -12) -12]
Test Case: 864 | Input/Output: [(-46 71 65 76) -46]
Test Case: 865 | Input/Output: [(-65 -66 3 74) -66]
Test Case: 866 | Input/Output: [(-90 99 50 -19) -90]
Test Case: 867 | Input/Output: [(38 7 -42 16) -42]
Test Case: 868 | Input/Output: [(-17 -9 -37 -44) -44]
Test Case: 869 | Input/Output: [(89 27 67 12) 12]
Test Case: 870 | Input/Output: [(-10 98 -56 47) -56]
Test Case: 871 | Input/Output: [(23 37 -68 -21) -68]
Test Case: 872 | Input/Output: [(-17 24 21 -5) -17]
Test Case: 873 | Input/Output: [(81 87 60 -5) -5]
Test Case: 874 | Input/Output: [(-29 32 38 -40) -40]
Test Case: 875 | Input/Output: [(-11 -26 -14 20) -26]
Test Case: 876 | Input/Output: [(87 89 64 57) 57]
Test Case: 877 | Input/Output: [(11 63 -85 -79) -85]
Test Case: 878 | Input/Output: [(-33 -19 62 15) -33]
Test Case: 879 | Input/Output: [(-24 81 -87 11) -87]
Test Case: 880 | Input/Output: [(9 31 72 -18) -18]
Test Case: 881 | Input/Output: [(23 97 41 -32) -32]
Test Case: 882 | Input/Output: [(14 -24 64 -51) -51]
Test Case: 883 | Input/Output: [(54 23 93 20) 20]
Test Case: 884 | Input/Output: [(12 -33 -2 -87) -87]
Test Case: 885 | Input/Output: [(77 60 40 24) 24]
Test Case: 886 | Input/Output: [(9 -95 62 -66) -95]
Test Case: 887 | Input/Output: [(29 46 98 97) 29]
Test Case: 888 | Input/Output: [(-53 -75 -56 -65) -75]
Test Case: 889 | Input/Output: [(-44 -59 -69 -31) -69]
Test Case: 890 | Input/Output: [(-14 3 19 -40) -40]
Test Case: 891 | Input/Output: [(-24 -86 17 44) -86]
Test Case: 892 | Input/Output: [(-28 100 63 -8) -28]
Test Case: 893 | Input/Output: [(87 22 23 1) 1]
Test Case: 894 | Input/Output: [(-67 -36 42 10) -67]
Test Case: 895 | Input/Output: [(14 50 -94 -68) -94]
Test Case: 896 | Input/Output: [(-72 -4 67 -97) -97]
Test Case: 897 | Input/Output: [(46 -29 -44 -84) -84]
Test Case: 898 | Input/Output: [(92 72 -46 85) -46]
Test Case: 899 | Input/Output: [(91 -35 -72 -81) -81]
Test Case: 900 | Input/Output: [(-12 -36 -62 -76) -76]
Test Case: 901 | Input/Output: [(-88 51 -12 75) -88]
Test Case: 902 | Input/Output: [(39 -42 -25 -78) -78]
Test Case: 903 | Input/Output: [(29 -54 -88 -87) -88]
Test Case: 904 | Input/Output: [(-11 38 -34 16) -34]
Test Case: 905 | Input/Output: [(-26 -59 -98 95) -98]
Test Case: 906 | Input/Output: [(-74 -95 -39 40) -95]
Test Case: 907 | Input/Output: [(3 74 -1 -49) -49]
Test Case: 908 | Input/Output: [(96 -69 79 -85) -85]
Test Case: 909 | Input/Output: [(29 35 85 47) 29]
Test Case: 910 | Input/Output: [(-5 -69 -16 -8) -69]
Test Case: 911 | Input/Output: [(64 -29 61 -36) -36]
Test Case: 912 | Input/Output: [(-51 -84 34 -97) -97]
Test Case: 913 | Input/Output: [(-92 -62 40 22) -92]
Test Case: 914 | Input/Output: [(-33 -8 -4 10) -33]
Test Case: 915 | Input/Output: [(-18 -85 95 -97) -97]
Test Case: 916 | Input/Output: [(-58 95 80 5) -58]
Test Case: 917 | Input/Output: [(-85 77 -87 -86) -87]
Test Case: 918 | Input/Output: [(-86 -55 -28 28) -86]
Test Case: 919 | Input/Output: [(18 88 -94 -65) -94]
Test Case: 920 | Input/Output: [(63 -9 78 86) -9]
Test Case: 921 | Input/Output: [(18 14 56 89) 14]
Test Case: 922 | Input/Output: [(99 -70 -8 33) -70]
Test Case: 923 | Input/Output: [(-69 -24 -50 -83) -83]
Test Case: 924 | Input/Output: [(-45 -88 6 -74) -88]
Test Case: 925 | Input/Output: [(-2 -11 -48 88) -48]
Test Case: 926 | Input/Output: [(80 -74 36 -24) -74]
Test Case: 927 | Input/Output: [(94 72 -93 -28) -93]
Test Case: 928 | Input/Output: [(49 58 13 90) 13]
Test Case: 929 | Input/Output: [(-27 81 -88 -81) -88]
Test Case: 930 | Input/Output: [(29 -28 25 54) -28]
Test Case: 931 | Input/Output: [(96 -26 -90 -26) -90]
Test Case: 932 | Input/Output: [(-66 -78 33 -50) -78]
Test Case: 933 | Input/Output: [(-78 80 63 68) -78]
Test Case: 934 | Input/Output: [(10 63 40 -56) -56]
Test Case: 935 | Input/Output: [(-56 2 -49 68) -56]
Test Case: 936 | Input/Output: [(9 70 48 9) 9]
Test Case: 937 | Input/Output: [(-34 -33 -55 -42) -55]
Test Case: 938 | Input/Output: [(74 -87 -99 33) -99]
Test Case: 939 | Input/Output: [(-39 46 15 12) -39]
Test Case: 940 | Input/Output: [(78 -35 29 -13) -35]
Test Case: 941 | Input/Output: [(-95 -45 100 -100) -100]
Test Case: 942 | Input/Output: [(19 43 -40 29) -40]
Test Case: 943 | Input/Output: [(52 2 -19 4) -19]
Test Case: 944 | Input/Output: [(1 -38 84 10) -38]
Test Case: 945 | Input/Output: [(-99 89 53 28) -99]
Test Case: 946 | Input/Output: [(-51 24 65 -49) -51]
Test Case: 947 | Input/Output: [(-12 -45 -17 -98) -98]
Test Case: 948 | Input/Output: [(91 -97 24 89) -97]
Test Case: 949 | Input/Output: [(22 77 -16 -93) -93]
Test Case: 950 | Input/Output: [(-27 -67 64 -31) -67]
Test Case: 951 | Input/Output: [(-92 30 -65 -73) -92]
Test Case: 952 | Input/Output: [(35 -100 -68 -64) -100]
Test Case: 953 | Input/Output: [(49 28 0 48) 0]
Test Case: 954 | Input/Output: [(-39 -96 -20 -38) -96]
Test Case: 955 | Input/Output: [(-59 63 -18 82) -59]
Test Case: 956 | Input/Output: [(-70 -98 22 10) -98]
Test Case: 957 | Input/Output: [(-60 58 58 -54) -60]
Test Case: 958 | Input/Output: [(75 -58 6 -74) -74]
Test Case: 959 | Input/Output: [(-49 77 69 47) -49]
Test Case: 960 | Input/Output: [(29 7 84 69) 7]
Test Case: 961 | Input/Output: [(47 -99 17 -48) -99]
Test Case: 962 | Input/Output: [(-66 -59 -30 65) -66]
Test Case: 963 | Input/Output: [(-63 -46 55 -17) -63]
Test Case: 964 | Input/Output: [(-51 87 -37 74) -51]
Test Case: 965 | Input/Output: [(61 24 -53 9) -53]
Test Case: 966 | Input/Output: [(-45 -93 14 51) -93]
Test Case: 967 | Input/Output: [(87 -54 37 74) -54]
Test Case: 968 | Input/Output: [(-24 21 -62 80) -62]
Test Case: 969 | Input/Output: [(2 76 46 47) 2]
Test Case: 970 | Input/Output: [(-72 43 -42 -61) -72]
Test Case: 971 | Input/Output: [(-62 65 13 12) -62]
Test Case: 972 | Input/Output: [(-86 -4 19 80) -86]
Test Case: 973 | Input/Output: [(87 -69 78 -14) -69]
Test Case: 974 | Input/Output: [(-39 53 46 60) -39]
Test Case: 975 | Input/Output: [(-24 20 84 10) -24]
Test Case: 976 | Input/Output: [(17 71 76 6) 6]
Test Case: 977 | Input/Output: [(33 -59 -90 -96) -96]
Test Case: 978 | Input/Output: [(70 30 68 -27) -27]
Test Case: 979 | Input/Output: [(-73 52 -58 -2) -73]
Test Case: 980 | Input/Output: [(-83 85 92 18) -83]
Test Case: 981 | Input/Output: [(-16 -13 31 -96) -96]
Test Case: 982 | Input/Output: [(-31 49 -20 42) -31]
Test Case: 983 | Input/Output: [(28 -17 70 45) -17]
Test Case: 984 | Input/Output: [(-55 73 -69 -61) -69]
Test Case: 985 | Input/Output: [(-91 100 -30 1) -91]
Test Case: 986 | Input/Output: [(-66 70 23 -25) -66]
Test Case: 987 | Input/Output: [(-76 23 84 81) -76]
Test Case: 988 | Input/Output: [(-40 -30 -88 -61) -88]
Test Case: 989 | Input/Output: [(-14 86 81 -39) -39]
Test Case: 990 | Input/Output: [(87 64 -11 -24) -24]
Test Case: 991 | Input/Output: [(60 60 -34 73) -34]
Test Case: 992 | Input/Output: [(-32 -27 92 -69) -69]
Test Case: 993 | Input/Output: [(72 87 -94 43) -94]
Test Case: 994 | Input/Output: [(60 -71 13 8) -71]
Test Case: 995 | Input/Output: [(28 73 8 -15) -15]
Test Case: 996 | Input/Output: [(-13 16 40 61) -13]
Test Case: 997 | Input/Output: [(-31 88 -12 -61) -61]
Test Case: 998 | Input/Output: [(81 -15 -59 -77) -77]
Test Case: 999 | Input/Output: [(51 21 85 -72) -72]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -32 -28 69 -116 -2 40 -81 54 -88 86 21 48 76 -77 71 -89
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-92 -92 -92 12] -92] [[79 73 79 79] 73] [[-24 1 1 1] -24] [[-88 -88 -88 -53] -88] [[80 -69 -69 -69] -69] [[-15 -18 -15 -15] -18] [[45 58 58 58] 45] [[59 66 66 66] 59] [[-34 41 -34 -34] -34] [[-91 29 29 29] -91] [(16 16 16 16) 16] [(2 2 2 2) 2] [(9 9 9 9) 9] [(14 14 14 14) 14] [(-2 -2 -2 -2) -2] [(22 39 99 57) 22] [(99 14 35 30) 14] [(72 67 71 90) 67] [(45 97 35 78) 35] [(96 41 97 85) 41] [(51 78 73 70) 51] [(99 94 95 81) 81] [(54 16 28 100) 16] [(89 22 1 13) 1] [(40 93 22 15) 15] [(89 28 67 19) 19] [(50 94 30 47) 30] [(89 27 3 92) 3] [(37 57 68 59) 37] [(81 50 29 35) 29] [(74 58 21 42) 21] [(78 30 73 68) 30] [(98 8 68 98) 8] [(46 39 91 70) 39] [(76 38 27 0) 0] [(-8 -66 94 -67) -67] [(-27 -80 -63 91) -80] [(-82 -33 -93 -10) -93] [(-54 -42 -30 -92) -92] [(-67 43 78 -77) -77] [(-82 -33 -34 -91) -91] [(-65 63 -13 0) -65] [(53 -35 31 -71) -71] [(9 -80 -46 73) -80] [(-21 86 37 85) -21] [(-61 56 -3 -90) -90] [(-59 77 -73 71) -73] [(44 -1 -53 36) -53] [(52 -28 -63 -38) -63] [(-5 -23 -6 -41) -41] [(-38 -90 -93 -6) -93] [(78 -25 77 62) -25] [(-45 -68 -74 75) -74] [(-91 26 72 14) -91] [(100 80 -3 -82) -82] [(-94 15 -96 19) -96] [(100 59 63 -67) -67] [(-44 -43 45 -52) -52] [(91 -89 -100 -46) -100] [(98 5 -1 32) -1] [(-75 -8 48 -28) -75] [(-65 30 -5 55) -65] [(-63 40 97 35) -63] [(-5 43 -89 -77) -89] [(21 42 7 -53) -53] [(92 -28 97 80) -28] [(-8 -63 74 7) -63] [(37 58 25 13) 13] [(29 6 -19 -91) -91] [(12 -43 -12 25) -43] [(-29 94 -71 40) -71] [(-28 86 -73 -35) -73] [(28 -46 -66 -51) -66] [(-77 -86 89 -45) -86] [(-44 -90 -59 13) -90] [(46 15 22 45) 15] [(89 -39 28 -60) -60] [(22 -36 -63 94) -63] [(-92 -96 20 -21) -96] [(97 11 59 54) 11] [(-58 40 -12 2) -58] [(-25 23 -64 24) -64] [(31 63 73 11) 11] [(59 44 -28 -64) -64] [(96 98 -67 53) -67] [(69 20 -51 41) -51] [(82 -87 63 6) -87] [(-47 12 37 38) -47] [(-76 -14 -69 -19) -76] [(57 -80 -89 -94) -94] [(-5 87 71 -36) -36] [(-30 65 47 -53) -53] [(18 -37 -34 -70) -70] [(55 18 86 24) 18] [(96 98 -35 61) -35])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 79                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 99                 
Correct output: 14                  | Program output: 35                 
Correct output: 67                  | Program output: 71                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 97                 
Correct output: 51                  | Program output: 73                 
Correct output: 81                  | Program output: 95                 
Correct output: 16                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 22                 
Correct output: 19                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 73                 
Correct output: 8                   | Program output: 68                 
Correct output: 39                  | Program output: 91                 
Correct output: 0                   | Program output: 27                 
Correct output: -67                 | Program output: 94                 
Correct output: -80                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -30                
Correct output: -77                 | Program output: 78                 
Correct output: -91                 | Program output: -34                
Correct output: -65                 | Program output: -13                
Correct output: -71                 | Program output: 31                 
Correct output: -80                 | Program output: -46                
Correct output: -21                 | Program output: 37                 
Correct output: -90                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -6                 
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: 77                 
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: 72                 
Correct output: -82                 | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 63                 
Correct output: -52                 | Program output: 45                 
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: 48                 
Correct output: -65                 | Program output: -5                 
Correct output: -63                 | Program output: 97                 
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: 7                  
Correct output: -28                 | Program output: 97                 
Correct output: -63                 | Program output: 74                 
Correct output: 13                  | Program output: 25                 
Correct output: -91                 | Program output: -19                
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: 89                 
Correct output: -90                 | Program output: -59                
Correct output: 15                  | Program output: 22                 
Correct output: -60                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: 20                 
Correct output: 11                  | Program output: 59                 
Correct output: -58                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 73                 
Correct output: -64                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: 63                 
Correct output: -47                 | Program output: 37                 
Correct output: -76                 | Program output: -69                
Correct output: -94                 | Program output: -89                
Correct output: -36                 | Program output: 71                 
Correct output: -53                 | Program output: 47                 
Correct output: -70                 | Program output: -34                
Correct output: 18                  | Program output: 86                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_integer_355} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_9} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_yank exec_yankdup in2 integer_gt exec_shove (boolean_yankdup integer_pop boolean_xor exec_if (exec_s (exec_s (boolean_xor in3 integer_dup_times print_integer boolean_dup_times boolean_flush tag_integer_355) (integer_add exec_shove (integer_flush integer_dup_items boolean_dup_times integer_yank exec_when (boolean_rot integer_shove exec_s (print_boolean integer_lte boolean_yankdup boolean_not exec_while (boolean_invert_first_then_and exec_while (tag_boolean_9 boolean_or integer_gt) boolean_and exec_do*while (boolean_shove exec_s_when_autoconstructing (exec_eq boolean_frominteger integer_dec boolean_dup_items exec_flush) (exec_when (boolean_xor boolean_xor exec_when (integer_swap print_exec (boolean_shove exec_dup_times (exec_do*times (exec_noop print_boolean integer_dup_items integer_add in2 in4 integer_mod boolean_not)))))) ()))) () ()))) ()) () ()) ()))
Lexicase best errors: [0 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 90
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_integer_355} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_9} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_yank exec_yankdup in2 integer_gt exec_shove (boolean_yankdup integer_pop boolean_xor exec_if (exec_s (exec_s (boolean_xor in3 integer_dup_times print_integer boolean_dup_times boolean_flush tag_integer_355) (integer_add exec_shove (integer_flush integer_dup_items boolean_dup_times integer_yank exec_when (boolean_rot integer_shove exec_s (print_boolean integer_lte boolean_yankdup boolean_not exec_while (boolean_invert_first_then_and exec_while (tag_boolean_9 boolean_or integer_gt) boolean_and exec_do*while (boolean_shove exec_s_when_autoconstructing (exec_eq boolean_frominteger integer_dec boolean_dup_items exec_flush) (exec_when (boolean_xor boolean_xor exec_when (integer_swap print_exec (boolean_shove exec_dup_times (exec_do*times (exec_noop print_boolean integer_dup_items integer_add in2 in4 integer_mod boolean_not)))))) ()))) () ()))) ()) () ()) ()))
Zero cases best errors: [0 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 90
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 5 16 4 2 2 5 3 12)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 3 5 16 4 2 2 5 3 12)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction tagged_977} {:close 0, :instruction integer_mult})
Best program: (boolean_dup_times integer_empty integer_lte exec_s_when_autoconstructing (boolean_not exec_s_when_autoconstructing (in3 exec_while (print_integer) boolean_eq boolean_invert_second_then_and exec_rot (print_integer) (exec_while (integer_mult boolean_yankdup exec_shove () exec_y (exec_pop (boolean_dup_times integer_fromboolean tagged_977)) integer_mult)) ()) () ()) () ())
Errors: [0 1 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 38
Percent parens: 0.395
--- Population Statistics ---
Average total errors in population: 9.945
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.995 0.984 0.996 0.998 0.998 0.995 0.997 0.988)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.244
Average program size in population (points): 69.242
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 490950
--- Timings ---
Current time: 1559593955053 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.9 seconds, 31.8%
Fitness Testing:      1.7 seconds, 63.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 79                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 99                 
Correct output: 14                  | Program output: 35                 
Correct output: 67                  | Program output: 71                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 97                 
Correct output: 51                  | Program output: 73                 
Correct output: 81                  | Program output: 95                 
Correct output: 16                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 22                 
Correct output: 19                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 73                 
Correct output: 8                   | Program output: 68                 
Correct output: 39                  | Program output: 91                 
Correct output: 0                   | Program output: 27                 
Correct output: -67                 | Program output: 94                 
Correct output: -80                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -30                
Correct output: -77                 | Program output: 78                 
Correct output: -91                 | Program output: -34                
Correct output: -65                 | Program output: -13                
Correct output: -71                 | Program output: 31                 
Correct output: -80                 | Program output: -46                
Correct output: -21                 | Program output: 37                 
Correct output: -90                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -6                 
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: 77                 
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: 72                 
Correct output: -82                 | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 63                 
Correct output: -52                 | Program output: 45                 
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: 48                 
Correct output: -65                 | Program output: -5                 
Correct output: -63                 | Program output: 97                 
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: 7                  
Correct output: -28                 | Program output: 97                 
Correct output: -63                 | Program output: 74                 
Correct output: 13                  | Program output: 25                 
Correct output: -91                 | Program output: -19                
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: 89                 
Correct output: -90                 | Program output: -59                
Correct output: 15                  | Program output: 22                 
Correct output: -60                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: 20                 
Correct output: 11                  | Program output: 59                 
Correct output: -58                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 73                 
Correct output: -64                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: 63                 
Correct output: -47                 | Program output: 37                 
Correct output: -76                 | Program output: -69                
Correct output: -94                 | Program output: -89                
Correct output: -36                 | Program output: 71                 
Correct output: -53                 | Program output: 47                 
Correct output: -70                 | Program output: -34                
Correct output: 18                  | Program output: 86                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction tagged_977} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_dup_times integer_empty integer_lte exec_s_when_autoconstructing (boolean_not exec_s_when_autoconstructing (in3 exec_while (boolean_rot) print_integer) (boolean_eq boolean_invert_second_then_and exec_rot (print_integer) (exec_while (exec_shove () exec_y (exec_flush exec_pop (print_integer) boolean_dup_times integer_flush) integer_fromboolean tagged_977)) (integer_mult)) ()) () ())
Lexicase best errors: [1 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction tagged_977} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_dup_times integer_empty integer_lte exec_s_when_autoconstructing (boolean_not exec_s_when_autoconstructing (in3 exec_while (boolean_rot) print_integer) (boolean_eq boolean_invert_second_then_and exec_rot (print_integer) (exec_while (exec_shove () exec_y (exec_flush exec_pop (print_integer) boolean_dup_times integer_flush) integer_fromboolean tagged_977)) (integer_mult)) ()) () ())
Zero cases best errors: [1 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (71 148 108 289 287 288 288 288 289 108)
Population mean number of elite cases: 2.16
Count of perfect (error zero) individuals by case: (71 148 108 289 287 288 288 288 289 108)
Population mean number of perfect (error zero) cases: 2.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_integer_355} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_9} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not})
Best program: (integer_yank exec_yankdup in2 integer_gt exec_shove (integer_pop boolean_xor exec_if (exec_s (exec_s (boolean_xor in3 integer_dup_times exec_empty print_integer boolean_dup_times boolean_flush tag_integer_355) (integer_add exec_shove (integer_pop integer_flush integer_dup_items boolean_dup_times integer_yank exec_when (boolean_rot integer_shove exec_s (print_boolean boolean_stackdepth) (boolean_yankdup boolean_not exec_while (boolean_invert_first_then_and exec_while (tag_boolean_9 boolean_or integer_gt) boolean_and boolean_shove exec_s_when_autoconstructing (exec_eq boolean_dup_items exec_flush) (exec_when (boolean_xor boolean_xor exec_when (in4) integer_swap boolean_shove exec_dup_times (exec_do*times (exec_noop print_boolean integer_dup_items in2 in4 integer_mod integer_lte boolean_not)))) ())) ()))) ()) () ()) ()))
Errors: [1 1 1 0 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 62
Size: 86
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 7.836
Median total errors in population: 9
Error averages by case: (0.929 0.852 0.892 0.711 0.713 0.712 0.712 0.712 0.711 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.922
Average program size in population (points): 75.973
Average percent parens in population: 0.263
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 834013
--- Timings ---
Current time: 1559593956920 milliseconds
Total Time:           4.4 seconds
Initialization:       0.1 seconds,  2.6%
Reproduction:         1.8 seconds, 41.6%
Fitness Testing:      2.1 seconds, 47.7%
Report:               0.4 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 79                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: 80                 
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 45                 
Correct output: 59                  | Program output: 59                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 99                 
Correct output: 67                  | Program output: 72                 
Correct output: 35                  | Program output: 45                 
Correct output: 41                  | Program output: 96                 
Correct output: 51                  | Program output: 51                 
Correct output: 81                  | Program output: 99                 
Correct output: 16                  | Program output: 54                 
Correct output: 1                   | Program output: 89                 
Correct output: 15                  | Program output: 40                 
Correct output: 19                  | Program output: 89                 
Correct output: 30                  | Program output: 50                 
Correct output: 3                   | Program output: 89                 
Correct output: 37                  | Program output: 37                 
Correct output: 29                  | Program output: 81                 
Correct output: 21                  | Program output: 74                 
Correct output: 30                  | Program output: 78                 
Correct output: 8                   | Program output: 98                 
Correct output: 39                  | Program output: 46                 
Correct output: 0                   | Program output: 76                 
Correct output: -67                 | Program output: -8                 
Correct output: -80                 | Program output: -27                
Correct output: -93                 | Program output: -82                
Correct output: -92                 | Program output: -54                
Correct output: -77                 | Program output: -67                
Correct output: -91                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: 53                 
Correct output: -80                 | Program output: 9                  
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: -59                
Correct output: -53                 | Program output: 44                 
Correct output: -63                 | Program output: 52                 
Correct output: -41                 | Program output: -5                 
Correct output: -93                 | Program output: -38                
Correct output: -25                 | Program output: 78                 
Correct output: -74                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: 100                
Correct output: -96                 | Program output: -94                
Correct output: -67                 | Program output: 100                
Correct output: -52                 | Program output: -44                
Correct output: -100                | Program output: 91                 
Correct output: -1                  | Program output: 98                 
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -5                 
Correct output: -53                 | Program output: 21                 
Correct output: -28                 | Program output: 92                 
Correct output: -63                 | Program output: -8                 
Correct output: 13                  | Program output: 37                 
Correct output: -91                 | Program output: 29                 
Correct output: -43                 | Program output: 12                 
Correct output: -71                 | Program output: -29                
Correct output: -73                 | Program output: -28                
Correct output: -66                 | Program output: 28                 
Correct output: -86                 | Program output: -77                
Correct output: -90                 | Program output: -44                
Correct output: 15                  | Program output: 46                 
Correct output: -60                 | Program output: 89                 
Correct output: -63                 | Program output: 22                 
Correct output: -96                 | Program output: -92                
Correct output: 11                  | Program output: 97                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -25                
Correct output: 11                  | Program output: 31                 
Correct output: -64                 | Program output: 59                 
Correct output: -67                 | Program output: 96                 
Correct output: -51                 | Program output: 69                 
Correct output: -87                 | Program output: 82                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 57                 
Correct output: -36                 | Program output: -5                 
Correct output: -53                 | Program output: -30                
Correct output: -70                 | Program output: 18                 
Correct output: 18                  | Program output: 55                 
Correct output: -35                 | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt})
Lexicase best program: (in1 exec_y_when_autoconstructing () integer_gte print_integer in1 exec_empty exec_dup (boolean_rot exec_yank) exec_pop (integer_yankdup exec_if (integer_inc boolean_invert_first_then_and integer_gte boolean_yankdup exec_do*count (exec_while (print_boolean integer_inc print_boolean print_integer integer_mod boolean_frominteger exec_do*times (in3 integer_lt boolean_eq)) integer_mod) exec_eq) (integer_add exec_flush integer_add) exec_noop exec_dup (boolean_frominteger boolean_eq integer_lt)))
Lexicase best errors: [0 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt})
Zero cases best program: (in1 exec_y_when_autoconstructing () integer_gte print_integer in1 exec_empty exec_dup (boolean_rot exec_yank) exec_pop (integer_yankdup exec_if (integer_inc boolean_invert_first_then_and integer_gte boolean_yankdup exec_do*count (exec_while (print_boolean integer_inc print_boolean print_integer integer_mod boolean_frominteger exec_do*times (in3 integer_lt boolean_eq)) integer_mod) exec_eq) (integer_add exec_flush integer_add) exec_noop exec_dup (boolean_frominteger boolean_eq integer_lt)))
Zero cases best errors: [0 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (570 59 121 121 382 382 121 58 56 177)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (570 59 121 121 382 382 121 58 56 177)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_819} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt})
Best program: (in1 integer_gte print_integer in1 exec_empty exec_dup (exec_yank) exec_empty integer_stackdepth exec_pop (integer_yankdup boolean_shove exec_if (exec_shove () integer_sub) (integer_inc exec_if () (boolean_invert_first_then_and boolean_yankdup exec_do*count (boolean_xor exec_while (boolean_stackdepth) print_integer boolean_frominteger integer_shove) tagged_819 exec_do*times (integer_lt boolean_eq)) integer_mod) exec_eq) exec_flush exec_k_when_autoconstructing () (integer_add) exec_dup (boolean_frominteger exec_do*times (boolean_eq integer_lt)))
Errors: [0 1 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.953
Median total errors in population: 7
Error averages by case: (0.43 0.941 0.879 0.879 0.618 0.618 0.879 0.942 0.944 0.823)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.57
Average program size in population (points): 70.134
Average percent parens in population: 0.268
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1149262
--- Timings ---
Current time: 1559593958933 milliseconds
Total Time:           6.7 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         3.2 seconds, 48.6%
Fitness Testing:      2.5 seconds, 37.3%
Report:               0.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: 41                 
Correct output: -91                 | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 97                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 78                 
Correct output: 81                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 22                 
Correct output: 15                  | Program output: 93                 
Correct output: 19                  | Program output: 28                 
Correct output: 30                  | Program output: 94                 
Correct output: 3                   | Program output: 27                 
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 50                 
Correct output: 21                  | Program output: 58                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 38                 
Correct output: -67                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -33                
Correct output: -92                 | Program output: -42                
Correct output: -77                 | Program output: 43                 
Correct output: -91                 | Program output: -33                
Correct output: -65                 | Program output: 63                 
Correct output: -71                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: 86                 
Correct output: -90                 | Program output: 56                 
Correct output: -73                 | Program output: 77                 
Correct output: -53                 | Program output: -1                 
Correct output: -63                 | Program output: -28                
Correct output: -41                 | Program output: -23                
Correct output: -93                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -91                 | Program output: 26                 
Correct output: -82                 | Program output: 80                 
Correct output: -96                 | Program output: 15                 
Correct output: -67                 | Program output: 59                 
Correct output: -52                 | Program output: -43                
Correct output: -100                | Program output: -89                
Correct output: -1                  | Program output: 5                  
Correct output: -75                 | Program output: -8                 
Correct output: -65                 | Program output: 30                 
Correct output: -63                 | Program output: 40                 
Correct output: -89                 | Program output: 43                 
Correct output: -53                 | Program output: 42                 
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 58                 
Correct output: -91                 | Program output: 6                  
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 94                 
Correct output: -73                 | Program output: 86                 
Correct output: -66                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -39                
Correct output: -63                 | Program output: -36                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: 40                 
Correct output: -64                 | Program output: 23                 
Correct output: 11                  | Program output: 63                 
Correct output: -64                 | Program output: 44                 
Correct output: -67                 | Program output: 98                 
Correct output: -51                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 12                 
Correct output: -76                 | Program output: -14                
Correct output: -94                 | Program output: -80                
Correct output: -36                 | Program output: 87                 
Correct output: -53                 | Program output: 65                 
Correct output: -70                 | Program output: -37                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 98                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (in1 integer_gte integer_dup print_integer in1 exec_empty exec_dup (integer_stackdepth boolean_not exec_pop (boolean_xor integer_yankdup exec_if (integer_inc integer_gte boolean_yankdup exec_y_when_autoconstructing (exec_do*count (boolean_xor print_newline integer_inc print_integer boolean_frominteger exec_do*times (integer_lt boolean_eq)) integer_mod) exec_eq) (exec_k_when_autoconstructing () (integer_add) exec_dup (integer_dup boolean_frominteger boolean_eq integer_lt boolean_invert_first_then_and)))))
Lexicase best errors: [1 1 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (in1 integer_gte integer_dup print_integer in1 exec_empty exec_dup (integer_stackdepth boolean_not exec_pop (boolean_xor integer_yankdup exec_if (integer_inc integer_gte boolean_yankdup exec_y_when_autoconstructing (exec_do*count (boolean_xor print_newline integer_inc print_integer boolean_frominteger exec_do*times (integer_lt boolean_eq)) integer_mod) exec_eq) (exec_k_when_autoconstructing () (integer_add) exec_dup (integer_dup boolean_frominteger boolean_eq integer_lt boolean_invert_first_then_and)))))
Zero cases best errors: [1 1 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 66 296 65 126 296 118 118 119 296)
Population mean number of elite cases: 1.63
Count of perfect (error zero) individuals by case: (126 66 296 65 126 296 118 118 119 296)
Population mean number of perfect (error zero) cases: 1.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Best program: (boolean_invert_second_then_and integer_min exec_do*range () integer_dup_items boolean_rot boolean_flush integer_inc tag_boolean_132 boolean_dup_times integer_gte integer_add in2 print_boolean boolean_xor integer_shove integer_dup_times integer_empty integer_yankdup boolean_not integer_dup_times print_integer integer_pop in1 boolean_dup_items boolean_empty integer_yankdup boolean_shove exec_noop integer_mult exec_pop (exec_k (integer_stackdepth boolean_flush) (boolean_or integer_add boolean_empty boolean_flush) integer_inc boolean_stackdepth integer_div))
Errors: [1 1 1 1 1 1 0 0 0 1]
Total: 7
Mean: 0.7
Genome size: 40
Size: 45
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 8.374
Median total errors in population: 8
Error averages by case: (0.874 0.934 0.704 0.935 0.874 0.704 0.882 0.882 0.881 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.091
Average program size in population (points): 69.611
Average percent parens in population: 0.258
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1485075
--- Timings ---
Current time: 1559593960738 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.4 seconds, 52.2%
Fitness Testing:      2.8 seconds, 33.7%
Report:               1.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 73                 
Correct output: 81                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 22                 
Correct output: 19                  | Program output: 28                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 27                 
Correct output: -67                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -42                
Correct output: -77                 | Program output: 43                 
Correct output: -91                 | Program output: -34                
Correct output: -65                 | Program output: -13                
Correct output: -71                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: 37                 
Correct output: -90                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: 26                 
Correct output: -82                 | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 59                 
Correct output: -52                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -8                 
Correct output: -65                 | Program output: -5                 
Correct output: -63                 | Program output: 40                 
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: 7                  
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 25                 
Correct output: -91                 | Program output: -19                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 63                 
Correct output: -64                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 12                 
Correct output: -76                 | Program output: -69                
Correct output: -94                 | Program output: -89                
Correct output: -36                 | Program output: 71                 
Correct output: -53                 | Program output: 47                 
Correct output: -70                 | Program output: -37                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_invert_second_then_and integer_min exec_do*range () print_integer integer_dup_items boolean_flush integer_inc tag_boolean_132 boolean_dup_times exec_y_when_autoconstructing (integer_dup integer_add in2 boolean_xor integer_shove integer_dup_times in3 integer_min integer_yankdup boolean_not integer_dup_times print_integer integer_pop in1 boolean_empty integer_yankdup boolean_shove exec_noop integer_mult exec_pop (exec_k (integer_mult integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_add boolean_empty boolean_flush) integer_inc integer_min boolean_and boolean_stackdepth integer_div))
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.120
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_invert_second_then_and integer_min exec_do*range () print_integer integer_dup_items boolean_flush integer_inc tag_boolean_132 boolean_dup_times exec_y_when_autoconstructing (integer_dup integer_add in2 boolean_xor integer_shove integer_dup_times in3 integer_min integer_yankdup boolean_not integer_dup_times print_integer integer_pop in1 boolean_empty integer_yankdup boolean_shove exec_noop integer_mult exec_pop (exec_k (integer_mult integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_add boolean_empty boolean_flush) integer_inc integer_min boolean_and boolean_stackdepth integer_div))
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 173 120 173 173 144 175 211 119 647)
Population mean number of elite cases: 2.14
Count of perfect (error zero) individuals by case: (204 173 120 173 173 144 175 211 119 647)
Population mean number of perfect (error zero) cases: 2.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Best program: (boolean_invert_second_then_and integer_min exec_do*range () print_integer integer_dup_items boolean_flush integer_inc tag_boolean_132 boolean_dup_times exec_y_when_autoconstructing (integer_dup integer_add in2 boolean_xor integer_shove integer_dup_times in3 integer_min integer_yankdup boolean_not integer_dup_times print_integer integer_pop in1 boolean_empty integer_yankdup boolean_shove exec_noop integer_mult exec_pop (exec_k (integer_mult integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_add boolean_empty boolean_flush) integer_inc integer_min boolean_and boolean_stackdepth integer_div))
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 7.861
Median total errors in population: 8
Error averages by case: (0.796 0.827 0.88 0.827 0.827 0.856 0.825 0.789 0.881 0.353)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.655
Average program size in population (points): 75.239
Average percent parens in population: 0.260
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1823080
--- Timings ---
Current time: 1559593963122 milliseconds
Total Time:          10.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         6.1 seconds, 56.6%
Fitness Testing:      3.2 seconds, 29.5%
Report:               1.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 79                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: 80                 
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 45                 
Correct output: 59                  | Program output: 59                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 99                 
Correct output: 67                  | Program output: 72                 
Correct output: 35                  | Program output: 45                 
Correct output: 41                  | Program output: 96                 
Correct output: 51                  | Program output: 51                 
Correct output: 81                  | Program output: 99                 
Correct output: 16                  | Program output: 54                 
Correct output: 1                   | Program output: 89                 
Correct output: 15                  | Program output: 40                 
Correct output: 19                  | Program output: 89                 
Correct output: 30                  | Program output: 50                 
Correct output: 3                   | Program output: 89                 
Correct output: 37                  | Program output: 37                 
Correct output: 29                  | Program output: 81                 
Correct output: 21                  | Program output: 74                 
Correct output: 30                  | Program output: 78                 
Correct output: 8                   | Program output: 98                 
Correct output: 39                  | Program output: 46                 
Correct output: 0                   | Program output: 76                 
Correct output: -67                 | Program output: -8                 
Correct output: -80                 | Program output: -27                
Correct output: -93                 | Program output: -82                
Correct output: -92                 | Program output: -54                
Correct output: -77                 | Program output: -67                
Correct output: -91                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: 53                 
Correct output: -80                 | Program output: 9                  
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: -59                
Correct output: -53                 | Program output: 44                 
Correct output: -63                 | Program output: 52                 
Correct output: -41                 | Program output: -5                 
Correct output: -93                 | Program output: -38                
Correct output: -25                 | Program output: 78                 
Correct output: -74                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: 100                
Correct output: -96                 | Program output: -94                
Correct output: -67                 | Program output: 100                
Correct output: -52                 | Program output: -44                
Correct output: -100                | Program output: 91                 
Correct output: -1                  | Program output: 98                 
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -5                 
Correct output: -53                 | Program output: 21                 
Correct output: -28                 | Program output: 92                 
Correct output: -63                 | Program output: -8                 
Correct output: 13                  | Program output: 37                 
Correct output: -91                 | Program output: 29                 
Correct output: -43                 | Program output: 12                 
Correct output: -71                 | Program output: -29                
Correct output: -73                 | Program output: -28                
Correct output: -66                 | Program output: 28                 
Correct output: -86                 | Program output: -77                
Correct output: -90                 | Program output: -44                
Correct output: 15                  | Program output: 46                 
Correct output: -60                 | Program output: 89                 
Correct output: -63                 | Program output: 22                 
Correct output: -96                 | Program output: -92                
Correct output: 11                  | Program output: 97                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -25                
Correct output: 11                  | Program output: 31                 
Correct output: -64                 | Program output: 59                 
Correct output: -67                 | Program output: 96                 
Correct output: -51                 | Program output: 69                 
Correct output: -87                 | Program output: 82                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 57                 
Correct output: -36                 | Program output: -5                 
Correct output: -53                 | Program output: -30                
Correct output: -70                 | Program output: 18                 
Correct output: 18                  | Program output: 55                 
Correct output: -35                 | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_994} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt})
Lexicase best program: (in1 print_integer in1 exec_empty exec_dup (boolean_or exec_yank) boolean_invert_first_then_and exec_s (integer_stackdepth exec_pop (exec_if (boolean_invert_first_then_and integer_sub) (boolean_rot integer_inc integer_gte exec_swap (boolean_yankdup exec_yankdup exec_do*count (integer_shove) integer_inc tagged_994 print_integer boolean_frominteger integer_shove) (exec_do*times (integer_lt boolean_eq)) boolean_and) integer_mod) exec_eq) (exec_flush exec_k_when_autoconstructing () (integer_add) in4) (exec_dup (boolean_frominteger boolean_eq integer_lt)))
Lexicase best errors: [0 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_994} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt})
Zero cases best program: (in1 print_integer in1 exec_empty exec_dup (boolean_or exec_yank) boolean_invert_first_then_and exec_s (integer_stackdepth exec_pop (exec_if (boolean_invert_first_then_and integer_sub) (boolean_rot integer_inc integer_gte exec_swap (boolean_yankdup exec_yankdup exec_do*count (integer_shove) integer_inc tagged_994 print_integer boolean_frominteger integer_shove) (exec_do*times (integer_lt boolean_eq)) boolean_and) integer_mod) exec_eq) (exec_flush exec_k_when_autoconstructing () (integer_add) in4) (exec_dup (boolean_frominteger boolean_eq integer_lt)))
Zero cases best errors: [0 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 388 162 67 162 61 667 389 666 61)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (162 388 162 67 162 61 667 389 666 61)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger})
Best program: (exec_pop () integer_sub in1 integer_gte print_integer in1 integer_mod exec_pop (print_integer integer_yankdup integer_sub) integer_inc exec_do*count (exec_while (integer_swap) integer_gte) boolean_frominteger integer_shove integer_shove exec_do*times (integer_lt exec_y_when_autoconstructing (boolean_eq)) exec_eq exec_flush in3 exec_do*range (exec_k_when_autoconstructing () (exec_yank) boolean_stackdepth boolean_frominteger))
Errors: [0 1 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 41
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.215
Median total errors in population: 6
Error averages by case: (0.838 0.612 0.838 0.933 0.838 0.939 0.333 0.611 0.334 0.939)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.947
Average program size in population (points): 52.037
Average percent parens in population: 0.170
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2221459
--- Timings ---
Current time: 1559593965069 milliseconds
Total Time:          12.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.3 seconds, 57.4%
Fitness Testing:      3.5 seconds, 28.0%
Report:               1.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 79                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 57                 
Correct output: 14                  | Program output: 30                 
Correct output: 67                  | Program output: 71                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 85                 
Correct output: 51                  | Program output: 70                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 59                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 68                 
Correct output: 8                   | Program output: 68                 
Correct output: 39                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -46                
Correct output: -21                 | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -28                
Correct output: -65                 | Program output: -5                 
Correct output: -63                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 80                 
Correct output: -63                 | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -45                
Correct output: -90                 | Program output: -59                
Correct output: 15                  | Program output: 22                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -21                
Correct output: 11                  | Program output: 54                 
Correct output: -58                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: 6                  
Correct output: -47                 | Program output: 37                 
Correct output: -76                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 24                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_invert_second_then_and integer_min exec_do*range () integer_dup_items boolean_flush integer_inc boolean_dup_times exec_y_when_autoconstructing (integer_dup in4) integer_add integer_yank boolean_xor integer_shove integer_dup_times in3 integer_min integer_yankdup boolean_not integer_dup_times print_integer integer_pop in1 integer_yankdup boolean_shove exec_noop integer_mult exec_pop (exec_k (integer_mult integer_stackdepth boolean_flush) (boolean_or boolean_empty integer_inc integer_min boolean_and exec_shove (boolean_stackdepth integer_div))))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_invert_second_then_and integer_min exec_do*range () integer_dup_items boolean_flush integer_inc boolean_dup_times exec_y_when_autoconstructing (integer_dup in4) integer_add integer_yank boolean_xor integer_shove integer_dup_times in3 integer_min integer_yankdup boolean_not integer_dup_times print_integer integer_pop in1 integer_yankdup boolean_shove exec_noop integer_mult exec_pop (exec_k (integer_mult integer_stackdepth boolean_flush) (boolean_or boolean_empty integer_inc integer_min boolean_and exec_shove (boolean_stackdepth integer_div))))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 264 126 122 120 268 262 263 114 268)
Population mean number of elite cases: 2.07
Count of perfect (error zero) individuals by case: (263 264 126 122 120 268 262 263 114 268)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Best program: (boolean_invert_second_then_and integer_min integer_swap integer_pop exec_do*range () print_integer integer_dup_items boolean_flush integer_inc tag_boolean_132 boolean_dup_times exec_y_when_autoconstructing (integer_dup in4 integer_add integer_yankdup boolean_xor integer_shove integer_dup_times in3 integer_min integer_swap) exec_rot (boolean_dup boolean_not integer_dup_times print_integer integer_pop in1 boolean_empty integer_yankdup exec_noop integer_mult exec_pop (exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_dup boolean_or integer_add boolean_empty exec_s_when_autoconstructing (boolean_flush) (integer_inc integer_min print_integer boolean_and boolean_stackdepth integer_div) ())) () ())
Errors: [0 0 0 0 1 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 62
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.93
Median total errors in population: 9
Error averages by case: (0.737 0.736 0.874 0.878 0.88 0.732 0.738 0.737 0.886 0.732)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.594
Average program size in population (points): 54.456
Average percent parens in population: 0.226
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2603430
--- Timings ---
Current time: 1559593966873 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.4 seconds, 57.9%
Fitness Testing:      3.9 seconds, 26.5%
Report:               2.1 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 79                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 57                 
Correct output: 14                  | Program output: 30                 
Correct output: 67                  | Program output: 71                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 85                 
Correct output: 51                  | Program output: 70                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 59                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 68                 
Correct output: 8                   | Program output: 68                 
Correct output: 39                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -46                
Correct output: -21                 | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -28                
Correct output: -65                 | Program output: -5                 
Correct output: -63                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 80                 
Correct output: -63                 | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -45                
Correct output: -90                 | Program output: -59                
Correct output: 15                  | Program output: 22                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -21                
Correct output: 11                  | Program output: 54                 
Correct output: -58                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: 6                  
Correct output: -47                 | Program output: 37                 
Correct output: -76                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 24                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_709} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_invert_second_then_and integer_min boolean_flush boolean_dup_times exec_do*while (integer_dup tag_integer_709 in4 integer_add boolean_xor integer_shove integer_empty in3 integer_min integer_yankdup boolean_not print_integer boolean_flush exec_do*count (in1 boolean_empty boolean_shove exec_noop exec_noop exec_pop (integer_mod integer_mult exec_dup_items) exec_swap (boolean_or integer_add boolean_flush) (integer_inc exec_shove () boolean_stackdepth boolean_frominteger) boolean_xor)))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_709} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_invert_second_then_and integer_min boolean_flush boolean_dup_times exec_do*while (integer_dup tag_integer_709 in4 integer_add boolean_xor integer_shove integer_empty in3 integer_min integer_yankdup boolean_not print_integer boolean_flush exec_do*count (in1 boolean_empty boolean_shove exec_noop exec_noop exec_pop (integer_mod integer_mult exec_dup_items) exec_swap (boolean_or integer_add boolean_flush) (integer_inc exec_shove () boolean_stackdepth boolean_frominteger) boolean_xor)))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (308 35 310 165 554 501 322 493 160 304)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (308 35 310 165 554 501 322 493 160 304)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Best program: (integer_dec boolean_invert_second_then_and integer_min integer_stackdepth integer_flush exec_do*range () print_integer integer_dup_items integer_inc tag_boolean_132 boolean_dup_times in4 integer_add in2 boolean_xor integer_shove integer_dup_times in3 integer_min integer_mult integer_yankdup boolean_not boolean_pop boolean_invert_second_then_and integer_dup_times print_integer integer_pop in1 boolean_empty boolean_shove exec_noop integer_mult integer_eq exec_pop (exec_k (exec_y_when_autoconstructing (integer_stackdepth boolean_flush) exec_dup_items) (boolean_or integer_add boolean_flush) integer_min exec_while (boolean_and boolean_stackdepth integer_div)))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 47
Size: 54
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 6.848
Median total errors in population: 7
Error averages by case: (0.692 0.965 0.69 0.835 0.446 0.499 0.678 0.507 0.84 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.119
Average program size in population (points): 52.917
Average percent parens in population: 0.162
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3079434
--- Timings ---
Current time: 1559593968688 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.5 seconds, 58.3%
Fitness Testing:      4.3 seconds, 26.1%
Report:               2.4 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 78                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 70                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 13                 
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 47                 
Correct output: 3                   | Program output: 27                 
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 35                 
Correct output: 21                  | Program output: 42                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: 85                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: 71                 
Correct output: -53                 | Program output: -1                 
Correct output: -63                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -91                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 15                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -89                
Correct output: -1                  | Program output: 5                  
Correct output: -75                 | Program output: -28                
Correct output: -65                 | Program output: 30                 
Correct output: -63                 | Program output: 35                 
Correct output: -89                 | Program output: -77                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 40                 
Correct output: -73                 | Program output: -35                
Correct output: -66                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -36                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: 2                  
Correct output: -64                 | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: 53                 
Correct output: -51                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 12                 
Correct output: -76                 | Program output: -19                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_invert_second_then_and integer_min integer_stackdepth integer_flush boolean_eq exec_do*range () exec_noop exec_while (print_integer integer_dup_items integer_inc tag_boolean_132 boolean_dup_times) in4 exec_y_when_autoconstructing (in2 boolean_xor integer_shove integer_dup_times in3 integer_min integer_lt integer_yankdup exec_empty boolean_not boolean_pop integer_lte integer_dup_times print_integer integer_pop in1 exec_empty integer_mult) boolean_empty boolean_shove exec_noop integer_mult integer_eq exec_pop (exec_y_when_autoconstructing (integer_mult integer_stackdepth integer_flush boolean_flush) boolean_or exec_dup_items) boolean_or integer_add boolean_flush integer_min boolean_and boolean_stackdepth integer_div)
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 59
Percent parens: 0.102
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_invert_second_then_and integer_min integer_stackdepth integer_flush boolean_eq exec_do*range () exec_noop exec_while (print_integer integer_dup_items integer_inc tag_boolean_132 boolean_dup_times) in4 exec_y_when_autoconstructing (in2 boolean_xor integer_shove integer_dup_times in3 integer_min integer_lt integer_yankdup exec_empty boolean_not boolean_pop integer_lte integer_dup_times print_integer integer_pop in1 exec_empty integer_mult) boolean_empty boolean_shove exec_noop integer_mult integer_eq exec_pop (exec_y_when_autoconstructing (integer_mult integer_stackdepth integer_flush boolean_flush) boolean_or exec_dup_items) boolean_or integer_add boolean_flush integer_min boolean_and boolean_stackdepth integer_div)
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 59
Percent parens: 0.102
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 313 127 128 327 313 216 342 344 316)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (345 313 127 128 327 313 216 342 344 316)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div})
Best program: (integer_dec boolean_invert_second_then_and integer_min integer_stackdepth integer_flush boolean_eq print_integer integer_dup_items integer_inc tag_boolean_132 boolean_dup_times in4 exec_y_when_autoconstructing (boolean_swap in2 exec_when () exec_eq integer_shove integer_dup_times in3 boolean_dup_items) integer_min integer_yankdup boolean_not boolean_pop boolean_invert_second_then_and integer_dup_times print_integer integer_pop in1 boolean_empty boolean_shove exec_noop integer_mult integer_eq exec_k (integer_mult integer_stackdepth boolean_flush) (exec_dup_items) integer_add boolean_flush integer_inc integer_min boolean_and boolean_stackdepth boolean_pop integer_div)
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 48
Size: 53
Percent parens: 0.094
--- Population Statistics ---
Average total errors in population: 7.229
Median total errors in population: 8
Error averages by case: (0.655 0.687 0.873 0.872 0.673 0.687 0.784 0.658 0.656 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.51
Average program size in population (points): 51.917
Average percent parens in population: 0.161
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3658078
--- Timings ---
Current time: 1559593970593 milliseconds
Total Time:          18.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 58.2%
Fitness Testing:      4.8 seconds, 26.2%
Report:               2.7 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 321
Test mean error for best: 0.32100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 73                 
Correct output: 81                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 22                 
Correct output: 19                  | Program output: 28                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 27                 
Correct output: -67                 | Program output: -8                 
Correct output: -80                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -54                
Correct output: -77                 | Program output: -67                
Correct output: -91                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -6                 
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 59                 
Correct output: -52                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: 7                  
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -8                 
Correct output: 13                  | Program output: 25                 
Correct output: -91                 | Program output: -19                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -77                
Correct output: -90                 | Program output: -59                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -92                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 63                 
Correct output: -64                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -89                
Correct output: -36                 | Program output: -5                 
Correct output: -53                 | Program output: -30                
Correct output: -70                 | Program output: -37                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_while () boolean_invert_second_then_and integer_min exec_do*range () boolean_flush integer_inc in1 tag_boolean_132 boolean_dup_times exec_do*times (in2 boolean_xor integer_shove integer_dup_times in3 integer_min integer_yankdup integer_dup_times exec_y_when_autoconstructing (exec_dup (print_integer boolean_xor integer_pop integer_yankdup exec_shove (boolean_shove exec_dup_items integer_eq exec_k (integer_stackdepth boolean_flush) (exec_dup_items) print_boolean integer_add boolean_and exec_y () exec_dup_items)))))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_while () boolean_invert_second_then_and integer_min exec_do*range () boolean_flush integer_inc in1 tag_boolean_132 boolean_dup_times exec_do*times (in2 boolean_xor integer_shove integer_dup_times in3 integer_min integer_yankdup integer_dup_times exec_y_when_autoconstructing (exec_dup (print_integer boolean_xor integer_pop integer_yankdup exec_shove (boolean_shove exec_dup_items integer_eq exec_k (integer_stackdepth boolean_flush) (exec_dup_items) print_boolean integer_add boolean_and exec_y () exec_dup_items)))))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (258 585 142 407 170 371 234 239 170 285)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (258 585 142 407 170 371 234 239 170 285)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items})
Best program: (integer_min boolean_flush integer_inc in1 tag_boolean_132 boolean_dup_times exec_y_when_autoconstructing (exec_do*times (integer_add in2 boolean_xor integer_shove integer_dup_times in3 integer_min integer_yankdup integer_dup_times print_integer boolean_xor integer_pop integer_yankdup print_boolean exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_empty integer_add integer_min boolean_and exec_y () boolean_stackdepth exec_dup_items)))
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 40
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 7.139
Median total errors in population: 7
Error averages by case: (0.742 0.415 0.858 0.593 0.83 0.629 0.766 0.761 0.83 0.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.436
Average program size in population (points): 51.009
Average percent parens in population: 0.167
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4269809
--- Timings ---
Current time: 1559593972774 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.7 seconds, 58.1%
Fitness Testing:      5.3 seconds, 26.2%
Report:               3.0 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 73                 
Correct output: 81                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 22                 
Correct output: 19                  | Program output: 28                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 27                 
Correct output: -67                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -42                
Correct output: -77                 | Program output: 43                 
Correct output: -91                 | Program output: -34                
Correct output: -65                 | Program output: -13                
Correct output: -71                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: 37                 
Correct output: -90                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: 26                 
Correct output: -82                 | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 59                 
Correct output: -52                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -8                 
Correct output: -65                 | Program output: -5                 
Correct output: -63                 | Program output: 40                 
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: 7                  
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 25                 
Correct output: -91                 | Program output: -19                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 63                 
Correct output: -64                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 12                 
Correct output: -76                 | Program output: -69                
Correct output: -94                 | Program output: -89                
Correct output: -36                 | Program output: 71                 
Correct output: -53                 | Program output: 47                 
Correct output: -70                 | Program output: -37                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_459} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_lt boolean_invert_second_then_and integer_min exec_do*range () boolean_flush integer_inc tag_boolean_132 boolean_dup_times exec_y_when_autoconstructing (exec_do*times (tagged_459 integer_add in2 boolean_xor boolean_and integer_shove integer_dup_times in3 integer_min integer_yankdup integer_dup_times exec_dup (print_integer boolean_stackdepth integer_dup_items boolean_xor integer_pop integer_yankdup boolean_shove exec_k (exec_k_when_autoconstructing (exec_empty) (boolean_flush) integer_div exec_dup_items) (boolean_empty boolean_or integer_add integer_min integer_max) boolean_and boolean_rot exec_y () boolean_stackdepth exec_dup_items))))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_459} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_lt boolean_invert_second_then_and integer_min exec_do*range () boolean_flush integer_inc tag_boolean_132 boolean_dup_times exec_y_when_autoconstructing (exec_do*times (tagged_459 integer_add in2 boolean_xor boolean_and integer_shove integer_dup_times in3 integer_min integer_yankdup integer_dup_times exec_dup (print_integer boolean_stackdepth integer_dup_items boolean_xor integer_pop integer_yankdup boolean_shove exec_k (exec_k_when_autoconstructing (exec_empty) (boolean_flush) integer_div exec_dup_items) (boolean_empty boolean_or integer_add integer_min integer_max) boolean_and boolean_rot exec_y () boolean_stackdepth exec_dup_items))))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 571 344 250 262 272 73 177 291 264)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (250 571 344 250 262 272 73 177 291 264)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items})
Best program: (boolean_invert_second_then_and integer_lte integer_min exec_do*range () boolean_and boolean_flush integer_inc tag_boolean_132 boolean_dup_times exec_y_when_autoconstructing (exec_do*times (in2 integer_dup_times in3 integer_min integer_yankdup integer_dup_times exec_dup (print_integer boolean_xor integer_pop boolean_shove exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_add integer_min boolean_and exec_swap (exec_y () boolean_stackdepth exec_dup_items) ()))))
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.246
Median total errors in population: 7
Error averages by case: (0.75 0.429 0.656 0.75 0.738 0.728 0.927 0.823 0.709 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.121
Average program size in population (points): 47.801
Average percent parens in population: 0.181
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4992186
--- Timings ---
Current time: 1559593975034 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.8 seconds, 57.0%
Fitness Testing:      5.9 seconds, 26.4%
Report:               3.6 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 78                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 70                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 13                 
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 47                 
Correct output: 3                   | Program output: 27                 
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 35                 
Correct output: 21                  | Program output: 42                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: 85                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: 71                 
Correct output: -53                 | Program output: -1                 
Correct output: -63                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -91                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 15                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -89                
Correct output: -1                  | Program output: 5                  
Correct output: -75                 | Program output: -28                
Correct output: -65                 | Program output: 30                 
Correct output: -63                 | Program output: 35                 
Correct output: -89                 | Program output: -77                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 40                 
Correct output: -73                 | Program output: -35                
Correct output: -66                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -36                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: 2                  
Correct output: -64                 | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: 53                 
Correct output: -51                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 12                 
Correct output: -76                 | Program output: -19                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Lexicase best program: (integer_dec boolean_invert_second_then_and integer_min integer_stackdepth integer_flush boolean_eq exec_noop print_integer integer_dup_items integer_inc tag_boolean_132 boolean_dup_times integer_inc in4 boolean_swap boolean_dup in2 exec_when () exec_eq integer_dup_times in3 integer_min integer_yankdup boolean_not integer_lte boolean_pop exec_y_when_autoconstructing () integer_dup_times print_integer integer_pop in1 integer_fromboolean boolean_empty boolean_shove integer_mult integer_eq exec_pop (exec_k (exec_y_when_autoconstructing (in4 integer_mult integer_stackdepth exec_dup_items) integer_add boolean_flush) (boolean_yank integer_inc integer_min boolean_stackdepth integer_div)))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 57
Percent parens: 0.123
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div})
Zero cases best program: (integer_dec boolean_invert_second_then_and integer_min integer_stackdepth integer_flush boolean_eq exec_noop print_integer integer_dup_items integer_inc tag_boolean_132 boolean_dup_times integer_inc in4 boolean_swap boolean_dup in2 exec_when () exec_eq integer_dup_times in3 integer_min integer_yankdup boolean_not integer_lte boolean_pop exec_y_when_autoconstructing () integer_dup_times print_integer integer_pop in1 integer_fromboolean boolean_empty boolean_shove integer_mult integer_eq exec_pop (exec_k (exec_y_when_autoconstructing (in4 integer_mult integer_stackdepth exec_dup_items) integer_add boolean_flush) (boolean_yank integer_inc integer_min boolean_stackdepth integer_div)))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 57
Percent parens: 0.123
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 292 100 580 366 159 147 365 232 506)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (219 292 100 580 366 159 147 365 232 506)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_132} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div})
Best program: (exec_y_when_autoconstructing (boolean_invert_second_then_and integer_min integer_stackdepth integer_flush) boolean_eq print_integer integer_dup_items integer_inc boolean_not boolean_frominteger tag_boolean_132 boolean_dup_times integer_mod in4 integer_lt boolean_swap integer_dup in2 exec_when () integer_rot exec_pop (integer_shove in3 boolean_dup_items) integer_min integer_min integer_yankdup boolean_not boolean_pop exec_y_when_autoconstructing () boolean_invert_second_then_and print_integer integer_pop exec_y (integer_yank exec_when () in1 boolean_swap integer_lt exec_noop integer_mult integer_eq) boolean_stackdepth integer_yank exec_pop (integer_lt) boolean_pop exec_k (integer_swap exec_y_when_autoconstructing (print_exec (integer_stackdepth exec_dup_items) boolean_or integer_add integer_dup) integer_div) ())
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 58
Size: 70
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 7.034
Median total errors in population: 7
Error averages by case: (0.781 0.708 0.9 0.42 0.634 0.841 0.853 0.635 0.768 0.494)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.876
Average program size in population (points): 44.521
Average percent parens in population: 0.193
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5765577
--- Timings ---
Current time: 1559593977641 milliseconds
Total Time:          24.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.9 seconds, 56.1%
Fitness Testing:      6.6 seconds, 26.7%
Report:               4.2 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 79                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 45                 
Correct output: 59                  | Program output: 59                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 30                 
Correct output: 67                  | Program output: 72                 
Correct output: 35                  | Program output: 45                 
Correct output: 41                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 54                 
Correct output: 1                   | Program output: 13                 
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 47                 
Correct output: 3                   | Program output: 89                 
Correct output: 37                  | Program output: 37                 
Correct output: 29                  | Program output: 35                 
Correct output: 21                  | Program output: 42                 
Correct output: 30                  | Program output: 68                 
Correct output: 8                   | Program output: 98                 
Correct output: 39                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -27                
Correct output: -93                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: 9                  
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -59                
Correct output: -53                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -38                
Correct output: -25                 | Program output: 62                 
Correct output: -74                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -46                
Correct output: -1                  | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -77                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 80                 
Correct output: -63                 | Program output: -8                 
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: 12                 
Correct output: -71                 | Program output: -29                
Correct output: -73                 | Program output: -35                
Correct output: -66                 | Program output: -51                
Correct output: -86                 | Program output: -77                
Correct output: -90                 | Program output: -44                
Correct output: 15                  | Program output: 45                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 22                 
Correct output: -96                 | Program output: -92                
Correct output: 11                  | Program output: 54                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -25                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: 53                 
Correct output: -51                 | Program output: 41                 
Correct output: -87                 | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 24                 
Correct output: -35                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty in1 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor integer_pop boolean_swap integer_yankdup boolean_shove exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_add integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
Lexicase best errors: [1 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty in1 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor integer_pop boolean_swap integer_yankdup boolean_shove exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_add integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
Zero cases best errors: [1 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 6 6 353 6 225 352 326 263 5)
Population mean number of elite cases: 1.89
Count of perfect (error zero) individuals by case: (353 6 6 353 6 225 352 326 263 5)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y})
Best program: (boolean_not integer_max exec_while (exec_do*range () integer_eq boolean_flush) integer_inc exec_y_when_autoconstructing (exec_do*times (integer_add in1 in2 integer_shove integer_dup_times in4 boolean_shove integer_min integer_yankdup integer_dup_times boolean_swap) print_integer boolean_xor integer_pop boolean_shove exec_k (integer_dec) () integer_add integer_min boolean_and boolean_frominteger exec_noop exec_y ()))
Errors: [1 0 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 8.105
Median total errors in population: 9
Error averages by case: (0.647 0.994 0.994 0.647 0.994 0.775 0.648 0.674 0.737 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.83
Average program size in population (points): 47.946
Average percent parens in population: 0.189
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6531796
--- Timings ---
Current time: 1559593979930 milliseconds
Total Time:          27.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.0 seconds, 54.7%
Fitness Testing:      7.3 seconds, 26.6%
Report:               5.0 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 200
Test mean error for best: 0.20000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 73                 
Correct output: 81                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 22                 
Correct output: 19                  | Program output: 28                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -8                 
Correct output: 13                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -77                
Correct output: -90                 | Program output: -59                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -92                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 63                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction -38} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 48
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction -38} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 307 241 241 292 243 559 242 240 307)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (241 307 241 241 292 243 559 242 240 307)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction -38} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items})
Best program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 42
Size: 48
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 7.087
Median total errors in population: 7
Error averages by case: (0.759 0.693 0.759 0.759 0.708 0.757 0.441 0.758 0.76 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.783
Average program size in population (points): 45.814
Average percent parens in population: 0.193
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7349629
--- Timings ---
Current time: 1559593982356 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.0 seconds, 53.9%
Fitness Testing:      8.0 seconds, 27.0%
Report:               5.6 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 13
Successful program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 48


Auto-simplifying with starting size: 48
step: 0
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 500
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 1000
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 1500
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 2000
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 2500
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 3000
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 3500
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 4000
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 4500
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

step: 5000
program: (boolean_not boolean_invert_second_then_and integer_min boolean_flush integer_inc exec_empty integer_min in1 in4 in1 boolean_dup boolean_dup_times integer_min exec_do*times (integer_min integer_add in2 integer_shove integer_dup_times in3 integer_min integer_yankdup exec_dup (print_integer boolean_xor boolean_yankdup boolean_swap -38 integer_yankdup boolean_shove boolean_not exec_k (integer_stackdepth boolean_flush) (exec_dup_items) boolean_or integer_yankdup boolean_and in1 exec_y () exec_stackdepth exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 48

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 200
Test mean error for best: 0.20000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 73                 
Correct output: 81                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 22                 
Correct output: 19                  | Program output: 28                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -8                 
Correct output: 13                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -77                
Correct output: -90                 | Program output: -59                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -92                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 63                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
;;******************************
