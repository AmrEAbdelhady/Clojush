Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[92 21 92 92] 21] [[38 38 25 38] 25] [[36 -81 36 36] -81] [[63 72 63 63] 63] [[-65 7 7 7] -65] [[-47 -47 71 -47] -47] [[-29 -29 -29 -8] -29] [[-59 -85 -85 -85] -85] [[-22 53 53 53] -22] [[52 52 49 52] 49] [(4 4 4 4) 4] [(28 28 28 28) 28] [(-50 -50 -50 -50) -50] [(-32 -32 -32 -32) -32] [(11 11 11 11) 11] [(33 74 79 21) 21] [(17 54 23 64) 17] [(63 69 9 9) 9] [(24 98 76 86) 24] [(47 70 30 64) 30] [(23 34 90 37) 23] [(47 21 27 87) 21] [(47 0 27 23) 0] [(12 71 89 17) 12] [(10 98 4 71) 4] [(57 30 13 75) 13] [(45 19 25 93) 19] [(50 96 42 8) 8] [(2 83 53 7) 2] [(77 31 60 17) 17] [(29 21 65 27) 21] [(82 6 80 0) 0] [(6 10 97 15) 6] [(85 82 81 32) 32] [(97 75 80 5) 5] [(47 -23 -35 76) -35] [(-87 -35 -94 -83) -94] [(39 -86 28 -26) -86] [(19 -59 48 -33) -59] [(-96 33 -26 -86) -96] [(-94 25 -74 14) -94] [(6 32 -76 24) -76] [(61 100 -54 14) -54] [(73 51 -68 -54) -68] [(-92 -43 81 -61) -92] [(-16 -60 -44 -19) -60] [(5 40 -45 92) -45] [(-68 52 95 -46) -68] [(-70 4 -78 -64) -78] [(-19 92 18 36) -19] [(-61 -66 59 17) -66] [(67 -6 23 -77) -77] [(-8 -83 -21 -85) -85] [(-42 88 -14 26) -42] [(-71 29 -70 -29) -71] [(52 72 80 0) 0] [(93 78 60 98) 60] [(25 -89 -20 9) -89] [(52 -92 70 -54) -92] [(22 31 42 -68) -68] [(91 17 -55 1) -55] [(-34 -75 -4 -71) -75] [(43 -58 -60 -9) -60] [(-27 19 -7 51) -27] [(12 43 35 55) 12] [(-88 51 60 -86) -88] [(80 -65 -53 90) -65] [(-5 53 12 95) -5] [(58 -26 77 -23) -26] [(64 90 96 -41) -41] [(-34 26 59 69) -34] [(66 -30 -7 -66) -66] [(95 -31 50 -18) -31] [(-66 17 -9 89) -66] [(23 -15 59 -44) -44] [(-8 33 52 52) -8] [(-59 -87 52 30) -87] [(-65 29 19 37) -65] [(-5 -57 22 -41) -57] [(-15 46 24 11) -15] [(34 46 -43 5) -43] [(-87 56 -25 71) -87] [(-78 57 -81 48) -81] [(-64 38 -27 -95) -95] [(-61 -50 22 11) -61] [(86 91 73 -49) -49] [(35 -75 -67 4) -75] [(-92 -69 54 44) -92] [(-96 -81 29 92) -96] [(93 -16 -26 -49) -49] [(83 53 40 35) 35] [(-14 83 -73 -25) -73] [(28 44 97 2) 2] [(51 -85 -81 98) -85] [(-69 -24 -10 38) -69])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[92 21 92 92] 21]
Train Case:   6 | Input/Output: [[38 38 25 38] 25]
Train Case:   7 | Input/Output: [[36 -81 36 36] -81]
Train Case:   8 | Input/Output: [[63 72 63 63] 63]
Train Case:   9 | Input/Output: [[-65 7 7 7] -65]
Train Case:  10 | Input/Output: [[-47 -47 71 -47] -47]
Train Case:  11 | Input/Output: [[-29 -29 -29 -8] -29]
Train Case:  12 | Input/Output: [[-59 -85 -85 -85] -85]
Train Case:  13 | Input/Output: [[-22 53 53 53] -22]
Train Case:  14 | Input/Output: [[52 52 49 52] 49]
Train Case:  15 | Input/Output: [(4 4 4 4) 4]
Train Case:  16 | Input/Output: [(28 28 28 28) 28]
Train Case:  17 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  18 | Input/Output: [(-32 -32 -32 -32) -32]
Train Case:  19 | Input/Output: [(11 11 11 11) 11]
Train Case:  20 | Input/Output: [(33 74 79 21) 21]
Train Case:  21 | Input/Output: [(17 54 23 64) 17]
Train Case:  22 | Input/Output: [(63 69 9 9) 9]
Train Case:  23 | Input/Output: [(24 98 76 86) 24]
Train Case:  24 | Input/Output: [(47 70 30 64) 30]
Train Case:  25 | Input/Output: [(23 34 90 37) 23]
Train Case:  26 | Input/Output: [(47 21 27 87) 21]
Train Case:  27 | Input/Output: [(47 0 27 23) 0]
Train Case:  28 | Input/Output: [(12 71 89 17) 12]
Train Case:  29 | Input/Output: [(10 98 4 71) 4]
Train Case:  30 | Input/Output: [(57 30 13 75) 13]
Train Case:  31 | Input/Output: [(45 19 25 93) 19]
Train Case:  32 | Input/Output: [(50 96 42 8) 8]
Train Case:  33 | Input/Output: [(2 83 53 7) 2]
Train Case:  34 | Input/Output: [(77 31 60 17) 17]
Train Case:  35 | Input/Output: [(29 21 65 27) 21]
Train Case:  36 | Input/Output: [(82 6 80 0) 0]
Train Case:  37 | Input/Output: [(6 10 97 15) 6]
Train Case:  38 | Input/Output: [(85 82 81 32) 32]
Train Case:  39 | Input/Output: [(97 75 80 5) 5]
Train Case:  40 | Input/Output: [(47 -23 -35 76) -35]
Train Case:  41 | Input/Output: [(-87 -35 -94 -83) -94]
Train Case:  42 | Input/Output: [(39 -86 28 -26) -86]
Train Case:  43 | Input/Output: [(19 -59 48 -33) -59]
Train Case:  44 | Input/Output: [(-96 33 -26 -86) -96]
Train Case:  45 | Input/Output: [(-94 25 -74 14) -94]
Train Case:  46 | Input/Output: [(6 32 -76 24) -76]
Train Case:  47 | Input/Output: [(61 100 -54 14) -54]
Train Case:  48 | Input/Output: [(73 51 -68 -54) -68]
Train Case:  49 | Input/Output: [(-92 -43 81 -61) -92]
Train Case:  50 | Input/Output: [(-16 -60 -44 -19) -60]
Train Case:  51 | Input/Output: [(5 40 -45 92) -45]
Train Case:  52 | Input/Output: [(-68 52 95 -46) -68]
Train Case:  53 | Input/Output: [(-70 4 -78 -64) -78]
Train Case:  54 | Input/Output: [(-19 92 18 36) -19]
Train Case:  55 | Input/Output: [(-61 -66 59 17) -66]
Train Case:  56 | Input/Output: [(67 -6 23 -77) -77]
Train Case:  57 | Input/Output: [(-8 -83 -21 -85) -85]
Train Case:  58 | Input/Output: [(-42 88 -14 26) -42]
Train Case:  59 | Input/Output: [(-71 29 -70 -29) -71]
Train Case:  60 | Input/Output: [(52 72 80 0) 0]
Train Case:  61 | Input/Output: [(93 78 60 98) 60]
Train Case:  62 | Input/Output: [(25 -89 -20 9) -89]
Train Case:  63 | Input/Output: [(52 -92 70 -54) -92]
Train Case:  64 | Input/Output: [(22 31 42 -68) -68]
Train Case:  65 | Input/Output: [(91 17 -55 1) -55]
Train Case:  66 | Input/Output: [(-34 -75 -4 -71) -75]
Train Case:  67 | Input/Output: [(43 -58 -60 -9) -60]
Train Case:  68 | Input/Output: [(-27 19 -7 51) -27]
Train Case:  69 | Input/Output: [(12 43 35 55) 12]
Train Case:  70 | Input/Output: [(-88 51 60 -86) -88]
Train Case:  71 | Input/Output: [(80 -65 -53 90) -65]
Train Case:  72 | Input/Output: [(-5 53 12 95) -5]
Train Case:  73 | Input/Output: [(58 -26 77 -23) -26]
Train Case:  74 | Input/Output: [(64 90 96 -41) -41]
Train Case:  75 | Input/Output: [(-34 26 59 69) -34]
Train Case:  76 | Input/Output: [(66 -30 -7 -66) -66]
Train Case:  77 | Input/Output: [(95 -31 50 -18) -31]
Train Case:  78 | Input/Output: [(-66 17 -9 89) -66]
Train Case:  79 | Input/Output: [(23 -15 59 -44) -44]
Train Case:  80 | Input/Output: [(-8 33 52 52) -8]
Train Case:  81 | Input/Output: [(-59 -87 52 30) -87]
Train Case:  82 | Input/Output: [(-65 29 19 37) -65]
Train Case:  83 | Input/Output: [(-5 -57 22 -41) -57]
Train Case:  84 | Input/Output: [(-15 46 24 11) -15]
Train Case:  85 | Input/Output: [(34 46 -43 5) -43]
Train Case:  86 | Input/Output: [(-87 56 -25 71) -87]
Train Case:  87 | Input/Output: [(-78 57 -81 48) -81]
Train Case:  88 | Input/Output: [(-64 38 -27 -95) -95]
Train Case:  89 | Input/Output: [(-61 -50 22 11) -61]
Train Case:  90 | Input/Output: [(86 91 73 -49) -49]
Train Case:  91 | Input/Output: [(35 -75 -67 4) -75]
Train Case:  92 | Input/Output: [(-92 -69 54 44) -92]
Train Case:  93 | Input/Output: [(-96 -81 29 92) -96]
Train Case:  94 | Input/Output: [(93 -16 -26 -49) -49]
Train Case:  95 | Input/Output: [(83 53 40 35) 35]
Train Case:  96 | Input/Output: [(-14 83 -73 -25) -73]
Train Case:  97 | Input/Output: [(28 44 97 2) 2]
Train Case:  98 | Input/Output: [(51 -85 -81 98) -85]
Train Case:  99 | Input/Output: [(-69 -24 -10 38) -69]
Test Case:   0 | Input/Output: [[86 34 86 86] 34]
Test Case:   1 | Input/Output: [[65 65 65 -88] -88]
Test Case:   2 | Input/Output: [[-69 -14 -14 -14] -69]
Test Case:   3 | Input/Output: [[79 79 67 79] 67]
Test Case:   4 | Input/Output: [[42 42 31 42] 31]
Test Case:   5 | Input/Output: [[-72 -72 -95 -72] -95]
Test Case:   6 | Input/Output: [[25 25 95 25] 25]
Test Case:   7 | Input/Output: [[-14 -14 -20 -14] -20]
Test Case:   8 | Input/Output: [[-57 -57 53 -57] -57]
Test Case:   9 | Input/Output: [[-89 56 56 56] -89]
Test Case:  10 | Input/Output: [[5 91 91 91] 5]
Test Case:  11 | Input/Output: [[45 45 45 -54] -54]
Test Case:  12 | Input/Output: [[20 85 85 85] 20]
Test Case:  13 | Input/Output: [[92 17 17 17] 17]
Test Case:  14 | Input/Output: [[64 61 64 64] 61]
Test Case:  15 | Input/Output: [[47 -23 47 47] -23]
Test Case:  16 | Input/Output: [[77 12 77 77] 12]
Test Case:  17 | Input/Output: [[10 10 10 -89] -89]
Test Case:  18 | Input/Output: [[2 -16 -16 -16] -16]
Test Case:  19 | Input/Output: [[13 13 -74 13] -74]
Test Case:  20 | Input/Output: [[100 -93 100 100] -93]
Test Case:  21 | Input/Output: [[72 72 42 72] 42]
Test Case:  22 | Input/Output: [[78 78 78 -24] -24]
Test Case:  23 | Input/Output: [[83 83 30 83] 30]
Test Case:  24 | Input/Output: [[-13 -5 -5 -5] -13]
Test Case:  25 | Input/Output: [[51 51 -67 51] -67]
Test Case:  26 | Input/Output: [[-28 -28 10 -28] -28]
Test Case:  27 | Input/Output: [[-91 66 -91 -91] -91]
Test Case:  28 | Input/Output: [[-1 86 86 86] -1]
Test Case:  29 | Input/Output: [[-79 -79 91 -79] -79]
Test Case:  30 | Input/Output: [[-20 65 -20 -20] -20]
Test Case:  31 | Input/Output: [[-93 -93 -93 38] -93]
Test Case:  32 | Input/Output: [[89 -95 -95 -95] -95]
Test Case:  33 | Input/Output: [[34 5 5 5] 5]
Test Case:  34 | Input/Output: [[-42 -42 -20 -42] -42]
Test Case:  35 | Input/Output: [[-99 -2 -99 -99] -99]
Test Case:  36 | Input/Output: [[59 26 26 26] 26]
Test Case:  37 | Input/Output: [[70 70 87 70] 70]
Test Case:  38 | Input/Output: [[-5 98 98 98] -5]
Test Case:  39 | Input/Output: [[-35 -76 -76 -76] -76]
Test Case:  40 | Input/Output: [[-11 36 36 36] -11]
Test Case:  41 | Input/Output: [[-74 -74 7 -74] -74]
Test Case:  42 | Input/Output: [[21 21 -70 21] -70]
Test Case:  43 | Input/Output: [[-60 -60 -60 62] -60]
Test Case:  44 | Input/Output: [[86 86 86 -64] -64]
Test Case:  45 | Input/Output: [[6 6 6 -15] -15]
Test Case:  46 | Input/Output: [[-13 -13 -13 -20] -20]
Test Case:  47 | Input/Output: [[-55 -55 80 -55] -55]
Test Case:  48 | Input/Output: [[-58 -56 -56 -56] -58]
Test Case:  49 | Input/Output: [[-65 -65 42 -65] -65]
Test Case:  50 | Input/Output: [[73 39 39 39] 39]
Test Case:  51 | Input/Output: [[77 77 77 -20] -20]
Test Case:  52 | Input/Output: [[47 47 47 -55] -55]
Test Case:  53 | Input/Output: [[93 41 41 41] 41]
Test Case:  54 | Input/Output: [[-42 -6 -42 -42] -42]
Test Case:  55 | Input/Output: [[16 16 16 -73] -73]
Test Case:  56 | Input/Output: [[-68 -89 -68 -68] -89]
Test Case:  57 | Input/Output: [[10 56 10 10] 10]
Test Case:  58 | Input/Output: [[65 65 75 65] 65]
Test Case:  59 | Input/Output: [[37 36 37 37] 36]
Test Case:  60 | Input/Output: [[26 26 -99 26] -99]
Test Case:  61 | Input/Output: [[15 47 47 47] 15]
Test Case:  62 | Input/Output: [[-78 -57 -78 -78] -78]
Test Case:  63 | Input/Output: [[-23 -23 -88 -23] -88]
Test Case:  64 | Input/Output: [[-8 75 -8 -8] -8]
Test Case:  65 | Input/Output: [[-81 -82 -81 -81] -82]
Test Case:  66 | Input/Output: [[-10 -92 -10 -10] -92]
Test Case:  67 | Input/Output: [[66 66 40 66] 40]
Test Case:  68 | Input/Output: [[12 12 -72 12] -72]
Test Case:  69 | Input/Output: [[-56 -40 -40 -40] -56]
Test Case:  70 | Input/Output: [[-33 60 -33 -33] -33]
Test Case:  71 | Input/Output: [[55 -24 -24 -24] -24]
Test Case:  72 | Input/Output: [[49 -50 -50 -50] -50]
Test Case:  73 | Input/Output: [[10 -60 10 10] -60]
Test Case:  74 | Input/Output: [[-64 61 61 61] -64]
Test Case:  75 | Input/Output: [[21 21 -25 21] -25]
Test Case:  76 | Input/Output: [[-25 64 64 64] -25]
Test Case:  77 | Input/Output: [[60 -85 60 60] -85]
Test Case:  78 | Input/Output: [[-44 59 59 59] -44]
Test Case:  79 | Input/Output: [[-11 75 75 75] -11]
Test Case:  80 | Input/Output: [[-80 -80 22 -80] -80]
Test Case:  81 | Input/Output: [[-26 -26 -26 94] -26]
Test Case:  82 | Input/Output: [[-84 -84 -84 5] -84]
Test Case:  83 | Input/Output: [[-11 -11 -11 7] -11]
Test Case:  84 | Input/Output: [[47 56 56 56] 47]
Test Case:  85 | Input/Output: [[-2 -2 -2 -9] -9]
Test Case:  86 | Input/Output: [[-16 -16 -16 12] -16]
Test Case:  87 | Input/Output: [[74 -91 74 74] -91]
Test Case:  88 | Input/Output: [[-50 -50 -50 -46] -50]
Test Case:  89 | Input/Output: [[12 12 12 75] 12]
Test Case:  90 | Input/Output: [[90 90 42 90] 42]
Test Case:  91 | Input/Output: [[74 -55 -55 -55] -55]
Test Case:  92 | Input/Output: [[-99 -99 -99 -90] -99]
Test Case:  93 | Input/Output: [[43 43 43 37] 37]
Test Case:  94 | Input/Output: [[-93 -93 -93 -29] -93]
Test Case:  95 | Input/Output: [[-62 -62 65 -62] -62]
Test Case:  96 | Input/Output: [[17 17 17 -78] -78]
Test Case:  97 | Input/Output: [[-16 20 -16 -16] -16]
Test Case:  98 | Input/Output: [[-68 -68 -68 -63] -68]
Test Case:  99 | Input/Output: [[-64 76 76 76] -64]
Test Case: 100 | Input/Output: [(44 44 44 44) 44]
Test Case: 101 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 102 | Input/Output: [(57 57 57 57) 57]
Test Case: 103 | Input/Output: [(18 18 18 18) 18]
Test Case: 104 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 105 | Input/Output: [(28 28 28 28) 28]
Test Case: 106 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 107 | Input/Output: [(6 6 6 6) 6]
Test Case: 108 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 109 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 110 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 111 | Input/Output: [(98 98 98 98) 98]
Test Case: 112 | Input/Output: [(32 32 32 32) 32]
Test Case: 113 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 114 | Input/Output: [(85 85 85 85) 85]
Test Case: 115 | Input/Output: [(92 92 92 92) 92]
Test Case: 116 | Input/Output: [(45 45 45 45) 45]
Test Case: 117 | Input/Output: [(54 54 54 54) 54]
Test Case: 118 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 119 | Input/Output: [(17 17 17 17) 17]
Test Case: 120 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 121 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 122 | Input/Output: [(13 13 13 13) 13]
Test Case: 123 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 124 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 125 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 126 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 127 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 128 | Input/Output: [(90 90 90 90) 90]
Test Case: 129 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 130 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 131 | Input/Output: [(65 65 65 65) 65]
Test Case: 132 | Input/Output: [(47 47 47 47) 47]
Test Case: 133 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 134 | Input/Output: [(47 47 47 47) 47]
Test Case: 135 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 136 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 137 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 138 | Input/Output: [(14 14 14 14) 14]
Test Case: 139 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 140 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 141 | Input/Output: [(59 59 59 59) 59]
Test Case: 142 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 143 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 144 | Input/Output: [(22 22 22 22) 22]
Test Case: 145 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 146 | Input/Output: [(71 71 71 71) 71]
Test Case: 147 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 148 | Input/Output: [(58 58 58 58) 58]
Test Case: 149 | Input/Output: [(100 100 100 100) 100]
Test Case: 150 | Input/Output: [(92 92 92 92) 92]
Test Case: 151 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 152 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 153 | Input/Output: [(70 70 70 70) 70]
Test Case: 154 | Input/Output: [(34 34 34 34) 34]
Test Case: 155 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 156 | Input/Output: [(12 12 12 12) 12]
Test Case: 157 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 158 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 159 | Input/Output: [(19 19 19 19) 19]
Test Case: 160 | Input/Output: [(96 96 96 96) 96]
Test Case: 161 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 162 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 163 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 164 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 165 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 166 | Input/Output: [(68 68 68 68) 68]
Test Case: 167 | Input/Output: [(84 84 84 84) 84]
Test Case: 168 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 169 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 170 | Input/Output: [(6 6 6 6) 6]
Test Case: 171 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 172 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 173 | Input/Output: [(9 9 9 9) 9]
Test Case: 174 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 175 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 176 | Input/Output: [(37 37 37 37) 37]
Test Case: 177 | Input/Output: [(76 76 76 76) 76]
Test Case: 178 | Input/Output: [(76 76 76 76) 76]
Test Case: 179 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 180 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 181 | Input/Output: [(44 44 44 44) 44]
Test Case: 182 | Input/Output: [(15 15 15 15) 15]
Test Case: 183 | Input/Output: [(92 92 92 92) 92]
Test Case: 184 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 185 | Input/Output: [(74 74 74 74) 74]
Test Case: 186 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 187 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 188 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 189 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 190 | Input/Output: [(12 12 12 12) 12]
Test Case: 191 | Input/Output: [(61 61 61 61) 61]
Test Case: 192 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 193 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 194 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 195 | Input/Output: [(9 9 9 9) 9]
Test Case: 196 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 197 | Input/Output: [(72 72 72 72) 72]
Test Case: 198 | Input/Output: [(94 94 94 94) 94]
Test Case: 199 | Input/Output: [(30 30 30 30) 30]
Test Case: 200 | Input/Output: [(47 73 64 1) 1]
Test Case: 201 | Input/Output: [(98 40 87 39) 39]
Test Case: 202 | Input/Output: [(62 14 7 21) 7]
Test Case: 203 | Input/Output: [(90 73 93 57) 57]
Test Case: 204 | Input/Output: [(71 61 91 23) 23]
Test Case: 205 | Input/Output: [(32 68 82 2) 2]
Test Case: 206 | Input/Output: [(71 76 18 87) 18]
Test Case: 207 | Input/Output: [(89 83 89 93) 83]
Test Case: 208 | Input/Output: [(6 40 20 7) 6]
Test Case: 209 | Input/Output: [(0 60 15 31) 0]
Test Case: 210 | Input/Output: [(13 5 39 59) 5]
Test Case: 211 | Input/Output: [(100 93 98 52) 52]
Test Case: 212 | Input/Output: [(7 30 44 92) 7]
Test Case: 213 | Input/Output: [(72 53 100 67) 53]
Test Case: 214 | Input/Output: [(40 24 60 51) 24]
Test Case: 215 | Input/Output: [(66 53 41 3) 3]
Test Case: 216 | Input/Output: [(48 37 16 20) 16]
Test Case: 217 | Input/Output: [(37 99 13 33) 13]
Test Case: 218 | Input/Output: [(7 41 85 40) 7]
Test Case: 219 | Input/Output: [(50 19 68 98) 19]
Test Case: 220 | Input/Output: [(88 68 70 8) 8]
Test Case: 221 | Input/Output: [(60 25 73 96) 25]
Test Case: 222 | Input/Output: [(33 27 85 16) 16]
Test Case: 223 | Input/Output: [(58 80 28 85) 28]
Test Case: 224 | Input/Output: [(18 10 40 35) 10]
Test Case: 225 | Input/Output: [(94 57 37 97) 37]
Test Case: 226 | Input/Output: [(70 25 37 0) 0]
Test Case: 227 | Input/Output: [(32 36 72 72) 32]
Test Case: 228 | Input/Output: [(7 99 82 6) 6]
Test Case: 229 | Input/Output: [(72 21 88 50) 21]
Test Case: 230 | Input/Output: [(68 6 65 15) 6]
Test Case: 231 | Input/Output: [(84 59 35 27) 27]
Test Case: 232 | Input/Output: [(24 18 38 84) 18]
Test Case: 233 | Input/Output: [(28 31 44 48) 28]
Test Case: 234 | Input/Output: [(90 40 48 87) 40]
Test Case: 235 | Input/Output: [(44 12 20 75) 12]
Test Case: 236 | Input/Output: [(24 46 6 75) 6]
Test Case: 237 | Input/Output: [(73 70 37 99) 37]
Test Case: 238 | Input/Output: [(52 72 67 93) 52]
Test Case: 239 | Input/Output: [(75 22 75 100) 22]
Test Case: 240 | Input/Output: [(36 9 66 97) 9]
Test Case: 241 | Input/Output: [(18 9 34 7) 7]
Test Case: 242 | Input/Output: [(60 20 48 47) 20]
Test Case: 243 | Input/Output: [(46 6 53 69) 6]
Test Case: 244 | Input/Output: [(19 33 32 18) 18]
Test Case: 245 | Input/Output: [(10 22 27 12) 10]
Test Case: 246 | Input/Output: [(1 1 72 14) 1]
Test Case: 247 | Input/Output: [(35 3 87 19) 3]
Test Case: 248 | Input/Output: [(34 53 98 90) 34]
Test Case: 249 | Input/Output: [(8 19 76 100) 8]
Test Case: 250 | Input/Output: [(10 78 67 9) 9]
Test Case: 251 | Input/Output: [(41 59 27 54) 27]
Test Case: 252 | Input/Output: [(73 100 54 98) 54]
Test Case: 253 | Input/Output: [(24 15 25 51) 15]
Test Case: 254 | Input/Output: [(50 29 61 46) 29]
Test Case: 255 | Input/Output: [(90 0 78 39) 0]
Test Case: 256 | Input/Output: [(64 21 45 83) 21]
Test Case: 257 | Input/Output: [(99 31 81 73) 31]
Test Case: 258 | Input/Output: [(43 54 58 47) 43]
Test Case: 259 | Input/Output: [(64 81 83 61) 61]
Test Case: 260 | Input/Output: [(62 84 46 66) 46]
Test Case: 261 | Input/Output: [(41 40 51 13) 13]
Test Case: 262 | Input/Output: [(36 42 91 41) 36]
Test Case: 263 | Input/Output: [(9 43 99 15) 9]
Test Case: 264 | Input/Output: [(94 100 52 40) 40]
Test Case: 265 | Input/Output: [(71 37 51 68) 37]
Test Case: 266 | Input/Output: [(29 20 52 90) 20]
Test Case: 267 | Input/Output: [(76 90 50 91) 50]
Test Case: 268 | Input/Output: [(14 40 58 46) 14]
Test Case: 269 | Input/Output: [(74 83 88 14) 14]
Test Case: 270 | Input/Output: [(23 26 1 61) 1]
Test Case: 271 | Input/Output: [(47 39 14 51) 14]
Test Case: 272 | Input/Output: [(22 66 31 93) 22]
Test Case: 273 | Input/Output: [(26 60 55 9) 9]
Test Case: 274 | Input/Output: [(53 63 5 41) 5]
Test Case: 275 | Input/Output: [(53 19 0 65) 0]
Test Case: 276 | Input/Output: [(27 64 94 38) 27]
Test Case: 277 | Input/Output: [(72 32 50 63) 32]
Test Case: 278 | Input/Output: [(98 97 85 8) 8]
Test Case: 279 | Input/Output: [(43 78 19 74) 19]
Test Case: 280 | Input/Output: [(15 9 84 2) 2]
Test Case: 281 | Input/Output: [(5 5 76 85) 5]
Test Case: 282 | Input/Output: [(73 79 44 82) 44]
Test Case: 283 | Input/Output: [(51 69 76 3) 3]
Test Case: 284 | Input/Output: [(78 56 10 81) 10]
Test Case: 285 | Input/Output: [(49 86 50 100) 49]
Test Case: 286 | Input/Output: [(74 94 99 100) 74]
Test Case: 287 | Input/Output: [(12 65 71 71) 12]
Test Case: 288 | Input/Output: [(18 74 91 79) 18]
Test Case: 289 | Input/Output: [(26 78 89 39) 26]
Test Case: 290 | Input/Output: [(33 3 66 77) 3]
Test Case: 291 | Input/Output: [(94 25 65 2) 2]
Test Case: 292 | Input/Output: [(3 29 87 22) 3]
Test Case: 293 | Input/Output: [(21 53 88 6) 6]
Test Case: 294 | Input/Output: [(72 4 27 38) 4]
Test Case: 295 | Input/Output: [(13 73 48 99) 13]
Test Case: 296 | Input/Output: [(68 36 44 57) 36]
Test Case: 297 | Input/Output: [(28 48 68 19) 19]
Test Case: 298 | Input/Output: [(88 20 46 27) 20]
Test Case: 299 | Input/Output: [(94 38 47 62) 38]
Test Case: 300 | Input/Output: [(38 96 36 24) 24]
Test Case: 301 | Input/Output: [(56 96 33 62) 33]
Test Case: 302 | Input/Output: [(76 38 80 77) 38]
Test Case: 303 | Input/Output: [(37 4 59 78) 4]
Test Case: 304 | Input/Output: [(87 23 43 19) 19]
Test Case: 305 | Input/Output: [(28 35 83 22) 22]
Test Case: 306 | Input/Output: [(45 17 14 71) 14]
Test Case: 307 | Input/Output: [(70 68 66 50) 50]
Test Case: 308 | Input/Output: [(51 78 86 30) 30]
Test Case: 309 | Input/Output: [(19 62 7 13) 7]
Test Case: 310 | Input/Output: [(22 89 32 89) 22]
Test Case: 311 | Input/Output: [(13 46 86 99) 13]
Test Case: 312 | Input/Output: [(85 29 26 61) 26]
Test Case: 313 | Input/Output: [(29 26 4 60) 4]
Test Case: 314 | Input/Output: [(29 81 71 2) 2]
Test Case: 315 | Input/Output: [(82 1 90 82) 1]
Test Case: 316 | Input/Output: [(35 38 85 53) 35]
Test Case: 317 | Input/Output: [(81 59 0 63) 0]
Test Case: 318 | Input/Output: [(99 16 9 63) 9]
Test Case: 319 | Input/Output: [(43 31 11 2) 2]
Test Case: 320 | Input/Output: [(24 7 14 68) 7]
Test Case: 321 | Input/Output: [(82 96 55 86) 55]
Test Case: 322 | Input/Output: [(79 42 79 20) 20]
Test Case: 323 | Input/Output: [(60 45 80 2) 2]
Test Case: 324 | Input/Output: [(96 12 42 0) 0]
Test Case: 325 | Input/Output: [(39 54 97 90) 39]
Test Case: 326 | Input/Output: [(59 57 71 43) 43]
Test Case: 327 | Input/Output: [(53 85 96 85) 53]
Test Case: 328 | Input/Output: [(84 52 34 2) 2]
Test Case: 329 | Input/Output: [(6 56 80 31) 6]
Test Case: 330 | Input/Output: [(93 19 15 97) 15]
Test Case: 331 | Input/Output: [(1 31 69 4) 1]
Test Case: 332 | Input/Output: [(96 10 46 24) 10]
Test Case: 333 | Input/Output: [(59 72 53 99) 53]
Test Case: 334 | Input/Output: [(95 3 87 85) 3]
Test Case: 335 | Input/Output: [(0 29 80 63) 0]
Test Case: 336 | Input/Output: [(83 65 60 5) 5]
Test Case: 337 | Input/Output: [(23 25 6 3) 3]
Test Case: 338 | Input/Output: [(35 64 80 23) 23]
Test Case: 339 | Input/Output: [(52 14 74 94) 14]
Test Case: 340 | Input/Output: [(90 34 6 30) 6]
Test Case: 341 | Input/Output: [(61 45 58 69) 45]
Test Case: 342 | Input/Output: [(53 62 20 27) 20]
Test Case: 343 | Input/Output: [(40 77 91 87) 40]
Test Case: 344 | Input/Output: [(14 57 68 61) 14]
Test Case: 345 | Input/Output: [(85 65 4 47) 4]
Test Case: 346 | Input/Output: [(91 64 67 61) 61]
Test Case: 347 | Input/Output: [(34 23 76 97) 23]
Test Case: 348 | Input/Output: [(95 12 77 98) 12]
Test Case: 349 | Input/Output: [(7 48 23 28) 7]
Test Case: 350 | Input/Output: [(70 51 87 81) 51]
Test Case: 351 | Input/Output: [(5 47 88 30) 5]
Test Case: 352 | Input/Output: [(29 19 55 93) 19]
Test Case: 353 | Input/Output: [(2 97 77 91) 2]
Test Case: 354 | Input/Output: [(68 63 63 89) 63]
Test Case: 355 | Input/Output: [(34 68 23 15) 15]
Test Case: 356 | Input/Output: [(25 19 31 65) 19]
Test Case: 357 | Input/Output: [(85 66 6 16) 6]
Test Case: 358 | Input/Output: [(57 0 53 89) 0]
Test Case: 359 | Input/Output: [(62 46 52 48) 46]
Test Case: 360 | Input/Output: [(53 98 43 16) 16]
Test Case: 361 | Input/Output: [(26 35 81 3) 3]
Test Case: 362 | Input/Output: [(65 4 20 43) 4]
Test Case: 363 | Input/Output: [(61 97 42 98) 42]
Test Case: 364 | Input/Output: [(38 34 73 46) 34]
Test Case: 365 | Input/Output: [(90 21 12 23) 12]
Test Case: 366 | Input/Output: [(83 9 47 96) 9]
Test Case: 367 | Input/Output: [(51 32 67 50) 32]
Test Case: 368 | Input/Output: [(84 42 67 90) 42]
Test Case: 369 | Input/Output: [(63 52 91 37) 37]
Test Case: 370 | Input/Output: [(30 9 90 51) 9]
Test Case: 371 | Input/Output: [(86 15 4 79) 4]
Test Case: 372 | Input/Output: [(71 86 44 57) 44]
Test Case: 373 | Input/Output: [(45 86 83 18) 18]
Test Case: 374 | Input/Output: [(31 98 87 88) 31]
Test Case: 375 | Input/Output: [(11 27 16 90) 11]
Test Case: 376 | Input/Output: [(22 14 5 54) 5]
Test Case: 377 | Input/Output: [(25 98 78 23) 23]
Test Case: 378 | Input/Output: [(21 65 33 41) 21]
Test Case: 379 | Input/Output: [(100 20 47 61) 20]
Test Case: 380 | Input/Output: [(35 2 44 75) 2]
Test Case: 381 | Input/Output: [(46 15 66 6) 6]
Test Case: 382 | Input/Output: [(76 77 70 65) 65]
Test Case: 383 | Input/Output: [(97 57 49 85) 49]
Test Case: 384 | Input/Output: [(4 31 62 18) 4]
Test Case: 385 | Input/Output: [(1 28 70 34) 1]
Test Case: 386 | Input/Output: [(92 91 66 52) 52]
Test Case: 387 | Input/Output: [(32 49 70 95) 32]
Test Case: 388 | Input/Output: [(2 43 74 79) 2]
Test Case: 389 | Input/Output: [(42 15 49 18) 15]
Test Case: 390 | Input/Output: [(26 82 56 9) 9]
Test Case: 391 | Input/Output: [(69 73 83 96) 69]
Test Case: 392 | Input/Output: [(56 20 5 26) 5]
Test Case: 393 | Input/Output: [(40 17 100 89) 17]
Test Case: 394 | Input/Output: [(90 65 26 6) 6]
Test Case: 395 | Input/Output: [(18 21 14 16) 14]
Test Case: 396 | Input/Output: [(80 20 64 82) 20]
Test Case: 397 | Input/Output: [(14 99 81 38) 14]
Test Case: 398 | Input/Output: [(21 34 63 0) 0]
Test Case: 399 | Input/Output: [(47 33 91 97) 33]
Test Case: 400 | Input/Output: [(-63 -74 82 0) -74]
Test Case: 401 | Input/Output: [(-4 -66 -49 69) -66]
Test Case: 402 | Input/Output: [(60 -75 -16 0) -75]
Test Case: 403 | Input/Output: [(83 -88 -73 -73) -88]
Test Case: 404 | Input/Output: [(-87 37 -8 -13) -87]
Test Case: 405 | Input/Output: [(-23 97 17 63) -23]
Test Case: 406 | Input/Output: [(-58 -41 59 -44) -58]
Test Case: 407 | Input/Output: [(-86 -61 61 66) -86]
Test Case: 408 | Input/Output: [(-35 -57 -24 -96) -96]
Test Case: 409 | Input/Output: [(-47 -56 38 8) -56]
Test Case: 410 | Input/Output: [(-22 30 20 -82) -82]
Test Case: 411 | Input/Output: [(-54 77 66 -2) -54]
Test Case: 412 | Input/Output: [(55 38 -24 59) -24]
Test Case: 413 | Input/Output: [(-80 0 57 -38) -80]
Test Case: 414 | Input/Output: [(-75 -28 2 -67) -75]
Test Case: 415 | Input/Output: [(85 -57 63 -11) -57]
Test Case: 416 | Input/Output: [(-70 -6 -43 -32) -70]
Test Case: 417 | Input/Output: [(95 92 58 -8) -8]
Test Case: 418 | Input/Output: [(32 -12 -37 74) -37]
Test Case: 419 | Input/Output: [(-74 -50 42 20) -74]
Test Case: 420 | Input/Output: [(87 -20 -30 52) -30]
Test Case: 421 | Input/Output: [(-75 55 60 28) -75]
Test Case: 422 | Input/Output: [(97 -86 11 -76) -86]
Test Case: 423 | Input/Output: [(99 -8 68 5) -8]
Test Case: 424 | Input/Output: [(-74 -14 -36 -2) -74]
Test Case: 425 | Input/Output: [(46 23 94 72) 23]
Test Case: 426 | Input/Output: [(-65 73 -6 -78) -78]
Test Case: 427 | Input/Output: [(69 -87 49 36) -87]
Test Case: 428 | Input/Output: [(-1 -37 -31 49) -37]
Test Case: 429 | Input/Output: [(47 39 -23 10) -23]
Test Case: 430 | Input/Output: [(-81 -7 64 77) -81]
Test Case: 431 | Input/Output: [(32 90 -72 -76) -76]
Test Case: 432 | Input/Output: [(-59 -65 -86 56) -86]
Test Case: 433 | Input/Output: [(82 -93 -52 24) -93]
Test Case: 434 | Input/Output: [(66 35 21 -21) -21]
Test Case: 435 | Input/Output: [(-5 -28 22 34) -28]
Test Case: 436 | Input/Output: [(41 43 -29 -24) -29]
Test Case: 437 | Input/Output: [(45 -69 -49 -98) -98]
Test Case: 438 | Input/Output: [(-69 -96 -52 77) -96]
Test Case: 439 | Input/Output: [(95 22 49 57) 22]
Test Case: 440 | Input/Output: [(17 81 5 80) 5]
Test Case: 441 | Input/Output: [(81 -13 45 55) -13]
Test Case: 442 | Input/Output: [(63 52 89 44) 44]
Test Case: 443 | Input/Output: [(-87 65 -38 32) -87]
Test Case: 444 | Input/Output: [(64 55 -76 81) -76]
Test Case: 445 | Input/Output: [(83 81 -87 39) -87]
Test Case: 446 | Input/Output: [(91 39 85 91) 39]
Test Case: 447 | Input/Output: [(100 -6 -83 -96) -96]
Test Case: 448 | Input/Output: [(73 13 -32 1) -32]
Test Case: 449 | Input/Output: [(-10 -44 0 -93) -93]
Test Case: 450 | Input/Output: [(84 -77 52 50) -77]
Test Case: 451 | Input/Output: [(-41 76 -24 57) -41]
Test Case: 452 | Input/Output: [(82 -17 -86 86) -86]
Test Case: 453 | Input/Output: [(-98 -23 62 -81) -98]
Test Case: 454 | Input/Output: [(44 -61 3 -39) -61]
Test Case: 455 | Input/Output: [(-42 43 -21 70) -42]
Test Case: 456 | Input/Output: [(64 -15 20 51) -15]
Test Case: 457 | Input/Output: [(-60 54 4 -75) -75]
Test Case: 458 | Input/Output: [(84 56 -92 26) -92]
Test Case: 459 | Input/Output: [(1 -36 30 -16) -36]
Test Case: 460 | Input/Output: [(98 -50 -80 -37) -80]
Test Case: 461 | Input/Output: [(-65 -95 -77 74) -95]
Test Case: 462 | Input/Output: [(-37 36 -33 -16) -37]
Test Case: 463 | Input/Output: [(34 49 12 10) 10]
Test Case: 464 | Input/Output: [(90 -54 -34 -72) -72]
Test Case: 465 | Input/Output: [(-72 16 46 37) -72]
Test Case: 466 | Input/Output: [(-92 57 55 -89) -92]
Test Case: 467 | Input/Output: [(29 100 34 -51) -51]
Test Case: 468 | Input/Output: [(48 58 51 75) 48]
Test Case: 469 | Input/Output: [(51 -32 43 8) -32]
Test Case: 470 | Input/Output: [(-10 54 71 -39) -39]
Test Case: 471 | Input/Output: [(14 -4 -32 84) -32]
Test Case: 472 | Input/Output: [(-55 67 -85 -31) -85]
Test Case: 473 | Input/Output: [(-93 -81 39 -25) -93]
Test Case: 474 | Input/Output: [(54 68 21 71) 21]
Test Case: 475 | Input/Output: [(-52 -11 31 61) -52]
Test Case: 476 | Input/Output: [(-56 -19 -59 -17) -59]
Test Case: 477 | Input/Output: [(-71 -98 -39 0) -98]
Test Case: 478 | Input/Output: [(0 80 -55 -24) -55]
Test Case: 479 | Input/Output: [(-29 92 -37 -53) -53]
Test Case: 480 | Input/Output: [(-27 86 72 -88) -88]
Test Case: 481 | Input/Output: [(-97 -9 16 -55) -97]
Test Case: 482 | Input/Output: [(-56 -11 -30 -48) -56]
Test Case: 483 | Input/Output: [(-17 -92 -23 -7) -92]
Test Case: 484 | Input/Output: [(-88 16 97 -49) -88]
Test Case: 485 | Input/Output: [(-21 68 91 -51) -51]
Test Case: 486 | Input/Output: [(29 54 37 39) 29]
Test Case: 487 | Input/Output: [(77 -32 81 -58) -58]
Test Case: 488 | Input/Output: [(38 8 -60 -100) -100]
Test Case: 489 | Input/Output: [(-30 -11 4 -44) -44]
Test Case: 490 | Input/Output: [(-10 -93 100 -31) -93]
Test Case: 491 | Input/Output: [(100 -16 4 17) -16]
Test Case: 492 | Input/Output: [(75 85 42 -13) -13]
Test Case: 493 | Input/Output: [(82 83 59 39) 39]
Test Case: 494 | Input/Output: [(-46 -99 87 11) -99]
Test Case: 495 | Input/Output: [(79 -53 63 63) -53]
Test Case: 496 | Input/Output: [(38 48 -2 93) -2]
Test Case: 497 | Input/Output: [(86 47 -59 -69) -69]
Test Case: 498 | Input/Output: [(11 72 57 -9) -9]
Test Case: 499 | Input/Output: [(15 17 -11 50) -11]
Test Case: 500 | Input/Output: [(-42 -47 -2 87) -47]
Test Case: 501 | Input/Output: [(-36 5 11 -59) -59]
Test Case: 502 | Input/Output: [(24 85 40 -81) -81]
Test Case: 503 | Input/Output: [(-6 -84 -16 -59) -84]
Test Case: 504 | Input/Output: [(-19 -59 81 30) -59]
Test Case: 505 | Input/Output: [(1 53 -29 -43) -43]
Test Case: 506 | Input/Output: [(-91 -57 -23 54) -91]
Test Case: 507 | Input/Output: [(-30 73 42 -95) -95]
Test Case: 508 | Input/Output: [(16 8 88 -36) -36]
Test Case: 509 | Input/Output: [(-31 65 76 86) -31]
Test Case: 510 | Input/Output: [(-82 32 44 31) -82]
Test Case: 511 | Input/Output: [(-30 79 44 21) -30]
Test Case: 512 | Input/Output: [(-100 -30 83 52) -100]
Test Case: 513 | Input/Output: [(-43 -30 -32 -42) -43]
Test Case: 514 | Input/Output: [(-84 2 25 -66) -84]
Test Case: 515 | Input/Output: [(95 81 40 -23) -23]
Test Case: 516 | Input/Output: [(-80 25 -67 92) -80]
Test Case: 517 | Input/Output: [(-37 -2 -51 -85) -85]
Test Case: 518 | Input/Output: [(52 -64 -21 97) -64]
Test Case: 519 | Input/Output: [(21 42 29 85) 21]
Test Case: 520 | Input/Output: [(3 35 25 99) 3]
Test Case: 521 | Input/Output: [(38 -39 -96 48) -96]
Test Case: 522 | Input/Output: [(-48 -79 76 73) -79]
Test Case: 523 | Input/Output: [(81 -35 -67 18) -67]
Test Case: 524 | Input/Output: [(81 60 -49 45) -49]
Test Case: 525 | Input/Output: [(33 18 67 -48) -48]
Test Case: 526 | Input/Output: [(21 -30 -44 -49) -49]
Test Case: 527 | Input/Output: [(-71 16 70 72) -71]
Test Case: 528 | Input/Output: [(23 83 -94 -13) -94]
Test Case: 529 | Input/Output: [(81 -43 100 -43) -43]
Test Case: 530 | Input/Output: [(94 -49 72 -68) -68]
Test Case: 531 | Input/Output: [(-32 43 -72 -89) -89]
Test Case: 532 | Input/Output: [(81 -6 -62 -44) -62]
Test Case: 533 | Input/Output: [(-75 -56 43 9) -75]
Test Case: 534 | Input/Output: [(-54 -74 -26 -41) -74]
Test Case: 535 | Input/Output: [(-92 85 60 74) -92]
Test Case: 536 | Input/Output: [(57 40 -51 74) -51]
Test Case: 537 | Input/Output: [(24 -72 39 10) -72]
Test Case: 538 | Input/Output: [(-98 -15 33 14) -98]
Test Case: 539 | Input/Output: [(-46 84 -8 48) -46]
Test Case: 540 | Input/Output: [(3 76 49 0) 0]
Test Case: 541 | Input/Output: [(-9 16 1 90) -9]
Test Case: 542 | Input/Output: [(-2 52 -45 -84) -84]
Test Case: 543 | Input/Output: [(-28 40 -87 -100) -100]
Test Case: 544 | Input/Output: [(-31 91 74 28) -31]
Test Case: 545 | Input/Output: [(-76 -41 -83 38) -83]
Test Case: 546 | Input/Output: [(-66 -6 -41 -80) -80]
Test Case: 547 | Input/Output: [(-25 87 -91 -53) -91]
Test Case: 548 | Input/Output: [(78 -57 53 -31) -57]
Test Case: 549 | Input/Output: [(-59 -15 -92 -76) -92]
Test Case: 550 | Input/Output: [(46 96 -50 -78) -78]
Test Case: 551 | Input/Output: [(71 93 -27 59) -27]
Test Case: 552 | Input/Output: [(85 57 13 24) 13]
Test Case: 553 | Input/Output: [(59 -60 12 63) -60]
Test Case: 554 | Input/Output: [(34 47 51 17) 17]
Test Case: 555 | Input/Output: [(89 -10 40 55) -10]
Test Case: 556 | Input/Output: [(-68 -63 -49 -12) -68]
Test Case: 557 | Input/Output: [(-58 52 71 -43) -58]
Test Case: 558 | Input/Output: [(-2 -78 61 -42) -78]
Test Case: 559 | Input/Output: [(60 30 -100 -98) -100]
Test Case: 560 | Input/Output: [(-19 21 20 82) -19]
Test Case: 561 | Input/Output: [(-91 26 98 73) -91]
Test Case: 562 | Input/Output: [(-82 22 -25 -18) -82]
Test Case: 563 | Input/Output: [(23 0 66 80) 0]
Test Case: 564 | Input/Output: [(8 -78 85 40) -78]
Test Case: 565 | Input/Output: [(-78 33 88 28) -78]
Test Case: 566 | Input/Output: [(-75 72 -81 25) -81]
Test Case: 567 | Input/Output: [(54 81 58 82) 54]
Test Case: 568 | Input/Output: [(93 80 -52 3) -52]
Test Case: 569 | Input/Output: [(-46 55 -85 15) -85]
Test Case: 570 | Input/Output: [(-45 -29 15 23) -45]
Test Case: 571 | Input/Output: [(-8 -54 -66 -55) -66]
Test Case: 572 | Input/Output: [(9 -23 61 22) -23]
Test Case: 573 | Input/Output: [(30 83 -97 -96) -97]
Test Case: 574 | Input/Output: [(-58 80 -71 30) -71]
Test Case: 575 | Input/Output: [(-90 100 19 -67) -90]
Test Case: 576 | Input/Output: [(-40 -21 22 -80) -80]
Test Case: 577 | Input/Output: [(-81 83 -35 78) -81]
Test Case: 578 | Input/Output: [(-56 85 38 -65) -65]
Test Case: 579 | Input/Output: [(64 -38 -62 -25) -62]
Test Case: 580 | Input/Output: [(-54 33 96 61) -54]
Test Case: 581 | Input/Output: [(10 -69 -80 -38) -80]
Test Case: 582 | Input/Output: [(-14 35 63 -64) -64]
Test Case: 583 | Input/Output: [(29 -60 2 48) -60]
Test Case: 584 | Input/Output: [(67 33 71 32) 32]
Test Case: 585 | Input/Output: [(46 -99 63 9) -99]
Test Case: 586 | Input/Output: [(30 -85 -43 57) -85]
Test Case: 587 | Input/Output: [(-74 -2 -13 -87) -87]
Test Case: 588 | Input/Output: [(67 -81 -77 88) -81]
Test Case: 589 | Input/Output: [(-87 -16 -34 61) -87]
Test Case: 590 | Input/Output: [(-82 -67 80 5) -82]
Test Case: 591 | Input/Output: [(-9 -40 10 3) -40]
Test Case: 592 | Input/Output: [(51 -49 23 58) -49]
Test Case: 593 | Input/Output: [(35 35 40 87) 35]
Test Case: 594 | Input/Output: [(9 -17 -29 71) -29]
Test Case: 595 | Input/Output: [(-9 -74 50 62) -74]
Test Case: 596 | Input/Output: [(69 72 98 -60) -60]
Test Case: 597 | Input/Output: [(82 92 61 86) 61]
Test Case: 598 | Input/Output: [(75 -14 -75 71) -75]
Test Case: 599 | Input/Output: [(82 -99 93 -22) -99]
Test Case: 600 | Input/Output: [(96 70 -28 -11) -28]
Test Case: 601 | Input/Output: [(59 50 60 -72) -72]
Test Case: 602 | Input/Output: [(38 -7 -63 -18) -63]
Test Case: 603 | Input/Output: [(46 -48 38 35) -48]
Test Case: 604 | Input/Output: [(85 74 -31 45) -31]
Test Case: 605 | Input/Output: [(-93 63 -90 80) -93]
Test Case: 606 | Input/Output: [(-24 -8 -72 -2) -72]
Test Case: 607 | Input/Output: [(-5 52 44 68) -5]
Test Case: 608 | Input/Output: [(93 54 7 32) 7]
Test Case: 609 | Input/Output: [(37 100 -53 23) -53]
Test Case: 610 | Input/Output: [(-48 39 21 -47) -48]
Test Case: 611 | Input/Output: [(-50 -31 -31 43) -50]
Test Case: 612 | Input/Output: [(93 58 -53 70) -53]
Test Case: 613 | Input/Output: [(28 -39 -51 -92) -92]
Test Case: 614 | Input/Output: [(-74 -10 42 -62) -74]
Test Case: 615 | Input/Output: [(-69 83 -8 42) -69]
Test Case: 616 | Input/Output: [(-28 27 92 46) -28]
Test Case: 617 | Input/Output: [(28 -4 -35 -2) -35]
Test Case: 618 | Input/Output: [(-52 59 92 74) -52]
Test Case: 619 | Input/Output: [(7 -7 19 92) -7]
Test Case: 620 | Input/Output: [(-16 23 43 87) -16]
Test Case: 621 | Input/Output: [(22 38 -99 -7) -99]
Test Case: 622 | Input/Output: [(37 -17 75 94) -17]
Test Case: 623 | Input/Output: [(-100 -26 -6 69) -100]
Test Case: 624 | Input/Output: [(-88 -19 60 -6) -88]
Test Case: 625 | Input/Output: [(92 -91 -27 -7) -91]
Test Case: 626 | Input/Output: [(-17 -13 -89 -48) -89]
Test Case: 627 | Input/Output: [(-56 12 -33 -53) -56]
Test Case: 628 | Input/Output: [(-1 26 89 42) -1]
Test Case: 629 | Input/Output: [(74 -85 -52 79) -85]
Test Case: 630 | Input/Output: [(-48 79 97 -73) -73]
Test Case: 631 | Input/Output: [(-77 20 -71 23) -77]
Test Case: 632 | Input/Output: [(38 29 -14 -69) -69]
Test Case: 633 | Input/Output: [(-52 -22 -75 100) -75]
Test Case: 634 | Input/Output: [(34 28 57 -41) -41]
Test Case: 635 | Input/Output: [(-76 56 -75 -48) -76]
Test Case: 636 | Input/Output: [(-14 78 59 -26) -26]
Test Case: 637 | Input/Output: [(42 13 35 36) 13]
Test Case: 638 | Input/Output: [(-46 53 -98 -6) -98]
Test Case: 639 | Input/Output: [(59 -26 -72 -4) -72]
Test Case: 640 | Input/Output: [(-47 79 -3 -5) -47]
Test Case: 641 | Input/Output: [(10 5 29 32) 5]
Test Case: 642 | Input/Output: [(61 6 88 83) 6]
Test Case: 643 | Input/Output: [(78 -96 -35 -59) -96]
Test Case: 644 | Input/Output: [(-42 58 -11 100) -42]
Test Case: 645 | Input/Output: [(44 -13 -16 -88) -88]
Test Case: 646 | Input/Output: [(-77 -99 -5 8) -99]
Test Case: 647 | Input/Output: [(-8 -30 87 76) -30]
Test Case: 648 | Input/Output: [(-33 -81 -51 -52) -81]
Test Case: 649 | Input/Output: [(-81 -71 -83 -93) -93]
Test Case: 650 | Input/Output: [(16 -30 -22 9) -30]
Test Case: 651 | Input/Output: [(-66 -72 93 -29) -72]
Test Case: 652 | Input/Output: [(-99 18 21 -95) -99]
Test Case: 653 | Input/Output: [(21 -55 43 55) -55]
Test Case: 654 | Input/Output: [(-10 40 -33 0) -33]
Test Case: 655 | Input/Output: [(-18 -60 -32 -67) -67]
Test Case: 656 | Input/Output: [(36 14 26 23) 14]
Test Case: 657 | Input/Output: [(98 28 -81 -98) -98]
Test Case: 658 | Input/Output: [(-24 82 35 7) -24]
Test Case: 659 | Input/Output: [(-70 68 -66 -5) -70]
Test Case: 660 | Input/Output: [(-36 -73 -31 -36) -73]
Test Case: 661 | Input/Output: [(-1 -100 55 -58) -100]
Test Case: 662 | Input/Output: [(29 49 92 -28) -28]
Test Case: 663 | Input/Output: [(-7 -13 -80 24) -80]
Test Case: 664 | Input/Output: [(-10 46 -20 -22) -22]
Test Case: 665 | Input/Output: [(-34 -43 -84 37) -84]
Test Case: 666 | Input/Output: [(79 -44 -64 42) -64]
Test Case: 667 | Input/Output: [(-66 -23 -67 -96) -96]
Test Case: 668 | Input/Output: [(38 -95 26 -100) -100]
Test Case: 669 | Input/Output: [(-47 97 52 -4) -47]
Test Case: 670 | Input/Output: [(-77 -20 36 -67) -77]
Test Case: 671 | Input/Output: [(77 96 -93 -48) -93]
Test Case: 672 | Input/Output: [(84 92 82 89) 82]
Test Case: 673 | Input/Output: [(19 27 49 -78) -78]
Test Case: 674 | Input/Output: [(19 37 -74 89) -74]
Test Case: 675 | Input/Output: [(-6 -89 -36 -19) -89]
Test Case: 676 | Input/Output: [(-89 87 -70 87) -89]
Test Case: 677 | Input/Output: [(99 -22 3 -80) -80]
Test Case: 678 | Input/Output: [(24 -12 55 99) -12]
Test Case: 679 | Input/Output: [(60 89 -88 78) -88]
Test Case: 680 | Input/Output: [(79 -60 11 41) -60]
Test Case: 681 | Input/Output: [(-44 38 52 74) -44]
Test Case: 682 | Input/Output: [(-85 -64 68 51) -85]
Test Case: 683 | Input/Output: [(63 -83 42 -52) -83]
Test Case: 684 | Input/Output: [(72 -23 -76 -26) -76]
Test Case: 685 | Input/Output: [(60 39 52 42) 39]
Test Case: 686 | Input/Output: [(41 57 29 93) 29]
Test Case: 687 | Input/Output: [(75 -69 12 -7) -69]
Test Case: 688 | Input/Output: [(69 48 -54 65) -54]
Test Case: 689 | Input/Output: [(35 -63 19 66) -63]
Test Case: 690 | Input/Output: [(-50 -70 -45 86) -70]
Test Case: 691 | Input/Output: [(59 -27 -76 56) -76]
Test Case: 692 | Input/Output: [(-65 82 -31 76) -65]
Test Case: 693 | Input/Output: [(-65 44 -79 -17) -79]
Test Case: 694 | Input/Output: [(-20 66 -16 -81) -81]
Test Case: 695 | Input/Output: [(22 -34 36 13) -34]
Test Case: 696 | Input/Output: [(97 36 19 -8) -8]
Test Case: 697 | Input/Output: [(45 -26 -25 -41) -41]
Test Case: 698 | Input/Output: [(16 -90 56 7) -90]
Test Case: 699 | Input/Output: [(65 -98 -39 -13) -98]
Test Case: 700 | Input/Output: [(-43 89 30 -74) -74]
Test Case: 701 | Input/Output: [(-37 43 -51 78) -51]
Test Case: 702 | Input/Output: [(5 -85 93 46) -85]
Test Case: 703 | Input/Output: [(63 -58 -68 4) -68]
Test Case: 704 | Input/Output: [(-55 -9 5 -67) -67]
Test Case: 705 | Input/Output: [(-39 11 79 -33) -39]
Test Case: 706 | Input/Output: [(-12 19 56 -55) -55]
Test Case: 707 | Input/Output: [(-93 12 -67 64) -93]
Test Case: 708 | Input/Output: [(61 99 -76 75) -76]
Test Case: 709 | Input/Output: [(-61 -38 82 -6) -61]
Test Case: 710 | Input/Output: [(13 7 10 23) 7]
Test Case: 711 | Input/Output: [(89 94 -62 55) -62]
Test Case: 712 | Input/Output: [(-34 98 100 -97) -97]
Test Case: 713 | Input/Output: [(-26 -99 -20 86) -99]
Test Case: 714 | Input/Output: [(0 -73 71 -49) -73]
Test Case: 715 | Input/Output: [(-9 -47 -51 -68) -68]
Test Case: 716 | Input/Output: [(29 -57 19 -61) -61]
Test Case: 717 | Input/Output: [(12 14 16 -13) -13]
Test Case: 718 | Input/Output: [(100 19 -75 94) -75]
Test Case: 719 | Input/Output: [(-40 74 18 -35) -40]
Test Case: 720 | Input/Output: [(-2 12 -62 74) -62]
Test Case: 721 | Input/Output: [(-46 34 95 9) -46]
Test Case: 722 | Input/Output: [(-20 -3 13 7) -20]
Test Case: 723 | Input/Output: [(42 -83 -78 -16) -83]
Test Case: 724 | Input/Output: [(-48 56 35 96) -48]
Test Case: 725 | Input/Output: [(-82 -77 -71 82) -82]
Test Case: 726 | Input/Output: [(38 9 -26 -62) -62]
Test Case: 727 | Input/Output: [(45 93 -19 -27) -27]
Test Case: 728 | Input/Output: [(-99 -21 -19 66) -99]
Test Case: 729 | Input/Output: [(-54 85 -75 -73) -75]
Test Case: 730 | Input/Output: [(-9 -2 -98 -53) -98]
Test Case: 731 | Input/Output: [(91 -97 -17 80) -97]
Test Case: 732 | Input/Output: [(-98 35 -27 -90) -98]
Test Case: 733 | Input/Output: [(31 91 -51 14) -51]
Test Case: 734 | Input/Output: [(-79 -21 97 57) -79]
Test Case: 735 | Input/Output: [(-14 -73 -6 -36) -73]
Test Case: 736 | Input/Output: [(-19 19 33 -32) -32]
Test Case: 737 | Input/Output: [(-2 9 47 33) -2]
Test Case: 738 | Input/Output: [(-20 85 1 -38) -38]
Test Case: 739 | Input/Output: [(76 66 -36 -34) -36]
Test Case: 740 | Input/Output: [(76 19 82 -40) -40]
Test Case: 741 | Input/Output: [(22 -9 0 75) -9]
Test Case: 742 | Input/Output: [(-47 58 83 -28) -47]
Test Case: 743 | Input/Output: [(86 74 29 29) 29]
Test Case: 744 | Input/Output: [(-37 -75 -70 99) -75]
Test Case: 745 | Input/Output: [(30 42 50 -11) -11]
Test Case: 746 | Input/Output: [(-88 -61 -81 25) -88]
Test Case: 747 | Input/Output: [(-98 -35 -64 -4) -98]
Test Case: 748 | Input/Output: [(72 -46 -85 -21) -85]
Test Case: 749 | Input/Output: [(45 -23 -20 59) -23]
Test Case: 750 | Input/Output: [(16 34 -89 75) -89]
Test Case: 751 | Input/Output: [(76 -15 28 -42) -42]
Test Case: 752 | Input/Output: [(92 -73 -56 -24) -73]
Test Case: 753 | Input/Output: [(-9 -94 37 -55) -94]
Test Case: 754 | Input/Output: [(64 -34 39 92) -34]
Test Case: 755 | Input/Output: [(-18 48 90 -71) -71]
Test Case: 756 | Input/Output: [(-23 -35 32 74) -35]
Test Case: 757 | Input/Output: [(67 10 52 -90) -90]
Test Case: 758 | Input/Output: [(-94 -13 68 56) -94]
Test Case: 759 | Input/Output: [(-64 -64 -57 79) -64]
Test Case: 760 | Input/Output: [(74 19 -1 -5) -5]
Test Case: 761 | Input/Output: [(54 72 80 -64) -64]
Test Case: 762 | Input/Output: [(46 -12 -67 80) -67]
Test Case: 763 | Input/Output: [(50 88 73 -33) -33]
Test Case: 764 | Input/Output: [(-38 54 22 -13) -38]
Test Case: 765 | Input/Output: [(70 -5 87 -6) -6]
Test Case: 766 | Input/Output: [(-1 -46 36 50) -46]
Test Case: 767 | Input/Output: [(2 4 38 67) 2]
Test Case: 768 | Input/Output: [(52 -11 -90 -5) -90]
Test Case: 769 | Input/Output: [(-83 -51 84 25) -83]
Test Case: 770 | Input/Output: [(-85 76 21 53) -85]
Test Case: 771 | Input/Output: [(100 15 -83 -23) -83]
Test Case: 772 | Input/Output: [(67 -36 76 -3) -36]
Test Case: 773 | Input/Output: [(48 -39 -32 -28) -39]
Test Case: 774 | Input/Output: [(-2 57 -14 16) -14]
Test Case: 775 | Input/Output: [(-31 79 86 15) -31]
Test Case: 776 | Input/Output: [(-48 12 -64 10) -64]
Test Case: 777 | Input/Output: [(37 -54 -13 -82) -82]
Test Case: 778 | Input/Output: [(31 45 -32 71) -32]
Test Case: 779 | Input/Output: [(60 70 -51 -20) -51]
Test Case: 780 | Input/Output: [(-17 -74 -68 98) -74]
Test Case: 781 | Input/Output: [(6 83 56 -13) -13]
Test Case: 782 | Input/Output: [(98 37 89 46) 37]
Test Case: 783 | Input/Output: [(-42 -51 78 -39) -51]
Test Case: 784 | Input/Output: [(32 -33 -42 67) -42]
Test Case: 785 | Input/Output: [(-51 -60 41 59) -60]
Test Case: 786 | Input/Output: [(-69 -99 -58 67) -99]
Test Case: 787 | Input/Output: [(-52 63 -59 -40) -59]
Test Case: 788 | Input/Output: [(69 78 -38 45) -38]
Test Case: 789 | Input/Output: [(-35 -97 90 -9) -97]
Test Case: 790 | Input/Output: [(40 -99 -98 23) -99]
Test Case: 791 | Input/Output: [(44 -92 -87 73) -92]
Test Case: 792 | Input/Output: [(-74 -54 -80 58) -80]
Test Case: 793 | Input/Output: [(-15 71 13 4) -15]
Test Case: 794 | Input/Output: [(-82 81 -40 -72) -82]
Test Case: 795 | Input/Output: [(-15 -2 -98 9) -98]
Test Case: 796 | Input/Output: [(11 -34 21 -62) -62]
Test Case: 797 | Input/Output: [(-24 -16 -37 -49) -49]
Test Case: 798 | Input/Output: [(-95 82 31 58) -95]
Test Case: 799 | Input/Output: [(-2 -50 16 -44) -50]
Test Case: 800 | Input/Output: [(35 34 -24 29) -24]
Test Case: 801 | Input/Output: [(86 89 83 -22) -22]
Test Case: 802 | Input/Output: [(-5 32 97 76) -5]
Test Case: 803 | Input/Output: [(18 86 59 -88) -88]
Test Case: 804 | Input/Output: [(58 -22 -57 -47) -57]
Test Case: 805 | Input/Output: [(-34 54 11 34) -34]
Test Case: 806 | Input/Output: [(13 72 -80 47) -80]
Test Case: 807 | Input/Output: [(16 -1 -65 64) -65]
Test Case: 808 | Input/Output: [(89 96 96 -46) -46]
Test Case: 809 | Input/Output: [(27 -92 97 -5) -92]
Test Case: 810 | Input/Output: [(-92 35 54 -44) -92]
Test Case: 811 | Input/Output: [(-18 -78 92 -94) -94]
Test Case: 812 | Input/Output: [(-57 87 84 60) -57]
Test Case: 813 | Input/Output: [(25 45 -45 -79) -79]
Test Case: 814 | Input/Output: [(-65 -85 -29 -10) -85]
Test Case: 815 | Input/Output: [(-84 -100 58 0) -100]
Test Case: 816 | Input/Output: [(-63 6 10 31) -63]
Test Case: 817 | Input/Output: [(-15 49 -29 50) -29]
Test Case: 818 | Input/Output: [(79 -30 -93 60) -93]
Test Case: 819 | Input/Output: [(49 55 16 1) 1]
Test Case: 820 | Input/Output: [(-31 -12 -42 25) -42]
Test Case: 821 | Input/Output: [(18 -89 -37 -68) -89]
Test Case: 822 | Input/Output: [(-90 -77 -41 -48) -90]
Test Case: 823 | Input/Output: [(52 -72 10 75) -72]
Test Case: 824 | Input/Output: [(-87 -70 75 -67) -87]
Test Case: 825 | Input/Output: [(96 84 14 -91) -91]
Test Case: 826 | Input/Output: [(-67 24 -10 -38) -67]
Test Case: 827 | Input/Output: [(-78 62 52 17) -78]
Test Case: 828 | Input/Output: [(-79 -1 84 2) -79]
Test Case: 829 | Input/Output: [(-85 -2 88 66) -85]
Test Case: 830 | Input/Output: [(24 21 -19 -74) -74]
Test Case: 831 | Input/Output: [(-9 63 -32 -41) -41]
Test Case: 832 | Input/Output: [(-27 -99 8 85) -99]
Test Case: 833 | Input/Output: [(21 -27 31 -9) -27]
Test Case: 834 | Input/Output: [(76 -44 16 -88) -88]
Test Case: 835 | Input/Output: [(26 -79 -5 -91) -91]
Test Case: 836 | Input/Output: [(13 -72 -16 -21) -72]
Test Case: 837 | Input/Output: [(-63 -42 14 -12) -63]
Test Case: 838 | Input/Output: [(7 -53 -12 -42) -53]
Test Case: 839 | Input/Output: [(75 62 -40 -97) -97]
Test Case: 840 | Input/Output: [(57 35 -61 -55) -61]
Test Case: 841 | Input/Output: [(94 78 -81 -29) -81]
Test Case: 842 | Input/Output: [(94 -1 55 -73) -73]
Test Case: 843 | Input/Output: [(-11 98 32 91) -11]
Test Case: 844 | Input/Output: [(-99 97 -37 -34) -99]
Test Case: 845 | Input/Output: [(-96 63 -17 59) -96]
Test Case: 846 | Input/Output: [(1 10 -50 -18) -50]
Test Case: 847 | Input/Output: [(18 -91 -91 -69) -91]
Test Case: 848 | Input/Output: [(38 -92 -85 5) -92]
Test Case: 849 | Input/Output: [(-31 63 -83 -80) -83]
Test Case: 850 | Input/Output: [(-82 53 -12 1) -82]
Test Case: 851 | Input/Output: [(93 -55 54 -44) -55]
Test Case: 852 | Input/Output: [(72 -96 44 81) -96]
Test Case: 853 | Input/Output: [(63 89 83 -43) -43]
Test Case: 854 | Input/Output: [(62 20 -76 -24) -76]
Test Case: 855 | Input/Output: [(-17 80 -4 29) -17]
Test Case: 856 | Input/Output: [(-24 27 -39 -32) -39]
Test Case: 857 | Input/Output: [(-67 46 21 98) -67]
Test Case: 858 | Input/Output: [(62 2 23 78) 2]
Test Case: 859 | Input/Output: [(-42 -51 35 -42) -51]
Test Case: 860 | Input/Output: [(-62 -89 -23 71) -89]
Test Case: 861 | Input/Output: [(-83 71 -96 1) -96]
Test Case: 862 | Input/Output: [(-50 28 60 29) -50]
Test Case: 863 | Input/Output: [(-22 -73 -30 -16) -73]
Test Case: 864 | Input/Output: [(-3 -63 -62 -70) -70]
Test Case: 865 | Input/Output: [(-56 9 -33 66) -56]
Test Case: 866 | Input/Output: [(-86 13 38 4) -86]
Test Case: 867 | Input/Output: [(80 -94 10 93) -94]
Test Case: 868 | Input/Output: [(-9 84 56 -36) -36]
Test Case: 869 | Input/Output: [(75 13 -91 -65) -91]
Test Case: 870 | Input/Output: [(98 -9 99 -88) -88]
Test Case: 871 | Input/Output: [(17 59 -78 -40) -78]
Test Case: 872 | Input/Output: [(18 -75 -22 -16) -75]
Test Case: 873 | Input/Output: [(82 -28 -91 72) -91]
Test Case: 874 | Input/Output: [(40 13 44 40) 13]
Test Case: 875 | Input/Output: [(-60 -87 -42 72) -87]
Test Case: 876 | Input/Output: [(-9 87 -17 -82) -82]
Test Case: 877 | Input/Output: [(-75 -45 50 -28) -75]
Test Case: 878 | Input/Output: [(-72 96 -22 25) -72]
Test Case: 879 | Input/Output: [(72 92 -94 59) -94]
Test Case: 880 | Input/Output: [(57 -21 33 75) -21]
Test Case: 881 | Input/Output: [(-51 76 88 -75) -75]
Test Case: 882 | Input/Output: [(46 -9 -15 -14) -15]
Test Case: 883 | Input/Output: [(25 12 66 4) 4]
Test Case: 884 | Input/Output: [(63 -75 -11 -98) -98]
Test Case: 885 | Input/Output: [(96 -11 40 -100) -100]
Test Case: 886 | Input/Output: [(-44 -94 -51 -1) -94]
Test Case: 887 | Input/Output: [(-88 6 66 -42) -88]
Test Case: 888 | Input/Output: [(38 73 2 83) 2]
Test Case: 889 | Input/Output: [(37 28 -19 -38) -38]
Test Case: 890 | Input/Output: [(52 4 -76 4) -76]
Test Case: 891 | Input/Output: [(-31 -100 -81 -9) -100]
Test Case: 892 | Input/Output: [(-90 87 65 91) -90]
Test Case: 893 | Input/Output: [(-80 5 -72 -26) -80]
Test Case: 894 | Input/Output: [(29 -22 -67 55) -67]
Test Case: 895 | Input/Output: [(53 55 -10 62) -10]
Test Case: 896 | Input/Output: [(48 -43 -39 -38) -43]
Test Case: 897 | Input/Output: [(-12 38 44 40) -12]
Test Case: 898 | Input/Output: [(82 -96 -14 -77) -96]
Test Case: 899 | Input/Output: [(18 10 -60 66) -60]
Test Case: 900 | Input/Output: [(23 58 -75 -43) -75]
Test Case: 901 | Input/Output: [(89 28 -20 16) -20]
Test Case: 902 | Input/Output: [(71 -65 35 -63) -65]
Test Case: 903 | Input/Output: [(12 42 69 -58) -58]
Test Case: 904 | Input/Output: [(-33 -90 -47 -82) -90]
Test Case: 905 | Input/Output: [(22 -87 55 -39) -87]
Test Case: 906 | Input/Output: [(-28 -54 -53 -74) -74]
Test Case: 907 | Input/Output: [(5 62 -61 21) -61]
Test Case: 908 | Input/Output: [(-43 10 74 -62) -62]
Test Case: 909 | Input/Output: [(50 91 -20 -51) -51]
Test Case: 910 | Input/Output: [(86 2 23 -22) -22]
Test Case: 911 | Input/Output: [(31 67 87 -95) -95]
Test Case: 912 | Input/Output: [(97 96 25 -58) -58]
Test Case: 913 | Input/Output: [(49 66 -60 59) -60]
Test Case: 914 | Input/Output: [(-71 34 -93 -50) -93]
Test Case: 915 | Input/Output: [(-53 -68 -75 -56) -75]
Test Case: 916 | Input/Output: [(45 -46 96 60) -46]
Test Case: 917 | Input/Output: [(67 95 64 61) 61]
Test Case: 918 | Input/Output: [(-54 -35 -55 -19) -55]
Test Case: 919 | Input/Output: [(-74 -83 84 -6) -83]
Test Case: 920 | Input/Output: [(28 15 3 -43) -43]
Test Case: 921 | Input/Output: [(-9 -84 97 6) -84]
Test Case: 922 | Input/Output: [(39 -24 -51 21) -51]
Test Case: 923 | Input/Output: [(24 26 -94 1) -94]
Test Case: 924 | Input/Output: [(13 30 13 31) 13]
Test Case: 925 | Input/Output: [(-47 -78 57 53) -78]
Test Case: 926 | Input/Output: [(52 -100 -33 58) -100]
Test Case: 927 | Input/Output: [(-77 -48 90 1) -77]
Test Case: 928 | Input/Output: [(-51 -17 37 -39) -51]
Test Case: 929 | Input/Output: [(86 39 85 -96) -96]
Test Case: 930 | Input/Output: [(-98 23 -40 10) -98]
Test Case: 931 | Input/Output: [(8 74 38 35) 8]
Test Case: 932 | Input/Output: [(86 -12 -88 -12) -88]
Test Case: 933 | Input/Output: [(82 83 -86 84) -86]
Test Case: 934 | Input/Output: [(48 32 55 22) 22]
Test Case: 935 | Input/Output: [(-83 -68 -68 -37) -83]
Test Case: 936 | Input/Output: [(1 61 -24 -21) -24]
Test Case: 937 | Input/Output: [(-40 -59 -14 -71) -71]
Test Case: 938 | Input/Output: [(86 87 28 87) 28]
Test Case: 939 | Input/Output: [(-18 -59 83 93) -59]
Test Case: 940 | Input/Output: [(-93 -81 65 -42) -93]
Test Case: 941 | Input/Output: [(-27 20 54 -73) -73]
Test Case: 942 | Input/Output: [(-33 74 6 31) -33]
Test Case: 943 | Input/Output: [(10 67 69 28) 10]
Test Case: 944 | Input/Output: [(-80 -5 -10 41) -80]
Test Case: 945 | Input/Output: [(-64 43 93 81) -64]
Test Case: 946 | Input/Output: [(50 25 0 -78) -78]
Test Case: 947 | Input/Output: [(-5 -43 59 77) -43]
Test Case: 948 | Input/Output: [(41 -23 83 -100) -100]
Test Case: 949 | Input/Output: [(-72 -45 -30 14) -72]
Test Case: 950 | Input/Output: [(54 12 8 39) 8]
Test Case: 951 | Input/Output: [(93 -6 4 86) -6]
Test Case: 952 | Input/Output: [(-80 -95 38 63) -95]
Test Case: 953 | Input/Output: [(-26 -1 36 -51) -51]
Test Case: 954 | Input/Output: [(-31 -87 45 4) -87]
Test Case: 955 | Input/Output: [(25 83 -64 -47) -64]
Test Case: 956 | Input/Output: [(47 -27 81 44) -27]
Test Case: 957 | Input/Output: [(97 45 -75 21) -75]
Test Case: 958 | Input/Output: [(-73 -27 65 -29) -73]
Test Case: 959 | Input/Output: [(-47 -43 18 -31) -47]
Test Case: 960 | Input/Output: [(80 -7 18 -49) -49]
Test Case: 961 | Input/Output: [(-66 6 -16 72) -66]
Test Case: 962 | Input/Output: [(-84 -76 -89 80) -89]
Test Case: 963 | Input/Output: [(-61 -13 -95 -21) -95]
Test Case: 964 | Input/Output: [(18 -8 -65 -43) -65]
Test Case: 965 | Input/Output: [(17 81 -75 1) -75]
Test Case: 966 | Input/Output: [(-77 51 -85 45) -85]
Test Case: 967 | Input/Output: [(-6 87 12 -64) -64]
Test Case: 968 | Input/Output: [(48 65 -85 -10) -85]
Test Case: 969 | Input/Output: [(37 34 31 -21) -21]
Test Case: 970 | Input/Output: [(-56 75 -57 71) -57]
Test Case: 971 | Input/Output: [(-37 91 -63 -42) -63]
Test Case: 972 | Input/Output: [(11 -70 -48 52) -70]
Test Case: 973 | Input/Output: [(-66 49 -60 62) -66]
Test Case: 974 | Input/Output: [(-77 -58 -42 32) -77]
Test Case: 975 | Input/Output: [(-56 9 88 4) -56]
Test Case: 976 | Input/Output: [(62 99 -5 23) -5]
Test Case: 977 | Input/Output: [(6 -8 -82 51) -82]
Test Case: 978 | Input/Output: [(57 -66 91 -11) -66]
Test Case: 979 | Input/Output: [(-14 38 -100 -73) -100]
Test Case: 980 | Input/Output: [(-16 -89 48 72) -89]
Test Case: 981 | Input/Output: [(64 -10 -14 -100) -100]
Test Case: 982 | Input/Output: [(51 56 77 12) 12]
Test Case: 983 | Input/Output: [(-88 15 82 100) -88]
Test Case: 984 | Input/Output: [(-90 -6 -94 69) -94]
Test Case: 985 | Input/Output: [(-49 8 66 -78) -78]
Test Case: 986 | Input/Output: [(-27 -20 -25 -65) -65]
Test Case: 987 | Input/Output: [(90 51 -28 -87) -87]
Test Case: 988 | Input/Output: [(-32 -17 12 -41) -41]
Test Case: 989 | Input/Output: [(68 -37 -48 -93) -93]
Test Case: 990 | Input/Output: [(11 -44 -3 72) -44]
Test Case: 991 | Input/Output: [(60 5 21 -5) -5]
Test Case: 992 | Input/Output: [(90 -64 54 -34) -64]
Test Case: 993 | Input/Output: [(57 -51 -53 27) -53]
Test Case: 994 | Input/Output: [(97 47 16 -32) -32]
Test Case: 995 | Input/Output: [(-98 83 -7 -22) -98]
Test Case: 996 | Input/Output: [(77 12 -63 70) -63]
Test Case: 997 | Input/Output: [(-11 -47 38 -50) -50]
Test Case: 998 | Input/Output: [(-34 27 -83 25) -83]
Test Case: 999 | Input/Output: [(-39 -51 59 70) -51]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -84 -85 -89 -73 -98 84 7 -3 28 -85 66 -98 -66 7 7 -45
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[92 21 92 92] 21] [[38 38 25 38] 25] [[36 -81 36 36] -81] [[63 72 63 63] 63] [[-65 7 7 7] -65] [[-47 -47 71 -47] -47] [[-29 -29 -29 -8] -29] [[-59 -85 -85 -85] -85] [[-22 53 53 53] -22] [[52 52 49 52] 49] [(4 4 4 4) 4] [(28 28 28 28) 28] [(-50 -50 -50 -50) -50] [(-32 -32 -32 -32) -32] [(11 11 11 11) 11] [(33 74 79 21) 21] [(17 54 23 64) 17] [(63 69 9 9) 9] [(24 98 76 86) 24] [(47 70 30 64) 30] [(23 34 90 37) 23] [(47 21 27 87) 21] [(47 0 27 23) 0] [(12 71 89 17) 12] [(10 98 4 71) 4] [(57 30 13 75) 13] [(45 19 25 93) 19] [(50 96 42 8) 8] [(2 83 53 7) 2] [(77 31 60 17) 17] [(29 21 65 27) 21] [(82 6 80 0) 0] [(6 10 97 15) 6] [(85 82 81 32) 32] [(97 75 80 5) 5] [(47 -23 -35 76) -35] [(-87 -35 -94 -83) -94] [(39 -86 28 -26) -86] [(19 -59 48 -33) -59] [(-96 33 -26 -86) -96] [(-94 25 -74 14) -94] [(6 32 -76 24) -76] [(61 100 -54 14) -54] [(73 51 -68 -54) -68] [(-92 -43 81 -61) -92] [(-16 -60 -44 -19) -60] [(5 40 -45 92) -45] [(-68 52 95 -46) -68] [(-70 4 -78 -64) -78] [(-19 92 18 36) -19] [(-61 -66 59 17) -66] [(67 -6 23 -77) -77] [(-8 -83 -21 -85) -85] [(-42 88 -14 26) -42] [(-71 29 -70 -29) -71] [(52 72 80 0) 0] [(93 78 60 98) 60] [(25 -89 -20 9) -89] [(52 -92 70 -54) -92] [(22 31 42 -68) -68] [(91 17 -55 1) -55] [(-34 -75 -4 -71) -75] [(43 -58 -60 -9) -60] [(-27 19 -7 51) -27] [(12 43 35 55) 12] [(-88 51 60 -86) -88] [(80 -65 -53 90) -65] [(-5 53 12 95) -5] [(58 -26 77 -23) -26] [(64 90 96 -41) -41] [(-34 26 59 69) -34] [(66 -30 -7 -66) -66] [(95 -31 50 -18) -31] [(-66 17 -9 89) -66] [(23 -15 59 -44) -44] [(-8 33 52 52) -8] [(-59 -87 52 30) -87] [(-65 29 19 37) -65] [(-5 -57 22 -41) -57] [(-15 46 24 11) -15] [(34 46 -43 5) -43] [(-87 56 -25 71) -87] [(-78 57 -81 48) -81] [(-64 38 -27 -95) -95] [(-61 -50 22 11) -61] [(86 91 73 -49) -49] [(35 -75 -67 4) -75] [(-92 -69 54 44) -92] [(-96 -81 29 92) -96] [(93 -16 -26 -49) -49] [(83 53 40 35) 35] [(-14 83 -73 -25) -73] [(28 44 97 2) 2] [(51 -85 -81 98) -85] [(-69 -24 -10 38) -69])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 25                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: 7                  
Correct output: -47                 | Program output: 71                 
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 79                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 76                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 90                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 27                 
Correct output: 12                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 25                 
Correct output: 8                   | Program output: 42                 
Correct output: 2                   | Program output: 53                 
Correct output: 17                  | Program output: 60                 
Correct output: 21                  | Program output: 65                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 97                 
Correct output: 32                  | Program output: 81                 
Correct output: 5                   | Program output: 80                 
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 28                 
Correct output: -59                 | Program output: 48                 
Correct output: -96                 | Program output: -26                
Correct output: -94                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 81                 
Correct output: -60                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: 95                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 18                 
Correct output: -66                 | Program output: 59                 
Correct output: -77                 | Program output: 23                 
Correct output: -85                 | Program output: -21                
Correct output: -42                 | Program output: -14                
Correct output: -71                 | Program output: -70                
Correct output: 0                   | Program output: 80                 
Correct output: 60                  | Program output: 60                 
Correct output: -89                 | Program output: -20                
Correct output: -92                 | Program output: 70                 
Correct output: -68                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -75                 | Program output: -4                 
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -7                 
Correct output: 12                  | Program output: 35                 
Correct output: -88                 | Program output: 60                 
Correct output: -65                 | Program output: -53                
Correct output: -5                  | Program output: 12                 
Correct output: -26                 | Program output: 77                 
Correct output: -41                 | Program output: 96                 
Correct output: -34                 | Program output: 59                 
Correct output: -66                 | Program output: -7                 
Correct output: -31                 | Program output: 50                 
Correct output: -66                 | Program output: -9                 
Correct output: -44                 | Program output: 59                 
Correct output: -8                  | Program output: 52                 
Correct output: -87                 | Program output: 52                 
Correct output: -65                 | Program output: 19                 
Correct output: -57                 | Program output: 22                 
Correct output: -15                 | Program output: 24                 
Correct output: -43                 | Program output: -43                
Correct output: -87                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -27                
Correct output: -61                 | Program output: 22                 
Correct output: -49                 | Program output: 73                 
Correct output: -75                 | Program output: -67                
Correct output: -92                 | Program output: 54                 
Correct output: -96                 | Program output: 29                 
Correct output: -49                 | Program output: -26                
Correct output: 35                  | Program output: 40                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 97                 
Correct output: -85                 | Program output: -81                
Correct output: -69                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (integer_max exec_y_when_autoconstructing (integer_dup) integer_lt in3 print_integer exec_dup_times () boolean_dup boolean_invert_second_then_and integer_lt exec_do*times (boolean_yank in2 exec_rot (exec_swap () (exec_yank integer_yankdup boolean_invert_first_then_and integer_min)) (exec_if (exec_stackdepth exec_noop) (boolean_dup in2) boolean_dup_items) (exec_when () exec_dup_items) integer_empty exec_if (boolean_not exec_do*while (integer_max exec_do*while (integer_max boolean_or integer_pop exec_flush exec_swap (boolean_dup integer_dec exec_dup_times () integer_mult exec_do*times (boolean_dup_times) integer_mod boolean_dup_items exec_s (exec_when (exec_swap () (integer_div exec_k (integer_shove boolean_dup_times) (exec_s () (in2 integer_fromboolean integer_dup_items exec_do*times () boolean_dup_items boolean_or exec_y_when_autoconstructing () integer_shove) () exec_pop (exec_if (integer_sub exec_dup_items boolean_eq exec_eq integer_empty in2 exec_shove (exec_do*count () integer_yankdup exec_noop) boolean_xor integer_dup_times integer_yank boolean_invert_first_then_and boolean_xor exec_yankdup exec_dup_items integer_dup integer_fromboolean) ()))))) () ()) ()))) ()))
Lexicase best errors: [0 1 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 121
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (integer_max exec_y_when_autoconstructing (integer_dup) integer_lt in3 print_integer exec_dup_times () boolean_dup boolean_invert_second_then_and integer_lt exec_do*times (boolean_yank in2 exec_rot (exec_swap () (exec_yank integer_yankdup boolean_invert_first_then_and integer_min)) (exec_if (exec_stackdepth exec_noop) (boolean_dup in2) boolean_dup_items) (exec_when () exec_dup_items) integer_empty exec_if (boolean_not exec_do*while (integer_max exec_do*while (integer_max boolean_or integer_pop exec_flush exec_swap (boolean_dup integer_dec exec_dup_times () integer_mult exec_do*times (boolean_dup_times) integer_mod boolean_dup_items exec_s (exec_when (exec_swap () (integer_div exec_k (integer_shove boolean_dup_times) (exec_s () (in2 integer_fromboolean integer_dup_items exec_do*times () boolean_dup_items boolean_or exec_y_when_autoconstructing () integer_shove) () exec_pop (exec_if (integer_sub exec_dup_items boolean_eq exec_eq integer_empty in2 exec_shove (exec_do*count () integer_yankdup exec_noop) boolean_xor integer_dup_times integer_yank boolean_invert_first_then_and boolean_xor exec_yankdup exec_dup_items integer_dup integer_fromboolean) ()))))) () ()) ()))) ()))
Zero cases best errors: [0 1 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 121
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 1 2 8 3 5 2 13 6 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (5 1 2 8 3 5 2 13 6 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_eq integer_lt in3 boolean_dup print_integer boolean_empty exec_do*count (integer_eq boolean_dup exec_swap (boolean_and exec_dup_times (exec_dup_times (integer_yank exec_dup_items boolean_not boolean_eq boolean_stackdepth))) ()))
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 25
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 9.952
Median total errors in population: 10
Error averages by case: (0.995 0.999 0.998 0.992 0.997 0.995 0.998 0.987 0.994 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.637
Average program size in population (points): 69.69
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 494558
--- Timings ---
Current time: 1559593747644 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 29.1%
Fitness Testing:      1.7 seconds, 67.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 765
Test mean error for best: 0.76500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 21                  | Program output: 17                 
Correct output: 25                  | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: 63                  | Program output:                    
Correct output: -65                 | Program output: 3                  
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output:                    
Correct output: 49                  | Program output:                    
Correct output: 4                   | Program output: 0                  
Correct output: 28                  | Program output: 24                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 7                  
Correct output: 21                  | Program output:                    
Correct output: 17                  | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 24                  | Program output:                    
Correct output: 30                  | Program output:                    
Correct output: 23                  | Program output: 30                 
Correct output: 21                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 13                  | Program output: 26                 
Correct output: 19                  | Program output: 15                 
Correct output: 8                   | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: 17                  | Program output: 27                 
Correct output: 21                  | Program output: 17                 
Correct output: 0                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output:                    
Correct output: 5                   | Program output:                    
Correct output: -35                 | Program output: -23                
Correct output: -94                 | Program output: -35                
Correct output: -86                 | Program output: -86                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 29                 
Correct output: -94                 | Program output: 21                 
Correct output: -76                 | Program output: 28                 
Correct output: -54                 | Program output:                    
Correct output: -68                 | Program output:                    
Correct output: -92                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -45                 | Program output:                    
Correct output: -68                 | Program output:                    
Correct output: -78                 | Program output: 0                  
Correct output: -19                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -6                 
Correct output: -85                 | Program output: -83                
Correct output: -42                 | Program output:                    
Correct output: -71                 | Program output: 25                 
Correct output: 0                   | Program output:                    
Correct output: 60                  | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 27                 
Correct output: -55                 | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -58                
Correct output: -27                 | Program output: 15                 
Correct output: 12                  | Program output:                    
Correct output: -88                 | Program output:                    
Correct output: -65                 | Program output: -65                
Correct output: -5                  | Program output:                    
Correct output: -26                 | Program output: -26                
Correct output: -41                 | Program output:                    
Correct output: -34                 | Program output: 22                 
Correct output: -66                 | Program output: -30                
Correct output: -31                 | Program output: -31                
Correct output: -66                 | Program output: 13                 
Correct output: -44                 | Program output: -15                
Correct output: -8                  | Program output: 29                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 25                 
Correct output: -57                 | Program output: -57                
Correct output: -15                 | Program output:                    
Correct output: -43                 | Program output:                    
Correct output: -87                 | Program output:                    
Correct output: -81                 | Program output:                    
Correct output: -95                 | Program output:                    
Correct output: -61                 | Program output: -50                
Correct output: -49                 | Program output:                    
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -69                
Correct output: -96                 | Program output: -81                
Correct output: -49                 | Program output: -16                
Correct output: 35                  | Program output:                    
Correct output: -73                 | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_dup_times in2 boolean_dup_times exec_swap () (exec_do*count () integer_mult) boolean_invert_second_then_and integer_lte print_integer)
Lexicase best errors: [0 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_dup_times in2 boolean_dup_times exec_swap () (exec_do*count () integer_mult) boolean_invert_second_then_and integer_lte print_integer)
Zero cases best errors: [0 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (512 105 202 102 146 147 202 146 58 104)
Population mean number of elite cases: 1.72
Count of perfect (error zero) individuals by case: (512 105 202 102 146 147 202 146 58 104)
Population mean number of perfect (error zero) cases: 1.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer})
Best program: (boolean_dup_times in2 boolean_dup_times exec_swap () (exec_do*count () integer_mult) boolean_invert_second_then_and integer_lte print_integer)
Errors: [0 1 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 9
Size: 13
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 8.276
Median total errors in population: 8
Error averages by case: (0.488 0.895 0.798 0.898 0.854 0.853 0.798 0.854 0.942 0.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.865
Average program size in population (points): 63.776
Average percent parens in population: 0.274
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 872708
--- Timings ---
Current time: 1559593749639 milliseconds
Total Time:           4.6 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         1.8 seconds, 40.3%
Fitness Testing:      2.3 seconds, 50.4%
Report:               0.3 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 25                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: 7                  
Correct output: -47                 | Program output: 71                 
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 79                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 76                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 90                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 27                 
Correct output: 12                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 25                 
Correct output: 8                   | Program output: 42                 
Correct output: 2                   | Program output: 53                 
Correct output: 17                  | Program output: 60                 
Correct output: 21                  | Program output: 65                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 97                 
Correct output: 32                  | Program output: 81                 
Correct output: 5                   | Program output: 80                 
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 28                 
Correct output: -59                 | Program output: 48                 
Correct output: -96                 | Program output: -26                
Correct output: -94                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 81                 
Correct output: -60                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: 95                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 18                 
Correct output: -66                 | Program output: 59                 
Correct output: -77                 | Program output: 23                 
Correct output: -85                 | Program output: -21                
Correct output: -42                 | Program output: -14                
Correct output: -71                 | Program output: -70                
Correct output: 0                   | Program output: 80                 
Correct output: 60                  | Program output: 60                 
Correct output: -89                 | Program output: -20                
Correct output: -92                 | Program output: 70                 
Correct output: -68                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -75                 | Program output: -4                 
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -7                 
Correct output: 12                  | Program output: 35                 
Correct output: -88                 | Program output: 60                 
Correct output: -65                 | Program output: -53                
Correct output: -5                  | Program output: 12                 
Correct output: -26                 | Program output: 77                 
Correct output: -41                 | Program output: 96                 
Correct output: -34                 | Program output: 59                 
Correct output: -66                 | Program output: -7                 
Correct output: -31                 | Program output: 50                 
Correct output: -66                 | Program output: -9                 
Correct output: -44                 | Program output: 59                 
Correct output: -8                  | Program output: 52                 
Correct output: -87                 | Program output: 52                 
Correct output: -65                 | Program output: 19                 
Correct output: -57                 | Program output: 22                 
Correct output: -15                 | Program output: 24                 
Correct output: -43                 | Program output: -43                
Correct output: -87                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -27                
Correct output: -61                 | Program output: 22                 
Correct output: -49                 | Program output: 73                 
Correct output: -75                 | Program output: -67                
Correct output: -92                 | Program output: 54                 
Correct output: -96                 | Program output: 29                 
Correct output: -49                 | Program output: -26                
Correct output: 35                  | Program output: 40                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 97                 
Correct output: -85                 | Program output: -81                
Correct output: -69                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (integer_max exec_y_when_autoconstructing (integer_dup) in3 print_integer exec_dup_times () boolean_dup boolean_flush integer_lt exec_do*times (boolean_yank in2 exec_rot (exec_swap () (exec_yank integer_yankdup boolean_invert_first_then_and integer_min)) (exec_if (exec_stackdepth exec_stackdepth exec_noop) (in2) exec_when () exec_dup_items) (integer_empty exec_empty exec_do*while (integer_max exec_do*while (integer_max exec_k (boolean_or integer_pop exec_flush integer_dup_times exec_swap (exec_shove (boolean_dup integer_dec exec_dup_times () exec_do*times (boolean_dup_times) boolean_dup_items exec_s (exec_when (exec_swap () (exec_s_when_autoconstructing (integer_div exec_k (integer_shove boolean_dup_times) (boolean_eq exec_s () (integer_fromboolean integer_dup_items exec_do*times () boolean_dup_items boolean_or exec_y_when_autoconstructing () boolean_and exec_pop (exec_if (exec_dup_items integer_sub exec_dup_items in3 boolean_eq integer_empty exec_dup_items exec_do*count () integer_yankdup exec_yank integer_lt boolean_xor integer_dup_times boolean_yankdup boolean_xor in4 exec_yankdup integer_dup integer_fromboolean) ())) ())) () ()))) () ())) ()) ())))))
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 123
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (integer_max exec_y_when_autoconstructing (integer_dup) in3 print_integer exec_dup_times () boolean_dup boolean_flush integer_lt exec_do*times (boolean_yank in2 exec_rot (exec_swap () (exec_yank integer_yankdup boolean_invert_first_then_and integer_min)) (exec_if (exec_stackdepth exec_stackdepth exec_noop) (in2) exec_when () exec_dup_items) (integer_empty exec_empty exec_do*while (integer_max exec_do*while (integer_max exec_k (boolean_or integer_pop exec_flush integer_dup_times exec_swap (exec_shove (boolean_dup integer_dec exec_dup_times () exec_do*times (boolean_dup_times) boolean_dup_items exec_s (exec_when (exec_swap () (exec_s_when_autoconstructing (integer_div exec_k (integer_shove boolean_dup_times) (boolean_eq exec_s () (integer_fromboolean integer_dup_items exec_do*times () boolean_dup_items boolean_or exec_y_when_autoconstructing () boolean_and exec_pop (exec_if (exec_dup_items integer_sub exec_dup_items in3 boolean_eq integer_empty exec_dup_items exec_do*count () integer_yankdup exec_yank integer_lt boolean_xor integer_dup_times boolean_yankdup boolean_xor in4 exec_yankdup integer_dup integer_fromboolean) ())) ())) () ()))) () ())) ()) ())))))
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 123
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 128 21 88 441 59 128 19 130 129)
Population mean number of elite cases: 1.33
Count of perfect (error zero) individuals by case: (184 128 21 88 441 59 128 19 130 129)
Population mean number of perfect (error zero) cases: 1.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 96} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction tagged_186} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction -43} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times})
Best program: (in3 exec_y_when_autoconstructing () 96 exec_s (exec_swap () (tagged_186 integer_dup_items exec_dup_times (print_integer) print_integer exec_dup_times (exec_flush integer_lt exec_stackdepth boolean_dup_times boolean_not integer_dec integer_lt exec_eq -43 integer_min exec_do*times ()))) () ())
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 8.673
Median total errors in population: 9
Error averages by case: (0.816 0.872 0.979 0.912 0.559 0.941 0.872 0.981 0.87 0.871)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.779
Average program size in population (points): 45.856
Average percent parens in population: 0.289
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1314808
--- Timings ---
Current time: 1559593751759 milliseconds
Total Time:           6.7 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.2 seconds, 47.4%
Fitness Testing:      2.8 seconds, 41.2%
Report:               0.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 38                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: 7                  
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -8                 
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: 53                 
Correct output: 49                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 64                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 86                 
Correct output: 30                  | Program output: 64                 
Correct output: 23                  | Program output: 37                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 23                 
Correct output: 12                  | Program output: 17                 
Correct output: 4                   | Program output: 71                 
Correct output: 13                  | Program output: 75                 
Correct output: 19                  | Program output: 93                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 7                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: -35                 | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -86                 | Program output: -26                
Correct output: -59                 | Program output: -33                
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: 14                 
Correct output: -76                 | Program output: 24                 
Correct output: -54                 | Program output: 14                 
Correct output: -68                 | Program output: -54                
Correct output: -92                 | Program output: -61                
Correct output: -60                 | Program output: -19                
Correct output: -45                 | Program output: 92                 
Correct output: -68                 | Program output: -46                
Correct output: -78                 | Program output: -64                
Correct output: -19                 | Program output: 36                 
Correct output: -66                 | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: 26                 
Correct output: -71                 | Program output: -29                
Correct output: 0                   | Program output: 0                  
Correct output: 60                  | Program output: 98                 
Correct output: -89                 | Program output: 9                  
Correct output: -92                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: 1                  
Correct output: -75                 | Program output: -71                
Correct output: -60                 | Program output: -9                 
Correct output: -27                 | Program output: 51                 
Correct output: 12                  | Program output: 55                 
Correct output: -88                 | Program output: -86                
Correct output: -65                 | Program output: 90                 
Correct output: -5                  | Program output: 95                 
Correct output: -26                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -34                 | Program output: 69                 
Correct output: -66                 | Program output: -66                
Correct output: -31                 | Program output: -18                
Correct output: -66                 | Program output: 89                 
Correct output: -44                 | Program output: -44                
Correct output: -8                  | Program output: 52                 
Correct output: -87                 | Program output: 30                 
Correct output: -65                 | Program output: 37                 
Correct output: -57                 | Program output: -41                
Correct output: -15                 | Program output: 11                 
Correct output: -43                 | Program output: 5                  
Correct output: -87                 | Program output: 71                 
Correct output: -81                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: 11                 
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: 4                  
Correct output: -92                 | Program output: 44                 
Correct output: -96                 | Program output: 92                 
Correct output: -49                 | Program output: -49                
Correct output: 35                  | Program output: 35                 
Correct output: -73                 | Program output: -25                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: 98                 
Correct output: -69                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 2, :instruction print_exec} {:close 0, :instruction exec_dup_items})
Lexicase best program: (boolean_or integer_mod in4 integer_max boolean_invert_second_then_and print_integer exec_pop (integer_shove boolean_rot boolean_or print_exec (boolean_swap exec_yank integer_yankdup exec_noop integer_lte exec_swap () (boolean_dup integer_mod) print_integer boolean_yank) print_exec ()) exec_dup_items)
Lexicase best errors: [1 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 2, :instruction print_exec} {:close 0, :instruction exec_dup_items})
Zero cases best program: (boolean_or integer_mod in4 integer_max boolean_invert_second_then_and print_integer exec_pop (integer_shove boolean_rot boolean_or print_exec (boolean_swap exec_yank integer_yankdup exec_noop integer_lte exec_swap () (boolean_dup integer_mod) print_integer boolean_yank) print_exec ()) exec_dup_items)
Zero cases best errors: [1 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 83 51 83 51 141 389 83 352 141)
Population mean number of elite cases: 1.68
Count of perfect (error zero) individuals by case: (304 83 51 83 51 141 389 83 352 141)
Population mean number of perfect (error zero) cases: 1.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items})
Best program: (integer_mod in4 boolean_invert_second_then_and exec_y (print_integer boolean_swap exec_pop (exec_k_when_autoconstructing (integer_shove boolean_rot print_exec (exec_noop integer_lte boolean_rot exec_swap () (in1 boolean_dup print_integer print_exec ()) exec_swap (exec_dup_items) ())) ())))
Errors: [1 0 1 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 8.322
Median total errors in population: 8
Error averages by case: (0.696 0.917 0.949 0.917 0.949 0.859 0.611 0.917 0.648 0.859)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.927
Average program size in population (points): 58.745
Average percent parens in population: 0.282
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.952
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1652299
--- Timings ---
Current time: 1559593754554 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.4 seconds, 50.5%
Fitness Testing:      3.2 seconds, 36.9%
Report:               1.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 25                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: 7                  
Correct output: -47                 | Program output: 71                 
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 79                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 76                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 90                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 27                 
Correct output: 12                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 25                 
Correct output: 8                   | Program output: 42                 
Correct output: 2                   | Program output: 53                 
Correct output: 17                  | Program output: 60                 
Correct output: 21                  | Program output: 65                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 97                 
Correct output: 32                  | Program output: 81                 
Correct output: 5                   | Program output: 80                 
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 28                 
Correct output: -59                 | Program output: 48                 
Correct output: -96                 | Program output: -26                
Correct output: -94                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 81                 
Correct output: -60                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: 95                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 18                 
Correct output: -66                 | Program output: 59                 
Correct output: -77                 | Program output: 23                 
Correct output: -85                 | Program output: -21                
Correct output: -42                 | Program output: -14                
Correct output: -71                 | Program output: -70                
Correct output: 0                   | Program output: 80                 
Correct output: 60                  | Program output: 60                 
Correct output: -89                 | Program output: -20                
Correct output: -92                 | Program output: 70                 
Correct output: -68                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -75                 | Program output: -4                 
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -7                 
Correct output: 12                  | Program output: 35                 
Correct output: -88                 | Program output: 60                 
Correct output: -65                 | Program output: -53                
Correct output: -5                  | Program output: 12                 
Correct output: -26                 | Program output: 77                 
Correct output: -41                 | Program output: 96                 
Correct output: -34                 | Program output: 59                 
Correct output: -66                 | Program output: -7                 
Correct output: -31                 | Program output: 50                 
Correct output: -66                 | Program output: -9                 
Correct output: -44                 | Program output: 59                 
Correct output: -8                  | Program output: 52                 
Correct output: -87                 | Program output: 52                 
Correct output: -65                 | Program output: 19                 
Correct output: -57                 | Program output: 22                 
Correct output: -15                 | Program output: 24                 
Correct output: -43                 | Program output: -43                
Correct output: -87                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -27                
Correct output: -61                 | Program output: 22                 
Correct output: -49                 | Program output: 73                 
Correct output: -75                 | Program output: -67                
Correct output: -92                 | Program output: 54                 
Correct output: -96                 | Program output: 29                 
Correct output: -49                 | Program output: -26                
Correct output: 35                  | Program output: 40                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 97                 
Correct output: -85                 | Program output: -81                
Correct output: -69                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_442} {:close 0, :instruction exec_noop})
Lexicase best program: (boolean_pop boolean_eq integer_lt in3 exec_s_when_autoconstructing (print_integer integer_add boolean_dup integer_div) (exec_swap (integer_yank) (exec_s (boolean_rot) (integer_lt) (exec_dup_times (integer_yank exec_dup_items boolean_eq tag_integer_442 exec_noop)))) ())
Lexicase best errors: [0 1 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_442} {:close 0, :instruction exec_noop})
Zero cases best program: (boolean_pop boolean_eq integer_lt in3 exec_s_when_autoconstructing (print_integer integer_add boolean_dup integer_div) (exec_swap (integer_yank) (exec_s (boolean_rot) (integer_lt) (exec_dup_times (integer_yank exec_dup_items boolean_eq tag_integer_442 exec_noop)))) ())
Zero cases best errors: [0 1 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (576 209 131 132 140 131 209 140 98 97)
Population mean number of elite cases: 1.86
Count of perfect (error zero) individuals by case: (576 209 131 132 140 131 209 140 98 97)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop boolean_eq in3 boolean_swap exec_empty print_integer boolean_empty exec_do*count (exec_k_when_autoconstructing (exec_swap (integer_max) (exec_empty integer_inc exec_dup_times (integer_yank exec_dup_items boolean_stackdepth))) ()))
Errors: [0 1 0 0 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 8.137
Median total errors in population: 7
Error averages by case: (0.424 0.791 0.869 0.868 0.86 0.869 0.791 0.86 0.902 0.903)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.097
Average program size in population (points): 50.622
Average percent parens in population: 0.282
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1967115
--- Timings ---
Current time: 1559593756420 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.7 seconds, 49.3%
Fitness Testing:      3.6 seconds, 31.7%
Report:               2.1 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 38                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: 7                  
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -8                 
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: 53                 
Correct output: 49                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 64                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 86                 
Correct output: 30                  | Program output: 64                 
Correct output: 23                  | Program output: 37                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 23                 
Correct output: 12                  | Program output: 17                 
Correct output: 4                   | Program output: 71                 
Correct output: 13                  | Program output: 75                 
Correct output: 19                  | Program output: 93                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 7                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: -35                 | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -86                 | Program output: -26                
Correct output: -59                 | Program output: -33                
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: 14                 
Correct output: -76                 | Program output: 24                 
Correct output: -54                 | Program output: 14                 
Correct output: -68                 | Program output: -54                
Correct output: -92                 | Program output: -61                
Correct output: -60                 | Program output: -19                
Correct output: -45                 | Program output: 92                 
Correct output: -68                 | Program output: -46                
Correct output: -78                 | Program output: -64                
Correct output: -19                 | Program output: 36                 
Correct output: -66                 | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: 26                 
Correct output: -71                 | Program output: -29                
Correct output: 0                   | Program output: 0                  
Correct output: 60                  | Program output: 98                 
Correct output: -89                 | Program output: 9                  
Correct output: -92                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: 1                  
Correct output: -75                 | Program output: -71                
Correct output: -60                 | Program output: -9                 
Correct output: -27                 | Program output: 51                 
Correct output: 12                  | Program output: 55                 
Correct output: -88                 | Program output: -86                
Correct output: -65                 | Program output: 90                 
Correct output: -5                  | Program output: 95                 
Correct output: -26                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -34                 | Program output: 69                 
Correct output: -66                 | Program output: -66                
Correct output: -31                 | Program output: -18                
Correct output: -66                 | Program output: 89                 
Correct output: -44                 | Program output: -44                
Correct output: -8                  | Program output: 52                 
Correct output: -87                 | Program output: 30                 
Correct output: -65                 | Program output: 37                 
Correct output: -57                 | Program output: -41                
Correct output: -15                 | Program output: 11                 
Correct output: -43                 | Program output: 5                  
Correct output: -87                 | Program output: 71                 
Correct output: -81                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: 11                 
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: 4                  
Correct output: -92                 | Program output: 44                 
Correct output: -96                 | Program output: 92                 
Correct output: -49                 | Program output: -49                
Correct output: 35                  | Program output: 35                 
Correct output: -73                 | Program output: -25                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: 98                 
Correct output: -69                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_noop integer_min integer_mod integer_lt in3 integer_rot boolean_dup print_integer exec_do*count (integer_shove integer_eq exec_swap (exec_dup_times (integer_yank boolean_not boolean_eq)) ()))
Lexicase best errors: [0 0 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_noop integer_min integer_mod integer_lt in3 integer_rot boolean_dup print_integer exec_do*count (integer_shove integer_eq exec_swap (exec_dup_times (integer_yank boolean_not boolean_eq)) ()))
Zero cases best errors: [0 0 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 622 166 97 146 146 145 212 167 217)
Population mean number of elite cases: 2.14
Count of perfect (error zero) individuals by case: (218 622 166 97 146 146 145 212 167 217)
Population mean number of perfect (error zero) cases: 2.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_exec_44} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction tagged_325} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div})
Best program: (in4 exec_swap (boolean_invert_second_then_and exec_rot () (integer_mult boolean_swap integer_mod) (print_integer boolean_xor boolean_frominteger boolean_pop in3 boolean_frominteger exec_do*count (integer_add integer_mod integer_dup_times) exec_eq exec_k_when_autoconstructing (exec_y_when_autoconstructing () print_integer exec_do*times (tag_exec_44 (exec_yankdup exec_k_when_autoconstructing (boolean_yankdup integer_pop) (print_exec (exec_rot (integer_sub integer_mult) (exec_eq tagged_325) (exec_swap (exec_rot (exec_yank integer_fromboolean exec_k_when_autoconstructing (exec_when (integer_gte exec_when (exec_empty print_exec (integer_empty boolean_pop integer_div)))) ()) () ()) ())))))) ())) ())
Errors: [1 0 1 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 74
Percent parens: 0.378
--- Population Statistics ---
Average total errors in population: 7.864
Median total errors in population: 7
Error averages by case: (0.782 0.378 0.834 0.903 0.854 0.854 0.855 0.788 0.833 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.988
Average program size in population (points): 50.353
Average percent parens in population: 0.277
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2282602
--- Timings ---
Current time: 1559593758467 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.1 seconds, 52.6%
Fitness Testing:      4.0 seconds, 29.7%
Report:               2.3 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: 25                  | Program output: 38                 
Correct output: -81                 | Program output: -81                
Correct output: 63                  | Program output: 72                 
Correct output: -65                 | Program output: 7                  
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: 53                 
Correct output: 49                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 74                 
Correct output: 17                  | Program output: 54                 
Correct output: 9                   | Program output: 69                 
Correct output: 24                  | Program output: 98                 
Correct output: 30                  | Program output: 70                 
Correct output: 23                  | Program output: 34                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 71                 
Correct output: 4                   | Program output: 98                 
Correct output: 13                  | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 96                 
Correct output: 2                   | Program output: 83                 
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 6                  
Correct output: 6                   | Program output: 10                 
Correct output: 32                  | Program output: 82                 
Correct output: 5                   | Program output: 75                 
Correct output: -35                 | Program output: -23                
Correct output: -94                 | Program output: -35                
Correct output: -86                 | Program output: -86                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 33                 
Correct output: -94                 | Program output: 25                 
Correct output: -76                 | Program output: 32                 
Correct output: -54                 | Program output: 100                
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -45                 | Program output: 40                 
Correct output: -68                 | Program output: 52                 
Correct output: -78                 | Program output: 4                  
Correct output: -19                 | Program output: 92                 
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -6                 
Correct output: -85                 | Program output: -83                
Correct output: -42                 | Program output: 88                 
Correct output: -71                 | Program output: 29                 
Correct output: 0                   | Program output: 72                 
Correct output: 60                  | Program output: 78                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 31                 
Correct output: -55                 | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -58                
Correct output: -27                 | Program output: 19                 
Correct output: 12                  | Program output: 43                 
Correct output: -88                 | Program output: 51                 
Correct output: -65                 | Program output: -65                
Correct output: -5                  | Program output: 53                 
Correct output: -26                 | Program output: -26                
Correct output: -41                 | Program output: 90                 
Correct output: -34                 | Program output: 26                 
Correct output: -66                 | Program output: -30                
Correct output: -31                 | Program output: -31                
Correct output: -66                 | Program output: 17                 
Correct output: -44                 | Program output: -15                
Correct output: -8                  | Program output: 33                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 29                 
Correct output: -57                 | Program output: -57                
Correct output: -15                 | Program output: 46                 
Correct output: -43                 | Program output: 46                 
Correct output: -87                 | Program output: 56                 
Correct output: -81                 | Program output: 57                 
Correct output: -95                 | Program output: 38                 
Correct output: -61                 | Program output: -50                
Correct output: -49                 | Program output: 91                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -69                
Correct output: -96                 | Program output: -81                
Correct output: -49                 | Program output: -16                
Correct output: 35                  | Program output: 53                 
Correct output: -73                 | Program output: 83                 
Correct output: 2                   | Program output: 44                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup})
Lexicase best program: (boolean_dup_times in2 boolean_dup_times exec_swap () (integer_mult) boolean_invert_second_then_and boolean_invert_first_then_and exec_y_when_autoconstructing (print_integer boolean_yankdup))
Lexicase best errors: [0 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup})
Zero cases best program: (boolean_dup_times in2 boolean_dup_times exec_swap () (integer_mult) boolean_invert_second_then_and boolean_invert_first_then_and exec_y_when_autoconstructing (print_integer boolean_yankdup))
Zero cases best errors: [0 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 213 160 201 53 201 241 53 158 414)
Population mean number of elite cases: 1.85
Count of perfect (error zero) individuals by case: (158 213 160 201 53 201 241 53 158 414)
Population mean number of perfect (error zero) cases: 1.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult})
Best program: (boolean_dup_times in2 boolean_dup_times integer_stackdepth integer_mult boolean_invert_second_then_and integer_lte integer_max print_integer integer_mult)
Errors: [0 0 0 1 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 11
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 8.148
Median total errors in population: 9
Error averages by case: (0.842 0.787 0.84 0.799 0.947 0.799 0.759 0.947 0.842 0.586)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.116
Average program size in population (points): 47.981
Average percent parens in population: 0.281
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2582535
--- Timings ---
Current time: 1559593760193 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.4 seconds, 54.6%
Fitness Testing:      4.4 seconds, 28.5%
Report:               2.5 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 38                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: 7                  
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -8                 
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: 53                 
Correct output: 49                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 64                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 86                 
Correct output: 30                  | Program output: 64                 
Correct output: 23                  | Program output: 37                 
Correct output: 21                  | Program output: 87                 
Correct output: 0                   | Program output: 23                 
Correct output: 12                  | Program output: 17                 
Correct output: 4                   | Program output: 71                 
Correct output: 13                  | Program output: 75                 
Correct output: 19                  | Program output: 93                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 7                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: -35                 | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -86                 | Program output: -26                
Correct output: -59                 | Program output: -33                
Correct output: -96                 | Program output: -86                
Correct output: -94                 | Program output: 14                 
Correct output: -76                 | Program output: 24                 
Correct output: -54                 | Program output: 14                 
Correct output: -68                 | Program output: -54                
Correct output: -92                 | Program output: -61                
Correct output: -60                 | Program output: -19                
Correct output: -45                 | Program output: 92                 
Correct output: -68                 | Program output: -46                
Correct output: -78                 | Program output: -64                
Correct output: -19                 | Program output: 36                 
Correct output: -66                 | Program output: 17                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: 26                 
Correct output: -71                 | Program output: -29                
Correct output: 0                   | Program output: 0                  
Correct output: 60                  | Program output: 98                 
Correct output: -89                 | Program output: 9                  
Correct output: -92                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: 1                  
Correct output: -75                 | Program output: -71                
Correct output: -60                 | Program output: -9                 
Correct output: -27                 | Program output: 51                 
Correct output: 12                  | Program output: 55                 
Correct output: -88                 | Program output: -86                
Correct output: -65                 | Program output: 90                 
Correct output: -5                  | Program output: 95                 
Correct output: -26                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -34                 | Program output: 69                 
Correct output: -66                 | Program output: -66                
Correct output: -31                 | Program output: -18                
Correct output: -66                 | Program output: 89                 
Correct output: -44                 | Program output: -44                
Correct output: -8                  | Program output: 52                 
Correct output: -87                 | Program output: 30                 
Correct output: -65                 | Program output: 37                 
Correct output: -57                 | Program output: -41                
Correct output: -15                 | Program output: 11                 
Correct output: -43                 | Program output: 5                  
Correct output: -87                 | Program output: 71                 
Correct output: -81                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: 11                 
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: 4                  
Correct output: -92                 | Program output: 44                 
Correct output: -96                 | Program output: 92                 
Correct output: -49                 | Program output: -49                
Correct output: 35                  | Program output: 35                 
Correct output: -73                 | Program output: -25                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: 98                 
Correct output: -69                 | Program output: 38                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 2, :instruction boolean_dup_times} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_yank boolean_dup_times in2 boolean_dup_times integer_stackdepth exec_swap () (integer_mult) boolean_invert_second_then_and integer_lte exec_empty print_integer)
Lexicase best errors: [0 1 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 14
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 2, :instruction boolean_dup_times} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_yank boolean_dup_times in2 boolean_dup_times integer_stackdepth exec_swap () (integer_mult) boolean_invert_second_then_and integer_lte exec_empty print_integer)
Zero cases best errors: [0 1 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 14
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (303 131 88 303 116 144 340 303 140 577)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (303 131 88 303 116 144 340 303 140 577)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_662} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items})
Best program: (boolean_or in4 boolean_invert_second_then_and print_integer tag_exec_662 (exec_pop (boolean_rot exec_swap () (boolean_dup integer_inc integer_mod) exec_dup_items)))
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 17
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.555
Median total errors in population: 6
Error averages by case: (0.697 0.869 0.912 0.697 0.884 0.856 0.66 0.697 0.86 0.423)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.058
Average program size in population (points): 38.055
Average percent parens in population: 0.283
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2827737
--- Timings ---
Current time: 1559593762021 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.8 seconds, 57.0%
Fitness Testing:      4.6 seconds, 27.0%
Report:               2.6 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 25                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: 7                  
Correct output: -47                 | Program output: 71                 
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 79                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 76                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 90                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 27                 
Correct output: 12                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 25                 
Correct output: 8                   | Program output: 42                 
Correct output: 2                   | Program output: 53                 
Correct output: 17                  | Program output: 60                 
Correct output: 21                  | Program output: 65                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 97                 
Correct output: 32                  | Program output: 81                 
Correct output: 5                   | Program output: 80                 
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 28                 
Correct output: -59                 | Program output: 48                 
Correct output: -96                 | Program output: -26                
Correct output: -94                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 81                 
Correct output: -60                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: 95                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 18                 
Correct output: -66                 | Program output: 59                 
Correct output: -77                 | Program output: 23                 
Correct output: -85                 | Program output: -21                
Correct output: -42                 | Program output: -14                
Correct output: -71                 | Program output: -70                
Correct output: 0                   | Program output: 80                 
Correct output: 60                  | Program output: 60                 
Correct output: -89                 | Program output: -20                
Correct output: -92                 | Program output: 70                 
Correct output: -68                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -75                 | Program output: -4                 
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -7                 
Correct output: 12                  | Program output: 35                 
Correct output: -88                 | Program output: 60                 
Correct output: -65                 | Program output: -53                
Correct output: -5                  | Program output: 12                 
Correct output: -26                 | Program output: 77                 
Correct output: -41                 | Program output: 96                 
Correct output: -34                 | Program output: 59                 
Correct output: -66                 | Program output: -7                 
Correct output: -31                 | Program output: 50                 
Correct output: -66                 | Program output: -9                 
Correct output: -44                 | Program output: 59                 
Correct output: -8                  | Program output: 52                 
Correct output: -87                 | Program output: 52                 
Correct output: -65                 | Program output: 19                 
Correct output: -57                 | Program output: 22                 
Correct output: -15                 | Program output: 24                 
Correct output: -43                 | Program output: -43                
Correct output: -87                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -27                
Correct output: -61                 | Program output: 22                 
Correct output: -49                 | Program output: 73                 
Correct output: -75                 | Program output: -67                
Correct output: -92                 | Program output: 54                 
Correct output: -96                 | Program output: 29                 
Correct output: -49                 | Program output: -26                
Correct output: 35                  | Program output: 40                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 97                 
Correct output: -85                 | Program output: -81                
Correct output: -69                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items})
Lexicase best program: (in4 integer_max boolean_dup in3 boolean_pop print_integer exec_pop (exec_do*times (print_exec (exec_empty boolean_rot exec_pop (exec_swap () (boolean_dup print_integer boolean_eq) exec_flush exec_flush exec_dup_items)))))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items})
Zero cases best program: (in4 integer_max boolean_dup in3 boolean_pop print_integer exec_pop (exec_do*times (print_exec (exec_empty boolean_rot exec_pop (exec_swap () (boolean_dup print_integer boolean_eq) exec_flush exec_flush exec_dup_items)))))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (40 199 594 180 40 181 40 40 40 247)
Population mean number of elite cases: 1.60
Count of perfect (error zero) individuals by case: (40 199 594 180 40 181 40 40 40 247)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_pop integer_max boolean_eq in3 boolean_dup print_integer boolean_empty integer_gt exec_swap (boolean_and exec_dup_times (integer_lte boolean_pop exec_dup_items exec_s_when_autoconstructing (exec_noop boolean_eq exec_do*times (boolean_stackdepth)) () ())) ())
Errors: [0 1 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 8.399
Median total errors in population: 8
Error averages by case: (0.96 0.801 0.406 0.82 0.96 0.819 0.96 0.96 0.96 0.753)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.263
Average program size in population (points): 38.194
Average percent parens in population: 0.278
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3137859
--- Timings ---
Current time: 1559593763709 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.0 seconds, 58.4%
Fitness Testing:      5.0 seconds, 26.4%
Report:               2.8 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 25                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: 7                  
Correct output: -47                 | Program output: 71                 
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: 53                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 79                 
Correct output: 17                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 76                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 90                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 27                 
Correct output: 12                  | Program output: 89                 
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 25                 
Correct output: 8                   | Program output: 42                 
Correct output: 2                   | Program output: 53                 
Correct output: 17                  | Program output: 60                 
Correct output: 21                  | Program output: 65                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 97                 
Correct output: 32                  | Program output: 81                 
Correct output: 5                   | Program output: 80                 
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 28                 
Correct output: -59                 | Program output: 48                 
Correct output: -96                 | Program output: -26                
Correct output: -94                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: 81                 
Correct output: -60                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: 95                 
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: 18                 
Correct output: -66                 | Program output: 59                 
Correct output: -77                 | Program output: 23                 
Correct output: -85                 | Program output: -21                
Correct output: -42                 | Program output: -14                
Correct output: -71                 | Program output: -70                
Correct output: 0                   | Program output: 80                 
Correct output: 60                  | Program output: 60                 
Correct output: -89                 | Program output: -20                
Correct output: -92                 | Program output: 70                 
Correct output: -68                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -75                 | Program output: -4                 
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -7                 
Correct output: 12                  | Program output: 35                 
Correct output: -88                 | Program output: 60                 
Correct output: -65                 | Program output: -53                
Correct output: -5                  | Program output: 12                 
Correct output: -26                 | Program output: 77                 
Correct output: -41                 | Program output: 96                 
Correct output: -34                 | Program output: 59                 
Correct output: -66                 | Program output: -7                 
Correct output: -31                 | Program output: 50                 
Correct output: -66                 | Program output: -9                 
Correct output: -44                 | Program output: 59                 
Correct output: -8                  | Program output: 52                 
Correct output: -87                 | Program output: 52                 
Correct output: -65                 | Program output: 19                 
Correct output: -57                 | Program output: 22                 
Correct output: -15                 | Program output: 24                 
Correct output: -43                 | Program output: -43                
Correct output: -87                 | Program output: -25                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -27                
Correct output: -61                 | Program output: 22                 
Correct output: -49                 | Program output: 73                 
Correct output: -75                 | Program output: -67                
Correct output: -92                 | Program output: 54                 
Correct output: -96                 | Program output: 29                 
Correct output: -49                 | Program output: -26                
Correct output: 35                  | Program output: 40                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 97                 
Correct output: -85                 | Program output: -81                
Correct output: -69                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_393} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (exec_dup_times (in3 exec_y_when_autoconstructing (print_integer boolean_yank exec_while (exec_dup_times () boolean_invert_second_then_and exec_k (integer_lt integer_empty integer_pop in2 exec_s_when_autoconstructing (exec_if (in2 exec_rot (exec_do*while (exec_do*range (exec_dup (integer_fromboolean exec_dup_items exec_yank integer_yankdup integer_min)) boolean_dup exec_shove (boolean_dup_times) in2) exec_dup_items) (integer_empty exec_if (boolean_not integer_max integer_yank boolean_stackdepth boolean_invert_first_then_and integer_dup_items integer_lte integer_mod) (boolean_dup) boolean_and integer_pop integer_gt in1 exec_flush boolean_dup integer_dec integer_yankdup exec_s (boolean_pop exec_s (exec_when (integer_div exec_k (exec_s () (boolean_rot exec_do*times ()) (exec_y (integer_fromboolean integer_min integer_dup_items boolean_and exec_do*count (exec_y_when_autoconstructing () boolean_xor boolean_dup_items boolean_or boolean_dup) exec_y_when_autoconstructing () print_integer exec_if (tag_exec_393 (integer_inc) boolean_eq) (exec_dup_items boolean_eq exec_eq integer_empty integer_dup exec_k (in2 exec_do*while (in3) boolean_xor integer_yank exec_if (integer_dup integer_empty integer_fromboolean) ()) ())))) ())) () ()) () ()) ()) ()) () ()) ()))))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 136
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_393} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (exec_dup_times (in3 exec_y_when_autoconstructing (print_integer boolean_yank exec_while (exec_dup_times () boolean_invert_second_then_and exec_k (integer_lt integer_empty integer_pop in2 exec_s_when_autoconstructing (exec_if (in2 exec_rot (exec_do*while (exec_do*range (exec_dup (integer_fromboolean exec_dup_items exec_yank integer_yankdup integer_min)) boolean_dup exec_shove (boolean_dup_times) in2) exec_dup_items) (integer_empty exec_if (boolean_not integer_max integer_yank boolean_stackdepth boolean_invert_first_then_and integer_dup_items integer_lte integer_mod) (boolean_dup) boolean_and integer_pop integer_gt in1 exec_flush boolean_dup integer_dec integer_yankdup exec_s (boolean_pop exec_s (exec_when (integer_div exec_k (exec_s () (boolean_rot exec_do*times ()) (exec_y (integer_fromboolean integer_min integer_dup_items boolean_and exec_do*count (exec_y_when_autoconstructing () boolean_xor boolean_dup_items boolean_or boolean_dup) exec_y_when_autoconstructing () print_integer exec_if (tag_exec_393 (integer_inc) boolean_eq) (exec_dup_items boolean_eq exec_eq integer_empty integer_dup exec_k (in2 exec_do*while (in3) boolean_xor integer_yank exec_if (integer_dup integer_empty integer_fromboolean) ()) ())))) ())) () ()) () ()) ()) ()) () ()) ()))))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 136
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (395 166 84 393 167 84 707 395 707 64)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (395 166 84 393 167 84 707 395 707 64)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq})
Best program: (exec_s_when_autoconstructing (integer_mult integer_dup_items) (integer_rot integer_min exec_k_when_autoconstructing (boolean_yankdup in3) (exec_when (boolean_dup print_integer boolean_and integer_yankdup) exec_rot () (boolean_dup exec_swap (boolean_and exec_dup_times (integer_yank exec_dup_items boolean_eq)) ()) ())) ())
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 34
Percent parens: 0.382
--- Population Statistics ---
Average total errors in population: 6.838
Median total errors in population: 6
Error averages by case: (0.605 0.834 0.916 0.607 0.833 0.916 0.293 0.605 0.293 0.936)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.14
Average program size in population (points): 53.433
Average percent parens in population: 0.293
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.992
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.992
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3455298
--- Timings ---
Current time: 1559593765740 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 59.9%
Fitness Testing:      5.3 seconds, 25.5%
Report:               2.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: 25                  | Program output: 38                 
Correct output: -81                 | Program output: -81                
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: -22                
Correct output: 49                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 33                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: 30                  | Program output: 47                 
Correct output: 23                  | Program output: 23                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 10                 
Correct output: 13                  | Program output: 30                 
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 50                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 6                  
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 82                 
Correct output: 5                   | Program output: 75                 
Correct output: -35                 | Program output: -23                
Correct output: -94                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 6                  
Correct output: -54                 | Program output: 61                 
Correct output: -68                 | Program output: 51                 
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -45                 | Program output: 5                  
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -6                 
Correct output: -85                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -71                 | Program output: -71                
Correct output: 0                   | Program output: 52                 
Correct output: 60                  | Program output: 78                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 22                 
Correct output: -55                 | Program output: 17                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -58                
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: -65                
Correct output: -5                  | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -41                 | Program output: 64                 
Correct output: -34                 | Program output: -34                
Correct output: -66                 | Program output: -30                
Correct output: -31                 | Program output: -31                
Correct output: -66                 | Program output: -66                
Correct output: -44                 | Program output: -15                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -57                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 86                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -16                
Correct output: 35                  | Program output: 53                 
Correct output: -73                 | Program output: -14                
Correct output: 2                   | Program output: 28                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_953} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup_times in2 integer_mult in1 integer_min boolean_invert_second_then_and integer_fromboolean exec_while () tagged_953 print_integer integer_lte)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 13
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_while} {:close 1, :instruction tagged_953} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup_times in2 integer_mult in1 integer_min boolean_invert_second_then_and integer_fromboolean exec_while () tagged_953 print_integer integer_lte)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 13
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 679 146 251 245 247 260 246 257 321)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (260 679 146 251 245 247 260 246 257 321)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_953} {:close 0, :instruction print_integer})
Best program: (boolean_dup_times in2 in1 integer_min boolean_invert_second_then_and integer_fromboolean tagged_953 print_integer)
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 8
Size: 9
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 7.088
Median total errors in population: 8
Error averages by case: (0.74 0.321 0.854 0.749 0.755 0.753 0.74 0.754 0.743 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.898
Average program size in population (points): 50.467
Average percent parens in population: 0.219
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3719026
--- Timings ---
Current time: 1559593767332 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.6 seconds, 60.6%
Fitness Testing:      5.6 seconds, 24.9%
Report:               3.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 38                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: -22                
Correct output: 49                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 30                  | Program output: 47                 
Correct output: 23                  | Program output: 23                 
Correct output: 21                  | Program output: 47                 
Correct output: 0                   | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 10                 
Correct output: 13                  | Program output: 57                 
Correct output: 19                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: -35                 | Program output: 47                 
Correct output: -94                 | Program output: -87                
Correct output: -86                 | Program output: -26                
Correct output: -59                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 6                  
Correct output: -54                 | Program output: 14                 
Correct output: -68                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -19                
Correct output: -45                 | Program output: 5                  
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -61                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: -42                
Correct output: -71                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: 60                  | Program output: 93                 
Correct output: -89                 | Program output: 9                  
Correct output: -92                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: 1                  
Correct output: -75                 | Program output: -71                
Correct output: -60                 | Program output: -9                 
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: 80                 
Correct output: -5                  | Program output: -5                 
Correct output: -26                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -34                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -31                 | Program output: -18                
Correct output: -66                 | Program output: -66                
Correct output: -44                 | Program output: -44                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: 4                  
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -49                
Correct output: 35                  | Program output: 35                 
Correct output: -73                 | Program output: -25                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: 51                 
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_953} {:close 0, :instruction tag_integer_572} {:close 0, :instruction print_integer})
Lexicase best program: (integer_mult in1 exec_dup (integer_min boolean_invert_second_then_and in4 integer_fromboolean tagged_953) tag_integer_572 print_integer)
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_953} {:close 0, :instruction tag_integer_572} {:close 0, :instruction print_integer})
Zero cases best program: (integer_mult in1 exec_dup (integer_min boolean_invert_second_then_and in4 integer_fromboolean tagged_953) tag_integer_572 print_integer)
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (445 5 448 438 233 800 773 438 628 234)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (445 5 448 438 233 800 773 438 628 234)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_953} {:close 0, :instruction tag_integer_572} {:close 0, :instruction print_integer})
Best program: (integer_mult in1 exec_dup (integer_min boolean_invert_second_then_and in4 integer_fromboolean tagged_953) tag_integer_572 print_integer)
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.558
Median total errors in population: 5
Error averages by case: (0.555 0.995 0.552 0.562 0.767 0.2 0.227 0.562 0.372 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.725
Average program size in population (points): 10.093
Average percent parens in population: 0.131
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3823855
--- Timings ---
Current time: 1559593768733 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 61.6%
Fitness Testing:      5.7 seconds, 24.1%
Report:               3.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 38                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: -22                
Correct output: 49                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 30                  | Program output: 47                 
Correct output: 23                  | Program output: 23                 
Correct output: 21                  | Program output: 47                 
Correct output: 0                   | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 10                 
Correct output: 13                  | Program output: 57                 
Correct output: 19                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: -35                 | Program output: 47                 
Correct output: -94                 | Program output: -87                
Correct output: -86                 | Program output: -26                
Correct output: -59                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: 6                  
Correct output: -54                 | Program output: 14                 
Correct output: -68                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -19                
Correct output: -45                 | Program output: 5                  
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -61                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: -42                
Correct output: -71                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: 60                  | Program output: 93                 
Correct output: -89                 | Program output: 9                  
Correct output: -92                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: 1                  
Correct output: -75                 | Program output: -71                
Correct output: -60                 | Program output: -9                 
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: 80                 
Correct output: -5                  | Program output: -5                 
Correct output: -26                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -34                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -31                 | Program output: -18                
Correct output: -66                 | Program output: -66                
Correct output: -44                 | Program output: -44                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 5                  
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: 4                  
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -49                
Correct output: 35                  | Program output: 35                 
Correct output: -73                 | Program output: -25                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: 51                 
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_953} {:close 0, :instruction tag_integer_572} {:close 0, :instruction print_integer})
Lexicase best program: (integer_mult in1 exec_dup (integer_min boolean_invert_second_then_and in4 integer_fromboolean tagged_953) tag_integer_572 print_integer)
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_953} {:close 0, :instruction tag_integer_572} {:close 0, :instruction print_integer})
Zero cases best program: (integer_mult in1 exec_dup (integer_min boolean_invert_second_then_and in4 integer_fromboolean tagged_953) tag_integer_572 print_integer)
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (433 424 402 419 418 219 418 92 402 679)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (433 424 402 419 418 219 418 92 402 679)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_953} {:close 0, :instruction tag_integer_572} {:close 0, :instruction print_integer})
Best program: (integer_mult in1 exec_dup (integer_min boolean_invert_second_then_and in4 integer_fromboolean tagged_953) tag_integer_572 print_integer)
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.094
Median total errors in population: 5
Error averages by case: (0.567 0.576 0.598 0.581 0.582 0.781 0.582 0.908 0.598 0.321)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 9.71
Average program size in population (points): 11.624
Average percent parens in population: 0.159
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3969653
--- Timings ---
Current time: 1559593770138 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 62.5%
Fitness Testing:      5.9 seconds, 23.4%
Report:               3.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 92                 
Correct output: 25                  | Program output: 25                 
Correct output: -81                 | Program output: 36                 
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: -22                
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 23                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 25                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -26                
Correct output: -59                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -61                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: -42                
Correct output: -71                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -89                 | Program output: -20                
Correct output: -92                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: -75                 | Program output: -71                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: -53                
Correct output: -5                  | Program output: -5                 
Correct output: -26                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -34                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -31                 | Program output: -18                
Correct output: -66                 | Program output: -66                
Correct output: -44                 | Program output: -44                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -67                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -49                
Correct output: 35                  | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: -81                
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_dup_times in2 integer_mult in1 in4 in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 13
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_dup_times in2 integer_mult in1 in4 in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 13
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 321 207 530 230 207 317 241 560 318)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (316 321 207 530 230 207 317 241 560 318)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Best program: (boolean_dup_times in2 integer_mult in1 in4 in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 6.753
Median total errors in population: 6
Error averages by case: (0.684 0.679 0.793 0.47 0.77 0.793 0.683 0.759 0.44 0.682)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 10.503
Average program size in population (points): 12.484
Average percent parens in population: 0.154
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4119544
--- Timings ---
Current time: 1559593771540 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.9 seconds, 63.3%
Fitness Testing:      6.1 seconds, 22.9%
Report:               3.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: 25                  | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: -22                
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 23                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: -42                
Correct output: -71                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: -65                
Correct output: -5                  | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -41                 | Program output: -41                
Correct output: -34                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -31                 | Program output: -31                
Correct output: -66                 | Program output: -66                
Correct output: -44                 | Program output: -44                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -57                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -49                
Correct output: 35                  | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_dup_times in2 integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_dup_times in2 integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (563 580 251 403 392 406 393 256 250 498)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (563 580 251 403 392 406 393 256 250 498)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Best program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 6.008
Median total errors in population: 6
Error averages by case: (0.437 0.42 0.749 0.597 0.608 0.594 0.607 0.744 0.75 0.502)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.609
Average program size in population (points): 13.015
Average percent parens in population: 0.105
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.011
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4243853
--- Timings ---
Current time: 1559593772948 milliseconds
Total Time:          28.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.0 seconds, 64.1%
Fitness Testing:      6.3 seconds, 22.4%
Report:               3.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 16


Auto-simplifying with starting size: 16
step: 0
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 500
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 1000
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 1500
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 2000
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 2500
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 3000
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 3500
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 4000
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 4500
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 5000
program: (boolean_dup_times exec_empty in2 exec_empty integer_mult in1 in4 integer_min in3 integer_min exec_eq boolean_invert_second_then_and integer_fromboolean integer_min print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: 25                  | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: 63                  | Program output: 63                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -29                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -22                 | Program output: -22                
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: -50                 | Program output: -50                
Correct output: -32                 | Program output: -32                
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 30                  | Program output: 30                 
Correct output: 23                  | Program output: 23                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 12                  | Program output: 12                 
Correct output: 4                   | Program output: 4                  
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -45                 | Program output: -45                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -42                 | Program output: -42                
Correct output: -71                 | Program output: -71                
Correct output: 0                   | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: 12                  | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: -65                
Correct output: -5                  | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -41                 | Program output: -41                
Correct output: -34                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -31                 | Program output: -31                
Correct output: -66                 | Program output: -66                
Correct output: -44                 | Program output: -44                
Correct output: -8                  | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -57                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -49                
Correct output: 35                  | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
;;******************************
