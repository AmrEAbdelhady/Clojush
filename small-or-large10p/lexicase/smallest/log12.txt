Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[26 26 26 -35] -35] [[21 21 -61 21] -61] [[-48 58 -48 -48] -48] [[-38 -53 -53 -53] -53] [[94 -31 -31 -31] -31] [[36 99 99 99] 36] [[3 3 25 3] 3] [[-62 -62 46 -62] -62] [[-51 47 47 47] -51] [[-55 -55 -72 -55] -72] [(-67 -67 -67 -67) -67] [(-96 -96 -96 -96) -96] [(48 48 48 48) 48] [(-83 -83 -83 -83) -83] [(49 49 49 49) 49] [(60 97 96 16) 16] [(23 99 29 4) 4] [(30 15 20 37) 15] [(48 71 61 76) 48] [(77 60 75 46) 46] [(26 53 9 34) 9] [(96 55 53 10) 10] [(83 74 3 87) 3] [(72 88 21 9) 9] [(41 2 47 90) 2] [(56 25 11 29) 11] [(24 90 46 21) 21] [(74 68 37 32) 32] [(52 90 74 75) 52] [(46 94 36 61) 36] [(24 84 80 5) 5] [(89 62 25 76) 25] [(25 89 88 66) 25] [(27 7 76 50) 7] [(55 84 67 74) 55] [(35 -44 76 52) -44] [(-93 63 -30 29) -93] [(-91 -57 -59 10) -91] [(70 15 36 20) 15] [(-90 75 -89 -70) -90] [(75 -60 -62 39) -62] [(9 17 32 5) 5] [(-1 -7 -19 -84) -84] [(32 45 47 97) 32] [(-13 31 -98 53) -98] [(46 -89 67 -67) -89] [(-98 -55 69 -62) -98] [(89 -32 -85 87) -85] [(-19 -75 -81 -30) -81] [(46 -36 93 -79) -79] [(-38 68 24 -76) -76] [(-89 -51 -48 -3) -89] [(-38 64 -13 -91) -91] [(-81 -93 57 -47) -93] [(-69 -67 91 -58) -69] [(76 -77 70 73) -77] [(76 -55 1 5) -55] [(-31 -2 0 84) -31] [(22 79 -93 24) -93] [(-52 -39 94 58) -52] [(93 82 37 79) 37] [(36 -59 35 -30) -59] [(45 25 68 -52) -52] [(-84 94 51 8) -84] [(5 99 -57 8) -57] [(98 15 14 -62) -62] [(-49 98 -3 67) -49] [(16 -76 46 -99) -99] [(-89 -100 50 47) -100] [(70 -6 -76 -70) -76] [(-32 24 -37 69) -37] [(54 -21 49 -3) -21] [(66 -14 45 -5) -14] [(59 -7 96 -86) -86] [(-2 -62 36 14) -62] [(-22 84 -43 -18) -43] [(-82 -92 -92 5) -92] [(16 89 -26 -57) -57] [(-7 12 -80 -4) -80] [(-8 -97 71 92) -97] [(90 -65 79 -12) -65] [(-74 -68 -69 66) -74] [(53 2 76 27) 2] [(-20 -46 23 70) -46] [(-48 34 60 -62) -62] [(86 51 39 -60) -60] [(-23 60 0 66) -23] [(-37 -1 -69 -74) -74] [(-71 1 27 66) -71] [(-28 70 35 -61) -61] [(65 -74 24 -26) -74] [(-5 11 -15 -68) -68] [(43 50 61 71) 43] [(-80 -15 -92 -26) -92] [(-7 -18 -20 -43) -43])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[26 26 26 -35] -35]
Train Case:   6 | Input/Output: [[21 21 -61 21] -61]
Train Case:   7 | Input/Output: [[-48 58 -48 -48] -48]
Train Case:   8 | Input/Output: [[-38 -53 -53 -53] -53]
Train Case:   9 | Input/Output: [[94 -31 -31 -31] -31]
Train Case:  10 | Input/Output: [[36 99 99 99] 36]
Train Case:  11 | Input/Output: [[3 3 25 3] 3]
Train Case:  12 | Input/Output: [[-62 -62 46 -62] -62]
Train Case:  13 | Input/Output: [[-51 47 47 47] -51]
Train Case:  14 | Input/Output: [[-55 -55 -72 -55] -72]
Train Case:  15 | Input/Output: [(-67 -67 -67 -67) -67]
Train Case:  16 | Input/Output: [(-96 -96 -96 -96) -96]
Train Case:  17 | Input/Output: [(48 48 48 48) 48]
Train Case:  18 | Input/Output: [(-83 -83 -83 -83) -83]
Train Case:  19 | Input/Output: [(49 49 49 49) 49]
Train Case:  20 | Input/Output: [(60 97 96 16) 16]
Train Case:  21 | Input/Output: [(23 99 29 4) 4]
Train Case:  22 | Input/Output: [(30 15 20 37) 15]
Train Case:  23 | Input/Output: [(48 71 61 76) 48]
Train Case:  24 | Input/Output: [(77 60 75 46) 46]
Train Case:  25 | Input/Output: [(26 53 9 34) 9]
Train Case:  26 | Input/Output: [(96 55 53 10) 10]
Train Case:  27 | Input/Output: [(83 74 3 87) 3]
Train Case:  28 | Input/Output: [(72 88 21 9) 9]
Train Case:  29 | Input/Output: [(41 2 47 90) 2]
Train Case:  30 | Input/Output: [(56 25 11 29) 11]
Train Case:  31 | Input/Output: [(24 90 46 21) 21]
Train Case:  32 | Input/Output: [(74 68 37 32) 32]
Train Case:  33 | Input/Output: [(52 90 74 75) 52]
Train Case:  34 | Input/Output: [(46 94 36 61) 36]
Train Case:  35 | Input/Output: [(24 84 80 5) 5]
Train Case:  36 | Input/Output: [(89 62 25 76) 25]
Train Case:  37 | Input/Output: [(25 89 88 66) 25]
Train Case:  38 | Input/Output: [(27 7 76 50) 7]
Train Case:  39 | Input/Output: [(55 84 67 74) 55]
Train Case:  40 | Input/Output: [(35 -44 76 52) -44]
Train Case:  41 | Input/Output: [(-93 63 -30 29) -93]
Train Case:  42 | Input/Output: [(-91 -57 -59 10) -91]
Train Case:  43 | Input/Output: [(70 15 36 20) 15]
Train Case:  44 | Input/Output: [(-90 75 -89 -70) -90]
Train Case:  45 | Input/Output: [(75 -60 -62 39) -62]
Train Case:  46 | Input/Output: [(9 17 32 5) 5]
Train Case:  47 | Input/Output: [(-1 -7 -19 -84) -84]
Train Case:  48 | Input/Output: [(32 45 47 97) 32]
Train Case:  49 | Input/Output: [(-13 31 -98 53) -98]
Train Case:  50 | Input/Output: [(46 -89 67 -67) -89]
Train Case:  51 | Input/Output: [(-98 -55 69 -62) -98]
Train Case:  52 | Input/Output: [(89 -32 -85 87) -85]
Train Case:  53 | Input/Output: [(-19 -75 -81 -30) -81]
Train Case:  54 | Input/Output: [(46 -36 93 -79) -79]
Train Case:  55 | Input/Output: [(-38 68 24 -76) -76]
Train Case:  56 | Input/Output: [(-89 -51 -48 -3) -89]
Train Case:  57 | Input/Output: [(-38 64 -13 -91) -91]
Train Case:  58 | Input/Output: [(-81 -93 57 -47) -93]
Train Case:  59 | Input/Output: [(-69 -67 91 -58) -69]
Train Case:  60 | Input/Output: [(76 -77 70 73) -77]
Train Case:  61 | Input/Output: [(76 -55 1 5) -55]
Train Case:  62 | Input/Output: [(-31 -2 0 84) -31]
Train Case:  63 | Input/Output: [(22 79 -93 24) -93]
Train Case:  64 | Input/Output: [(-52 -39 94 58) -52]
Train Case:  65 | Input/Output: [(93 82 37 79) 37]
Train Case:  66 | Input/Output: [(36 -59 35 -30) -59]
Train Case:  67 | Input/Output: [(45 25 68 -52) -52]
Train Case:  68 | Input/Output: [(-84 94 51 8) -84]
Train Case:  69 | Input/Output: [(5 99 -57 8) -57]
Train Case:  70 | Input/Output: [(98 15 14 -62) -62]
Train Case:  71 | Input/Output: [(-49 98 -3 67) -49]
Train Case:  72 | Input/Output: [(16 -76 46 -99) -99]
Train Case:  73 | Input/Output: [(-89 -100 50 47) -100]
Train Case:  74 | Input/Output: [(70 -6 -76 -70) -76]
Train Case:  75 | Input/Output: [(-32 24 -37 69) -37]
Train Case:  76 | Input/Output: [(54 -21 49 -3) -21]
Train Case:  77 | Input/Output: [(66 -14 45 -5) -14]
Train Case:  78 | Input/Output: [(59 -7 96 -86) -86]
Train Case:  79 | Input/Output: [(-2 -62 36 14) -62]
Train Case:  80 | Input/Output: [(-22 84 -43 -18) -43]
Train Case:  81 | Input/Output: [(-82 -92 -92 5) -92]
Train Case:  82 | Input/Output: [(16 89 -26 -57) -57]
Train Case:  83 | Input/Output: [(-7 12 -80 -4) -80]
Train Case:  84 | Input/Output: [(-8 -97 71 92) -97]
Train Case:  85 | Input/Output: [(90 -65 79 -12) -65]
Train Case:  86 | Input/Output: [(-74 -68 -69 66) -74]
Train Case:  87 | Input/Output: [(53 2 76 27) 2]
Train Case:  88 | Input/Output: [(-20 -46 23 70) -46]
Train Case:  89 | Input/Output: [(-48 34 60 -62) -62]
Train Case:  90 | Input/Output: [(86 51 39 -60) -60]
Train Case:  91 | Input/Output: [(-23 60 0 66) -23]
Train Case:  92 | Input/Output: [(-37 -1 -69 -74) -74]
Train Case:  93 | Input/Output: [(-71 1 27 66) -71]
Train Case:  94 | Input/Output: [(-28 70 35 -61) -61]
Train Case:  95 | Input/Output: [(65 -74 24 -26) -74]
Train Case:  96 | Input/Output: [(-5 11 -15 -68) -68]
Train Case:  97 | Input/Output: [(43 50 61 71) 43]
Train Case:  98 | Input/Output: [(-80 -15 -92 -26) -92]
Train Case:  99 | Input/Output: [(-7 -18 -20 -43) -43]
Test Case:   0 | Input/Output: [[36 36 0 36] 0]
Test Case:   1 | Input/Output: [[-94 94 -94 -94] -94]
Test Case:   2 | Input/Output: [[-87 -87 -28 -87] -87]
Test Case:   3 | Input/Output: [[-95 88 -95 -95] -95]
Test Case:   4 | Input/Output: [[-28 -28 -28 49] -28]
Test Case:   5 | Input/Output: [[42 -21 42 42] -21]
Test Case:   6 | Input/Output: [[-27 -27 80 -27] -27]
Test Case:   7 | Input/Output: [[72 44 44 44] 44]
Test Case:   8 | Input/Output: [[3 3 3 30] 3]
Test Case:   9 | Input/Output: [[-37 -37 -37 13] -37]
Test Case:  10 | Input/Output: [[-62 -62 14 -62] -62]
Test Case:  11 | Input/Output: [[-59 -59 -59 34] -59]
Test Case:  12 | Input/Output: [[-95 -38 -38 -38] -95]
Test Case:  13 | Input/Output: [[-76 -76 -76 -29] -76]
Test Case:  14 | Input/Output: [[-51 -51 -51 -70] -70]
Test Case:  15 | Input/Output: [[-68 4 -68 -68] -68]
Test Case:  16 | Input/Output: [[-48 -76 -76 -76] -76]
Test Case:  17 | Input/Output: [[46 46 90 46] 46]
Test Case:  18 | Input/Output: [[65 13 65 65] 13]
Test Case:  19 | Input/Output: [[-37 -37 -64 -37] -64]
Test Case:  20 | Input/Output: [[-23 -23 16 -23] -23]
Test Case:  21 | Input/Output: [[-43 -43 -43 82] -43]
Test Case:  22 | Input/Output: [[64 64 64 -95] -95]
Test Case:  23 | Input/Output: [[18 18 -84 18] -84]
Test Case:  24 | Input/Output: [[-61 -61 -11 -61] -61]
Test Case:  25 | Input/Output: [[54 84 84 84] 54]
Test Case:  26 | Input/Output: [[-42 -42 -7 -42] -42]
Test Case:  27 | Input/Output: [[-97 -97 -97 -81] -97]
Test Case:  28 | Input/Output: [[3 -32 -32 -32] -32]
Test Case:  29 | Input/Output: [[76 76 80 76] 76]
Test Case:  30 | Input/Output: [[-48 96 96 96] -48]
Test Case:  31 | Input/Output: [[-71 -71 -71 -25] -71]
Test Case:  32 | Input/Output: [[31 30 30 30] 30]
Test Case:  33 | Input/Output: [[-4 -3 -4 -4] -4]
Test Case:  34 | Input/Output: [[-59 -59 -59 75] -59]
Test Case:  35 | Input/Output: [[-21 -21 -21 -22] -22]
Test Case:  36 | Input/Output: [[98 98 98 -2] -2]
Test Case:  37 | Input/Output: [[-23 -23 -23 -19] -23]
Test Case:  38 | Input/Output: [[47 12 47 47] 12]
Test Case:  39 | Input/Output: [[16 16 72 16] 16]
Test Case:  40 | Input/Output: [[32 87 32 32] 32]
Test Case:  41 | Input/Output: [[-52 -52 -3 -52] -52]
Test Case:  42 | Input/Output: [[40 18 40 40] 18]
Test Case:  43 | Input/Output: [[-92 -92 -47 -92] -92]
Test Case:  44 | Input/Output: [[-29 -29 -29 7] -29]
Test Case:  45 | Input/Output: [[50 50 50 -51] -51]
Test Case:  46 | Input/Output: [[-33 92 -33 -33] -33]
Test Case:  47 | Input/Output: [[-7 -7 -7 -66] -66]
Test Case:  48 | Input/Output: [[45 45 45 -85] -85]
Test Case:  49 | Input/Output: [[26 26 26 60] 26]
Test Case:  50 | Input/Output: [[-25 -25 -25 89] -25]
Test Case:  51 | Input/Output: [[-39 -77 -77 -77] -77]
Test Case:  52 | Input/Output: [[47 94 94 94] 47]
Test Case:  53 | Input/Output: [[-9 -9 -9 70] -9]
Test Case:  54 | Input/Output: [[80 52 52 52] 52]
Test Case:  55 | Input/Output: [[67 -26 67 67] -26]
Test Case:  56 | Input/Output: [[-61 12 12 12] -61]
Test Case:  57 | Input/Output: [[-13 76 -13 -13] -13]
Test Case:  58 | Input/Output: [[84 84 84 98] 84]
Test Case:  59 | Input/Output: [[90 90 -68 90] -68]
Test Case:  60 | Input/Output: [[-44 -44 -44 -45] -45]
Test Case:  61 | Input/Output: [[98 42 98 98] 42]
Test Case:  62 | Input/Output: [[-36 -30 -36 -36] -36]
Test Case:  63 | Input/Output: [[50 50 50 56] 50]
Test Case:  64 | Input/Output: [[24 39 24 24] 24]
Test Case:  65 | Input/Output: [[25 18 18 18] 18]
Test Case:  66 | Input/Output: [[-67 77 77 77] -67]
Test Case:  67 | Input/Output: [[-100 -100 3 -100] -100]
Test Case:  68 | Input/Output: [[-69 -61 -61 -61] -69]
Test Case:  69 | Input/Output: [[89 50 50 50] 50]
Test Case:  70 | Input/Output: [[12 29 12 12] 12]
Test Case:  71 | Input/Output: [[-18 -18 -18 91] -18]
Test Case:  72 | Input/Output: [[-9 -63 -63 -63] -63]
Test Case:  73 | Input/Output: [[46 24 24 24] 24]
Test Case:  74 | Input/Output: [[54 36 54 54] 36]
Test Case:  75 | Input/Output: [[14 14 14 9] 9]
Test Case:  76 | Input/Output: [[2 2 2 -43] -43]
Test Case:  77 | Input/Output: [[55 63 63 63] 55]
Test Case:  78 | Input/Output: [[56 -15 -15 -15] -15]
Test Case:  79 | Input/Output: [[46 46 -38 46] -38]
Test Case:  80 | Input/Output: [[50 48 48 48] 48]
Test Case:  81 | Input/Output: [[-80 -80 -80 -64] -80]
Test Case:  82 | Input/Output: [[-25 -25 -25 -78] -78]
Test Case:  83 | Input/Output: [[-48 -48 94 -48] -48]
Test Case:  84 | Input/Output: [[-72 -72 4 -72] -72]
Test Case:  85 | Input/Output: [[-35 -35 -35 53] -35]
Test Case:  86 | Input/Output: [[-83 -32 -83 -83] -83]
Test Case:  87 | Input/Output: [[86 86 86 -21] -21]
Test Case:  88 | Input/Output: [[54 -43 54 54] -43]
Test Case:  89 | Input/Output: [[-99 -99 8 -99] -99]
Test Case:  90 | Input/Output: [[-47 2 -47 -47] -47]
Test Case:  91 | Input/Output: [[-38 38 -38 -38] -38]
Test Case:  92 | Input/Output: [[-67 -67 16 -67] -67]
Test Case:  93 | Input/Output: [[30 55 55 55] 30]
Test Case:  94 | Input/Output: [[60 11 60 60] 11]
Test Case:  95 | Input/Output: [[-42 -48 -42 -42] -48]
Test Case:  96 | Input/Output: [[66 -18 66 66] -18]
Test Case:  97 | Input/Output: [[75 75 -52 75] -52]
Test Case:  98 | Input/Output: [[-9 -9 -9 63] -9]
Test Case:  99 | Input/Output: [[86 86 86 19] 19]
Test Case: 100 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 101 | Input/Output: [(67 67 67 67) 67]
Test Case: 102 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 103 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 104 | Input/Output: [(21 21 21 21) 21]
Test Case: 105 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 106 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 107 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 108 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 109 | Input/Output: [(56 56 56 56) 56]
Test Case: 110 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 111 | Input/Output: [(65 65 65 65) 65]
Test Case: 112 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 113 | Input/Output: [(80 80 80 80) 80]
Test Case: 114 | Input/Output: [(91 91 91 91) 91]
Test Case: 115 | Input/Output: [(45 45 45 45) 45]
Test Case: 116 | Input/Output: [(66 66 66 66) 66]
Test Case: 117 | Input/Output: [(72 72 72 72) 72]
Test Case: 118 | Input/Output: [(10 10 10 10) 10]
Test Case: 119 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 120 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 121 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 122 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 123 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 124 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 125 | Input/Output: [(79 79 79 79) 79]
Test Case: 126 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 127 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 128 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 129 | Input/Output: [(12 12 12 12) 12]
Test Case: 130 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 131 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 132 | Input/Output: [(83 83 83 83) 83]
Test Case: 133 | Input/Output: [(79 79 79 79) 79]
Test Case: 134 | Input/Output: [(49 49 49 49) 49]
Test Case: 135 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 136 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 137 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 138 | Input/Output: [(50 50 50 50) 50]
Test Case: 139 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 140 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 141 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 142 | Input/Output: [(81 81 81 81) 81]
Test Case: 143 | Input/Output: [(41 41 41 41) 41]
Test Case: 144 | Input/Output: [(40 40 40 40) 40]
Test Case: 145 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 146 | Input/Output: [(0 0 0 0) 0]
Test Case: 147 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 148 | Input/Output: [(28 28 28 28) 28]
Test Case: 149 | Input/Output: [(11 11 11 11) 11]
Test Case: 150 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 151 | Input/Output: [(10 10 10 10) 10]
Test Case: 152 | Input/Output: [(81 81 81 81) 81]
Test Case: 153 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 154 | Input/Output: [(0 0 0 0) 0]
Test Case: 155 | Input/Output: [(8 8 8 8) 8]
Test Case: 156 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 157 | Input/Output: [(79 79 79 79) 79]
Test Case: 158 | Input/Output: [(54 54 54 54) 54]
Test Case: 159 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 160 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 161 | Input/Output: [(48 48 48 48) 48]
Test Case: 162 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 163 | Input/Output: [(25 25 25 25) 25]
Test Case: 164 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 165 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 166 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 167 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 168 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 169 | Input/Output: [(41 41 41 41) 41]
Test Case: 170 | Input/Output: [(72 72 72 72) 72]
Test Case: 171 | Input/Output: [(77 77 77 77) 77]
Test Case: 172 | Input/Output: [(50 50 50 50) 50]
Test Case: 173 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 174 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 175 | Input/Output: [(19 19 19 19) 19]
Test Case: 176 | Input/Output: [(41 41 41 41) 41]
Test Case: 177 | Input/Output: [(11 11 11 11) 11]
Test Case: 178 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 179 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 180 | Input/Output: [(22 22 22 22) 22]
Test Case: 181 | Input/Output: [(66 66 66 66) 66]
Test Case: 182 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 183 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 184 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 185 | Input/Output: [(95 95 95 95) 95]
Test Case: 186 | Input/Output: [(58 58 58 58) 58]
Test Case: 187 | Input/Output: [(73 73 73 73) 73]
Test Case: 188 | Input/Output: [(47 47 47 47) 47]
Test Case: 189 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 190 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 191 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 192 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 193 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 194 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 195 | Input/Output: [(83 83 83 83) 83]
Test Case: 196 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 197 | Input/Output: [(73 73 73 73) 73]
Test Case: 198 | Input/Output: [(53 53 53 53) 53]
Test Case: 199 | Input/Output: [(60 60 60 60) 60]
Test Case: 200 | Input/Output: [(1 4 89 36) 1]
Test Case: 201 | Input/Output: [(33 28 97 63) 28]
Test Case: 202 | Input/Output: [(46 23 21 64) 21]
Test Case: 203 | Input/Output: [(14 10 86 10) 10]
Test Case: 204 | Input/Output: [(39 90 58 42) 39]
Test Case: 205 | Input/Output: [(20 92 55 9) 9]
Test Case: 206 | Input/Output: [(44 69 59 23) 23]
Test Case: 207 | Input/Output: [(44 52 34 0) 0]
Test Case: 208 | Input/Output: [(70 41 34 9) 9]
Test Case: 209 | Input/Output: [(78 40 75 6) 6]
Test Case: 210 | Input/Output: [(12 42 54 83) 12]
Test Case: 211 | Input/Output: [(53 15 30 46) 15]
Test Case: 212 | Input/Output: [(40 7 63 17) 7]
Test Case: 213 | Input/Output: [(31 26 87 99) 26]
Test Case: 214 | Input/Output: [(49 15 82 67) 15]
Test Case: 215 | Input/Output: [(38 1 58 37) 1]
Test Case: 216 | Input/Output: [(97 92 16 62) 16]
Test Case: 217 | Input/Output: [(8 93 8 82) 8]
Test Case: 218 | Input/Output: [(65 20 85 69) 20]
Test Case: 219 | Input/Output: [(45 40 19 44) 19]
Test Case: 220 | Input/Output: [(82 69 88 59) 59]
Test Case: 221 | Input/Output: [(34 75 35 20) 20]
Test Case: 222 | Input/Output: [(90 71 15 95) 15]
Test Case: 223 | Input/Output: [(78 47 35 42) 35]
Test Case: 224 | Input/Output: [(43 83 1 74) 1]
Test Case: 225 | Input/Output: [(32 18 91 60) 18]
Test Case: 226 | Input/Output: [(43 23 12 26) 12]
Test Case: 227 | Input/Output: [(97 3 93 21) 3]
Test Case: 228 | Input/Output: [(40 83 39 89) 39]
Test Case: 229 | Input/Output: [(73 100 23 17) 17]
Test Case: 230 | Input/Output: [(50 78 32 19) 19]
Test Case: 231 | Input/Output: [(61 97 91 63) 61]
Test Case: 232 | Input/Output: [(85 8 45 72) 8]
Test Case: 233 | Input/Output: [(7 43 19 79) 7]
Test Case: 234 | Input/Output: [(10 3 61 49) 3]
Test Case: 235 | Input/Output: [(80 69 26 31) 26]
Test Case: 236 | Input/Output: [(72 92 66 62) 62]
Test Case: 237 | Input/Output: [(49 10 12 60) 10]
Test Case: 238 | Input/Output: [(53 1 28 5) 1]
Test Case: 239 | Input/Output: [(70 79 9 20) 9]
Test Case: 240 | Input/Output: [(44 55 13 7) 7]
Test Case: 241 | Input/Output: [(11 5 72 78) 5]
Test Case: 242 | Input/Output: [(29 24 29 53) 24]
Test Case: 243 | Input/Output: [(38 98 75 71) 38]
Test Case: 244 | Input/Output: [(36 40 84 21) 21]
Test Case: 245 | Input/Output: [(90 94 84 96) 84]
Test Case: 246 | Input/Output: [(10 88 35 63) 10]
Test Case: 247 | Input/Output: [(82 59 70 68) 59]
Test Case: 248 | Input/Output: [(79 48 42 47) 42]
Test Case: 249 | Input/Output: [(39 73 90 10) 10]
Test Case: 250 | Input/Output: [(68 8 2 22) 2]
Test Case: 251 | Input/Output: [(83 66 19 52) 19]
Test Case: 252 | Input/Output: [(32 87 73 57) 32]
Test Case: 253 | Input/Output: [(26 70 62 27) 26]
Test Case: 254 | Input/Output: [(98 75 26 55) 26]
Test Case: 255 | Input/Output: [(29 9 97 33) 9]
Test Case: 256 | Input/Output: [(53 97 51 49) 49]
Test Case: 257 | Input/Output: [(30 78 44 53) 30]
Test Case: 258 | Input/Output: [(85 62 93 37) 37]
Test Case: 259 | Input/Output: [(16 86 64 84) 16]
Test Case: 260 | Input/Output: [(95 63 9 17) 9]
Test Case: 261 | Input/Output: [(72 41 87 38) 38]
Test Case: 262 | Input/Output: [(35 35 4 92) 4]
Test Case: 263 | Input/Output: [(16 71 45 77) 16]
Test Case: 264 | Input/Output: [(2 76 88 12) 2]
Test Case: 265 | Input/Output: [(51 40 74 66) 40]
Test Case: 266 | Input/Output: [(57 74 51 31) 31]
Test Case: 267 | Input/Output: [(35 53 27 42) 27]
Test Case: 268 | Input/Output: [(80 99 46 35) 35]
Test Case: 269 | Input/Output: [(64 54 97 13) 13]
Test Case: 270 | Input/Output: [(84 76 23 28) 23]
Test Case: 271 | Input/Output: [(53 92 97 2) 2]
Test Case: 272 | Input/Output: [(18 69 31 40) 18]
Test Case: 273 | Input/Output: [(69 19 85 96) 19]
Test Case: 274 | Input/Output: [(65 45 36 16) 16]
Test Case: 275 | Input/Output: [(38 11 71 79) 11]
Test Case: 276 | Input/Output: [(53 76 76 14) 14]
Test Case: 277 | Input/Output: [(11 33 58 45) 11]
Test Case: 278 | Input/Output: [(60 67 14 52) 14]
Test Case: 279 | Input/Output: [(0 78 89 93) 0]
Test Case: 280 | Input/Output: [(7 91 4 78) 4]
Test Case: 281 | Input/Output: [(27 50 58 92) 27]
Test Case: 282 | Input/Output: [(61 81 7 5) 5]
Test Case: 283 | Input/Output: [(99 60 8 40) 8]
Test Case: 284 | Input/Output: [(8 83 30 67) 8]
Test Case: 285 | Input/Output: [(30 98 32 62) 30]
Test Case: 286 | Input/Output: [(94 7 45 99) 7]
Test Case: 287 | Input/Output: [(90 10 92 86) 10]
Test Case: 288 | Input/Output: [(80 0 79 44) 0]
Test Case: 289 | Input/Output: [(99 91 6 8) 6]
Test Case: 290 | Input/Output: [(90 73 84 14) 14]
Test Case: 291 | Input/Output: [(62 20 9 34) 9]
Test Case: 292 | Input/Output: [(98 90 85 78) 78]
Test Case: 293 | Input/Output: [(26 57 22 37) 22]
Test Case: 294 | Input/Output: [(22 64 36 29) 22]
Test Case: 295 | Input/Output: [(61 44 64 29) 29]
Test Case: 296 | Input/Output: [(59 91 26 26) 26]
Test Case: 297 | Input/Output: [(40 9 65 16) 9]
Test Case: 298 | Input/Output: [(78 73 86 88) 73]
Test Case: 299 | Input/Output: [(51 100 12 18) 12]
Test Case: 300 | Input/Output: [(54 4 98 8) 4]
Test Case: 301 | Input/Output: [(74 71 74 83) 71]
Test Case: 302 | Input/Output: [(77 2 21 9) 2]
Test Case: 303 | Input/Output: [(30 20 25 90) 20]
Test Case: 304 | Input/Output: [(48 59 56 99) 48]
Test Case: 305 | Input/Output: [(33 29 75 36) 29]
Test Case: 306 | Input/Output: [(6 5 22 60) 5]
Test Case: 307 | Input/Output: [(90 31 82 47) 31]
Test Case: 308 | Input/Output: [(23 66 62 84) 23]
Test Case: 309 | Input/Output: [(25 100 78 27) 25]
Test Case: 310 | Input/Output: [(67 31 59 74) 31]
Test Case: 311 | Input/Output: [(6 38 23 83) 6]
Test Case: 312 | Input/Output: [(58 50 22 32) 22]
Test Case: 313 | Input/Output: [(78 25 15 26) 15]
Test Case: 314 | Input/Output: [(55 49 50 70) 49]
Test Case: 315 | Input/Output: [(17 30 32 81) 17]
Test Case: 316 | Input/Output: [(2 95 34 77) 2]
Test Case: 317 | Input/Output: [(19 31 95 94) 19]
Test Case: 318 | Input/Output: [(3 33 45 15) 3]
Test Case: 319 | Input/Output: [(26 87 55 23) 23]
Test Case: 320 | Input/Output: [(42 33 0 30) 0]
Test Case: 321 | Input/Output: [(86 92 8 69) 8]
Test Case: 322 | Input/Output: [(58 29 7 77) 7]
Test Case: 323 | Input/Output: [(85 66 41 62) 41]
Test Case: 324 | Input/Output: [(14 54 10 60) 10]
Test Case: 325 | Input/Output: [(24 54 73 93) 24]
Test Case: 326 | Input/Output: [(94 19 8 91) 8]
Test Case: 327 | Input/Output: [(77 9 31 30) 9]
Test Case: 328 | Input/Output: [(8 88 24 85) 8]
Test Case: 329 | Input/Output: [(65 99 95 56) 56]
Test Case: 330 | Input/Output: [(90 79 4 73) 4]
Test Case: 331 | Input/Output: [(23 2 72 93) 2]
Test Case: 332 | Input/Output: [(33 50 94 71) 33]
Test Case: 333 | Input/Output: [(11 36 75 96) 11]
Test Case: 334 | Input/Output: [(65 60 69 14) 14]
Test Case: 335 | Input/Output: [(7 30 14 83) 7]
Test Case: 336 | Input/Output: [(38 48 45 36) 36]
Test Case: 337 | Input/Output: [(7 92 26 1) 1]
Test Case: 338 | Input/Output: [(31 26 77 64) 26]
Test Case: 339 | Input/Output: [(2 78 12 45) 2]
Test Case: 340 | Input/Output: [(4 47 34 46) 4]
Test Case: 341 | Input/Output: [(46 11 57 91) 11]
Test Case: 342 | Input/Output: [(42 99 29 29) 29]
Test Case: 343 | Input/Output: [(97 12 32 7) 7]
Test Case: 344 | Input/Output: [(79 36 99 74) 36]
Test Case: 345 | Input/Output: [(27 84 40 19) 19]
Test Case: 346 | Input/Output: [(35 63 15 90) 15]
Test Case: 347 | Input/Output: [(73 78 44 51) 44]
Test Case: 348 | Input/Output: [(32 54 78 54) 32]
Test Case: 349 | Input/Output: [(33 68 81 2) 2]
Test Case: 350 | Input/Output: [(72 68 17 36) 17]
Test Case: 351 | Input/Output: [(85 94 80 86) 80]
Test Case: 352 | Input/Output: [(81 54 50 85) 50]
Test Case: 353 | Input/Output: [(11 5 80 99) 5]
Test Case: 354 | Input/Output: [(18 43 98 60) 18]
Test Case: 355 | Input/Output: [(4 56 93 35) 4]
Test Case: 356 | Input/Output: [(61 51 60 82) 51]
Test Case: 357 | Input/Output: [(0 100 97 6) 0]
Test Case: 358 | Input/Output: [(67 72 97 66) 66]
Test Case: 359 | Input/Output: [(66 86 65 89) 65]
Test Case: 360 | Input/Output: [(53 83 78 7) 7]
Test Case: 361 | Input/Output: [(65 87 89 28) 28]
Test Case: 362 | Input/Output: [(31 63 61 73) 31]
Test Case: 363 | Input/Output: [(29 38 6 49) 6]
Test Case: 364 | Input/Output: [(84 41 90 77) 41]
Test Case: 365 | Input/Output: [(81 91 38 26) 26]
Test Case: 366 | Input/Output: [(21 100 93 4) 4]
Test Case: 367 | Input/Output: [(21 6 92 66) 6]
Test Case: 368 | Input/Output: [(52 17 90 53) 17]
Test Case: 369 | Input/Output: [(48 95 25 11) 11]
Test Case: 370 | Input/Output: [(76 77 71 34) 34]
Test Case: 371 | Input/Output: [(4 0 47 96) 0]
Test Case: 372 | Input/Output: [(70 64 59 2) 2]
Test Case: 373 | Input/Output: [(51 95 23 8) 8]
Test Case: 374 | Input/Output: [(25 59 96 27) 25]
Test Case: 375 | Input/Output: [(36 24 61 22) 22]
Test Case: 376 | Input/Output: [(66 49 65 62) 49]
Test Case: 377 | Input/Output: [(77 94 85 61) 61]
Test Case: 378 | Input/Output: [(97 56 70 77) 56]
Test Case: 379 | Input/Output: [(9 49 68 14) 9]
Test Case: 380 | Input/Output: [(52 72 94 34) 34]
Test Case: 381 | Input/Output: [(43 65 85 36) 36]
Test Case: 382 | Input/Output: [(90 63 96 35) 35]
Test Case: 383 | Input/Output: [(98 94 12 60) 12]
Test Case: 384 | Input/Output: [(42 17 78 88) 17]
Test Case: 385 | Input/Output: [(31 14 90 86) 14]
Test Case: 386 | Input/Output: [(62 89 45 83) 45]
Test Case: 387 | Input/Output: [(27 69 24 59) 24]
Test Case: 388 | Input/Output: [(57 84 26 59) 26]
Test Case: 389 | Input/Output: [(29 80 41 53) 29]
Test Case: 390 | Input/Output: [(40 79 68 16) 16]
Test Case: 391 | Input/Output: [(44 4 52 12) 4]
Test Case: 392 | Input/Output: [(69 5 79 60) 5]
Test Case: 393 | Input/Output: [(85 58 43 64) 43]
Test Case: 394 | Input/Output: [(55 33 75 60) 33]
Test Case: 395 | Input/Output: [(58 63 22 5) 5]
Test Case: 396 | Input/Output: [(12 72 52 20) 12]
Test Case: 397 | Input/Output: [(38 48 73 69) 38]
Test Case: 398 | Input/Output: [(3 61 33 4) 3]
Test Case: 399 | Input/Output: [(75 98 99 72) 72]
Test Case: 400 | Input/Output: [(3 51 60 -15) -15]
Test Case: 401 | Input/Output: [(21 6 58 78) 6]
Test Case: 402 | Input/Output: [(100 3 36 91) 3]
Test Case: 403 | Input/Output: [(-20 39 46 -28) -28]
Test Case: 404 | Input/Output: [(26 -91 -38 93) -91]
Test Case: 405 | Input/Output: [(31 80 67 34) 31]
Test Case: 406 | Input/Output: [(88 -91 36 -86) -91]
Test Case: 407 | Input/Output: [(7 -50 85 53) -50]
Test Case: 408 | Input/Output: [(37 -93 -65 -67) -93]
Test Case: 409 | Input/Output: [(74 34 27 -19) -19]
Test Case: 410 | Input/Output: [(-56 47 -47 -44) -56]
Test Case: 411 | Input/Output: [(26 54 85 43) 26]
Test Case: 412 | Input/Output: [(38 100 -73 -81) -81]
Test Case: 413 | Input/Output: [(-41 -22 -21 90) -41]
Test Case: 414 | Input/Output: [(18 -93 -82 -33) -93]
Test Case: 415 | Input/Output: [(92 99 81 -2) -2]
Test Case: 416 | Input/Output: [(67 -22 -9 -54) -54]
Test Case: 417 | Input/Output: [(-32 59 -75 44) -75]
Test Case: 418 | Input/Output: [(72 67 14 -26) -26]
Test Case: 419 | Input/Output: [(-94 -1 14 -19) -94]
Test Case: 420 | Input/Output: [(63 1 49 87) 1]
Test Case: 421 | Input/Output: [(28 -15 89 75) -15]
Test Case: 422 | Input/Output: [(64 -1 50 -49) -49]
Test Case: 423 | Input/Output: [(27 -86 21 3) -86]
Test Case: 424 | Input/Output: [(25 10 5 -60) -60]
Test Case: 425 | Input/Output: [(-29 97 66 80) -29]
Test Case: 426 | Input/Output: [(-3 73 2 -89) -89]
Test Case: 427 | Input/Output: [(-29 2 -46 57) -46]
Test Case: 428 | Input/Output: [(-27 37 -22 -64) -64]
Test Case: 429 | Input/Output: [(24 15 -99 57) -99]
Test Case: 430 | Input/Output: [(-40 83 -57 -1) -57]
Test Case: 431 | Input/Output: [(81 -81 81 38) -81]
Test Case: 432 | Input/Output: [(17 -44 59 -47) -47]
Test Case: 433 | Input/Output: [(-87 -98 94 -21) -98]
Test Case: 434 | Input/Output: [(-50 -90 -96 25) -96]
Test Case: 435 | Input/Output: [(98 81 25 98) 25]
Test Case: 436 | Input/Output: [(-5 64 -1 -45) -45]
Test Case: 437 | Input/Output: [(74 -88 -96 -81) -96]
Test Case: 438 | Input/Output: [(-78 -5 11 100) -78]
Test Case: 439 | Input/Output: [(-64 60 11 -76) -76]
Test Case: 440 | Input/Output: [(16 68 18 -17) -17]
Test Case: 441 | Input/Output: [(96 -84 26 4) -84]
Test Case: 442 | Input/Output: [(8 -49 32 -4) -49]
Test Case: 443 | Input/Output: [(-58 97 94 -43) -58]
Test Case: 444 | Input/Output: [(-38 30 4 -97) -97]
Test Case: 445 | Input/Output: [(4 -86 12 11) -86]
Test Case: 446 | Input/Output: [(53 90 66 49) 49]
Test Case: 447 | Input/Output: [(-78 18 15 -41) -78]
Test Case: 448 | Input/Output: [(48 55 -47 -94) -94]
Test Case: 449 | Input/Output: [(-53 -34 45 43) -53]
Test Case: 450 | Input/Output: [(41 58 -2 98) -2]
Test Case: 451 | Input/Output: [(35 -88 77 -47) -88]
Test Case: 452 | Input/Output: [(-49 43 64 -38) -49]
Test Case: 453 | Input/Output: [(-55 62 43 73) -55]
Test Case: 454 | Input/Output: [(78 20 -78 -20) -78]
Test Case: 455 | Input/Output: [(-65 46 38 -1) -65]
Test Case: 456 | Input/Output: [(-72 -65 71 -67) -72]
Test Case: 457 | Input/Output: [(-16 57 -36 -6) -36]
Test Case: 458 | Input/Output: [(-95 -8 -19 61) -95]
Test Case: 459 | Input/Output: [(100 -96 -82 28) -96]
Test Case: 460 | Input/Output: [(-29 -48 31 -22) -48]
Test Case: 461 | Input/Output: [(52 45 84 15) 15]
Test Case: 462 | Input/Output: [(-85 -69 -20 -95) -95]
Test Case: 463 | Input/Output: [(-80 -46 46 55) -80]
Test Case: 464 | Input/Output: [(73 1 54 -35) -35]
Test Case: 465 | Input/Output: [(40 -97 54 87) -97]
Test Case: 466 | Input/Output: [(16 -83 -43 57) -83]
Test Case: 467 | Input/Output: [(-89 84 -98 87) -98]
Test Case: 468 | Input/Output: [(57 -93 86 53) -93]
Test Case: 469 | Input/Output: [(94 93 -97 24) -97]
Test Case: 470 | Input/Output: [(16 46 -41 -61) -61]
Test Case: 471 | Input/Output: [(93 11 -57 89) -57]
Test Case: 472 | Input/Output: [(87 -18 -10 -53) -53]
Test Case: 473 | Input/Output: [(-50 43 -91 26) -91]
Test Case: 474 | Input/Output: [(59 -26 94 -62) -62]
Test Case: 475 | Input/Output: [(54 84 44 -7) -7]
Test Case: 476 | Input/Output: [(-29 -77 -65 19) -77]
Test Case: 477 | Input/Output: [(57 -24 34 -67) -67]
Test Case: 478 | Input/Output: [(-34 -46 92 -28) -46]
Test Case: 479 | Input/Output: [(-82 43 87 25) -82]
Test Case: 480 | Input/Output: [(60 -56 -24 24) -56]
Test Case: 481 | Input/Output: [(-53 39 79 -36) -53]
Test Case: 482 | Input/Output: [(35 47 24 91) 24]
Test Case: 483 | Input/Output: [(-44 55 -96 -63) -96]
Test Case: 484 | Input/Output: [(-32 -97 -20 87) -97]
Test Case: 485 | Input/Output: [(-36 29 -18 -80) -80]
Test Case: 486 | Input/Output: [(23 -2 61 91) -2]
Test Case: 487 | Input/Output: [(-32 99 -35 99) -35]
Test Case: 488 | Input/Output: [(17 -71 46 -42) -71]
Test Case: 489 | Input/Output: [(-33 65 46 -19) -33]
Test Case: 490 | Input/Output: [(12 -62 91 -85) -85]
Test Case: 491 | Input/Output: [(41 68 82 -2) -2]
Test Case: 492 | Input/Output: [(-66 -70 -63 -10) -70]
Test Case: 493 | Input/Output: [(-24 3 43 42) -24]
Test Case: 494 | Input/Output: [(50 11 11 10) 10]
Test Case: 495 | Input/Output: [(-64 -15 -66 70) -66]
Test Case: 496 | Input/Output: [(47 -13 -48 90) -48]
Test Case: 497 | Input/Output: [(32 -39 -12 -44) -44]
Test Case: 498 | Input/Output: [(-4 93 2 40) -4]
Test Case: 499 | Input/Output: [(-12 -17 -33 -27) -33]
Test Case: 500 | Input/Output: [(40 2 58 95) 2]
Test Case: 501 | Input/Output: [(46 -42 54 -69) -69]
Test Case: 502 | Input/Output: [(-29 -90 -77 60) -90]
Test Case: 503 | Input/Output: [(77 -22 78 2) -22]
Test Case: 504 | Input/Output: [(78 13 -30 78) -30]
Test Case: 505 | Input/Output: [(85 -33 31 87) -33]
Test Case: 506 | Input/Output: [(58 -6 40 -88) -88]
Test Case: 507 | Input/Output: [(-78 85 31 21) -78]
Test Case: 508 | Input/Output: [(-71 97 -53 6) -71]
Test Case: 509 | Input/Output: [(-5 -85 -57 15) -85]
Test Case: 510 | Input/Output: [(-20 35 55 -83) -83]
Test Case: 511 | Input/Output: [(-12 -7 35 13) -12]
Test Case: 512 | Input/Output: [(62 -86 -94 -27) -94]
Test Case: 513 | Input/Output: [(97 59 -43 -95) -95]
Test Case: 514 | Input/Output: [(-20 -93 63 17) -93]
Test Case: 515 | Input/Output: [(61 -1 97 51) -1]
Test Case: 516 | Input/Output: [(-55 -50 62 -77) -77]
Test Case: 517 | Input/Output: [(92 72 -86 59) -86]
Test Case: 518 | Input/Output: [(86 88 -34 12) -34]
Test Case: 519 | Input/Output: [(40 56 53 -91) -91]
Test Case: 520 | Input/Output: [(-38 35 -10 -32) -38]
Test Case: 521 | Input/Output: [(59 -80 -91 -27) -91]
Test Case: 522 | Input/Output: [(-92 64 -6 11) -92]
Test Case: 523 | Input/Output: [(-8 -70 36 -58) -70]
Test Case: 524 | Input/Output: [(50 45 96 90) 45]
Test Case: 525 | Input/Output: [(-42 -88 -22 -8) -88]
Test Case: 526 | Input/Output: [(57 -81 85 -63) -81]
Test Case: 527 | Input/Output: [(6 95 -15 65) -15]
Test Case: 528 | Input/Output: [(-68 -72 28 -75) -75]
Test Case: 529 | Input/Output: [(39 -88 -86 22) -88]
Test Case: 530 | Input/Output: [(90 50 64 -64) -64]
Test Case: 531 | Input/Output: [(-99 -67 13 -12) -99]
Test Case: 532 | Input/Output: [(-46 -64 -36 18) -64]
Test Case: 533 | Input/Output: [(-67 -55 -82 54) -82]
Test Case: 534 | Input/Output: [(-49 -5 -3 -83) -83]
Test Case: 535 | Input/Output: [(4 87 -9 -28) -28]
Test Case: 536 | Input/Output: [(-89 68 -59 59) -89]
Test Case: 537 | Input/Output: [(20 59 98 -18) -18]
Test Case: 538 | Input/Output: [(-7 -41 25 99) -41]
Test Case: 539 | Input/Output: [(27 45 47 -39) -39]
Test Case: 540 | Input/Output: [(22 -69 -89 41) -89]
Test Case: 541 | Input/Output: [(68 49 73 80) 49]
Test Case: 542 | Input/Output: [(-73 4 -46 44) -73]
Test Case: 543 | Input/Output: [(-19 96 -61 84) -61]
Test Case: 544 | Input/Output: [(-7 -17 -49 -87) -87]
Test Case: 545 | Input/Output: [(92 79 -49 -24) -49]
Test Case: 546 | Input/Output: [(76 95 -24 -24) -24]
Test Case: 547 | Input/Output: [(-64 91 -20 -70) -70]
Test Case: 548 | Input/Output: [(-7 22 12 -27) -27]
Test Case: 549 | Input/Output: [(-25 80 -42 50) -42]
Test Case: 550 | Input/Output: [(93 -58 13 -83) -83]
Test Case: 551 | Input/Output: [(-19 -51 -79 30) -79]
Test Case: 552 | Input/Output: [(79 72 79 13) 13]
Test Case: 553 | Input/Output: [(-87 3 -69 -11) -87]
Test Case: 554 | Input/Output: [(-75 -90 -39 -80) -90]
Test Case: 555 | Input/Output: [(-78 33 -35 -86) -86]
Test Case: 556 | Input/Output: [(64 -27 -1 -26) -27]
Test Case: 557 | Input/Output: [(51 54 44 88) 44]
Test Case: 558 | Input/Output: [(52 -62 -49 -100) -100]
Test Case: 559 | Input/Output: [(-4 -72 39 40) -72]
Test Case: 560 | Input/Output: [(87 -23 -96 -57) -96]
Test Case: 561 | Input/Output: [(-72 80 -37 -5) -72]
Test Case: 562 | Input/Output: [(13 83 56 69) 13]
Test Case: 563 | Input/Output: [(47 99 33 46) 33]
Test Case: 564 | Input/Output: [(-31 92 -89 -10) -89]
Test Case: 565 | Input/Output: [(67 -40 -24 -31) -40]
Test Case: 566 | Input/Output: [(57 -8 -82 -30) -82]
Test Case: 567 | Input/Output: [(-53 31 44 -83) -83]
Test Case: 568 | Input/Output: [(-89 87 13 -67) -89]
Test Case: 569 | Input/Output: [(-86 57 57 64) -86]
Test Case: 570 | Input/Output: [(13 -57 59 -50) -57]
Test Case: 571 | Input/Output: [(58 24 76 42) 24]
Test Case: 572 | Input/Output: [(73 -99 -41 -92) -99]
Test Case: 573 | Input/Output: [(85 -32 2 -63) -63]
Test Case: 574 | Input/Output: [(54 -7 66 -44) -44]
Test Case: 575 | Input/Output: [(-36 -31 -26 13) -36]
Test Case: 576 | Input/Output: [(-81 8 36 -81) -81]
Test Case: 577 | Input/Output: [(30 -1 -80 -95) -95]
Test Case: 578 | Input/Output: [(-17 8 -72 68) -72]
Test Case: 579 | Input/Output: [(-76 77 84 22) -76]
Test Case: 580 | Input/Output: [(87 -67 -37 -83) -83]
Test Case: 581 | Input/Output: [(8 -88 -40 -97) -97]
Test Case: 582 | Input/Output: [(65 78 -66 -3) -66]
Test Case: 583 | Input/Output: [(85 -13 4 67) -13]
Test Case: 584 | Input/Output: [(37 -1 58 6) -1]
Test Case: 585 | Input/Output: [(33 40 8 95) 8]
Test Case: 586 | Input/Output: [(95 -25 6 42) -25]
Test Case: 587 | Input/Output: [(-28 -29 39 14) -29]
Test Case: 588 | Input/Output: [(39 53 -53 14) -53]
Test Case: 589 | Input/Output: [(90 35 68 86) 35]
Test Case: 590 | Input/Output: [(76 -38 56 34) -38]
Test Case: 591 | Input/Output: [(25 -16 86 -80) -80]
Test Case: 592 | Input/Output: [(-44 -12 -13 -68) -68]
Test Case: 593 | Input/Output: [(61 49 17 85) 17]
Test Case: 594 | Input/Output: [(9 -97 -71 9) -97]
Test Case: 595 | Input/Output: [(31 7 88 -5) -5]
Test Case: 596 | Input/Output: [(-83 -38 97 32) -83]
Test Case: 597 | Input/Output: [(-83 -76 52 -60) -83]
Test Case: 598 | Input/Output: [(-27 83 20 -10) -27]
Test Case: 599 | Input/Output: [(-15 42 -33 43) -33]
Test Case: 600 | Input/Output: [(30 72 -16 68) -16]
Test Case: 601 | Input/Output: [(6 36 -4 -70) -70]
Test Case: 602 | Input/Output: [(72 49 58 47) 47]
Test Case: 603 | Input/Output: [(-62 -9 87 -66) -66]
Test Case: 604 | Input/Output: [(14 -32 -98 -44) -98]
Test Case: 605 | Input/Output: [(100 -70 59 83) -70]
Test Case: 606 | Input/Output: [(-45 47 -83 -30) -83]
Test Case: 607 | Input/Output: [(3 -49 40 -42) -49]
Test Case: 608 | Input/Output: [(50 8 -73 -54) -73]
Test Case: 609 | Input/Output: [(95 69 60 49) 49]
Test Case: 610 | Input/Output: [(59 -30 7 82) -30]
Test Case: 611 | Input/Output: [(79 100 66 44) 44]
Test Case: 612 | Input/Output: [(-17 -35 -91 -67) -91]
Test Case: 613 | Input/Output: [(-86 52 -90 -46) -90]
Test Case: 614 | Input/Output: [(-21 -60 -71 60) -71]
Test Case: 615 | Input/Output: [(-70 -3 23 50) -70]
Test Case: 616 | Input/Output: [(-91 13 74 -21) -91]
Test Case: 617 | Input/Output: [(-27 -14 -44 25) -44]
Test Case: 618 | Input/Output: [(-79 17 -60 6) -79]
Test Case: 619 | Input/Output: [(93 -96 -37 -70) -96]
Test Case: 620 | Input/Output: [(-38 -22 -47 -56) -56]
Test Case: 621 | Input/Output: [(3 -72 -34 -10) -72]
Test Case: 622 | Input/Output: [(43 -73 -84 -22) -84]
Test Case: 623 | Input/Output: [(-8 -61 -82 67) -82]
Test Case: 624 | Input/Output: [(70 63 50 86) 50]
Test Case: 625 | Input/Output: [(47 30 70 5) 5]
Test Case: 626 | Input/Output: [(59 64 37 100) 37]
Test Case: 627 | Input/Output: [(-9 43 -34 41) -34]
Test Case: 628 | Input/Output: [(62 -51 75 -63) -63]
Test Case: 629 | Input/Output: [(-57 15 -30 -22) -57]
Test Case: 630 | Input/Output: [(-20 -61 -2 60) -61]
Test Case: 631 | Input/Output: [(93 -76 -35 90) -76]
Test Case: 632 | Input/Output: [(32 -18 73 -64) -64]
Test Case: 633 | Input/Output: [(-99 25 53 -9) -99]
Test Case: 634 | Input/Output: [(9 -76 85 -15) -76]
Test Case: 635 | Input/Output: [(83 57 -6 -83) -83]
Test Case: 636 | Input/Output: [(-97 -45 -87 4) -97]
Test Case: 637 | Input/Output: [(-4 48 99 -66) -66]
Test Case: 638 | Input/Output: [(10 25 73 -31) -31]
Test Case: 639 | Input/Output: [(88 91 -34 -44) -44]
Test Case: 640 | Input/Output: [(47 -55 -41 -22) -55]
Test Case: 641 | Input/Output: [(38 -58 91 -85) -85]
Test Case: 642 | Input/Output: [(-72 50 6 25) -72]
Test Case: 643 | Input/Output: [(34 7 52 -87) -87]
Test Case: 644 | Input/Output: [(-8 -12 -80 54) -80]
Test Case: 645 | Input/Output: [(35 -99 -18 1) -99]
Test Case: 646 | Input/Output: [(-91 -80 -5 -11) -91]
Test Case: 647 | Input/Output: [(-82 14 -83 -23) -83]
Test Case: 648 | Input/Output: [(-35 63 19 -54) -54]
Test Case: 649 | Input/Output: [(-76 17 54 0) -76]
Test Case: 650 | Input/Output: [(-15 -65 43 37) -65]
Test Case: 651 | Input/Output: [(61 -75 -48 -47) -75]
Test Case: 652 | Input/Output: [(-77 85 25 -52) -77]
Test Case: 653 | Input/Output: [(28 52 -38 -80) -80]
Test Case: 654 | Input/Output: [(-62 -88 84 -21) -88]
Test Case: 655 | Input/Output: [(6 81 30 33) 6]
Test Case: 656 | Input/Output: [(92 -94 -93 45) -94]
Test Case: 657 | Input/Output: [(33 -31 -10 -77) -77]
Test Case: 658 | Input/Output: [(31 -43 88 -83) -83]
Test Case: 659 | Input/Output: [(28 65 90 62) 28]
Test Case: 660 | Input/Output: [(-46 92 96 23) -46]
Test Case: 661 | Input/Output: [(4 79 -100 -9) -100]
Test Case: 662 | Input/Output: [(58 36 -32 23) -32]
Test Case: 663 | Input/Output: [(-65 54 73 40) -65]
Test Case: 664 | Input/Output: [(50 -16 -66 3) -66]
Test Case: 665 | Input/Output: [(1 -92 -2 24) -92]
Test Case: 666 | Input/Output: [(-93 -99 -45 -20) -99]
Test Case: 667 | Input/Output: [(-54 71 -79 55) -79]
Test Case: 668 | Input/Output: [(-77 65 57 -11) -77]
Test Case: 669 | Input/Output: [(-68 -41 -58 -97) -97]
Test Case: 670 | Input/Output: [(70 -55 -94 -50) -94]
Test Case: 671 | Input/Output: [(60 20 77 -91) -91]
Test Case: 672 | Input/Output: [(-9 63 45 -21) -21]
Test Case: 673 | Input/Output: [(90 44 -47 -67) -67]
Test Case: 674 | Input/Output: [(-41 -94 -50 80) -94]
Test Case: 675 | Input/Output: [(-81 12 59 -20) -81]
Test Case: 676 | Input/Output: [(-13 53 92 -78) -78]
Test Case: 677 | Input/Output: [(-12 -74 1 -42) -74]
Test Case: 678 | Input/Output: [(60 96 17 -35) -35]
Test Case: 679 | Input/Output: [(65 87 -78 36) -78]
Test Case: 680 | Input/Output: [(2 -12 25 -39) -39]
Test Case: 681 | Input/Output: [(90 97 -51 -71) -71]
Test Case: 682 | Input/Output: [(-30 9 74 25) -30]
Test Case: 683 | Input/Output: [(-26 14 -42 58) -42]
Test Case: 684 | Input/Output: [(65 -85 19 -22) -85]
Test Case: 685 | Input/Output: [(-69 -83 -52 69) -83]
Test Case: 686 | Input/Output: [(-11 34 -73 -44) -73]
Test Case: 687 | Input/Output: [(64 76 4 -31) -31]
Test Case: 688 | Input/Output: [(95 -29 40 -17) -29]
Test Case: 689 | Input/Output: [(-23 4 81 -15) -23]
Test Case: 690 | Input/Output: [(-40 -27 -21 59) -40]
Test Case: 691 | Input/Output: [(-85 27 39 41) -85]
Test Case: 692 | Input/Output: [(-70 76 42 81) -70]
Test Case: 693 | Input/Output: [(82 14 -98 14) -98]
Test Case: 694 | Input/Output: [(30 -76 -54 -64) -76]
Test Case: 695 | Input/Output: [(-75 -28 83 -18) -75]
Test Case: 696 | Input/Output: [(-37 -66 -82 1) -82]
Test Case: 697 | Input/Output: [(-38 17 -58 -12) -58]
Test Case: 698 | Input/Output: [(44 -96 -93 -57) -96]
Test Case: 699 | Input/Output: [(-38 19 -83 -70) -83]
Test Case: 700 | Input/Output: [(37 31 75 70) 31]
Test Case: 701 | Input/Output: [(60 -66 3 -21) -66]
Test Case: 702 | Input/Output: [(97 23 -36 86) -36]
Test Case: 703 | Input/Output: [(48 12 72 21) 12]
Test Case: 704 | Input/Output: [(11 30 -4 35) -4]
Test Case: 705 | Input/Output: [(46 87 16 -22) -22]
Test Case: 706 | Input/Output: [(24 -44 57 -65) -65]
Test Case: 707 | Input/Output: [(47 57 87 -64) -64]
Test Case: 708 | Input/Output: [(-20 42 76 -56) -56]
Test Case: 709 | Input/Output: [(-49 -39 30 70) -49]
Test Case: 710 | Input/Output: [(97 67 -36 -96) -96]
Test Case: 711 | Input/Output: [(-87 84 -32 -50) -87]
Test Case: 712 | Input/Output: [(-81 -41 -41 76) -81]
Test Case: 713 | Input/Output: [(-27 52 -84 67) -84]
Test Case: 714 | Input/Output: [(-54 19 -36 -83) -83]
Test Case: 715 | Input/Output: [(-67 87 50 -96) -96]
Test Case: 716 | Input/Output: [(83 -82 49 56) -82]
Test Case: 717 | Input/Output: [(-31 -48 -79 -83) -83]
Test Case: 718 | Input/Output: [(32 6 -46 50) -46]
Test Case: 719 | Input/Output: [(96 -64 28 72) -64]
Test Case: 720 | Input/Output: [(-82 -25 -83 -28) -83]
Test Case: 721 | Input/Output: [(9 49 61 -9) -9]
Test Case: 722 | Input/Output: [(-25 3 -92 -87) -92]
Test Case: 723 | Input/Output: [(11 -80 -33 28) -80]
Test Case: 724 | Input/Output: [(-47 57 -54 -79) -79]
Test Case: 725 | Input/Output: [(-98 -28 83 -85) -98]
Test Case: 726 | Input/Output: [(46 88 75 -52) -52]
Test Case: 727 | Input/Output: [(-8 -95 68 -59) -95]
Test Case: 728 | Input/Output: [(48 100 0 -72) -72]
Test Case: 729 | Input/Output: [(-79 -90 -44 45) -90]
Test Case: 730 | Input/Output: [(-47 76 77 -76) -76]
Test Case: 731 | Input/Output: [(87 28 -33 -96) -96]
Test Case: 732 | Input/Output: [(25 -8 19 -48) -48]
Test Case: 733 | Input/Output: [(54 36 58 34) 34]
Test Case: 734 | Input/Output: [(-53 -85 -16 -52) -85]
Test Case: 735 | Input/Output: [(26 -53 18 -91) -91]
Test Case: 736 | Input/Output: [(71 80 1 -9) -9]
Test Case: 737 | Input/Output: [(-24 86 -15 -63) -63]
Test Case: 738 | Input/Output: [(-4 28 -78 -26) -78]
Test Case: 739 | Input/Output: [(47 -36 -30 -26) -36]
Test Case: 740 | Input/Output: [(-82 -25 -84 39) -84]
Test Case: 741 | Input/Output: [(29 -98 45 -12) -98]
Test Case: 742 | Input/Output: [(59 86 -76 95) -76]
Test Case: 743 | Input/Output: [(54 99 70 -38) -38]
Test Case: 744 | Input/Output: [(-12 42 56 -42) -42]
Test Case: 745 | Input/Output: [(13 -19 70 1) -19]
Test Case: 746 | Input/Output: [(97 -60 15 18) -60]
Test Case: 747 | Input/Output: [(29 -33 -3 -56) -56]
Test Case: 748 | Input/Output: [(5 -39 -54 -100) -100]
Test Case: 749 | Input/Output: [(-83 -22 -21 64) -83]
Test Case: 750 | Input/Output: [(-88 100 92 14) -88]
Test Case: 751 | Input/Output: [(-32 -94 -80 98) -94]
Test Case: 752 | Input/Output: [(25 52 -59 -64) -64]
Test Case: 753 | Input/Output: [(15 -99 28 -47) -99]
Test Case: 754 | Input/Output: [(-13 25 -72 -9) -72]
Test Case: 755 | Input/Output: [(35 -9 -12 -26) -26]
Test Case: 756 | Input/Output: [(4 25 -100 16) -100]
Test Case: 757 | Input/Output: [(60 -42 40 13) -42]
Test Case: 758 | Input/Output: [(-69 10 -72 -77) -77]
Test Case: 759 | Input/Output: [(-89 -100 -11 12) -100]
Test Case: 760 | Input/Output: [(15 -74 81 -90) -90]
Test Case: 761 | Input/Output: [(-4 -32 5 47) -32]
Test Case: 762 | Input/Output: [(16 -66 45 -9) -66]
Test Case: 763 | Input/Output: [(-67 32 54 -30) -67]
Test Case: 764 | Input/Output: [(-21 64 67 -35) -35]
Test Case: 765 | Input/Output: [(-67 -21 -20 79) -67]
Test Case: 766 | Input/Output: [(90 -12 50 20) -12]
Test Case: 767 | Input/Output: [(91 53 -41 71) -41]
Test Case: 768 | Input/Output: [(-39 8 -56 63) -56]
Test Case: 769 | Input/Output: [(82 -18 -83 -45) -83]
Test Case: 770 | Input/Output: [(-4 -56 18 -41) -56]
Test Case: 771 | Input/Output: [(64 -92 64 43) -92]
Test Case: 772 | Input/Output: [(-10 16 -39 83) -39]
Test Case: 773 | Input/Output: [(-47 28 27 -39) -47]
Test Case: 774 | Input/Output: [(-82 81 100 -97) -97]
Test Case: 775 | Input/Output: [(13 22 -25 89) -25]
Test Case: 776 | Input/Output: [(46 43 1 65) 1]
Test Case: 777 | Input/Output: [(-80 67 41 -68) -80]
Test Case: 778 | Input/Output: [(17 66 32 91) 17]
Test Case: 779 | Input/Output: [(75 -84 -65 -3) -84]
Test Case: 780 | Input/Output: [(70 62 -65 40) -65]
Test Case: 781 | Input/Output: [(-64 -81 -39 -61) -81]
Test Case: 782 | Input/Output: [(86 -10 75 -17) -17]
Test Case: 783 | Input/Output: [(70 39 31 -64) -64]
Test Case: 784 | Input/Output: [(-10 -25 19 -81) -81]
Test Case: 785 | Input/Output: [(26 -7 -25 96) -25]
Test Case: 786 | Input/Output: [(-97 -3 19 62) -97]
Test Case: 787 | Input/Output: [(-56 34 44 -53) -56]
Test Case: 788 | Input/Output: [(60 -80 -52 100) -80]
Test Case: 789 | Input/Output: [(32 -17 57 -41) -41]
Test Case: 790 | Input/Output: [(-2 -74 99 52) -74]
Test Case: 791 | Input/Output: [(-55 -63 45 89) -63]
Test Case: 792 | Input/Output: [(-62 -64 -85 -30) -85]
Test Case: 793 | Input/Output: [(-31 -58 -78 -41) -78]
Test Case: 794 | Input/Output: [(81 -57 31 22) -57]
Test Case: 795 | Input/Output: [(39 98 38 -46) -46]
Test Case: 796 | Input/Output: [(-69 93 -19 -53) -69]
Test Case: 797 | Input/Output: [(-34 89 -42 31) -42]
Test Case: 798 | Input/Output: [(32 -12 83 -67) -67]
Test Case: 799 | Input/Output: [(82 65 -73 30) -73]
Test Case: 800 | Input/Output: [(26 94 -32 -95) -95]
Test Case: 801 | Input/Output: [(-55 -51 92 -6) -55]
Test Case: 802 | Input/Output: [(-72 61 -60 63) -72]
Test Case: 803 | Input/Output: [(-81 90 -2 85) -81]
Test Case: 804 | Input/Output: [(-1 -11 -35 -71) -71]
Test Case: 805 | Input/Output: [(30 18 90 86) 18]
Test Case: 806 | Input/Output: [(76 -89 29 73) -89]
Test Case: 807 | Input/Output: [(-27 33 24 3) -27]
Test Case: 808 | Input/Output: [(41 21 -1 66) -1]
Test Case: 809 | Input/Output: [(-41 -34 64 -97) -97]
Test Case: 810 | Input/Output: [(72 5 -47 74) -47]
Test Case: 811 | Input/Output: [(14 -69 -43 -11) -69]
Test Case: 812 | Input/Output: [(38 -64 38 41) -64]
Test Case: 813 | Input/Output: [(-11 49 93 -2) -11]
Test Case: 814 | Input/Output: [(29 51 -51 -61) -61]
Test Case: 815 | Input/Output: [(54 -97 28 -92) -97]
Test Case: 816 | Input/Output: [(-23 -85 76 95) -85]
Test Case: 817 | Input/Output: [(88 -73 20 -51) -73]
Test Case: 818 | Input/Output: [(74 82 98 -13) -13]
Test Case: 819 | Input/Output: [(62 -37 -58 74) -58]
Test Case: 820 | Input/Output: [(41 -47 64 46) -47]
Test Case: 821 | Input/Output: [(29 76 2 35) 2]
Test Case: 822 | Input/Output: [(-73 27 85 28) -73]
Test Case: 823 | Input/Output: [(26 -62 -30 -69) -69]
Test Case: 824 | Input/Output: [(-63 -8 -20 -81) -81]
Test Case: 825 | Input/Output: [(4 9 72 -63) -63]
Test Case: 826 | Input/Output: [(-14 62 4 -33) -33]
Test Case: 827 | Input/Output: [(10 83 76 -22) -22]
Test Case: 828 | Input/Output: [(51 2 -12 -88) -88]
Test Case: 829 | Input/Output: [(-27 -24 62 -48) -48]
Test Case: 830 | Input/Output: [(-16 -44 -45 66) -45]
Test Case: 831 | Input/Output: [(1 30 -75 59) -75]
Test Case: 832 | Input/Output: [(69 35 -79 -19) -79]
Test Case: 833 | Input/Output: [(-11 -8 57 -33) -33]
Test Case: 834 | Input/Output: [(17 -68 5 31) -68]
Test Case: 835 | Input/Output: [(21 -57 85 42) -57]
Test Case: 836 | Input/Output: [(-96 38 -78 -85) -96]
Test Case: 837 | Input/Output: [(51 34 -9 52) -9]
Test Case: 838 | Input/Output: [(-88 -58 -6 27) -88]
Test Case: 839 | Input/Output: [(-73 3 7 -50) -73]
Test Case: 840 | Input/Output: [(-82 73 63 7) -82]
Test Case: 841 | Input/Output: [(34 -51 71 -45) -51]
Test Case: 842 | Input/Output: [(-10 88 -14 -37) -37]
Test Case: 843 | Input/Output: [(48 22 -43 59) -43]
Test Case: 844 | Input/Output: [(-98 -50 15 -44) -98]
Test Case: 845 | Input/Output: [(24 -86 8 40) -86]
Test Case: 846 | Input/Output: [(68 -71 100 -26) -71]
Test Case: 847 | Input/Output: [(-35 -11 -87 -76) -87]
Test Case: 848 | Input/Output: [(39 -4 13 92) -4]
Test Case: 849 | Input/Output: [(-100 -18 -4 -80) -100]
Test Case: 850 | Input/Output: [(-72 -60 64 71) -72]
Test Case: 851 | Input/Output: [(49 -57 -10 -17) -57]
Test Case: 852 | Input/Output: [(-15 18 92 20) -15]
Test Case: 853 | Input/Output: [(-57 62 -12 70) -57]
Test Case: 854 | Input/Output: [(76 -59 45 -43) -59]
Test Case: 855 | Input/Output: [(97 84 65 52) 52]
Test Case: 856 | Input/Output: [(36 73 3 80) 3]
Test Case: 857 | Input/Output: [(46 18 20 29) 18]
Test Case: 858 | Input/Output: [(-83 68 -54 -61) -83]
Test Case: 859 | Input/Output: [(-62 -3 -3 -23) -62]
Test Case: 860 | Input/Output: [(-19 -39 -22 76) -39]
Test Case: 861 | Input/Output: [(-24 -75 29 74) -75]
Test Case: 862 | Input/Output: [(42 11 -44 -71) -71]
Test Case: 863 | Input/Output: [(-28 -29 54 50) -29]
Test Case: 864 | Input/Output: [(35 -17 -93 -24) -93]
Test Case: 865 | Input/Output: [(-15 91 80 -68) -68]
Test Case: 866 | Input/Output: [(-40 -84 94 -50) -84]
Test Case: 867 | Input/Output: [(61 -32 -56 -12) -56]
Test Case: 868 | Input/Output: [(63 -76 23 -28) -76]
Test Case: 869 | Input/Output: [(66 63 -68 -2) -68]
Test Case: 870 | Input/Output: [(47 85 89 -69) -69]
Test Case: 871 | Input/Output: [(36 -36 -2 -99) -99]
Test Case: 872 | Input/Output: [(-4 55 84 -100) -100]
Test Case: 873 | Input/Output: [(14 90 50 -6) -6]
Test Case: 874 | Input/Output: [(7 -34 81 94) -34]
Test Case: 875 | Input/Output: [(-54 70 -50 5) -54]
Test Case: 876 | Input/Output: [(-8 -10 100 50) -10]
Test Case: 877 | Input/Output: [(-96 15 36 -3) -96]
Test Case: 878 | Input/Output: [(92 43 -96 -46) -96]
Test Case: 879 | Input/Output: [(58 -38 24 3) -38]
Test Case: 880 | Input/Output: [(13 32 -15 31) -15]
Test Case: 881 | Input/Output: [(-20 79 -69 -7) -69]
Test Case: 882 | Input/Output: [(52 51 13 -49) -49]
Test Case: 883 | Input/Output: [(-88 -19 63 -78) -88]
Test Case: 884 | Input/Output: [(81 -5 -41 76) -41]
Test Case: 885 | Input/Output: [(-74 66 -57 -89) -89]
Test Case: 886 | Input/Output: [(-7 -25 -6 -86) -86]
Test Case: 887 | Input/Output: [(-81 12 -55 -85) -85]
Test Case: 888 | Input/Output: [(-60 24 27 87) -60]
Test Case: 889 | Input/Output: [(19 75 43 76) 19]
Test Case: 890 | Input/Output: [(-27 -78 72 40) -78]
Test Case: 891 | Input/Output: [(-89 7 33 -79) -89]
Test Case: 892 | Input/Output: [(68 50 -80 -97) -97]
Test Case: 893 | Input/Output: [(-91 42 57 -20) -91]
Test Case: 894 | Input/Output: [(-64 -66 49 -93) -93]
Test Case: 895 | Input/Output: [(-42 68 -5 -78) -78]
Test Case: 896 | Input/Output: [(10 51 -99 32) -99]
Test Case: 897 | Input/Output: [(73 -91 -21 -96) -96]
Test Case: 898 | Input/Output: [(8 -58 -91 -83) -91]
Test Case: 899 | Input/Output: [(12 47 -66 83) -66]
Test Case: 900 | Input/Output: [(6 67 90 3) 3]
Test Case: 901 | Input/Output: [(65 -3 74 -94) -94]
Test Case: 902 | Input/Output: [(-60 -19 -12 41) -60]
Test Case: 903 | Input/Output: [(0 -24 96 91) -24]
Test Case: 904 | Input/Output: [(46 -93 60 89) -93]
Test Case: 905 | Input/Output: [(100 -63 84 44) -63]
Test Case: 906 | Input/Output: [(32 -2 82 -44) -44]
Test Case: 907 | Input/Output: [(-79 51 14 77) -79]
Test Case: 908 | Input/Output: [(-62 -78 79 -93) -93]
Test Case: 909 | Input/Output: [(29 64 -46 -93) -93]
Test Case: 910 | Input/Output: [(89 -1 -60 -73) -73]
Test Case: 911 | Input/Output: [(40 -25 -42 -19) -42]
Test Case: 912 | Input/Output: [(2 41 -96 -65) -96]
Test Case: 913 | Input/Output: [(64 -67 -47 7) -67]
Test Case: 914 | Input/Output: [(39 -42 5 -26) -42]
Test Case: 915 | Input/Output: [(-64 79 -95 3) -95]
Test Case: 916 | Input/Output: [(96 -65 -28 -69) -69]
Test Case: 917 | Input/Output: [(50 -49 -78 16) -78]
Test Case: 918 | Input/Output: [(32 42 -43 49) -43]
Test Case: 919 | Input/Output: [(72 -21 -16 -13) -21]
Test Case: 920 | Input/Output: [(10 88 -87 48) -87]
Test Case: 921 | Input/Output: [(-44 -72 67 41) -72]
Test Case: 922 | Input/Output: [(44 -66 -81 -33) -81]
Test Case: 923 | Input/Output: [(13 -74 73 50) -74]
Test Case: 924 | Input/Output: [(90 -37 -4 21) -37]
Test Case: 925 | Input/Output: [(80 -4 94 -47) -47]
Test Case: 926 | Input/Output: [(84 78 -1 7) -1]
Test Case: 927 | Input/Output: [(-31 63 59 68) -31]
Test Case: 928 | Input/Output: [(22 7 -63 93) -63]
Test Case: 929 | Input/Output: [(-22 -70 5 -4) -70]
Test Case: 930 | Input/Output: [(-1 -38 90 50) -38]
Test Case: 931 | Input/Output: [(26 -60 60 -25) -60]
Test Case: 932 | Input/Output: [(68 -4 -45 -35) -45]
Test Case: 933 | Input/Output: [(-49 94 99 69) -49]
Test Case: 934 | Input/Output: [(39 81 19 -44) -44]
Test Case: 935 | Input/Output: [(79 23 -80 -70) -80]
Test Case: 936 | Input/Output: [(71 61 74 75) 61]
Test Case: 937 | Input/Output: [(40 43 48 35) 35]
Test Case: 938 | Input/Output: [(-22 -10 -28 67) -28]
Test Case: 939 | Input/Output: [(-77 -62 57 35) -77]
Test Case: 940 | Input/Output: [(-40 -29 38 -41) -41]
Test Case: 941 | Input/Output: [(29 -52 78 49) -52]
Test Case: 942 | Input/Output: [(29 -93 -2 -21) -93]
Test Case: 943 | Input/Output: [(-3 -62 42 -88) -88]
Test Case: 944 | Input/Output: [(45 62 41 -6) -6]
Test Case: 945 | Input/Output: [(29 58 33 70) 29]
Test Case: 946 | Input/Output: [(67 -94 -68 19) -94]
Test Case: 947 | Input/Output: [(50 29 -94 38) -94]
Test Case: 948 | Input/Output: [(-55 -100 -62 81) -100]
Test Case: 949 | Input/Output: [(89 -24 89 8) -24]
Test Case: 950 | Input/Output: [(82 47 98 -8) -8]
Test Case: 951 | Input/Output: [(52 -11 44 -77) -77]
Test Case: 952 | Input/Output: [(40 -65 85 -89) -89]
Test Case: 953 | Input/Output: [(-91 -25 -44 77) -91]
Test Case: 954 | Input/Output: [(-68 -17 8 -45) -68]
Test Case: 955 | Input/Output: [(84 93 -20 17) -20]
Test Case: 956 | Input/Output: [(74 -75 51 -92) -92]
Test Case: 957 | Input/Output: [(25 62 59 34) 25]
Test Case: 958 | Input/Output: [(-15 0 36 48) -15]
Test Case: 959 | Input/Output: [(38 90 -52 76) -52]
Test Case: 960 | Input/Output: [(55 77 30 -4) -4]
Test Case: 961 | Input/Output: [(-18 98 -48 -32) -48]
Test Case: 962 | Input/Output: [(94 42 -43 -80) -80]
Test Case: 963 | Input/Output: [(-43 30 15 3) -43]
Test Case: 964 | Input/Output: [(32 41 -20 89) -20]
Test Case: 965 | Input/Output: [(57 -16 -13 30) -16]
Test Case: 966 | Input/Output: [(-67 -18 -37 -69) -69]
Test Case: 967 | Input/Output: [(-31 -82 89 -30) -82]
Test Case: 968 | Input/Output: [(52 -87 29 81) -87]
Test Case: 969 | Input/Output: [(-40 28 -17 72) -40]
Test Case: 970 | Input/Output: [(-88 -78 87 55) -88]
Test Case: 971 | Input/Output: [(5 86 -94 9) -94]
Test Case: 972 | Input/Output: [(-43 20 -18 -50) -50]
Test Case: 973 | Input/Output: [(-51 81 44 -94) -94]
Test Case: 974 | Input/Output: [(-71 27 67 48) -71]
Test Case: 975 | Input/Output: [(-5 80 -77 83) -77]
Test Case: 976 | Input/Output: [(-19 -94 -59 64) -94]
Test Case: 977 | Input/Output: [(-97 24 82 -93) -97]
Test Case: 978 | Input/Output: [(-80 24 12 -87) -87]
Test Case: 979 | Input/Output: [(-57 77 -9 52) -57]
Test Case: 980 | Input/Output: [(-49 -3 -95 39) -95]
Test Case: 981 | Input/Output: [(72 -98 47 -74) -98]
Test Case: 982 | Input/Output: [(84 -38 48 -88) -88]
Test Case: 983 | Input/Output: [(-3 3 -79 94) -79]
Test Case: 984 | Input/Output: [(-42 -26 -60 -47) -60]
Test Case: 985 | Input/Output: [(78 9 4 -73) -73]
Test Case: 986 | Input/Output: [(37 -40 59 -44) -44]
Test Case: 987 | Input/Output: [(94 -53 23 68) -53]
Test Case: 988 | Input/Output: [(100 18 81 -61) -61]
Test Case: 989 | Input/Output: [(-5 -8 -49 3) -49]
Test Case: 990 | Input/Output: [(24 -35 52 -91) -91]
Test Case: 991 | Input/Output: [(90 -34 -97 -40) -97]
Test Case: 992 | Input/Output: [(-20 -62 48 -5) -62]
Test Case: 993 | Input/Output: [(-61 -45 39 4) -61]
Test Case: 994 | Input/Output: [(22 -96 70 92) -96]
Test Case: 995 | Input/Output: [(-38 -39 -30 77) -39]
Test Case: 996 | Input/Output: [(9 -28 50 -33) -33]
Test Case: 997 | Input/Output: [(-9 -100 -19 -34) -100]
Test Case: 998 | Input/Output: [(54 -72 85 36) -72]
Test Case: 999 | Input/Output: [(61 -91 -77 -9) -91]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -9 74 92 -6 19 -109 96 18 79 20 7 8 118 60 -55 45
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[26 26 26 -35] -35] [[21 21 -61 21] -61] [[-48 58 -48 -48] -48] [[-38 -53 -53 -53] -53] [[94 -31 -31 -31] -31] [[36 99 99 99] 36] [[3 3 25 3] 3] [[-62 -62 46 -62] -62] [[-51 47 47 47] -51] [[-55 -55 -72 -55] -72] [(-67 -67 -67 -67) -67] [(-96 -96 -96 -96) -96] [(48 48 48 48) 48] [(-83 -83 -83 -83) -83] [(49 49 49 49) 49] [(60 97 96 16) 16] [(23 99 29 4) 4] [(30 15 20 37) 15] [(48 71 61 76) 48] [(77 60 75 46) 46] [(26 53 9 34) 9] [(96 55 53 10) 10] [(83 74 3 87) 3] [(72 88 21 9) 9] [(41 2 47 90) 2] [(56 25 11 29) 11] [(24 90 46 21) 21] [(74 68 37 32) 32] [(52 90 74 75) 52] [(46 94 36 61) 36] [(24 84 80 5) 5] [(89 62 25 76) 25] [(25 89 88 66) 25] [(27 7 76 50) 7] [(55 84 67 74) 55] [(35 -44 76 52) -44] [(-93 63 -30 29) -93] [(-91 -57 -59 10) -91] [(70 15 36 20) 15] [(-90 75 -89 -70) -90] [(75 -60 -62 39) -62] [(9 17 32 5) 5] [(-1 -7 -19 -84) -84] [(32 45 47 97) 32] [(-13 31 -98 53) -98] [(46 -89 67 -67) -89] [(-98 -55 69 -62) -98] [(89 -32 -85 87) -85] [(-19 -75 -81 -30) -81] [(46 -36 93 -79) -79] [(-38 68 24 -76) -76] [(-89 -51 -48 -3) -89] [(-38 64 -13 -91) -91] [(-81 -93 57 -47) -93] [(-69 -67 91 -58) -69] [(76 -77 70 73) -77] [(76 -55 1 5) -55] [(-31 -2 0 84) -31] [(22 79 -93 24) -93] [(-52 -39 94 58) -52] [(93 82 37 79) 37] [(36 -59 35 -30) -59] [(45 25 68 -52) -52] [(-84 94 51 8) -84] [(5 99 -57 8) -57] [(98 15 14 -62) -62] [(-49 98 -3 67) -49] [(16 -76 46 -99) -99] [(-89 -100 50 47) -100] [(70 -6 -76 -70) -76] [(-32 24 -37 69) -37] [(54 -21 49 -3) -21] [(66 -14 45 -5) -14] [(59 -7 96 -86) -86] [(-2 -62 36 14) -62] [(-22 84 -43 -18) -43] [(-82 -92 -92 5) -92] [(16 89 -26 -57) -57] [(-7 12 -80 -4) -80] [(-8 -97 71 92) -97] [(90 -65 79 -12) -65] [(-74 -68 -69 66) -74] [(53 2 76 27) 2] [(-20 -46 23 70) -46] [(-48 34 60 -62) -62] [(86 51 39 -60) -60] [(-23 60 0 66) -23] [(-37 -1 -69 -74) -74] [(-71 1 27 66) -71] [(-28 70 35 -61) -61] [(65 -74 24 -26) -74] [(-5 11 -15 -68) -68] [(43 50 61 71) 43] [(-80 -15 -92 -26) -92] [(-7 -18 -20 -43) -43])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 610
Test mean error for best: 0.61000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: 36                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: 47                 
Correct output: -72                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: 48                  | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 37                 
Correct output: 48                  | Program output: 76                 
Correct output: 46                  | Program output: 46                 
Correct output: 9                   | Program output: 34                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 87                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 90                 
Correct output: 11                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 52                  | Program output: 75                 
Correct output: 36                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 76                 
Correct output: 25                  | Program output: 66                 
Correct output: 7                   | Program output: 50                 
Correct output: 55                  | Program output: 74                 
Correct output: -44                 | Program output: 52                 
Correct output: -93                 | Program output: 29                 
Correct output: -91                 | Program output: 10                 
Correct output: 15                  | Program output: 20                 
Correct output: -90                 | Program output: -70                
Correct output: -62                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: 32                  | Program output: 97                 
Correct output: -98                 | Program output: 53                 
Correct output: -89                 | Program output: -67                
Correct output: -98                 | Program output: -62                
Correct output: -85                 | Program output: 87                 
Correct output: -81                 | Program output: -30                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -47                
Correct output: -69                 | Program output: -58                
Correct output: -77                 | Program output: 73                 
Correct output: -55                 | Program output: 5                  
Correct output: -31                 | Program output: 84                 
Correct output: -93                 | Program output: 24                 
Correct output: -52                 | Program output: 58                 
Correct output: 37                  | Program output: 79                 
Correct output: -59                 | Program output: -30                
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: 8                  
Correct output: -57                 | Program output: 8                  
Correct output: -62                 | Program output: -62                
Correct output: -49                 | Program output: 67                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: 47                 
Correct output: -76                 | Program output: -70                
Correct output: -37                 | Program output: 69                 
Correct output: -21                 | Program output: -3                 
Correct output: -14                 | Program output: -5                 
Correct output: -86                 | Program output: -86                
Correct output: -62                 | Program output: 14                 
Correct output: -43                 | Program output: -18                
Correct output: -92                 | Program output: 5                  
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -4                 
Correct output: -97                 | Program output: 92                 
Correct output: -65                 | Program output: -12                
Correct output: -74                 | Program output: 66                 
Correct output: 2                   | Program output: 27                 
Correct output: -46                 | Program output: 70                 
Correct output: -62                 | Program output: -62                
Correct output: -60                 | Program output: -60                
Correct output: -23                 | Program output: 66                 
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: 66                 
Correct output: -61                 | Program output: -61                
Correct output: -74                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: 43                  | Program output: 71                 
Correct output: -92                 | Program output: -26                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_497} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 2, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction tagged_525} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_512} {:close 0, :instruction tagged_769} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction 50})
Lexicase best program: (integer_sub tag_exec_497 (integer_dup boolean_not) boolean_frominteger boolean_dup_times integer_pop integer_div integer_flush exec_s_when_autoconstructing (integer_yank boolean_dup) (exec_if (integer_div) () integer_gt integer_empty print_integer) (exec_pop () integer_dec) tagged_525 boolean_invert_second_then_and boolean_invert_first_then_and exec_when () integer_dup_times boolean_and boolean_dup_items boolean_dup_items boolean_empty integer_lte exec_y (exec_do*count (integer_empty integer_add exec_s_when_autoconstructing (exec_swap (integer_empty boolean_invert_first_then_and exec_do*count () exec_shove () exec_rot (exec_s_when_autoconstructing (in3 exec_empty integer_max integer_div) (print_integer) (exec_eq integer_yankdup) exec_yank exec_empty boolean_flush boolean_dup exec_s_when_autoconstructing (integer_dup_items) (exec_dup_items integer_yank in1 exec_do*while () integer_dup integer_div boolean_rot) (in2) exec_empty integer_eq) (exec_k_when_autoconstructing (integer_shove tagged_512 tagged_769 exec_k (integer_min boolean_eq integer_div exec_empty) (boolean_or in1 boolean_stackdepth boolean_invert_first_then_and boolean_invert_first_then_and integer_dup) exec_do*times (in1 exec_y (integer_sub) integer_lt integer_dup_times in2 integer_mult in2 boolean_and integer_gt boolean_dup boolean_and boolean_and integer_flush integer_min integer_inc boolean_invert_second_then_and exec_stackdepth integer_dec 50)) ()) ()) ()) () ())))
Lexicase best errors: [1 0 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 134
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_497} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 2, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction tagged_525} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_512} {:close 0, :instruction tagged_769} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction 50})
Zero cases best program: (integer_sub tag_exec_497 (integer_dup boolean_not) boolean_frominteger boolean_dup_times integer_pop integer_div integer_flush exec_s_when_autoconstructing (integer_yank boolean_dup) (exec_if (integer_div) () integer_gt integer_empty print_integer) (exec_pop () integer_dec) tagged_525 boolean_invert_second_then_and boolean_invert_first_then_and exec_when () integer_dup_times boolean_and boolean_dup_items boolean_dup_items boolean_empty integer_lte exec_y (exec_do*count (integer_empty integer_add exec_s_when_autoconstructing (exec_swap (integer_empty boolean_invert_first_then_and exec_do*count () exec_shove () exec_rot (exec_s_when_autoconstructing (in3 exec_empty integer_max integer_div) (print_integer) (exec_eq integer_yankdup) exec_yank exec_empty boolean_flush boolean_dup exec_s_when_autoconstructing (integer_dup_items) (exec_dup_items integer_yank in1 exec_do*while () integer_dup integer_div boolean_rot) (in2) exec_empty integer_eq) (exec_k_when_autoconstructing (integer_shove tagged_512 tagged_769 exec_k (integer_min boolean_eq integer_div exec_empty) (boolean_or in1 boolean_stackdepth boolean_invert_first_then_and boolean_invert_first_then_and integer_dup) exec_do*times (in1 exec_y (integer_sub) integer_lt integer_dup_times in2 integer_mult in2 boolean_and integer_gt boolean_dup boolean_and boolean_and integer_flush integer_min integer_inc boolean_invert_second_then_and exec_stackdepth integer_dec 50)) ()) ()) ()) () ())))
Zero cases best errors: [1 0 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 134
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 3 4 2 4 2 5 1 8 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 3 4 2 4 2 5 1 8 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_y} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 0, :instruction -88} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_dec})
Best program: (integer_swap integer_gte integer_dup_times boolean_and boolean_rot exec_yank boolean_invert_second_then_and integer_dec boolean_frominteger print_boolean integer_pop exec_do*times (boolean_dup integer_gt boolean_not boolean_yank integer_lt boolean_eq boolean_invert_first_then_and integer_yankdup) boolean_pop boolean_pop boolean_invert_first_then_and exec_dup (boolean_frominteger exec_pop () in4 exec_while () print_integer boolean_xor integer_yank boolean_yank in3 exec_y () exec_do*times () boolean_pop exec_shove (exec_k_when_autoconstructing (boolean_dup_items boolean_not integer_eq integer_yankdup exec_if (integer_gt print_newline -88 exec_pop () boolean_dup_items exec_while (exec_k (exec_do*range (exec_yankdup integer_swap boolean_dup_times exec_flush exec_k (exec_k_when_autoconstructing (integer_div integer_dec exec_rot (integer_lte) (boolean_yank integer_max integer_max boolean_frominteger exec_y (boolean_invert_second_then_and integer_stackdepth integer_dup_times integer_lte integer_gte print_integer) exec_shove (integer_dec)) ()) ()) ())) ())) ()) ())))
Errors: [1 1 1 1 1 0 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 74
Size: 100
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 9.965
Median total errors in population: 10
Error averages by case: (0.996 0.997 0.996 0.998 0.996 0.998 0.995 0.999 0.992 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.631
Average program size in population (points): 71.114
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 487230
--- Timings ---
Current time: 1559593785595 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 29.9%
Fitness Testing:      1.7 seconds, 66.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: 36                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: 48                  | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 30                 
Correct output: 48                  | Program output: 48                 
Correct output: 46                  | Program output: 46                 
Correct output: 9                   | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 83                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 41                 
Correct output: 11                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 52                  | Program output: 52                 
Correct output: 36                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 76                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: -44                 | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -91                
Correct output: 15                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: 32                  | Program output: 32                 
Correct output: -98                 | Program output: -13                
Correct output: -89                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 87                 
Correct output: -81                 | Program output: -30                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: 73                 
Correct output: -55                 | Program output: 5                  
Correct output: -31                 | Program output: -31                
Correct output: -93                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: 37                  | Program output: 79                 
Correct output: -59                 | Program output: -30                
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -57                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -89                
Correct output: -76                 | Program output: -70                
Correct output: -37                 | Program output: -32                
Correct output: -21                 | Program output: -3                 
Correct output: -14                 | Program output: -5                 
Correct output: -86                 | Program output: -86                
Correct output: -62                 | Program output: -2                 
Correct output: -43                 | Program output: -22                
Correct output: -92                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -7                 
Correct output: -97                 | Program output: -8                 
Correct output: -65                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 27                 
Correct output: -46                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -60                 | Program output: -60                
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -71                
Correct output: -61                 | Program output: -61                
Correct output: -74                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: 43                  | Program output: 43                 
Correct output: -92                 | Program output: -80                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_integer_506} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_shove (exec_s_when_autoconstructing (exec_rot (integer_min print_integer integer_dec exec_swap () (boolean_empty integer_gte integer_min exec_dup_items integer_yank)) (boolean_xor exec_yank exec_dup () boolean_invert_second_then_and integer_flush) (exec_dup (exec_when (exec_k (exec_dup_items integer_mult integer_lt integer_add) (integer_dup_items boolean_stackdepth integer_fromboolean integer_max) exec_yankdup exec_while () integer_eq boolean_or boolean_dup_items) integer_eq integer_lte exec_when (integer_max)) integer_fromboolean exec_do*count (integer_sub integer_add) exec_do*while (integer_stackdepth exec_do*range (boolean_pop exec_k_when_autoconstructing (boolean_swap exec_s_when_autoconstructing (integer_rot) (tag_integer_506 boolean_dup_items) (boolean_eq exec_swap (boolean_shove integer_yank in4) (exec_noop exec_k_when_autoconstructing (boolean_stackdepth integer_dup) (boolean_rot boolean_dup) integer_dup_times) integer_flush boolean_invert_second_then_and in4 in1 exec_do*while ())) ())))) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_integer_506} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_shove (exec_s_when_autoconstructing (exec_rot (integer_min print_integer integer_dec exec_swap () (boolean_empty integer_gte integer_min exec_dup_items integer_yank)) (boolean_xor exec_yank exec_dup () boolean_invert_second_then_and integer_flush) (exec_dup (exec_when (exec_k (exec_dup_items integer_mult integer_lt integer_add) (integer_dup_items boolean_stackdepth integer_fromboolean integer_max) exec_yankdup exec_while () integer_eq boolean_or boolean_dup_items) integer_eq integer_lte exec_when (integer_max)) integer_fromboolean exec_do*count (integer_sub integer_add) exec_do*while (integer_stackdepth exec_do*range (boolean_pop exec_k_when_autoconstructing (boolean_swap exec_s_when_autoconstructing (integer_rot) (tag_integer_506 boolean_dup_items) (boolean_eq exec_swap (boolean_shove integer_yank in4) (exec_noop exec_k_when_autoconstructing (boolean_stackdepth integer_dup) (boolean_rot boolean_dup) integer_dup_times) integer_flush boolean_invert_second_then_and in4 in1 exec_do*while ())) ())))) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (149 135 104 77 149 349 108 150 143 110)
Population mean number of elite cases: 1.47
Count of perfect (error zero) individuals by case: (149 135 104 77 149 349 108 150 143 110)
Population mean number of perfect (error zero) cases: 1.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_integer_506} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while})
Best program: (exec_shove (exec_s_when_autoconstructing (exec_rot (integer_min print_integer integer_dec exec_swap () (boolean_empty integer_gte integer_min exec_dup_items integer_yank)) (boolean_xor exec_yank exec_dup () boolean_invert_second_then_and integer_flush) (exec_dup (exec_when (exec_k (exec_dup_items integer_mult integer_lt integer_add) (integer_dup_items boolean_stackdepth integer_fromboolean integer_max) exec_yankdup exec_while () integer_eq boolean_or boolean_dup_items) integer_eq integer_lte exec_when (integer_max)) integer_fromboolean exec_do*count (integer_sub integer_add) exec_do*while (integer_stackdepth exec_do*range (boolean_pop exec_k_when_autoconstructing (boolean_swap exec_s_when_autoconstructing (integer_rot) (tag_integer_506 boolean_dup_items) (boolean_eq exec_swap (boolean_shove integer_yank in4) (exec_noop exec_k_when_autoconstructing (boolean_stackdepth integer_dup) (boolean_rot boolean_dup) integer_dup_times) integer_flush boolean_invert_second_then_and in4 in1 exec_do*while ())) ())))) () ()))
Errors: [0 0 1 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 68
Size: 98
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 8.526
Median total errors in population: 9
Error averages by case: (0.851 0.865 0.896 0.923 0.851 0.651 0.892 0.85 0.857 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.027
Average program size in population (points): 94.923
Average percent parens in population: 0.275
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1284687
--- Timings ---
Current time: 1559593788161 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.8 seconds, 33.9%
Fitness Testing:      2.7 seconds, 50.6%
Report:               0.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: 36                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: 48                  | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 30                 
Correct output: 48                  | Program output: 48                 
Correct output: 46                  | Program output: 46                 
Correct output: 9                   | Program output: 26                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 83                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 41                 
Correct output: 11                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 52                  | Program output: 52                 
Correct output: 36                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 76                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: -44                 | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -91                
Correct output: 15                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: 32                  | Program output: 32                 
Correct output: -98                 | Program output: -13                
Correct output: -89                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 87                 
Correct output: -81                 | Program output: -30                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: 73                 
Correct output: -55                 | Program output: 5                  
Correct output: -31                 | Program output: -31                
Correct output: -93                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: 37                  | Program output: 79                 
Correct output: -59                 | Program output: -30                
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -57                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -89                
Correct output: -76                 | Program output: -70                
Correct output: -37                 | Program output: -32                
Correct output: -21                 | Program output: -3                 
Correct output: -14                 | Program output: -5                 
Correct output: -86                 | Program output: -86                
Correct output: -62                 | Program output: -2                 
Correct output: -43                 | Program output: -22                
Correct output: -92                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -7                 
Correct output: -97                 | Program output: -8                 
Correct output: -65                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 27                 
Correct output: -46                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -60                 | Program output: -60                
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -71                
Correct output: -61                 | Program output: -61                
Correct output: -74                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: 43                  | Program output: 43                 
Correct output: -92                 | Program output: -80                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_integer_506} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_shove (exec_s_when_autoconstructing (exec_rot (integer_min print_integer integer_dec exec_swap () (boolean_empty integer_min exec_dup_items integer_yank)) (boolean_xor exec_yank exec_dup () boolean_invert_second_then_and exec_dup (exec_when (exec_dup_items integer_mult integer_lt boolean_dup_times integer_dup_items boolean_stackdepth integer_max) exec_yankdup exec_while () integer_eq in1 boolean_or boolean_dup_items) integer_eq integer_lte exec_when (integer_max)) (integer_fromboolean exec_do*count (integer_sub integer_add) exec_do*while (integer_stackdepth exec_do*range (boolean_pop exec_pop () exec_k_when_autoconstructing (boolean_swap exec_s_when_autoconstructing (integer_rot) (tag_integer_506 boolean_dup_items) (boolean_eq in1 exec_swap (boolean_shove integer_yank in4) (exec_noop boolean_xor exec_k_when_autoconstructing (boolean_stackdepth integer_dup) (boolean_rot boolean_dup) boolean_swap integer_dup_times) integer_flush boolean_invert_second_then_and in4 in1 exec_do*while ())) ())))) () ()))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 98
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_integer_506} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_shove (exec_s_when_autoconstructing (exec_rot (integer_min print_integer integer_dec exec_swap () (boolean_empty integer_min exec_dup_items integer_yank)) (boolean_xor exec_yank exec_dup () boolean_invert_second_then_and exec_dup (exec_when (exec_dup_items integer_mult integer_lt boolean_dup_times integer_dup_items boolean_stackdepth integer_max) exec_yankdup exec_while () integer_eq in1 boolean_or boolean_dup_items) integer_eq integer_lte exec_when (integer_max)) (integer_fromboolean exec_do*count (integer_sub integer_add) exec_do*while (integer_stackdepth exec_do*range (boolean_pop exec_pop () exec_k_when_autoconstructing (boolean_swap exec_s_when_autoconstructing (integer_rot) (tag_integer_506 boolean_dup_items) (boolean_eq in1 exec_swap (boolean_shove integer_yank in4) (exec_noop boolean_xor exec_k_when_autoconstructing (boolean_stackdepth integer_dup) (boolean_rot boolean_dup) boolean_swap integer_dup_times) integer_flush boolean_invert_second_then_and in4 in1 exec_do*while ())) ())))) () ()))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 98
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 58 340 95 100 115 198 156 119 160)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (99 58 340 95 100 115 198 156 119 160)
Population mean number of perfect (error zero) cases: 1.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 2, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while})
Best program: (exec_shove (exec_s_when_autoconstructing (exec_rot (integer_min print_integer exec_swap () (boolean_empty integer_gte integer_min exec_dup_items integer_yank)) (boolean_xor exec_yank exec_dup () boolean_invert_second_then_and integer_flush) (exec_dup (exec_when (exec_k (exec_dup_items integer_mult integer_lt integer_add) (integer_dup_items boolean_stackdepth integer_fromboolean integer_max) exec_yankdup exec_while () integer_eq boolean_or boolean_dup_items) integer_lte exec_when (integer_max)) integer_fromboolean exec_do*count (integer_sub integer_add) integer_stackdepth exec_do*range (boolean_pop exec_k_when_autoconstructing (boolean_swap exec_s_when_autoconstructing (integer_rot) (exec_y_when_autoconstructing () integer_dup_items boolean_dup_items) (boolean_invert_second_then_and boolean_eq exec_swap (boolean_shove in4) (exec_noop exec_k_when_autoconstructing (boolean_stackdepth integer_dup) (boolean_rot boolean_dup) integer_dup_times) integer_flush boolean_invert_second_then_and in4 in1 exec_do*while ())) ()))) () ()))
Errors: [0 1 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 66
Size: 96
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 8.56
Median total errors in population: 10
Error averages by case: (0.901 0.942 0.66 0.905 0.9 0.885 0.802 0.844 0.881 0.84)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.466
Average program size in population (points): 95.394
Average percent parens in population: 0.296
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2114629
--- Timings ---
Current time: 1559593790685 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.0 seconds, 38.2%
Fitness Testing:      3.5 seconds, 44.4%
Report:               1.3 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 171
Test mean error for best: 0.17100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: 36                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: 48                  | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 48                  | Program output: 61                 
Correct output: 46                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 52                  | Program output: 74                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 55                  | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -30                
Correct output: -91                 | Program output: -59                
Correct output: 15                  | Program output: 15                 
Correct output: -90                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: 32                  | Program output: 45                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -55                 | Program output: -55                
Correct output: -31                 | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -39                
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -62                 | Program output: -62                
Correct output: -49                 | Program output: -3                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -14                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -62                 | Program output: -62                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -69                
Correct output: 2                   | Program output: 2                  
Correct output: -46                 | Program output: -46                
Correct output: -62                 | Program output: -62                
Correct output: -60                 | Program output: -60                
Correct output: -23                 | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: -68                
Correct output: 43                  | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_642} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop})
Lexicase best program: (integer_pop in4 boolean_swap tagged_642 exec_if (in4) (exec_do*range (in1 integer_min boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) integer_min exec_s_when_autoconstructing (print_integer exec_yankdup exec_dup (integer_yankdup exec_k (boolean_flush integer_inc boolean_not) (exec_flush) exec_while (integer_stackdepth boolean_invert_first_then_and integer_inc) exec_flush exec_do*count (exec_do*range (boolean_pop exec_s_when_autoconstructing () (exec_dup (integer_pop)) ())))) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 54
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_642} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_pop in4 boolean_swap tagged_642 exec_if (in4) (exec_do*range (in1 integer_min boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) integer_min exec_s_when_autoconstructing (print_integer exec_yankdup exec_dup (integer_yankdup exec_k (boolean_flush integer_inc boolean_not) (exec_flush) exec_while (integer_stackdepth boolean_invert_first_then_and integer_inc) exec_flush exec_do*count (exec_do*range (boolean_pop exec_s_when_autoconstructing () (exec_dup (integer_pop)) ())))) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 54
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (583 193 355 218 184 188 514 509 355 91)
Population mean number of elite cases: 3.19
Count of perfect (error zero) individuals by case: (583 193 355 218 184 188 514 509 355 91)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_642} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items})
Best program: (in4 in2 boolean_swap tagged_642 exec_if (in4) (exec_do*range (integer_min boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) integer_min exec_s_when_autoconstructing (print_integer exec_yankdup exec_do*while () exec_dup (integer_yankdup boolean_flush integer_inc boolean_not) exec_flush) (exec_while (integer_stackdepth boolean_invert_first_then_and integer_inc) exec_flush exec_do*count (integer_pop exec_do*range (boolean_pop integer_shove exec_pop (integer_div exec_dup (integer_gt) in1 exec_dup_items)))) ())))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.81
Median total errors in population: 6
Error averages by case: (0.417 0.807 0.645 0.782 0.816 0.812 0.486 0.491 0.645 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.053
Average program size in population (points): 81.875
Average percent parens in population: 0.306
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2731487
--- Timings ---
Current time: 1559593792636 milliseconds
Total Time:          10.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.2 seconds, 41.2%
Fitness Testing:      4.1 seconds, 40.4%
Report:               1.8 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 171
Test mean error for best: 0.17100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: 36                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: 48                  | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 48                  | Program output: 61                 
Correct output: 46                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 52                  | Program output: 74                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 55                  | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -30                
Correct output: -91                 | Program output: -59                
Correct output: 15                  | Program output: 15                 
Correct output: -90                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: 32                  | Program output: 45                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -55                 | Program output: -55                
Correct output: -31                 | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -39                
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -62                 | Program output: -62                
Correct output: -49                 | Program output: -3                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -14                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -62                 | Program output: -62                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -69                
Correct output: 2                   | Program output: 2                  
Correct output: -46                 | Program output: -46                
Correct output: -62                 | Program output: -62                
Correct output: -60                 | Program output: -60                
Correct output: -23                 | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: -68                
Correct output: 43                  | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_642} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items})
Lexicase best program: (in4 boolean_dup_times in2 boolean_swap tagged_642 exec_if (in4) (exec_do*range (integer_min boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) integer_min exec_s_when_autoconstructing (print_integer exec_yankdup exec_do*while () exec_dup (integer_yankdup boolean_flush integer_inc exec_swap (boolean_not) (exec_flush) integer_stackdepth boolean_invert_first_then_and integer_inc) exec_flush integer_empty exec_do*count (integer_pop exec_do*range (boolean_pop integer_shove exec_pop (integer_div exec_dup_items)) exec_dup (integer_gt) in1 exec_dup_items)) () ())))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 59
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_642} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items})
Zero cases best program: (in4 boolean_dup_times in2 boolean_swap tagged_642 exec_if (in4) (exec_do*range (integer_min boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) integer_min exec_s_when_autoconstructing (print_integer exec_yankdup exec_do*while () exec_dup (integer_yankdup boolean_flush integer_inc exec_swap (boolean_not) (exec_flush) integer_stackdepth boolean_invert_first_then_and integer_inc) exec_flush integer_empty exec_do*count (integer_pop exec_do*range (boolean_pop integer_shove exec_pop (integer_div exec_dup_items)) exec_dup (integer_gt) in1 exec_dup_items)) () ())))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 59
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (509 669 478 769 155 691 260 597 512 158)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (509 669 478 769 155 691 260 597 512 158)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction tagged_642} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items})
Best program: (in4 in2 tagged_642 exec_if (in4) (exec_do*range (integer_min boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) integer_min exec_s_when_autoconstructing (print_integer exec_yankdup exec_do*while () integer_pop exec_dup (integer_yankdup boolean_flush integer_inc boolean_not) exec_flush) (exec_while (integer_stackdepth boolean_invert_first_then_and exec_flush exec_k (exec_do*count (integer_pop exec_do*range (boolean_pop integer_shove exec_pop (integer_div exec_dup (integer_gt) in1 exec_dup_items)))) ())) ())))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 5.202
Median total errors in population: 5
Error averages by case: (0.491 0.331 0.522 0.231 0.845 0.309 0.74 0.403 0.488 0.842)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.529
Average program size in population (points): 56.788
Average percent parens in population: 0.320
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3302041
--- Timings ---
Current time: 1559593794483 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.3 seconds, 43.9%
Fitness Testing:      4.6 seconds, 38.2%
Report:               2.0 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 171
Test mean error for best: 0.17100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: 36                  | Program output: 99                 
Correct output: 3                   | Program output: 3                  
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: 48                  | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 48                  | Program output: 61                 
Correct output: 46                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 52                  | Program output: 74                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 66                 
Correct output: 7                   | Program output: 7                  
Correct output: 55                  | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -30                
Correct output: -91                 | Program output: -59                
Correct output: 15                  | Program output: 15                 
Correct output: -90                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: 32                  | Program output: 45                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -67                
Correct output: -77                 | Program output: -77                
Correct output: -55                 | Program output: -55                
Correct output: -31                 | Program output: -2                 
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -39                
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -62                 | Program output: -62                
Correct output: -49                 | Program output: -3                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: -21                
Correct output: -14                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -62                 | Program output: -62                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -69                
Correct output: 2                   | Program output: 2                  
Correct output: -46                 | Program output: -46                
Correct output: -62                 | Program output: -62                
Correct output: -60                 | Program output: -60                
Correct output: -23                 | Program output: 0                  
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: -68                 | Program output: -68                
Correct output: 43                  | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction -32} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items})
Lexicase best program: (in4 in2 boolean_swap exec_if (in4) (exec_do*range (boolean_dup_times integer_min boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) integer_min exec_s_when_autoconstructing (boolean_and print_integer exec_yankdup exec_do*while () boolean_invert_first_then_and integer_yankdup boolean_pop boolean_flush integer_inc boolean_stackdepth boolean_not) (exec_flush) (exec_while (integer_stackdepth exec_pop (boolean_invert_first_then_and integer_inc) exec_flush exec_do*count (integer_pop -32 boolean_stackdepth exec_do*range (boolean_pop integer_shove integer_div boolean_rot exec_dup (in3 in1 exec_dup_items))))))))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 60
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction -32} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items})
Zero cases best program: (in4 in2 boolean_swap exec_if (in4) (exec_do*range (boolean_dup_times integer_min boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) integer_min exec_s_when_autoconstructing (boolean_and print_integer exec_yankdup exec_do*while () boolean_invert_first_then_and integer_yankdup boolean_pop boolean_flush integer_inc boolean_stackdepth boolean_not) (exec_flush) (exec_while (integer_stackdepth exec_pop (boolean_invert_first_then_and integer_inc) exec_flush exec_do*count (integer_pop -32 boolean_stackdepth exec_do*range (boolean_pop integer_shove integer_div boolean_rot exec_dup (in3 in1 exec_dup_items))))))))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 60
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 229 553 237 235 528 521 531 629 463)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (154 229 553 237 235 528 521 531 629 463)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_642} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items})
Best program: (in4 in2 boolean_swap tagged_642 in4 exec_do*range (exec_y_when_autoconstructing (integer_min exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) integer_min print_integer exec_yankdup exec_do*while () exec_dup (integer_dup integer_yankdup integer_inc boolean_not) exec_flush) exec_while (integer_stackdepth boolean_invert_first_then_and exec_flush exec_do*count (integer_gt integer_pop print_newline) exec_do*range (boolean_pop integer_shove exec_pop (integer_div exec_dup (integer_gt) in1 exec_dup_items)))))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 5.92
Median total errors in population: 5
Error averages by case: (0.846 0.771 0.447 0.763 0.765 0.472 0.479 0.469 0.371 0.537)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.842
Average program size in population (points): 56.076
Average percent parens in population: 0.306
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.247
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3795972
--- Timings ---
Current time: 1559593796262 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.4 seconds, 46.4%
Fitness Testing:      5.0 seconds, 36.4%
Report:               2.3 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 227
Test mean error for best: 0.22700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: 36                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: 48                  | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 46                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 52                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: -44                 | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -91                
Correct output: 15                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: 32                  | Program output: 32                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: 70                 
Correct output: -55                 | Program output: 1                  
Correct output: -31                 | Program output: -31                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -30                
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -57                 | Program output: -57                
Correct output: -62                 | Program output: -62                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: -3                 
Correct output: -14                 | Program output: -5                 
Correct output: -86                 | Program output: -86                
Correct output: -62                 | Program output: -2                 
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: -8                 
Correct output: -65                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 27                 
Correct output: -46                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -60                 | Program output: -60                
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -71                
Correct output: -61                 | Program output: -61                
Correct output: -74                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: 43                  | Program output: 43                 
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_pop in1 in4 boolean_swap exec_if (in4) (exec_do*range (integer_min integer_swap boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) boolean_empty integer_min exec_s_when_autoconstructing (print_integer exec_yankdup exec_dup (integer_yankdup exec_k (boolean_flush integer_empty integer_inc boolean_not) (exec_while (boolean_invert_first_then_and integer_inc) integer_lt exec_do*count (exec_do*range (exec_s_when_autoconstructing () (boolean_pop integer_shove exec_s_when_autoconstructing () (exec_dup (integer_gt) exec_dup_items) ()) ()))))) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 60
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_pop in1 in4 boolean_swap exec_if (in4) (exec_do*range (integer_min integer_swap boolean_yank exec_y_when_autoconstructing (boolean_dup_times integer_yankdup in3) boolean_empty integer_min exec_s_when_autoconstructing (print_integer exec_yankdup exec_dup (integer_yankdup exec_k (boolean_flush integer_empty integer_inc boolean_not) (exec_while (boolean_invert_first_then_and integer_inc) integer_lt exec_do*count (exec_do*range (exec_s_when_autoconstructing () (boolean_pop integer_shove exec_s_when_autoconstructing () (exec_dup (integer_gt) exec_dup_items) ()) ()))))) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 60
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (122 716 534 432 686 432 565 257 448 122)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (122 716 534 432 686 432 565 257 448 122)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_642} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing})
Best program: (tagged_642 exec_if (in4) (exec_do*range (in1 exec_y_when_autoconstructing () integer_min boolean_yank boolean_dup_times integer_yankdup in3) integer_min integer_mult print_integer boolean_dup exec_yankdup exec_dup (exec_k (boolean_flush integer_inc in4) (boolean_not) exec_flush) exec_while (integer_stackdepth boolean_frominteger boolean_invert_first_then_and integer_inc) exec_flush exec_do*count (exec_do*range (exec_stackdepth) boolean_pop exec_y_when_autoconstructing (exec_s_when_autoconstructing () () ()))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 35
Size: 50
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.686
Median total errors in population: 6
Error averages by case: (0.878 0.284 0.466 0.568 0.314 0.568 0.435 0.743 0.552 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.646
Average program size in population (points): 55.134
Average percent parens in population: 0.297
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4279840
--- Timings ---
Current time: 1559593798032 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.5 seconds, 48.3%
Fitness Testing:      5.4 seconds, 35.0%
Report:               2.5 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 227
Test mean error for best: 0.22700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: 36                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: 48                  | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 46                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 52                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: -44                 | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -91                
Correct output: 15                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: 32                  | Program output: 32                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: 70                 
Correct output: -55                 | Program output: 1                  
Correct output: -31                 | Program output: -31                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -30                
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -57                 | Program output: -57                
Correct output: -62                 | Program output: -62                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: -3                 
Correct output: -14                 | Program output: -5                 
Correct output: -86                 | Program output: -86                
Correct output: -62                 | Program output: -2                 
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: -8                 
Correct output: -65                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 27                 
Correct output: -46                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -60                 | Program output: -60                
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -71                
Correct output: -61                 | Program output: -61                
Correct output: -74                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: 43                  | Program output: 43                 
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_noop integer_pop in1 in4 integer_fromboolean boolean_yank boolean_swap exec_k_when_autoconstructing (exec_if (in4) (exec_do*range (integer_min boolean_yank exec_y_when_autoconstructing (exec_if (in3) (integer_min exec_s_when_autoconstructing (print_integer exec_dup (integer_yankdup exec_k (boolean_flush integer_inc boolean_not) (exec_swap (boolean_swap) (exec_flush) boolean_rot integer_inc) exec_flush exec_do*range (exec_s_when_autoconstructing () (boolean_stackdepth boolean_pop exec_pop (exec_dup (integer_gt) exec_dup_items)) ()))) () ()))))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 62
Percent parens: 0.371
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_noop integer_pop in1 in4 integer_fromboolean boolean_yank boolean_swap exec_k_when_autoconstructing (exec_if (in4) (exec_do*range (integer_min boolean_yank exec_y_when_autoconstructing (exec_if (in3) (integer_min exec_s_when_autoconstructing (print_integer exec_dup (integer_yankdup exec_k (boolean_flush integer_inc boolean_not) (exec_swap (boolean_swap) (exec_flush) boolean_rot integer_inc) exec_flush exec_do*range (exec_s_when_autoconstructing () (boolean_stackdepth boolean_pop exec_pop (exec_dup (integer_gt) exec_dup_items)) ()))) () ()))))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 62
Percent parens: 0.371
--- Lexicase Population Statistics ---
Count of elite individuals by case: (618 311 468 488 567 300 310 303 313 588)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (618 311 468 488 567 300 310 303 313 588)
Population mean number of perfect (error zero) cases: 4.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_642} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items})
Best program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 35
Size: 49
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.734
Median total errors in population: 7
Error averages by case: (0.382 0.689 0.532 0.512 0.433 0.7 0.69 0.697 0.687 0.412)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.734
Average program size in population (points): 54.854
Average percent parens in population: 0.309
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4771053
--- Timings ---
Current time: 1559593799825 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.6 seconds, 49.8%
Fitness Testing:      5.9 seconds, 34.0%
Report:               2.7 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 49


Auto-simplifying with starting size: 49
step: 0
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 500
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 1000
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 1500
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 2000
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 2500
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 3000
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 3500
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 4000
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 4500
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 5000
program: (integer_pop in1 in4 boolean_swap tagged_642 exec_if (boolean_pop in4) (exec_do*range (integer_min integer_yankdup in3) integer_min print_integer integer_yankdup boolean_flush integer_inc boolean_not) exec_flush exec_s (boolean_invert_first_then_and integer_flush integer_lte integer_inc) (exec_do*count (exec_do*range (integer_yank integer_shove exec_pop (integer_sub exec_s_when_autoconstructing () (integer_dup_items exec_dup (integer_gte exec_dup_items)) ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 227
Test mean error for best: 0.22700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -31                 | Program output: -31                
Correct output: 36                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: 48                  | Program output: 48                 
Correct output: -83                 | Program output: -83                
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 46                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 32                  | Program output: 32                 
Correct output: 52                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: -44                 | Program output: 35                 
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -91                
Correct output: 15                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: 5                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: 32                  | Program output: 32                 
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -67                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -93                 | Program output: -81                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: 70                 
Correct output: -55                 | Program output: 1                  
Correct output: -31                 | Program output: -31                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -30                
Correct output: -52                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -57                 | Program output: -57                
Correct output: -62                 | Program output: -62                
Correct output: -49                 | Program output: -49                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -37                 | Program output: -37                
Correct output: -21                 | Program output: -3                 
Correct output: -14                 | Program output: -5                 
Correct output: -86                 | Program output: -86                
Correct output: -62                 | Program output: -2                 
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -97                 | Program output: -8                 
Correct output: -65                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: 2                   | Program output: 27                 
Correct output: -46                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -60                 | Program output: -60                
Correct output: -23                 | Program output: -23                
Correct output: -74                 | Program output: -74                
Correct output: -71                 | Program output: -71                
Correct output: -61                 | Program output: -61                
Correct output: -74                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: 43                  | Program output: 43                 
Correct output: -92                 | Program output: -92                
Correct output: -43                 | Program output: -43                
;;******************************
