Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[98 98 98 -92] -92] [[1 1 -19 1] -19] [[6 6 -34 6] -34] [[100 100 100 82] 82] [[69 -43 -43 -43] -43] [[-64 52 -64 -64] -64] [[79 26 26 26] 26] [[-25 -10 -10 -10] -25] [[-83 -83 -83 20] -83] [[55 -100 -100 -100] -100] [(15 15 15 15) 15] [(85 85 85 85) 85] [(-98 -98 -98 -98) -98] [(16 16 16 16) 16] [(93 93 93 93) 93] [(21 43 54 22) 21] [(12 24 80 87) 12] [(65 46 23 90) 23] [(49 34 61 19) 19] [(41 39 84 23) 23] [(45 65 53 48) 45] [(88 38 13 35) 13] [(27 32 44 57) 27] [(26 38 1 64) 1] [(39 14 26 85) 14] [(6 77 19 56) 6] [(77 67 49 59) 49] [(93 99 16 29) 16] [(65 90 40 51) 40] [(93 71 60 18) 18] [(92 53 44 53) 44] [(61 31 81 15) 15] [(82 96 36 85) 36] [(86 72 87 57) 57] [(67 85 13 10) 10] [(17 68 -15 33) -15] [(-55 -10 6 27) -55] [(-94 -46 78 -29) -94] [(-6 75 -94 39) -94] [(45 -94 41 -49) -94] [(53 53 -8 26) -8] [(75 -33 -65 -9) -65] [(27 -48 -30 -85) -85] [(-8 -39 25 -4) -39] [(90 65 -100 -70) -100] [(83 -35 24 -20) -35] [(73 -35 -3 97) -35] [(71 -64 55 -46) -64] [(-15 0 91 -22) -22] [(-82 49 79 27) -82] [(-27 -66 -8 72) -66] [(54 -17 -23 65) -23] [(99 -81 -70 -64) -81] [(-77 -20 49 24) -77] [(-90 49 -38 -44) -90] [(5 -66 -31 -31) -66] [(-72 -73 88 100) -73] [(94 -23 -32 67) -32] [(22 -49 -64 -24) -64] [(-5 -40 74 0) -40] [(-74 -11 -22 -48) -74] [(-69 -10 -81 -67) -81] [(-70 -67 43 97) -70] [(23 -69 -50 41) -69] [(-13 -16 -64 30) -64] [(73 57 52 48) 48] [(34 44 44 -72) -72] [(-51 83 63 -4) -51] [(16 93 -33 36) -33] [(-48 -69 24 31) -69] [(28 81 -46 -72) -72] [(-75 -92 -23 -30) -92] [(26 -39 -41 -11) -41] [(43 20 -14 57) -14] [(-83 53 -25 22) -83] [(61 -16 -51 21) -51] [(41 -37 -58 60) -58] [(-29 35 12 15) -29] [(41 -39 92 -23) -39] [(-29 -61 9 -88) -88] [(67 43 -96 69) -96] [(-40 -16 -23 -69) -69] [(49 96 30 74) 30] [(-9 -60 -54 -99) -99] [(60 59 62 -87) -87] [(-65 -79 94 74) -79] [(84 35 66 93) 35] [(58 79 26 74) 26] [(52 -39 33 26) -39] [(4 -38 -51 -37) -51] [(21 -84 -4 -71) -84] [(-74 -34 -88 -30) -88] [(-50 -15 31 -88) -88] [(41 60 29 -97) -97] [(-40 49 81 -12) -40])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[98 98 98 -92] -92]
Train Case:   6 | Input/Output: [[1 1 -19 1] -19]
Train Case:   7 | Input/Output: [[6 6 -34 6] -34]
Train Case:   8 | Input/Output: [[100 100 100 82] 82]
Train Case:   9 | Input/Output: [[69 -43 -43 -43] -43]
Train Case:  10 | Input/Output: [[-64 52 -64 -64] -64]
Train Case:  11 | Input/Output: [[79 26 26 26] 26]
Train Case:  12 | Input/Output: [[-25 -10 -10 -10] -25]
Train Case:  13 | Input/Output: [[-83 -83 -83 20] -83]
Train Case:  14 | Input/Output: [[55 -100 -100 -100] -100]
Train Case:  15 | Input/Output: [(15 15 15 15) 15]
Train Case:  16 | Input/Output: [(85 85 85 85) 85]
Train Case:  17 | Input/Output: [(-98 -98 -98 -98) -98]
Train Case:  18 | Input/Output: [(16 16 16 16) 16]
Train Case:  19 | Input/Output: [(93 93 93 93) 93]
Train Case:  20 | Input/Output: [(21 43 54 22) 21]
Train Case:  21 | Input/Output: [(12 24 80 87) 12]
Train Case:  22 | Input/Output: [(65 46 23 90) 23]
Train Case:  23 | Input/Output: [(49 34 61 19) 19]
Train Case:  24 | Input/Output: [(41 39 84 23) 23]
Train Case:  25 | Input/Output: [(45 65 53 48) 45]
Train Case:  26 | Input/Output: [(88 38 13 35) 13]
Train Case:  27 | Input/Output: [(27 32 44 57) 27]
Train Case:  28 | Input/Output: [(26 38 1 64) 1]
Train Case:  29 | Input/Output: [(39 14 26 85) 14]
Train Case:  30 | Input/Output: [(6 77 19 56) 6]
Train Case:  31 | Input/Output: [(77 67 49 59) 49]
Train Case:  32 | Input/Output: [(93 99 16 29) 16]
Train Case:  33 | Input/Output: [(65 90 40 51) 40]
Train Case:  34 | Input/Output: [(93 71 60 18) 18]
Train Case:  35 | Input/Output: [(92 53 44 53) 44]
Train Case:  36 | Input/Output: [(61 31 81 15) 15]
Train Case:  37 | Input/Output: [(82 96 36 85) 36]
Train Case:  38 | Input/Output: [(86 72 87 57) 57]
Train Case:  39 | Input/Output: [(67 85 13 10) 10]
Train Case:  40 | Input/Output: [(17 68 -15 33) -15]
Train Case:  41 | Input/Output: [(-55 -10 6 27) -55]
Train Case:  42 | Input/Output: [(-94 -46 78 -29) -94]
Train Case:  43 | Input/Output: [(-6 75 -94 39) -94]
Train Case:  44 | Input/Output: [(45 -94 41 -49) -94]
Train Case:  45 | Input/Output: [(53 53 -8 26) -8]
Train Case:  46 | Input/Output: [(75 -33 -65 -9) -65]
Train Case:  47 | Input/Output: [(27 -48 -30 -85) -85]
Train Case:  48 | Input/Output: [(-8 -39 25 -4) -39]
Train Case:  49 | Input/Output: [(90 65 -100 -70) -100]
Train Case:  50 | Input/Output: [(83 -35 24 -20) -35]
Train Case:  51 | Input/Output: [(73 -35 -3 97) -35]
Train Case:  52 | Input/Output: [(71 -64 55 -46) -64]
Train Case:  53 | Input/Output: [(-15 0 91 -22) -22]
Train Case:  54 | Input/Output: [(-82 49 79 27) -82]
Train Case:  55 | Input/Output: [(-27 -66 -8 72) -66]
Train Case:  56 | Input/Output: [(54 -17 -23 65) -23]
Train Case:  57 | Input/Output: [(99 -81 -70 -64) -81]
Train Case:  58 | Input/Output: [(-77 -20 49 24) -77]
Train Case:  59 | Input/Output: [(-90 49 -38 -44) -90]
Train Case:  60 | Input/Output: [(5 -66 -31 -31) -66]
Train Case:  61 | Input/Output: [(-72 -73 88 100) -73]
Train Case:  62 | Input/Output: [(94 -23 -32 67) -32]
Train Case:  63 | Input/Output: [(22 -49 -64 -24) -64]
Train Case:  64 | Input/Output: [(-5 -40 74 0) -40]
Train Case:  65 | Input/Output: [(-74 -11 -22 -48) -74]
Train Case:  66 | Input/Output: [(-69 -10 -81 -67) -81]
Train Case:  67 | Input/Output: [(-70 -67 43 97) -70]
Train Case:  68 | Input/Output: [(23 -69 -50 41) -69]
Train Case:  69 | Input/Output: [(-13 -16 -64 30) -64]
Train Case:  70 | Input/Output: [(73 57 52 48) 48]
Train Case:  71 | Input/Output: [(34 44 44 -72) -72]
Train Case:  72 | Input/Output: [(-51 83 63 -4) -51]
Train Case:  73 | Input/Output: [(16 93 -33 36) -33]
Train Case:  74 | Input/Output: [(-48 -69 24 31) -69]
Train Case:  75 | Input/Output: [(28 81 -46 -72) -72]
Train Case:  76 | Input/Output: [(-75 -92 -23 -30) -92]
Train Case:  77 | Input/Output: [(26 -39 -41 -11) -41]
Train Case:  78 | Input/Output: [(43 20 -14 57) -14]
Train Case:  79 | Input/Output: [(-83 53 -25 22) -83]
Train Case:  80 | Input/Output: [(61 -16 -51 21) -51]
Train Case:  81 | Input/Output: [(41 -37 -58 60) -58]
Train Case:  82 | Input/Output: [(-29 35 12 15) -29]
Train Case:  83 | Input/Output: [(41 -39 92 -23) -39]
Train Case:  84 | Input/Output: [(-29 -61 9 -88) -88]
Train Case:  85 | Input/Output: [(67 43 -96 69) -96]
Train Case:  86 | Input/Output: [(-40 -16 -23 -69) -69]
Train Case:  87 | Input/Output: [(49 96 30 74) 30]
Train Case:  88 | Input/Output: [(-9 -60 -54 -99) -99]
Train Case:  89 | Input/Output: [(60 59 62 -87) -87]
Train Case:  90 | Input/Output: [(-65 -79 94 74) -79]
Train Case:  91 | Input/Output: [(84 35 66 93) 35]
Train Case:  92 | Input/Output: [(58 79 26 74) 26]
Train Case:  93 | Input/Output: [(52 -39 33 26) -39]
Train Case:  94 | Input/Output: [(4 -38 -51 -37) -51]
Train Case:  95 | Input/Output: [(21 -84 -4 -71) -84]
Train Case:  96 | Input/Output: [(-74 -34 -88 -30) -88]
Train Case:  97 | Input/Output: [(-50 -15 31 -88) -88]
Train Case:  98 | Input/Output: [(41 60 29 -97) -97]
Train Case:  99 | Input/Output: [(-40 49 81 -12) -40]
Test Case:   0 | Input/Output: [[-71 -63 -63 -63] -71]
Test Case:   1 | Input/Output: [[-43 -21 -21 -21] -43]
Test Case:   2 | Input/Output: [[-99 80 80 80] -99]
Test Case:   3 | Input/Output: [[-3 -55 -55 -55] -55]
Test Case:   4 | Input/Output: [[-44 74 -44 -44] -44]
Test Case:   5 | Input/Output: [[-16 76 -16 -16] -16]
Test Case:   6 | Input/Output: [[-74 -74 -84 -74] -84]
Test Case:   7 | Input/Output: [[32 20 20 20] 20]
Test Case:   8 | Input/Output: [[-77 -77 20 -77] -77]
Test Case:   9 | Input/Output: [[25 30 30 30] 25]
Test Case:  10 | Input/Output: [[-48 -48 81 -48] -48]
Test Case:  11 | Input/Output: [[39 39 -8 39] -8]
Test Case:  12 | Input/Output: [[89 62 89 89] 62]
Test Case:  13 | Input/Output: [[-48 -45 -45 -45] -48]
Test Case:  14 | Input/Output: [[62 1 1 1] 1]
Test Case:  15 | Input/Output: [[92 92 92 -75] -75]
Test Case:  16 | Input/Output: [[16 -98 -98 -98] -98]
Test Case:  17 | Input/Output: [[-46 -46 -46 58] -46]
Test Case:  18 | Input/Output: [[-75 -75 -75 45] -75]
Test Case:  19 | Input/Output: [[-93 -93 -93 -98] -98]
Test Case:  20 | Input/Output: [[31 100 100 100] 31]
Test Case:  21 | Input/Output: [[-25 -99 -99 -99] -99]
Test Case:  22 | Input/Output: [[-42 78 78 78] -42]
Test Case:  23 | Input/Output: [[94 -39 94 94] -39]
Test Case:  24 | Input/Output: [[-71 -76 -76 -76] -76]
Test Case:  25 | Input/Output: [[-5 43 -5 -5] -5]
Test Case:  26 | Input/Output: [[93 22 93 93] 22]
Test Case:  27 | Input/Output: [[-8 -85 -85 -85] -85]
Test Case:  28 | Input/Output: [[-90 -90 -90 -14] -90]
Test Case:  29 | Input/Output: [[-17 -17 -33 -17] -33]
Test Case:  30 | Input/Output: [[-47 -28 -47 -47] -47]
Test Case:  31 | Input/Output: [[96 96 96 38] 38]
Test Case:  32 | Input/Output: [[-53 -53 -53 92] -53]
Test Case:  33 | Input/Output: [[47 47 47 -46] -46]
Test Case:  34 | Input/Output: [[71 71 -33 71] -33]
Test Case:  35 | Input/Output: [[-22 -69 -22 -22] -69]
Test Case:  36 | Input/Output: [[-82 4 -82 -82] -82]
Test Case:  37 | Input/Output: [[-67 -3 -67 -67] -67]
Test Case:  38 | Input/Output: [[-52 -38 -52 -52] -52]
Test Case:  39 | Input/Output: [[-58 58 -58 -58] -58]
Test Case:  40 | Input/Output: [[-38 -38 -38 -95] -95]
Test Case:  41 | Input/Output: [[-41 -41 -41 58] -41]
Test Case:  42 | Input/Output: [[63 -47 63 63] -47]
Test Case:  43 | Input/Output: [[-80 44 44 44] -80]
Test Case:  44 | Input/Output: [[-23 -59 -23 -23] -59]
Test Case:  45 | Input/Output: [[-9 -9 -73 -9] -73]
Test Case:  46 | Input/Output: [[3 3 3 27] 3]
Test Case:  47 | Input/Output: [[-40 -40 -40 78] -40]
Test Case:  48 | Input/Output: [[94 94 67 94] 67]
Test Case:  49 | Input/Output: [[72 72 72 -61] -61]
Test Case:  50 | Input/Output: [[68 -8 -8 -8] -8]
Test Case:  51 | Input/Output: [[-93 -93 52 -93] -93]
Test Case:  52 | Input/Output: [[37 -98 37 37] -98]
Test Case:  53 | Input/Output: [[7 -68 -68 -68] -68]
Test Case:  54 | Input/Output: [[55 55 45 55] 45]
Test Case:  55 | Input/Output: [[-43 -68 -43 -43] -68]
Test Case:  56 | Input/Output: [[59 3 3 3] 3]
Test Case:  57 | Input/Output: [[-84 -65 -65 -65] -84]
Test Case:  58 | Input/Output: [[63 -18 63 63] -18]
Test Case:  59 | Input/Output: [[-45 -45 -70 -45] -70]
Test Case:  60 | Input/Output: [[-97 -97 -19 -97] -97]
Test Case:  61 | Input/Output: [[-30 -30 -30 -16] -30]
Test Case:  62 | Input/Output: [[-61 -61 -61 -96] -96]
Test Case:  63 | Input/Output: [[-38 -38 -72 -38] -72]
Test Case:  64 | Input/Output: [[27 -65 -65 -65] -65]
Test Case:  65 | Input/Output: [[18 18 18 -12] -12]
Test Case:  66 | Input/Output: [[-28 82 82 82] -28]
Test Case:  67 | Input/Output: [[-71 63 63 63] -71]
Test Case:  68 | Input/Output: [[30 -95 -95 -95] -95]
Test Case:  69 | Input/Output: [[-19 -41 -19 -19] -41]
Test Case:  70 | Input/Output: [[-11 100 -11 -11] -11]
Test Case:  71 | Input/Output: [[-19 -71 -71 -71] -71]
Test Case:  72 | Input/Output: [[-41 -41 -41 34] -41]
Test Case:  73 | Input/Output: [[12 -37 -37 -37] -37]
Test Case:  74 | Input/Output: [[-28 25 -28 -28] -28]
Test Case:  75 | Input/Output: [[-40 -40 -40 -84] -84]
Test Case:  76 | Input/Output: [[-58 -47 -47 -47] -58]
Test Case:  77 | Input/Output: [[-96 -96 -75 -96] -96]
Test Case:  78 | Input/Output: [[-84 -84 -84 -81] -84]
Test Case:  79 | Input/Output: [[-100 -70 -70 -70] -100]
Test Case:  80 | Input/Output: [[92 77 92 92] 77]
Test Case:  81 | Input/Output: [[24 72 72 72] 24]
Test Case:  82 | Input/Output: [[15 15 -53 15] -53]
Test Case:  83 | Input/Output: [[34 34 34 63] 34]
Test Case:  84 | Input/Output: [[85 91 91 91] 85]
Test Case:  85 | Input/Output: [[-84 -51 -51 -51] -84]
Test Case:  86 | Input/Output: [[-57 -57 -57 -48] -57]
Test Case:  87 | Input/Output: [[34 34 34 61] 34]
Test Case:  88 | Input/Output: [[-67 48 48 48] -67]
Test Case:  89 | Input/Output: [[-78 53 53 53] -78]
Test Case:  90 | Input/Output: [[-27 -19 -27 -27] -27]
Test Case:  91 | Input/Output: [[69 -95 -95 -95] -95]
Test Case:  92 | Input/Output: [[6 37 6 6] 6]
Test Case:  93 | Input/Output: [[-52 -98 -98 -98] -98]
Test Case:  94 | Input/Output: [[-57 -57 -57 83] -57]
Test Case:  95 | Input/Output: [[18 20 18 18] 18]
Test Case:  96 | Input/Output: [[-89 -89 -89 74] -89]
Test Case:  97 | Input/Output: [[69 43 43 43] 43]
Test Case:  98 | Input/Output: [[41 69 69 69] 41]
Test Case:  99 | Input/Output: [[-15 -15 -15 -83] -83]
Test Case: 100 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 101 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 102 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 103 | Input/Output: [(53 53 53 53) 53]
Test Case: 104 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 105 | Input/Output: [(56 56 56 56) 56]
Test Case: 106 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 107 | Input/Output: [(62 62 62 62) 62]
Test Case: 108 | Input/Output: [(52 52 52 52) 52]
Test Case: 109 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 110 | Input/Output: [(48 48 48 48) 48]
Test Case: 111 | Input/Output: [(21 21 21 21) 21]
Test Case: 112 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 113 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 114 | Input/Output: [(77 77 77 77) 77]
Test Case: 115 | Input/Output: [(3 3 3 3) 3]
Test Case: 116 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 117 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 118 | Input/Output: [(1 1 1 1) 1]
Test Case: 119 | Input/Output: [(56 56 56 56) 56]
Test Case: 120 | Input/Output: [(81 81 81 81) 81]
Test Case: 121 | Input/Output: [(11 11 11 11) 11]
Test Case: 122 | Input/Output: [(28 28 28 28) 28]
Test Case: 123 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 124 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 125 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 126 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 127 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 128 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 129 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 130 | Input/Output: [(77 77 77 77) 77]
Test Case: 131 | Input/Output: [(1 1 1 1) 1]
Test Case: 132 | Input/Output: [(95 95 95 95) 95]
Test Case: 133 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 134 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 135 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 136 | Input/Output: [(13 13 13 13) 13]
Test Case: 137 | Input/Output: [(65 65 65 65) 65]
Test Case: 138 | Input/Output: [(49 49 49 49) 49]
Test Case: 139 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 140 | Input/Output: [(95 95 95 95) 95]
Test Case: 141 | Input/Output: [(69 69 69 69) 69]
Test Case: 142 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 143 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 144 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 145 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 146 | Input/Output: [(24 24 24 24) 24]
Test Case: 147 | Input/Output: [(34 34 34 34) 34]
Test Case: 148 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 149 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 150 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 151 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 152 | Input/Output: [(61 61 61 61) 61]
Test Case: 153 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 154 | Input/Output: [(87 87 87 87) 87]
Test Case: 155 | Input/Output: [(23 23 23 23) 23]
Test Case: 156 | Input/Output: [(39 39 39 39) 39]
Test Case: 157 | Input/Output: [(98 98 98 98) 98]
Test Case: 158 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 159 | Input/Output: [(13 13 13 13) 13]
Test Case: 160 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 161 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 162 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 163 | Input/Output: [(15 15 15 15) 15]
Test Case: 164 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 165 | Input/Output: [(64 64 64 64) 64]
Test Case: 166 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 167 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 168 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 169 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 170 | Input/Output: [(89 89 89 89) 89]
Test Case: 171 | Input/Output: [(44 44 44 44) 44]
Test Case: 172 | Input/Output: [(97 97 97 97) 97]
Test Case: 173 | Input/Output: [(9 9 9 9) 9]
Test Case: 174 | Input/Output: [(13 13 13 13) 13]
Test Case: 175 | Input/Output: [(53 53 53 53) 53]
Test Case: 176 | Input/Output: [(48 48 48 48) 48]
Test Case: 177 | Input/Output: [(3 3 3 3) 3]
Test Case: 178 | Input/Output: [(65 65 65 65) 65]
Test Case: 179 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 180 | Input/Output: [(22 22 22 22) 22]
Test Case: 181 | Input/Output: [(38 38 38 38) 38]
Test Case: 182 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 183 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 184 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 185 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 186 | Input/Output: [(71 71 71 71) 71]
Test Case: 187 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 188 | Input/Output: [(36 36 36 36) 36]
Test Case: 189 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 190 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 191 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 192 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 193 | Input/Output: [(84 84 84 84) 84]
Test Case: 194 | Input/Output: [(75 75 75 75) 75]
Test Case: 195 | Input/Output: [(78 78 78 78) 78]
Test Case: 196 | Input/Output: [(63 63 63 63) 63]
Test Case: 197 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 198 | Input/Output: [(26 26 26 26) 26]
Test Case: 199 | Input/Output: [(86 86 86 86) 86]
Test Case: 200 | Input/Output: [(12 80 85 60) 12]
Test Case: 201 | Input/Output: [(16 80 64 29) 16]
Test Case: 202 | Input/Output: [(15 33 99 18) 15]
Test Case: 203 | Input/Output: [(49 76 11 49) 11]
Test Case: 204 | Input/Output: [(74 64 26 43) 26]
Test Case: 205 | Input/Output: [(14 46 3 31) 3]
Test Case: 206 | Input/Output: [(79 33 60 76) 33]
Test Case: 207 | Input/Output: [(76 36 3 33) 3]
Test Case: 208 | Input/Output: [(6 40 35 67) 6]
Test Case: 209 | Input/Output: [(36 23 15 95) 15]
Test Case: 210 | Input/Output: [(48 29 38 2) 2]
Test Case: 211 | Input/Output: [(32 83 27 40) 27]
Test Case: 212 | Input/Output: [(55 12 29 39) 12]
Test Case: 213 | Input/Output: [(4 68 34 38) 4]
Test Case: 214 | Input/Output: [(98 75 93 14) 14]
Test Case: 215 | Input/Output: [(65 59 92 95) 59]
Test Case: 216 | Input/Output: [(12 20 2 80) 2]
Test Case: 217 | Input/Output: [(35 79 32 25) 25]
Test Case: 218 | Input/Output: [(38 16 46 9) 9]
Test Case: 219 | Input/Output: [(9 32 14 31) 9]
Test Case: 220 | Input/Output: [(65 60 91 59) 59]
Test Case: 221 | Input/Output: [(29 42 17 0) 0]
Test Case: 222 | Input/Output: [(81 79 68 91) 68]
Test Case: 223 | Input/Output: [(63 70 11 90) 11]
Test Case: 224 | Input/Output: [(1 1 85 3) 1]
Test Case: 225 | Input/Output: [(89 63 81 72) 63]
Test Case: 226 | Input/Output: [(53 82 42 53) 42]
Test Case: 227 | Input/Output: [(5 47 86 26) 5]
Test Case: 228 | Input/Output: [(37 77 76 12) 12]
Test Case: 229 | Input/Output: [(67 41 22 95) 22]
Test Case: 230 | Input/Output: [(53 60 97 16) 16]
Test Case: 231 | Input/Output: [(25 57 36 9) 9]
Test Case: 232 | Input/Output: [(8 94 73 31) 8]
Test Case: 233 | Input/Output: [(72 12 87 75) 12]
Test Case: 234 | Input/Output: [(56 20 13 45) 13]
Test Case: 235 | Input/Output: [(59 88 33 7) 7]
Test Case: 236 | Input/Output: [(90 21 92 29) 21]
Test Case: 237 | Input/Output: [(4 85 72 51) 4]
Test Case: 238 | Input/Output: [(90 10 50 68) 10]
Test Case: 239 | Input/Output: [(1 41 62 3) 1]
Test Case: 240 | Input/Output: [(67 52 87 18) 18]
Test Case: 241 | Input/Output: [(45 17 95 53) 17]
Test Case: 242 | Input/Output: [(17 57 94 98) 17]
Test Case: 243 | Input/Output: [(60 93 3 72) 3]
Test Case: 244 | Input/Output: [(68 1 20 48) 1]
Test Case: 245 | Input/Output: [(30 74 40 87) 30]
Test Case: 246 | Input/Output: [(78 82 74 77) 74]
Test Case: 247 | Input/Output: [(30 20 57 29) 20]
Test Case: 248 | Input/Output: [(94 100 8 47) 8]
Test Case: 249 | Input/Output: [(85 73 7 96) 7]
Test Case: 250 | Input/Output: [(83 77 19 66) 19]
Test Case: 251 | Input/Output: [(62 36 41 47) 36]
Test Case: 252 | Input/Output: [(85 91 92 63) 63]
Test Case: 253 | Input/Output: [(52 89 36 59) 36]
Test Case: 254 | Input/Output: [(62 34 85 96) 34]
Test Case: 255 | Input/Output: [(70 3 17 49) 3]
Test Case: 256 | Input/Output: [(27 6 18 95) 6]
Test Case: 257 | Input/Output: [(80 47 6 46) 6]
Test Case: 258 | Input/Output: [(16 51 82 30) 16]
Test Case: 259 | Input/Output: [(24 100 21 61) 21]
Test Case: 260 | Input/Output: [(88 66 20 51) 20]
Test Case: 261 | Input/Output: [(54 19 1 47) 1]
Test Case: 262 | Input/Output: [(27 4 95 35) 4]
Test Case: 263 | Input/Output: [(88 80 39 75) 39]
Test Case: 264 | Input/Output: [(64 46 4 19) 4]
Test Case: 265 | Input/Output: [(95 37 17 83) 17]
Test Case: 266 | Input/Output: [(27 6 63 72) 6]
Test Case: 267 | Input/Output: [(59 57 48 79) 48]
Test Case: 268 | Input/Output: [(50 79 25 10) 10]
Test Case: 269 | Input/Output: [(96 83 63 62) 62]
Test Case: 270 | Input/Output: [(0 59 61 40) 0]
Test Case: 271 | Input/Output: [(52 86 49 24) 24]
Test Case: 272 | Input/Output: [(9 81 72 7) 7]
Test Case: 273 | Input/Output: [(57 84 47 60) 47]
Test Case: 274 | Input/Output: [(14 99 43 84) 14]
Test Case: 275 | Input/Output: [(93 54 5 60) 5]
Test Case: 276 | Input/Output: [(76 94 23 36) 23]
Test Case: 277 | Input/Output: [(48 29 46 73) 29]
Test Case: 278 | Input/Output: [(3 66 48 85) 3]
Test Case: 279 | Input/Output: [(3 71 56 6) 3]
Test Case: 280 | Input/Output: [(81 82 25 34) 25]
Test Case: 281 | Input/Output: [(86 51 72 26) 26]
Test Case: 282 | Input/Output: [(5 68 41 33) 5]
Test Case: 283 | Input/Output: [(58 88 82 91) 58]
Test Case: 284 | Input/Output: [(31 50 50 81) 31]
Test Case: 285 | Input/Output: [(20 29 98 73) 20]
Test Case: 286 | Input/Output: [(19 94 62 71) 19]
Test Case: 287 | Input/Output: [(32 79 79 11) 11]
Test Case: 288 | Input/Output: [(87 31 37 13) 13]
Test Case: 289 | Input/Output: [(86 50 14 13) 13]
Test Case: 290 | Input/Output: [(71 72 29 46) 29]
Test Case: 291 | Input/Output: [(46 64 15 4) 4]
Test Case: 292 | Input/Output: [(92 23 41 68) 23]
Test Case: 293 | Input/Output: [(33 29 22 71) 22]
Test Case: 294 | Input/Output: [(64 57 2 87) 2]
Test Case: 295 | Input/Output: [(75 81 97 96) 75]
Test Case: 296 | Input/Output: [(1 80 69 79) 1]
Test Case: 297 | Input/Output: [(74 55 58 72) 55]
Test Case: 298 | Input/Output: [(32 48 32 49) 32]
Test Case: 299 | Input/Output: [(70 63 83 42) 42]
Test Case: 300 | Input/Output: [(60 23 5 34) 5]
Test Case: 301 | Input/Output: [(75 16 75 98) 16]
Test Case: 302 | Input/Output: [(82 46 97 11) 11]
Test Case: 303 | Input/Output: [(29 48 88 87) 29]
Test Case: 304 | Input/Output: [(91 24 32 43) 24]
Test Case: 305 | Input/Output: [(20 4 22 97) 4]
Test Case: 306 | Input/Output: [(45 1 69 94) 1]
Test Case: 307 | Input/Output: [(33 98 32 76) 32]
Test Case: 308 | Input/Output: [(75 12 61 6) 6]
Test Case: 309 | Input/Output: [(84 24 35 50) 24]
Test Case: 310 | Input/Output: [(48 75 24 22) 22]
Test Case: 311 | Input/Output: [(35 32 10 40) 10]
Test Case: 312 | Input/Output: [(100 69 94 28) 28]
Test Case: 313 | Input/Output: [(35 28 3 49) 3]
Test Case: 314 | Input/Output: [(14 55 25 40) 14]
Test Case: 315 | Input/Output: [(8 71 49 49) 8]
Test Case: 316 | Input/Output: [(73 1 8 59) 1]
Test Case: 317 | Input/Output: [(0 32 4 90) 0]
Test Case: 318 | Input/Output: [(97 1 36 39) 1]
Test Case: 319 | Input/Output: [(29 62 56 19) 19]
Test Case: 320 | Input/Output: [(30 24 98 90) 24]
Test Case: 321 | Input/Output: [(61 39 16 32) 16]
Test Case: 322 | Input/Output: [(63 12 6 72) 6]
Test Case: 323 | Input/Output: [(30 93 31 47) 30]
Test Case: 324 | Input/Output: [(99 38 98 25) 25]
Test Case: 325 | Input/Output: [(61 2 80 100) 2]
Test Case: 326 | Input/Output: [(1 40 89 80) 1]
Test Case: 327 | Input/Output: [(8 92 72 68) 8]
Test Case: 328 | Input/Output: [(28 21 95 51) 21]
Test Case: 329 | Input/Output: [(12 14 73 28) 12]
Test Case: 330 | Input/Output: [(90 4 4 35) 4]
Test Case: 331 | Input/Output: [(90 80 16 25) 16]
Test Case: 332 | Input/Output: [(62 97 33 90) 33]
Test Case: 333 | Input/Output: [(22 33 21 1) 1]
Test Case: 334 | Input/Output: [(27 68 57 3) 3]
Test Case: 335 | Input/Output: [(28 85 48 10) 10]
Test Case: 336 | Input/Output: [(52 40 98 100) 40]
Test Case: 337 | Input/Output: [(72 86 59 4) 4]
Test Case: 338 | Input/Output: [(47 54 86 96) 47]
Test Case: 339 | Input/Output: [(62 97 8 36) 8]
Test Case: 340 | Input/Output: [(11 83 38 53) 11]
Test Case: 341 | Input/Output: [(94 22 4 93) 4]
Test Case: 342 | Input/Output: [(23 13 83 24) 13]
Test Case: 343 | Input/Output: [(58 58 89 44) 44]
Test Case: 344 | Input/Output: [(59 71 98 86) 59]
Test Case: 345 | Input/Output: [(43 63 29 37) 29]
Test Case: 346 | Input/Output: [(16 28 23 64) 16]
Test Case: 347 | Input/Output: [(52 18 30 60) 18]
Test Case: 348 | Input/Output: [(2 9 10 35) 2]
Test Case: 349 | Input/Output: [(25 74 88 26) 25]
Test Case: 350 | Input/Output: [(51 68 89 25) 25]
Test Case: 351 | Input/Output: [(58 16 84 53) 16]
Test Case: 352 | Input/Output: [(66 84 83 19) 19]
Test Case: 353 | Input/Output: [(5 78 82 99) 5]
Test Case: 354 | Input/Output: [(84 94 10 66) 10]
Test Case: 355 | Input/Output: [(99 42 29 95) 29]
Test Case: 356 | Input/Output: [(26 29 23 89) 23]
Test Case: 357 | Input/Output: [(9 54 19 56) 9]
Test Case: 358 | Input/Output: [(98 59 53 18) 18]
Test Case: 359 | Input/Output: [(87 97 0 81) 0]
Test Case: 360 | Input/Output: [(0 55 100 78) 0]
Test Case: 361 | Input/Output: [(8 16 90 15) 8]
Test Case: 362 | Input/Output: [(45 88 97 13) 13]
Test Case: 363 | Input/Output: [(71 70 99 44) 44]
Test Case: 364 | Input/Output: [(41 56 34 15) 15]
Test Case: 365 | Input/Output: [(39 50 39 97) 39]
Test Case: 366 | Input/Output: [(5 39 8 87) 5]
Test Case: 367 | Input/Output: [(60 29 32 36) 29]
Test Case: 368 | Input/Output: [(75 27 18 32) 18]
Test Case: 369 | Input/Output: [(95 6 69 44) 6]
Test Case: 370 | Input/Output: [(95 82 99 32) 32]
Test Case: 371 | Input/Output: [(83 64 39 14) 14]
Test Case: 372 | Input/Output: [(11 70 79 65) 11]
Test Case: 373 | Input/Output: [(84 10 42 81) 10]
Test Case: 374 | Input/Output: [(5 51 88 24) 5]
Test Case: 375 | Input/Output: [(40 27 22 65) 22]
Test Case: 376 | Input/Output: [(50 93 57 63) 50]
Test Case: 377 | Input/Output: [(36 94 24 4) 4]
Test Case: 378 | Input/Output: [(52 21 70 90) 21]
Test Case: 379 | Input/Output: [(27 68 39 69) 27]
Test Case: 380 | Input/Output: [(54 17 9 55) 9]
Test Case: 381 | Input/Output: [(62 75 68 95) 62]
Test Case: 382 | Input/Output: [(9 20 58 67) 9]
Test Case: 383 | Input/Output: [(58 50 40 64) 40]
Test Case: 384 | Input/Output: [(4 40 40 66) 4]
Test Case: 385 | Input/Output: [(31 22 50 53) 22]
Test Case: 386 | Input/Output: [(74 15 11 27) 11]
Test Case: 387 | Input/Output: [(73 44 50 82) 44]
Test Case: 388 | Input/Output: [(32 86 4 44) 4]
Test Case: 389 | Input/Output: [(20 77 52 10) 10]
Test Case: 390 | Input/Output: [(99 26 43 99) 26]
Test Case: 391 | Input/Output: [(1 94 75 51) 1]
Test Case: 392 | Input/Output: [(45 72 40 87) 40]
Test Case: 393 | Input/Output: [(67 7 33 55) 7]
Test Case: 394 | Input/Output: [(77 69 77 31) 31]
Test Case: 395 | Input/Output: [(23 74 77 80) 23]
Test Case: 396 | Input/Output: [(88 92 67 28) 28]
Test Case: 397 | Input/Output: [(100 27 84 70) 27]
Test Case: 398 | Input/Output: [(84 48 36 42) 36]
Test Case: 399 | Input/Output: [(0 25 57 91) 0]
Test Case: 400 | Input/Output: [(60 9 -53 -48) -53]
Test Case: 401 | Input/Output: [(-57 58 17 -32) -57]
Test Case: 402 | Input/Output: [(65 -65 -85 -24) -85]
Test Case: 403 | Input/Output: [(31 43 -40 13) -40]
Test Case: 404 | Input/Output: [(16 -92 -46 -46) -92]
Test Case: 405 | Input/Output: [(-28 -63 -63 -3) -63]
Test Case: 406 | Input/Output: [(42 -81 -31 -98) -98]
Test Case: 407 | Input/Output: [(4 86 -100 -34) -100]
Test Case: 408 | Input/Output: [(-44 -82 78 -43) -82]
Test Case: 409 | Input/Output: [(-45 68 52 -59) -59]
Test Case: 410 | Input/Output: [(-46 36 -96 -82) -96]
Test Case: 411 | Input/Output: [(-4 -32 -71 39) -71]
Test Case: 412 | Input/Output: [(-74 -38 -63 66) -74]
Test Case: 413 | Input/Output: [(-97 -100 100 29) -100]
Test Case: 414 | Input/Output: [(8 81 -24 -55) -55]
Test Case: 415 | Input/Output: [(-72 16 68 -3) -72]
Test Case: 416 | Input/Output: [(-57 26 -93 -17) -93]
Test Case: 417 | Input/Output: [(-93 -89 24 26) -93]
Test Case: 418 | Input/Output: [(-16 73 -83 84) -83]
Test Case: 419 | Input/Output: [(96 -83 11 -32) -83]
Test Case: 420 | Input/Output: [(53 95 29 -10) -10]
Test Case: 421 | Input/Output: [(-15 -6 -80 91) -80]
Test Case: 422 | Input/Output: [(-85 -36 57 43) -85]
Test Case: 423 | Input/Output: [(74 -69 91 -10) -69]
Test Case: 424 | Input/Output: [(-48 -64 -73 -14) -73]
Test Case: 425 | Input/Output: [(-30 -79 -69 -37) -79]
Test Case: 426 | Input/Output: [(94 33 95 -95) -95]
Test Case: 427 | Input/Output: [(3 -58 81 54) -58]
Test Case: 428 | Input/Output: [(22 9 44 -76) -76]
Test Case: 429 | Input/Output: [(40 75 -42 95) -42]
Test Case: 430 | Input/Output: [(3 -96 -62 -67) -96]
Test Case: 431 | Input/Output: [(-50 -2 -74 33) -74]
Test Case: 432 | Input/Output: [(46 54 64 66) 46]
Test Case: 433 | Input/Output: [(90 -51 -70 -32) -70]
Test Case: 434 | Input/Output: [(25 -100 15 -96) -100]
Test Case: 435 | Input/Output: [(-33 13 -93 13) -93]
Test Case: 436 | Input/Output: [(-38 11 63 -77) -77]
Test Case: 437 | Input/Output: [(87 12 61 84) 12]
Test Case: 438 | Input/Output: [(31 12 -59 -4) -59]
Test Case: 439 | Input/Output: [(90 -8 -54 40) -54]
Test Case: 440 | Input/Output: [(50 -21 44 -94) -94]
Test Case: 441 | Input/Output: [(23 33 -11 -46) -46]
Test Case: 442 | Input/Output: [(50 23 100 -62) -62]
Test Case: 443 | Input/Output: [(23 67 50 -67) -67]
Test Case: 444 | Input/Output: [(97 93 -82 -5) -82]
Test Case: 445 | Input/Output: [(10 -33 76 40) -33]
Test Case: 446 | Input/Output: [(-73 -86 -15 60) -86]
Test Case: 447 | Input/Output: [(-52 92 -50 -83) -83]
Test Case: 448 | Input/Output: [(37 -57 -4 64) -57]
Test Case: 449 | Input/Output: [(-33 -85 75 75) -85]
Test Case: 450 | Input/Output: [(-47 -78 0 50) -78]
Test Case: 451 | Input/Output: [(-9 -36 -85 12) -85]
Test Case: 452 | Input/Output: [(52 38 94 -34) -34]
Test Case: 453 | Input/Output: [(-81 6 46 91) -81]
Test Case: 454 | Input/Output: [(-94 -22 -7 67) -94]
Test Case: 455 | Input/Output: [(88 -53 99 -79) -79]
Test Case: 456 | Input/Output: [(-50 -3 -66 -47) -66]
Test Case: 457 | Input/Output: [(69 -12 98 89) -12]
Test Case: 458 | Input/Output: [(-80 -55 -2 -27) -80]
Test Case: 459 | Input/Output: [(-21 -37 -49 -27) -49]
Test Case: 460 | Input/Output: [(-60 58 -70 39) -70]
Test Case: 461 | Input/Output: [(90 25 70 22) 22]
Test Case: 462 | Input/Output: [(3 93 -79 48) -79]
Test Case: 463 | Input/Output: [(-14 -6 -16 85) -16]
Test Case: 464 | Input/Output: [(47 28 24 39) 24]
Test Case: 465 | Input/Output: [(-73 -43 80 -86) -86]
Test Case: 466 | Input/Output: [(-47 62 49 -21) -47]
Test Case: 467 | Input/Output: [(-77 -81 54 69) -81]
Test Case: 468 | Input/Output: [(-99 66 49 -65) -99]
Test Case: 469 | Input/Output: [(42 -74 26 -64) -74]
Test Case: 470 | Input/Output: [(58 43 -29 32) -29]
Test Case: 471 | Input/Output: [(-83 22 -57 -91) -91]
Test Case: 472 | Input/Output: [(-49 83 21 -5) -49]
Test Case: 473 | Input/Output: [(-86 -82 -58 73) -86]
Test Case: 474 | Input/Output: [(70 75 66 7) 7]
Test Case: 475 | Input/Output: [(96 -28 50 -19) -28]
Test Case: 476 | Input/Output: [(55 97 -38 -20) -38]
Test Case: 477 | Input/Output: [(67 93 58 7) 7]
Test Case: 478 | Input/Output: [(-1 60 -2 -56) -56]
Test Case: 479 | Input/Output: [(88 99 78 18) 18]
Test Case: 480 | Input/Output: [(1 83 61 -94) -94]
Test Case: 481 | Input/Output: [(83 12 -89 40) -89]
Test Case: 482 | Input/Output: [(16 49 -86 8) -86]
Test Case: 483 | Input/Output: [(-68 43 46 -32) -68]
Test Case: 484 | Input/Output: [(82 64 83 -73) -73]
Test Case: 485 | Input/Output: [(-86 -35 48 -61) -86]
Test Case: 486 | Input/Output: [(-69 25 -60 -2) -69]
Test Case: 487 | Input/Output: [(81 -26 15 -51) -51]
Test Case: 488 | Input/Output: [(98 44 -65 8) -65]
Test Case: 489 | Input/Output: [(-56 -74 -27 -23) -74]
Test Case: 490 | Input/Output: [(68 -95 -71 17) -95]
Test Case: 491 | Input/Output: [(36 -31 -88 36) -88]
Test Case: 492 | Input/Output: [(73 46 91 -79) -79]
Test Case: 493 | Input/Output: [(84 99 96 87) 84]
Test Case: 494 | Input/Output: [(87 15 -27 78) -27]
Test Case: 495 | Input/Output: [(-58 37 39 -75) -75]
Test Case: 496 | Input/Output: [(-80 67 -68 49) -80]
Test Case: 497 | Input/Output: [(-33 11 56 91) -33]
Test Case: 498 | Input/Output: [(-30 -79 -7 87) -79]
Test Case: 499 | Input/Output: [(82 29 75 -3) -3]
Test Case: 500 | Input/Output: [(58 63 -87 7) -87]
Test Case: 501 | Input/Output: [(-34 -19 97 71) -34]
Test Case: 502 | Input/Output: [(-98 -59 -75 -98) -98]
Test Case: 503 | Input/Output: [(-42 -37 18 1) -42]
Test Case: 504 | Input/Output: [(80 31 24 82) 24]
Test Case: 505 | Input/Output: [(-29 92 72 9) -29]
Test Case: 506 | Input/Output: [(63 79 -28 9) -28]
Test Case: 507 | Input/Output: [(-93 -50 -72 35) -93]
Test Case: 508 | Input/Output: [(74 -75 -89 55) -89]
Test Case: 509 | Input/Output: [(-81 -68 -35 -5) -81]
Test Case: 510 | Input/Output: [(-8 -58 11 -92) -92]
Test Case: 511 | Input/Output: [(61 -92 -86 55) -92]
Test Case: 512 | Input/Output: [(29 -18 3 54) -18]
Test Case: 513 | Input/Output: [(-74 -23 -87 -34) -87]
Test Case: 514 | Input/Output: [(-73 53 0 20) -73]
Test Case: 515 | Input/Output: [(26 -90 -41 -87) -90]
Test Case: 516 | Input/Output: [(7 -49 73 17) -49]
Test Case: 517 | Input/Output: [(43 88 -3 -60) -60]
Test Case: 518 | Input/Output: [(-40 45 36 41) -40]
Test Case: 519 | Input/Output: [(68 -70 -36 80) -70]
Test Case: 520 | Input/Output: [(48 69 50 -5) -5]
Test Case: 521 | Input/Output: [(46 47 -73 57) -73]
Test Case: 522 | Input/Output: [(-53 25 38 -17) -53]
Test Case: 523 | Input/Output: [(88 8 -2 0) -2]
Test Case: 524 | Input/Output: [(-40 92 -70 84) -70]
Test Case: 525 | Input/Output: [(3 -4 93 78) -4]
Test Case: 526 | Input/Output: [(77 -84 -59 -28) -84]
Test Case: 527 | Input/Output: [(-59 -12 -65 32) -65]
Test Case: 528 | Input/Output: [(-19 48 -99 -54) -99]
Test Case: 529 | Input/Output: [(-25 50 -29 -95) -95]
Test Case: 530 | Input/Output: [(-53 -40 -55 7) -55]
Test Case: 531 | Input/Output: [(-31 81 63 -38) -38]
Test Case: 532 | Input/Output: [(13 -17 54 47) -17]
Test Case: 533 | Input/Output: [(-98 39 -8 -89) -98]
Test Case: 534 | Input/Output: [(-79 -8 -61 -1) -79]
Test Case: 535 | Input/Output: [(5 61 -52 7) -52]
Test Case: 536 | Input/Output: [(92 8 -71 -4) -71]
Test Case: 537 | Input/Output: [(57 -17 -54 45) -54]
Test Case: 538 | Input/Output: [(53 -73 67 90) -73]
Test Case: 539 | Input/Output: [(95 65 -86 21) -86]
Test Case: 540 | Input/Output: [(12 88 -19 -33) -33]
Test Case: 541 | Input/Output: [(-21 -11 -62 -33) -62]
Test Case: 542 | Input/Output: [(-78 38 47 97) -78]
Test Case: 543 | Input/Output: [(-35 23 44 -7) -35]
Test Case: 544 | Input/Output: [(15 82 -35 -60) -60]
Test Case: 545 | Input/Output: [(100 86 61 -73) -73]
Test Case: 546 | Input/Output: [(63 -17 60 -11) -17]
Test Case: 547 | Input/Output: [(33 -5 27 7) -5]
Test Case: 548 | Input/Output: [(91 9 -1 35) -1]
Test Case: 549 | Input/Output: [(-60 46 -47 -98) -98]
Test Case: 550 | Input/Output: [(76 -43 73 -45) -45]
Test Case: 551 | Input/Output: [(-56 -51 -92 -68) -92]
Test Case: 552 | Input/Output: [(-85 40 -79 66) -85]
Test Case: 553 | Input/Output: [(17 42 -53 -82) -82]
Test Case: 554 | Input/Output: [(-79 -44 56 99) -79]
Test Case: 555 | Input/Output: [(-44 -7 -73 8) -73]
Test Case: 556 | Input/Output: [(-88 -47 55 -66) -88]
Test Case: 557 | Input/Output: [(65 -38 77 77) -38]
Test Case: 558 | Input/Output: [(-42 10 69 91) -42]
Test Case: 559 | Input/Output: [(-46 38 83 -35) -46]
Test Case: 560 | Input/Output: [(45 56 -64 41) -64]
Test Case: 561 | Input/Output: [(-80 -29 -74 -44) -80]
Test Case: 562 | Input/Output: [(48 30 -97 -77) -97]
Test Case: 563 | Input/Output: [(20 58 21 1) 1]
Test Case: 564 | Input/Output: [(50 -88 71 -47) -88]
Test Case: 565 | Input/Output: [(69 -70 66 90) -70]
Test Case: 566 | Input/Output: [(6 71 87 61) 6]
Test Case: 567 | Input/Output: [(83 -91 -95 60) -95]
Test Case: 568 | Input/Output: [(-57 37 -20 47) -57]
Test Case: 569 | Input/Output: [(5 -74 51 28) -74]
Test Case: 570 | Input/Output: [(-82 -59 -86 -36) -86]
Test Case: 571 | Input/Output: [(5 -81 73 -98) -98]
Test Case: 572 | Input/Output: [(-55 11 65 10) -55]
Test Case: 573 | Input/Output: [(-30 69 -86 -42) -86]
Test Case: 574 | Input/Output: [(52 51 -80 63) -80]
Test Case: 575 | Input/Output: [(-34 -18 4 34) -34]
Test Case: 576 | Input/Output: [(-48 -25 -82 -76) -82]
Test Case: 577 | Input/Output: [(76 56 99 85) 56]
Test Case: 578 | Input/Output: [(82 -46 68 -100) -100]
Test Case: 579 | Input/Output: [(-95 -35 18 79) -95]
Test Case: 580 | Input/Output: [(44 9 -62 54) -62]
Test Case: 581 | Input/Output: [(-46 88 56 1) -46]
Test Case: 582 | Input/Output: [(-79 -5 -42 -6) -79]
Test Case: 583 | Input/Output: [(50 28 -18 -48) -48]
Test Case: 584 | Input/Output: [(-44 -68 23 -72) -72]
Test Case: 585 | Input/Output: [(-99 50 -8 82) -99]
Test Case: 586 | Input/Output: [(93 88 -69 73) -69]
Test Case: 587 | Input/Output: [(75 85 -74 21) -74]
Test Case: 588 | Input/Output: [(-52 -77 -92 -49) -92]
Test Case: 589 | Input/Output: [(-42 -89 17 29) -89]
Test Case: 590 | Input/Output: [(-5 -95 -11 -66) -95]
Test Case: 591 | Input/Output: [(34 -9 98 -99) -99]
Test Case: 592 | Input/Output: [(-15 -63 1 -20) -63]
Test Case: 593 | Input/Output: [(62 -88 -27 17) -88]
Test Case: 594 | Input/Output: [(91 64 -43 -78) -78]
Test Case: 595 | Input/Output: [(57 -92 76 -38) -92]
Test Case: 596 | Input/Output: [(-100 -93 95 -62) -100]
Test Case: 597 | Input/Output: [(-71 -76 90 -81) -81]
Test Case: 598 | Input/Output: [(-23 -39 -99 -51) -99]
Test Case: 599 | Input/Output: [(53 -91 -18 -32) -91]
Test Case: 600 | Input/Output: [(24 25 -25 26) -25]
Test Case: 601 | Input/Output: [(26 -61 58 84) -61]
Test Case: 602 | Input/Output: [(-70 -14 23 -69) -70]
Test Case: 603 | Input/Output: [(-33 -11 47 7) -33]
Test Case: 604 | Input/Output: [(4 -86 94 -42) -86]
Test Case: 605 | Input/Output: [(-28 -75 -89 -39) -89]
Test Case: 606 | Input/Output: [(-65 -54 80 -52) -65]
Test Case: 607 | Input/Output: [(-78 94 80 -86) -86]
Test Case: 608 | Input/Output: [(89 -6 94 77) -6]
Test Case: 609 | Input/Output: [(-82 74 1 -38) -82]
Test Case: 610 | Input/Output: [(-88 19 -46 -2) -88]
Test Case: 611 | Input/Output: [(23 -38 10 -92) -92]
Test Case: 612 | Input/Output: [(86 69 -62 49) -62]
Test Case: 613 | Input/Output: [(71 -7 -40 -76) -76]
Test Case: 614 | Input/Output: [(29 26 -51 79) -51]
Test Case: 615 | Input/Output: [(-45 -6 -22 -91) -91]
Test Case: 616 | Input/Output: [(80 65 13 -71) -71]
Test Case: 617 | Input/Output: [(26 77 92 70) 26]
Test Case: 618 | Input/Output: [(28 46 -40 96) -40]
Test Case: 619 | Input/Output: [(-12 94 -44 77) -44]
Test Case: 620 | Input/Output: [(-35 87 -50 22) -50]
Test Case: 621 | Input/Output: [(57 -66 -39 95) -66]
Test Case: 622 | Input/Output: [(6 -80 -72 99) -80]
Test Case: 623 | Input/Output: [(14 -72 -17 -46) -72]
Test Case: 624 | Input/Output: [(94 -45 -89 -60) -89]
Test Case: 625 | Input/Output: [(35 -56 6 -58) -58]
Test Case: 626 | Input/Output: [(56 43 -85 -4) -85]
Test Case: 627 | Input/Output: [(86 21 -61 -10) -61]
Test Case: 628 | Input/Output: [(-16 75 56 16) -16]
Test Case: 629 | Input/Output: [(-77 64 78 47) -77]
Test Case: 630 | Input/Output: [(29 46 1 61) 1]
Test Case: 631 | Input/Output: [(96 -48 -3 -47) -48]
Test Case: 632 | Input/Output: [(71 -27 29 -22) -27]
Test Case: 633 | Input/Output: [(21 -7 7 -58) -58]
Test Case: 634 | Input/Output: [(-94 -68 -87 48) -94]
Test Case: 635 | Input/Output: [(-97 24 -92 2) -97]
Test Case: 636 | Input/Output: [(13 -87 40 -93) -93]
Test Case: 637 | Input/Output: [(95 53 -38 56) -38]
Test Case: 638 | Input/Output: [(72 30 100 11) 11]
Test Case: 639 | Input/Output: [(30 8 51 93) 8]
Test Case: 640 | Input/Output: [(-40 -79 91 3) -79]
Test Case: 641 | Input/Output: [(89 -86 -15 -88) -88]
Test Case: 642 | Input/Output: [(-93 -23 -64 19) -93]
Test Case: 643 | Input/Output: [(90 -4 51 38) -4]
Test Case: 644 | Input/Output: [(-5 45 67 -66) -66]
Test Case: 645 | Input/Output: [(-16 -15 84 -50) -50]
Test Case: 646 | Input/Output: [(10 -80 -92 -30) -92]
Test Case: 647 | Input/Output: [(-8 37 -69 19) -69]
Test Case: 648 | Input/Output: [(72 -90 -77 -17) -90]
Test Case: 649 | Input/Output: [(-35 80 -58 9) -58]
Test Case: 650 | Input/Output: [(-46 -31 -85 28) -85]
Test Case: 651 | Input/Output: [(30 -100 -32 16) -100]
Test Case: 652 | Input/Output: [(-77 -74 38 72) -77]
Test Case: 653 | Input/Output: [(-71 36 -21 6) -71]
Test Case: 654 | Input/Output: [(34 -3 -97 -81) -97]
Test Case: 655 | Input/Output: [(3 22 79 -100) -100]
Test Case: 656 | Input/Output: [(56 -26 62 27) -26]
Test Case: 657 | Input/Output: [(59 65 8 -76) -76]
Test Case: 658 | Input/Output: [(88 20 35 78) 20]
Test Case: 659 | Input/Output: [(-97 80 47 88) -97]
Test Case: 660 | Input/Output: [(-38 -54 89 30) -54]
Test Case: 661 | Input/Output: [(-43 89 -66 -7) -66]
Test Case: 662 | Input/Output: [(7 -33 65 70) -33]
Test Case: 663 | Input/Output: [(-76 -15 -100 63) -100]
Test Case: 664 | Input/Output: [(40 52 88 59) 40]
Test Case: 665 | Input/Output: [(-76 21 31 95) -76]
Test Case: 666 | Input/Output: [(-88 -98 -36 82) -98]
Test Case: 667 | Input/Output: [(-16 69 25 -36) -36]
Test Case: 668 | Input/Output: [(-6 25 -9 45) -9]
Test Case: 669 | Input/Output: [(37 -26 -33 30) -33]
Test Case: 670 | Input/Output: [(-42 95 62 22) -42]
Test Case: 671 | Input/Output: [(-76 42 -43 23) -76]
Test Case: 672 | Input/Output: [(-61 50 72 -62) -62]
Test Case: 673 | Input/Output: [(-32 66 53 -71) -71]
Test Case: 674 | Input/Output: [(31 76 14 30) 14]
Test Case: 675 | Input/Output: [(7 -61 -28 -22) -61]
Test Case: 676 | Input/Output: [(53 25 97 33) 25]
Test Case: 677 | Input/Output: [(12 85 16 -33) -33]
Test Case: 678 | Input/Output: [(77 21 -88 78) -88]
Test Case: 679 | Input/Output: [(-3 -4 -47 -32) -47]
Test Case: 680 | Input/Output: [(46 44 -50 46) -50]
Test Case: 681 | Input/Output: [(-92 -75 -10 -17) -92]
Test Case: 682 | Input/Output: [(86 -45 40 -58) -58]
Test Case: 683 | Input/Output: [(96 -6 -84 -36) -84]
Test Case: 684 | Input/Output: [(53 -45 98 78) -45]
Test Case: 685 | Input/Output: [(-26 -95 29 87) -95]
Test Case: 686 | Input/Output: [(6 -71 95 -26) -71]
Test Case: 687 | Input/Output: [(60 -75 0 10) -75]
Test Case: 688 | Input/Output: [(-71 96 -90 -23) -90]
Test Case: 689 | Input/Output: [(22 71 16 -29) -29]
Test Case: 690 | Input/Output: [(21 -36 48 -49) -49]
Test Case: 691 | Input/Output: [(-68 -31 -97 26) -97]
Test Case: 692 | Input/Output: [(15 -6 -77 86) -77]
Test Case: 693 | Input/Output: [(67 40 -69 74) -69]
Test Case: 694 | Input/Output: [(87 -82 -76 13) -82]
Test Case: 695 | Input/Output: [(30 -93 -98 -14) -98]
Test Case: 696 | Input/Output: [(-18 -13 52 -28) -28]
Test Case: 697 | Input/Output: [(1 20 78 -21) -21]
Test Case: 698 | Input/Output: [(-34 -71 3 28) -71]
Test Case: 699 | Input/Output: [(-88 98 -50 8) -88]
Test Case: 700 | Input/Output: [(-8 15 48 -79) -79]
Test Case: 701 | Input/Output: [(53 40 38 -40) -40]
Test Case: 702 | Input/Output: [(15 -90 -49 86) -90]
Test Case: 703 | Input/Output: [(20 11 26 -4) -4]
Test Case: 704 | Input/Output: [(-74 69 -6 -66) -74]
Test Case: 705 | Input/Output: [(-73 94 69 92) -73]
Test Case: 706 | Input/Output: [(65 -55 -28 56) -55]
Test Case: 707 | Input/Output: [(-73 -24 11 52) -73]
Test Case: 708 | Input/Output: [(-92 -28 43 -63) -92]
Test Case: 709 | Input/Output: [(-12 -32 73 43) -32]
Test Case: 710 | Input/Output: [(-86 -47 -16 -66) -86]
Test Case: 711 | Input/Output: [(93 -98 -9 -73) -98]
Test Case: 712 | Input/Output: [(-20 -65 -53 -58) -65]
Test Case: 713 | Input/Output: [(-32 -85 -84 -59) -85]
Test Case: 714 | Input/Output: [(41 86 64 -63) -63]
Test Case: 715 | Input/Output: [(26 78 -85 -62) -85]
Test Case: 716 | Input/Output: [(-54 -25 -73 -96) -96]
Test Case: 717 | Input/Output: [(21 -59 -45 40) -59]
Test Case: 718 | Input/Output: [(48 -80 43 -94) -94]
Test Case: 719 | Input/Output: [(42 -100 4 -38) -100]
Test Case: 720 | Input/Output: [(-61 12 -5 -2) -61]
Test Case: 721 | Input/Output: [(23 94 94 -39) -39]
Test Case: 722 | Input/Output: [(-59 75 -96 10) -96]
Test Case: 723 | Input/Output: [(-90 62 62 -14) -90]
Test Case: 724 | Input/Output: [(76 -43 -43 -35) -43]
Test Case: 725 | Input/Output: [(-36 41 -18 83) -36]
Test Case: 726 | Input/Output: [(-38 -97 0 -13) -97]
Test Case: 727 | Input/Output: [(-41 -1 100 99) -41]
Test Case: 728 | Input/Output: [(58 87 -4 -70) -70]
Test Case: 729 | Input/Output: [(33 -86 -86 88) -86]
Test Case: 730 | Input/Output: [(-73 29 98 -28) -73]
Test Case: 731 | Input/Output: [(-39 4 -21 82) -39]
Test Case: 732 | Input/Output: [(-45 82 35 -83) -83]
Test Case: 733 | Input/Output: [(33 44 -66 35) -66]
Test Case: 734 | Input/Output: [(-82 -47 -69 77) -82]
Test Case: 735 | Input/Output: [(-33 -19 29 -49) -49]
Test Case: 736 | Input/Output: [(-25 25 74 -59) -59]
Test Case: 737 | Input/Output: [(83 47 -98 -58) -98]
Test Case: 738 | Input/Output: [(-86 -16 -5 -97) -97]
Test Case: 739 | Input/Output: [(-92 76 50 -12) -92]
Test Case: 740 | Input/Output: [(10 42 -11 96) -11]
Test Case: 741 | Input/Output: [(94 -99 -73 48) -99]
Test Case: 742 | Input/Output: [(1 57 -48 -50) -50]
Test Case: 743 | Input/Output: [(-4 -64 64 69) -64]
Test Case: 744 | Input/Output: [(50 -24 27 -5) -24]
Test Case: 745 | Input/Output: [(18 -21 -7 53) -21]
Test Case: 746 | Input/Output: [(-69 -49 100 63) -69]
Test Case: 747 | Input/Output: [(-46 -99 -20 57) -99]
Test Case: 748 | Input/Output: [(-19 -55 -43 97) -55]
Test Case: 749 | Input/Output: [(-41 98 12 12) -41]
Test Case: 750 | Input/Output: [(-37 -16 44 -61) -61]
Test Case: 751 | Input/Output: [(57 -50 49 95) -50]
Test Case: 752 | Input/Output: [(-18 -36 -5 76) -36]
Test Case: 753 | Input/Output: [(-69 -87 -53 93) -87]
Test Case: 754 | Input/Output: [(-4 36 1 -65) -65]
Test Case: 755 | Input/Output: [(-5 9 4 -6) -6]
Test Case: 756 | Input/Output: [(-47 -80 -70 68) -80]
Test Case: 757 | Input/Output: [(-55 55 -47 82) -55]
Test Case: 758 | Input/Output: [(-93 39 -66 57) -93]
Test Case: 759 | Input/Output: [(-42 -32 80 75) -42]
Test Case: 760 | Input/Output: [(6 97 83 -35) -35]
Test Case: 761 | Input/Output: [(23 -98 34 -65) -98]
Test Case: 762 | Input/Output: [(-42 28 -52 -87) -87]
Test Case: 763 | Input/Output: [(-33 88 -96 -59) -96]
Test Case: 764 | Input/Output: [(-52 95 93 -60) -60]
Test Case: 765 | Input/Output: [(85 -74 46 -18) -74]
Test Case: 766 | Input/Output: [(78 -31 -12 -16) -31]
Test Case: 767 | Input/Output: [(59 99 100 -93) -93]
Test Case: 768 | Input/Output: [(39 -70 -10 41) -70]
Test Case: 769 | Input/Output: [(-4 -68 15 -46) -68]
Test Case: 770 | Input/Output: [(23 -73 18 -94) -94]
Test Case: 771 | Input/Output: [(-27 -82 79 -97) -97]
Test Case: 772 | Input/Output: [(-96 -18 -21 69) -96]
Test Case: 773 | Input/Output: [(99 51 24 45) 24]
Test Case: 774 | Input/Output: [(92 5 -60 -1) -60]
Test Case: 775 | Input/Output: [(-34 -31 -81 79) -81]
Test Case: 776 | Input/Output: [(17 46 95 45) 17]
Test Case: 777 | Input/Output: [(-82 -68 -96 8) -96]
Test Case: 778 | Input/Output: [(-66 42 -51 -24) -66]
Test Case: 779 | Input/Output: [(-80 -56 -71 -26) -80]
Test Case: 780 | Input/Output: [(17 68 78 22) 17]
Test Case: 781 | Input/Output: [(-51 -68 45 7) -68]
Test Case: 782 | Input/Output: [(78 70 -46 11) -46]
Test Case: 783 | Input/Output: [(23 -2 -69 -14) -69]
Test Case: 784 | Input/Output: [(-58 -25 -84 -51) -84]
Test Case: 785 | Input/Output: [(-76 97 -14 11) -76]
Test Case: 786 | Input/Output: [(36 -13 -65 -85) -85]
Test Case: 787 | Input/Output: [(-63 -73 -8 -81) -81]
Test Case: 788 | Input/Output: [(98 -34 -55 97) -55]
Test Case: 789 | Input/Output: [(-38 20 72 6) -38]
Test Case: 790 | Input/Output: [(62 58 -61 -86) -86]
Test Case: 791 | Input/Output: [(49 76 -92 86) -92]
Test Case: 792 | Input/Output: [(-31 12 41 -85) -85]
Test Case: 793 | Input/Output: [(69 76 -94 -12) -94]
Test Case: 794 | Input/Output: [(51 -24 -86 61) -86]
Test Case: 795 | Input/Output: [(-19 -98 37 35) -98]
Test Case: 796 | Input/Output: [(81 -97 93 -10) -97]
Test Case: 797 | Input/Output: [(-76 -96 28 -59) -96]
Test Case: 798 | Input/Output: [(-34 -43 16 -92) -92]
Test Case: 799 | Input/Output: [(-44 55 -68 -94) -94]
Test Case: 800 | Input/Output: [(-12 -10 44 24) -12]
Test Case: 801 | Input/Output: [(-31 -29 34 52) -31]
Test Case: 802 | Input/Output: [(15 21 13 -83) -83]
Test Case: 803 | Input/Output: [(-69 56 -20 60) -69]
Test Case: 804 | Input/Output: [(74 -13 100 -100) -100]
Test Case: 805 | Input/Output: [(-32 -55 32 -2) -55]
Test Case: 806 | Input/Output: [(94 -3 -41 64) -41]
Test Case: 807 | Input/Output: [(80 6 -42 -52) -52]
Test Case: 808 | Input/Output: [(-49 -79 -5 -84) -84]
Test Case: 809 | Input/Output: [(55 36 -60 50) -60]
Test Case: 810 | Input/Output: [(17 -97 -62 20) -97]
Test Case: 811 | Input/Output: [(52 86 9 -26) -26]
Test Case: 812 | Input/Output: [(-65 55 -54 18) -65]
Test Case: 813 | Input/Output: [(-58 97 -32 -5) -58]
Test Case: 814 | Input/Output: [(25 74 67 -57) -57]
Test Case: 815 | Input/Output: [(43 59 -74 38) -74]
Test Case: 816 | Input/Output: [(-50 -45 -31 -47) -50]
Test Case: 817 | Input/Output: [(-100 -1 -93 -73) -100]
Test Case: 818 | Input/Output: [(-67 -85 55 -49) -85]
Test Case: 819 | Input/Output: [(-93 44 15 76) -93]
Test Case: 820 | Input/Output: [(38 0 -79 -55) -79]
Test Case: 821 | Input/Output: [(19 48 -12 100) -12]
Test Case: 822 | Input/Output: [(97 43 24 -39) -39]
Test Case: 823 | Input/Output: [(17 90 94 90) 17]
Test Case: 824 | Input/Output: [(-53 39 -50 -59) -59]
Test Case: 825 | Input/Output: [(-19 27 54 -51) -51]
Test Case: 826 | Input/Output: [(-7 -84 -44 -64) -84]
Test Case: 827 | Input/Output: [(39 -90 65 18) -90]
Test Case: 828 | Input/Output: [(-28 53 79 73) -28]
Test Case: 829 | Input/Output: [(18 12 -43 37) -43]
Test Case: 830 | Input/Output: [(-57 30 24 2) -57]
Test Case: 831 | Input/Output: [(58 -91 -51 54) -91]
Test Case: 832 | Input/Output: [(75 -54 65 -14) -54]
Test Case: 833 | Input/Output: [(46 -8 -46 -81) -81]
Test Case: 834 | Input/Output: [(-65 -14 2 94) -65]
Test Case: 835 | Input/Output: [(-83 56 86 -63) -83]
Test Case: 836 | Input/Output: [(-31 25 -76 -60) -76]
Test Case: 837 | Input/Output: [(-99 2 37 -19) -99]
Test Case: 838 | Input/Output: [(-7 91 32 32) -7]
Test Case: 839 | Input/Output: [(-28 -51 -77 -33) -77]
Test Case: 840 | Input/Output: [(65 52 -34 16) -34]
Test Case: 841 | Input/Output: [(24 -98 14 65) -98]
Test Case: 842 | Input/Output: [(-39 79 -25 87) -39]
Test Case: 843 | Input/Output: [(23 65 69 12) 12]
Test Case: 844 | Input/Output: [(79 25 -39 -29) -39]
Test Case: 845 | Input/Output: [(-25 -14 94 37) -25]
Test Case: 846 | Input/Output: [(36 -56 48 42) -56]
Test Case: 847 | Input/Output: [(27 -26 31 42) -26]
Test Case: 848 | Input/Output: [(79 -15 -100 78) -100]
Test Case: 849 | Input/Output: [(52 -48 -39 -74) -74]
Test Case: 850 | Input/Output: [(91 38 -38 -36) -38]
Test Case: 851 | Input/Output: [(32 -56 16 -35) -56]
Test Case: 852 | Input/Output: [(50 42 85 76) 42]
Test Case: 853 | Input/Output: [(-60 34 28 -58) -60]
Test Case: 854 | Input/Output: [(1 27 -33 21) -33]
Test Case: 855 | Input/Output: [(-22 -88 8 23) -88]
Test Case: 856 | Input/Output: [(38 -52 -84 7) -84]
Test Case: 857 | Input/Output: [(87 26 -59 -62) -62]
Test Case: 858 | Input/Output: [(51 -17 4 -96) -96]
Test Case: 859 | Input/Output: [(14 68 -70 28) -70]
Test Case: 860 | Input/Output: [(67 82 43 69) 43]
Test Case: 861 | Input/Output: [(1 26 6 88) 1]
Test Case: 862 | Input/Output: [(-72 92 -57 0) -72]
Test Case: 863 | Input/Output: [(-54 43 -60 92) -60]
Test Case: 864 | Input/Output: [(-44 51 -36 -21) -44]
Test Case: 865 | Input/Output: [(-30 71 -54 91) -54]
Test Case: 866 | Input/Output: [(-82 72 -26 24) -82]
Test Case: 867 | Input/Output: [(30 -17 31 -40) -40]
Test Case: 868 | Input/Output: [(0 -75 78 -90) -90]
Test Case: 869 | Input/Output: [(20 24 -83 -43) -83]
Test Case: 870 | Input/Output: [(2 0 -33 24) -33]
Test Case: 871 | Input/Output: [(-25 34 60 93) -25]
Test Case: 872 | Input/Output: [(-99 57 48 86) -99]
Test Case: 873 | Input/Output: [(-33 -63 -23 -95) -95]
Test Case: 874 | Input/Output: [(19 -60 -87 92) -87]
Test Case: 875 | Input/Output: [(93 -11 -22 -80) -80]
Test Case: 876 | Input/Output: [(60 66 56 35) 35]
Test Case: 877 | Input/Output: [(-19 91 -77 66) -77]
Test Case: 878 | Input/Output: [(-85 -1 31 -93) -93]
Test Case: 879 | Input/Output: [(-62 2 99 -62) -62]
Test Case: 880 | Input/Output: [(-19 -36 -1 67) -36]
Test Case: 881 | Input/Output: [(73 64 -79 -57) -79]
Test Case: 882 | Input/Output: [(86 52 17 -76) -76]
Test Case: 883 | Input/Output: [(11 31 7 86) 7]
Test Case: 884 | Input/Output: [(39 20 73 13) 13]
Test Case: 885 | Input/Output: [(70 -18 -36 -25) -36]
Test Case: 886 | Input/Output: [(-11 49 -85 70) -85]
Test Case: 887 | Input/Output: [(62 15 -76 -52) -76]
Test Case: 888 | Input/Output: [(-25 -93 75 -55) -93]
Test Case: 889 | Input/Output: [(84 90 -93 -47) -93]
Test Case: 890 | Input/Output: [(14 -3 50 -1) -3]
Test Case: 891 | Input/Output: [(-57 63 14 71) -57]
Test Case: 892 | Input/Output: [(78 0 -17 24) -17]
Test Case: 893 | Input/Output: [(12 49 35 -19) -19]
Test Case: 894 | Input/Output: [(99 -96 10 9) -96]
Test Case: 895 | Input/Output: [(-11 -37 -15 -62) -62]
Test Case: 896 | Input/Output: [(6 97 -45 67) -45]
Test Case: 897 | Input/Output: [(63 -27 72 80) -27]
Test Case: 898 | Input/Output: [(68 90 -57 -2) -57]
Test Case: 899 | Input/Output: [(-63 50 46 -93) -93]
Test Case: 900 | Input/Output: [(-71 -40 66 -59) -71]
Test Case: 901 | Input/Output: [(-39 -21 93 58) -39]
Test Case: 902 | Input/Output: [(-77 -93 54 23) -93]
Test Case: 903 | Input/Output: [(86 -83 -78 7) -83]
Test Case: 904 | Input/Output: [(67 35 -51 87) -51]
Test Case: 905 | Input/Output: [(-17 -60 -20 64) -60]
Test Case: 906 | Input/Output: [(-73 -57 57 68) -73]
Test Case: 907 | Input/Output: [(-47 32 -20 69) -47]
Test Case: 908 | Input/Output: [(55 -38 -23 80) -38]
Test Case: 909 | Input/Output: [(73 23 11 67) 11]
Test Case: 910 | Input/Output: [(-32 21 -75 43) -75]
Test Case: 911 | Input/Output: [(80 43 44 -24) -24]
Test Case: 912 | Input/Output: [(84 62 -18 -92) -92]
Test Case: 913 | Input/Output: [(-70 79 -60 50) -70]
Test Case: 914 | Input/Output: [(-78 38 87 57) -78]
Test Case: 915 | Input/Output: [(18 12 12 -42) -42]
Test Case: 916 | Input/Output: [(18 -29 58 -11) -29]
Test Case: 917 | Input/Output: [(30 92 95 85) 30]
Test Case: 918 | Input/Output: [(-86 -97 42 -20) -97]
Test Case: 919 | Input/Output: [(20 85 -89 25) -89]
Test Case: 920 | Input/Output: [(19 -85 83 76) -85]
Test Case: 921 | Input/Output: [(-16 -21 -71 -86) -86]
Test Case: 922 | Input/Output: [(0 -78 38 5) -78]
Test Case: 923 | Input/Output: [(90 23 25 -68) -68]
Test Case: 924 | Input/Output: [(-7 -42 81 46) -42]
Test Case: 925 | Input/Output: [(-62 -67 -50 -32) -67]
Test Case: 926 | Input/Output: [(100 -75 42 -13) -75]
Test Case: 927 | Input/Output: [(97 59 25 -39) -39]
Test Case: 928 | Input/Output: [(94 96 22 69) 22]
Test Case: 929 | Input/Output: [(-37 8 -100 48) -100]
Test Case: 930 | Input/Output: [(-29 -60 -38 74) -60]
Test Case: 931 | Input/Output: [(80 6 -100 9) -100]
Test Case: 932 | Input/Output: [(14 8 -34 -75) -75]
Test Case: 933 | Input/Output: [(-27 10 -35 -10) -35]
Test Case: 934 | Input/Output: [(-82 35 61 71) -82]
Test Case: 935 | Input/Output: [(72 -15 -71 13) -71]
Test Case: 936 | Input/Output: [(-38 34 69 -87) -87]
Test Case: 937 | Input/Output: [(100 -63 19 11) -63]
Test Case: 938 | Input/Output: [(13 93 -27 -16) -27]
Test Case: 939 | Input/Output: [(-93 9 79 -32) -93]
Test Case: 940 | Input/Output: [(83 -20 -31 26) -31]
Test Case: 941 | Input/Output: [(-100 90 27 0) -100]
Test Case: 942 | Input/Output: [(-13 -75 40 -99) -99]
Test Case: 943 | Input/Output: [(9 -62 -54 -69) -69]
Test Case: 944 | Input/Output: [(18 34 -58 72) -58]
Test Case: 945 | Input/Output: [(-60 64 -70 -82) -82]
Test Case: 946 | Input/Output: [(87 -6 -1 -46) -46]
Test Case: 947 | Input/Output: [(84 21 -86 75) -86]
Test Case: 948 | Input/Output: [(94 -21 -20 33) -21]
Test Case: 949 | Input/Output: [(54 -88 -7 75) -88]
Test Case: 950 | Input/Output: [(-56 22 11 3) -56]
Test Case: 951 | Input/Output: [(-96 100 -72 61) -96]
Test Case: 952 | Input/Output: [(-78 -15 10 -6) -78]
Test Case: 953 | Input/Output: [(-18 -75 6 9) -75]
Test Case: 954 | Input/Output: [(-7 44 38 36) -7]
Test Case: 955 | Input/Output: [(84 24 7 -53) -53]
Test Case: 956 | Input/Output: [(50 26 19 -98) -98]
Test Case: 957 | Input/Output: [(-1 5 28 57) -1]
Test Case: 958 | Input/Output: [(-96 11 -51 94) -96]
Test Case: 959 | Input/Output: [(-72 -74 -11 23) -74]
Test Case: 960 | Input/Output: [(28 -79 -57 33) -79]
Test Case: 961 | Input/Output: [(-48 -79 97 76) -79]
Test Case: 962 | Input/Output: [(15 45 -4 -97) -97]
Test Case: 963 | Input/Output: [(-6 27 -82 -15) -82]
Test Case: 964 | Input/Output: [(-43 -75 25 12) -75]
Test Case: 965 | Input/Output: [(-76 42 86 -99) -99]
Test Case: 966 | Input/Output: [(35 -62 -52 38) -62]
Test Case: 967 | Input/Output: [(78 73 -45 49) -45]
Test Case: 968 | Input/Output: [(17 37 25 31) 17]
Test Case: 969 | Input/Output: [(21 -21 2 22) -21]
Test Case: 970 | Input/Output: [(67 1 92 -87) -87]
Test Case: 971 | Input/Output: [(-81 26 -45 -30) -81]
Test Case: 972 | Input/Output: [(-3 -90 -5 24) -90]
Test Case: 973 | Input/Output: [(-14 -61 7 68) -61]
Test Case: 974 | Input/Output: [(47 25 65 -1) -1]
Test Case: 975 | Input/Output: [(8 -94 51 -71) -94]
Test Case: 976 | Input/Output: [(-8 72 37 73) -8]
Test Case: 977 | Input/Output: [(32 -15 55 -97) -97]
Test Case: 978 | Input/Output: [(78 -38 -9 -31) -38]
Test Case: 979 | Input/Output: [(64 -64 -43 2) -64]
Test Case: 980 | Input/Output: [(95 90 -36 68) -36]
Test Case: 981 | Input/Output: [(40 26 -91 41) -91]
Test Case: 982 | Input/Output: [(18 -57 52 86) -57]
Test Case: 983 | Input/Output: [(-73 -16 -100 7) -100]
Test Case: 984 | Input/Output: [(22 70 90 60) 22]
Test Case: 985 | Input/Output: [(-90 35 0 -6) -90]
Test Case: 986 | Input/Output: [(15 94 81 -16) -16]
Test Case: 987 | Input/Output: [(-98 -67 55 42) -98]
Test Case: 988 | Input/Output: [(99 -58 89 36) -58]
Test Case: 989 | Input/Output: [(36 -9 29 -88) -88]
Test Case: 990 | Input/Output: [(-36 53 73 95) -36]
Test Case: 991 | Input/Output: [(68 -84 -59 61) -84]
Test Case: 992 | Input/Output: [(-12 46 10 12) -12]
Test Case: 993 | Input/Output: [(-19 50 68 -73) -73]
Test Case: 994 | Input/Output: [(-15 87 -33 -82) -82]
Test Case: 995 | Input/Output: [(52 -49 -50 44) -50]
Test Case: 996 | Input/Output: [(80 -27 96 68) -27]
Test Case: 997 | Input/Output: [(99 97 -3 31) -3]
Test Case: 998 | Input/Output: [(-52 -10 45 -66) -66]
Test Case: 999 | Input/Output: [(64 32 -46 93) -46]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -15 -110 -60 -1 -53 108 -30 -64 16 -52 125 -106 77 117 -60 -76
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[98 98 98 -92] -92] [[1 1 -19 1] -19] [[6 6 -34 6] -34] [[100 100 100 82] 82] [[69 -43 -43 -43] -43] [[-64 52 -64 -64] -64] [[79 26 26 26] 26] [[-25 -10 -10 -10] -25] [[-83 -83 -83 20] -83] [[55 -100 -100 -100] -100] [(15 15 15 15) 15] [(85 85 85 85) 85] [(-98 -98 -98 -98) -98] [(16 16 16 16) 16] [(93 93 93 93) 93] [(21 43 54 22) 21] [(12 24 80 87) 12] [(65 46 23 90) 23] [(49 34 61 19) 19] [(41 39 84 23) 23] [(45 65 53 48) 45] [(88 38 13 35) 13] [(27 32 44 57) 27] [(26 38 1 64) 1] [(39 14 26 85) 14] [(6 77 19 56) 6] [(77 67 49 59) 49] [(93 99 16 29) 16] [(65 90 40 51) 40] [(93 71 60 18) 18] [(92 53 44 53) 44] [(61 31 81 15) 15] [(82 96 36 85) 36] [(86 72 87 57) 57] [(67 85 13 10) 10] [(17 68 -15 33) -15] [(-55 -10 6 27) -55] [(-94 -46 78 -29) -94] [(-6 75 -94 39) -94] [(45 -94 41 -49) -94] [(53 53 -8 26) -8] [(75 -33 -65 -9) -65] [(27 -48 -30 -85) -85] [(-8 -39 25 -4) -39] [(90 65 -100 -70) -100] [(83 -35 24 -20) -35] [(73 -35 -3 97) -35] [(71 -64 55 -46) -64] [(-15 0 91 -22) -22] [(-82 49 79 27) -82] [(-27 -66 -8 72) -66] [(54 -17 -23 65) -23] [(99 -81 -70 -64) -81] [(-77 -20 49 24) -77] [(-90 49 -38 -44) -90] [(5 -66 -31 -31) -66] [(-72 -73 88 100) -73] [(94 -23 -32 67) -32] [(22 -49 -64 -24) -64] [(-5 -40 74 0) -40] [(-74 -11 -22 -48) -74] [(-69 -10 -81 -67) -81] [(-70 -67 43 97) -70] [(23 -69 -50 41) -69] [(-13 -16 -64 30) -64] [(73 57 52 48) 48] [(34 44 44 -72) -72] [(-51 83 63 -4) -51] [(16 93 -33 36) -33] [(-48 -69 24 31) -69] [(28 81 -46 -72) -72] [(-75 -92 -23 -30) -92] [(26 -39 -41 -11) -41] [(43 20 -14 57) -14] [(-83 53 -25 22) -83] [(61 -16 -51 21) -51] [(41 -37 -58 60) -58] [(-29 35 12 15) -29] [(41 -39 92 -23) -39] [(-29 -61 9 -88) -88] [(67 43 -96 69) -96] [(-40 -16 -23 -69) -69] [(49 96 30 74) 30] [(-9 -60 -54 -99) -99] [(60 59 62 -87) -87] [(-65 -79 94 74) -79] [(84 35 66 93) 35] [(58 79 26 74) 26] [(52 -39 33 26) -39] [(4 -38 -51 -37) -51] [(21 -84 -4 -71) -84] [(-74 -34 -88 -30) -88] [(-50 -15 31 -88) -88] [(41 60 29 -97) -97] [(-40 49 81 -12) -40])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: 45                 
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: 75                 
Correct output: -85                 | Program output: 27                 
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: 83                 
Correct output: -35                 | Program output: 73                 
Correct output: -64                 | Program output: 71                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: 54                 
Correct output: -81                 | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: 5                  
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: 94                 
Correct output: -64                 | Program output: 22                 
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 23                 
Correct output: -64                 | Program output: -13                
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: 26                 
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 61                 
Correct output: -58                 | Program output: 41                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -9                 
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 52                 
Correct output: -51                 | Program output: 4                  
Correct output: -84                 | Program output: 21                 
Correct output: -88                 | Program output: -74                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction -93} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_773} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_850} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction 25} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_915})
Lexicase best program: (integer_max in1 print_integer boolean_pop boolean_empty integer_yank exec_shove (boolean_not) integer_swap in3 boolean_frominteger integer_lt integer_stackdepth boolean_and boolean_and exec_stackdepth integer_fromboolean exec_when (integer_pop boolean_pop exec_when () -93 integer_lt integer_mult integer_stackdepth tag_exec_773 (boolean_dup exec_do*times () integer_yank boolean_frominteger exec_when () exec_s_when_autoconstructing (boolean_dup_times integer_swap boolean_not boolean_and integer_flush integer_rot exec_s (exec_when (exec_eq) integer_div) (tagged_850 integer_inc integer_shove) (in4 exec_pop (boolean_empty exec_y_when_autoconstructing () boolean_or exec_k_when_autoconstructing (print_newline integer_yankdup) (integer_fromboolean) exec_y_when_autoconstructing (exec_do*while (integer_gte exec_pop (integer_swap in1)) exec_k (boolean_pop integer_dup in1 exec_do*count (exec_do*while (25 exec_do*range (exec_k_when_autoconstructing () (integer_div) boolean_stackdepth boolean_flush integer_empty)) exec_do*times (in2)) boolean_frominteger) (integer_empty in4 print_newline tagged_915))))) () ())))
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 109
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction -93} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_773} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_850} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction 25} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_915})
Zero cases best program: (integer_max in1 print_integer boolean_pop boolean_empty integer_yank exec_shove (boolean_not) integer_swap in3 boolean_frominteger integer_lt integer_stackdepth boolean_and boolean_and exec_stackdepth integer_fromboolean exec_when (integer_pop boolean_pop exec_when () -93 integer_lt integer_mult integer_stackdepth tag_exec_773 (boolean_dup exec_do*times () integer_yank boolean_frominteger exec_when () exec_s_when_autoconstructing (boolean_dup_times integer_swap boolean_not boolean_and integer_flush integer_rot exec_s (exec_when (exec_eq) integer_div) (tagged_850 integer_inc integer_shove) (in4 exec_pop (boolean_empty exec_y_when_autoconstructing () boolean_or exec_k_when_autoconstructing (print_newline integer_yankdup) (integer_fromboolean) exec_y_when_autoconstructing (exec_do*while (integer_gte exec_pop (integer_swap in1)) exec_k (boolean_pop integer_dup in1 exec_do*count (exec_do*while (25 exec_do*range (exec_k_when_autoconstructing () (integer_div) boolean_stackdepth boolean_flush integer_empty)) exec_do*times (in2)) boolean_frominteger) (integer_empty in4 print_newline tagged_915))))) () ())))
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 109
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 1 5 4 2 4 4 4 4 13)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (5 1 5 4 2 4 4 4 4 13)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction -93} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_773} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_850} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction 25} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_915})
Best program: (integer_max in1 print_integer boolean_pop boolean_empty integer_yank exec_shove (boolean_not) integer_swap in3 boolean_frominteger integer_lt integer_stackdepth boolean_and boolean_and exec_stackdepth integer_fromboolean exec_when (integer_pop boolean_pop exec_when () -93 integer_lt integer_mult integer_stackdepth tag_exec_773 (boolean_dup exec_do*times () integer_yank boolean_frominteger exec_when () exec_s_when_autoconstructing (boolean_dup_times integer_swap boolean_not boolean_and integer_flush integer_rot exec_s (exec_when (exec_eq) integer_div) (tagged_850 integer_inc integer_shove) (in4 exec_pop (boolean_empty exec_y_when_autoconstructing () boolean_or exec_k_when_autoconstructing (print_newline integer_yankdup) (integer_fromboolean) exec_y_when_autoconstructing (exec_do*while (integer_gte exec_pop (integer_swap in1)) exec_k (boolean_pop integer_dup in1 exec_do*count (exec_do*while (25 exec_do*range (exec_k_when_autoconstructing () (integer_div) boolean_stackdepth boolean_flush integer_empty)) exec_do*times (in2)) boolean_frominteger) (integer_empty in4 print_newline tagged_915))))) () ())))
Errors: [1 1 1 0 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 80
Size: 109
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 9.954
Median total errors in population: 10
Error averages by case: (0.995 0.999 0.995 0.996 0.998 0.996 0.996 0.996 0.996 0.987)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.204
Average program size in population (points): 68.054
Average percent parens in population: 0.285
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 486674
--- Timings ---
Current time: 1559593741530 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.7 seconds, 27.4%
Fitness Testing:      1.9 seconds, 68.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_883} {:close 0, :instruction 67} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_857} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction tagged_609} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 1, :instruction tagged_638} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_shove})
Lexicase best program: (in3 print_integer integer_add exec_pop (integer_add integer_max exec_when (exec_dup_items integer_max exec_do*times (boolean_xor in1 integer_gt) boolean_not) exec_s_when_autoconstructing (boolean_shove exec_empty) (boolean_swap) (exec_do*times (exec_yankdup integer_rot)) integer_shove exec_s_when_autoconstructing (exec_do*count (tagged_883 67 integer_yank boolean_not integer_mult boolean_not exec_y () boolean_dup_items exec_k_when_autoconstructing (integer_empty) (in2 exec_s_when_autoconstructing (integer_dup exec_k (exec_s_when_autoconstructing (exec_do*while () print_newline integer_div boolean_pop exec_stackdepth integer_pop) (exec_dup_items exec_empty exec_k_when_autoconstructing (print_newline exec_dup_items exec_when (exec_do*times () integer_eq) integer_stackdepth exec_noop integer_swap integer_dup_items integer_gt tag_integer_857 exec_stackdepth integer_dup_times print_boolean exec_shove (integer_gte integer_min exec_do*while (boolean_yankdup integer_fromboolean in4 in1 tagged_609 exec_when (in4 exec_k (exec_shove (exec_empty boolean_rot integer_lt) tagged_638) (exec_dup () integer_eq boolean_yank print_exec (integer_mult exec_eq) boolean_stackdepth integer_flush) exec_pop (print_boolean integer_yankdup) exec_dup (boolean_and integer_sub) integer_flush integer_gt integer_add boolean_rot boolean_shove)))) ()) ()) ()) () ()))) () ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 136
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_883} {:close 0, :instruction 67} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_857} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction tagged_609} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 1, :instruction tagged_638} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_shove})
Zero cases best program: (in3 print_integer integer_add exec_pop (integer_add integer_max exec_when (exec_dup_items integer_max exec_do*times (boolean_xor in1 integer_gt) boolean_not) exec_s_when_autoconstructing (boolean_shove exec_empty) (boolean_swap) (exec_do*times (exec_yankdup integer_rot)) integer_shove exec_s_when_autoconstructing (exec_do*count (tagged_883 67 integer_yank boolean_not integer_mult boolean_not exec_y () boolean_dup_items exec_k_when_autoconstructing (integer_empty) (in2 exec_s_when_autoconstructing (integer_dup exec_k (exec_s_when_autoconstructing (exec_do*while () print_newline integer_div boolean_pop exec_stackdepth integer_pop) (exec_dup_items exec_empty exec_k_when_autoconstructing (print_newline exec_dup_items exec_when (exec_do*times () integer_eq) integer_stackdepth exec_noop integer_swap integer_dup_items integer_gt tag_integer_857 exec_stackdepth integer_dup_times print_boolean exec_shove (integer_gte integer_min exec_do*while (boolean_yankdup integer_fromboolean in4 in1 tagged_609 exec_when (in4 exec_k (exec_shove (exec_empty boolean_rot integer_lt) tagged_638) (exec_dup () integer_eq boolean_yank print_exec (integer_mult exec_eq) boolean_stackdepth integer_flush) exec_pop (print_boolean integer_yankdup) exec_dup (boolean_and integer_sub) integer_flush integer_gt integer_add boolean_rot boolean_shove)))) ()) ()) ()) () ()))) () ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 136
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (658 121 140 69 121 121 645 120 112 325)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (658 121 140 69 121 121 645 120 112 325)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty})
Best program: (boolean_xor in3 print_integer exec_empty)
Errors: [0 0 1 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 4
Size: 5
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.568
Median total errors in population: 7
Error averages by case: (0.342 0.879 0.86 0.931 0.879 0.879 0.355 0.88 0.888 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.389
Average program size in population (points): 96.941
Average percent parens in population: 0.281
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.968
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.968
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 867496
--- Timings ---
Current time: 1559593743488 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         1.9 seconds, 39.7%
Fitness Testing:      2.4 seconds, 50.3%
Report:               0.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty})
Lexicase best program: (in3 boolean_or print_integer integer_yank exec_empty)
Lexicase best errors: [1 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 6
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty})
Zero cases best program: (in3 boolean_or print_integer integer_yank exec_empty)
Zero cases best errors: [1 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 6
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (68 96 88 96 427 87 428 88 427 96)
Population mean number of elite cases: 1.90
Count of perfect (error zero) individuals by case: (68 96 88 96 427 87 428 88 427 96)
Population mean number of perfect (error zero) cases: 1.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_883} {:close 0, :instruction 67} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_boolean_403} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_857} {:close 0, :instruction 82} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction tagged_609} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 1, :instruction tagged_638} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_shove})
Best program: (in3 print_integer integer_add exec_pop (integer_max boolean_and exec_when (exec_dup_items integer_max exec_do*times (boolean_invert_second_then_and in1 integer_gt) boolean_shove boolean_not) integer_flush exec_s_when_autoconstructing (boolean_shove boolean_swap) (boolean_swap) (exec_do*times (exec_yankdup integer_rot)) integer_shove exec_s_when_autoconstructing (exec_do*count (tagged_883 67 integer_yank boolean_not boolean_not exec_y () exec_do*while (boolean_dup_items exec_k_when_autoconstructing (exec_noop exec_s_when_autoconstructing (exec_k (exec_dup (exec_s_when_autoconstructing (integer_mult integer_dup exec_do*while () tag_boolean_403 print_newline integer_div boolean_pop exec_stackdepth exec_dup_items exec_k_when_autoconstructing (integer_swap print_newline exec_dup_items exec_do*times () integer_eq) (integer_stackdepth integer_yankdup exec_yank exec_noop integer_swap integer_dup_items exec_swap (tag_integer_857 82 exec_stackdepth integer_dup_times print_boolean exec_shove (integer_gte integer_min boolean_yankdup integer_fromboolean boolean_xor) in4 in1 tagged_609 exec_when (boolean_stackdepth in4 exec_k (exec_empty boolean_rot integer_lt) (tagged_638) exec_dup () integer_eq print_exec (integer_flush) exec_pop (print_boolean exec_dup (integer_sub) integer_add boolean_rot boolean_shove))) ())) () ())) ()) () ()) ()))) () ()))
Errors: [1 1 1 1 0 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 95
Size: 134
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 8.099
Median total errors in population: 7
Error averages by case: (0.932 0.904 0.912 0.904 0.573 0.913 0.572 0.912 0.573 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.518
Average program size in population (points): 76.63
Average percent parens in population: 0.270
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1226550
--- Timings ---
Current time: 1559593745448 milliseconds
Total Time:           6.8 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.2 seconds, 46.9%
Fitness Testing:      2.9 seconds, 42.8%
Report:               0.6 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 87                 
Correct output: 23                  | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 57                 
Correct output: 1                   | Program output: 64                 
Correct output: 14                  | Program output: 85                 
Correct output: 6                   | Program output: 56                 
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: 33                 
Correct output: -55                 | Program output: 27                 
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: 39                 
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: 26                 
Correct output: -65                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -70                
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: 97                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: 72                 
Correct output: -23                 | Program output: 65                 
Correct output: -81                 | Program output: -64                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 100                
Correct output: -32                 | Program output: 67                 
Correct output: -64                 | Program output: -24                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -67                
Correct output: -70                 | Program output: 97                 
Correct output: -69                 | Program output: 41                 
Correct output: -64                 | Program output: 30                 
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: 36                 
Correct output: -69                 | Program output: 31                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -11                
Correct output: -14                 | Program output: 57                 
Correct output: -83                 | Program output: 22                 
Correct output: -51                 | Program output: 21                 
Correct output: -58                 | Program output: 60                 
Correct output: -29                 | Program output: 15                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 69                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 93                 
Correct output: 26                  | Program output: 74                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -37                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_883} {:close 0, :instruction 67} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_857} {:close 0, :instruction 82} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_638} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_shove})
Lexicase best program: (in3 print_integer integer_add exec_pop (exec_when (exec_dup_items integer_max exec_do*times (in1 integer_gt) boolean_not) in2 exec_s_when_autoconstructing (exec_empty) (boolean_swap) (boolean_swap) exec_do*times (exec_yankdup integer_shove exec_s_when_autoconstructing (exec_do*count (tagged_883 67 boolean_invert_second_then_and) integer_mult boolean_not print_boolean exec_y () boolean_dup_items exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_swap integer_dup exec_s_when_autoconstructing (integer_dup print_newline integer_div exec_stackdepth integer_pop) (exec_dup_items exec_k_when_autoconstructing (print_newline exec_when (exec_do*times () exec_if (integer_eq) (integer_stackdepth integer_yankdup integer_mod exec_noop integer_swap integer_dup_items tag_integer_857 82 exec_stackdepth print_boolean integer_lt exec_shove (integer_gte integer_gt integer_min boolean_yankdup boolean_shove integer_fromboolean boolean_xor) in4 in1 exec_rot (exec_when (boolean_stackdepth boolean_pop exec_k (exec_shove (exec_empty boolean_rot tagged_638) integer_flush) (print_boolean integer_yankdup) exec_dup (integer_sub) integer_flush integer_add exec_yankdup boolean_shove exec_rot () () (boolean_rot boolean_shove))) () ()))) ()) ()) () ()) ()) () ())))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 127
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_883} {:close 0, :instruction 67} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_857} {:close 0, :instruction 82} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_638} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_shove})
Zero cases best program: (in3 print_integer integer_add exec_pop (exec_when (exec_dup_items integer_max exec_do*times (in1 integer_gt) boolean_not) in2 exec_s_when_autoconstructing (exec_empty) (boolean_swap) (boolean_swap) exec_do*times (exec_yankdup integer_shove exec_s_when_autoconstructing (exec_do*count (tagged_883 67 boolean_invert_second_then_and) integer_mult boolean_not print_boolean exec_y () boolean_dup_items exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_swap integer_dup exec_s_when_autoconstructing (integer_dup print_newline integer_div exec_stackdepth integer_pop) (exec_dup_items exec_k_when_autoconstructing (print_newline exec_when (exec_do*times () exec_if (integer_eq) (integer_stackdepth integer_yankdup integer_mod exec_noop integer_swap integer_dup_items tag_integer_857 82 exec_stackdepth print_boolean integer_lt exec_shove (integer_gte integer_gt integer_min boolean_yankdup boolean_shove integer_fromboolean boolean_xor) in4 in1 exec_rot (exec_when (boolean_stackdepth boolean_pop exec_k (exec_shove (exec_empty boolean_rot tagged_638) integer_flush) (print_boolean integer_yankdup) exec_dup (integer_sub) integer_flush integer_add exec_yankdup boolean_shove exec_rot () () (boolean_rot boolean_shove))) () ()))) ()) ()) () ()) ()) () ())))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 127
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 190 68 218 69 225 711 476 218 69)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (218 190 68 218 69 225 711 476 218 69)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -20} {:close 0, :instruction integer_min} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction tag_boolean_371} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction -43} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or})
Best program: (-20 integer_min exec_dup_items in4 exec_y_when_autoconstructing (print_integer boolean_invert_second_then_and exec_s (boolean_dup_items exec_rot (integer_dup_items integer_pop integer_gt boolean_rot exec_s (print_boolean exec_dup (exec_k_when_autoconstructing (exec_noop exec_y_when_autoconstructing () boolean_yank) (integer_min exec_dup_items) exec_pop (integer_flush exec_when (exec_while (integer_dup) integer_mod integer_lte exec_rot (print_exec (tag_boolean_371 exec_dup (integer_fromboolean exec_k_when_autoconstructing () (integer_stackdepth integer_yankdup exec_dup (exec_pop (in2 -43 print_boolean integer_gt exec_s (exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_while (integer_dup print_newline boolean_empty)) (boolean_pop integer_gt) integer_div boolean_and boolean_or) () ())))))) () ())))) () ()) () ()) () ()))
Errors: [1 1 0 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 90
Percent parens: 0.378
--- Population Statistics ---
Average total errors in population: 7.538
Median total errors in population: 8
Error averages by case: (0.782 0.81 0.932 0.782 0.931 0.775 0.289 0.524 0.782 0.931)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.406
Average program size in population (points): 82.923
Average percent parens in population: 0.271
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1637974
--- Timings ---
Current time: 1559593747592 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 51.2%
Fitness Testing:      3.4 seconds, 38.8%
Report:               0.8 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: 45                 
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: 75                 
Correct output: -85                 | Program output: 27                 
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: 83                 
Correct output: -35                 | Program output: 73                 
Correct output: -64                 | Program output: 71                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: 54                 
Correct output: -81                 | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: 5                  
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: 94                 
Correct output: -64                 | Program output: 22                 
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 23                 
Correct output: -64                 | Program output: -13                
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: 26                 
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 61                 
Correct output: -58                 | Program output: 41                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -9                 
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 52                 
Correct output: -51                 | Program output: 4                  
Correct output: -84                 | Program output: 21                 
Correct output: -88                 | Program output: -74                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction -93} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_773} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_850} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 25} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction print_newline})
Lexicase best program: (in1 exec_do*times (integer_dup_times print_integer boolean_empty) exec_empty boolean_not integer_dup_times integer_swap in3 exec_eq integer_lt exec_noop integer_stackdepth boolean_and boolean_and exec_stackdepth boolean_yankdup integer_fromboolean boolean_frominteger exec_when (integer_pop in4 exec_while (integer_gt integer_empty boolean_pop integer_lte boolean_dup_items exec_eq) -93 integer_mult integer_stackdepth tag_exec_773 (in1 boolean_dup exec_do*times () integer_yank boolean_frominteger exec_when () exec_s_when_autoconstructing (boolean_dup_times boolean_not exec_k (integer_flush integer_rot exec_s (integer_div) (tagged_850 integer_gte integer_inc integer_shove) (boolean_xor boolean_empty exec_y_when_autoconstructing () boolean_or integer_dec print_newline integer_yankdup) exec_dup (integer_fromboolean) exec_do*while (exec_flush integer_dup exec_s (in1) () (boolean_pop integer_dup boolean_frominteger) 25 exec_eq exec_do*range (exec_k_when_autoconstructing () (boolean_flush exec_do*times (in2)) boolean_swap in4 print_newline))) ()) () ())))
Lexicase best errors: [1 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 104
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction -93} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_773} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_850} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 25} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction print_newline})
Zero cases best program: (in1 exec_do*times (integer_dup_times print_integer boolean_empty) exec_empty boolean_not integer_dup_times integer_swap in3 exec_eq integer_lt exec_noop integer_stackdepth boolean_and boolean_and exec_stackdepth boolean_yankdup integer_fromboolean boolean_frominteger exec_when (integer_pop in4 exec_while (integer_gt integer_empty boolean_pop integer_lte boolean_dup_items exec_eq) -93 integer_mult integer_stackdepth tag_exec_773 (in1 boolean_dup exec_do*times () integer_yank boolean_frominteger exec_when () exec_s_when_autoconstructing (boolean_dup_times boolean_not exec_k (integer_flush integer_rot exec_s (integer_div) (tagged_850 integer_gte integer_inc integer_shove) (boolean_xor boolean_empty exec_y_when_autoconstructing () boolean_or integer_dec print_newline integer_yankdup) exec_dup (integer_fromboolean) exec_do*while (exec_flush integer_dup exec_s (in1) () (boolean_pop integer_dup boolean_frominteger) 25 exec_eq exec_do*range (exec_k_when_autoconstructing () (boolean_flush exec_do*times (in2)) boolean_swap in4 print_newline))) ()) () ())))
Zero cases best errors: [1 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 104
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 78 78 285 285 238 238 78 79 89)
Population mean number of elite cases: 1.54
Count of perfect (error zero) individuals by case: (89 78 78 285 285 238 238 78 79 89)
Population mean number of perfect (error zero) cases: 1.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction -49} {:close 0, :instruction tag_boolean_914} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction -93} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_773} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction tagged_850} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction 25} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (integer_max integer_rot in1 print_integer boolean_empty integer_yank boolean_not in3 integer_gt integer_lt exec_yank boolean_and integer_mult -49 tag_boolean_914 exec_if (boolean_and exec_y (exec_stackdepth boolean_yankdup integer_fromboolean integer_pop exec_when () integer_min -93 exec_do*times (integer_stackdepth tag_exec_773 (boolean_dup integer_yank boolean_frominteger exec_when () exec_s_when_autoconstructing (boolean_dup_times exec_if (boolean_and integer_gte) (integer_div exec_eq) integer_yank) (exec_s (exec_when (integer_dec exec_eq) boolean_frominteger integer_div) (tagged_850 boolean_swap in4 exec_pop (boolean_yankdup boolean_or exec_k_when_autoconstructing (boolean_yank boolean_not integer_fromboolean) (exec_s (integer_gte integer_mod integer_swap in1) () (exec_k (boolean_not integer_dup in1 integer_dec exec_yankdup) (boolean_invert_first_then_and exec_do*count (integer_rot integer_yank exec_while (exec_do*while (25 exec_do*range (exec_k_when_autoconstructing () (integer_div) boolean_swap) integer_div) integer_mult boolean_flush integer_empty)) exec_do*times (in2)) boolean_frominteger) exec_do*count (in4 exec_y_when_autoconstructing ())))) ()) ())))) ())
Errors: [1 0 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 88
Size: 122
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 8.463
Median total errors in population: 8
Error averages by case: (0.911 0.922 0.922 0.715 0.715 0.762 0.762 0.922 0.921 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.036
Average program size in population (points): 76.54
Average percent parens in population: 0.290
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2022399
--- Timings ---
Current time: 1559593751024 milliseconds
Total Time:          11.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.1 seconds, 54.3%
Fitness Testing:      3.9 seconds, 35.0%
Report:               1.1 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: 45                 
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: 75                 
Correct output: -85                 | Program output: 27                 
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: 83                 
Correct output: -35                 | Program output: 73                 
Correct output: -64                 | Program output: 71                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: 54                 
Correct output: -81                 | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: 5                  
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: 94                 
Correct output: -64                 | Program output: 22                 
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 23                 
Correct output: -64                 | Program output: -13                
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: 26                 
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 61                 
Correct output: -58                 | Program output: 41                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -9                 
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 52                 
Correct output: -51                 | Program output: 4                  
Correct output: -84                 | Program output: 21                 
Correct output: -88                 | Program output: -74                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction 62} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_773} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_946} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty})
Lexicase best program: (in1 print_integer boolean_pop boolean_not boolean_xor exec_y_when_autoconstructing (integer_stackdepth boolean_and) boolean_and exec_stackdepth exec_dup_items integer_fromboolean exec_when (integer_pop exec_shove () boolean_pop exec_when () 62 boolean_rot boolean_shove integer_mult exec_dup (exec_swap (tag_exec_773 (exec_do*times () integer_yank exec_noop tagged_946 boolean_frominteger in1 exec_dup (exec_empty exec_s_when_autoconstructing (integer_swap boolean_not boolean_and integer_add) (integer_flush exec_s_when_autoconstructing (exec_s (exec_when (integer_rot exec_eq) integer_div) (integer_inc integer_shove) (in4 exec_pop (boolean_empty exec_y_when_autoconstructing () boolean_empty boolean_or print_boolean exec_k_when_autoconstructing (print_newline integer_yankdup) (boolean_eq) integer_fromboolean) exec_do*while (in1)) exec_k (integer_stackdepth boolean_pop integer_dup in1 exec_do*count (integer_div exec_do*range (exec_k_when_autoconstructing () (integer_div) integer_empty)) exec_do*times (in2)) (boolean_frominteger) integer_empty) () ()) ()))) ())))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 108
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction 62} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_773} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_946} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty})
Zero cases best program: (in1 print_integer boolean_pop boolean_not boolean_xor exec_y_when_autoconstructing (integer_stackdepth boolean_and) boolean_and exec_stackdepth exec_dup_items integer_fromboolean exec_when (integer_pop exec_shove () boolean_pop exec_when () 62 boolean_rot boolean_shove integer_mult exec_dup (exec_swap (tag_exec_773 (exec_do*times () integer_yank exec_noop tagged_946 boolean_frominteger in1 exec_dup (exec_empty exec_s_when_autoconstructing (integer_swap boolean_not boolean_and integer_add) (integer_flush exec_s_when_autoconstructing (exec_s (exec_when (integer_rot exec_eq) integer_div) (integer_inc integer_shove) (in4 exec_pop (boolean_empty exec_y_when_autoconstructing () boolean_empty boolean_or print_boolean exec_k_when_autoconstructing (print_newline integer_yankdup) (boolean_eq) integer_fromboolean) exec_do*while (in1)) exec_k (integer_stackdepth boolean_pop integer_dup in1 exec_do*count (integer_div exec_do*range (exec_k_when_autoconstructing () (integer_div) integer_empty)) exec_do*times (in2)) (boolean_frominteger) integer_empty) () ()) ()))) ())))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 108
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 120 406 117 279 119 122 279 689 280)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (279 120 406 117 279 119 122 279 689 280)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction -93} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_div} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_850} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_newline})
Best program: (in1 print_integer boolean_swap boolean_pop integer_yank boolean_not exec_do*while (integer_swap in3 boolean_frominteger exec_shove (integer_max integer_rot integer_stackdepth boolean_eq boolean_and) integer_rot boolean_and exec_stackdepth integer_fromboolean boolean_not in1) integer_lt exec_when (exec_when () -93 integer_empty integer_lt integer_mult integer_yank exec_do*times () integer_yank integer_dec boolean_frominteger exec_s_when_autoconstructing (boolean_dup_times integer_dup_items integer_swap boolean_pop boolean_not exec_when (exec_flush) exec_s_when_autoconstructing (integer_mult integer_flush integer_rot exec_s (exec_eq exec_when (exec_eq) boolean_empty integer_div) (integer_gt) (tagged_850 integer_dup_times integer_inc integer_shove) in4 exec_pop (integer_dup_items boolean_empty integer_stackdepth exec_k_when_autoconstructing (integer_mod exec_y_when_autoconstructing () exec_k_when_autoconstructing (exec_do*count (print_newline integer_fromboolean) print_newline exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_shove integer_gte integer_add) exec_pop (integer_swap exec_swap (integer_min) (exec_k (integer_dup exec_do*count (integer_pop exec_do*while (exec_k_when_autoconstructing () (boolean_stackdepth integer_empty)) boolean_not integer_flush integer_empty in4 print_newline)) ())))) ()) ())) () ()) () ()))
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 92
Size: 127
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 7.31
Median total errors in population: 7
Error averages by case: (0.721 0.88 0.594 0.883 0.721 0.881 0.878 0.721 0.311 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.372
Average program size in population (points): 85.117
Average percent parens in population: 0.279
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2429159
--- Timings ---
Current time: 1559593753517 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.7 seconds, 52.3%
Fitness Testing:      4.4 seconds, 29.9%
Report:               2.5 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: 27                 
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: 97                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: 72                 
Correct output: -23                 | Program output: 65                 
Correct output: -81                 | Program output: -64                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 100                
Correct output: -32                 | Program output: 67                 
Correct output: -64                 | Program output: -24                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -67                
Correct output: -70                 | Program output: 97                 
Correct output: -69                 | Program output: 41                 
Correct output: -64                 | Program output: 30                 
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: 31                 
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -11                
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 21                 
Correct output: -58                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -37                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction -93} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_shove})
Lexicase best program: (print_integer boolean_pop integer_yank exec_shove (in1) integer_dup_times exec_eq integer_swap in3 boolean_frominteger boolean_and integer_fromboolean exec_when (integer_pop in1 exec_when () -93 in2) integer_stackdepth exec_pop () boolean_empty boolean_xor tag_exec_773 (print_integer) boolean_dup exec_when () integer_lte boolean_empty exec_swap (exec_eq boolean_dup_times integer_swap boolean_not boolean_and exec_when (exec_eq) integer_gte exec_empty tagged_850 integer_shove) (in4 boolean_invert_first_then_and) exec_pop (boolean_empty boolean_or exec_shove (exec_stackdepth integer_yankdup) integer_fromboolean) exec_dup_times (exec_y_when_autoconstructing (exec_do*while (integer_swap in1)) exec_yank boolean_rot integer_dup in4 exec_do*count (exec_do*while (exec_do*range (exec_k_when_autoconstructing () (exec_when (integer_div) boolean_flush integer_empty)) exec_when (exec_do*times (in2)) integer_empty in4 exec_shove ()))))
Lexicase best errors: [0 1 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 96
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction -93} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_shove})
Zero cases best program: (print_integer boolean_pop integer_yank exec_shove (in1) integer_dup_times exec_eq integer_swap in3 boolean_frominteger boolean_and integer_fromboolean exec_when (integer_pop in1 exec_when () -93 in2) integer_stackdepth exec_pop () boolean_empty boolean_xor tag_exec_773 (print_integer) boolean_dup exec_when () integer_lte boolean_empty exec_swap (exec_eq boolean_dup_times integer_swap boolean_not boolean_and exec_when (exec_eq) integer_gte exec_empty tagged_850 integer_shove) (in4 boolean_invert_first_then_and) exec_pop (boolean_empty boolean_or exec_shove (exec_stackdepth integer_yankdup) integer_fromboolean) exec_dup_times (exec_y_when_autoconstructing (exec_do*while (integer_swap in1)) exec_yank boolean_rot integer_dup in4 exec_do*count (exec_do*while (exec_do*range (exec_k_when_autoconstructing () (exec_when (integer_div) boolean_flush integer_empty)) exec_when (exec_do*times (in2)) integer_empty in4 exec_shove ()))))
Zero cases best errors: [0 1 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 96
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 3 298 3 297 110 110 295 280 110)
Population mean number of elite cases: 1.78
Count of perfect (error zero) individuals by case: (279 3 298 3 297 110 110 295 280 110)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction -93} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_shove})
Best program: (print_integer boolean_pop integer_yank exec_shove (in1) integer_dup_times exec_eq integer_swap in3 boolean_frominteger boolean_and integer_fromboolean exec_when (integer_pop in1 exec_when () -93 in2) integer_stackdepth exec_pop () boolean_empty boolean_xor tag_exec_773 (print_integer) boolean_dup exec_when () integer_lte boolean_empty exec_swap (exec_eq boolean_dup_times integer_swap boolean_not boolean_and exec_when (exec_eq) integer_gte exec_empty tagged_850 integer_shove) (in4 boolean_invert_first_then_and) exec_pop (boolean_empty boolean_or exec_shove (exec_stackdepth integer_yankdup) integer_fromboolean) exec_dup_times (exec_y_when_autoconstructing (exec_do*while (integer_swap in1)) exec_yank boolean_rot integer_dup in4 exec_do*count (exec_do*while (exec_do*range (exec_k_when_autoconstructing () (exec_when (integer_div) boolean_flush integer_empty)) exec_when (exec_do*times (in2)) integer_empty in4 exec_shove ()))))
Errors: [0 1 0 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 72
Size: 96
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.215
Median total errors in population: 8
Error averages by case: (0.721 0.997 0.702 0.997 0.703 0.89 0.89 0.705 0.72 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.773
Average program size in population (points): 92.893
Average percent parens in population: 0.294
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2896440
--- Timings ---
Current time: 1559593755927 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 53.1%
Fitness Testing:      4.9 seconds, 29.0%
Report:               2.9 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: 20                 
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: 27                 
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: 97                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: 72                 
Correct output: -23                 | Program output: 65                 
Correct output: -81                 | Program output: -64                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 100                
Correct output: -32                 | Program output: 67                 
Correct output: -64                 | Program output: -24                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -67                
Correct output: -70                 | Program output: 97                 
Correct output: -69                 | Program output: 41                 
Correct output: -64                 | Program output: 30                 
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: 31                 
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -11                
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 21                 
Correct output: -58                 | Program output: 60                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -37                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_340} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_883} {:close 0, :instruction integer_dec} {:close 0, :instruction 67} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 2, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_shove})
Lexicase best program: (boolean_yank in1 in3 print_integer integer_lte boolean_pop integer_eq integer_add integer_pop exec_pop (integer_gte integer_max exec_dup_items integer_gt) integer_dec exec_while () boolean_shove boolean_shove exec_empty integer_min tag_boolean_340 integer_rot exec_s_when_autoconstructing (boolean_and exec_do*count (tagged_883 integer_dec 67 integer_yank exec_when () boolean_not integer_mult boolean_not exec_y () integer_dup_times boolean_dup_items exec_k_when_autoconstructing (in2 exec_s_when_autoconstructing (integer_yank integer_dup integer_fromboolean) (print_newline exec_k (exec_s_when_autoconstructing (boolean_dup integer_dup boolean_or boolean_invert_second_then_and) (exec_do*times () boolean_shove) (integer_fromboolean integer_gte in3 integer_pop) exec_k_when_autoconstructing (integer_mult) (integer_swap integer_mod) integer_dec print_newline) (exec_dup_items exec_do*times () integer_eq) boolean_dup_items) (integer_swap print_integer boolean_stackdepth integer_dup_items integer_gt in1 exec_y (exec_stackdepth integer_dup_times integer_gte integer_gt integer_min exec_dup_items exec_noop) integer_eq) boolean_yankdup integer_fromboolean boolean_xor) (exec_k (exec_when (in4 exec_if (exec_k (exec_shove (exec_empty integer_lt) boolean_frominteger boolean_invert_first_then_and integer_dec) (boolean_dup_items) integer_eq integer_mult exec_k_when_autoconstructing (boolean_and print_newline exec_eq) (exec_pop (print_boolean)) integer_sub) (integer_flush exec_yankdup integer_add integer_max boolean_shove))) ()))) () ())
Lexicase best errors: [1 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 144
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_340} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_883} {:close 0, :instruction integer_dec} {:close 0, :instruction 67} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 1, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 2, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_shove})
Zero cases best program: (boolean_yank in1 in3 print_integer integer_lte boolean_pop integer_eq integer_add integer_pop exec_pop (integer_gte integer_max exec_dup_items integer_gt) integer_dec exec_while () boolean_shove boolean_shove exec_empty integer_min tag_boolean_340 integer_rot exec_s_when_autoconstructing (boolean_and exec_do*count (tagged_883 integer_dec 67 integer_yank exec_when () boolean_not integer_mult boolean_not exec_y () integer_dup_times boolean_dup_items exec_k_when_autoconstructing (in2 exec_s_when_autoconstructing (integer_yank integer_dup integer_fromboolean) (print_newline exec_k (exec_s_when_autoconstructing (boolean_dup integer_dup boolean_or boolean_invert_second_then_and) (exec_do*times () boolean_shove) (integer_fromboolean integer_gte in3 integer_pop) exec_k_when_autoconstructing (integer_mult) (integer_swap integer_mod) integer_dec print_newline) (exec_dup_items exec_do*times () integer_eq) boolean_dup_items) (integer_swap print_integer boolean_stackdepth integer_dup_items integer_gt in1 exec_y (exec_stackdepth integer_dup_times integer_gte integer_gt integer_min exec_dup_items exec_noop) integer_eq) boolean_yankdup integer_fromboolean boolean_xor) (exec_k (exec_when (in4 exec_if (exec_k (exec_shove (exec_empty integer_lt) boolean_frominteger boolean_invert_first_then_and integer_dec) (boolean_dup_items) integer_eq integer_mult exec_k_when_autoconstructing (boolean_and print_newline exec_eq) (exec_pop (print_boolean)) integer_sub) (integer_flush exec_yankdup integer_add integer_max boolean_shove))) ()))) () ())
Zero cases best errors: [1 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 144
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 79 83 158 30 50 213 214 484 84)
Population mean number of elite cases: 1.55
Count of perfect (error zero) individuals by case: (158 79 83 158 30 50 213 214 484 84)
Population mean number of perfect (error zero) cases: 1.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction -93} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 2, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_shove})
Best program: (print_integer boolean_pop integer_yank exec_shove (in1) integer_dup_times exec_eq integer_swap in3 boolean_frominteger boolean_and integer_fromboolean exec_when (in1 exec_when () -93 in2) integer_stackdepth exec_pop () boolean_empty boolean_xor tag_exec_773 (print_integer) boolean_dup exec_when () integer_lte boolean_empty exec_swap (exec_eq boolean_dup_times integer_swap boolean_not boolean_and exec_when (exec_eq) integer_gte exec_empty tagged_850 integer_shove) (in4 boolean_invert_first_then_and) exec_pop (exec_shove (exec_stackdepth integer_pop integer_yankdup) integer_fromboolean) integer_eq exec_dup_times (exec_y_when_autoconstructing (integer_shove exec_do*while (integer_swap in1)) exec_yank boolean_rot integer_dup exec_do*while (exec_do*range (exec_k_when_autoconstructing () (integer_div) boolean_flush integer_empty)) exec_do*times (in2)) integer_empty in4 exec_shove ())
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 68
Size: 89
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 8.447
Median total errors in population: 9
Error averages by case: (0.842 0.921 0.917 0.842 0.97 0.95 0.787 0.786 0.516 0.916)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.818
Average program size in population (points): 92.775
Average percent parens in population: 0.275
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.191
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3596580
--- Timings ---
Current time: 1559593758494 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.3 seconds, 52.5%
Fitness Testing:      5.7 seconds, 28.9%
Report:               3.5 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_373} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -26} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction 12} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_items} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction 98} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction -43} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_dup_items in3 boolean_flush in4 boolean_and print_integer boolean_dup_items boolean_dup_items exec_rot (exec_yankdup exec_do*while (tag_integer_373 boolean_empty integer_div boolean_invert_second_then_and) integer_pop boolean_invert_first_then_and -26 integer_lte exec_k_when_autoconstructing (boolean_and exec_s (exec_k_when_autoconstructing (print_integer exec_noop boolean_dup boolean_yank) (12 boolean_invert_second_then_and integer_pop exec_y (exec_empty exec_do*while (exec_dup_items) print_integer)) integer_lte integer_flush boolean_shove) (boolean_xor exec_k (integer_gte) (exec_pop () exec_when (integer_fromboolean exec_yankdup integer_dup) integer_max 98 boolean_flush integer_mod integer_sub exec_empty boolean_or integer_lte exec_rot (integer_fromboolean integer_pop exec_k_when_autoconstructing () (integer_swap) integer_stackdepth boolean_dup_items integer_div boolean_dup_times exec_yank exec_pop (exec_s () (in2 integer_gt -43 integer_gt integer_lte exec_do*while (exec_eq integer_div) exec_y_when_autoconstructing (exec_s_when_autoconstructing () (exec_k_when_autoconstructing (boolean_rot exec_do*count (exec_do*range () boolean_stackdepth exec_when (exec_eq exec_while (integer_dup boolean_empty)) boolean_pop exec_yankdup integer_div exec_pop ()) boolean_and boolean_or integer_eq) ()) ())) ())) () ())) ()) ()) () ())
Lexicase best errors: [0 0 0 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 132
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_integer_373} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -26} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction 12} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_items} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction 98} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction -43} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_dup_items in3 boolean_flush in4 boolean_and print_integer boolean_dup_items boolean_dup_items exec_rot (exec_yankdup exec_do*while (tag_integer_373 boolean_empty integer_div boolean_invert_second_then_and) integer_pop boolean_invert_first_then_and -26 integer_lte exec_k_when_autoconstructing (boolean_and exec_s (exec_k_when_autoconstructing (print_integer exec_noop boolean_dup boolean_yank) (12 boolean_invert_second_then_and integer_pop exec_y (exec_empty exec_do*while (exec_dup_items) print_integer)) integer_lte integer_flush boolean_shove) (boolean_xor exec_k (integer_gte) (exec_pop () exec_when (integer_fromboolean exec_yankdup integer_dup) integer_max 98 boolean_flush integer_mod integer_sub exec_empty boolean_or integer_lte exec_rot (integer_fromboolean integer_pop exec_k_when_autoconstructing () (integer_swap) integer_stackdepth boolean_dup_items integer_div boolean_dup_times exec_yank exec_pop (exec_s () (in2 integer_gt -43 integer_gt integer_lte exec_do*while (exec_eq integer_div) exec_y_when_autoconstructing (exec_s_when_autoconstructing () (exec_k_when_autoconstructing (boolean_rot exec_do*count (exec_do*range () boolean_stackdepth exec_when (exec_eq exec_while (integer_dup boolean_empty)) boolean_pop exec_yankdup integer_div exec_pop ()) boolean_and boolean_or integer_eq) ()) ())) ())) () ())) ()) ()) () ())
Zero cases best errors: [0 0 0 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 132
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (59 59 60 74 208 208 58 140 59 143)
Population mean number of elite cases: 1.07
Count of perfect (error zero) individuals by case: (59 59 60 74 208 208 58 140 59 143)
Population mean number of perfect (error zero) cases: 1.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction -93} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction 56} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Best program: (print_integer integer_yank exec_shove (in1) exec_eq integer_swap print_newline in3 boolean_and integer_fromboolean exec_when (integer_pop in1 exec_when () boolean_xor -93 in2) integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (print_integer) exec_when () integer_lte boolean_empty exec_swap (exec_eq boolean_dup_times boolean_and integer_sub exec_when (exec_eq) integer_gte exec_empty integer_min tagged_850 integer_shove) (in4 boolean_invert_first_then_and) exec_pop (boolean_or exec_shove (56 exec_stackdepth integer_yankdup) integer_fromboolean) exec_dup_times (exec_y_when_autoconstructing (integer_swap exec_rot (integer_fromboolean in1) () (exec_yank boolean_rot integer_dup in4 exec_do*count (exec_do*range (boolean_swap exec_k_when_autoconstructing () (exec_when (integer_div) boolean_flush integer_empty)) exec_when (in2)) integer_empty boolean_flush exec_shove ()))))
Errors: [1 1 1 1 0 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 70
Size: 94
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 8.932
Median total errors in population: 10
Error averages by case: (0.941 0.941 0.94 0.926 0.792 0.792 0.942 0.86 0.941 0.857)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.916
Average program size in population (points): 101.515
Average percent parens in population: 0.265
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4429619
--- Timings ---
Current time: 1559593761116 milliseconds
Total Time:          22.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.5 seconds, 52.1%
Fitness Testing:      6.5 seconds, 29.2%
Report:               4.0 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction -93} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction 56} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Lexicase best program: (print_integer integer_yank exec_shove (in1) exec_eq integer_swap print_newline in3 boolean_and integer_fromboolean exec_when (integer_pop in1 exec_when () boolean_xor -93 in2) integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (print_integer) exec_when () integer_lte exec_swap (boolean_dup_times boolean_and integer_sub exec_when (exec_do*count ()) exec_eq) (integer_gte exec_empty integer_min tagged_850 integer_shove) boolean_invert_first_then_and exec_pop (boolean_or 56 exec_stackdepth boolean_or integer_fromboolean) exec_y_when_autoconstructing (integer_swap exec_swap (exec_rot (integer_fromboolean in1) () (exec_yank boolean_rot integer_dup exec_do*count (exec_s_when_autoconstructing (exec_do*range (boolean_swap boolean_rot) exec_when (integer_div) boolean_flush integer_empty) () (exec_when (integer_empty boolean_flush exec_shove ()))))) ()))
Lexicase best errors: [0 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 92
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction -93} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 2, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction 56} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Zero cases best program: (print_integer integer_yank exec_shove (in1) exec_eq integer_swap print_newline in3 boolean_and integer_fromboolean exec_when (integer_pop in1 exec_when () boolean_xor -93 in2) integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (print_integer) exec_when () integer_lte exec_swap (boolean_dup_times boolean_and integer_sub exec_when (exec_do*count ()) exec_eq) (integer_gte exec_empty integer_min tagged_850 integer_shove) boolean_invert_first_then_and exec_pop (boolean_or 56 exec_stackdepth boolean_or integer_fromboolean) exec_y_when_autoconstructing (integer_swap exec_swap (exec_rot (integer_fromboolean in1) () (exec_yank boolean_rot integer_dup exec_do*count (exec_s_when_autoconstructing (exec_do*range (boolean_swap boolean_rot) exec_when (integer_div) boolean_flush integer_empty) () (exec_when (integer_empty boolean_flush exec_shove ()))))) ()))
Zero cases best errors: [0 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 92
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (26 77 27 26 32 86 89 333 101 87)
Population mean number of elite cases: 0.88
Count of perfect (error zero) individuals by case: (26 77 27 26 32 86 89 333 101 87)
Population mean number of perfect (error zero) cases: 0.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction -93} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction 56} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 2, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Best program: (exec_shove (print_integer integer_yank exec_when (exec_shove (in1) exec_eq integer_swap print_newline)) in3 boolean_and integer_fromboolean exec_when (integer_pop in1 exec_when () boolean_xor boolean_pop -93 in2) integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (print_integer) exec_when () integer_lte boolean_empty boolean_rot exec_swap (exec_eq boolean_dup_times boolean_and integer_sub exec_when (exec_eq) integer_gte exec_empty integer_min tagged_850 integer_shove) (in4 boolean_invert_first_then_and) exec_pop (exec_shove (56 exec_stackdepth integer_yankdup) exec_dup_times (integer_swap exec_y_when_autoconstructing (integer_swap exec_rot (integer_fromboolean in1) () (exec_yank boolean_rot integer_dup in4 exec_do*count (exec_do*range (exec_k_when_autoconstructing () (exec_when (integer_div) boolean_flush integer_empty)) exec_when (in2)) integer_empty boolean_flush exec_shove ())))))
Errors: [0 0 0 0 0 1 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 72
Size: 98
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 9.116
Median total errors in population: 10
Error averages by case: (0.974 0.923 0.973 0.974 0.968 0.914 0.911 0.667 0.899 0.913)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.275
Average program size in population (points): 95.689
Average percent parens in population: 0.265
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5288875
--- Timings ---
Current time: 1559593763535 milliseconds
Total Time:          24.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.7 seconds, 51.4%
Fitness Testing:      7.3 seconds, 29.4%
Report:               4.6 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: 26                 
Correct output: -65                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: -70                
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: 73                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: 54                 
Correct output: -81                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: 67                 
Correct output: -64                 | Program output: -24                
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 23                 
Correct output: -64                 | Program output: -13                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: -11                
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 21                 
Correct output: -58                 | Program output: 41                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -37                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Lexicase best program: (print_integer integer_min integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_fromboolean exec_when (integer_gt) in1 exec_when () boolean_xor -93 exec_yankdup in2 integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (print_integer) boolean_rot exec_when () integer_lte integer_lt exec_swap (boolean_dup_times boolean_and integer_sub exec_when (exec_eq) integer_gte boolean_dup_times) (exec_empty integer_min print_integer) integer_shove boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_or boolean_yank exec_stackdepth boolean_or integer_fromboolean) exec_y_when_autoconstructing (integer_swap exec_swap (exec_rot (boolean_swap) (in1) () exec_yank boolean_rot integer_dup exec_do*count (exec_s_when_autoconstructing (exec_do*range (boolean_swap boolean_rot) exec_when (integer_div) integer_shove) (boolean_flush integer_empty) () exec_when (boolean_flush exec_shove ()))) ())) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 98
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Zero cases best program: (print_integer integer_min integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_fromboolean exec_when (integer_gt) in1 exec_when () boolean_xor -93 exec_yankdup in2 integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (print_integer) boolean_rot exec_when () integer_lte integer_lt exec_swap (boolean_dup_times boolean_and integer_sub exec_when (exec_eq) integer_gte boolean_dup_times) (exec_empty integer_min print_integer) integer_shove boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_or boolean_yank exec_stackdepth boolean_or integer_fromboolean) exec_y_when_autoconstructing (integer_swap exec_swap (exec_rot (boolean_swap) (in1) () exec_yank boolean_rot integer_dup exec_do*count (exec_s_when_autoconstructing (exec_do*range (boolean_swap boolean_rot) exec_when (integer_div) integer_shove) (boolean_flush integer_empty) () exec_when (boolean_flush exec_shove ()))) ())) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 98
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (151 22 123 129 57 356 19 17 18 18)
Population mean number of elite cases: 0.91
Count of perfect (error zero) individuals by case: (151 22 123 129 57 356 19 17 18 18)
Population mean number of perfect (error zero) cases: 0.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Best program: (print_integer integer_min integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_fromboolean exec_when (integer_gt) in1 exec_when () boolean_xor -93 exec_yankdup in2 integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (print_integer) boolean_rot exec_when () integer_lte integer_lt exec_swap (boolean_dup_times boolean_and integer_sub exec_when (exec_eq) integer_gte boolean_dup_times) (exec_empty integer_min print_integer) integer_shove boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_or boolean_yank exec_stackdepth boolean_or integer_fromboolean) exec_y_when_autoconstructing (integer_swap exec_swap (exec_rot (boolean_swap) (in1) () exec_yank boolean_rot integer_dup exec_do*count (exec_s_when_autoconstructing (exec_do*range (boolean_swap boolean_rot) exec_when (integer_div) integer_shove) (boolean_flush integer_empty) () exec_when (boolean_flush exec_shove ()))) ())) ())
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 71
Size: 98
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 9.09
Median total errors in population: 10
Error averages by case: (0.849 0.978 0.877 0.871 0.943 0.644 0.981 0.983 0.982 0.982)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.6
Average program size in population (points): 85.469
Average percent parens in population: 0.259
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5982558
--- Timings ---
Current time: 1559593765823 milliseconds
Total Time:          27.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.9 seconds, 51.7%
Fitness Testing:      8.0 seconds, 29.5%
Report:               5.0 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction 34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove})
Lexicase best program: (print_integer integer_min integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and 34 integer_fromboolean exec_when (integer_gt) in1 exec_when () boolean_xor -93 exec_yankdup in2 integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (exec_noop print_integer) boolean_rot exec_when () integer_lte boolean_pop integer_yankdup integer_lt exec_swap (boolean_dup_times boolean_and integer_sub exec_when (integer_pop exec_eq) integer_gte boolean_dup_times) (exec_empty integer_min print_integer) integer_shove boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_or boolean_yank exec_stackdepth boolean_or integer_fromboolean) exec_y_when_autoconstructing (integer_swap exec_swap (exec_rot (boolean_swap) (in1) () exec_yank exec_y_when_autoconstructing (boolean_rot integer_dup exec_do*count (exec_do*range (boolean_swap exec_when (integer_div) integer_shove) boolean_flush integer_empty)) exec_when (boolean_flush exec_shove () exec_shove ())) ())) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 102
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction 34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove})
Zero cases best program: (print_integer integer_min integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and 34 integer_fromboolean exec_when (integer_gt) in1 exec_when () boolean_xor -93 exec_yankdup in2 integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (exec_noop print_integer) boolean_rot exec_when () integer_lte boolean_pop integer_yankdup integer_lt exec_swap (boolean_dup_times boolean_and integer_sub exec_when (integer_pop exec_eq) integer_gte boolean_dup_times) (exec_empty integer_min print_integer) integer_shove boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_or boolean_yank exec_stackdepth boolean_or integer_fromboolean) exec_y_when_autoconstructing (integer_swap exec_swap (exec_rot (boolean_swap) (in1) () exec_yank exec_y_when_autoconstructing (boolean_rot integer_dup exec_do*count (exec_do*range (boolean_swap exec_when (integer_div) integer_shove) boolean_flush integer_empty)) exec_when (boolean_flush exec_shove () exec_shove ())) ())) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 102
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 134 135 35 130 31 137 35 140 40)
Population mean number of elite cases: 0.94
Count of perfect (error zero) individuals by case: (128 134 135 35 130 31 137 35 140 40)
Population mean number of perfect (error zero) cases: 0.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Best program: (print_integer integer_min integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_fromboolean exec_when (in1 exec_when () -93 exec_yankdup integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (print_integer) boolean_rot exec_when () integer_lte) integer_lt exec_swap (boolean_dup_times boolean_and integer_sub exec_when (exec_eq) integer_gte integer_inc boolean_dup_times) (exec_empty integer_min print_integer) boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_or boolean_yank exec_stackdepth boolean_or integer_fromboolean) exec_y_when_autoconstructing (integer_swap exec_rot (boolean_swap) (in1) () exec_yank boolean_rot integer_dup exec_do*count (exec_s_when_autoconstructing (exec_do*range (integer_yankdup boolean_swap boolean_rot) exec_when (integer_div) integer_shove) (integer_empty) () exec_when (boolean_flush exec_shove ())))) ())
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 67
Size: 92
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 9.055
Median total errors in population: 10
Error averages by case: (0.872 0.866 0.865 0.965 0.87 0.969 0.863 0.965 0.86 0.96)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.513
Average program size in population (points): 94.807
Average percent parens in population: 0.266
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.347
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6760985
--- Timings ---
Current time: 1559593768180 milliseconds
Total Time:          29.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.1 seconds, 51.6%
Fitness Testing:      8.7 seconds, 29.6%
Report:               5.4 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 286
Test mean error for best: 0.28600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16-93              
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 2143               
Correct output: 12                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 0                  
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64-49             
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 36                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -38                
Correct output: -84                 | Program output: -71-84             
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_978} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction 56} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 2, :instruction in2} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove})
Lexicase best program: (print_integer integer_yank exec_shove (in1) exec_eq integer_swap print_newline in3 integer_fromboolean exec_when (integer_pop in1 boolean_xor integer_stackdepth tag_boolean_978) exec_noop exec_k_when_autoconstructing (boolean_xor tag_exec_773 (print_integer) integer_lte) (exec_eq boolean_dup_times boolean_and in2 exec_empty integer_min tagged_850 integer_shove) boolean_stackdepth boolean_invert_first_then_and integer_lt 56 integer_yankdup exec_eq integer_fromboolean exec_y_when_autoconstructing (integer_swap boolean_and exec_rot (integer_fromboolean in1) () (exec_yank in4 boolean_pop exec_do*count (boolean_swap exec_k_when_autoconstructing () (exec_yankdup exec_when (boolean_flush exec_when (in2)) integer_inc) integer_empty exec_if (exec_while (exec_shove ())) ()))))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 77
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_978} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_850} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction 56} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 2, :instruction in2} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove})
Zero cases best program: (print_integer integer_yank exec_shove (in1) exec_eq integer_swap print_newline in3 integer_fromboolean exec_when (integer_pop in1 boolean_xor integer_stackdepth tag_boolean_978) exec_noop exec_k_when_autoconstructing (boolean_xor tag_exec_773 (print_integer) integer_lte) (exec_eq boolean_dup_times boolean_and in2 exec_empty integer_min tagged_850 integer_shove) boolean_stackdepth boolean_invert_first_then_and integer_lt 56 integer_yankdup exec_eq integer_fromboolean exec_y_when_autoconstructing (integer_swap boolean_and exec_rot (integer_fromboolean in1) () (exec_yank in4 boolean_pop exec_do*count (boolean_swap exec_k_when_autoconstructing () (exec_yankdup exec_when (boolean_flush exec_when (in2)) integer_inc) integer_empty exec_if (exec_while (exec_shove ())) ()))))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 77
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 214 82 324 195 64 215 47 66 57)
Population mean number of elite cases: 1.48
Count of perfect (error zero) individuals by case: (215 214 82 324 195 64 215 47 66 57)
Population mean number of perfect (error zero) cases: 1.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Best program: (print_integer integer_min integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_gt) in1 boolean_yank boolean_xor exec_dup_items -93 exec_yankdup in2 integer_stackdepth exec_noop exec_pop () boolean_xor tag_exec_773 (print_integer) boolean_rot exec_when () integer_lte integer_lt exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_empty integer_min print_integer) integer_shove boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_or boolean_yank integer_fromboolean) exec_y_when_autoconstructing (integer_add exec_swap (exec_rot (in4 boolean_swap) (in1) () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_div) integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))) ())) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 69
Size: 95
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 8.521
Median total errors in population: 10
Error averages by case: (0.785 0.786 0.918 0.676 0.805 0.936 0.785 0.953 0.934 0.943)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.898
Average program size in population (points): 94.398
Average percent parens in population: 0.269
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7516254
--- Timings ---
Current time: 1559593770753 milliseconds
Total Time:          31.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.3 seconds, 51.6%
Fitness Testing:      9.4 seconds, 29.7%
Report:               5.8 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 34                 
Correct output: 23                  | Program output: 39                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 72                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Lexicase best program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_gt) boolean_yank boolean_xor exec_dup_items -93 exec_yankdup in2 integer_stackdepth exec_pop () boolean_xor tag_exec_773 (print_integer) boolean_rot exec_when () integer_lt boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_empty integer_min print_integer) boolean_flush integer_shove boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_swap (exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_div) integer_dup) integer_shove) (boolean_flush integer_empty) () exec_when (boolean_flush exec_shove ())) ()))) ())
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 97
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Zero cases best program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_gt) boolean_yank boolean_xor exec_dup_items -93 exec_yankdup in2 integer_stackdepth exec_pop () boolean_xor tag_exec_773 (print_integer) boolean_rot exec_when () integer_lt boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_empty integer_min print_integer) boolean_flush integer_shove boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_swap (exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_div) integer_dup) integer_shove) (boolean_flush integer_empty) () exec_when (boolean_flush exec_shove ())) ()))) ())
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 97
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (159 61 111 56 165 168 94 267 82 108)
Population mean number of elite cases: 1.27
Count of perfect (error zero) individuals by case: (159 61 111 56 165 168 94 267 82 108)
Population mean number of perfect (error zero) cases: 1.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Best program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_gt) boolean_yank boolean_xor exec_dup_items -93 exec_yankdup in2 integer_stackdepth exec_pop () boolean_xor tag_exec_773 (print_integer) boolean_rot exec_when () integer_lt boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_empty integer_min print_integer) boolean_flush integer_shove boolean_invert_first_then_and exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_swap (exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_div) integer_dup) integer_shove) (boolean_flush integer_empty) () exec_when (boolean_flush exec_shove ())) ()))) ())
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 70
Size: 97
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 8.729
Median total errors in population: 10
Error averages by case: (0.841 0.939 0.889 0.944 0.835 0.832 0.906 0.733 0.918 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.338
Average program size in population (points): 87.241
Average percent parens in population: 0.261
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.4
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8438529
--- Timings ---
Current time: 1559593773220 milliseconds
Total Time:          34.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.6 seconds, 51.0%
Fitness Testing:     10.3 seconds, 29.8%
Report:               6.5 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 104
Test mean error for best: 0.10400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Lexicase best program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 96
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Zero cases best program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 96
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (147 53 144 63 286 94 213 81 44 92)
Population mean number of elite cases: 1.22
Count of perfect (error zero) individuals by case: (147 53 144 63 286 94 213 81 44 92)
Population mean number of perfect (error zero) cases: 1.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 2, :instruction print_newline} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -93} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_773} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove})
Best program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 69
Size: 96
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 8.783
Median total errors in population: 10
Error averages by case: (0.853 0.947 0.856 0.937 0.714 0.906 0.787 0.919 0.956 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.552
Average program size in population (points): 99.34
Average percent parens in population: 0.279
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.398
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9165277
--- Timings ---
Current time: 1559593775473 milliseconds
Total Time:          36.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 51.2%
Fitness Testing:     10.9 seconds, 29.8%
Report:               6.9 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 96


Auto-simplifying with starting size: 96
step: 0
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 500
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 1000
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 1500
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 2000
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 2500
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 3000
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 3500
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 4000
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 4500
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 5000
program: (integer_min integer_swap integer_yank in4 in1 exec_eq integer_swap print_newline in3 boolean_and integer_min integer_fromboolean exec_pop () exec_while (integer_stackdepth boolean_yank) boolean_xor exec_dup_items -93 exec_yankdup in2 exec_pop () boolean_xor tag_exec_773 (boolean_rot exec_when () integer_lt) boolean_pop exec_swap (boolean_dup_times boolean_and exec_yank exec_when (exec_eq) integer_gte boolean_dup_times) (exec_swap (exec_empty integer_min print_integer) (boolean_flush integer_shove) boolean_invert_first_then_and) exec_s_when_autoconstructing () (exec_pop (boolean_xor boolean_yank exec_y_when_autoconstructing (integer_add exec_rot (in4 boolean_swap) (boolean_invert_first_then_and in1) () exec_do*times () boolean_rot integer_dup exec_s_when_autoconstructing (exec_do*range (exec_do*range (integer_dup) boolean_dup integer_dec integer_shove) boolean_flush integer_empty) () (exec_when (boolean_flush exec_shove ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 104
Test mean error for best: 0.10400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
;;******************************
