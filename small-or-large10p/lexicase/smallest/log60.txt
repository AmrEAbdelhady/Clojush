Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[23 23 76 23] 23] [[-34 -34 -34 90] -34] [[13 13 88 13] 13] [[51 -32 51 51] -32] [[23 23 23 41] 23] [[-23 92 92 92] -23] [[-14 13 -14 -14] -14] [[96 -59 -59 -59] -59] [[82 82 82 -36] -36] [[80 -98 -98 -98] -98] [(34 34 34 34) 34] [(25 25 25 25) 25] [(-33 -33 -33 -33) -33] [(36 36 36 36) 36] [(50 50 50 50) 50] [(70 84 66 99) 66] [(97 53 60 90) 53] [(40 55 94 26) 26] [(5 41 25 75) 5] [(4 36 35 44) 4] [(38 35 47 67) 35] [(56 60 10 26) 10] [(76 80 21 12) 12] [(87 26 96 46) 26] [(90 69 97 66) 66] [(29 70 68 59) 29] [(91 81 5 82) 5] [(70 73 6 57) 6] [(93 1 91 3) 1] [(61 52 16 40) 16] [(8 89 72 52) 8] [(10 9 80 63) 9] [(3 71 83 48) 3] [(96 62 22 68) 22] [(29 16 69 81) 16] [(-60 -87 8 74) -87] [(4 -60 39 -2) -60] [(50 68 45 26) 26] [(44 -53 -22 -23) -53] [(92 58 -98 36) -98] [(-26 -34 -63 -7) -63] [(-84 53 54 -48) -84] [(-11 32 -12 47) -12] [(84 98 -100 80) -100] [(-52 -62 -77 -75) -77] [(-66 -1 -83 48) -83] [(33 98 75 90) 33] [(-81 24 41 -62) -81] [(12 -28 -100 -11) -100] [(52 -11 -35 -79) -79] [(95 -33 -53 99) -53] [(-96 14 -62 -7) -96] [(91 -50 46 42) -50] [(20 57 66 -74) -74] [(19 72 -63 43) -63] [(84 18 83 -40) -40] [(-3 -39 -50 -88) -88] [(-48 -78 -50 -60) -78] [(45 10 48 86) 10] [(-19 -96 64 -74) -96] [(96 -24 -32 34) -32] [(-5 -80 22 44) -80] [(-19 95 -11 73) -19] [(-26 98 -9 87) -26] [(20 62 34 -37) -37] [(-58 32 12 -47) -58] [(-21 -18 -2 -23) -23] [(10 -41 -72 -40) -72] [(-29 2 -4 41) -29] [(84 76 -64 35) -64] [(-22 74 -40 83) -40] [(-55 -59 -2 55) -59] [(-49 56 -70 -88) -88] [(65 33 77 -68) -68] [(92 63 3 -32) -32] [(69 -34 -64 -72) -72] [(-26 -3 -29 37) -29] [(57 78 -45 -89) -89] [(-71 -63 99 -64) -71] [(-77 -2 80 -56) -77] [(-44 98 93 -16) -44] [(-70 29 -26 -83) -83] [(14 94 -84 -61) -84] [(-82 -13 -52 -59) -82] [(33 -52 -92 78) -92] [(-64 -36 50 94) -64] [(-48 89 -95 -93) -95] [(-91 16 31 -100) -100] [(38 -61 44 -3) -61] [(-12 -75 -68 -36) -75] [(-14 65 -96 -81) -96] [(73 -29 99 43) -29] [(20 48 18 -69) -69] [(71 -50 84 -38) -50] [(-78 52 43 89) -78])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[23 23 76 23] 23]
Train Case:   6 | Input/Output: [[-34 -34 -34 90] -34]
Train Case:   7 | Input/Output: [[13 13 88 13] 13]
Train Case:   8 | Input/Output: [[51 -32 51 51] -32]
Train Case:   9 | Input/Output: [[23 23 23 41] 23]
Train Case:  10 | Input/Output: [[-23 92 92 92] -23]
Train Case:  11 | Input/Output: [[-14 13 -14 -14] -14]
Train Case:  12 | Input/Output: [[96 -59 -59 -59] -59]
Train Case:  13 | Input/Output: [[82 82 82 -36] -36]
Train Case:  14 | Input/Output: [[80 -98 -98 -98] -98]
Train Case:  15 | Input/Output: [(34 34 34 34) 34]
Train Case:  16 | Input/Output: [(25 25 25 25) 25]
Train Case:  17 | Input/Output: [(-33 -33 -33 -33) -33]
Train Case:  18 | Input/Output: [(36 36 36 36) 36]
Train Case:  19 | Input/Output: [(50 50 50 50) 50]
Train Case:  20 | Input/Output: [(70 84 66 99) 66]
Train Case:  21 | Input/Output: [(97 53 60 90) 53]
Train Case:  22 | Input/Output: [(40 55 94 26) 26]
Train Case:  23 | Input/Output: [(5 41 25 75) 5]
Train Case:  24 | Input/Output: [(4 36 35 44) 4]
Train Case:  25 | Input/Output: [(38 35 47 67) 35]
Train Case:  26 | Input/Output: [(56 60 10 26) 10]
Train Case:  27 | Input/Output: [(76 80 21 12) 12]
Train Case:  28 | Input/Output: [(87 26 96 46) 26]
Train Case:  29 | Input/Output: [(90 69 97 66) 66]
Train Case:  30 | Input/Output: [(29 70 68 59) 29]
Train Case:  31 | Input/Output: [(91 81 5 82) 5]
Train Case:  32 | Input/Output: [(70 73 6 57) 6]
Train Case:  33 | Input/Output: [(93 1 91 3) 1]
Train Case:  34 | Input/Output: [(61 52 16 40) 16]
Train Case:  35 | Input/Output: [(8 89 72 52) 8]
Train Case:  36 | Input/Output: [(10 9 80 63) 9]
Train Case:  37 | Input/Output: [(3 71 83 48) 3]
Train Case:  38 | Input/Output: [(96 62 22 68) 22]
Train Case:  39 | Input/Output: [(29 16 69 81) 16]
Train Case:  40 | Input/Output: [(-60 -87 8 74) -87]
Train Case:  41 | Input/Output: [(4 -60 39 -2) -60]
Train Case:  42 | Input/Output: [(50 68 45 26) 26]
Train Case:  43 | Input/Output: [(44 -53 -22 -23) -53]
Train Case:  44 | Input/Output: [(92 58 -98 36) -98]
Train Case:  45 | Input/Output: [(-26 -34 -63 -7) -63]
Train Case:  46 | Input/Output: [(-84 53 54 -48) -84]
Train Case:  47 | Input/Output: [(-11 32 -12 47) -12]
Train Case:  48 | Input/Output: [(84 98 -100 80) -100]
Train Case:  49 | Input/Output: [(-52 -62 -77 -75) -77]
Train Case:  50 | Input/Output: [(-66 -1 -83 48) -83]
Train Case:  51 | Input/Output: [(33 98 75 90) 33]
Train Case:  52 | Input/Output: [(-81 24 41 -62) -81]
Train Case:  53 | Input/Output: [(12 -28 -100 -11) -100]
Train Case:  54 | Input/Output: [(52 -11 -35 -79) -79]
Train Case:  55 | Input/Output: [(95 -33 -53 99) -53]
Train Case:  56 | Input/Output: [(-96 14 -62 -7) -96]
Train Case:  57 | Input/Output: [(91 -50 46 42) -50]
Train Case:  58 | Input/Output: [(20 57 66 -74) -74]
Train Case:  59 | Input/Output: [(19 72 -63 43) -63]
Train Case:  60 | Input/Output: [(84 18 83 -40) -40]
Train Case:  61 | Input/Output: [(-3 -39 -50 -88) -88]
Train Case:  62 | Input/Output: [(-48 -78 -50 -60) -78]
Train Case:  63 | Input/Output: [(45 10 48 86) 10]
Train Case:  64 | Input/Output: [(-19 -96 64 -74) -96]
Train Case:  65 | Input/Output: [(96 -24 -32 34) -32]
Train Case:  66 | Input/Output: [(-5 -80 22 44) -80]
Train Case:  67 | Input/Output: [(-19 95 -11 73) -19]
Train Case:  68 | Input/Output: [(-26 98 -9 87) -26]
Train Case:  69 | Input/Output: [(20 62 34 -37) -37]
Train Case:  70 | Input/Output: [(-58 32 12 -47) -58]
Train Case:  71 | Input/Output: [(-21 -18 -2 -23) -23]
Train Case:  72 | Input/Output: [(10 -41 -72 -40) -72]
Train Case:  73 | Input/Output: [(-29 2 -4 41) -29]
Train Case:  74 | Input/Output: [(84 76 -64 35) -64]
Train Case:  75 | Input/Output: [(-22 74 -40 83) -40]
Train Case:  76 | Input/Output: [(-55 -59 -2 55) -59]
Train Case:  77 | Input/Output: [(-49 56 -70 -88) -88]
Train Case:  78 | Input/Output: [(65 33 77 -68) -68]
Train Case:  79 | Input/Output: [(92 63 3 -32) -32]
Train Case:  80 | Input/Output: [(69 -34 -64 -72) -72]
Train Case:  81 | Input/Output: [(-26 -3 -29 37) -29]
Train Case:  82 | Input/Output: [(57 78 -45 -89) -89]
Train Case:  83 | Input/Output: [(-71 -63 99 -64) -71]
Train Case:  84 | Input/Output: [(-77 -2 80 -56) -77]
Train Case:  85 | Input/Output: [(-44 98 93 -16) -44]
Train Case:  86 | Input/Output: [(-70 29 -26 -83) -83]
Train Case:  87 | Input/Output: [(14 94 -84 -61) -84]
Train Case:  88 | Input/Output: [(-82 -13 -52 -59) -82]
Train Case:  89 | Input/Output: [(33 -52 -92 78) -92]
Train Case:  90 | Input/Output: [(-64 -36 50 94) -64]
Train Case:  91 | Input/Output: [(-48 89 -95 -93) -95]
Train Case:  92 | Input/Output: [(-91 16 31 -100) -100]
Train Case:  93 | Input/Output: [(38 -61 44 -3) -61]
Train Case:  94 | Input/Output: [(-12 -75 -68 -36) -75]
Train Case:  95 | Input/Output: [(-14 65 -96 -81) -96]
Train Case:  96 | Input/Output: [(73 -29 99 43) -29]
Train Case:  97 | Input/Output: [(20 48 18 -69) -69]
Train Case:  98 | Input/Output: [(71 -50 84 -38) -50]
Train Case:  99 | Input/Output: [(-78 52 43 89) -78]
Test Case:   0 | Input/Output: [[80 80 34 80] 34]
Test Case:   1 | Input/Output: [[9 -31 -31 -31] -31]
Test Case:   2 | Input/Output: [[44 44 44 -64] -64]
Test Case:   3 | Input/Output: [[81 81 81 82] 81]
Test Case:   4 | Input/Output: [[-76 -76 -76 -24] -76]
Test Case:   5 | Input/Output: [[56 56 -75 56] -75]
Test Case:   6 | Input/Output: [[73 73 14 73] 14]
Test Case:   7 | Input/Output: [[39 39 65 39] 39]
Test Case:   8 | Input/Output: [[-100 -65 -65 -65] -100]
Test Case:   9 | Input/Output: [[35 -54 -54 -54] -54]
Test Case:  10 | Input/Output: [[-54 -36 -54 -54] -54]
Test Case:  11 | Input/Output: [[-68 95 -68 -68] -68]
Test Case:  12 | Input/Output: [[82 80 82 82] 80]
Test Case:  13 | Input/Output: [[-25 80 -25 -25] -25]
Test Case:  14 | Input/Output: [[61 72 61 61] 61]
Test Case:  15 | Input/Output: [[-45 90 -45 -45] -45]
Test Case:  16 | Input/Output: [[-35 -35 47 -35] -35]
Test Case:  17 | Input/Output: [[-87 -77 -77 -77] -87]
Test Case:  18 | Input/Output: [[35 78 78 78] 35]
Test Case:  19 | Input/Output: [[12 43 43 43] 12]
Test Case:  20 | Input/Output: [[48 59 59 59] 48]
Test Case:  21 | Input/Output: [[80 80 -13 80] -13]
Test Case:  22 | Input/Output: [[-78 -78 -43 -78] -78]
Test Case:  23 | Input/Output: [[-50 -50 -50 -99] -99]
Test Case:  24 | Input/Output: [[-43 -43 71 -43] -43]
Test Case:  25 | Input/Output: [[-11 37 37 37] -11]
Test Case:  26 | Input/Output: [[-35 -18 -35 -35] -35]
Test Case:  27 | Input/Output: [[-61 -58 -58 -58] -61]
Test Case:  28 | Input/Output: [[30 30 30 66] 30]
Test Case:  29 | Input/Output: [[16 16 16 41] 16]
Test Case:  30 | Input/Output: [[53 76 76 76] 53]
Test Case:  31 | Input/Output: [[-33 -33 -33 -34] -34]
Test Case:  32 | Input/Output: [[-79 -79 -79 16] -79]
Test Case:  33 | Input/Output: [[-51 -25 -25 -25] -51]
Test Case:  34 | Input/Output: [[-50 -44 -44 -44] -50]
Test Case:  35 | Input/Output: [[-54 -54 86 -54] -54]
Test Case:  36 | Input/Output: [[-16 -16 -16 41] -16]
Test Case:  37 | Input/Output: [[59 59 -10 59] -10]
Test Case:  38 | Input/Output: [[-53 -2 -53 -53] -53]
Test Case:  39 | Input/Output: [[17 17 -93 17] -93]
Test Case:  40 | Input/Output: [[-20 -20 -20 -44] -44]
Test Case:  41 | Input/Output: [[88 73 73 73] 73]
Test Case:  42 | Input/Output: [[37 -59 -59 -59] -59]
Test Case:  43 | Input/Output: [[-15 0 -15 -15] -15]
Test Case:  44 | Input/Output: [[-82 -82 -82 40] -82]
Test Case:  45 | Input/Output: [[88 17 88 88] 17]
Test Case:  46 | Input/Output: [[66 97 66 66] 66]
Test Case:  47 | Input/Output: [[-62 -62 -62 77] -62]
Test Case:  48 | Input/Output: [[37 99 99 99] 37]
Test Case:  49 | Input/Output: [[82 -71 -71 -71] -71]
Test Case:  50 | Input/Output: [[38 -23 -23 -23] -23]
Test Case:  51 | Input/Output: [[18 -67 18 18] -67]
Test Case:  52 | Input/Output: [[7 7 7 88] 7]
Test Case:  53 | Input/Output: [[68 68 -17 68] -17]
Test Case:  54 | Input/Output: [[-2 -2 -2 97] -2]
Test Case:  55 | Input/Output: [[-14 -97 -14 -14] -97]
Test Case:  56 | Input/Output: [[-94 57 -94 -94] -94]
Test Case:  57 | Input/Output: [[61 61 -56 61] -56]
Test Case:  58 | Input/Output: [[-8 46 -8 -8] -8]
Test Case:  59 | Input/Output: [[-61 -63 -61 -61] -63]
Test Case:  60 | Input/Output: [[-62 -89 -89 -89] -89]
Test Case:  61 | Input/Output: [[-12 3 -12 -12] -12]
Test Case:  62 | Input/Output: [[39 39 39 -93] -93]
Test Case:  63 | Input/Output: [[88 -23 88 88] -23]
Test Case:  64 | Input/Output: [[-9 -9 -94 -9] -94]
Test Case:  65 | Input/Output: [[-24 -55 -55 -55] -55]
Test Case:  66 | Input/Output: [[-68 -68 -68 5] -68]
Test Case:  67 | Input/Output: [[-37 -37 -37 93] -37]
Test Case:  68 | Input/Output: [[1 2 1 1] 1]
Test Case:  69 | Input/Output: [[-44 -44 -44 32] -44]
Test Case:  70 | Input/Output: [[14 14 -16 14] -16]
Test Case:  71 | Input/Output: [[12 31 31 31] 12]
Test Case:  72 | Input/Output: [[-89 93 -89 -89] -89]
Test Case:  73 | Input/Output: [[-77 -77 6 -77] -77]
Test Case:  74 | Input/Output: [[-71 28 28 28] -71]
Test Case:  75 | Input/Output: [[-80 -80 -80 -100] -100]
Test Case:  76 | Input/Output: [[36 36 36 16] 16]
Test Case:  77 | Input/Output: [[7 -65 -65 -65] -65]
Test Case:  78 | Input/Output: [[12 12 12 30] 12]
Test Case:  79 | Input/Output: [[89 76 76 76] 76]
Test Case:  80 | Input/Output: [[-41 -41 -5 -41] -41]
Test Case:  81 | Input/Output: [[-34 -34 38 -34] -34]
Test Case:  82 | Input/Output: [[-44 -44 -72 -44] -72]
Test Case:  83 | Input/Output: [[-85 -85 -85 -68] -85]
Test Case:  84 | Input/Output: [[2 -33 -33 -33] -33]
Test Case:  85 | Input/Output: [[-84 -84 13 -84] -84]
Test Case:  86 | Input/Output: [[91 91 91 48] 48]
Test Case:  87 | Input/Output: [[9 -30 9 9] -30]
Test Case:  88 | Input/Output: [[-1 -1 -1 71] -1]
Test Case:  89 | Input/Output: [[-70 61 61 61] -70]
Test Case:  90 | Input/Output: [[28 28 28 65] 28]
Test Case:  91 | Input/Output: [[90 90 90 18] 18]
Test Case:  92 | Input/Output: [[-27 -27 -36 -27] -36]
Test Case:  93 | Input/Output: [[0 0 -64 0] -64]
Test Case:  94 | Input/Output: [[32 32 24 32] 24]
Test Case:  95 | Input/Output: [[38 38 62 38] 38]
Test Case:  96 | Input/Output: [[-35 -80 -35 -35] -80]
Test Case:  97 | Input/Output: [[-31 -31 -31 31] -31]
Test Case:  98 | Input/Output: [[-41 -22 -41 -41] -41]
Test Case:  99 | Input/Output: [[4 -1 4 4] -1]
Test Case: 100 | Input/Output: [(27 27 27 27) 27]
Test Case: 101 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 102 | Input/Output: [(2 2 2 2) 2]
Test Case: 103 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 104 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 105 | Input/Output: [(57 57 57 57) 57]
Test Case: 106 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 107 | Input/Output: [(17 17 17 17) 17]
Test Case: 108 | Input/Output: [(54 54 54 54) 54]
Test Case: 109 | Input/Output: [(66 66 66 66) 66]
Test Case: 110 | Input/Output: [(87 87 87 87) 87]
Test Case: 111 | Input/Output: [(34 34 34 34) 34]
Test Case: 112 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 113 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 114 | Input/Output: [(62 62 62 62) 62]
Test Case: 115 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 116 | Input/Output: [(94 94 94 94) 94]
Test Case: 117 | Input/Output: [(3 3 3 3) 3]
Test Case: 118 | Input/Output: [(17 17 17 17) 17]
Test Case: 119 | Input/Output: [(27 27 27 27) 27]
Test Case: 120 | Input/Output: [(23 23 23 23) 23]
Test Case: 121 | Input/Output: [(6 6 6 6) 6]
Test Case: 122 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 123 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 124 | Input/Output: [(92 92 92 92) 92]
Test Case: 125 | Input/Output: [(12 12 12 12) 12]
Test Case: 126 | Input/Output: [(18 18 18 18) 18]
Test Case: 127 | Input/Output: [(89 89 89 89) 89]
Test Case: 128 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 129 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 130 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 131 | Input/Output: [(38 38 38 38) 38]
Test Case: 132 | Input/Output: [(1 1 1 1) 1]
Test Case: 133 | Input/Output: [(40 40 40 40) 40]
Test Case: 134 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 135 | Input/Output: [(90 90 90 90) 90]
Test Case: 136 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 137 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 138 | Input/Output: [(53 53 53 53) 53]
Test Case: 139 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 140 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 141 | Input/Output: [(87 87 87 87) 87]
Test Case: 142 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 143 | Input/Output: [(69 69 69 69) 69]
Test Case: 144 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 145 | Input/Output: [(50 50 50 50) 50]
Test Case: 146 | Input/Output: [(98 98 98 98) 98]
Test Case: 147 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 148 | Input/Output: [(52 52 52 52) 52]
Test Case: 149 | Input/Output: [(63 63 63 63) 63]
Test Case: 150 | Input/Output: [(15 15 15 15) 15]
Test Case: 151 | Input/Output: [(61 61 61 61) 61]
Test Case: 152 | Input/Output: [(29 29 29 29) 29]
Test Case: 153 | Input/Output: [(88 88 88 88) 88]
Test Case: 154 | Input/Output: [(69 69 69 69) 69]
Test Case: 155 | Input/Output: [(94 94 94 94) 94]
Test Case: 156 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 157 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 158 | Input/Output: [(69 69 69 69) 69]
Test Case: 159 | Input/Output: [(67 67 67 67) 67]
Test Case: 160 | Input/Output: [(67 67 67 67) 67]
Test Case: 161 | Input/Output: [(34 34 34 34) 34]
Test Case: 162 | Input/Output: [(85 85 85 85) 85]
Test Case: 163 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 164 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 165 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 166 | Input/Output: [(99 99 99 99) 99]
Test Case: 167 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 168 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 169 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 170 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 171 | Input/Output: [(50 50 50 50) 50]
Test Case: 172 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 173 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 174 | Input/Output: [(0 0 0 0) 0]
Test Case: 175 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 176 | Input/Output: [(40 40 40 40) 40]
Test Case: 177 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 178 | Input/Output: [(7 7 7 7) 7]
Test Case: 179 | Input/Output: [(36 36 36 36) 36]
Test Case: 180 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 181 | Input/Output: [(75 75 75 75) 75]
Test Case: 182 | Input/Output: [(17 17 17 17) 17]
Test Case: 183 | Input/Output: [(42 42 42 42) 42]
Test Case: 184 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 185 | Input/Output: [(89 89 89 89) 89]
Test Case: 186 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 187 | Input/Output: [(0 0 0 0) 0]
Test Case: 188 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 189 | Input/Output: [(86 86 86 86) 86]
Test Case: 190 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 191 | Input/Output: [(18 18 18 18) 18]
Test Case: 192 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 193 | Input/Output: [(4 4 4 4) 4]
Test Case: 194 | Input/Output: [(72 72 72 72) 72]
Test Case: 195 | Input/Output: [(83 83 83 83) 83]
Test Case: 196 | Input/Output: [(5 5 5 5) 5]
Test Case: 197 | Input/Output: [(40 40 40 40) 40]
Test Case: 198 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 199 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 200 | Input/Output: [(46 70 35 48) 35]
Test Case: 201 | Input/Output: [(24 53 1 28) 1]
Test Case: 202 | Input/Output: [(48 90 17 31) 17]
Test Case: 203 | Input/Output: [(92 11 87 39) 11]
Test Case: 204 | Input/Output: [(9 80 26 1) 1]
Test Case: 205 | Input/Output: [(36 51 52 83) 36]
Test Case: 206 | Input/Output: [(8 14 13 1) 1]
Test Case: 207 | Input/Output: [(94 28 51 38) 28]
Test Case: 208 | Input/Output: [(58 4 81 9) 4]
Test Case: 209 | Input/Output: [(38 2 98 8) 2]
Test Case: 210 | Input/Output: [(17 40 7 91) 7]
Test Case: 211 | Input/Output: [(81 2 72 52) 2]
Test Case: 212 | Input/Output: [(41 42 28 49) 28]
Test Case: 213 | Input/Output: [(99 51 15 92) 15]
Test Case: 214 | Input/Output: [(8 63 1 4) 1]
Test Case: 215 | Input/Output: [(81 82 61 1) 1]
Test Case: 216 | Input/Output: [(93 68 84 1) 1]
Test Case: 217 | Input/Output: [(70 50 64 77) 50]
Test Case: 218 | Input/Output: [(63 98 49 4) 4]
Test Case: 219 | Input/Output: [(1 59 71 12) 1]
Test Case: 220 | Input/Output: [(3 8 11 20) 3]
Test Case: 221 | Input/Output: [(65 86 25 99) 25]
Test Case: 222 | Input/Output: [(49 98 78 38) 38]
Test Case: 223 | Input/Output: [(40 65 48 57) 40]
Test Case: 224 | Input/Output: [(34 11 1 66) 1]
Test Case: 225 | Input/Output: [(35 20 14 38) 14]
Test Case: 226 | Input/Output: [(8 18 8 85) 8]
Test Case: 227 | Input/Output: [(51 69 19 87) 19]
Test Case: 228 | Input/Output: [(12 37 25 97) 12]
Test Case: 229 | Input/Output: [(0 97 90 38) 0]
Test Case: 230 | Input/Output: [(37 35 80 7) 7]
Test Case: 231 | Input/Output: [(95 33 33 61) 33]
Test Case: 232 | Input/Output: [(97 40 68 81) 40]
Test Case: 233 | Input/Output: [(67 68 58 32) 32]
Test Case: 234 | Input/Output: [(14 10 78 46) 10]
Test Case: 235 | Input/Output: [(94 66 82 38) 38]
Test Case: 236 | Input/Output: [(80 55 40 16) 16]
Test Case: 237 | Input/Output: [(67 11 100 60) 11]
Test Case: 238 | Input/Output: [(32 20 90 1) 1]
Test Case: 239 | Input/Output: [(41 95 48 68) 41]
Test Case: 240 | Input/Output: [(35 28 13 76) 13]
Test Case: 241 | Input/Output: [(49 99 62 72) 49]
Test Case: 242 | Input/Output: [(13 98 25 41) 13]
Test Case: 243 | Input/Output: [(25 92 59 80) 25]
Test Case: 244 | Input/Output: [(84 39 67 47) 39]
Test Case: 245 | Input/Output: [(64 95 4 20) 4]
Test Case: 246 | Input/Output: [(33 91 49 92) 33]
Test Case: 247 | Input/Output: [(92 17 24 50) 17]
Test Case: 248 | Input/Output: [(12 8 32 71) 8]
Test Case: 249 | Input/Output: [(70 48 80 12) 12]
Test Case: 250 | Input/Output: [(94 0 5 55) 0]
Test Case: 251 | Input/Output: [(15 72 9 35) 9]
Test Case: 252 | Input/Output: [(89 98 22 22) 22]
Test Case: 253 | Input/Output: [(100 92 76 67) 67]
Test Case: 254 | Input/Output: [(15 79 6 82) 6]
Test Case: 255 | Input/Output: [(10 73 69 72) 10]
Test Case: 256 | Input/Output: [(37 76 20 41) 20]
Test Case: 257 | Input/Output: [(65 56 45 2) 2]
Test Case: 258 | Input/Output: [(64 89 63 38) 38]
Test Case: 259 | Input/Output: [(2 1 33 18) 1]
Test Case: 260 | Input/Output: [(55 40 43 86) 40]
Test Case: 261 | Input/Output: [(81 40 7 1) 1]
Test Case: 262 | Input/Output: [(6 60 38 34) 6]
Test Case: 263 | Input/Output: [(16 68 32 46) 16]
Test Case: 264 | Input/Output: [(56 23 90 74) 23]
Test Case: 265 | Input/Output: [(37 63 48 18) 18]
Test Case: 266 | Input/Output: [(57 90 24 62) 24]
Test Case: 267 | Input/Output: [(52 32 85 66) 32]
Test Case: 268 | Input/Output: [(66 92 24 54) 24]
Test Case: 269 | Input/Output: [(7 93 17 93) 7]
Test Case: 270 | Input/Output: [(85 59 81 65) 59]
Test Case: 271 | Input/Output: [(81 22 75 63) 22]
Test Case: 272 | Input/Output: [(15 65 64 99) 15]
Test Case: 273 | Input/Output: [(58 96 29 2) 2]
Test Case: 274 | Input/Output: [(10 42 15 94) 10]
Test Case: 275 | Input/Output: [(93 57 79 70) 57]
Test Case: 276 | Input/Output: [(78 36 90 73) 36]
Test Case: 277 | Input/Output: [(49 47 86 23) 23]
Test Case: 278 | Input/Output: [(40 62 60 86) 40]
Test Case: 279 | Input/Output: [(13 14 92 23) 13]
Test Case: 280 | Input/Output: [(9 100 45 41) 9]
Test Case: 281 | Input/Output: [(61 39 70 1) 1]
Test Case: 282 | Input/Output: [(78 58 96 4) 4]
Test Case: 283 | Input/Output: [(68 96 29 53) 29]
Test Case: 284 | Input/Output: [(32 11 7 65) 7]
Test Case: 285 | Input/Output: [(41 85 52 85) 41]
Test Case: 286 | Input/Output: [(31 66 84 36) 31]
Test Case: 287 | Input/Output: [(14 95 58 57) 14]
Test Case: 288 | Input/Output: [(81 27 90 46) 27]
Test Case: 289 | Input/Output: [(81 87 45 39) 39]
Test Case: 290 | Input/Output: [(77 17 70 73) 17]
Test Case: 291 | Input/Output: [(53 18 0 34) 0]
Test Case: 292 | Input/Output: [(100 67 73 70) 67]
Test Case: 293 | Input/Output: [(3 93 75 84) 3]
Test Case: 294 | Input/Output: [(65 76 18 14) 14]
Test Case: 295 | Input/Output: [(34 5 63 75) 5]
Test Case: 296 | Input/Output: [(99 90 66 30) 30]
Test Case: 297 | Input/Output: [(33 89 9 93) 9]
Test Case: 298 | Input/Output: [(31 40 20 97) 20]
Test Case: 299 | Input/Output: [(40 64 64 58) 40]
Test Case: 300 | Input/Output: [(5 47 0 55) 0]
Test Case: 301 | Input/Output: [(22 96 32 25) 22]
Test Case: 302 | Input/Output: [(33 48 13 19) 13]
Test Case: 303 | Input/Output: [(61 96 41 57) 41]
Test Case: 304 | Input/Output: [(97 21 55 47) 21]
Test Case: 305 | Input/Output: [(20 48 53 94) 20]
Test Case: 306 | Input/Output: [(6 6 60 36) 6]
Test Case: 307 | Input/Output: [(29 52 22 11) 11]
Test Case: 308 | Input/Output: [(38 57 44 80) 38]
Test Case: 309 | Input/Output: [(28 62 24 54) 24]
Test Case: 310 | Input/Output: [(76 7 59 24) 7]
Test Case: 311 | Input/Output: [(35 14 95 78) 14]
Test Case: 312 | Input/Output: [(32 82 45 37) 32]
Test Case: 313 | Input/Output: [(9 26 58 79) 9]
Test Case: 314 | Input/Output: [(60 28 47 94) 28]
Test Case: 315 | Input/Output: [(79 53 30 66) 30]
Test Case: 316 | Input/Output: [(72 60 31 60) 31]
Test Case: 317 | Input/Output: [(41 61 37 84) 37]
Test Case: 318 | Input/Output: [(80 0 68 60) 0]
Test Case: 319 | Input/Output: [(32 54 12 85) 12]
Test Case: 320 | Input/Output: [(55 37 79 38) 37]
Test Case: 321 | Input/Output: [(21 53 23 76) 21]
Test Case: 322 | Input/Output: [(65 85 0 51) 0]
Test Case: 323 | Input/Output: [(76 39 53 52) 39]
Test Case: 324 | Input/Output: [(22 27 88 35) 22]
Test Case: 325 | Input/Output: [(92 9 74 0) 0]
Test Case: 326 | Input/Output: [(9 30 83 96) 9]
Test Case: 327 | Input/Output: [(38 39 88 80) 38]
Test Case: 328 | Input/Output: [(72 66 7 32) 7]
Test Case: 329 | Input/Output: [(7 44 92 36) 7]
Test Case: 330 | Input/Output: [(88 4 40 50) 4]
Test Case: 331 | Input/Output: [(1 94 50 40) 1]
Test Case: 332 | Input/Output: [(76 89 30 57) 30]
Test Case: 333 | Input/Output: [(12 42 1 44) 1]
Test Case: 334 | Input/Output: [(77 4 90 7) 4]
Test Case: 335 | Input/Output: [(12 61 68 41) 12]
Test Case: 336 | Input/Output: [(34 28 44 90) 28]
Test Case: 337 | Input/Output: [(9 59 7 86) 7]
Test Case: 338 | Input/Output: [(79 45 45 23) 23]
Test Case: 339 | Input/Output: [(87 58 26 4) 4]
Test Case: 340 | Input/Output: [(57 18 72 27) 18]
Test Case: 341 | Input/Output: [(71 85 4 80) 4]
Test Case: 342 | Input/Output: [(78 47 33 34) 33]
Test Case: 343 | Input/Output: [(54 73 44 83) 44]
Test Case: 344 | Input/Output: [(15 17 41 35) 15]
Test Case: 345 | Input/Output: [(85 68 23 33) 23]
Test Case: 346 | Input/Output: [(39 15 23 45) 15]
Test Case: 347 | Input/Output: [(22 3 74 13) 3]
Test Case: 348 | Input/Output: [(46 4 39 96) 4]
Test Case: 349 | Input/Output: [(50 60 20 49) 20]
Test Case: 350 | Input/Output: [(8 41 2 32) 2]
Test Case: 351 | Input/Output: [(30 20 72 17) 17]
Test Case: 352 | Input/Output: [(46 91 85 34) 34]
Test Case: 353 | Input/Output: [(66 97 99 31) 31]
Test Case: 354 | Input/Output: [(21 84 51 55) 21]
Test Case: 355 | Input/Output: [(54 95 69 1) 1]
Test Case: 356 | Input/Output: [(3 67 91 37) 3]
Test Case: 357 | Input/Output: [(0 82 51 27) 0]
Test Case: 358 | Input/Output: [(44 40 46 38) 38]
Test Case: 359 | Input/Output: [(21 36 73 62) 21]
Test Case: 360 | Input/Output: [(61 41 19 57) 19]
Test Case: 361 | Input/Output: [(52 27 66 5) 5]
Test Case: 362 | Input/Output: [(92 64 58 6) 6]
Test Case: 363 | Input/Output: [(95 3 25 96) 3]
Test Case: 364 | Input/Output: [(2 86 48 11) 2]
Test Case: 365 | Input/Output: [(79 78 51 80) 51]
Test Case: 366 | Input/Output: [(68 69 26 76) 26]
Test Case: 367 | Input/Output: [(80 70 0 82) 0]
Test Case: 368 | Input/Output: [(12 20 19 31) 12]
Test Case: 369 | Input/Output: [(54 52 49 46) 46]
Test Case: 370 | Input/Output: [(97 56 73 45) 45]
Test Case: 371 | Input/Output: [(8 31 4 62) 4]
Test Case: 372 | Input/Output: [(10 1 48 39) 1]
Test Case: 373 | Input/Output: [(74 32 42 72) 32]
Test Case: 374 | Input/Output: [(34 19 96 46) 19]
Test Case: 375 | Input/Output: [(86 40 3 76) 3]
Test Case: 376 | Input/Output: [(65 74 93 91) 65]
Test Case: 377 | Input/Output: [(51 27 33 66) 27]
Test Case: 378 | Input/Output: [(85 31 60 66) 31]
Test Case: 379 | Input/Output: [(98 77 49 11) 11]
Test Case: 380 | Input/Output: [(10 89 49 73) 10]
Test Case: 381 | Input/Output: [(92 65 15 76) 15]
Test Case: 382 | Input/Output: [(34 55 52 60) 34]
Test Case: 383 | Input/Output: [(68 17 14 70) 14]
Test Case: 384 | Input/Output: [(36 26 95 79) 26]
Test Case: 385 | Input/Output: [(48 93 52 18) 18]
Test Case: 386 | Input/Output: [(1 23 95 21) 1]
Test Case: 387 | Input/Output: [(14 47 86 86) 14]
Test Case: 388 | Input/Output: [(100 65 41 44) 41]
Test Case: 389 | Input/Output: [(16 25 10 71) 10]
Test Case: 390 | Input/Output: [(27 40 32 52) 27]
Test Case: 391 | Input/Output: [(72 89 36 90) 36]
Test Case: 392 | Input/Output: [(65 94 78 44) 44]
Test Case: 393 | Input/Output: [(28 98 95 39) 28]
Test Case: 394 | Input/Output: [(2 8 100 56) 2]
Test Case: 395 | Input/Output: [(2 45 86 27) 2]
Test Case: 396 | Input/Output: [(40 74 6 12) 6]
Test Case: 397 | Input/Output: [(61 62 14 99) 14]
Test Case: 398 | Input/Output: [(1 11 42 47) 1]
Test Case: 399 | Input/Output: [(62 25 43 36) 25]
Test Case: 400 | Input/Output: [(-27 16 -81 76) -81]
Test Case: 401 | Input/Output: [(-2 23 -47 -37) -47]
Test Case: 402 | Input/Output: [(63 43 -25 79) -25]
Test Case: 403 | Input/Output: [(39 32 31 -100) -100]
Test Case: 404 | Input/Output: [(-60 -10 -50 -69) -69]
Test Case: 405 | Input/Output: [(50 75 43 90) 43]
Test Case: 406 | Input/Output: [(-23 -21 16 81) -23]
Test Case: 407 | Input/Output: [(39 25 65 -25) -25]
Test Case: 408 | Input/Output: [(39 9 -83 -97) -97]
Test Case: 409 | Input/Output: [(62 -33 19 -69) -69]
Test Case: 410 | Input/Output: [(-80 -36 -35 -56) -80]
Test Case: 411 | Input/Output: [(56 -55 -52 -24) -55]
Test Case: 412 | Input/Output: [(-69 67 16 56) -69]
Test Case: 413 | Input/Output: [(29 -85 -24 -37) -85]
Test Case: 414 | Input/Output: [(78 40 -29 95) -29]
Test Case: 415 | Input/Output: [(-78 71 -94 24) -94]
Test Case: 416 | Input/Output: [(37 -25 43 -48) -48]
Test Case: 417 | Input/Output: [(-46 37 32 7) -46]
Test Case: 418 | Input/Output: [(-89 96 95 64) -89]
Test Case: 419 | Input/Output: [(-67 -40 -89 44) -89]
Test Case: 420 | Input/Output: [(-24 47 -38 -29) -38]
Test Case: 421 | Input/Output: [(52 -69 18 94) -69]
Test Case: 422 | Input/Output: [(-72 -74 3 87) -74]
Test Case: 423 | Input/Output: [(60 -50 -63 47) -63]
Test Case: 424 | Input/Output: [(-13 1 53 -45) -45]
Test Case: 425 | Input/Output: [(-39 20 82 15) -39]
Test Case: 426 | Input/Output: [(-63 -62 -72 -62) -72]
Test Case: 427 | Input/Output: [(-98 33 -32 49) -98]
Test Case: 428 | Input/Output: [(54 -83 -51 -95) -95]
Test Case: 429 | Input/Output: [(-47 -41 -39 -99) -99]
Test Case: 430 | Input/Output: [(14 -60 44 -8) -60]
Test Case: 431 | Input/Output: [(70 -85 71 -22) -85]
Test Case: 432 | Input/Output: [(-65 -52 100 54) -65]
Test Case: 433 | Input/Output: [(-100 78 -22 86) -100]
Test Case: 434 | Input/Output: [(46 -42 15 87) -42]
Test Case: 435 | Input/Output: [(12 -86 -5 20) -86]
Test Case: 436 | Input/Output: [(-46 64 -38 29) -46]
Test Case: 437 | Input/Output: [(-26 -31 21 -64) -64]
Test Case: 438 | Input/Output: [(56 -86 -47 44) -86]
Test Case: 439 | Input/Output: [(33 2 -80 50) -80]
Test Case: 440 | Input/Output: [(-31 -84 52 -32) -84]
Test Case: 441 | Input/Output: [(71 87 66 -79) -79]
Test Case: 442 | Input/Output: [(-84 -50 -48 -38) -84]
Test Case: 443 | Input/Output: [(71 6 -73 33) -73]
Test Case: 444 | Input/Output: [(79 99 -31 -74) -74]
Test Case: 445 | Input/Output: [(-66 -67 -66 63) -67]
Test Case: 446 | Input/Output: [(45 -78 39 -98) -98]
Test Case: 447 | Input/Output: [(-69 63 -48 -63) -69]
Test Case: 448 | Input/Output: [(-10 -56 -12 47) -56]
Test Case: 449 | Input/Output: [(-46 58 93 -23) -46]
Test Case: 450 | Input/Output: [(32 -65 -19 -27) -65]
Test Case: 451 | Input/Output: [(24 48 76 -25) -25]
Test Case: 452 | Input/Output: [(-70 -81 -80 -48) -81]
Test Case: 453 | Input/Output: [(-84 -6 82 20) -84]
Test Case: 454 | Input/Output: [(-30 21 -10 21) -30]
Test Case: 455 | Input/Output: [(-86 8 -23 31) -86]
Test Case: 456 | Input/Output: [(-82 -93 67 -91) -93]
Test Case: 457 | Input/Output: [(-9 21 -28 -28) -28]
Test Case: 458 | Input/Output: [(97 -77 25 67) -77]
Test Case: 459 | Input/Output: [(-68 -68 -97 42) -97]
Test Case: 460 | Input/Output: [(2 -50 -66 -93) -93]
Test Case: 461 | Input/Output: [(88 56 -78 -63) -78]
Test Case: 462 | Input/Output: [(-83 15 97 -98) -98]
Test Case: 463 | Input/Output: [(20 -2 15 -35) -35]
Test Case: 464 | Input/Output: [(-31 -59 51 -77) -77]
Test Case: 465 | Input/Output: [(92 -60 -98 39) -98]
Test Case: 466 | Input/Output: [(-93 -2 -36 91) -93]
Test Case: 467 | Input/Output: [(-52 -54 -35 67) -54]
Test Case: 468 | Input/Output: [(-63 47 54 -68) -68]
Test Case: 469 | Input/Output: [(20 -88 43 37) -88]
Test Case: 470 | Input/Output: [(-29 4 -19 -12) -29]
Test Case: 471 | Input/Output: [(23 18 0 -5) -5]
Test Case: 472 | Input/Output: [(-47 -95 33 -35) -95]
Test Case: 473 | Input/Output: [(-13 -47 -39 -81) -81]
Test Case: 474 | Input/Output: [(37 56 -13 -21) -21]
Test Case: 475 | Input/Output: [(83 76 -85 92) -85]
Test Case: 476 | Input/Output: [(-76 -14 -64 -85) -85]
Test Case: 477 | Input/Output: [(-87 -28 66 -6) -87]
Test Case: 478 | Input/Output: [(96 20 -23 65) -23]
Test Case: 479 | Input/Output: [(-33 52 39 -48) -48]
Test Case: 480 | Input/Output: [(48 77 -82 56) -82]
Test Case: 481 | Input/Output: [(-71 -89 36 21) -89]
Test Case: 482 | Input/Output: [(-19 52 73 -7) -19]
Test Case: 483 | Input/Output: [(30 20 -28 -57) -57]
Test Case: 484 | Input/Output: [(9 -39 -62 90) -62]
Test Case: 485 | Input/Output: [(-87 -59 -69 -77) -87]
Test Case: 486 | Input/Output: [(-97 11 82 -98) -98]
Test Case: 487 | Input/Output: [(59 -39 15 -84) -84]
Test Case: 488 | Input/Output: [(94 71 -88 76) -88]
Test Case: 489 | Input/Output: [(11 24 97 -58) -58]
Test Case: 490 | Input/Output: [(5 -55 -86 55) -86]
Test Case: 491 | Input/Output: [(72 -48 -8 10) -48]
Test Case: 492 | Input/Output: [(-38 -18 60 -37) -38]
Test Case: 493 | Input/Output: [(39 -31 42 62) -31]
Test Case: 494 | Input/Output: [(52 51 -36 -64) -64]
Test Case: 495 | Input/Output: [(43 -23 68 -35) -35]
Test Case: 496 | Input/Output: [(37 -84 71 -18) -84]
Test Case: 497 | Input/Output: [(21 -61 43 0) -61]
Test Case: 498 | Input/Output: [(-23 49 22 -100) -100]
Test Case: 499 | Input/Output: [(-91 -7 -62 80) -91]
Test Case: 500 | Input/Output: [(-47 41 75 -55) -55]
Test Case: 501 | Input/Output: [(-99 -49 99 -44) -99]
Test Case: 502 | Input/Output: [(-8 -91 72 -5) -91]
Test Case: 503 | Input/Output: [(-10 41 -67 84) -67]
Test Case: 504 | Input/Output: [(-48 -98 -55 70) -98]
Test Case: 505 | Input/Output: [(97 -78 -2 83) -78]
Test Case: 506 | Input/Output: [(6 25 30 22) 6]
Test Case: 507 | Input/Output: [(74 -38 17 -60) -60]
Test Case: 508 | Input/Output: [(-62 -29 12 -44) -62]
Test Case: 509 | Input/Output: [(81 55 -38 -21) -38]
Test Case: 510 | Input/Output: [(100 -88 -25 98) -88]
Test Case: 511 | Input/Output: [(-53 34 45 -37) -53]
Test Case: 512 | Input/Output: [(-9 -16 -53 -4) -53]
Test Case: 513 | Input/Output: [(-93 24 66 38) -93]
Test Case: 514 | Input/Output: [(15 16 -11 -38) -38]
Test Case: 515 | Input/Output: [(46 69 -11 -43) -43]
Test Case: 516 | Input/Output: [(84 9 46 80) 9]
Test Case: 517 | Input/Output: [(-65 85 -60 5) -65]
Test Case: 518 | Input/Output: [(-22 -26 -25 -41) -41]
Test Case: 519 | Input/Output: [(-78 -52 -88 -9) -88]
Test Case: 520 | Input/Output: [(17 -53 46 78) -53]
Test Case: 521 | Input/Output: [(-1 -80 63 -2) -80]
Test Case: 522 | Input/Output: [(36 57 56 -40) -40]
Test Case: 523 | Input/Output: [(84 -30 64 -67) -67]
Test Case: 524 | Input/Output: [(-54 -94 6 71) -94]
Test Case: 525 | Input/Output: [(-53 -99 -2 79) -99]
Test Case: 526 | Input/Output: [(34 -69 -87 11) -87]
Test Case: 527 | Input/Output: [(-93 -13 -85 90) -93]
Test Case: 528 | Input/Output: [(92 13 -40 7) -40]
Test Case: 529 | Input/Output: [(-20 6 76 -64) -64]
Test Case: 530 | Input/Output: [(64 65 20 99) 20]
Test Case: 531 | Input/Output: [(-98 -60 73 -20) -98]
Test Case: 532 | Input/Output: [(-55 21 3 4) -55]
Test Case: 533 | Input/Output: [(-97 -36 65 99) -97]
Test Case: 534 | Input/Output: [(62 100 -64 96) -64]
Test Case: 535 | Input/Output: [(-5 80 -88 47) -88]
Test Case: 536 | Input/Output: [(5 84 77 -61) -61]
Test Case: 537 | Input/Output: [(11 47 -31 35) -31]
Test Case: 538 | Input/Output: [(-30 -38 -63 -97) -97]
Test Case: 539 | Input/Output: [(-1 -78 -25 18) -78]
Test Case: 540 | Input/Output: [(-72 35 -46 91) -72]
Test Case: 541 | Input/Output: [(-70 67 72 95) -70]
Test Case: 542 | Input/Output: [(-41 80 54 -100) -100]
Test Case: 543 | Input/Output: [(65 72 -36 24) -36]
Test Case: 544 | Input/Output: [(6 41 72 -9) -9]
Test Case: 545 | Input/Output: [(35 23 25 16) 16]
Test Case: 546 | Input/Output: [(83 -51 -80 27) -80]
Test Case: 547 | Input/Output: [(-2 -49 -7 33) -49]
Test Case: 548 | Input/Output: [(-72 -90 28 -40) -90]
Test Case: 549 | Input/Output: [(-50 -73 83 58) -73]
Test Case: 550 | Input/Output: [(-69 -24 -73 89) -73]
Test Case: 551 | Input/Output: [(76 41 44 -34) -34]
Test Case: 552 | Input/Output: [(-50 -25 -85 16) -85]
Test Case: 553 | Input/Output: [(11 20 62 99) 11]
Test Case: 554 | Input/Output: [(-4 -54 52 29) -54]
Test Case: 555 | Input/Output: [(-21 3 -80 46) -80]
Test Case: 556 | Input/Output: [(-50 96 -82 -68) -82]
Test Case: 557 | Input/Output: [(35 60 49 24) 24]
Test Case: 558 | Input/Output: [(-96 -65 79 55) -96]
Test Case: 559 | Input/Output: [(55 -67 -5 100) -67]
Test Case: 560 | Input/Output: [(-38 -50 70 44) -50]
Test Case: 561 | Input/Output: [(-92 49 -97 -68) -97]
Test Case: 562 | Input/Output: [(-6 -95 -8 96) -95]
Test Case: 563 | Input/Output: [(90 31 58 29) 29]
Test Case: 564 | Input/Output: [(39 -20 -79 16) -79]
Test Case: 565 | Input/Output: [(-50 -48 5 -67) -67]
Test Case: 566 | Input/Output: [(-41 -65 -76 -2) -76]
Test Case: 567 | Input/Output: [(9 -34 -60 -50) -60]
Test Case: 568 | Input/Output: [(32 -2 -70 -37) -70]
Test Case: 569 | Input/Output: [(99 97 -66 -71) -71]
Test Case: 570 | Input/Output: [(-35 -5 28 -20) -35]
Test Case: 571 | Input/Output: [(75 94 -5 5) -5]
Test Case: 572 | Input/Output: [(-20 48 24 -79) -79]
Test Case: 573 | Input/Output: [(-100 -48 -70 -96) -100]
Test Case: 574 | Input/Output: [(-59 82 -74 -44) -74]
Test Case: 575 | Input/Output: [(-43 43 -78 -35) -78]
Test Case: 576 | Input/Output: [(-41 -92 82 34) -92]
Test Case: 577 | Input/Output: [(72 -79 -69 1) -79]
Test Case: 578 | Input/Output: [(39 -65 -37 -19) -65]
Test Case: 579 | Input/Output: [(-80 -22 34 21) -80]
Test Case: 580 | Input/Output: [(76 60 44 90) 44]
Test Case: 581 | Input/Output: [(17 46 -81 -97) -97]
Test Case: 582 | Input/Output: [(59 66 -5 89) -5]
Test Case: 583 | Input/Output: [(93 -17 13 92) -17]
Test Case: 584 | Input/Output: [(73 -26 -7 -72) -72]
Test Case: 585 | Input/Output: [(58 -57 18 16) -57]
Test Case: 586 | Input/Output: [(72 -25 -38 -94) -94]
Test Case: 587 | Input/Output: [(-34 -13 -48 16) -48]
Test Case: 588 | Input/Output: [(-14 60 28 -1) -14]
Test Case: 589 | Input/Output: [(-6 45 -74 -90) -90]
Test Case: 590 | Input/Output: [(-82 54 -11 81) -82]
Test Case: 591 | Input/Output: [(47 -2 0 46) -2]
Test Case: 592 | Input/Output: [(44 -28 66 7) -28]
Test Case: 593 | Input/Output: [(93 86 44 -9) -9]
Test Case: 594 | Input/Output: [(15 -91 64 -65) -91]
Test Case: 595 | Input/Output: [(-65 -47 -21 20) -65]
Test Case: 596 | Input/Output: [(-27 -26 79 -12) -27]
Test Case: 597 | Input/Output: [(22 -77 -80 -41) -80]
Test Case: 598 | Input/Output: [(45 75 -63 -82) -82]
Test Case: 599 | Input/Output: [(38 -35 -25 14) -35]
Test Case: 600 | Input/Output: [(41 -2 6 76) -2]
Test Case: 601 | Input/Output: [(-49 -32 24 43) -49]
Test Case: 602 | Input/Output: [(51 80 -85 18) -85]
Test Case: 603 | Input/Output: [(51 88 22 1) 1]
Test Case: 604 | Input/Output: [(96 63 -1 56) -1]
Test Case: 605 | Input/Output: [(16 52 11 -77) -77]
Test Case: 606 | Input/Output: [(71 -55 -63 57) -63]
Test Case: 607 | Input/Output: [(8 -26 30 -9) -26]
Test Case: 608 | Input/Output: [(-74 32 56 68) -74]
Test Case: 609 | Input/Output: [(-21 14 32 -26) -26]
Test Case: 610 | Input/Output: [(96 -28 69 -93) -93]
Test Case: 611 | Input/Output: [(88 -32 15 90) -32]
Test Case: 612 | Input/Output: [(-77 -85 81 -24) -85]
Test Case: 613 | Input/Output: [(-69 -80 -34 -55) -80]
Test Case: 614 | Input/Output: [(99 -84 29 -76) -84]
Test Case: 615 | Input/Output: [(35 14 -2 7) -2]
Test Case: 616 | Input/Output: [(-56 -19 -62 -99) -99]
Test Case: 617 | Input/Output: [(-98 -17 88 57) -98]
Test Case: 618 | Input/Output: [(-57 10 -21 57) -57]
Test Case: 619 | Input/Output: [(-22 42 0 56) -22]
Test Case: 620 | Input/Output: [(60 37 16 -46) -46]
Test Case: 621 | Input/Output: [(-73 30 -98 -33) -98]
Test Case: 622 | Input/Output: [(100 -81 10 -3) -81]
Test Case: 623 | Input/Output: [(62 1 26 -34) -34]
Test Case: 624 | Input/Output: [(-71 -53 72 44) -71]
Test Case: 625 | Input/Output: [(44 83 13 -72) -72]
Test Case: 626 | Input/Output: [(-20 89 -84 -17) -84]
Test Case: 627 | Input/Output: [(-29 -76 87 -42) -76]
Test Case: 628 | Input/Output: [(45 63 -47 95) -47]
Test Case: 629 | Input/Output: [(-13 58 -22 -52) -52]
Test Case: 630 | Input/Output: [(63 -60 9 -61) -61]
Test Case: 631 | Input/Output: [(-83 -56 25 69) -83]
Test Case: 632 | Input/Output: [(-34 51 21 52) -34]
Test Case: 633 | Input/Output: [(-1 -47 -1 -76) -76]
Test Case: 634 | Input/Output: [(-54 -54 40 74) -54]
Test Case: 635 | Input/Output: [(13 67 25 62) 13]
Test Case: 636 | Input/Output: [(-58 49 -27 -9) -58]
Test Case: 637 | Input/Output: [(-34 -95 -46 -67) -95]
Test Case: 638 | Input/Output: [(17 -6 -97 -84) -97]
Test Case: 639 | Input/Output: [(92 -21 67 -85) -85]
Test Case: 640 | Input/Output: [(-53 34 -42 9) -53]
Test Case: 641 | Input/Output: [(60 24 3 -73) -73]
Test Case: 642 | Input/Output: [(-21 54 -28 -42) -42]
Test Case: 643 | Input/Output: [(-38 -79 -42 0) -79]
Test Case: 644 | Input/Output: [(15 -88 -62 -58) -88]
Test Case: 645 | Input/Output: [(32 74 -80 40) -80]
Test Case: 646 | Input/Output: [(7 -2 -61 68) -61]
Test Case: 647 | Input/Output: [(-65 -22 42 -9) -65]
Test Case: 648 | Input/Output: [(-5 -77 22 -57) -77]
Test Case: 649 | Input/Output: [(-31 -99 57 -6) -99]
Test Case: 650 | Input/Output: [(67 33 -20 -99) -99]
Test Case: 651 | Input/Output: [(-1 -52 -23 74) -52]
Test Case: 652 | Input/Output: [(81 45 -14 55) -14]
Test Case: 653 | Input/Output: [(-44 29 -16 -96) -96]
Test Case: 654 | Input/Output: [(60 -81 5 71) -81]
Test Case: 655 | Input/Output: [(55 -50 40 -53) -53]
Test Case: 656 | Input/Output: [(-21 24 -10 53) -21]
Test Case: 657 | Input/Output: [(-98 17 -12 11) -98]
Test Case: 658 | Input/Output: [(-90 8 14 -78) -90]
Test Case: 659 | Input/Output: [(-35 46 40 -92) -92]
Test Case: 660 | Input/Output: [(65 78 85 -46) -46]
Test Case: 661 | Input/Output: [(-73 -67 91 -39) -73]
Test Case: 662 | Input/Output: [(-83 7 -62 -64) -83]
Test Case: 663 | Input/Output: [(90 -29 88 14) -29]
Test Case: 664 | Input/Output: [(-10 84 -50 -33) -50]
Test Case: 665 | Input/Output: [(-6 -35 44 -75) -75]
Test Case: 666 | Input/Output: [(-43 45 33 -72) -72]
Test Case: 667 | Input/Output: [(-87 -6 46 -49) -87]
Test Case: 668 | Input/Output: [(-85 47 -23 62) -85]
Test Case: 669 | Input/Output: [(-52 13 -69 78) -69]
Test Case: 670 | Input/Output: [(77 -59 -85 -40) -85]
Test Case: 671 | Input/Output: [(-100 41 100 1) -100]
Test Case: 672 | Input/Output: [(6 -37 44 71) -37]
Test Case: 673 | Input/Output: [(-8 -64 51 -15) -64]
Test Case: 674 | Input/Output: [(-67 41 -67 81) -67]
Test Case: 675 | Input/Output: [(72 56 -53 54) -53]
Test Case: 676 | Input/Output: [(43 27 -51 73) -51]
Test Case: 677 | Input/Output: [(87 -78 -47 55) -78]
Test Case: 678 | Input/Output: [(36 -79 -21 -84) -84]
Test Case: 679 | Input/Output: [(-29 94 -53 20) -53]
Test Case: 680 | Input/Output: [(-79 1 18 -63) -79]
Test Case: 681 | Input/Output: [(38 32 26 -88) -88]
Test Case: 682 | Input/Output: [(-65 -73 81 -72) -73]
Test Case: 683 | Input/Output: [(57 -65 41 -6) -65]
Test Case: 684 | Input/Output: [(-57 -14 -40 -19) -57]
Test Case: 685 | Input/Output: [(37 74 31 11) 11]
Test Case: 686 | Input/Output: [(87 57 -95 36) -95]
Test Case: 687 | Input/Output: [(85 81 -66 -13) -66]
Test Case: 688 | Input/Output: [(-92 11 -92 64) -92]
Test Case: 689 | Input/Output: [(68 34 -22 3) -22]
Test Case: 690 | Input/Output: [(7 69 -47 88) -47]
Test Case: 691 | Input/Output: [(-99 41 -61 -39) -99]
Test Case: 692 | Input/Output: [(-41 -58 -40 -24) -58]
Test Case: 693 | Input/Output: [(87 -29 26 -21) -29]
Test Case: 694 | Input/Output: [(-52 85 -94 23) -94]
Test Case: 695 | Input/Output: [(80 36 90 -8) -8]
Test Case: 696 | Input/Output: [(17 -65 -62 56) -65]
Test Case: 697 | Input/Output: [(-95 15 78 -28) -95]
Test Case: 698 | Input/Output: [(-54 86 28 -23) -54]
Test Case: 699 | Input/Output: [(4 -8 -34 -31) -34]
Test Case: 700 | Input/Output: [(40 34 22 60) 22]
Test Case: 701 | Input/Output: [(59 3 -77 -30) -77]
Test Case: 702 | Input/Output: [(65 35 -29 -68) -68]
Test Case: 703 | Input/Output: [(70 71 -9 78) -9]
Test Case: 704 | Input/Output: [(-59 -32 32 25) -59]
Test Case: 705 | Input/Output: [(93 -21 -55 -17) -55]
Test Case: 706 | Input/Output: [(-25 -17 -45 -21) -45]
Test Case: 707 | Input/Output: [(32 75 97 -16) -16]
Test Case: 708 | Input/Output: [(50 48 -14 18) -14]
Test Case: 709 | Input/Output: [(39 28 -75 71) -75]
Test Case: 710 | Input/Output: [(5 -4 95 -86) -86]
Test Case: 711 | Input/Output: [(16 -82 -40 66) -82]
Test Case: 712 | Input/Output: [(70 74 -32 -6) -32]
Test Case: 713 | Input/Output: [(80 75 -72 -81) -81]
Test Case: 714 | Input/Output: [(-59 42 40 -56) -59]
Test Case: 715 | Input/Output: [(59 -36 57 -22) -36]
Test Case: 716 | Input/Output: [(-5 16 83 -1) -5]
Test Case: 717 | Input/Output: [(10 32 -34 36) -34]
Test Case: 718 | Input/Output: [(-64 75 -20 80) -64]
Test Case: 719 | Input/Output: [(91 27 -15 -77) -77]
Test Case: 720 | Input/Output: [(83 -40 62 71) -40]
Test Case: 721 | Input/Output: [(-86 84 79 -67) -86]
Test Case: 722 | Input/Output: [(-31 -42 62 -93) -93]
Test Case: 723 | Input/Output: [(-80 -39 83 43) -80]
Test Case: 724 | Input/Output: [(30 86 60 10) 10]
Test Case: 725 | Input/Output: [(-26 -64 50 42) -64]
Test Case: 726 | Input/Output: [(77 -1 61 -62) -62]
Test Case: 727 | Input/Output: [(63 -86 -36 29) -86]
Test Case: 728 | Input/Output: [(-47 26 -55 -11) -55]
Test Case: 729 | Input/Output: [(-68 -80 -77 34) -80]
Test Case: 730 | Input/Output: [(77 29 78 -18) -18]
Test Case: 731 | Input/Output: [(100 67 -77 55) -77]
Test Case: 732 | Input/Output: [(-25 -31 47 71) -31]
Test Case: 733 | Input/Output: [(44 -12 -60 -30) -60]
Test Case: 734 | Input/Output: [(1 -61 41 -50) -61]
Test Case: 735 | Input/Output: [(-72 11 -50 -30) -72]
Test Case: 736 | Input/Output: [(57 66 53 100) 53]
Test Case: 737 | Input/Output: [(-3 -17 -19 -73) -73]
Test Case: 738 | Input/Output: [(41 69 -89 -59) -89]
Test Case: 739 | Input/Output: [(95 -21 9 97) -21]
Test Case: 740 | Input/Output: [(42 -24 65 -85) -85]
Test Case: 741 | Input/Output: [(51 10 55 96) 10]
Test Case: 742 | Input/Output: [(-5 15 60 24) -5]
Test Case: 743 | Input/Output: [(16 6 -85 -60) -85]
Test Case: 744 | Input/Output: [(-69 49 -77 79) -77]
Test Case: 745 | Input/Output: [(34 29 84 -8) -8]
Test Case: 746 | Input/Output: [(100 27 19 41) 19]
Test Case: 747 | Input/Output: [(32 -86 27 34) -86]
Test Case: 748 | Input/Output: [(92 89 97 92) 89]
Test Case: 749 | Input/Output: [(-3 -63 17 35) -63]
Test Case: 750 | Input/Output: [(36 48 -89 5) -89]
Test Case: 751 | Input/Output: [(-96 8 18 62) -96]
Test Case: 752 | Input/Output: [(52 -67 19 77) -67]
Test Case: 753 | Input/Output: [(75 98 -7 -90) -90]
Test Case: 754 | Input/Output: [(44 28 -72 -77) -77]
Test Case: 755 | Input/Output: [(-90 12 -100 -33) -100]
Test Case: 756 | Input/Output: [(59 -72 -21 -65) -72]
Test Case: 757 | Input/Output: [(48 -12 27 -14) -14]
Test Case: 758 | Input/Output: [(-34 78 90 46) -34]
Test Case: 759 | Input/Output: [(60 16 53 67) 16]
Test Case: 760 | Input/Output: [(-37 -13 4 -34) -37]
Test Case: 761 | Input/Output: [(-30 -95 44 11) -95]
Test Case: 762 | Input/Output: [(-78 42 17 -32) -78]
Test Case: 763 | Input/Output: [(65 -94 -59 86) -94]
Test Case: 764 | Input/Output: [(-12 19 12 -66) -66]
Test Case: 765 | Input/Output: [(-61 65 89 46) -61]
Test Case: 766 | Input/Output: [(6 31 -87 73) -87]
Test Case: 767 | Input/Output: [(30 -27 27 -88) -88]
Test Case: 768 | Input/Output: [(14 -33 -36 -23) -36]
Test Case: 769 | Input/Output: [(-30 -44 43 14) -44]
Test Case: 770 | Input/Output: [(-34 32 -87 81) -87]
Test Case: 771 | Input/Output: [(-27 71 -71 -10) -71]
Test Case: 772 | Input/Output: [(-88 -57 -21 10) -88]
Test Case: 773 | Input/Output: [(-85 86 -96 -49) -96]
Test Case: 774 | Input/Output: [(-38 -69 -49 18) -69]
Test Case: 775 | Input/Output: [(93 -62 -97 44) -97]
Test Case: 776 | Input/Output: [(98 38 -80 37) -80]
Test Case: 777 | Input/Output: [(96 3 20 -38) -38]
Test Case: 778 | Input/Output: [(3 -80 -46 26) -80]
Test Case: 779 | Input/Output: [(-92 -83 -64 86) -92]
Test Case: 780 | Input/Output: [(50 -72 -3 36) -72]
Test Case: 781 | Input/Output: [(-98 -52 -40 75) -98]
Test Case: 782 | Input/Output: [(-31 18 63 -84) -84]
Test Case: 783 | Input/Output: [(-14 -24 83 -48) -48]
Test Case: 784 | Input/Output: [(96 23 -40 45) -40]
Test Case: 785 | Input/Output: [(-15 -51 35 -79) -79]
Test Case: 786 | Input/Output: [(-97 47 77 61) -97]
Test Case: 787 | Input/Output: [(15 25 94 -80) -80]
Test Case: 788 | Input/Output: [(29 -95 -28 88) -95]
Test Case: 789 | Input/Output: [(14 -10 -47 80) -47]
Test Case: 790 | Input/Output: [(66 -69 20 -87) -87]
Test Case: 791 | Input/Output: [(6 -86 -25 -82) -86]
Test Case: 792 | Input/Output: [(-89 76 -66 87) -89]
Test Case: 793 | Input/Output: [(-59 39 -89 -100) -100]
Test Case: 794 | Input/Output: [(-81 96 -60 69) -81]
Test Case: 795 | Input/Output: [(-70 23 -75 75) -75]
Test Case: 796 | Input/Output: [(-12 88 -10 -25) -25]
Test Case: 797 | Input/Output: [(56 20 29 -26) -26]
Test Case: 798 | Input/Output: [(84 -79 61 64) -79]
Test Case: 799 | Input/Output: [(97 48 56 -86) -86]
Test Case: 800 | Input/Output: [(-49 -6 -30 65) -49]
Test Case: 801 | Input/Output: [(4 68 -6 -44) -44]
Test Case: 802 | Input/Output: [(-20 -16 -59 69) -59]
Test Case: 803 | Input/Output: [(30 79 -37 15) -37]
Test Case: 804 | Input/Output: [(-49 -62 -78 -79) -79]
Test Case: 805 | Input/Output: [(-88 91 -45 69) -88]
Test Case: 806 | Input/Output: [(61 -15 -30 -39) -39]
Test Case: 807 | Input/Output: [(-82 30 -49 -10) -82]
Test Case: 808 | Input/Output: [(-28 -75 31 -25) -75]
Test Case: 809 | Input/Output: [(62 8 20 -86) -86]
Test Case: 810 | Input/Output: [(-68 39 -74 5) -74]
Test Case: 811 | Input/Output: [(27 69 -3 14) -3]
Test Case: 812 | Input/Output: [(55 96 -40 42) -40]
Test Case: 813 | Input/Output: [(-32 40 88 2) -32]
Test Case: 814 | Input/Output: [(-100 -56 5 74) -100]
Test Case: 815 | Input/Output: [(64 -93 -40 20) -93]
Test Case: 816 | Input/Output: [(72 84 40 -48) -48]
Test Case: 817 | Input/Output: [(-14 -62 -63 -51) -63]
Test Case: 818 | Input/Output: [(79 52 74 96) 52]
Test Case: 819 | Input/Output: [(87 -17 19 -63) -63]
Test Case: 820 | Input/Output: [(-45 4 57 -80) -80]
Test Case: 821 | Input/Output: [(45 93 -88 -71) -88]
Test Case: 822 | Input/Output: [(37 94 26 17) 17]
Test Case: 823 | Input/Output: [(-94 82 -77 -33) -94]
Test Case: 824 | Input/Output: [(9 -82 47 92) -82]
Test Case: 825 | Input/Output: [(62 75 -94 -97) -97]
Test Case: 826 | Input/Output: [(-48 -38 -25 94) -48]
Test Case: 827 | Input/Output: [(-52 53 -87 -89) -89]
Test Case: 828 | Input/Output: [(30 -95 5 -89) -95]
Test Case: 829 | Input/Output: [(-78 -84 87 -4) -84]
Test Case: 830 | Input/Output: [(77 35 -99 100) -99]
Test Case: 831 | Input/Output: [(-80 99 -11 84) -80]
Test Case: 832 | Input/Output: [(-30 38 29 17) -30]
Test Case: 833 | Input/Output: [(62 -89 -27 -85) -89]
Test Case: 834 | Input/Output: [(-10 12 -94 10) -94]
Test Case: 835 | Input/Output: [(50 -14 -4 -10) -14]
Test Case: 836 | Input/Output: [(39 -42 -4 71) -42]
Test Case: 837 | Input/Output: [(-73 -68 -61 -59) -73]
Test Case: 838 | Input/Output: [(39 5 -100 19) -100]
Test Case: 839 | Input/Output: [(91 29 -100 -75) -100]
Test Case: 840 | Input/Output: [(30 60 -54 91) -54]
Test Case: 841 | Input/Output: [(-94 -94 -30 -85) -94]
Test Case: 842 | Input/Output: [(18 31 58 -17) -17]
Test Case: 843 | Input/Output: [(-19 51 25 19) -19]
Test Case: 844 | Input/Output: [(57 72 62 43) 43]
Test Case: 845 | Input/Output: [(-96 -12 12 -30) -96]
Test Case: 846 | Input/Output: [(-65 -21 50 -87) -87]
Test Case: 847 | Input/Output: [(81 97 95 -2) -2]
Test Case: 848 | Input/Output: [(46 48 6 -32) -32]
Test Case: 849 | Input/Output: [(-52 98 -8 -44) -52]
Test Case: 850 | Input/Output: [(31 95 11 -90) -90]
Test Case: 851 | Input/Output: [(-36 -84 4 -5) -84]
Test Case: 852 | Input/Output: [(87 -53 84 35) -53]
Test Case: 853 | Input/Output: [(58 92 -93 7) -93]
Test Case: 854 | Input/Output: [(77 -58 51 73) -58]
Test Case: 855 | Input/Output: [(-54 13 27 -28) -54]
Test Case: 856 | Input/Output: [(-13 100 -76 29) -76]
Test Case: 857 | Input/Output: [(-77 67 38 36) -77]
Test Case: 858 | Input/Output: [(-93 21 6 56) -93]
Test Case: 859 | Input/Output: [(-100 -23 8 97) -100]
Test Case: 860 | Input/Output: [(32 -74 -96 53) -96]
Test Case: 861 | Input/Output: [(-45 -42 -5 65) -45]
Test Case: 862 | Input/Output: [(-88 0 6 -91) -91]
Test Case: 863 | Input/Output: [(66 27 98 70) 27]
Test Case: 864 | Input/Output: [(29 -17 -88 72) -88]
Test Case: 865 | Input/Output: [(67 16 -48 51) -48]
Test Case: 866 | Input/Output: [(85 6 -42 -61) -61]
Test Case: 867 | Input/Output: [(-75 -68 90 -64) -75]
Test Case: 868 | Input/Output: [(43 -86 86 24) -86]
Test Case: 869 | Input/Output: [(79 95 -64 92) -64]
Test Case: 870 | Input/Output: [(75 21 -10 -11) -11]
Test Case: 871 | Input/Output: [(-13 90 30 -64) -64]
Test Case: 872 | Input/Output: [(64 74 -23 -53) -53]
Test Case: 873 | Input/Output: [(84 64 16 32) 16]
Test Case: 874 | Input/Output: [(-32 40 88 -14) -32]
Test Case: 875 | Input/Output: [(3 -38 62 53) -38]
Test Case: 876 | Input/Output: [(98 96 21 -52) -52]
Test Case: 877 | Input/Output: [(-18 -70 12 96) -70]
Test Case: 878 | Input/Output: [(-27 18 -32 -37) -37]
Test Case: 879 | Input/Output: [(-62 83 -59 -29) -62]
Test Case: 880 | Input/Output: [(68 -98 64 44) -98]
Test Case: 881 | Input/Output: [(23 97 -100 59) -100]
Test Case: 882 | Input/Output: [(-6 96 -19 -16) -19]
Test Case: 883 | Input/Output: [(-83 86 -66 82) -83]
Test Case: 884 | Input/Output: [(83 -13 -6 -29) -29]
Test Case: 885 | Input/Output: [(65 -34 -1 -82) -82]
Test Case: 886 | Input/Output: [(83 -10 -12 47) -12]
Test Case: 887 | Input/Output: [(-24 -68 -12 -5) -68]
Test Case: 888 | Input/Output: [(-38 -31 55 15) -38]
Test Case: 889 | Input/Output: [(19 48 39 83) 19]
Test Case: 890 | Input/Output: [(40 87 74 -6) -6]
Test Case: 891 | Input/Output: [(-57 35 64 21) -57]
Test Case: 892 | Input/Output: [(-65 86 -14 3) -65]
Test Case: 893 | Input/Output: [(47 -59 81 14) -59]
Test Case: 894 | Input/Output: [(-60 51 -2 51) -60]
Test Case: 895 | Input/Output: [(40 -77 -9 -28) -77]
Test Case: 896 | Input/Output: [(-44 -37 -38 -71) -71]
Test Case: 897 | Input/Output: [(59 -20 -60 -60) -60]
Test Case: 898 | Input/Output: [(-26 -71 52 34) -71]
Test Case: 899 | Input/Output: [(-3 10 -90 -67) -90]
Test Case: 900 | Input/Output: [(29 81 -11 21) -11]
Test Case: 901 | Input/Output: [(-60 -73 -21 -89) -89]
Test Case: 902 | Input/Output: [(43 -66 -67 67) -67]
Test Case: 903 | Input/Output: [(26 62 -56 -32) -56]
Test Case: 904 | Input/Output: [(8 49 -25 61) -25]
Test Case: 905 | Input/Output: [(7 2 -86 -56) -86]
Test Case: 906 | Input/Output: [(94 -95 51 67) -95]
Test Case: 907 | Input/Output: [(-1 -85 16 33) -85]
Test Case: 908 | Input/Output: [(43 47 -27 32) -27]
Test Case: 909 | Input/Output: [(77 25 -34 11) -34]
Test Case: 910 | Input/Output: [(96 -6 -7 -38) -38]
Test Case: 911 | Input/Output: [(-32 14 1 -72) -72]
Test Case: 912 | Input/Output: [(63 -46 -58 62) -58]
Test Case: 913 | Input/Output: [(-19 43 58 -25) -25]
Test Case: 914 | Input/Output: [(36 -1 -90 4) -90]
Test Case: 915 | Input/Output: [(72 -48 -85 18) -85]
Test Case: 916 | Input/Output: [(-80 74 44 37) -80]
Test Case: 917 | Input/Output: [(83 -26 -42 30) -42]
Test Case: 918 | Input/Output: [(86 92 -29 48) -29]
Test Case: 919 | Input/Output: [(78 80 -22 -74) -74]
Test Case: 920 | Input/Output: [(66 26 -59 -70) -70]
Test Case: 921 | Input/Output: [(-83 14 -70 -34) -83]
Test Case: 922 | Input/Output: [(65 96 -66 -87) -87]
Test Case: 923 | Input/Output: [(-10 -31 -19 43) -31]
Test Case: 924 | Input/Output: [(-65 21 2 -55) -65]
Test Case: 925 | Input/Output: [(-49 19 -53 43) -53]
Test Case: 926 | Input/Output: [(24 -31 -36 97) -36]
Test Case: 927 | Input/Output: [(-43 36 -79 -45) -79]
Test Case: 928 | Input/Output: [(51 41 -7 -24) -24]
Test Case: 929 | Input/Output: [(-43 72 54 92) -43]
Test Case: 930 | Input/Output: [(36 -94 68 87) -94]
Test Case: 931 | Input/Output: [(-69 -58 -30 -79) -79]
Test Case: 932 | Input/Output: [(96 -15 -80 72) -80]
Test Case: 933 | Input/Output: [(-8 33 -92 -6) -92]
Test Case: 934 | Input/Output: [(-58 65 -12 82) -58]
Test Case: 935 | Input/Output: [(-13 44 -24 -87) -87]
Test Case: 936 | Input/Output: [(89 -89 44 41) -89]
Test Case: 937 | Input/Output: [(-98 70 53 -69) -98]
Test Case: 938 | Input/Output: [(-32 -30 94 33) -32]
Test Case: 939 | Input/Output: [(10 -44 -5 15) -44]
Test Case: 940 | Input/Output: [(-11 100 17 1) -11]
Test Case: 941 | Input/Output: [(-12 -90 -77 -71) -90]
Test Case: 942 | Input/Output: [(21 -55 26 -85) -85]
Test Case: 943 | Input/Output: [(-48 -46 -55 30) -55]
Test Case: 944 | Input/Output: [(99 78 21 -89) -89]
Test Case: 945 | Input/Output: [(-76 11 -29 -29) -76]
Test Case: 946 | Input/Output: [(7 96 6 74) 6]
Test Case: 947 | Input/Output: [(52 45 48 -31) -31]
Test Case: 948 | Input/Output: [(76 -40 -84 -29) -84]
Test Case: 949 | Input/Output: [(34 -40 -68 81) -68]
Test Case: 950 | Input/Output: [(-95 -90 89 56) -95]
Test Case: 951 | Input/Output: [(-85 24 -46 100) -85]
Test Case: 952 | Input/Output: [(51 -56 -37 22) -56]
Test Case: 953 | Input/Output: [(7 -64 62 64) -64]
Test Case: 954 | Input/Output: [(-36 -99 87 23) -99]
Test Case: 955 | Input/Output: [(-70 26 5 -37) -70]
Test Case: 956 | Input/Output: [(-63 23 -55 95) -63]
Test Case: 957 | Input/Output: [(12 -11 -81 26) -81]
Test Case: 958 | Input/Output: [(-6 -5 42 21) -6]
Test Case: 959 | Input/Output: [(78 -67 -96 -48) -96]
Test Case: 960 | Input/Output: [(-74 86 61 -99) -99]
Test Case: 961 | Input/Output: [(-56 55 -74 -64) -74]
Test Case: 962 | Input/Output: [(-84 -65 35 88) -84]
Test Case: 963 | Input/Output: [(-84 65 94 21) -84]
Test Case: 964 | Input/Output: [(-100 -54 92 -74) -100]
Test Case: 965 | Input/Output: [(16 -56 -7 -58) -58]
Test Case: 966 | Input/Output: [(63 67 33 -52) -52]
Test Case: 967 | Input/Output: [(85 -7 -44 -67) -67]
Test Case: 968 | Input/Output: [(-97 71 -22 -89) -97]
Test Case: 969 | Input/Output: [(30 -70 37 -36) -70]
Test Case: 970 | Input/Output: [(-12 -8 36 -52) -52]
Test Case: 971 | Input/Output: [(27 60 -1 -83) -83]
Test Case: 972 | Input/Output: [(-30 73 22 -90) -90]
Test Case: 973 | Input/Output: [(27 37 -30 100) -30]
Test Case: 974 | Input/Output: [(75 -8 -73 -97) -97]
Test Case: 975 | Input/Output: [(11 -96 45 57) -96]
Test Case: 976 | Input/Output: [(-42 84 -48 44) -48]
Test Case: 977 | Input/Output: [(-10 -2 -35 -86) -86]
Test Case: 978 | Input/Output: [(72 100 -82 52) -82]
Test Case: 979 | Input/Output: [(4 96 41 81) 4]
Test Case: 980 | Input/Output: [(-70 -18 22 89) -70]
Test Case: 981 | Input/Output: [(83 -1 -19 16) -19]
Test Case: 982 | Input/Output: [(-55 -55 -77 2) -77]
Test Case: 983 | Input/Output: [(30 -61 -24 -96) -96]
Test Case: 984 | Input/Output: [(-71 82 -42 -27) -71]
Test Case: 985 | Input/Output: [(99 91 71 -1) -1]
Test Case: 986 | Input/Output: [(-14 -92 53 -81) -92]
Test Case: 987 | Input/Output: [(78 -33 13 -56) -56]
Test Case: 988 | Input/Output: [(-34 26 96 -84) -84]
Test Case: 989 | Input/Output: [(-88 -54 -24 -66) -88]
Test Case: 990 | Input/Output: [(34 -39 -75 -27) -75]
Test Case: 991 | Input/Output: [(84 -76 -1 -88) -88]
Test Case: 992 | Input/Output: [(-45 76 -57 -51) -57]
Test Case: 993 | Input/Output: [(-46 10 86 -78) -78]
Test Case: 994 | Input/Output: [(92 43 5 69) 5]
Test Case: 995 | Input/Output: [(-9 -36 58 77) -36]
Test Case: 996 | Input/Output: [(55 -36 -10 26) -36]
Test Case: 997 | Input/Output: [(76 -67 -9 -94) -94]
Test Case: 998 | Input/Output: [(77 49 31 -14) -14]
Test Case: 999 | Input/Output: [(13 -36 -23 -43) -43]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -124 -54 0 -93 79 -128 18 117 -84 -127 -18 -12 18 92 -67 -52
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[23 23 76 23] 23] [[-34 -34 -34 90] -34] [[13 13 88 13] 13] [[51 -32 51 51] -32] [[23 23 23 41] 23] [[-23 92 92 92] -23] [[-14 13 -14 -14] -14] [[96 -59 -59 -59] -59] [[82 82 82 -36] -36] [[80 -98 -98 -98] -98] [(34 34 34 34) 34] [(25 25 25 25) 25] [(-33 -33 -33 -33) -33] [(36 36 36 36) 36] [(50 50 50 50) 50] [(70 84 66 99) 66] [(97 53 60 90) 53] [(40 55 94 26) 26] [(5 41 25 75) 5] [(4 36 35 44) 4] [(38 35 47 67) 35] [(56 60 10 26) 10] [(76 80 21 12) 12] [(87 26 96 46) 26] [(90 69 97 66) 66] [(29 70 68 59) 29] [(91 81 5 82) 5] [(70 73 6 57) 6] [(93 1 91 3) 1] [(61 52 16 40) 16] [(8 89 72 52) 8] [(10 9 80 63) 9] [(3 71 83 48) 3] [(96 62 22 68) 22] [(29 16 69 81) 16] [(-60 -87 8 74) -87] [(4 -60 39 -2) -60] [(50 68 45 26) 26] [(44 -53 -22 -23) -53] [(92 58 -98 36) -98] [(-26 -34 -63 -7) -63] [(-84 53 54 -48) -84] [(-11 32 -12 47) -12] [(84 98 -100 80) -100] [(-52 -62 -77 -75) -77] [(-66 -1 -83 48) -83] [(33 98 75 90) 33] [(-81 24 41 -62) -81] [(12 -28 -100 -11) -100] [(52 -11 -35 -79) -79] [(95 -33 -53 99) -53] [(-96 14 -62 -7) -96] [(91 -50 46 42) -50] [(20 57 66 -74) -74] [(19 72 -63 43) -63] [(84 18 83 -40) -40] [(-3 -39 -50 -88) -88] [(-48 -78 -50 -60) -78] [(45 10 48 86) 10] [(-19 -96 64 -74) -96] [(96 -24 -32 34) -32] [(-5 -80 22 44) -80] [(-19 95 -11 73) -19] [(-26 98 -9 87) -26] [(20 62 34 -37) -37] [(-58 32 12 -47) -58] [(-21 -18 -2 -23) -23] [(10 -41 -72 -40) -72] [(-29 2 -4 41) -29] [(84 76 -64 35) -64] [(-22 74 -40 83) -40] [(-55 -59 -2 55) -59] [(-49 56 -70 -88) -88] [(65 33 77 -68) -68] [(92 63 3 -32) -32] [(69 -34 -64 -72) -72] [(-26 -3 -29 37) -29] [(57 78 -45 -89) -89] [(-71 -63 99 -64) -71] [(-77 -2 80 -56) -77] [(-44 98 93 -16) -44] [(-70 29 -26 -83) -83] [(14 94 -84 -61) -84] [(-82 -13 -52 -59) -82] [(33 -52 -92 78) -92] [(-64 -36 50 94) -64] [(-48 89 -95 -93) -95] [(-91 16 31 -100) -100] [(38 -61 44 -3) -61] [(-12 -75 -68 -36) -75] [(-14 65 -96 -81) -96] [(73 -29 99 43) -29] [(20 48 18 -69) -69] [(71 -50 84 -38) -50] [(-78 52 43 89) -78])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: 92                 
Correct output: -14                 | Program output: 13                 
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 84                 
Correct output: 53                  | Program output: 53                 
Correct output: 26                  | Program output: 55                 
Correct output: 5                   | Program output: 41                 
Correct output: 4                   | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 10                  | Program output: 60                 
Correct output: 12                  | Program output: 80                 
Correct output: 26                  | Program output: 26                 
Correct output: 66                  | Program output: 69                 
Correct output: 29                  | Program output: 70                 
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 73                 
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 52                 
Correct output: 8                   | Program output: 89                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 71                 
Correct output: 22                  | Program output: 62                 
Correct output: 16                  | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 68                 
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: 58                 
Correct output: -63                 | Program output: -34                
Correct output: -84                 | Program output: 53                 
Correct output: -12                 | Program output: 32                 
Correct output: -100                | Program output: 98                 
Correct output: -77                 | Program output: -62                
Correct output: -83                 | Program output: -1                 
Correct output: 33                  | Program output: 98                 
Correct output: -81                 | Program output: 24                 
Correct output: -100                | Program output: -28                
Correct output: -79                 | Program output: -11                
Correct output: -53                 | Program output: -33                
Correct output: -96                 | Program output: 14                 
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: 57                 
Correct output: -63                 | Program output: 72                 
Correct output: -40                 | Program output: 18                 
Correct output: -88                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: 95                 
Correct output: -26                 | Program output: 98                 
Correct output: -37                 | Program output: 62                 
Correct output: -58                 | Program output: 32                 
Correct output: -23                 | Program output: -18                
Correct output: -72                 | Program output: -41                
Correct output: -29                 | Program output: 2                  
Correct output: -64                 | Program output: 76                 
Correct output: -40                 | Program output: 74                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: 56                 
Correct output: -68                 | Program output: 33                 
Correct output: -32                 | Program output: 63                 
Correct output: -72                 | Program output: -34                
Correct output: -29                 | Program output: -3                 
Correct output: -89                 | Program output: 78                 
Correct output: -71                 | Program output: -63                
Correct output: -77                 | Program output: -2                 
Correct output: -44                 | Program output: 98                 
Correct output: -83                 | Program output: 29                 
Correct output: -84                 | Program output: 94                 
Correct output: -82                 | Program output: -13                
Correct output: -92                 | Program output: -52                
Correct output: -64                 | Program output: -36                
Correct output: -95                 | Program output: 89                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: 65                 
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: 48                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: 52                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction 35} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_750} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_404} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction 24} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 3, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction -25} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_yank boolean_pop exec_dup_times (in3 boolean_and) exec_empty in2 print_integer exec_swap (boolean_dup exec_do*range (integer_yank boolean_shove integer_add integer_dup) boolean_empty exec_y () exec_if (exec_if (integer_gte 35 exec_do*range (exec_flush) integer_inc) (boolean_yankdup boolean_pop boolean_or exec_pop (exec_shove () boolean_yankdup in3) exec_s (boolean_rot tagged_750 boolean_and exec_s () (exec_dup_items boolean_dup exec_shove (boolean_dup_times integer_dec) exec_do*range (boolean_flush in3 integer_mult exec_dup_times (in3 integer_mod exec_y_when_autoconstructing (exec_y (boolean_xor tag_exec_404 (integer_shove boolean_rot) exec_y_when_autoconstructing () exec_noop exec_when () integer_eq 24 print_exec (integer_mod exec_yank integer_yankdup integer_lt integer_fromboolean exec_rot (boolean_dup boolean_pop) (boolean_not exec_shove (integer_div boolean_yank) integer_gte) (boolean_yankdup integer_fromboolean print_exec (integer_pop integer_div boolean_empty) exec_flush exec_do*while () exec_yank 18 exec_yank integer_dup_times boolean_or) boolean_xor integer_gte) integer_flush integer_pop))) integer_gte -25) integer_stackdepth integer_min) (integer_yankdup)) () ())) ()) ())
Lexicase best errors: [0 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 129
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction 35} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_750} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_404} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction 24} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction 18} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 3, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction -25} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_yank boolean_pop exec_dup_times (in3 boolean_and) exec_empty in2 print_integer exec_swap (boolean_dup exec_do*range (integer_yank boolean_shove integer_add integer_dup) boolean_empty exec_y () exec_if (exec_if (integer_gte 35 exec_do*range (exec_flush) integer_inc) (boolean_yankdup boolean_pop boolean_or exec_pop (exec_shove () boolean_yankdup in3) exec_s (boolean_rot tagged_750 boolean_and exec_s () (exec_dup_items boolean_dup exec_shove (boolean_dup_times integer_dec) exec_do*range (boolean_flush in3 integer_mult exec_dup_times (in3 integer_mod exec_y_when_autoconstructing (exec_y (boolean_xor tag_exec_404 (integer_shove boolean_rot) exec_y_when_autoconstructing () exec_noop exec_when () integer_eq 24 print_exec (integer_mod exec_yank integer_yankdup integer_lt integer_fromboolean exec_rot (boolean_dup boolean_pop) (boolean_not exec_shove (integer_div boolean_yank) integer_gte) (boolean_yankdup integer_fromboolean print_exec (integer_pop integer_div boolean_empty) exec_flush exec_do*while () exec_yank 18 exec_yank integer_dup_times boolean_or) boolean_xor integer_gte) integer_flush integer_pop))) integer_gte -25) integer_stackdepth integer_min) (integer_yankdup)) () ())) ()) ())
Zero cases best errors: [0 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 129
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 4 15 6 6 4 6 10 1 4)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (6 4 15 6 6 4 6 10 1 4)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_848} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction 68} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_noop})
Best program: (exec_dup_items integer_yank integer_min boolean_rot integer_yankdup boolean_and exec_swap (boolean_flush in2 integer_dec integer_inc exec_stackdepth integer_stackdepth) (boolean_and) integer_dup_times exec_k_when_autoconstructing (tagged_848 integer_inc integer_yankdup exec_swap (boolean_invert_second_then_and) (print_integer) exec_do*times ()) (integer_yank integer_swap integer_lt in2 exec_pop (boolean_frominteger 68)) integer_empty boolean_rot exec_do*range (exec_k (integer_eq exec_dup_items integer_min integer_gt integer_sub exec_do*range (exec_if (exec_pop (exec_rot (boolean_yank boolean_frominteger integer_swap) (print_integer exec_dup_items exec_noop) ())) ())) ()))
Errors: [0 1 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 49
Size: 68
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 9.938
Median total errors in population: 10
Error averages by case: (0.994 0.996 0.985 0.994 0.994 0.996 0.994 0.99 0.999 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.471
Average program size in population (points): 70.709
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 483664
--- Timings ---
Current time: 1559594009150 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 33.2%
Fitness Testing:      1.5 seconds, 62.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: 51                 
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 60                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 87                 
Correct output: 66                  | Program output: 90                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 91                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 29                 
Correct output: -87                 | Program output: -60                
Correct output: -60                 | Program output: 4                  
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: 46                 
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 83                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -50                
Correct output: 10                  | Program output: 45                 
Correct output: -96                 | Program output: -19                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -5                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -55                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 65                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: 38                 
Correct output: -75                 | Program output: -68                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: 73                 
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: 71                 
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction 81} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_502} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_while () exec_empty boolean_empty boolean_invert_first_then_and integer_eq boolean_eq integer_shove exec_dup_times (boolean_pop tagged_962 exec_if (99 tagged_132 integer_flush in3) (exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_max integer_dup_items exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_y (integer_flush exec_empty exec_noop)) (integer_dup 81) (integer_yankdup exec_noop integer_pop boolean_invert_first_then_and integer_pop exec_stackdepth) integer_stackdepth) exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger exec_do*while (print_exec (boolean_stackdepth boolean_pop exec_stackdepth exec_flush) integer_dup_times exec_s (in1 boolean_frominteger integer_mod) (exec_swap (integer_min) (tag_boolean_502 boolean_dup) tagged_257 exec_s (in3) (integer_gte integer_stackdepth exec_dup_items) (boolean_frominteger) boolean_frominteger integer_dec print_boolean integer_pop integer_gt integer_dec integer_gte) () boolean_rot integer_dup exec_do*times (boolean_xor exec_k_when_autoconstructing () (integer_dup exec_stackdepth in4 boolean_pop integer_min integer_rot) boolean_not exec_yankdup) print_integer exec_k () (exec_eq integer_flush boolean_pop) tagged_70 integer_mult boolean_eq boolean_invert_second_then_and)) ()) () ())) ())))
Lexicase best errors: [0 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 133
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction 81} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_502} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_while () exec_empty boolean_empty boolean_invert_first_then_and integer_eq boolean_eq integer_shove exec_dup_times (boolean_pop tagged_962 exec_if (99 tagged_132 integer_flush in3) (exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_max integer_dup_items exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_y (integer_flush exec_empty exec_noop)) (integer_dup 81) (integer_yankdup exec_noop integer_pop boolean_invert_first_then_and integer_pop exec_stackdepth) integer_stackdepth) exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger exec_do*while (print_exec (boolean_stackdepth boolean_pop exec_stackdepth exec_flush) integer_dup_times exec_s (in1 boolean_frominteger integer_mod) (exec_swap (integer_min) (tag_boolean_502 boolean_dup) tagged_257 exec_s (in3) (integer_gte integer_stackdepth exec_dup_items) (boolean_frominteger) boolean_frominteger integer_dec print_boolean integer_pop integer_gt integer_dec integer_gte) () boolean_rot integer_dup exec_do*times (boolean_xor exec_k_when_autoconstructing () (integer_dup exec_stackdepth in4 boolean_pop integer_min integer_rot) boolean_not exec_yankdup) print_integer exec_k () (exec_eq integer_flush boolean_pop) tagged_70 integer_mult boolean_eq boolean_invert_second_then_and)) ()) () ())) ())))
Zero cases best errors: [0 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 133
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (26 26 287 147 284 79 511 79 147 152)
Population mean number of elite cases: 1.74
Count of perfect (error zero) individuals by case: (26 26 287 147 284 79 511 79 147 152)
Population mean number of perfect (error zero) cases: 1.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction 81} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_502} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_while () exec_empty boolean_empty boolean_invert_first_then_and integer_eq boolean_eq integer_shove exec_dup_times (boolean_pop tagged_962 exec_if (99 tagged_132 integer_flush in3) (exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_max integer_dup_items exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_y (integer_flush exec_empty exec_noop)) (integer_dup 81) (integer_yankdup exec_noop integer_pop boolean_invert_first_then_and integer_pop exec_stackdepth) integer_stackdepth) exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger exec_do*while (print_exec (boolean_stackdepth boolean_pop exec_stackdepth exec_flush) integer_dup_times exec_s (in1 boolean_frominteger integer_mod) (exec_swap (integer_min) (tag_boolean_502 boolean_dup) tagged_257 exec_s (in3) (integer_gte integer_stackdepth exec_dup_items) (boolean_frominteger) boolean_frominteger integer_dec print_boolean integer_pop integer_gt integer_dec integer_gte) () boolean_rot integer_dup exec_do*times (boolean_xor exec_k_when_autoconstructing () (integer_dup exec_stackdepth in4 boolean_pop integer_min integer_rot) boolean_not exec_yankdup) print_integer exec_k () (exec_eq integer_flush boolean_pop) tagged_70 integer_mult boolean_eq boolean_invert_second_then_and)) ()) () ())) ())))
Errors: [0 0 1 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 97
Size: 133
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 8.262
Median total errors in population: 7
Error averages by case: (0.974 0.974 0.713 0.853 0.716 0.921 0.489 0.921 0.853 0.848)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.39
Average program size in population (points): 97.048
Average percent parens in population: 0.251
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1009456
--- Timings ---
Current time: 1559594011152 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         1.8 seconds, 38.3%
Fitness Testing:      2.1 seconds, 43.5%
Report:               0.8 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: 51                 
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 60                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 87                 
Correct output: 66                  | Program output: 90                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 91                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 29                 
Correct output: -87                 | Program output: -60                
Correct output: -60                 | Program output: 4                  
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: 46                 
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 83                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -50                
Correct output: 10                  | Program output: 45                 
Correct output: -96                 | Program output: -19                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -5                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -55                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 65                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: 38                 
Correct output: -75                 | Program output: -68                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: 73                 
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: 71                 
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction 81} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_502} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_while () exec_empty boolean_empty boolean_invert_first_then_and integer_eq boolean_eq integer_shove exec_dup_times (boolean_pop boolean_flush tagged_962 exec_if (99 tagged_132 integer_flush in3) (exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_max integer_dup_items exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (integer_mod) (exec_y (integer_flush exec_empty exec_noop)) (integer_dup 81) integer_yankdup exec_noop integer_pop boolean_invert_first_then_and integer_pop exec_stackdepth) boolean_swap integer_stackdepth) (exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger exec_do*while (print_exec (boolean_stackdepth boolean_pop exec_stackdepth exec_flush) integer_dup_times exec_s (in1 boolean_frominteger integer_mod) (exec_swap (integer_min) (tag_boolean_502 boolean_empty boolean_dup) tagged_257 exec_s (in3) (integer_gte integer_stackdepth exec_dup_items) (boolean_frominteger) boolean_frominteger integer_dec print_boolean integer_pop integer_gt integer_dec boolean_rot integer_dup exec_do*times (boolean_xor integer_dup exec_stackdepth in4 boolean_pop integer_div) integer_min integer_rot) (boolean_not boolean_shove exec_yankdup) print_integer exec_k () (integer_flush boolean_pop) integer_mult boolean_eq boolean_invert_second_then_and)) ()) ())) ())))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 132
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction 81} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_502} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_while () exec_empty boolean_empty boolean_invert_first_then_and integer_eq boolean_eq integer_shove exec_dup_times (boolean_pop boolean_flush tagged_962 exec_if (99 tagged_132 integer_flush in3) (exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_max integer_dup_items exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (integer_mod) (exec_y (integer_flush exec_empty exec_noop)) (integer_dup 81) integer_yankdup exec_noop integer_pop boolean_invert_first_then_and integer_pop exec_stackdepth) boolean_swap integer_stackdepth) (exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger exec_do*while (print_exec (boolean_stackdepth boolean_pop exec_stackdepth exec_flush) integer_dup_times exec_s (in1 boolean_frominteger integer_mod) (exec_swap (integer_min) (tag_boolean_502 boolean_empty boolean_dup) tagged_257 exec_s (in3) (integer_gte integer_stackdepth exec_dup_items) (boolean_frominteger) boolean_frominteger integer_dec print_boolean integer_pop integer_gt integer_dec boolean_rot integer_dup exec_do*times (boolean_xor integer_dup exec_stackdepth in4 boolean_pop integer_div) integer_min integer_rot) (boolean_not boolean_shove exec_yankdup) print_integer exec_k () (integer_flush boolean_pop) integer_mult boolean_eq boolean_invert_second_then_and)) ()) ())) ())))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 132
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (264 263 153 152 259 342 390 153 640 154)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (264 263 153 152 259 342 390 153 640 154)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction 99} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction 81} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction tag_boolean_502} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_while () exec_empty boolean_empty boolean_invert_first_then_and integer_eq boolean_eq integer_shove boolean_pop tagged_962 99 integer_flush in3 exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_dup_items exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_y (integer_flush exec_empty exec_noop)) (integer_dup 81) (integer_yankdup exec_noop integer_pop boolean_invert_first_then_and integer_pop exec_stackdepth) integer_stackdepth) (exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger print_exec (boolean_stackdepth boolean_pop integer_stackdepth)) (exec_stackdepth exec_flush) integer_dup_times integer_pop) (exec_s (boolean_frominteger integer_mod) (exec_swap (integer_min) (in3)) (tag_boolean_502 boolean_dup) exec_s (in3) (integer_gte in2 integer_stackdepth exec_dup_items) (boolean_frominteger) integer_dec print_boolean integer_pop integer_gt integer_dec integer_gte)) boolean_rot integer_dup exec_do*times (boolean_xor exec_k_when_autoconstructing () (integer_dup exec_stackdepth in4 boolean_pop integer_min integer_rot) boolean_not exec_yankdup) boolean_not print_integer integer_lte exec_k () (exec_eq integer_flush boolean_pop) tagged_70 integer_mult boolean_eq boolean_invert_second_then_and) ())
Errors: [0 0 1 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 94
Size: 125
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 7.23
Median total errors in population: 7
Error averages by case: (0.736 0.737 0.847 0.848 0.741 0.658 0.61 0.847 0.36 0.846)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.934
Average program size in population (points): 118.373
Average percent parens in population: 0.264
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1570485
--- Timings ---
Current time: 1559594013307 milliseconds
Total Time:           6.9 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         3.1 seconds, 44.4%
Fitness Testing:      2.6 seconds, 37.7%
Report:               1.1 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: 51                 
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 70                 
Correct output: 53                  | Program output: 90                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 38                 
Correct output: 10                  | Program output: 26                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 46                 
Correct output: 66                  | Program output: 66                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 82                 
Correct output: 6                   | Program output: 57                 
Correct output: 1                   | Program output: 3                  
Correct output: 16                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 68                 
Correct output: 16                  | Program output: 29                 
Correct output: -87                 | Program output: -60                
Correct output: -60                 | Program output: -2                 
Correct output: 26                  | Program output: 26                 
Correct output: -53                 | Program output: -23                
Correct output: -98                 | Program output: 36                 
Correct output: -63                 | Program output: -26                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: 80                 
Correct output: -77                 | Program output: -75                
Correct output: -83                 | Program output: -66                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: 42                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: 19                 
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -60                
Correct output: 10                  | Program output: 45                 
Correct output: -96                 | Program output: -74                
Correct output: -32                 | Program output: 34                 
Correct output: -80                 | Program output: -5                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -40                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: 35                 
Correct output: -40                 | Program output: -22                
Correct output: -59                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -32                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -26                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: 33                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -3                 
Correct output: -75                 | Program output: -36                
Correct output: -96                 | Program output: -81                
Correct output: -29                 | Program output: 43                 
Correct output: -69                 | Program output: -69                
Correct output: -50                 | Program output: -38                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction 11} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 82} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction print_newline} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_while () exec_empty boolean_empty boolean_invert_first_then_and integer_eq exec_shove (in2 boolean_and exec_swap () (boolean_pop exec_if (integer_shove 99 tagged_132 integer_flush exec_k_when_autoconstructing (in1) (in4 integer_min print_integer integer_min integer_max integer_dup_items exec_do*count (integer_pop boolean_xor) exec_s_when_autoconstructing (exec_flush exec_y (exec_empty integer_dup 11 integer_yankdup 82 exec_noop integer_pop boolean_invert_first_then_and integer_pop exec_stackdepth) integer_stackdepth) (exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger exec_do*while (print_exec (integer_max boolean_stackdepth boolean_pop exec_stackdepth integer_dup_times exec_s (in1 boolean_frominteger integer_mod) (exec_swap (integer_min) (boolean_dup) tagged_257 in3) (integer_stackdepth boolean_frominteger) boolean_frominteger boolean_dup print_boolean integer_pop integer_dec integer_dup integer_gte)) boolean_rot integer_dup boolean_xor exec_k_when_autoconstructing () (in4) integer_eq) (exec_stackdepth boolean_frominteger) exec_while (integer_min print_newline) integer_rot) (boolean_not exec_yankdup) print_integer exec_k () (integer_flush boolean_pop) tagged_70 integer_mult boolean_eq boolean_invert_second_then_and)) ())))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 121
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction 11} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 82} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction print_newline} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_while () exec_empty boolean_empty boolean_invert_first_then_and integer_eq exec_shove (in2 boolean_and exec_swap () (boolean_pop exec_if (integer_shove 99 tagged_132 integer_flush exec_k_when_autoconstructing (in1) (in4 integer_min print_integer integer_min integer_max integer_dup_items exec_do*count (integer_pop boolean_xor) exec_s_when_autoconstructing (exec_flush exec_y (exec_empty integer_dup 11 integer_yankdup 82 exec_noop integer_pop boolean_invert_first_then_and integer_pop exec_stackdepth) integer_stackdepth) (exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger exec_do*while (print_exec (integer_max boolean_stackdepth boolean_pop exec_stackdepth integer_dup_times exec_s (in1 boolean_frominteger integer_mod) (exec_swap (integer_min) (boolean_dup) tagged_257 in3) (integer_stackdepth boolean_frominteger) boolean_frominteger boolean_dup print_boolean integer_pop integer_dec integer_dup integer_gte)) boolean_rot integer_dup boolean_xor exec_k_when_autoconstructing () (in4) integer_eq) (exec_stackdepth boolean_frominteger) exec_while (integer_min print_newline) integer_rot) (boolean_not exec_yankdup) print_integer exec_k () (integer_flush boolean_pop) tagged_70 integer_mult boolean_eq boolean_invert_second_then_and)) ())))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 121
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 704 222 93 290 630 632 290 290 221)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (291 704 222 93 290 630 632 290 290 221)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_235} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_962} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 82} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_while () exec_empty boolean_invert_first_then_and boolean_empty integer_yank boolean_invert_first_then_and tagged_235 exec_shove (boolean_and integer_shove) tagged_962 99 tagged_132 integer_flush integer_inc exec_k_when_autoconstructing (in1) (in4 integer_min print_integer integer_max integer_dup_items exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (print_integer exec_flush exec_y (exec_empty integer_dup integer_sub integer_yankdup 82 exec_noop integer_pop integer_pop exec_stackdepth) integer_stackdepth) (integer_dec exec_rot (boolean_yank) (boolean_frominteger boolean_pop integer_dup_times exec_s (integer_mod in1 boolean_frominteger integer_lte integer_mod) (exec_swap (integer_min) (boolean_dup) exec_s (in3) (integer_gte boolean_dup_items boolean_frominteger) (boolean_frominteger print_boolean boolean_frominteger integer_mult)) (integer_pop integer_dec integer_dup integer_gte)) (boolean_rot integer_dup exec_flush) boolean_xor exec_k_when_autoconstructing () (integer_dup exec_stackdepth exec_while (exec_dup (integer_min integer_rot) boolean_not exec_yankdup) print_integer exec_k () (exec_eq integer_flush print_exec (boolean_pop) tagged_70 integer_yankdup integer_mult boolean_eq boolean_invert_second_then_and))) ())))
Errors: [0 0 1 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 91
Size: 120
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.337
Median total errors in population: 6
Error averages by case: (0.709 0.296 0.778 0.907 0.71 0.37 0.368 0.71 0.71 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.506
Average program size in population (points): 129.819
Average percent parens in population: 0.263
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1951580
--- Timings ---
Current time: 1559594015234 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.3 seconds, 48.3%
Fitness Testing:      3.0 seconds, 33.5%
Report:               1.5 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: 51                 
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 70                 
Correct output: 53                  | Program output: 90                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 38                 
Correct output: 10                  | Program output: 26                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 46                 
Correct output: 66                  | Program output: 66                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 82                 
Correct output: 6                   | Program output: 57                 
Correct output: 1                   | Program output: 3                  
Correct output: 16                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 68                 
Correct output: 16                  | Program output: 29                 
Correct output: -87                 | Program output: -60                
Correct output: -60                 | Program output: -2                 
Correct output: 26                  | Program output: 26                 
Correct output: -53                 | Program output: -23                
Correct output: -98                 | Program output: 36                 
Correct output: -63                 | Program output: -26                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: 80                 
Correct output: -77                 | Program output: -75                
Correct output: -83                 | Program output: -66                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: 42                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: 19                 
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -60                
Correct output: 10                  | Program output: 45                 
Correct output: -96                 | Program output: -74                
Correct output: -32                 | Program output: 34                 
Correct output: -80                 | Program output: -5                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -40                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: 35                 
Correct output: -40                 | Program output: -22                
Correct output: -59                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -32                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -26                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: 33                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -3                 
Correct output: -75                 | Program output: -36                
Correct output: -96                 | Program output: -81                
Correct output: -29                 | Program output: 43                 
Correct output: -69                 | Program output: -69                
Correct output: -50                 | Program output: -38                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction exec_do*while} {:close 0, :instruction 66} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 82} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_while () exec_yank exec_empty boolean_empty boolean_invert_first_then_and integer_eq exec_shove (boolean_and integer_shove) boolean_pop tagged_962 exec_if (99 exec_do*while (66 tagged_132 integer_flush integer_inc in2) in1) (in4 integer_min print_integer integer_max boolean_dup_items) integer_gte exec_do*count (exec_dup (exec_s_when_autoconstructing (exec_flush exec_y (exec_empty integer_dup integer_yankdup 82 exec_noop integer_pop boolean_invert_first_then_and boolean_flush exec_stackdepth) integer_stackdepth) (exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger exec_do*while (print_exec (integer_flush boolean_stackdepth boolean_pop exec_stackdepth exec_s (in1 boolean_frominteger integer_min) (boolean_yank boolean_dup) (tagged_257 exec_s (in3) (integer_stackdepth boolean_frominteger) (boolean_frominteger integer_shove boolean_frominteger integer_pop exec_swap () (integer_dec integer_dup boolean_rot integer_dup boolean_xor exec_k_when_autoconstructing () (in4) integer_dup exec_stackdepth exec_while (boolean_rot) integer_rot) integer_div boolean_not print_integer exec_yankdup) print_integer exec_k () (integer_yank exec_eq integer_flush exec_rot (boolean_pop) (tagged_70 integer_yankdup integer_mult exec_when (boolean_eq boolean_invert_second_then_and)) ()))))) ()) ())))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 131
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction exec_do*while} {:close 0, :instruction 66} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 82} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_while () exec_yank exec_empty boolean_empty boolean_invert_first_then_and integer_eq exec_shove (boolean_and integer_shove) boolean_pop tagged_962 exec_if (99 exec_do*while (66 tagged_132 integer_flush integer_inc in2) in1) (in4 integer_min print_integer integer_max boolean_dup_items) integer_gte exec_do*count (exec_dup (exec_s_when_autoconstructing (exec_flush exec_y (exec_empty integer_dup integer_yankdup 82 exec_noop integer_pop boolean_invert_first_then_and boolean_flush exec_stackdepth) integer_stackdepth) (exec_yank integer_dec exec_rot (boolean_yank) (boolean_frominteger exec_do*while (print_exec (integer_flush boolean_stackdepth boolean_pop exec_stackdepth exec_s (in1 boolean_frominteger integer_min) (boolean_yank boolean_dup) (tagged_257 exec_s (in3) (integer_stackdepth boolean_frominteger) (boolean_frominteger integer_shove boolean_frominteger integer_pop exec_swap () (integer_dec integer_dup boolean_rot integer_dup boolean_xor exec_k_when_autoconstructing () (in4) integer_dup exec_stackdepth exec_while (boolean_rot) integer_rot) integer_div boolean_not print_integer exec_yankdup) print_integer exec_k () (integer_yank exec_eq integer_flush exec_rot (boolean_pop) (tagged_70 integer_yankdup integer_mult exec_when (boolean_eq boolean_invert_second_then_and)) ()))))) ()) ())))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 131
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 477 470 634 593 633 337 607 331 339)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (208 477 470 634 593 633 337 607 331 339)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 82} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction -53} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_while () exec_empty boolean_empty boolean_invert_first_then_and exec_dup_items integer_eq exec_shove (boolean_and integer_shove) boolean_pop exec_if (tagged_132 integer_flush integer_inc exec_k_when_autoconstructing (in1) (in4 integer_min print_integer integer_max integer_dup_items exec_shove (exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush integer_dup exec_y (integer_inc integer_dup integer_yankdup 82 exec_noop integer_pop boolean_invert_first_then_and integer_pop exec_stackdepth) integer_stackdepth) (integer_dec exec_flush boolean_yank) (exec_do*while (exec_do*count (print_exec (exec_stackdepth integer_dup_times exec_s (integer_mod in1 exec_do*times () boolean_frominteger integer_mod) (exec_swap (integer_min) (boolean_dup) tagged_257 exec_s (integer_gte integer_stackdepth boolean_frominteger) (boolean_frominteger print_boolean exec_pop (boolean_frominteger integer_dec integer_dup integer_gte)) (integer_yank boolean_rot -53 integer_dup boolean_xor exec_k_when_autoconstructing () (integer_dup exec_stackdepth boolean_frominteger) integer_min boolean_not exec_yankdup) print_integer exec_k () (exec_eq boolean_pop) tagged_70 boolean_yankdup integer_yankdup integer_mult integer_inc integer_sub boolean_eq boolean_invert_second_then_and) ())))))))) ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 92
Size: 123
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 5.371
Median total errors in population: 5
Error averages by case: (0.792 0.523 0.53 0.366 0.407 0.367 0.663 0.393 0.669 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.559
Average program size in population (points): 129.965
Average percent parens in population: 0.263
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2379495
--- Timings ---
Current time: 1559594017180 milliseconds
Total Time:          10.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.4 seconds, 50.3%
Fitness Testing:      3.3 seconds, 31.0%
Report:               1.9 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: 51                 
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 60                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 87                 
Correct output: 66                  | Program output: 90                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 91                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 29                 
Correct output: -87                 | Program output: -60                
Correct output: -60                 | Program output: 4                  
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: 46                 
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 83                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -50                
Correct output: 10                  | Program output: 45                 
Correct output: -96                 | Program output: -19                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -5                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -55                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 65                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: 38                 
Correct output: -75                 | Program output: -68                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: 73                 
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: 71                 
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_132} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_569} {:close 2, :instruction exec_noop} {:close 1, :instruction 81} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_502} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_dup_items exec_empty integer_gt boolean_invert_first_then_and integer_eq boolean_eq exec_dup_times (integer_shove) exec_dup_times (boolean_pop tagged_962 exec_s (exec_yank exec_if (exec_s (tagged_132 in3) (exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer integer_dup_items exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (boolean_frominteger) (exec_flush exec_y (exec_empty tagged_569 exec_noop)) (81) integer_yankdup exec_noop boolean_shove integer_pop exec_stackdepth) exec_yank exec_yank) integer_dec exec_rot (boolean_yank) (integer_flush boolean_swap boolean_frominteger exec_do*while (boolean_stackdepth boolean_pop exec_stackdepth exec_flush) integer_dup_times exec_s (integer_empty boolean_flush in1 print_integer integer_mod) (exec_swap (exec_stackdepth integer_min) (tag_boolean_502 exec_dup_items boolean_dup) exec_s (integer_gte exec_dup_items) (exec_pop (integer_dec print_boolean exec_if (integer_pop integer_gt boolean_rot integer_dup exec_if (exec_do*times (boolean_xor exec_k_when_autoconstructing () (integer_dup integer_add exec_stackdepth in4 boolean_pop integer_swap integer_min integer_rot) boolean_not exec_y_when_autoconstructing (print_integer boolean_not exec_eq integer_flush integer_dec integer_sub boolean_pop) boolean_invert_second_then_and)) ()) ())) ()) ()) ()) ()) ()) ()) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 140
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_132} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_569} {:close 2, :instruction exec_noop} {:close 1, :instruction 81} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_502} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_dup_items exec_empty integer_gt boolean_invert_first_then_and integer_eq boolean_eq exec_dup_times (integer_shove) exec_dup_times (boolean_pop tagged_962 exec_s (exec_yank exec_if (exec_s (tagged_132 in3) (exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer integer_dup_items exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (boolean_frominteger) (exec_flush exec_y (exec_empty tagged_569 exec_noop)) (81) integer_yankdup exec_noop boolean_shove integer_pop exec_stackdepth) exec_yank exec_yank) integer_dec exec_rot (boolean_yank) (integer_flush boolean_swap boolean_frominteger exec_do*while (boolean_stackdepth boolean_pop exec_stackdepth exec_flush) integer_dup_times exec_s (integer_empty boolean_flush in1 print_integer integer_mod) (exec_swap (exec_stackdepth integer_min) (tag_boolean_502 exec_dup_items boolean_dup) exec_s (integer_gte exec_dup_items) (exec_pop (integer_dec print_boolean exec_if (integer_pop integer_gt boolean_rot integer_dup exec_if (exec_do*times (boolean_xor exec_k_when_autoconstructing () (integer_dup integer_add exec_stackdepth in4 boolean_pop integer_swap integer_min integer_rot) boolean_not exec_y_when_autoconstructing (print_integer boolean_not exec_eq integer_flush integer_dec integer_sub boolean_pop) boolean_invert_second_then_and)) ()) ())) ()) ()) ()) ()) ()) ()) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 140
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (231 223 435 5 429 224 5 213 436 212)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (231 223 435 5 429 224 5 213 436 212)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction 78} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 1, :instruction 81} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_502} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop})
Best program: (exec_while () boolean_empty boolean_invert_first_then_and boolean_eq integer_shove boolean_pop exec_if (99 tagged_132 integer_flush integer_min in3) (integer_dup_times exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_flush boolean_xor integer_pop exec_do*count (exec_dup (integer_dup boolean_xor) exec_flush exec_y (78 integer_flush boolean_xor exec_empty exec_noop)) 81) (integer_yankdup exec_noop boolean_invert_first_then_and boolean_flush) (integer_pop boolean_and integer_pop exec_stackdepth) integer_stackdepth) exec_yank integer_gte integer_dec boolean_frominteger exec_do*while (print_exec (boolean_stackdepth boolean_pop exec_flush) integer_dup_times exec_s (in1 boolean_frominteger boolean_flush integer_mod) (exec_swap (tag_boolean_502 boolean_dup) (exec_shove (in3) boolean_eq integer_min integer_gte integer_add integer_stackdepth boolean_frominteger integer_dec integer_gt exec_stackdepth) integer_gte) () in4 boolean_rot integer_dup boolean_xor boolean_shove exec_stackdepth in4 exec_do*times (boolean_pop integer_min integer_rot) boolean_not exec_yankdup) integer_add integer_rot exec_k () (exec_do*times (boolean_frominteger exec_eq integer_add tagged_70 integer_mult boolean_pop))))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 95
Size: 119
Percent parens: 0.202
--- Population Statistics ---
Average total errors in population: 7.587
Median total errors in population: 7
Error averages by case: (0.769 0.777 0.565 0.995 0.571 0.776 0.995 0.787 0.564 0.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.23
Average program size in population (points): 128.339
Average percent parens in population: 0.257
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2828687
--- Timings ---
Current time: 1559594019086 milliseconds
Total Time:          12.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.6 seconds, 51.6%
Fitness Testing:      3.7 seconds, 29.4%
Report:               2.3 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: 92                 
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 84                 
Correct output: 53                  | Program output: 53                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 41                 
Correct output: 4                   | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 10                  | Program output: 26                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 66                  | Program output: 66                 
Correct output: 29                  | Program output: 59                 
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 40                 
Correct output: 8                   | Program output: 52                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 48                 
Correct output: 22                  | Program output: 62                 
Correct output: 16                  | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 26                 
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: 36                 
Correct output: -63                 | Program output: -34                
Correct output: -84                 | Program output: -48                
Correct output: -12                 | Program output: 32                 
Correct output: -100                | Program output: 80                 
Correct output: -77                 | Program output: -75                
Correct output: -83                 | Program output: -1                 
Correct output: 33                  | Program output: 90                 
Correct output: -81                 | Program output: -62                
Correct output: -100                | Program output: -28                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -33                
Correct output: -96                 | Program output: -7                 
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: 43                 
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: 73                 
Correct output: -26                 | Program output: 87                 
Correct output: -37                 | Program output: -37                
Correct output: -58                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -41                
Correct output: -29                 | Program output: 2                  
Correct output: -64                 | Program output: 35                 
Correct output: -40                 | Program output: 74                 
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -32                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -64                
Correct output: -77                 | Program output: -56                
Correct output: -44                 | Program output: -16                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -61                
Correct output: -82                 | Program output: -59                
Correct output: -92                 | Program output: -52                
Correct output: -64                 | Program output: -36                
Correct output: -95                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: -81                
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: -69                
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: 52                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction -2} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_751} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction -47} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_empty boolean_invert_first_then_and integer_eq boolean_and integer_shove boolean_pop exec_if (99 tagged_132 exec_do*times (integer_inc exec_k_when_autoconstructing (in1) (in4 in2 exec_dup (integer_min print_integer integer_max integer_dup_items boolean_shove exec_do*count (exec_s_when_autoconstructing (exec_flush -2 exec_y (boolean_yankdup integer_dup integer_yankdup exec_noop exec_swap (exec_dup_items print_exec (boolean_invert_first_then_and boolean_empty integer_pop tag_integer_751 exec_stackdepth) -47 integer_stackdepth) (exec_yank integer_dec integer_lt exec_rot (boolean_invert_second_then_and boolean_yank) (exec_stackdepth exec_k (boolean_frominteger print_exec (boolean_stackdepth boolean_rot) exec_stackdepth integer_dup_times integer_mod) (exec_swap (exec_y_when_autoconstructing (tagged_257 exec_s (exec_shove (in3) integer_gte integer_yank) (integer_stackdepth boolean_frominteger) (integer_div) boolean_frominteger integer_gt) boolean_frominteger integer_pop in3 integer_gte) () boolean_rot boolean_invert_first_then_and integer_yankdup integer_dup boolean_pop boolean_xor exec_k_when_autoconstructing () (in4) exec_stackdepth boolean_frominteger) exec_while (integer_min integer_rot) boolean_not exec_yankdup) (exec_do*range (print_integer exec_k () (exec_eq exec_if (integer_flush exec_rot (tagged_70 integer_yankdup) () ()) ())))))) () ()))))) ())
Lexicase best errors: [0 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 135
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction 99} {:close 0, :instruction tagged_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction -2} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_751} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction -47} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_empty boolean_invert_first_then_and integer_eq boolean_and integer_shove boolean_pop exec_if (99 tagged_132 exec_do*times (integer_inc exec_k_when_autoconstructing (in1) (in4 in2 exec_dup (integer_min print_integer integer_max integer_dup_items boolean_shove exec_do*count (exec_s_when_autoconstructing (exec_flush -2 exec_y (boolean_yankdup integer_dup integer_yankdup exec_noop exec_swap (exec_dup_items print_exec (boolean_invert_first_then_and boolean_empty integer_pop tag_integer_751 exec_stackdepth) -47 integer_stackdepth) (exec_yank integer_dec integer_lt exec_rot (boolean_invert_second_then_and boolean_yank) (exec_stackdepth exec_k (boolean_frominteger print_exec (boolean_stackdepth boolean_rot) exec_stackdepth integer_dup_times integer_mod) (exec_swap (exec_y_when_autoconstructing (tagged_257 exec_s (exec_shove (in3) integer_gte integer_yank) (integer_stackdepth boolean_frominteger) (integer_div) boolean_frominteger integer_gt) boolean_frominteger integer_pop in3 integer_gte) () boolean_rot boolean_invert_first_then_and integer_yankdup integer_dup boolean_pop boolean_xor exec_k_when_autoconstructing () (in4) exec_stackdepth boolean_frominteger) exec_while (integer_min integer_rot) boolean_not exec_yankdup) (exec_do*range (print_integer exec_k () (exec_eq exec_if (integer_flush exec_rot (tagged_70 integer_yankdup) () ()) ())))))) () ()))))) ())
Zero cases best errors: [0 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 135
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 451 418 112 112 419 455 116 112 119)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (116 451 418 112 112 419 455 116 112 119)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction 99} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_183} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 82} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_257} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tag_exec_829} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq})
Best program: (integer_yankdup exec_empty integer_gte boolean_empty integer_eq exec_rot (integer_shove boolean_and integer_shove) (boolean_pop exec_dup_times () 99 integer_flush integer_inc exec_k_when_autoconstructing (boolean_dup_items in1) (in3 in2) tag_exec_183 () in4 integer_min exec_empty print_integer integer_dup_items exec_do*count (exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush integer_yankdup 82 in2 integer_pop integer_gte boolean_invert_first_then_and in4) () (print_boolean boolean_swap integer_pop exec_yank integer_dec boolean_frominteger exec_do*while (exec_stackdepth) print_exec (boolean_stackdepth boolean_pop exec_stackdepth integer_dup_times in4 exec_s (integer_mod boolean_frominteger exec_swap (integer_min) (boolean_dup) tagged_257 exec_s (in3) (integer_gte boolean_frominteger integer_dec integer_gte) () boolean_eq boolean_frominteger) (boolean_rot integer_dup boolean_xor exec_k_when_autoconstructing () (boolean_dup_times integer_dup_times) in4) (exec_stackdepth boolean_frominteger) integer_min integer_rot) exec_yankdup) exec_eq exec_do*count () exec_yankdup) tag_exec_829 () tagged_70 integer_yankdup exec_dup_times (integer_mult boolean_eq)) ())
Errors: [0 1 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 87
Size: 115
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.57
Median total errors in population: 8
Error averages by case: (0.884 0.549 0.582 0.888 0.888 0.581 0.545 0.884 0.888 0.881)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.219
Average program size in population (points): 132.761
Average percent parens in population: 0.274
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3382167
--- Timings ---
Current time: 1559594021150 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.7 seconds, 52.5%
Fitness Testing:      4.2 seconds, 28.5%
Report:               2.7 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: 51                 
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 60                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 87                 
Correct output: 66                  | Program output: 90                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 91                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 29                 
Correct output: -87                 | Program output: -60                
Correct output: -60                 | Program output: 4                  
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: 46                 
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 83                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -50                
Correct output: 10                  | Program output: 45                 
Correct output: -96                 | Program output: -19                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -5                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -55                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 65                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: 38                 
Correct output: -75                 | Program output: -68                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: 73                 
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: 71                 
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction tagged_132} {:close 0, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 1, :instruction tag_boolean_551} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_empty exec_dup_times (integer_dec integer_eq integer_shove) exec_dup_times (boolean_pop tagged_962 exec_if (in1) (tagged_132 in3 in3) integer_min exec_k_when_autoconstructing (integer_min print_integer exec_shove (boolean_shove integer_dup_items exec_do*count (exec_do*while (exec_s_when_autoconstructing (exec_s (in1 integer_flush exec_y () exec_noop) () (exec_stackdepth print_integer integer_yankdup integer_flush exec_noop boolean_shove integer_pop boolean_invert_first_then_and exec_pop (exec_y (integer_pop boolean_not exec_stackdepth) integer_stackdepth) exec_flush exec_yank exec_rot (exec_s (boolean_yank) (print_exec () boolean_frominteger exec_do*while (print_exec (exec_stackdepth exec_flush) exec_s (exec_k () (boolean_frominteger integer_mod) tag_boolean_551) (exec_swap (integer_min) (print_boolean boolean_dup) integer_div boolean_yankdup integer_lte in3) (integer_gt boolean_pop integer_stackdepth integer_dup_times exec_dup_items) integer_mod boolean_frominteger) boolean_frominteger print_boolean integer_gt boolean_rot integer_swap integer_dup boolean_dup exec_do*times (boolean_xor exec_when () integer_gte) boolean_invert_second_then_and) (integer_sub integer_dup integer_min integer_fromboolean) exec_yankdup) (print_integer exec_eq boolean_frominteger integer_flush boolean_pop) (integer_sub tagged_70 integer_mult boolean_eq boolean_invert_second_then_and integer_lt))) () ())))) ()))
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 138
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction tagged_132} {:close 0, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 1, :instruction tag_boolean_551} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_empty exec_dup_times (integer_dec integer_eq integer_shove) exec_dup_times (boolean_pop tagged_962 exec_if (in1) (tagged_132 in3 in3) integer_min exec_k_when_autoconstructing (integer_min print_integer exec_shove (boolean_shove integer_dup_items exec_do*count (exec_do*while (exec_s_when_autoconstructing (exec_s (in1 integer_flush exec_y () exec_noop) () (exec_stackdepth print_integer integer_yankdup integer_flush exec_noop boolean_shove integer_pop boolean_invert_first_then_and exec_pop (exec_y (integer_pop boolean_not exec_stackdepth) integer_stackdepth) exec_flush exec_yank exec_rot (exec_s (boolean_yank) (print_exec () boolean_frominteger exec_do*while (print_exec (exec_stackdepth exec_flush) exec_s (exec_k () (boolean_frominteger integer_mod) tag_boolean_551) (exec_swap (integer_min) (print_boolean boolean_dup) integer_div boolean_yankdup integer_lte in3) (integer_gt boolean_pop integer_stackdepth integer_dup_times exec_dup_items) integer_mod boolean_frominteger) boolean_frominteger print_boolean integer_gt boolean_rot integer_swap integer_dup boolean_dup exec_do*times (boolean_xor exec_when () integer_gte) boolean_invert_second_then_and) (integer_sub integer_dup integer_min integer_fromboolean) exec_yankdup) (print_integer exec_eq boolean_frominteger integer_flush boolean_pop) (integer_sub tagged_70 integer_mult boolean_eq boolean_invert_second_then_and integer_lt))) () ())))) ()))
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 138
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (292 260 247 294 250 260 261 257 250 604)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (292 260 247 294 250 260 261 257 250 604)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_962} {:close 0, :instruction tagged_132} {:close 0, :instruction integer_flush} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_noop} {:close 1, :instruction 81} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction -49} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_while () exec_pop (in4 boolean_empty boolean_invert_first_then_and integer_eq boolean_invert_second_then_and exec_yankdup) exec_dup_times (boolean_pop tagged_962 tagged_132 integer_flush in3) in2 integer_dup_items exec_noop exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_max exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_y (integer_flush boolean_not exec_empty exec_noop)) (81) (integer_mod integer_yankdup integer_inc integer_yank boolean_invert_first_then_and integer_pop exec_stackdepth) integer_stackdepth) (integer_dec boolean_stackdepth) (exec_rot (boolean_shove boolean_eq) (in1 boolean_frominteger exec_do*while (exec_flush print_exec (boolean_stackdepth boolean_pop exec_k_when_autoconstructing () (in2 exec_flush) exec_stackdepth exec_s (boolean_frominteger integer_mod) (exec_dup_times (exec_swap (integer_min) (boolean_dup) exec_s (integer_fromboolean boolean_pop) (integer_gte exec_dup_items) (boolean_frominteger) integer_gt boolean_stackdepth tag_boolean_58 integer_gte)) (boolean_rot boolean_dup_times integer_stackdepth integer_dup exec_rot (integer_stackdepth boolean_xor exec_k_when_autoconstructing () (integer_mult) exec_stackdepth exec_do*range (boolean_pop integer_dup exec_dup_times (integer_rot) boolean_not print_integer exec_dup_items exec_dup_times (boolean_shove) exec_eq integer_flush boolean_pop) integer_mod) (-49 integer_mult integer_eq print_boolean boolean_eq boolean_invert_second_then_and) ())))) ()))) ())
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 104
Size: 144
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.025
Median total errors in population: 7
Error averages by case: (0.708 0.74 0.753 0.706 0.75 0.74 0.739 0.743 0.75 0.396)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.774
Average program size in population (points): 131.991
Average percent parens in population: 0.273
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3875969
--- Timings ---
Current time: 1559594023632 milliseconds
Total Time:          16.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 53.1%
Fitness Testing:      4.6 seconds, 27.6%
Report:               3.1 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 53                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 26                 
Correct output: 66                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 18                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 33                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction -67} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_dup_items boolean_empty boolean_invert_first_then_and integer_gt boolean_yank boolean_dup_times integer_eq integer_dup_items integer_max boolean_pop integer_lt exec_if (integer_swap in2) (boolean_invert_first_then_and in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_flush integer_flush exec_empty in3 print_newline) (-67 print_exec (exec_noop integer_pop integer_stackdepth) exec_yank integer_dec exec_empty print_exec (boolean_yank) boolean_shove boolean_frominteger exec_eq exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (in1 integer_mod) (boolean_empty) (boolean_dup) exec_s (in3) (tag_integer_233 integer_gte integer_stackdepth exec_dup_items) (boolean_frominteger) exec_do*range () integer_dec print_boolean integer_pop exec_yankdup integer_gt boolean_pop integer_mod integer_dec integer_gte)) (integer_mod boolean_rot integer_dup exec_k_when_autoconstructing () (exec_shove () exec_do*times (exec_stackdepth in4 82 exec_do*while (integer_min exec_yankdup) print_integer boolean_and exec_k () (exec_if () (integer_flush boolean_pop) tagged_70 integer_mult boolean_eq))))) () ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 126
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction -67} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_dup_items boolean_empty boolean_invert_first_then_and integer_gt boolean_yank boolean_dup_times integer_eq integer_dup_items integer_max boolean_pop integer_lt exec_if (integer_swap in2) (boolean_invert_first_then_and in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_flush integer_flush exec_empty in3 print_newline) (-67 print_exec (exec_noop integer_pop integer_stackdepth) exec_yank integer_dec exec_empty print_exec (boolean_yank) boolean_shove boolean_frominteger exec_eq exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (in1 integer_mod) (boolean_empty) (boolean_dup) exec_s (in3) (tag_integer_233 integer_gte integer_stackdepth exec_dup_items) (boolean_frominteger) exec_do*range () integer_dec print_boolean integer_pop exec_yankdup integer_gt boolean_pop integer_mod integer_dec integer_gte)) (integer_mod boolean_rot integer_dup exec_k_when_autoconstructing () (exec_shove () exec_do*times (exec_stackdepth in4 82 exec_do*while (integer_min exec_yankdup) print_integer boolean_and exec_k () (exec_if () (integer_flush boolean_pop) tagged_70 integer_mult boolean_eq))))) () ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 126
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (453 248 421 29 451 283 448 597 416 637)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (453 248 421 29 451 283 448 597 416 637)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction -67} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq})
Best program: (exec_dup_items boolean_empty boolean_invert_first_then_and integer_gt boolean_yank boolean_dup_times integer_eq integer_dup_items integer_max boolean_pop integer_lt exec_if (integer_swap in2) (boolean_invert_first_then_and in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_flush integer_flush exec_empty in3 print_newline) (-67 print_exec (exec_noop integer_pop integer_stackdepth) exec_yank integer_dec exec_empty print_exec (boolean_yank) boolean_shove boolean_frominteger exec_eq exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (in1 integer_mod) (boolean_empty) (boolean_dup) exec_s (in3) (tag_integer_233 integer_gte integer_stackdepth exec_dup_items) (boolean_frominteger) exec_do*range () integer_dec print_boolean integer_pop exec_yankdup integer_gt boolean_pop integer_mod integer_dec integer_gte)) (integer_mod boolean_rot integer_dup exec_k_when_autoconstructing () (exec_shove () exec_do*times (exec_stackdepth in4 82 exec_do*while (integer_min exec_yankdup) print_integer boolean_and exec_k () (exec_if () (integer_flush boolean_pop) tagged_70 integer_mult boolean_eq))))) () ()))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 94
Size: 126
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 6.017
Median total errors in population: 5
Error averages by case: (0.547 0.752 0.579 0.971 0.549 0.717 0.552 0.403 0.584 0.363)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.907
Average program size in population (points): 128.772
Average percent parens in population: 0.270
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4401436
--- Timings ---
Current time: 1559594025622 milliseconds
Total Time:          19.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.0 seconds, 52.1%
Fitness Testing:      5.1 seconds, 26.3%
Report:               4.0 seconds, 21.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 467
Test mean error for best: 0.46700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: 23                  | Program output: 0                  
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 0                  
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 0                  
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 0                  
Correct output: 25                  | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 0                  
Correct output: 50                  | Program output: 0                  
Correct output: 66                  | Program output: 0                  
Correct output: 53                  | Program output: 0                  
Correct output: 26                  | Program output: 0                  
Correct output: 5                   | Program output: 0                  
Correct output: 4                   | Program output: 0                  
Correct output: 35                  | Program output: 0                  
Correct output: 10                  | Program output: 0                  
Correct output: 12                  | Program output: 0                  
Correct output: 26                  | Program output: 0                  
Correct output: 66                  | Program output: 0                  
Correct output: 29                  | Program output: 0                  
Correct output: 5                   | Program output: 0                  
Correct output: 6                   | Program output: 0                  
Correct output: 1                   | Program output: 0                  
Correct output: 16                  | Program output: 0                  
Correct output: 8                   | Program output: 0                  
Correct output: 9                   | Program output: 0                  
Correct output: 3                   | Program output: 0                  
Correct output: 22                  | Program output: 0                  
Correct output: 16                  | Program output: 0                  
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 0                  
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: 0                  
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 0                  
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 0                  
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 0                  
Correct output: -32                 | Program output: 0                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: 0                  
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -67} {:close 2, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_dup_items boolean_empty boolean_invert_first_then_and integer_gt boolean_yank integer_yank boolean_dup_times integer_eq integer_dup_items integer_max boolean_pop integer_lt exec_if (in2) (boolean_invert_first_then_and in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_flush integer_flush exec_empty exec_k (in3 print_newline) (boolean_invert_first_then_and) -67 boolean_or) () (print_exec (exec_noop integer_pop integer_stackdepth) exec_yank integer_dec print_exec (boolean_yank) boolean_frominteger exec_eq print_exec (exec_flush) integer_dup_times exec_s (in1 integer_mod) (boolean_empty) (boolean_dup) integer_lt exec_s (boolean_shove tag_integer_233 integer_gte integer_stackdepth exec_dup_items) (exec_if (boolean_frominteger) (exec_do*range () integer_dec print_boolean exec_k_when_autoconstructing (integer_pop exec_yankdup integer_gt boolean_pop integer_mod integer_dec integer_gte) () integer_mod boolean_rot integer_dup exec_k_when_autoconstructing () (exec_shove () exec_do*times (exec_stackdepth 82 exec_do*while (integer_min print_integer boolean_and exec_k () (exec_if () (integer_dup_times) integer_flush boolean_pop) tagged_70 integer_mult boolean_eq))))) ())) () ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 133
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -67} {:close 2, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_dup_items boolean_empty boolean_invert_first_then_and integer_gt boolean_yank integer_yank boolean_dup_times integer_eq integer_dup_items integer_max boolean_pop integer_lt exec_if (in2) (boolean_invert_first_then_and in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_flush integer_flush exec_empty exec_k (in3 print_newline) (boolean_invert_first_then_and) -67 boolean_or) () (print_exec (exec_noop integer_pop integer_stackdepth) exec_yank integer_dec print_exec (boolean_yank) boolean_frominteger exec_eq print_exec (exec_flush) integer_dup_times exec_s (in1 integer_mod) (boolean_empty) (boolean_dup) integer_lt exec_s (boolean_shove tag_integer_233 integer_gte integer_stackdepth exec_dup_items) (exec_if (boolean_frominteger) (exec_do*range () integer_dec print_boolean exec_k_when_autoconstructing (integer_pop exec_yankdup integer_gt boolean_pop integer_mod integer_dec integer_gte) () integer_mod boolean_rot integer_dup exec_k_when_autoconstructing () (exec_shove () exec_do*times (exec_stackdepth 82 exec_do*while (integer_min print_integer boolean_and exec_k () (exec_if () (integer_dup_times) integer_flush boolean_pop) tagged_70 integer_mult boolean_eq))))) ())) () ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 133
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (460 489 421 225 456 454 492 487 420 628)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (460 489 421 225 456 454 492 487 420 628)
Population mean number of perfect (error zero) cases: 4.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction -67} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult})
Best program: (exec_dup_items boolean_empty boolean_invert_first_then_and integer_gt boolean_yank integer_eq integer_dup_items integer_max boolean_pop integer_lt exec_if (integer_swap in2) (boolean_invert_first_then_and in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min exec_do*count (print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and boolean_xor) (exec_s_when_autoconstructing (exec_yankdup) (exec_flush exec_flush integer_flush exec_empty in3 print_newline) (-67 print_exec (exec_noop integer_pop integer_stackdepth) exec_yank integer_dec exec_y_when_autoconstructing (exec_empty print_exec (boolean_yank) exec_rot (boolean_shove boolean_frominteger print_integer exec_eq exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (in1 integer_mod) (boolean_empty) (boolean_dup) exec_s (in3) (tag_integer_233 integer_gte integer_stackdepth exec_dup_items) (boolean_frominteger) exec_do*range () integer_dec print_boolean integer_pop exec_yankdup integer_gt boolean_pop integer_mod integer_dec integer_gte)) (boolean_rot boolean_stackdepth integer_dup exec_k_when_autoconstructing () (exec_shove () exec_do*times (exec_stackdepth in4 82 exec_do*while (integer_min exec_yankdup) print_integer boolean_and boolean_xor) exec_k () (exec_if () (integer_flush boolean_pop) tagged_70 integer_mult))) ()))) ())))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 97
Size: 133
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 5.468
Median total errors in population: 5
Error averages by case: (0.54 0.511 0.579 0.775 0.544 0.546 0.508 0.513 0.58 0.372)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 100.915
Average program size in population (points): 135.83
Average percent parens in population: 0.257
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4768149
--- Timings ---
Current time: 1559594027505 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.2 seconds, 52.9%
Fitness Testing:      5.4 seconds, 25.5%
Report:               4.4 seconds, 21.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 53                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 26                 
Correct output: 66                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 18                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 33                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction -67} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_233} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_dup_items boolean_empty boolean_invert_first_then_and integer_gt boolean_dup_times integer_eq boolean_and integer_max boolean_pop integer_lt exec_if (in2) (in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (boolean_and integer_flush exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_do*while (exec_flush integer_flush exec_empty in3 print_newline) -67 print_exec (exec_noop integer_pop integer_stackdepth) exec_yank exec_empty print_exec (exec_rot (integer_add boolean_yank) (boolean_eq boolean_shove boolean_frominteger exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (integer_mod) (boolean_empty) (boolean_dup) exec_s (tag_integer_233 exec_while (integer_gte boolean_dup integer_stackdepth boolean_frominteger) exec_do*range () integer_dec print_boolean exec_yankdup boolean_pop integer_mod integer_dec integer_gte) () (integer_mod boolean_rot integer_dup exec_k_when_autoconstructing () (exec_shove () print_integer exec_do*times (exec_stackdepth 82 exec_do*while (integer_min exec_yankdup) print_integer boolean_and exec_k () (boolean_not) integer_flush boolean_pop) tagged_70 integer_mult exec_k_when_autoconstructing (boolean_swap integer_yank) (boolean_eq))))) ())) () ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 130
Percent parens: 0.285
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction -67} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_233} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_dup_items boolean_empty boolean_invert_first_then_and integer_gt boolean_dup_times integer_eq boolean_and integer_max boolean_pop integer_lt exec_if (in2) (in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (boolean_and integer_flush exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_do*while (exec_flush integer_flush exec_empty in3 print_newline) -67 print_exec (exec_noop integer_pop integer_stackdepth) exec_yank exec_empty print_exec (exec_rot (integer_add boolean_yank) (boolean_eq boolean_shove boolean_frominteger exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (integer_mod) (boolean_empty) (boolean_dup) exec_s (tag_integer_233 exec_while (integer_gte boolean_dup integer_stackdepth boolean_frominteger) exec_do*range () integer_dec print_boolean exec_yankdup boolean_pop integer_mod integer_dec integer_gte) () (integer_mod boolean_rot integer_dup exec_k_when_autoconstructing () (exec_shove () print_integer exec_do*times (exec_stackdepth 82 exec_do*while (integer_min exec_yankdup) print_integer boolean_and exec_k () (boolean_not) integer_flush boolean_pop) tagged_70 integer_mult exec_k_when_autoconstructing (boolean_swap integer_yank) (boolean_eq))))) ())) () ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 130
Percent parens: 0.285
--- Lexicase Population Statistics ---
Count of elite individuals by case: (518 521 654 718 505 415 513 222 522 419)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (518 521 654 718 505 415 513 222 522 419)
Population mean number of perfect (error zero) cases: 5.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction -67} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction -37} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction 82} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq})
Best program: (exec_pop (integer_swap) exec_dup_items boolean_empty boolean_invert_first_then_and integer_gt boolean_yank boolean_dup_times integer_dup_items integer_max boolean_pop integer_lt exec_if (integer_swap in2) (boolean_invert_first_then_and in3) integer_min integer_swap exec_k_when_autoconstructing (exec_if (in1) (integer_min print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup_items exec_dup (boolean_xor) exec_s_when_autoconstructing (exec_do*while (exec_flush exec_flush boolean_yank integer_flush integer_flush) exec_empty in3 print_newline) (-67 print_exec (integer_pop exec_dup (integer_dec exec_empty boolean_yank) boolean_frominteger exec_eq integer_dup) exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (in1 boolean_empty) (exec_s (in3) (integer_gte integer_stackdepth exec_dup_items) (exec_do*range () integer_dec print_boolean integer_pop exec_yankdup integer_gt -37 boolean_pop integer_mod integer_mod integer_dec integer_gte)) (integer_mod exec_pop (integer_dup exec_shove () exec_do*times (exec_stackdepth in4 82 exec_eq exec_do*while (integer_min exec_yankdup) print_integer boolean_pop)) boolean_and exec_k () (integer_dec exec_if () (integer_flush boolean_and tagged_70 integer_mult boolean_eq))))) ()) () ())) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 97
Size: 132
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 4.993
Median total errors in population: 4
Error averages by case: (0.482 0.479 0.346 0.282 0.495 0.585 0.487 0.778 0.478 0.581)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 98.534
Average program size in population (points): 132.541
Average percent parens in population: 0.256
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5126896
--- Timings ---
Current time: 1559594029388 milliseconds
Total Time:          23.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.3 seconds, 53.5%
Fitness Testing:      5.7 seconds, 24.8%
Report:               4.9 seconds, 21.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 53                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 26                 
Correct output: 66                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 18                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 33                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction tag_integer_264} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_dup_items boolean_empty integer_gt boolean_yank integer_dup_items integer_max exec_do*range (exec_do*times (boolean_pop boolean_flush exec_if (integer_min) (integer_swap in2) boolean_invert_first_then_and in3) integer_min integer_swap in1) integer_min print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (exec_do*range (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_yankdup boolean_not integer_flush exec_empty boolean_or exec_noop integer_pop exec_yank integer_dec boolean_swap exec_empty print_exec (boolean_shove exec_eq exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (in1 integer_mod) (boolean_dup boolean_empty) (integer_yankdup integer_gte integer_stackdepth exec_dup_times () exec_dup_items) boolean_rot) boolean_dup_items exec_stackdepth)) (exec_do*range () integer_dec exec_if () (print_boolean exec_yankdup boolean_xor) print_integer integer_pop boolean_not exec_yankdup exec_when (integer_gt boolean_pop integer_mod integer_dec in3 exec_do*while (integer_gte)) integer_mod boolean_rot integer_dup exec_k_when_autoconstructing () (exec_do*times (exec_stackdepth in4 82 exec_do*while (integer_min exec_yankdup) exec_k () (tag_integer_264 boolean_pop) tagged_70 exec_s_when_autoconstructing (integer_mult exec_k (exec_flush boolean_eq) ()) () ()))) ())) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 134
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction tag_integer_264} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_dup_items boolean_empty integer_gt boolean_yank integer_dup_items integer_max exec_do*range (exec_do*times (boolean_pop boolean_flush exec_if (integer_min) (integer_swap in2) boolean_invert_first_then_and in3) integer_min integer_swap in1) integer_min print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (exec_do*range (boolean_xor) exec_s_when_autoconstructing (exec_flush exec_yankdup boolean_not integer_flush exec_empty boolean_or exec_noop integer_pop exec_yank integer_dec boolean_swap exec_empty print_exec (boolean_shove exec_eq exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (in1 integer_mod) (boolean_dup boolean_empty) (integer_yankdup integer_gte integer_stackdepth exec_dup_times () exec_dup_items) boolean_rot) boolean_dup_items exec_stackdepth)) (exec_do*range () integer_dec exec_if () (print_boolean exec_yankdup boolean_xor) print_integer integer_pop boolean_not exec_yankdup exec_when (integer_gt boolean_pop integer_mod integer_dec in3 exec_do*while (integer_gte)) integer_mod boolean_rot integer_dup exec_k_when_autoconstructing () (exec_do*times (exec_stackdepth in4 82 exec_do*while (integer_min exec_yankdup) exec_k () (tag_integer_264 boolean_pop) tagged_70 exec_s_when_autoconstructing (integer_mult exec_k (exec_flush boolean_eq) ()) () ()))) ())) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 134
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (471 477 480 419 627 240 420 474 479 456)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (471 477 480 419 627 240 420 474 479 456)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 3, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 86} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 0, :instruction -67} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 1, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 39} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction boolean_eq})
Best program: (exec_dup_items boolean_empty boolean_invert_first_then_and exec_do*times () integer_stackdepth boolean_yank boolean_or boolean_invert_second_then_and integer_eq integer_dup_items integer_max boolean_pop integer_lt exec_dup_times (in2) boolean_invert_first_then_and in3 integer_min integer_swap exec_k_when_autoconstructing (in1) (boolean_rot integer_min print_integer exec_s_when_autoconstructing (integer_dup_items 86 boolean_and exec_s_when_autoconstructing (exec_flush integer_flush exec_empty boolean_frominteger in3 print_newline) (boolean_dup) (-67 print_exec (integer_pop integer_max integer_dec exec_empty print_exec (boolean_yank) boolean_frominteger exec_do*while (boolean_xor print_exec (in4) exec_flush) integer_dup_times 39 in1 boolean_shove integer_mod) boolean_empty) exec_s (tag_integer_233 integer_gte integer_stackdepth integer_dup exec_dup_items) (exec_if () (boolean_frominteger) exec_do*range () print_boolean exec_yankdup boolean_eq integer_gt boolean_pop integer_mod integer_dec integer_gte) () integer_mod print_newline integer_dup exec_k_when_autoconstructing () (exec_shove () exec_do*times (exec_stackdepth integer_add in4 exec_do*while (exec_yankdup) print_integer exec_k () (exec_if () (boolean_pop) tagged_70 boolean_eq)))) () ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 90
Size: 120
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.457
Median total errors in population: 4
Error averages by case: (0.529 0.523 0.52 0.581 0.373 0.76 0.58 0.526 0.521 0.544)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 100.003
Average program size in population (points): 133.981
Average percent parens in population: 0.253
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5514958
--- Timings ---
Current time: 1559594031267 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.4 seconds, 54.0%
Fitness Testing:      6.1 seconds, 24.3%
Report:               5.3 seconds, 21.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 53                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 26                 
Correct output: 66                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 18                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 33                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -67} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_171} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction -100} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 0, :instruction 20} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction tag_boolean_995} {:close 0, :instruction tag_integer_233} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction boolean_eq})
Lexicase best program: (integer_gt in2 boolean_yank integer_eq integer_dup_items boolean_pop integer_lt integer_swap integer_gte boolean_swap exec_rot () (in2) (boolean_invert_first_then_and in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (boolean_flush integer_dup_items boolean_and exec_s_when_autoconstructing (exec_flush exec_flush integer_flush in3 print_newline) (integer_stackdepth -67 boolean_frominteger exec_noop tagged_171 integer_pop integer_stackdepth) (in3 exec_yank integer_dec exec_empty print_exec (boolean_yank) boolean_shove exec_shove (print_integer exec_eq -100 print_exec (integer_dup 20 exec_s (in1 boolean_empty) (exec_k_when_autoconstructing (exec_s (tag_boolean_995 tag_integer_233 exec_shove (integer_eq integer_inc) boolean_frominteger) (exec_do*range () integer_dec boolean_shove boolean_and integer_pop exec_yankdup integer_gt boolean_not boolean_pop integer_mod exec_dup_items) (integer_gte)) (boolean_rot exec_dup_times () exec_s (integer_dup exec_k_when_autoconstructing () (exec_do*times (exec_stackdepth in4 print_exec (82 exec_do*while (integer_min exec_yankdup) print_integer exec_k () (exec_if () (integer_shove integer_flush boolean_pop) tagged_70 boolean_eq))))) () ())) ())))) () ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 133
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -67} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_171} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction -100} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 0, :instruction 20} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction tag_boolean_995} {:close 0, :instruction tag_integer_233} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction boolean_eq})
Zero cases best program: (integer_gt in2 boolean_yank integer_eq integer_dup_items boolean_pop integer_lt integer_swap integer_gte boolean_swap exec_rot () (in2) (boolean_invert_first_then_and in3) integer_min integer_swap exec_k_when_autoconstructing (in1) (integer_min print_integer exec_s_when_autoconstructing (boolean_flush integer_dup_items boolean_and exec_s_when_autoconstructing (exec_flush exec_flush integer_flush in3 print_newline) (integer_stackdepth -67 boolean_frominteger exec_noop tagged_171 integer_pop integer_stackdepth) (in3 exec_yank integer_dec exec_empty print_exec (boolean_yank) boolean_shove exec_shove (print_integer exec_eq -100 print_exec (integer_dup 20 exec_s (in1 boolean_empty) (exec_k_when_autoconstructing (exec_s (tag_boolean_995 tag_integer_233 exec_shove (integer_eq integer_inc) boolean_frominteger) (exec_do*range () integer_dec boolean_shove boolean_and integer_pop exec_yankdup integer_gt boolean_not boolean_pop integer_mod exec_dup_items) (integer_gte)) (boolean_rot exec_dup_times () exec_s (integer_dup exec_k_when_autoconstructing () (exec_do*times (exec_stackdepth in4 print_exec (82 exec_do*while (integer_min exec_yankdup) print_integer exec_k () (exec_if () (integer_shove integer_flush boolean_pop) tagged_70 boolean_eq))))) () ())) ())))) () ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 133
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (471 237 397 476 473 475 547 391 395 527)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (471 237 397 476 473 475 547 391 395 527)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_522} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq})
Best program: (exec_dup_items integer_yankdup integer_gt boolean_and integer_swap boolean_yank integer_gt print_integer integer_gt boolean_dup_times integer_eq integer_dup_items boolean_pop integer_lt boolean_swap integer_swap in2 in3 integer_min integer_swap exec_k_when_autoconstructing (in1) (boolean_rot integer_min print_integer exec_s_when_autoconstructing (integer_sub integer_dup_items exec_do*range (boolean_and exec_dup (exec_s_when_autoconstructing (exec_flush in3 print_newline) (print_exec (integer_inc boolean_pop boolean_or exec_noop integer_pop exec_yank integer_dec exec_empty print_exec (integer_gt tagged_522 boolean_eq boolean_yank) boolean_shove boolean_frominteger exec_do*while (integer_mult) print_exec (integer_dup_times boolean_xor) boolean_not exec_s (in1 integer_mod) (boolean_empty) (exec_s (exec_swap (integer_mult integer_min in3) (exec_k_when_autoconstructing (integer_add tag_integer_233 integer_gte exec_dup_items) (exec_do*range () boolean_and print_boolean integer_pop exec_yankdup boolean_pop integer_mod integer_gte)) integer_mod exec_k_when_autoconstructing () (exec_shove () exec_do*times (exec_stackdepth in4 integer_dup_items integer_min exec_yankdup) exec_while () print_integer boolean_and exec_dup () integer_dup_times boolean_pop) in3 tagged_70 integer_mult boolean_eq) () ()))) ()))) () ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 98
Size: 130
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 5.611
Median total errors in population: 5
Error averages by case: (0.529 0.763 0.603 0.524 0.527 0.525 0.453 0.609 0.605 0.473)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.804
Average program size in population (points): 130.652
Average percent parens in population: 0.250
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5879870
--- Timings ---
Current time: 1559594033147 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.6 seconds, 54.5%
Fitness Testing:      6.4 seconds, 23.8%
Report:               5.7 seconds, 21.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 191
Test mean error for best: 0.19100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: 51                 
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 60                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 46                 
Correct output: 66                  | Program output: 66                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 29                 
Correct output: -87                 | Program output: -60                
Correct output: -60                 | Program output: -2                 
Correct output: 26                  | Program output: 26                 
Correct output: -53                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: 42                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -60                
Correct output: 10                  | Program output: 45                 
Correct output: -96                 | Program output: -74                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -5                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -32                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -3                 
Correct output: -75                 | Program output: -68                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: 43                 
Correct output: -69                 | Program output: -69                
Correct output: -50                 | Program output: -38                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_78} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction 99} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction print_exec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_dup_items exec_do*times (boolean_empty boolean_or tagged_78 integer_pop) boolean_rot integer_dec boolean_pop boolean_eq boolean_stackdepth integer_shove exec_empty 99 integer_fromboolean in4 in3 integer_min in2 exec_k_when_autoconstructing (integer_min print_integer exec_s_when_autoconstructing (boolean_rot integer_pop integer_dup integer_dup_items exec_do*times (integer_dup_times exec_do*count (exec_flush integer_lte exec_y (in1 boolean_rot integer_flush print_newline boolean_yankdup) integer_dup_times boolean_invert_second_then_and) integer_dec) boolean_shove boolean_and exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_y_when_autoconstructing () boolean_invert_first_then_and boolean_not exec_y (integer_stackdepth) integer_stackdepth exec_s_when_autoconstructing (integer_dup integer_dec exec_while () boolean_or boolean_dup_items print_exec () exec_y_when_autoconstructing () integer_add integer_dup_items integer_dec integer_fromboolean integer_gt print_exec () exec_flush exec_swap (boolean_xor in3 integer_flush integer_dup_times integer_lte) (integer_eq) integer_dup integer_div integer_eq exec_s (integer_mod exec_do*range (boolean_pop integer_stackdepth boolean_frominteger exec_pop (integer_dec exec_s_when_autoconstructing () (print_boolean integer_pop exec_do*while (integer_gte integer_swap integer_sub exec_y_when_autoconstructing (integer_dup boolean_frominteger integer_min exec_yankdup) in1 exec_eq integer_empty exec_stackdepth)) (integer_flush integer_eq) boolean_pop) boolean_yankdup boolean_invert_second_then_and exec_do*range () exec_do*count (boolean_eq boolean_swap) boolean_swap boolean_dup_times) boolean_invert_second_then_and integer_dup) () ()) () ()) ()) () ()) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 149
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_78} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction 99} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction print_exec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_dup_items exec_do*times (boolean_empty boolean_or tagged_78 integer_pop) boolean_rot integer_dec boolean_pop boolean_eq boolean_stackdepth integer_shove exec_empty 99 integer_fromboolean in4 in3 integer_min in2 exec_k_when_autoconstructing (integer_min print_integer exec_s_when_autoconstructing (boolean_rot integer_pop integer_dup integer_dup_items exec_do*times (integer_dup_times exec_do*count (exec_flush integer_lte exec_y (in1 boolean_rot integer_flush print_newline boolean_yankdup) integer_dup_times boolean_invert_second_then_and) integer_dec) boolean_shove boolean_and exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_y_when_autoconstructing () boolean_invert_first_then_and boolean_not exec_y (integer_stackdepth) integer_stackdepth exec_s_when_autoconstructing (integer_dup integer_dec exec_while () boolean_or boolean_dup_items print_exec () exec_y_when_autoconstructing () integer_add integer_dup_items integer_dec integer_fromboolean integer_gt print_exec () exec_flush exec_swap (boolean_xor in3 integer_flush integer_dup_times integer_lte) (integer_eq) integer_dup integer_div integer_eq exec_s (integer_mod exec_do*range (boolean_pop integer_stackdepth boolean_frominteger exec_pop (integer_dec exec_s_when_autoconstructing () (print_boolean integer_pop exec_do*while (integer_gte integer_swap integer_sub exec_y_when_autoconstructing (integer_dup boolean_frominteger integer_min exec_yankdup) in1 exec_eq integer_empty exec_stackdepth)) (integer_flush integer_eq) boolean_pop) boolean_yankdup boolean_invert_second_then_and exec_do*range () exec_do*count (boolean_eq boolean_swap) boolean_swap boolean_dup_times) boolean_invert_second_then_and integer_dup) () ()) () ()) ()) () ()) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 149
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (416 445 220 398 402 427 223 222 423 440)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (416 445 220 398 402 427 223 222 423 440)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_811} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_319} {:close 0, :instruction integer_eq})
Best program: (integer_eq integer_eq exec_do*times () integer_dup_items boolean_frominteger boolean_pop exec_if (in1) (boolean_empty integer_max in4) in3 integer_min exec_k_when_autoconstructing (integer_min print_integer exec_yankdup integer_pop exec_shove (exec_while (exec_y_when_autoconstructing () exec_do*count (exec_do*while (exec_s_when_autoconstructing (exec_noop print_integer) (exec_s (in1 integer_flush exec_dup_items exec_y () exec_dup (exec_noop)) (integer_inc print_integer integer_yankdup integer_flush boolean_shove exec_dup_times (integer_pop integer_inc boolean_invert_first_then_and integer_flush exec_pop (exec_stackdepth) exec_do*while (exec_yank exec_s (boolean_dup_items boolean_yank) (tagged_811 exec_y_when_autoconstructing () integer_add boolean_frominteger boolean_shove boolean_yank) (print_exec (boolean_yankdup integer_eq exec_s (exec_k () (boolean_frominteger integer_min) boolean_or print_boolean exec_do*times (boolean_flush) boolean_frominteger in3) (integer_gte boolean_frominteger integer_add) (exec_stackdepth integer_stackdepth exec_swap () (exec_y (integer_dup_times exec_dup_items) integer_mod boolean_frominteger) boolean_dup_times) in3 boolean_swap) boolean_frominteger print_boolean integer_gt boolean_rot boolean_invert_second_then_and boolean_dup exec_do*range () boolean_xor boolean_invert_second_then_and) integer_sub integer_dup boolean_pop) integer_sub integer_mult boolean_eq integer_flush integer_dup_times boolean_invert_second_then_and tag_exec_319 (integer_eq))) ()) ()))))) ())
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 103
Size: 141
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.384
Median total errors in population: 6
Error averages by case: (0.584 0.555 0.78 0.602 0.598 0.573 0.777 0.778 0.577 0.56)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 100.107
Average program size in population (points): 133.138
Average percent parens in population: 0.247
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6293712
--- Timings ---
Current time: 1559594035404 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.7 seconds, 54.8%
Fitness Testing:      6.7 seconds, 23.5%
Report:               6.1 seconds, 21.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 53                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 26                 
Correct output: 66                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 18                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 33                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_987} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_176} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_invert_first_then_and boolean_dup_times integer_fromboolean integer_eq integer_max integer_lt boolean_xor in2 integer_fromboolean in3 integer_min exec_k_when_autoconstructing (boolean_swap in1) (integer_min print_integer exec_yankdup exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (tag_boolean_987 exec_flush exec_flush integer_flush in3 print_newline) print_exec (exec_noop exec_rot () (integer_dup_times integer_stackdepth) (exec_do*range (exec_yank integer_dec exec_when (exec_if (exec_empty print_exec (boolean_yank) boolean_shove boolean_xor tag_boolean_176 exec_k (boolean_frominteger exec_eq exec_do*while (print_exec (integer_shove exec_flush) integer_dup_times exec_s (exec_swap (in1 integer_mod) (boolean_empty) boolean_dup) (integer_dup) (in3) tag_integer_233 integer_flush exec_yankdup integer_gte exec_rot (exec_dup_items) (exec_empty exec_do*range () print_boolean integer_lte integer_pop integer_yankdup integer_stackdepth boolean_pop integer_mod integer_dec boolean_rot integer_dup integer_inc exec_k_when_autoconstructing () (integer_rot exec_do*times (exec_flush exec_stackdepth 82 exec_do*while (integer_min print_integer boolean_and integer_fromboolean exec_if () (integer_flush integer_mult))))) ())) ()) ()))))) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 127
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_987} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_boolean_176} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_invert_first_then_and boolean_dup_times integer_fromboolean integer_eq integer_max integer_lt boolean_xor in2 integer_fromboolean in3 integer_min exec_k_when_autoconstructing (boolean_swap in1) (integer_min print_integer exec_yankdup exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (tag_boolean_987 exec_flush exec_flush integer_flush in3 print_newline) print_exec (exec_noop exec_rot () (integer_dup_times integer_stackdepth) (exec_do*range (exec_yank integer_dec exec_when (exec_if (exec_empty print_exec (boolean_yank) boolean_shove boolean_xor tag_boolean_176 exec_k (boolean_frominteger exec_eq exec_do*while (print_exec (integer_shove exec_flush) integer_dup_times exec_s (exec_swap (in1 integer_mod) (boolean_empty) boolean_dup) (integer_dup) (in3) tag_integer_233 integer_flush exec_yankdup integer_gte exec_rot (exec_dup_items) (exec_empty exec_do*range () print_boolean integer_lte integer_pop integer_yankdup integer_stackdepth boolean_pop integer_mod integer_dec boolean_rot integer_dup integer_inc exec_k_when_autoconstructing () (integer_rot exec_do*times (exec_flush exec_stackdepth 82 exec_do*while (integer_min print_integer boolean_and integer_fromboolean exec_if () (integer_flush integer_mult))))) ())) ()) ()))))) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 127
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 346 336 429 416 399 391 372 394 347)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (410 346 336 429 416 399 391 372 394 347)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_987} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction tag_integer_233} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 82} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult})
Best program: (boolean_invert_first_then_and boolean_dup_times integer_eq integer_max integer_lt boolean_xor in2 in3 integer_min exec_k_when_autoconstructing (boolean_swap in1) (integer_min print_integer exec_s_when_autoconstructing (integer_dup_items boolean_and exec_dup (tag_boolean_987 exec_flush exec_flush integer_flush in3 print_newline) print_exec (exec_noop integer_dec integer_dup_times integer_stackdepth) exec_do*range (exec_do*range (integer_dec exec_when (exec_if (exec_empty print_exec (boolean_yank) boolean_shove boolean_xor exec_k (boolean_frominteger exec_eq exec_do*while (print_exec (exec_flush) integer_dup_times exec_s (exec_swap (in1 integer_mod) (boolean_not boolean_empty) boolean_dup) (integer_dup_times) (tag_integer_233 integer_flush exec_yankdup integer_gte exec_rot (exec_dup_items) (exec_empty print_boolean integer_lte integer_pop exec_yankdup boolean_pop integer_mod integer_dec boolean_rot integer_pop integer_dup integer_inc exec_k_when_autoconstructing () (integer_rot exec_do*times (exec_flush exec_stackdepth 82 exec_do*while (integer_min print_integer boolean_and integer_fromboolean exec_if () (integer_flush integer_mult))))) ()))) ()) ())))) () ()))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 86
Size: 118
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 6.16
Median total errors in population: 6
Error averages by case: (0.59 0.654 0.664 0.571 0.584 0.601 0.609 0.628 0.606 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 102.379
Average program size in population (points): 135.606
Average percent parens in population: 0.244
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6756309
--- Timings ---
Current time: 1559594037341 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.8 seconds, 54.4%
Fitness Testing:      7.2 seconds, 23.1%
Report:               6.9 seconds, 22.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 191
Test mean error for best: 0.19100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: 51                 
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 60                 
Correct output: 26                  | Program output: 26                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 46                 
Correct output: 66                  | Program output: 66                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 29                 
Correct output: -87                 | Program output: -60                
Correct output: -60                 | Program output: -2                 
Correct output: 26                  | Program output: 26                 
Correct output: -53                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: 42                 
Correct output: -74                 | Program output: -74                
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -60                
Correct output: 10                  | Program output: 45                 
Correct output: -96                 | Program output: -74                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -5                 
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -32                 | Program output: -32                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -89                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -3                 
Correct output: -75                 | Program output: -68                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: 43                 
Correct output: -69                 | Program output: -69                
Correct output: -50                 | Program output: -38                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction -77} {:close 1, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction print_exec} {:close 0, :instruction tagged_773} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_empty integer_div exec_s_when_autoconstructing (boolean_dup_items) (exec_dup_times (integer_eq exec_do*times () boolean_xor boolean_pop integer_lt) in1) (in4) in3 integer_min integer_min print_integer integer_max exec_shove (exec_s (integer_dup_items integer_shove exec_do*while () exec_do*count (integer_dec integer_add boolean_dup exec_k (integer_flush -77 exec_y () print_integer integer_yankdup integer_shove) (print_newline boolean_yankdup) in3 integer_flush in4 integer_pop boolean_and boolean_rot) exec_pop (exec_y (exec_stackdepth) exec_eq boolean_invert_first_then_and integer_dec in2) print_exec () tagged_773 boolean_frominteger exec_while (exec_stackdepth exec_y_when_autoconstructing () print_boolean integer_rot integer_lte boolean_or exec_dup_items integer_gt exec_yankdup integer_stackdepth exec_eq integer_dup_times boolean_frominteger) print_boolean integer_dup_items) (boolean_rot boolean_invert_second_then_and exec_do*times (integer_dup_items) boolean_eq integer_dup exec_when (print_integer exec_eq boolean_pop tagged_70 integer_mult)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 101
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction -77} {:close 1, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction print_exec} {:close 0, :instruction tagged_773} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_empty integer_div exec_s_when_autoconstructing (boolean_dup_items) (exec_dup_times (integer_eq exec_do*times () boolean_xor boolean_pop integer_lt) in1) (in4) in3 integer_min integer_min print_integer integer_max exec_shove (exec_s (integer_dup_items integer_shove exec_do*while () exec_do*count (integer_dec integer_add boolean_dup exec_k (integer_flush -77 exec_y () print_integer integer_yankdup integer_shove) (print_newline boolean_yankdup) in3 integer_flush in4 integer_pop boolean_and boolean_rot) exec_pop (exec_y (exec_stackdepth) exec_eq boolean_invert_first_then_and integer_dec in2) print_exec () tagged_773 boolean_frominteger exec_while (exec_stackdepth exec_y_when_autoconstructing () print_boolean integer_rot integer_lte boolean_or exec_dup_items integer_gt exec_yankdup integer_stackdepth exec_eq integer_dup_times boolean_frominteger) print_boolean integer_dup_items) (boolean_rot boolean_invert_second_then_and exec_do*times (integer_dup_items) boolean_eq integer_dup exec_when (print_integer exec_eq boolean_pop tagged_70 integer_mult)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 101
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (554 196 393 539 435 214 656 428 536 439)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (554 196 393 539 435 214 656 428 536 439)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction tag_boolean_346} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_277} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_exec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_70} {:close 0, :instruction boolean_eq})
Best program: (boolean_rot boolean_dup_items exec_do*times () boolean_eq integer_dup_items exec_yankdup exec_do*while () boolean_swap exec_if (boolean_eq) () exec_empty exec_dup_times (exec_dup_items) integer_yank in3 integer_mult 99 boolean_xor in4 tag_boolean_346 in3 in4 in1 integer_min integer_min print_integer boolean_shove integer_dup_items exec_dup_items exec_do*times (exec_s_when_autoconstructing (exec_flush exec_s (integer_flush integer_yankdup integer_gte boolean_shove tagged_277 boolean_yank integer_shove integer_dup_times boolean_invert_first_then_and integer_pop exec_stackdepth) (exec_empty) (boolean_eq)) (integer_gt exec_stackdepth integer_dup_items exec_rot (boolean_dup_items exec_yankdup integer_stackdepth exec_while (exec_s (exec_yankdup boolean_yank) (print_exec () exec_stackdepth) (boolean_dup_items) integer_fromboolean boolean_frominteger integer_div print_exec (exec_flush) exec_empty) in1 integer_dup integer_mult) (integer_inc boolean_frominteger in3) (integer_lt exec_swap (integer_min) (boolean_dup) integer_empty) boolean_frominteger exec_eq) () exec_s (exec_dup_items integer_yankdup in3) (exec_rot () (integer_dec exec_pop (integer_stackdepth exec_dup_items) integer_mod boolean_eq print_boolean boolean_rot integer_swap integer_add integer_dup boolean_dup exec_do*times (exec_dup_items integer_mult integer_dup print_integer)) (boolean_frominteger integer_flush boolean_not boolean_yankdup tagged_70 boolean_eq)) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 107
Size: 139
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 5.61
Median total errors in population: 5
Error averages by case: (0.446 0.804 0.607 0.461 0.565 0.786 0.344 0.572 0.464 0.561)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.202
Average program size in population (points): 129.781
Average percent parens in population: 0.250
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7136570
--- Timings ---
Current time: 1559594039249 milliseconds
Total Time:          32.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.0 seconds, 54.8%
Fitness Testing:      7.5 seconds, 22.8%
Report:               7.2 seconds, 22.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 215
Test mean error for best: 0.21500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 53                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 26                 
Correct output: 66                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 18                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 33                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_132} {:close 1, :instruction in4} {:close 1, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 1, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_502} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer})
Lexicase best program: (integer_dec boolean_swap in1 boolean_pop integer_shove integer_yank exec_pop (boolean_pop boolean_yankdup boolean_yankdup tagged_132 in4) integer_swap in3 integer_min exec_y_when_autoconstructing () in2 exec_k_when_autoconstructing (integer_min integer_dup_times) (print_integer boolean_not) exec_yankdup integer_shove exec_s_when_autoconstructing (integer_max integer_yank boolean_shove exec_k (integer_dup_items exec_dup_items exec_dup_items) () exec_do*times (exec_flush exec_y (integer_yank) integer_flush exec_if (in2 boolean_dup) (exec_eq boolean_yankdup) integer_dec) exec_swap (integer_pop integer_max print_integer) (integer_fromboolean) boolean_yankdup boolean_invert_first_then_and exec_y (exec_stackdepth) integer_mult exec_do*count (exec_yankdup in2) integer_stackdepth integer_dec boolean_frominteger integer_fromboolean boolean_dup_items print_exec () integer_yankdup print_exec (integer_dec integer_flush integer_mod) exec_swap (exec_do*while (boolean_not print_integer) tag_boolean_502 in3 integer_lte) (exec_yank integer_dup integer_div integer_shove exec_eq boolean_invert_second_then_and) exec_flush integer_dup_times exec_s (in3) (boolean_pop exec_dup (integer_stackdepth boolean_yankdup exec_dup_items) integer_mod integer_eq) (boolean_frominteger) boolean_frominteger boolean_or integer_pop exec_do*while (exec_flush exec_yankdup) boolean_xor integer_sub boolean_frominteger) () (exec_flush in2) boolean_eq integer_dup integer_dup_items boolean_stackdepth integer_add exec_do*count (integer_yankdup tagged_70 integer_yank boolean_xor integer_eq boolean_invert_second_then_and print_integer))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 145
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_132} {:close 1, :instruction in4} {:close 1, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 1, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_502} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_70} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer})
Zero cases best program: (integer_dec boolean_swap in1 boolean_pop integer_shove integer_yank exec_pop (boolean_pop boolean_yankdup boolean_yankdup tagged_132 in4) integer_swap in3 integer_min exec_y_when_autoconstructing () in2 exec_k_when_autoconstructing (integer_min integer_dup_times) (print_integer boolean_not) exec_yankdup integer_shove exec_s_when_autoconstructing (integer_max integer_yank boolean_shove exec_k (integer_dup_items exec_dup_items exec_dup_items) () exec_do*times (exec_flush exec_y (integer_yank) integer_flush exec_if (in2 boolean_dup) (exec_eq boolean_yankdup) integer_dec) exec_swap (integer_pop integer_max print_integer) (integer_fromboolean) boolean_yankdup boolean_invert_first_then_and exec_y (exec_stackdepth) integer_mult exec_do*count (exec_yankdup in2) integer_stackdepth integer_dec boolean_frominteger integer_fromboolean boolean_dup_items print_exec () integer_yankdup print_exec (integer_dec integer_flush integer_mod) exec_swap (exec_do*while (boolean_not print_integer) tag_boolean_502 in3 integer_lte) (exec_yank integer_dup integer_div integer_shove exec_eq boolean_invert_second_then_and) exec_flush integer_dup_times exec_s (in3) (boolean_pop exec_dup (integer_stackdepth boolean_yankdup exec_dup_items) integer_mod integer_eq) (boolean_frominteger) boolean_frominteger boolean_or integer_pop exec_do*while (exec_flush exec_yankdup) boolean_xor integer_sub boolean_frominteger) () (exec_flush in2) boolean_eq integer_dup integer_dup_items boolean_stackdepth integer_add exec_do*count (integer_yankdup tagged_70 integer_yank boolean_xor integer_eq boolean_invert_second_then_and print_integer))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 145
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 442 221 669 437 641 436 239 455 493)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (224 442 221 669 437 641 436 239 455 493)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_738} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_newline} {:close 0, :instruction -67} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction 82} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction tag_boolean_189} {:close 0, :instruction tagged_70} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq})
Best program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 109
Size: 145
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 5.743
Median total errors in population: 5
Error averages by case: (0.776 0.558 0.779 0.331 0.563 0.359 0.564 0.761 0.545 0.507)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 99.549
Average program size in population (points): 132.297
Average percent parens in population: 0.246
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7554924
--- Timings ---
Current time: 1559594041223 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.1 seconds, 55.0%
Fitness Testing:      7.9 seconds, 22.6%
Report:               7.7 seconds, 22.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 16
Successful program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 145


Auto-simplifying with starting size: 145
step: 0
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 500
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 1000
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 1500
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 2000
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 2500
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 3000
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 3500
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 4000
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 4500
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

step: 5000
program: (exec_dup_items boolean_invert_first_then_and boolean_invert_first_then_and tagged_738 integer_gt boolean_rot boolean_yank exec_eq integer_eq boolean_yankdup integer_eq integer_dup_items integer_max integer_max boolean_pop integer_lt integer_shove exec_if (exec_dup_times () integer_swap boolean_frominteger in2) (in3) integer_min exec_k_when_autoconstructing (boolean_empty) (in1) integer_min print_integer boolean_empty exec_s_when_autoconstructing (integer_fromboolean) (boolean_and exec_dup (boolean_xor integer_dec exec_s_when_autoconstructing (exec_flush exec_y (exec_empty in3 print_newline) -67 print_exec (boolean_shove boolean_eq integer_gte integer_gt integer_mod integer_dec boolean_stackdepth boolean_yank) boolean_shove boolean_frominteger print_exec (exec_s (in4 in1 integer_dup_times) (boolean_empty) (boolean_dup) exec_swap (exec_s (in3) (exec_if (integer_pop) (boolean_and integer_stackdepth integer_sub boolean_frominteger) exec_do*range () boolean_shove integer_gte) (integer_flush) integer_gte) () integer_mod boolean_rot integer_gt) in1 exec_yank boolean_xor integer_dup integer_eq) (integer_lt exec_k_when_autoconstructing () (exec_shove () exec_do*times (integer_dup exec_stackdepth in4 integer_swap) 82 exec_shove () integer_dup_items integer_lte integer_mod integer_dup_items) integer_swap integer_pop print_integer exec_k () (exec_if () (boolean_pop) tag_boolean_189 tagged_70 boolean_eq integer_mult exec_yankdup) boolean_eq) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 145

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 215
Test mean error for best: 0.21500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 23                  | Program output: 23                 
Correct output: -34                 | Program output: -34                
Correct output: 13                  | Program output: 13                 
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: -23                 | Program output: -23                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -36                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: -33                 | Program output: -33                
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 66                  | Program output: 66                 
Correct output: 53                  | Program output: 53                 
Correct output: 26                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 35                  | Program output: 35                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 21                 
Correct output: 26                  | Program output: 26                 
Correct output: 66                  | Program output: 69                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: -87                 | Program output: -87                
Correct output: -60                 | Program output: -60                
Correct output: 26                  | Program output: 45                 
Correct output: -53                 | Program output: -53                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: 33                  | Program output: 33                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -35                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -74                 | Program output: 20                 
Correct output: -63                 | Program output: -63                
Correct output: -40                 | Program output: 18                 
Correct output: -88                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 10                  | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -19                 | Program output: -19                
Correct output: -26                 | Program output: -26                
Correct output: -37                 | Program output: 20                 
Correct output: -58                 | Program output: -58                
Correct output: -23                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -29                 | Program output: -29                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -70                
Correct output: -68                 | Program output: 33                 
Correct output: -32                 | Program output: 3                  
Correct output: -72                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: -89                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -29                 | Program output: -29                
Correct output: -69                 | Program output: 18                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
;;******************************
