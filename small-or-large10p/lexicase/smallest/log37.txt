Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[57 -83 57 57] -83] [[51 51 -34 51] -34] [[48 48 -65 48] -65] [[36 -12 -12 -12] -12] [[18 18 -82 18] -82] [[34 -85 34 34] -85] [[90 -75 90 90] -75] [[100 40 100 100] 40] [[78 -19 -19 -19] -19] [[4 4 4 -23] -23] [(16 16 16 16) 16] [(-75 -75 -75 -75) -75] [(-17 -17 -17 -17) -17] [(11 11 11 11) 11] [(28 28 28 28) 28] [(95 91 61 7) 7] [(13 26 67 70) 13] [(32 47 17 86) 17] [(14 14 38 50) 14] [(17 61 0 53) 0] [(63 75 5 90) 5] [(20 51 5 76) 5] [(71 19 69 45) 19] [(68 42 35 68) 35] [(16 53 100 19) 16] [(4 33 96 26) 4] [(68 99 38 32) 32] [(10 35 3 6) 3] [(64 90 44 17) 17] [(24 46 21 78) 21] [(56 69 40 76) 40] [(43 91 41 87) 41] [(55 50 46 47) 46] [(21 7 15 14) 7] [(38 33 59 64) 33] [(-78 -78 29 30) -78] [(-54 19 66 87) -54] [(-85 -48 59 -98) -98] [(-63 74 17 -82) -82] [(-52 -43 62 -66) -66] [(77 -54 27 64) -54] [(33 -34 -82 26) -82] [(-43 -35 14 -71) -71] [(-64 29 60 36) -64] [(-51 -37 -54 11) -54] [(-79 23 -9 -72) -79] [(65 -64 100 93) -64] [(-2 65 78 99) -2] [(-51 -89 17 72) -89] [(-96 30 100 42) -96] [(-75 -43 84 73) -75] [(-1 -89 52 -89) -89] [(84 50 -62 -78) -78] [(-33 -74 -54 -48) -74] [(-31 -42 -4 67) -42] [(76 65 32 -81) -81] [(-33 -29 -95 -35) -95] [(81 49 -46 40) -46] [(-60 79 76 -5) -60] [(45 -71 12 -39) -71] [(-50 90 62 -13) -50] [(15 75 63 -28) -28] [(65 -41 -73 92) -73] [(72 54 21 7) 7] [(40 -79 -51 -28) -79] [(-82 -98 2 -83) -98] [(-96 -32 -68 43) -96] [(-34 27 -69 -66) -69] [(64 -70 26 8) -70] [(76 -41 51 -13) -41] [(45 37 57 25) 25] [(-60 11 36 2) -60] [(-29 33 27 -3) -29] [(-3 -25 46 29) -25] [(58 -46 10 18) -46] [(12 -74 -29 99) -74] [(-72 -32 -1 -92) -92] [(74 85 72 41) 41] [(-74 -20 22 7) -74] [(-16 -9 68 -22) -22] [(-63 93 18 -11) -63] [(33 16 16 37) 16] [(-11 -48 -31 85) -48] [(-11 92 -27 -84) -84] [(56 -70 -63 100) -70] [(92 -91 -59 90) -91] [(11 -91 51 -9) -91] [(55 -76 -40 -56) -76] [(23 77 58 -28) -28] [(-68 2 -97 80) -97] [(78 -51 -46 -22) -51] [(33 -88 88 86) -88] [(-1 -58 -9 24) -58] [(-33 -10 73 -25) -33] [(35 -43 42 3) -43])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[57 -83 57 57] -83]
Train Case:   6 | Input/Output: [[51 51 -34 51] -34]
Train Case:   7 | Input/Output: [[48 48 -65 48] -65]
Train Case:   8 | Input/Output: [[36 -12 -12 -12] -12]
Train Case:   9 | Input/Output: [[18 18 -82 18] -82]
Train Case:  10 | Input/Output: [[34 -85 34 34] -85]
Train Case:  11 | Input/Output: [[90 -75 90 90] -75]
Train Case:  12 | Input/Output: [[100 40 100 100] 40]
Train Case:  13 | Input/Output: [[78 -19 -19 -19] -19]
Train Case:  14 | Input/Output: [[4 4 4 -23] -23]
Train Case:  15 | Input/Output: [(16 16 16 16) 16]
Train Case:  16 | Input/Output: [(-75 -75 -75 -75) -75]
Train Case:  17 | Input/Output: [(-17 -17 -17 -17) -17]
Train Case:  18 | Input/Output: [(11 11 11 11) 11]
Train Case:  19 | Input/Output: [(28 28 28 28) 28]
Train Case:  20 | Input/Output: [(95 91 61 7) 7]
Train Case:  21 | Input/Output: [(13 26 67 70) 13]
Train Case:  22 | Input/Output: [(32 47 17 86) 17]
Train Case:  23 | Input/Output: [(14 14 38 50) 14]
Train Case:  24 | Input/Output: [(17 61 0 53) 0]
Train Case:  25 | Input/Output: [(63 75 5 90) 5]
Train Case:  26 | Input/Output: [(20 51 5 76) 5]
Train Case:  27 | Input/Output: [(71 19 69 45) 19]
Train Case:  28 | Input/Output: [(68 42 35 68) 35]
Train Case:  29 | Input/Output: [(16 53 100 19) 16]
Train Case:  30 | Input/Output: [(4 33 96 26) 4]
Train Case:  31 | Input/Output: [(68 99 38 32) 32]
Train Case:  32 | Input/Output: [(10 35 3 6) 3]
Train Case:  33 | Input/Output: [(64 90 44 17) 17]
Train Case:  34 | Input/Output: [(24 46 21 78) 21]
Train Case:  35 | Input/Output: [(56 69 40 76) 40]
Train Case:  36 | Input/Output: [(43 91 41 87) 41]
Train Case:  37 | Input/Output: [(55 50 46 47) 46]
Train Case:  38 | Input/Output: [(21 7 15 14) 7]
Train Case:  39 | Input/Output: [(38 33 59 64) 33]
Train Case:  40 | Input/Output: [(-78 -78 29 30) -78]
Train Case:  41 | Input/Output: [(-54 19 66 87) -54]
Train Case:  42 | Input/Output: [(-85 -48 59 -98) -98]
Train Case:  43 | Input/Output: [(-63 74 17 -82) -82]
Train Case:  44 | Input/Output: [(-52 -43 62 -66) -66]
Train Case:  45 | Input/Output: [(77 -54 27 64) -54]
Train Case:  46 | Input/Output: [(33 -34 -82 26) -82]
Train Case:  47 | Input/Output: [(-43 -35 14 -71) -71]
Train Case:  48 | Input/Output: [(-64 29 60 36) -64]
Train Case:  49 | Input/Output: [(-51 -37 -54 11) -54]
Train Case:  50 | Input/Output: [(-79 23 -9 -72) -79]
Train Case:  51 | Input/Output: [(65 -64 100 93) -64]
Train Case:  52 | Input/Output: [(-2 65 78 99) -2]
Train Case:  53 | Input/Output: [(-51 -89 17 72) -89]
Train Case:  54 | Input/Output: [(-96 30 100 42) -96]
Train Case:  55 | Input/Output: [(-75 -43 84 73) -75]
Train Case:  56 | Input/Output: [(-1 -89 52 -89) -89]
Train Case:  57 | Input/Output: [(84 50 -62 -78) -78]
Train Case:  58 | Input/Output: [(-33 -74 -54 -48) -74]
Train Case:  59 | Input/Output: [(-31 -42 -4 67) -42]
Train Case:  60 | Input/Output: [(76 65 32 -81) -81]
Train Case:  61 | Input/Output: [(-33 -29 -95 -35) -95]
Train Case:  62 | Input/Output: [(81 49 -46 40) -46]
Train Case:  63 | Input/Output: [(-60 79 76 -5) -60]
Train Case:  64 | Input/Output: [(45 -71 12 -39) -71]
Train Case:  65 | Input/Output: [(-50 90 62 -13) -50]
Train Case:  66 | Input/Output: [(15 75 63 -28) -28]
Train Case:  67 | Input/Output: [(65 -41 -73 92) -73]
Train Case:  68 | Input/Output: [(72 54 21 7) 7]
Train Case:  69 | Input/Output: [(40 -79 -51 -28) -79]
Train Case:  70 | Input/Output: [(-82 -98 2 -83) -98]
Train Case:  71 | Input/Output: [(-96 -32 -68 43) -96]
Train Case:  72 | Input/Output: [(-34 27 -69 -66) -69]
Train Case:  73 | Input/Output: [(64 -70 26 8) -70]
Train Case:  74 | Input/Output: [(76 -41 51 -13) -41]
Train Case:  75 | Input/Output: [(45 37 57 25) 25]
Train Case:  76 | Input/Output: [(-60 11 36 2) -60]
Train Case:  77 | Input/Output: [(-29 33 27 -3) -29]
Train Case:  78 | Input/Output: [(-3 -25 46 29) -25]
Train Case:  79 | Input/Output: [(58 -46 10 18) -46]
Train Case:  80 | Input/Output: [(12 -74 -29 99) -74]
Train Case:  81 | Input/Output: [(-72 -32 -1 -92) -92]
Train Case:  82 | Input/Output: [(74 85 72 41) 41]
Train Case:  83 | Input/Output: [(-74 -20 22 7) -74]
Train Case:  84 | Input/Output: [(-16 -9 68 -22) -22]
Train Case:  85 | Input/Output: [(-63 93 18 -11) -63]
Train Case:  86 | Input/Output: [(33 16 16 37) 16]
Train Case:  87 | Input/Output: [(-11 -48 -31 85) -48]
Train Case:  88 | Input/Output: [(-11 92 -27 -84) -84]
Train Case:  89 | Input/Output: [(56 -70 -63 100) -70]
Train Case:  90 | Input/Output: [(92 -91 -59 90) -91]
Train Case:  91 | Input/Output: [(11 -91 51 -9) -91]
Train Case:  92 | Input/Output: [(55 -76 -40 -56) -76]
Train Case:  93 | Input/Output: [(23 77 58 -28) -28]
Train Case:  94 | Input/Output: [(-68 2 -97 80) -97]
Train Case:  95 | Input/Output: [(78 -51 -46 -22) -51]
Train Case:  96 | Input/Output: [(33 -88 88 86) -88]
Train Case:  97 | Input/Output: [(-1 -58 -9 24) -58]
Train Case:  98 | Input/Output: [(-33 -10 73 -25) -33]
Train Case:  99 | Input/Output: [(35 -43 42 3) -43]
Test Case:   0 | Input/Output: [[-6 -6 -37 -6] -37]
Test Case:   1 | Input/Output: [[12 -29 -29 -29] -29]
Test Case:   2 | Input/Output: [[-68 34 -68 -68] -68]
Test Case:   3 | Input/Output: [[72 13 13 13] 13]
Test Case:   4 | Input/Output: [[-74 -8 -8 -8] -74]
Test Case:   5 | Input/Output: [[93 100 100 100] 93]
Test Case:   6 | Input/Output: [[3 3 16 3] 3]
Test Case:   7 | Input/Output: [[-85 47 47 47] -85]
Test Case:   8 | Input/Output: [[-90 -28 -28 -28] -90]
Test Case:   9 | Input/Output: [[23 23 49 23] 23]
Test Case:  10 | Input/Output: [[48 -5 -5 -5] -5]
Test Case:  11 | Input/Output: [[-64 -64 -64 17] -64]
Test Case:  12 | Input/Output: [[14 74 74 74] 14]
Test Case:  13 | Input/Output: [[45 15 45 45] 15]
Test Case:  14 | Input/Output: [[-69 -69 95 -69] -69]
Test Case:  15 | Input/Output: [[79 79 79 -31] -31]
Test Case:  16 | Input/Output: [[22 99 99 99] 22]
Test Case:  17 | Input/Output: [[-20 -54 -20 -20] -54]
Test Case:  18 | Input/Output: [[0 0 0 -61] -61]
Test Case:  19 | Input/Output: [[-25 37 -25 -25] -25]
Test Case:  20 | Input/Output: [[44 93 44 44] 44]
Test Case:  21 | Input/Output: [[-7 -7 49 -7] -7]
Test Case:  22 | Input/Output: [[-29 -29 81 -29] -29]
Test Case:  23 | Input/Output: [[95 88 95 95] 88]
Test Case:  24 | Input/Output: [[28 41 28 28] 28]
Test Case:  25 | Input/Output: [[49 -95 -95 -95] -95]
Test Case:  26 | Input/Output: [[-89 60 -89 -89] -89]
Test Case:  27 | Input/Output: [[-3 -86 -86 -86] -86]
Test Case:  28 | Input/Output: [[49 49 93 49] 49]
Test Case:  29 | Input/Output: [[78 45 78 78] 45]
Test Case:  30 | Input/Output: [[58 -87 58 58] -87]
Test Case:  31 | Input/Output: [[43 43 -57 43] -57]
Test Case:  32 | Input/Output: [[87 87 29 87] 29]
Test Case:  33 | Input/Output: [[-30 -30 -30 -41] -41]
Test Case:  34 | Input/Output: [[62 62 62 -98] -98]
Test Case:  35 | Input/Output: [[-73 -73 -73 89] -73]
Test Case:  36 | Input/Output: [[-20 -20 33 -20] -20]
Test Case:  37 | Input/Output: [[-8 -8 0 -8] -8]
Test Case:  38 | Input/Output: [[30 30 33 30] 30]
Test Case:  39 | Input/Output: [[73 -3 -3 -3] -3]
Test Case:  40 | Input/Output: [[88 40 88 88] 40]
Test Case:  41 | Input/Output: [[75 2 2 2] 2]
Test Case:  42 | Input/Output: [[-32 -32 -32 85] -32]
Test Case:  43 | Input/Output: [[-25 58 58 58] -25]
Test Case:  44 | Input/Output: [[-83 -83 87 -83] -83]
Test Case:  45 | Input/Output: [[8 8 8 70] 8]
Test Case:  46 | Input/Output: [[-26 -26 -26 -44] -44]
Test Case:  47 | Input/Output: [[-22 -78 -22 -22] -78]
Test Case:  48 | Input/Output: [[22 22 85 22] 22]
Test Case:  49 | Input/Output: [[18 -56 -56 -56] -56]
Test Case:  50 | Input/Output: [[9 -2 9 9] -2]
Test Case:  51 | Input/Output: [[-3 -3 -3 -72] -72]
Test Case:  52 | Input/Output: [[96 96 96 -70] -70]
Test Case:  53 | Input/Output: [[2 -12 -12 -12] -12]
Test Case:  54 | Input/Output: [[10 -52 10 10] -52]
Test Case:  55 | Input/Output: [[-11 -11 -11 59] -11]
Test Case:  56 | Input/Output: [[85 85 33 85] 33]
Test Case:  57 | Input/Output: [[-72 -72 -72 41] -72]
Test Case:  58 | Input/Output: [[-8 62 62 62] -8]
Test Case:  59 | Input/Output: [[-86 -49 -86 -86] -86]
Test Case:  60 | Input/Output: [[-2 -2 64 -2] -2]
Test Case:  61 | Input/Output: [[83 83 -87 83] -87]
Test Case:  62 | Input/Output: [[-19 -51 -51 -51] -51]
Test Case:  63 | Input/Output: [[78 -13 78 78] -13]
Test Case:  64 | Input/Output: [[57 57 14 57] 14]
Test Case:  65 | Input/Output: [[85 85 -9 85] -9]
Test Case:  66 | Input/Output: [[82 -38 82 82] -38]
Test Case:  67 | Input/Output: [[13 13 13 -82] -82]
Test Case:  68 | Input/Output: [[-45 -22 -45 -45] -45]
Test Case:  69 | Input/Output: [[6 -94 -94 -94] -94]
Test Case:  70 | Input/Output: [[9 22 9 9] 9]
Test Case:  71 | Input/Output: [[-66 -66 -66 -29] -66]
Test Case:  72 | Input/Output: [[75 75 81 75] 75]
Test Case:  73 | Input/Output: [[-77 -77 -77 -27] -77]
Test Case:  74 | Input/Output: [[35 -92 -92 -92] -92]
Test Case:  75 | Input/Output: [[30 71 71 71] 30]
Test Case:  76 | Input/Output: [[91 -14 -14 -14] -14]
Test Case:  77 | Input/Output: [[45 45 30 45] 30]
Test Case:  78 | Input/Output: [[-31 -31 -31 -71] -71]
Test Case:  79 | Input/Output: [[-89 -89 -15 -89] -89]
Test Case:  80 | Input/Output: [[-32 -32 -32 43] -32]
Test Case:  81 | Input/Output: [[85 86 85 85] 85]
Test Case:  82 | Input/Output: [[6 5 5 5] 5]
Test Case:  83 | Input/Output: [[49 49 -6 49] -6]
Test Case:  84 | Input/Output: [[-58 -58 -15 -58] -58]
Test Case:  85 | Input/Output: [[-51 32 -51 -51] -51]
Test Case:  86 | Input/Output: [[78 78 37 78] 37]
Test Case:  87 | Input/Output: [[-53 -53 7 -53] -53]
Test Case:  88 | Input/Output: [[-99 -99 -99 63] -99]
Test Case:  89 | Input/Output: [[-38 -38 53 -38] -38]
Test Case:  90 | Input/Output: [[-34 77 -34 -34] -34]
Test Case:  91 | Input/Output: [[82 -85 -85 -85] -85]
Test Case:  92 | Input/Output: [[84 84 -10 84] -10]
Test Case:  93 | Input/Output: [[4 4 4 90] 4]
Test Case:  94 | Input/Output: [[72 -6 -6 -6] -6]
Test Case:  95 | Input/Output: [[-38 83 -38 -38] -38]
Test Case:  96 | Input/Output: [[-3 -3 -3 32] -3]
Test Case:  97 | Input/Output: [[96 96 -76 96] -76]
Test Case:  98 | Input/Output: [[-5 -5 44 -5] -5]
Test Case:  99 | Input/Output: [[69 69 36 69] 36]
Test Case: 100 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 101 | Input/Output: [(79 79 79 79) 79]
Test Case: 102 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 103 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 104 | Input/Output: [(82 82 82 82) 82]
Test Case: 105 | Input/Output: [(94 94 94 94) 94]
Test Case: 106 | Input/Output: [(64 64 64 64) 64]
Test Case: 107 | Input/Output: [(50 50 50 50) 50]
Test Case: 108 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 109 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 110 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 111 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 112 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 113 | Input/Output: [(95 95 95 95) 95]
Test Case: 114 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 115 | Input/Output: [(60 60 60 60) 60]
Test Case: 116 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 117 | Input/Output: [(17 17 17 17) 17]
Test Case: 118 | Input/Output: [(54 54 54 54) 54]
Test Case: 119 | Input/Output: [(77 77 77 77) 77]
Test Case: 120 | Input/Output: [(54 54 54 54) 54]
Test Case: 121 | Input/Output: [(22 22 22 22) 22]
Test Case: 122 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 123 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 124 | Input/Output: [(99 99 99 99) 99]
Test Case: 125 | Input/Output: [(88 88 88 88) 88]
Test Case: 126 | Input/Output: [(36 36 36 36) 36]
Test Case: 127 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 128 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 129 | Input/Output: [(92 92 92 92) 92]
Test Case: 130 | Input/Output: [(23 23 23 23) 23]
Test Case: 131 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 132 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 133 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 134 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 135 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 136 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 137 | Input/Output: [(65 65 65 65) 65]
Test Case: 138 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 139 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 140 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 141 | Input/Output: [(74 74 74 74) 74]
Test Case: 142 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 143 | Input/Output: [(4 4 4 4) 4]
Test Case: 144 | Input/Output: [(27 27 27 27) 27]
Test Case: 145 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 146 | Input/Output: [(38 38 38 38) 38]
Test Case: 147 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 148 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 149 | Input/Output: [(91 91 91 91) 91]
Test Case: 150 | Input/Output: [(23 23 23 23) 23]
Test Case: 151 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 152 | Input/Output: [(71 71 71 71) 71]
Test Case: 153 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 154 | Input/Output: [(12 12 12 12) 12]
Test Case: 155 | Input/Output: [(13 13 13 13) 13]
Test Case: 156 | Input/Output: [(96 96 96 96) 96]
Test Case: 157 | Input/Output: [(2 2 2 2) 2]
Test Case: 158 | Input/Output: [(59 59 59 59) 59]
Test Case: 159 | Input/Output: [(76 76 76 76) 76]
Test Case: 160 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 161 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 162 | Input/Output: [(45 45 45 45) 45]
Test Case: 163 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 164 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 165 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 166 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 167 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 168 | Input/Output: [(15 15 15 15) 15]
Test Case: 169 | Input/Output: [(94 94 94 94) 94]
Test Case: 170 | Input/Output: [(86 86 86 86) 86]
Test Case: 171 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 172 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 173 | Input/Output: [(80 80 80 80) 80]
Test Case: 174 | Input/Output: [(83 83 83 83) 83]
Test Case: 175 | Input/Output: [(66 66 66 66) 66]
Test Case: 176 | Input/Output: [(31 31 31 31) 31]
Test Case: 177 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 178 | Input/Output: [(36 36 36 36) 36]
Test Case: 179 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 180 | Input/Output: [(82 82 82 82) 82]
Test Case: 181 | Input/Output: [(80 80 80 80) 80]
Test Case: 182 | Input/Output: [(16 16 16 16) 16]
Test Case: 183 | Input/Output: [(74 74 74 74) 74]
Test Case: 184 | Input/Output: [(82 82 82 82) 82]
Test Case: 185 | Input/Output: [(28 28 28 28) 28]
Test Case: 186 | Input/Output: [(54 54 54 54) 54]
Test Case: 187 | Input/Output: [(67 67 67 67) 67]
Test Case: 188 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 189 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 190 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 191 | Input/Output: [(91 91 91 91) 91]
Test Case: 192 | Input/Output: [(60 60 60 60) 60]
Test Case: 193 | Input/Output: [(42 42 42 42) 42]
Test Case: 194 | Input/Output: [(96 96 96 96) 96]
Test Case: 195 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 196 | Input/Output: [(74 74 74 74) 74]
Test Case: 197 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 198 | Input/Output: [(48 48 48 48) 48]
Test Case: 199 | Input/Output: [(55 55 55 55) 55]
Test Case: 200 | Input/Output: [(18 52 56 54) 18]
Test Case: 201 | Input/Output: [(6 7 4 34) 4]
Test Case: 202 | Input/Output: [(89 54 42 14) 14]
Test Case: 203 | Input/Output: [(61 68 11 6) 6]
Test Case: 204 | Input/Output: [(92 52 24 26) 24]
Test Case: 205 | Input/Output: [(56 17 86 96) 17]
Test Case: 206 | Input/Output: [(78 20 8 41) 8]
Test Case: 207 | Input/Output: [(45 9 57 51) 9]
Test Case: 208 | Input/Output: [(59 99 58 4) 4]
Test Case: 209 | Input/Output: [(96 65 62 15) 15]
Test Case: 210 | Input/Output: [(10 31 15 24) 10]
Test Case: 211 | Input/Output: [(43 12 2 91) 2]
Test Case: 212 | Input/Output: [(28 40 17 37) 17]
Test Case: 213 | Input/Output: [(0 98 4 84) 0]
Test Case: 214 | Input/Output: [(24 0 61 68) 0]
Test Case: 215 | Input/Output: [(22 93 97 85) 22]
Test Case: 216 | Input/Output: [(10 86 33 23) 10]
Test Case: 217 | Input/Output: [(82 44 10 11) 10]
Test Case: 218 | Input/Output: [(95 56 32 100) 32]
Test Case: 219 | Input/Output: [(75 9 43 73) 9]
Test Case: 220 | Input/Output: [(52 11 0 47) 0]
Test Case: 221 | Input/Output: [(37 99 38 59) 37]
Test Case: 222 | Input/Output: [(60 26 27 99) 26]
Test Case: 223 | Input/Output: [(37 54 70 75) 37]
Test Case: 224 | Input/Output: [(19 36 77 49) 19]
Test Case: 225 | Input/Output: [(59 84 98 45) 45]
Test Case: 226 | Input/Output: [(99 62 85 73) 62]
Test Case: 227 | Input/Output: [(11 60 96 86) 11]
Test Case: 228 | Input/Output: [(61 63 34 14) 14]
Test Case: 229 | Input/Output: [(68 47 11 15) 11]
Test Case: 230 | Input/Output: [(61 55 14 21) 14]
Test Case: 231 | Input/Output: [(96 17 33 28) 17]
Test Case: 232 | Input/Output: [(79 70 43 35) 35]
Test Case: 233 | Input/Output: [(6 10 53 38) 6]
Test Case: 234 | Input/Output: [(90 39 60 12) 12]
Test Case: 235 | Input/Output: [(73 86 94 87) 73]
Test Case: 236 | Input/Output: [(29 79 7 46) 7]
Test Case: 237 | Input/Output: [(20 91 48 34) 20]
Test Case: 238 | Input/Output: [(39 79 5 66) 5]
Test Case: 239 | Input/Output: [(69 75 55 40) 40]
Test Case: 240 | Input/Output: [(22 49 96 86) 22]
Test Case: 241 | Input/Output: [(58 94 94 73) 58]
Test Case: 242 | Input/Output: [(31 46 71 85) 31]
Test Case: 243 | Input/Output: [(94 61 26 22) 22]
Test Case: 244 | Input/Output: [(33 70 53 45) 33]
Test Case: 245 | Input/Output: [(82 27 61 56) 27]
Test Case: 246 | Input/Output: [(41 49 61 64) 41]
Test Case: 247 | Input/Output: [(87 2 25 23) 2]
Test Case: 248 | Input/Output: [(41 92 42 26) 26]
Test Case: 249 | Input/Output: [(10 68 45 56) 10]
Test Case: 250 | Input/Output: [(56 60 33 72) 33]
Test Case: 251 | Input/Output: [(84 14 21 66) 14]
Test Case: 252 | Input/Output: [(31 46 48 22) 22]
Test Case: 253 | Input/Output: [(55 54 25 6) 6]
Test Case: 254 | Input/Output: [(16 46 19 80) 16]
Test Case: 255 | Input/Output: [(58 14 31 15) 14]
Test Case: 256 | Input/Output: [(73 98 61 50) 50]
Test Case: 257 | Input/Output: [(90 4 42 22) 4]
Test Case: 258 | Input/Output: [(85 70 29 99) 29]
Test Case: 259 | Input/Output: [(48 81 15 82) 15]
Test Case: 260 | Input/Output: [(76 13 97 29) 13]
Test Case: 261 | Input/Output: [(100 36 82 68) 36]
Test Case: 262 | Input/Output: [(3 98 32 47) 3]
Test Case: 263 | Input/Output: [(83 46 2 7) 2]
Test Case: 264 | Input/Output: [(20 48 12 7) 7]
Test Case: 265 | Input/Output: [(1 97 15 84) 1]
Test Case: 266 | Input/Output: [(35 45 10 89) 10]
Test Case: 267 | Input/Output: [(0 23 72 36) 0]
Test Case: 268 | Input/Output: [(87 8 52 99) 8]
Test Case: 269 | Input/Output: [(39 52 48 84) 39]
Test Case: 270 | Input/Output: [(95 45 32 62) 32]
Test Case: 271 | Input/Output: [(92 92 22 78) 22]
Test Case: 272 | Input/Output: [(61 60 61 82) 60]
Test Case: 273 | Input/Output: [(35 46 40 63) 35]
Test Case: 274 | Input/Output: [(1 80 91 75) 1]
Test Case: 275 | Input/Output: [(78 5 85 95) 5]
Test Case: 276 | Input/Output: [(40 66 67 77) 40]
Test Case: 277 | Input/Output: [(51 18 76 84) 18]
Test Case: 278 | Input/Output: [(67 66 33 36) 33]
Test Case: 279 | Input/Output: [(78 46 31 67) 31]
Test Case: 280 | Input/Output: [(46 23 81 3) 3]
Test Case: 281 | Input/Output: [(57 40 13 57) 13]
Test Case: 282 | Input/Output: [(3 37 41 17) 3]
Test Case: 283 | Input/Output: [(48 61 60 62) 48]
Test Case: 284 | Input/Output: [(88 32 75 25) 25]
Test Case: 285 | Input/Output: [(1 76 9 12) 1]
Test Case: 286 | Input/Output: [(64 11 91 8) 8]
Test Case: 287 | Input/Output: [(6 60 43 86) 6]
Test Case: 288 | Input/Output: [(62 80 76 23) 23]
Test Case: 289 | Input/Output: [(66 84 15 82) 15]
Test Case: 290 | Input/Output: [(71 30 34 9) 9]
Test Case: 291 | Input/Output: [(33 50 80 84) 33]
Test Case: 292 | Input/Output: [(46 28 15 80) 15]
Test Case: 293 | Input/Output: [(94 39 18 39) 18]
Test Case: 294 | Input/Output: [(63 79 80 28) 28]
Test Case: 295 | Input/Output: [(24 31 32 39) 24]
Test Case: 296 | Input/Output: [(40 56 96 49) 40]
Test Case: 297 | Input/Output: [(78 68 49 72) 49]
Test Case: 298 | Input/Output: [(99 94 2 28) 2]
Test Case: 299 | Input/Output: [(47 96 95 94) 47]
Test Case: 300 | Input/Output: [(45 34 58 19) 19]
Test Case: 301 | Input/Output: [(71 79 47 55) 47]
Test Case: 302 | Input/Output: [(41 7 2 27) 2]
Test Case: 303 | Input/Output: [(0 12 59 59) 0]
Test Case: 304 | Input/Output: [(44 57 0 2) 0]
Test Case: 305 | Input/Output: [(24 65 57 65) 24]
Test Case: 306 | Input/Output: [(50 10 35 16) 10]
Test Case: 307 | Input/Output: [(58 7 37 69) 7]
Test Case: 308 | Input/Output: [(76 76 10 49) 10]
Test Case: 309 | Input/Output: [(70 62 27 9) 9]
Test Case: 310 | Input/Output: [(66 87 75 63) 63]
Test Case: 311 | Input/Output: [(9 60 33 94) 9]
Test Case: 312 | Input/Output: [(32 74 91 63) 32]
Test Case: 313 | Input/Output: [(83 8 78 35) 8]
Test Case: 314 | Input/Output: [(55 93 15 81) 15]
Test Case: 315 | Input/Output: [(81 17 15 82) 15]
Test Case: 316 | Input/Output: [(76 85 42 37) 37]
Test Case: 317 | Input/Output: [(73 86 8 85) 8]
Test Case: 318 | Input/Output: [(38 46 66 23) 23]
Test Case: 319 | Input/Output: [(20 20 21 59) 20]
Test Case: 320 | Input/Output: [(26 28 27 50) 26]
Test Case: 321 | Input/Output: [(45 29 50 30) 29]
Test Case: 322 | Input/Output: [(56 95 99 49) 49]
Test Case: 323 | Input/Output: [(57 58 89 41) 41]
Test Case: 324 | Input/Output: [(48 17 74 85) 17]
Test Case: 325 | Input/Output: [(27 81 97 7) 7]
Test Case: 326 | Input/Output: [(6 4 20 73) 4]
Test Case: 327 | Input/Output: [(86 87 20 1) 1]
Test Case: 328 | Input/Output: [(39 85 73 21) 21]
Test Case: 329 | Input/Output: [(0 85 100 90) 0]
Test Case: 330 | Input/Output: [(28 15 15 89) 15]
Test Case: 331 | Input/Output: [(31 39 15 50) 15]
Test Case: 332 | Input/Output: [(61 91 86 22) 22]
Test Case: 333 | Input/Output: [(37 85 38 53) 37]
Test Case: 334 | Input/Output: [(82 90 72 80) 72]
Test Case: 335 | Input/Output: [(3 50 92 16) 3]
Test Case: 336 | Input/Output: [(88 74 3 91) 3]
Test Case: 337 | Input/Output: [(46 83 86 90) 46]
Test Case: 338 | Input/Output: [(20 46 23 29) 20]
Test Case: 339 | Input/Output: [(90 17 50 99) 17]
Test Case: 340 | Input/Output: [(95 99 37 99) 37]
Test Case: 341 | Input/Output: [(24 29 1 75) 1]
Test Case: 342 | Input/Output: [(91 2 24 66) 2]
Test Case: 343 | Input/Output: [(28 95 95 9) 9]
Test Case: 344 | Input/Output: [(55 45 32 4) 4]
Test Case: 345 | Input/Output: [(77 18 94 97) 18]
Test Case: 346 | Input/Output: [(35 38 25 36) 25]
Test Case: 347 | Input/Output: [(27 59 76 93) 27]
Test Case: 348 | Input/Output: [(91 25 82 59) 25]
Test Case: 349 | Input/Output: [(26 27 73 57) 26]
Test Case: 350 | Input/Output: [(80 69 89 50) 50]
Test Case: 351 | Input/Output: [(50 8 89 90) 8]
Test Case: 352 | Input/Output: [(8 58 86 78) 8]
Test Case: 353 | Input/Output: [(45 87 2 85) 2]
Test Case: 354 | Input/Output: [(43 6 36 12) 6]
Test Case: 355 | Input/Output: [(69 92 4 18) 4]
Test Case: 356 | Input/Output: [(88 17 78 86) 17]
Test Case: 357 | Input/Output: [(82 5 80 54) 5]
Test Case: 358 | Input/Output: [(44 86 51 64) 44]
Test Case: 359 | Input/Output: [(79 40 8 71) 8]
Test Case: 360 | Input/Output: [(61 89 13 44) 13]
Test Case: 361 | Input/Output: [(36 31 14 31) 14]
Test Case: 362 | Input/Output: [(86 100 45 80) 45]
Test Case: 363 | Input/Output: [(53 0 44 19) 0]
Test Case: 364 | Input/Output: [(50 56 20 3) 3]
Test Case: 365 | Input/Output: [(33 87 66 57) 33]
Test Case: 366 | Input/Output: [(47 33 64 28) 28]
Test Case: 367 | Input/Output: [(73 98 5 23) 5]
Test Case: 368 | Input/Output: [(47 43 34 30) 30]
Test Case: 369 | Input/Output: [(63 69 78 7) 7]
Test Case: 370 | Input/Output: [(2 28 86 40) 2]
Test Case: 371 | Input/Output: [(33 61 41 56) 33]
Test Case: 372 | Input/Output: [(47 42 59 97) 42]
Test Case: 373 | Input/Output: [(8 42 37 30) 8]
Test Case: 374 | Input/Output: [(52 24 62 37) 24]
Test Case: 375 | Input/Output: [(87 76 67 58) 58]
Test Case: 376 | Input/Output: [(56 64 16 64) 16]
Test Case: 377 | Input/Output: [(38 73 76 58) 38]
Test Case: 378 | Input/Output: [(28 99 63 29) 28]
Test Case: 379 | Input/Output: [(63 63 55 19) 19]
Test Case: 380 | Input/Output: [(22 71 6 5) 5]
Test Case: 381 | Input/Output: [(78 30 49 7) 7]
Test Case: 382 | Input/Output: [(94 69 75 98) 69]
Test Case: 383 | Input/Output: [(44 10 70 64) 10]
Test Case: 384 | Input/Output: [(50 29 16 88) 16]
Test Case: 385 | Input/Output: [(91 22 17 92) 17]
Test Case: 386 | Input/Output: [(10 73 55 55) 10]
Test Case: 387 | Input/Output: [(91 87 0 67) 0]
Test Case: 388 | Input/Output: [(98 6 92 56) 6]
Test Case: 389 | Input/Output: [(53 58 52 79) 52]
Test Case: 390 | Input/Output: [(64 38 19 90) 19]
Test Case: 391 | Input/Output: [(85 86 13 16) 13]
Test Case: 392 | Input/Output: [(14 6 83 36) 6]
Test Case: 393 | Input/Output: [(36 87 61 17) 17]
Test Case: 394 | Input/Output: [(96 76 46 67) 46]
Test Case: 395 | Input/Output: [(58 62 8 24) 8]
Test Case: 396 | Input/Output: [(59 90 10 0) 0]
Test Case: 397 | Input/Output: [(17 62 75 28) 17]
Test Case: 398 | Input/Output: [(80 12 39 38) 12]
Test Case: 399 | Input/Output: [(2 38 38 1) 1]
Test Case: 400 | Input/Output: [(-47 -59 -37 -87) -87]
Test Case: 401 | Input/Output: [(-51 30 -51 -6) -51]
Test Case: 402 | Input/Output: [(-80 59 -64 -37) -80]
Test Case: 403 | Input/Output: [(-100 -27 -64 69) -100]
Test Case: 404 | Input/Output: [(-93 19 20 33) -93]
Test Case: 405 | Input/Output: [(-16 -32 -70 -72) -72]
Test Case: 406 | Input/Output: [(68 -71 95 94) -71]
Test Case: 407 | Input/Output: [(-58 23 -9 15) -58]
Test Case: 408 | Input/Output: [(28 46 7 96) 7]
Test Case: 409 | Input/Output: [(-99 -76 95 -80) -99]
Test Case: 410 | Input/Output: [(-81 87 -68 -13) -81]
Test Case: 411 | Input/Output: [(-62 -69 -37 -74) -74]
Test Case: 412 | Input/Output: [(48 47 -83 82) -83]
Test Case: 413 | Input/Output: [(-73 -1 -23 60) -73]
Test Case: 414 | Input/Output: [(47 22 -56 72) -56]
Test Case: 415 | Input/Output: [(29 -72 23 -6) -72]
Test Case: 416 | Input/Output: [(-82 31 -64 -52) -82]
Test Case: 417 | Input/Output: [(88 17 69 100) 17]
Test Case: 418 | Input/Output: [(21 42 -42 4) -42]
Test Case: 419 | Input/Output: [(-12 -33 -51 47) -51]
Test Case: 420 | Input/Output: [(42 -23 -10 63) -23]
Test Case: 421 | Input/Output: [(-48 -55 -50 25) -55]
Test Case: 422 | Input/Output: [(-4 -47 -89 -94) -94]
Test Case: 423 | Input/Output: [(14 -27 63 4) -27]
Test Case: 424 | Input/Output: [(-21 -59 -9 -65) -65]
Test Case: 425 | Input/Output: [(4 37 89 -68) -68]
Test Case: 426 | Input/Output: [(9 64 -86 15) -86]
Test Case: 427 | Input/Output: [(-6 -22 83 88) -22]
Test Case: 428 | Input/Output: [(96 -38 -35 -15) -38]
Test Case: 429 | Input/Output: [(-88 -89 -67 59) -89]
Test Case: 430 | Input/Output: [(31 58 28 -5) -5]
Test Case: 431 | Input/Output: [(-46 83 -40 91) -46]
Test Case: 432 | Input/Output: [(-12 -20 -48 90) -48]
Test Case: 433 | Input/Output: [(7 -37 13 63) -37]
Test Case: 434 | Input/Output: [(-75 -98 47 7) -98]
Test Case: 435 | Input/Output: [(17 24 34 72) 17]
Test Case: 436 | Input/Output: [(-44 59 94 30) -44]
Test Case: 437 | Input/Output: [(-42 9 49 75) -42]
Test Case: 438 | Input/Output: [(-100 -56 -6 24) -100]
Test Case: 439 | Input/Output: [(-4 -15 -85 31) -85]
Test Case: 440 | Input/Output: [(84 -44 50 -96) -96]
Test Case: 441 | Input/Output: [(-3 -21 -90 10) -90]
Test Case: 442 | Input/Output: [(-31 65 35 -67) -67]
Test Case: 443 | Input/Output: [(50 87 -65 -91) -91]
Test Case: 444 | Input/Output: [(32 -72 -10 -66) -72]
Test Case: 445 | Input/Output: [(73 54 16 -62) -62]
Test Case: 446 | Input/Output: [(96 17 25 75) 17]
Test Case: 447 | Input/Output: [(99 74 75 10) 10]
Test Case: 448 | Input/Output: [(99 10 41 -47) -47]
Test Case: 449 | Input/Output: [(65 26 86 17) 17]
Test Case: 450 | Input/Output: [(-57 6 98 -62) -62]
Test Case: 451 | Input/Output: [(-1 89 -100 -80) -100]
Test Case: 452 | Input/Output: [(98 18 -89 -92) -92]
Test Case: 453 | Input/Output: [(83 65 26 29) 26]
Test Case: 454 | Input/Output: [(34 93 39 87) 34]
Test Case: 455 | Input/Output: [(-100 -9 -72 -47) -100]
Test Case: 456 | Input/Output: [(-52 52 -40 67) -52]
Test Case: 457 | Input/Output: [(-32 94 -91 26) -91]
Test Case: 458 | Input/Output: [(87 -35 53 -90) -90]
Test Case: 459 | Input/Output: [(-23 -88 98 98) -88]
Test Case: 460 | Input/Output: [(-57 -64 57 -14) -64]
Test Case: 461 | Input/Output: [(93 98 -89 84) -89]
Test Case: 462 | Input/Output: [(32 41 72 -6) -6]
Test Case: 463 | Input/Output: [(-71 -15 -44 61) -71]
Test Case: 464 | Input/Output: [(83 16 -22 40) -22]
Test Case: 465 | Input/Output: [(-41 47 90 -80) -80]
Test Case: 466 | Input/Output: [(74 -31 -44 53) -44]
Test Case: 467 | Input/Output: [(-73 -13 -56 74) -73]
Test Case: 468 | Input/Output: [(-43 5 58 -56) -56]
Test Case: 469 | Input/Output: [(-73 -6 61 -58) -73]
Test Case: 470 | Input/Output: [(-35 -79 98 22) -79]
Test Case: 471 | Input/Output: [(87 -98 76 -89) -98]
Test Case: 472 | Input/Output: [(-86 96 33 -70) -86]
Test Case: 473 | Input/Output: [(-79 -21 -43 1) -79]
Test Case: 474 | Input/Output: [(30 -76 -93 99) -93]
Test Case: 475 | Input/Output: [(-50 -18 91 48) -50]
Test Case: 476 | Input/Output: [(13 -58 -76 -91) -91]
Test Case: 477 | Input/Output: [(84 -74 19 -40) -74]
Test Case: 478 | Input/Output: [(-83 -81 86 -96) -96]
Test Case: 479 | Input/Output: [(49 -41 54 34) -41]
Test Case: 480 | Input/Output: [(-63 -78 9 -34) -78]
Test Case: 481 | Input/Output: [(-60 41 -46 -97) -97]
Test Case: 482 | Input/Output: [(52 -99 -14 -34) -99]
Test Case: 483 | Input/Output: [(67 35 -22 -33) -33]
Test Case: 484 | Input/Output: [(83 -58 84 -27) -58]
Test Case: 485 | Input/Output: [(43 -28 -93 50) -93]
Test Case: 486 | Input/Output: [(98 43 7 -4) -4]
Test Case: 487 | Input/Output: [(97 -40 86 -86) -86]
Test Case: 488 | Input/Output: [(-77 -13 -6 82) -77]
Test Case: 489 | Input/Output: [(-7 78 -25 5) -25]
Test Case: 490 | Input/Output: [(-6 -16 96 35) -16]
Test Case: 491 | Input/Output: [(-81 -70 -13 -57) -81]
Test Case: 492 | Input/Output: [(61 -90 37 -36) -90]
Test Case: 493 | Input/Output: [(-92 42 12 9) -92]
Test Case: 494 | Input/Output: [(-3 35 41 -9) -9]
Test Case: 495 | Input/Output: [(83 -77 -26 58) -77]
Test Case: 496 | Input/Output: [(-98 1 86 -23) -98]
Test Case: 497 | Input/Output: [(-16 37 -40 -27) -40]
Test Case: 498 | Input/Output: [(-23 18 8 -5) -23]
Test Case: 499 | Input/Output: [(-10 -96 -74 -93) -96]
Test Case: 500 | Input/Output: [(-63 96 -80 -21) -80]
Test Case: 501 | Input/Output: [(-43 -54 -13 49) -54]
Test Case: 502 | Input/Output: [(49 -10 81 -5) -10]
Test Case: 503 | Input/Output: [(-53 -39 -18 -99) -99]
Test Case: 504 | Input/Output: [(66 70 9 -51) -51]
Test Case: 505 | Input/Output: [(-1 -95 32 98) -95]
Test Case: 506 | Input/Output: [(-20 -59 46 77) -59]
Test Case: 507 | Input/Output: [(12 -68 74 60) -68]
Test Case: 508 | Input/Output: [(57 -87 -2 -13) -87]
Test Case: 509 | Input/Output: [(41 -79 -6 -37) -79]
Test Case: 510 | Input/Output: [(-8 -97 79 30) -97]
Test Case: 511 | Input/Output: [(56 -30 -48 -14) -48]
Test Case: 512 | Input/Output: [(-38 -30 86 -32) -38]
Test Case: 513 | Input/Output: [(-75 -46 37 -20) -75]
Test Case: 514 | Input/Output: [(-43 -68 67 -48) -68]
Test Case: 515 | Input/Output: [(82 2 47 93) 2]
Test Case: 516 | Input/Output: [(-52 24 -6 21) -52]
Test Case: 517 | Input/Output: [(69 -43 -67 98) -67]
Test Case: 518 | Input/Output: [(99 52 -15 -2) -15]
Test Case: 519 | Input/Output: [(-43 78 -19 91) -43]
Test Case: 520 | Input/Output: [(-34 64 -41 -80) -80]
Test Case: 521 | Input/Output: [(-31 -25 95 53) -31]
Test Case: 522 | Input/Output: [(48 -44 -30 34) -44]
Test Case: 523 | Input/Output: [(21 -55 -26 22) -55]
Test Case: 524 | Input/Output: [(17 40 -88 14) -88]
Test Case: 525 | Input/Output: [(-83 -89 11 -38) -89]
Test Case: 526 | Input/Output: [(-35 -80 -62 81) -80]
Test Case: 527 | Input/Output: [(70 -7 40 13) -7]
Test Case: 528 | Input/Output: [(-85 71 -6 28) -85]
Test Case: 529 | Input/Output: [(67 -40 77 -64) -64]
Test Case: 530 | Input/Output: [(76 -29 100 36) -29]
Test Case: 531 | Input/Output: [(51 -26 42 97) -26]
Test Case: 532 | Input/Output: [(-31 -33 -31 -100) -100]
Test Case: 533 | Input/Output: [(-14 13 28 86) -14]
Test Case: 534 | Input/Output: [(36 23 54 95) 23]
Test Case: 535 | Input/Output: [(-40 -18 5 9) -40]
Test Case: 536 | Input/Output: [(37 47 49 36) 36]
Test Case: 537 | Input/Output: [(-36 -20 -28 45) -36]
Test Case: 538 | Input/Output: [(34 59 97 35) 34]
Test Case: 539 | Input/Output: [(-100 -73 30 28) -100]
Test Case: 540 | Input/Output: [(-94 79 -34 -76) -94]
Test Case: 541 | Input/Output: [(15 -5 95 20) -5]
Test Case: 542 | Input/Output: [(46 13 -11 -23) -23]
Test Case: 543 | Input/Output: [(5 -37 74 -62) -62]
Test Case: 544 | Input/Output: [(-19 16 -95 -89) -95]
Test Case: 545 | Input/Output: [(-1 -69 45 -96) -96]
Test Case: 546 | Input/Output: [(39 -53 84 -57) -57]
Test Case: 547 | Input/Output: [(32 -68 78 -66) -68]
Test Case: 548 | Input/Output: [(-92 96 85 -35) -92]
Test Case: 549 | Input/Output: [(67 5 -30 88) -30]
Test Case: 550 | Input/Output: [(50 -44 -85 49) -85]
Test Case: 551 | Input/Output: [(-91 31 95 -17) -91]
Test Case: 552 | Input/Output: [(90 -45 69 -5) -45]
Test Case: 553 | Input/Output: [(-92 -70 -42 -33) -92]
Test Case: 554 | Input/Output: [(-52 -42 47 -79) -79]
Test Case: 555 | Input/Output: [(71 -91 82 63) -91]
Test Case: 556 | Input/Output: [(52 -55 10 48) -55]
Test Case: 557 | Input/Output: [(-48 38 -67 -69) -69]
Test Case: 558 | Input/Output: [(-98 -70 37 -72) -98]
Test Case: 559 | Input/Output: [(91 50 12 39) 12]
Test Case: 560 | Input/Output: [(67 -58 49 35) -58]
Test Case: 561 | Input/Output: [(90 -69 -96 96) -96]
Test Case: 562 | Input/Output: [(-68 -41 -66 4) -68]
Test Case: 563 | Input/Output: [(-47 22 15 72) -47]
Test Case: 564 | Input/Output: [(-54 -36 20 -63) -63]
Test Case: 565 | Input/Output: [(2 -58 -17 41) -58]
Test Case: 566 | Input/Output: [(33 -92 53 -49) -92]
Test Case: 567 | Input/Output: [(68 -69 -59 0) -69]
Test Case: 568 | Input/Output: [(65 -67 -94 -95) -95]
Test Case: 569 | Input/Output: [(-75 -53 -15 24) -75]
Test Case: 570 | Input/Output: [(35 62 -5 -94) -94]
Test Case: 571 | Input/Output: [(13 67 -28 -21) -28]
Test Case: 572 | Input/Output: [(-45 -83 21 91) -83]
Test Case: 573 | Input/Output: [(-80 33 -2 -2) -80]
Test Case: 574 | Input/Output: [(24 -29 -41 -93) -93]
Test Case: 575 | Input/Output: [(-51 -35 64 -35) -51]
Test Case: 576 | Input/Output: [(-56 -48 48 -10) -56]
Test Case: 577 | Input/Output: [(-10 -14 -83 42) -83]
Test Case: 578 | Input/Output: [(-63 -54 -68 -94) -94]
Test Case: 579 | Input/Output: [(52 9 48 39) 9]
Test Case: 580 | Input/Output: [(9 2 -47 77) -47]
Test Case: 581 | Input/Output: [(-88 -26 68 -14) -88]
Test Case: 582 | Input/Output: [(-39 52 79 23) -39]
Test Case: 583 | Input/Output: [(-23 26 -61 -5) -61]
Test Case: 584 | Input/Output: [(81 89 -35 -78) -78]
Test Case: 585 | Input/Output: [(-70 -64 -79 89) -79]
Test Case: 586 | Input/Output: [(67 -95 -40 85) -95]
Test Case: 587 | Input/Output: [(-66 36 -89 -96) -96]
Test Case: 588 | Input/Output: [(-4 78 -71 63) -71]
Test Case: 589 | Input/Output: [(18 71 87 98) 18]
Test Case: 590 | Input/Output: [(46 42 -43 89) -43]
Test Case: 591 | Input/Output: [(-10 74 -67 -63) -67]
Test Case: 592 | Input/Output: [(36 -27 -67 55) -67]
Test Case: 593 | Input/Output: [(-60 71 72 22) -60]
Test Case: 594 | Input/Output: [(-33 63 81 -45) -45]
Test Case: 595 | Input/Output: [(6 68 37 77) 6]
Test Case: 596 | Input/Output: [(82 48 29 -100) -100]
Test Case: 597 | Input/Output: [(32 -27 -75 -18) -75]
Test Case: 598 | Input/Output: [(-66 -80 -32 49) -80]
Test Case: 599 | Input/Output: [(-33 24 62 -24) -33]
Test Case: 600 | Input/Output: [(-57 -37 29 -63) -63]
Test Case: 601 | Input/Output: [(36 -38 88 11) -38]
Test Case: 602 | Input/Output: [(13 -8 -54 83) -54]
Test Case: 603 | Input/Output: [(19 82 -28 97) -28]
Test Case: 604 | Input/Output: [(-88 63 6 71) -88]
Test Case: 605 | Input/Output: [(4 -23 55 39) -23]
Test Case: 606 | Input/Output: [(-50 27 41 -56) -56]
Test Case: 607 | Input/Output: [(-3 46 -20 20) -20]
Test Case: 608 | Input/Output: [(-68 -85 17 -30) -85]
Test Case: 609 | Input/Output: [(-30 99 -80 -20) -80]
Test Case: 610 | Input/Output: [(-11 8 -91 -43) -91]
Test Case: 611 | Input/Output: [(61 36 -25 -15) -25]
Test Case: 612 | Input/Output: [(66 -61 6 -25) -61]
Test Case: 613 | Input/Output: [(63 -16 -34 -41) -41]
Test Case: 614 | Input/Output: [(22 -34 -53 -6) -53]
Test Case: 615 | Input/Output: [(-67 -7 59 20) -67]
Test Case: 616 | Input/Output: [(16 -60 48 -9) -60]
Test Case: 617 | Input/Output: [(-44 5 59 -2) -44]
Test Case: 618 | Input/Output: [(71 6 -33 -94) -94]
Test Case: 619 | Input/Output: [(70 8 -44 43) -44]
Test Case: 620 | Input/Output: [(-21 59 46 16) -21]
Test Case: 621 | Input/Output: [(-79 54 65 -49) -79]
Test Case: 622 | Input/Output: [(-94 58 -70 -91) -94]
Test Case: 623 | Input/Output: [(-31 24 70 -29) -31]
Test Case: 624 | Input/Output: [(91 -99 6 75) -99]
Test Case: 625 | Input/Output: [(-1 3 49 -11) -11]
Test Case: 626 | Input/Output: [(18 -96 1 97) -96]
Test Case: 627 | Input/Output: [(-26 -48 -1 5) -48]
Test Case: 628 | Input/Output: [(42 -74 -76 -25) -76]
Test Case: 629 | Input/Output: [(56 -19 19 6) -19]
Test Case: 630 | Input/Output: [(-30 9 47 75) -30]
Test Case: 631 | Input/Output: [(-34 77 86 50) -34]
Test Case: 632 | Input/Output: [(-24 -78 -42 7) -78]
Test Case: 633 | Input/Output: [(24 52 -98 49) -98]
Test Case: 634 | Input/Output: [(53 82 78 -7) -7]
Test Case: 635 | Input/Output: [(-60 89 8 -21) -60]
Test Case: 636 | Input/Output: [(15 96 95 -58) -58]
Test Case: 637 | Input/Output: [(-14 47 -68 3) -68]
Test Case: 638 | Input/Output: [(-58 -56 -11 -90) -90]
Test Case: 639 | Input/Output: [(88 18 41 44) 18]
Test Case: 640 | Input/Output: [(53 -69 -76 -54) -76]
Test Case: 641 | Input/Output: [(48 -49 -27 66) -49]
Test Case: 642 | Input/Output: [(82 -77 12 67) -77]
Test Case: 643 | Input/Output: [(95 29 -98 67) -98]
Test Case: 644 | Input/Output: [(30 -72 22 -98) -98]
Test Case: 645 | Input/Output: [(88 69 -4 -62) -62]
Test Case: 646 | Input/Output: [(70 -28 60 -87) -87]
Test Case: 647 | Input/Output: [(21 89 62 11) 11]
Test Case: 648 | Input/Output: [(44 -93 18 96) -93]
Test Case: 649 | Input/Output: [(8 -53 -15 -71) -71]
Test Case: 650 | Input/Output: [(49 19 19 -45) -45]
Test Case: 651 | Input/Output: [(59 -47 -78 -53) -78]
Test Case: 652 | Input/Output: [(-93 87 81 52) -93]
Test Case: 653 | Input/Output: [(94 -83 10 19) -83]
Test Case: 654 | Input/Output: [(34 43 81 44) 34]
Test Case: 655 | Input/Output: [(-55 -40 -83 60) -83]
Test Case: 656 | Input/Output: [(35 -81 -88 -84) -88]
Test Case: 657 | Input/Output: [(3 -33 -6 83) -33]
Test Case: 658 | Input/Output: [(-8 11 48 55) -8]
Test Case: 659 | Input/Output: [(-13 18 95 -83) -83]
Test Case: 660 | Input/Output: [(-55 -90 86 3) -90]
Test Case: 661 | Input/Output: [(-80 -77 100 14) -80]
Test Case: 662 | Input/Output: [(65 6 12 -45) -45]
Test Case: 663 | Input/Output: [(47 79 -59 -64) -64]
Test Case: 664 | Input/Output: [(-16 -43 -34 25) -43]
Test Case: 665 | Input/Output: [(78 53 94 58) 53]
Test Case: 666 | Input/Output: [(-66 -4 43 90) -66]
Test Case: 667 | Input/Output: [(-46 -78 -65 86) -78]
Test Case: 668 | Input/Output: [(-76 78 64 72) -76]
Test Case: 669 | Input/Output: [(80 38 -64 35) -64]
Test Case: 670 | Input/Output: [(-85 80 -57 -75) -85]
Test Case: 671 | Input/Output: [(-56 100 96 26) -56]
Test Case: 672 | Input/Output: [(-90 -32 94 19) -90]
Test Case: 673 | Input/Output: [(82 -26 75 -53) -53]
Test Case: 674 | Input/Output: [(73 -27 74 88) -27]
Test Case: 675 | Input/Output: [(56 -53 -11 23) -53]
Test Case: 676 | Input/Output: [(70 -51 -69 -51) -69]
Test Case: 677 | Input/Output: [(-37 -12 -5 41) -37]
Test Case: 678 | Input/Output: [(53 -22 41 98) -22]
Test Case: 679 | Input/Output: [(63 6 49 29) 6]
Test Case: 680 | Input/Output: [(67 59 -27 -32) -32]
Test Case: 681 | Input/Output: [(5 -6 77 73) -6]
Test Case: 682 | Input/Output: [(73 11 66 -91) -91]
Test Case: 683 | Input/Output: [(-17 -18 71 -9) -18]
Test Case: 684 | Input/Output: [(22 32 -40 -49) -49]
Test Case: 685 | Input/Output: [(88 -50 92 -74) -74]
Test Case: 686 | Input/Output: [(-42 15 -79 94) -79]
Test Case: 687 | Input/Output: [(80 -26 -90 -91) -91]
Test Case: 688 | Input/Output: [(-87 78 25 20) -87]
Test Case: 689 | Input/Output: [(24 -43 -25 89) -43]
Test Case: 690 | Input/Output: [(-46 42 8 4) -46]
Test Case: 691 | Input/Output: [(-10 26 -12 94) -12]
Test Case: 692 | Input/Output: [(-9 44 38 8) -9]
Test Case: 693 | Input/Output: [(96 20 59 -27) -27]
Test Case: 694 | Input/Output: [(58 -27 -51 -98) -98]
Test Case: 695 | Input/Output: [(-87 -76 -30 8) -87]
Test Case: 696 | Input/Output: [(67 64 -36 -77) -77]
Test Case: 697 | Input/Output: [(-60 -18 74 -27) -60]
Test Case: 698 | Input/Output: [(-95 71 84 -27) -95]
Test Case: 699 | Input/Output: [(-36 8 -91 41) -91]
Test Case: 700 | Input/Output: [(55 -84 41 -38) -84]
Test Case: 701 | Input/Output: [(-59 -21 -34 89) -59]
Test Case: 702 | Input/Output: [(17 -57 9 -85) -85]
Test Case: 703 | Input/Output: [(21 -40 47 -95) -95]
Test Case: 704 | Input/Output: [(-23 64 -21 91) -23]
Test Case: 705 | Input/Output: [(85 -61 -68 58) -68]
Test Case: 706 | Input/Output: [(10 -46 24 24) -46]
Test Case: 707 | Input/Output: [(74 92 93 23) 23]
Test Case: 708 | Input/Output: [(-36 -40 -93 -4) -93]
Test Case: 709 | Input/Output: [(56 -90 -2 -38) -90]
Test Case: 710 | Input/Output: [(-60 -84 99 -18) -84]
Test Case: 711 | Input/Output: [(-51 54 26 -68) -68]
Test Case: 712 | Input/Output: [(85 36 97 -8) -8]
Test Case: 713 | Input/Output: [(86 97 -85 85) -85]
Test Case: 714 | Input/Output: [(-89 -83 85 29) -89]
Test Case: 715 | Input/Output: [(100 85 51 66) 51]
Test Case: 716 | Input/Output: [(-69 95 -56 -98) -98]
Test Case: 717 | Input/Output: [(94 98 -91 57) -91]
Test Case: 718 | Input/Output: [(8 -33 23 34) -33]
Test Case: 719 | Input/Output: [(-25 83 25 -66) -66]
Test Case: 720 | Input/Output: [(-6 -95 4 -53) -95]
Test Case: 721 | Input/Output: [(-13 29 -95 -21) -95]
Test Case: 722 | Input/Output: [(82 32 -44 72) -44]
Test Case: 723 | Input/Output: [(99 -39 -60 -51) -60]
Test Case: 724 | Input/Output: [(-16 -77 55 13) -77]
Test Case: 725 | Input/Output: [(-70 33 -28 71) -70]
Test Case: 726 | Input/Output: [(-56 33 55 -38) -56]
Test Case: 727 | Input/Output: [(25 90 -85 90) -85]
Test Case: 728 | Input/Output: [(-25 -75 -20 24) -75]
Test Case: 729 | Input/Output: [(-10 75 92 82) -10]
Test Case: 730 | Input/Output: [(88 -26 -8 -72) -72]
Test Case: 731 | Input/Output: [(80 28 -86 66) -86]
Test Case: 732 | Input/Output: [(94 13 -98 21) -98]
Test Case: 733 | Input/Output: [(45 45 -67 -71) -71]
Test Case: 734 | Input/Output: [(43 6 33 -33) -33]
Test Case: 735 | Input/Output: [(-96 -25 64 -5) -96]
Test Case: 736 | Input/Output: [(44 -23 19 -40) -40]
Test Case: 737 | Input/Output: [(-29 -78 91 99) -78]
Test Case: 738 | Input/Output: [(-55 64 -2 69) -55]
Test Case: 739 | Input/Output: [(38 -12 67 75) -12]
Test Case: 740 | Input/Output: [(-77 -59 -26 59) -77]
Test Case: 741 | Input/Output: [(2 32 32 39) 2]
Test Case: 742 | Input/Output: [(-12 43 -28 -52) -52]
Test Case: 743 | Input/Output: [(56 34 4 -21) -21]
Test Case: 744 | Input/Output: [(-8 -67 -40 -87) -87]
Test Case: 745 | Input/Output: [(28 -53 -19 26) -53]
Test Case: 746 | Input/Output: [(-40 67 -33 26) -40]
Test Case: 747 | Input/Output: [(-6 0 28 23) -6]
Test Case: 748 | Input/Output: [(-88 31 79 9) -88]
Test Case: 749 | Input/Output: [(48 32 78 91) 32]
Test Case: 750 | Input/Output: [(94 -15 -50 -65) -65]
Test Case: 751 | Input/Output: [(-4 -96 -20 20) -96]
Test Case: 752 | Input/Output: [(91 -5 44 28) -5]
Test Case: 753 | Input/Output: [(-82 -68 -66 6) -82]
Test Case: 754 | Input/Output: [(65 -51 45 -95) -95]
Test Case: 755 | Input/Output: [(69 -25 63 51) -25]
Test Case: 756 | Input/Output: [(2 -47 -71 15) -71]
Test Case: 757 | Input/Output: [(-14 7 -77 52) -77]
Test Case: 758 | Input/Output: [(-20 -21 26 -83) -83]
Test Case: 759 | Input/Output: [(-67 -45 -38 -56) -67]
Test Case: 760 | Input/Output: [(26 -10 29 22) -10]
Test Case: 761 | Input/Output: [(37 -53 -68 77) -68]
Test Case: 762 | Input/Output: [(-67 -80 -25 -78) -80]
Test Case: 763 | Input/Output: [(59 29 97 54) 29]
Test Case: 764 | Input/Output: [(-62 58 72 34) -62]
Test Case: 765 | Input/Output: [(32 -95 94 56) -95]
Test Case: 766 | Input/Output: [(-22 -35 -1 58) -35]
Test Case: 767 | Input/Output: [(-77 6 97 -23) -77]
Test Case: 768 | Input/Output: [(-82 61 -46 42) -82]
Test Case: 769 | Input/Output: [(-34 -15 -73 -12) -73]
Test Case: 770 | Input/Output: [(84 15 53 77) 15]
Test Case: 771 | Input/Output: [(14 -91 -51 -19) -91]
Test Case: 772 | Input/Output: [(31 19 -31 -63) -63]
Test Case: 773 | Input/Output: [(-58 47 28 94) -58]
Test Case: 774 | Input/Output: [(94 60 97 67) 60]
Test Case: 775 | Input/Output: [(52 -77 77 3) -77]
Test Case: 776 | Input/Output: [(-6 -48 70 -68) -68]
Test Case: 777 | Input/Output: [(4 -49 32 -71) -71]
Test Case: 778 | Input/Output: [(96 -19 15 6) -19]
Test Case: 779 | Input/Output: [(46 -27 19 31) -27]
Test Case: 780 | Input/Output: [(18 -95 -33 -78) -95]
Test Case: 781 | Input/Output: [(99 -48 -93 73) -93]
Test Case: 782 | Input/Output: [(-10 -31 -33 37) -33]
Test Case: 783 | Input/Output: [(-54 -7 -69 10) -69]
Test Case: 784 | Input/Output: [(24 97 77 71) 24]
Test Case: 785 | Input/Output: [(-78 20 90 80) -78]
Test Case: 786 | Input/Output: [(69 -1 -38 61) -38]
Test Case: 787 | Input/Output: [(-62 90 95 98) -62]
Test Case: 788 | Input/Output: [(-89 -54 -89 8) -89]
Test Case: 789 | Input/Output: [(78 100 95 42) 42]
Test Case: 790 | Input/Output: [(-33 63 66 100) -33]
Test Case: 791 | Input/Output: [(-70 -2 -3 1) -70]
Test Case: 792 | Input/Output: [(21 -88 -71 -41) -88]
Test Case: 793 | Input/Output: [(63 64 -98 26) -98]
Test Case: 794 | Input/Output: [(-48 -79 54 -1) -79]
Test Case: 795 | Input/Output: [(-25 -4 -2 -62) -62]
Test Case: 796 | Input/Output: [(1 33 -16 -74) -74]
Test Case: 797 | Input/Output: [(-23 5 -65 71) -65]
Test Case: 798 | Input/Output: [(-44 -97 36 100) -97]
Test Case: 799 | Input/Output: [(98 -24 -36 76) -36]
Test Case: 800 | Input/Output: [(92 -52 -83 97) -83]
Test Case: 801 | Input/Output: [(87 -70 -64 77) -70]
Test Case: 802 | Input/Output: [(-21 -1 14 -83) -83]
Test Case: 803 | Input/Output: [(9 50 1 70) 1]
Test Case: 804 | Input/Output: [(-38 22 -25 33) -38]
Test Case: 805 | Input/Output: [(-32 86 -71 27) -71]
Test Case: 806 | Input/Output: [(79 -66 -13 42) -66]
Test Case: 807 | Input/Output: [(-46 -12 31 93) -46]
Test Case: 808 | Input/Output: [(22 19 100 -95) -95]
Test Case: 809 | Input/Output: [(-74 65 -5 -56) -74]
Test Case: 810 | Input/Output: [(-49 7 -10 -15) -49]
Test Case: 811 | Input/Output: [(20 -65 -22 51) -65]
Test Case: 812 | Input/Output: [(55 -15 -45 44) -45]
Test Case: 813 | Input/Output: [(46 -83 37 -59) -83]
Test Case: 814 | Input/Output: [(-56 54 -11 12) -56]
Test Case: 815 | Input/Output: [(99 -16 25 -1) -16]
Test Case: 816 | Input/Output: [(-28 20 -1 -25) -28]
Test Case: 817 | Input/Output: [(-52 86 12 40) -52]
Test Case: 818 | Input/Output: [(-32 -92 68 6) -92]
Test Case: 819 | Input/Output: [(-64 -46 20 41) -64]
Test Case: 820 | Input/Output: [(11 33 74 98) 11]
Test Case: 821 | Input/Output: [(42 16 -49 -46) -49]
Test Case: 822 | Input/Output: [(92 7 27 36) 7]
Test Case: 823 | Input/Output: [(0 -8 -98 -24) -98]
Test Case: 824 | Input/Output: [(49 -16 28 54) -16]
Test Case: 825 | Input/Output: [(-4 -39 -1 99) -39]
Test Case: 826 | Input/Output: [(34 90 72 -71) -71]
Test Case: 827 | Input/Output: [(-98 -3 -82 -100) -100]
Test Case: 828 | Input/Output: [(-36 46 38 2) -36]
Test Case: 829 | Input/Output: [(19 -86 -28 -48) -86]
Test Case: 830 | Input/Output: [(8 49 -99 84) -99]
Test Case: 831 | Input/Output: [(91 -23 -36 -43) -43]
Test Case: 832 | Input/Output: [(93 11 55 -6) -6]
Test Case: 833 | Input/Output: [(14 -17 -79 -91) -91]
Test Case: 834 | Input/Output: [(-95 -10 -50 -26) -95]
Test Case: 835 | Input/Output: [(-100 57 -85 65) -100]
Test Case: 836 | Input/Output: [(11 12 -45 91) -45]
Test Case: 837 | Input/Output: [(-28 46 -71 59) -71]
Test Case: 838 | Input/Output: [(11 -93 -89 -84) -93]
Test Case: 839 | Input/Output: [(41 40 -88 -6) -88]
Test Case: 840 | Input/Output: [(-73 -66 39 30) -73]
Test Case: 841 | Input/Output: [(-43 59 -46 91) -46]
Test Case: 842 | Input/Output: [(-30 -9 -20 93) -30]
Test Case: 843 | Input/Output: [(-5 -46 -42 -31) -46]
Test Case: 844 | Input/Output: [(-92 40 82 -79) -92]
Test Case: 845 | Input/Output: [(-68 -70 91 -93) -93]
Test Case: 846 | Input/Output: [(-86 -95 -63 -92) -95]
Test Case: 847 | Input/Output: [(-65 -14 96 62) -65]
Test Case: 848 | Input/Output: [(92 -38 -20 39) -38]
Test Case: 849 | Input/Output: [(-32 -28 81 66) -32]
Test Case: 850 | Input/Output: [(-59 -41 87 -95) -95]
Test Case: 851 | Input/Output: [(43 -16 40 73) -16]
Test Case: 852 | Input/Output: [(-70 38 -1 51) -70]
Test Case: 853 | Input/Output: [(51 81 53 -91) -91]
Test Case: 854 | Input/Output: [(49 -80 55 -12) -80]
Test Case: 855 | Input/Output: [(36 -86 72 81) -86]
Test Case: 856 | Input/Output: [(26 -44 31 -31) -44]
Test Case: 857 | Input/Output: [(58 22 51 -60) -60]
Test Case: 858 | Input/Output: [(67 57 46 -23) -23]
Test Case: 859 | Input/Output: [(-19 -64 -35 59) -64]
Test Case: 860 | Input/Output: [(-8 -93 37 -9) -93]
Test Case: 861 | Input/Output: [(72 21 56 52) 21]
Test Case: 862 | Input/Output: [(32 -62 -27 -2) -62]
Test Case: 863 | Input/Output: [(71 -23 17 -33) -33]
Test Case: 864 | Input/Output: [(83 -100 23 56) -100]
Test Case: 865 | Input/Output: [(-26 -75 -44 63) -75]
Test Case: 866 | Input/Output: [(-73 96 -31 70) -73]
Test Case: 867 | Input/Output: [(-98 -22 10 -39) -98]
Test Case: 868 | Input/Output: [(-18 4 -63 78) -63]
Test Case: 869 | Input/Output: [(67 -74 88 89) -74]
Test Case: 870 | Input/Output: [(-67 16 39 91) -67]
Test Case: 871 | Input/Output: [(-7 48 36 -51) -51]
Test Case: 872 | Input/Output: [(12 51 28 -93) -93]
Test Case: 873 | Input/Output: [(77 -46 26 -93) -93]
Test Case: 874 | Input/Output: [(84 79 -65 93) -65]
Test Case: 875 | Input/Output: [(57 66 42 52) 42]
Test Case: 876 | Input/Output: [(-77 71 -17 54) -77]
Test Case: 877 | Input/Output: [(68 100 72 -23) -23]
Test Case: 878 | Input/Output: [(7 -82 -33 32) -82]
Test Case: 879 | Input/Output: [(62 -34 94 20) -34]
Test Case: 880 | Input/Output: [(28 -42 75 -37) -42]
Test Case: 881 | Input/Output: [(-41 -77 12 -3) -77]
Test Case: 882 | Input/Output: [(-70 -51 -52 -10) -70]
Test Case: 883 | Input/Output: [(-81 -16 79 26) -81]
Test Case: 884 | Input/Output: [(-71 -34 -26 59) -71]
Test Case: 885 | Input/Output: [(-66 52 28 7) -66]
Test Case: 886 | Input/Output: [(7 -22 -57 -80) -80]
Test Case: 887 | Input/Output: [(53 62 27 -2) -2]
Test Case: 888 | Input/Output: [(-72 -1 88 91) -72]
Test Case: 889 | Input/Output: [(54 84 -45 76) -45]
Test Case: 890 | Input/Output: [(24 -100 -62 22) -100]
Test Case: 891 | Input/Output: [(-78 12 -98 -46) -98]
Test Case: 892 | Input/Output: [(-9 -37 -85 83) -85]
Test Case: 893 | Input/Output: [(15 64 -16 -1) -16]
Test Case: 894 | Input/Output: [(-13 73 -3 -95) -95]
Test Case: 895 | Input/Output: [(79 -82 -62 18) -82]
Test Case: 896 | Input/Output: [(32 62 27 -67) -67]
Test Case: 897 | Input/Output: [(-100 10 -68 14) -100]
Test Case: 898 | Input/Output: [(79 14 -23 -52) -52]
Test Case: 899 | Input/Output: [(-72 21 -3 -53) -72]
Test Case: 900 | Input/Output: [(52 -73 -50 -58) -73]
Test Case: 901 | Input/Output: [(-61 -35 -19 -11) -61]
Test Case: 902 | Input/Output: [(1 78 28 -61) -61]
Test Case: 903 | Input/Output: [(29 -88 35 81) -88]
Test Case: 904 | Input/Output: [(-27 88 -5 64) -27]
Test Case: 905 | Input/Output: [(-51 45 -82 -69) -82]
Test Case: 906 | Input/Output: [(40 -83 -31 -65) -83]
Test Case: 907 | Input/Output: [(-30 67 -75 -10) -75]
Test Case: 908 | Input/Output: [(66 20 88 -46) -46]
Test Case: 909 | Input/Output: [(-43 60 98 -81) -81]
Test Case: 910 | Input/Output: [(17 -89 -14 -25) -89]
Test Case: 911 | Input/Output: [(-90 -13 -100 -51) -100]
Test Case: 912 | Input/Output: [(-11 -62 -27 19) -62]
Test Case: 913 | Input/Output: [(-4 -85 -2 5) -85]
Test Case: 914 | Input/Output: [(-99 -81 -66 -3) -99]
Test Case: 915 | Input/Output: [(27 87 83 83) 27]
Test Case: 916 | Input/Output: [(-95 83 61 79) -95]
Test Case: 917 | Input/Output: [(31 17 68 -6) -6]
Test Case: 918 | Input/Output: [(34 -15 99 1) -15]
Test Case: 919 | Input/Output: [(-74 -14 -54 11) -74]
Test Case: 920 | Input/Output: [(15 32 -41 -88) -88]
Test Case: 921 | Input/Output: [(10 56 99 42) 10]
Test Case: 922 | Input/Output: [(48 -87 -49 -48) -87]
Test Case: 923 | Input/Output: [(-28 95 36 -52) -52]
Test Case: 924 | Input/Output: [(-15 51 95 41) -15]
Test Case: 925 | Input/Output: [(89 45 40 -14) -14]
Test Case: 926 | Input/Output: [(70 -46 50 -13) -46]
Test Case: 927 | Input/Output: [(-72 14 30 -42) -72]
Test Case: 928 | Input/Output: [(93 88 -8 53) -8]
Test Case: 929 | Input/Output: [(74 74 -92 -87) -92]
Test Case: 930 | Input/Output: [(22 57 78 -57) -57]
Test Case: 931 | Input/Output: [(-61 -35 -52 48) -61]
Test Case: 932 | Input/Output: [(-50 11 -64 20) -64]
Test Case: 933 | Input/Output: [(-34 40 96 -2) -34]
Test Case: 934 | Input/Output: [(99 30 -17 39) -17]
Test Case: 935 | Input/Output: [(82 -69 -45 -45) -69]
Test Case: 936 | Input/Output: [(51 -81 84 -81) -81]
Test Case: 937 | Input/Output: [(-71 47 8 -51) -71]
Test Case: 938 | Input/Output: [(6 6 -92 44) -92]
Test Case: 939 | Input/Output: [(-18 94 -36 2) -36]
Test Case: 940 | Input/Output: [(-28 48 -92 24) -92]
Test Case: 941 | Input/Output: [(-27 99 11 -52) -52]
Test Case: 942 | Input/Output: [(-7 -61 -70 -54) -70]
Test Case: 943 | Input/Output: [(-88 6 73 69) -88]
Test Case: 944 | Input/Output: [(29 12 30 14) 12]
Test Case: 945 | Input/Output: [(51 11 -47 0) -47]
Test Case: 946 | Input/Output: [(-45 51 -82 -49) -82]
Test Case: 947 | Input/Output: [(41 43 7 -78) -78]
Test Case: 948 | Input/Output: [(-25 -17 58 41) -25]
Test Case: 949 | Input/Output: [(58 -82 72 20) -82]
Test Case: 950 | Input/Output: [(43 18 -60 57) -60]
Test Case: 951 | Input/Output: [(78 37 -40 52) -40]
Test Case: 952 | Input/Output: [(68 14 76 88) 14]
Test Case: 953 | Input/Output: [(67 94 -64 60) -64]
Test Case: 954 | Input/Output: [(-84 90 18 -33) -84]
Test Case: 955 | Input/Output: [(46 5 -14 -89) -89]
Test Case: 956 | Input/Output: [(87 79 -44 74) -44]
Test Case: 957 | Input/Output: [(-49 72 19 9) -49]
Test Case: 958 | Input/Output: [(-60 -59 -17 -7) -60]
Test Case: 959 | Input/Output: [(-45 -5 -29 -11) -45]
Test Case: 960 | Input/Output: [(-71 -53 -93 65) -93]
Test Case: 961 | Input/Output: [(-83 87 29 -17) -83]
Test Case: 962 | Input/Output: [(-19 37 -31 50) -31]
Test Case: 963 | Input/Output: [(-78 3 100 16) -78]
Test Case: 964 | Input/Output: [(28 12 -38 -71) -71]
Test Case: 965 | Input/Output: [(-98 65 -26 -21) -98]
Test Case: 966 | Input/Output: [(1 85 -83 -2) -83]
Test Case: 967 | Input/Output: [(-5 -52 69 -16) -52]
Test Case: 968 | Input/Output: [(-89 -10 60 -5) -89]
Test Case: 969 | Input/Output: [(49 -1 39 -67) -67]
Test Case: 970 | Input/Output: [(-1 -63 -97 69) -97]
Test Case: 971 | Input/Output: [(-74 -4 31 85) -74]
Test Case: 972 | Input/Output: [(-86 -44 40 0) -86]
Test Case: 973 | Input/Output: [(-67 96 88 -27) -67]
Test Case: 974 | Input/Output: [(-61 -50 -29 -100) -100]
Test Case: 975 | Input/Output: [(25 -17 -28 -36) -36]
Test Case: 976 | Input/Output: [(26 -2 -44 -33) -44]
Test Case: 977 | Input/Output: [(-48 26 6 -74) -74]
Test Case: 978 | Input/Output: [(-13 58 22 -97) -97]
Test Case: 979 | Input/Output: [(18 -95 32 -68) -95]
Test Case: 980 | Input/Output: [(-62 86 90 -97) -97]
Test Case: 981 | Input/Output: [(24 -57 56 -43) -57]
Test Case: 982 | Input/Output: [(39 -58 46 -88) -88]
Test Case: 983 | Input/Output: [(92 -1 -95 -81) -95]
Test Case: 984 | Input/Output: [(-73 3 -60 -98) -98]
Test Case: 985 | Input/Output: [(-27 -14 2 -29) -29]
Test Case: 986 | Input/Output: [(-3 1 66 -51) -51]
Test Case: 987 | Input/Output: [(70 76 -27 35) -27]
Test Case: 988 | Input/Output: [(30 47 -73 15) -73]
Test Case: 989 | Input/Output: [(-31 76 -86 89) -86]
Test Case: 990 | Input/Output: [(-56 28 -96 88) -96]
Test Case: 991 | Input/Output: [(-9 -35 -82 70) -82]
Test Case: 992 | Input/Output: [(59 -73 -4 -62) -73]
Test Case: 993 | Input/Output: [(-80 -5 -7 31) -80]
Test Case: 994 | Input/Output: [(-84 100 -71 63) -84]
Test Case: 995 | Input/Output: [(-81 -29 6 80) -81]
Test Case: 996 | Input/Output: [(-79 -57 94 92) -79]
Test Case: 997 | Input/Output: [(-98 29 100 86) -98]
Test Case: 998 | Input/Output: [(-11 -5 -52 -96) -96]
Test Case: 999 | Input/Output: [(-56 95 34 -73) -73]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -85 120 -27 67 -96 -101 -78 -103 114 -79 74 13 -83 12 -10 76
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[57 -83 57 57] -83] [[51 51 -34 51] -34] [[48 48 -65 48] -65] [[36 -12 -12 -12] -12] [[18 18 -82 18] -82] [[34 -85 34 34] -85] [[90 -75 90 90] -75] [[100 40 100 100] 40] [[78 -19 -19 -19] -19] [[4 4 4 -23] -23] [(16 16 16 16) 16] [(-75 -75 -75 -75) -75] [(-17 -17 -17 -17) -17] [(11 11 11 11) 11] [(28 28 28 28) 28] [(95 91 61 7) 7] [(13 26 67 70) 13] [(32 47 17 86) 17] [(14 14 38 50) 14] [(17 61 0 53) 0] [(63 75 5 90) 5] [(20 51 5 76) 5] [(71 19 69 45) 19] [(68 42 35 68) 35] [(16 53 100 19) 16] [(4 33 96 26) 4] [(68 99 38 32) 32] [(10 35 3 6) 3] [(64 90 44 17) 17] [(24 46 21 78) 21] [(56 69 40 76) 40] [(43 91 41 87) 41] [(55 50 46 47) 46] [(21 7 15 14) 7] [(38 33 59 64) 33] [(-78 -78 29 30) -78] [(-54 19 66 87) -54] [(-85 -48 59 -98) -98] [(-63 74 17 -82) -82] [(-52 -43 62 -66) -66] [(77 -54 27 64) -54] [(33 -34 -82 26) -82] [(-43 -35 14 -71) -71] [(-64 29 60 36) -64] [(-51 -37 -54 11) -54] [(-79 23 -9 -72) -79] [(65 -64 100 93) -64] [(-2 65 78 99) -2] [(-51 -89 17 72) -89] [(-96 30 100 42) -96] [(-75 -43 84 73) -75] [(-1 -89 52 -89) -89] [(84 50 -62 -78) -78] [(-33 -74 -54 -48) -74] [(-31 -42 -4 67) -42] [(76 65 32 -81) -81] [(-33 -29 -95 -35) -95] [(81 49 -46 40) -46] [(-60 79 76 -5) -60] [(45 -71 12 -39) -71] [(-50 90 62 -13) -50] [(15 75 63 -28) -28] [(65 -41 -73 92) -73] [(72 54 21 7) 7] [(40 -79 -51 -28) -79] [(-82 -98 2 -83) -98] [(-96 -32 -68 43) -96] [(-34 27 -69 -66) -69] [(64 -70 26 8) -70] [(76 -41 51 -13) -41] [(45 37 57 25) 25] [(-60 11 36 2) -60] [(-29 33 27 -3) -29] [(-3 -25 46 29) -25] [(58 -46 10 18) -46] [(12 -74 -29 99) -74] [(-72 -32 -1 -92) -92] [(74 85 72 41) 41] [(-74 -20 22 7) -74] [(-16 -9 68 -22) -22] [(-63 93 18 -11) -63] [(33 16 16 37) 16] [(-11 -48 -31 85) -48] [(-11 92 -27 -84) -84] [(56 -70 -63 100) -70] [(92 -91 -59 90) -91] [(11 -91 51 -9) -91] [(55 -76 -40 -56) -76] [(23 77 58 -28) -28] [(-68 2 -97 80) -97] [(78 -51 -46 -22) -51] [(33 -88 88 86) -88] [(-1 -58 -9 24) -58] [(-33 -10 73 -25) -33] [(35 -43 42 3) -43])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: 51                 
Correct output: -65                 | Program output: 48                 
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: 18                 
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 91                 
Correct output: 13                  | Program output: 26                 
Correct output: 17                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 61                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 35                  | Program output: 42                 
Correct output: 16                  | Program output: 53                 
Correct output: 4                   | Program output: 33                 
Correct output: 32                  | Program output: 99                 
Correct output: 3                   | Program output: 35                 
Correct output: 17                  | Program output: 90                 
Correct output: 21                  | Program output: 46                 
Correct output: 40                  | Program output: 69                 
Correct output: 41                  | Program output: 91                 
Correct output: 46                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 19                 
Correct output: -98                 | Program output: -48                
Correct output: -82                 | Program output: 74                 
Correct output: -66                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -34                
Correct output: -71                 | Program output: -35                
Correct output: -64                 | Program output: 29                 
Correct output: -54                 | Program output: -37                
Correct output: -79                 | Program output: 23                 
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 65                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 30                 
Correct output: -75                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: 65                 
Correct output: -95                 | Program output: -29                
Correct output: -46                 | Program output: 49                 
Correct output: -60                 | Program output: 79                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: 90                 
Correct output: -28                 | Program output: 75                 
Correct output: -73                 | Program output: -41                
Correct output: 7                   | Program output: 54                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -32                
Correct output: -69                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 37                 
Correct output: -60                 | Program output: 11                 
Correct output: -29                 | Program output: 33                 
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -32                
Correct output: 41                  | Program output: 85                 
Correct output: -74                 | Program output: -20                
Correct output: -22                 | Program output: -9                 
Correct output: -63                 | Program output: 93                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: 92                 
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 77                 
Correct output: -97                 | Program output: 2                  
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -10                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction -24} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_rot in4 -24 integer_dup_items exec_pop () integer_mult integer_fromboolean in2 exec_empty integer_flush boolean_stackdepth exec_dup_times (boolean_dup_times exec_dup (exec_yank exec_do*while () integer_gt integer_dup_times print_boolean exec_eq boolean_dup_items in4 integer_mult) exec_empty in2) exec_if (integer_dup_items exec_do*count (print_exec (exec_do*times (integer_flush boolean_or) in2))) (print_integer integer_yankdup boolean_or exec_eq boolean_flush integer_dup_times) integer_fromboolean boolean_and exec_do*while (integer_dup_items integer_eq exec_shove (exec_do*times (exec_k (exec_do*range (integer_gt)) ()))))
Lexicase best errors: [1 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction -24} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_rot in4 -24 integer_dup_items exec_pop () integer_mult integer_fromboolean in2 exec_empty integer_flush boolean_stackdepth exec_dup_times (boolean_dup_times exec_dup (exec_yank exec_do*while () integer_gt integer_dup_times print_boolean exec_eq boolean_dup_items in4 integer_mult) exec_empty in2) exec_if (integer_dup_items exec_do*count (print_exec (exec_do*times (integer_flush boolean_or) in2))) (print_integer integer_yankdup boolean_or exec_eq boolean_flush integer_dup_times) integer_fromboolean boolean_and exec_do*while (integer_dup_items integer_eq exec_shove (exec_do*times (exec_k (exec_do*range (integer_gt)) ()))))
Zero cases best errors: [1 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 2 1000 2 2 1000 1000 2 2)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (1 0 2 0 2 2 0 0 2 2)
Population mean number of perfect (error zero) cases: 0.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_boolean_811} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction 88} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_890} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_max} {:close 0, :instruction 80} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_inc boolean_invert_second_then_and boolean_flush boolean_flush exec_when (boolean_invert_first_then_and boolean_yank exec_do*count () exec_while (in1 integer_div boolean_invert_first_then_and exec_pop () tag_boolean_811 integer_yank integer_dec integer_mod boolean_invert_second_then_and) integer_shove integer_max boolean_yank integer_add in2 integer_dup_times print_integer print_boolean integer_mult boolean_dup integer_gt exec_shove (88 boolean_eq boolean_or boolean_dup_times exec_eq exec_yank) boolean_and) boolean_invert_second_then_and boolean_xor boolean_swap exec_swap () (boolean_and exec_dup (integer_yankdup in1 exec_dup (boolean_invert_second_then_and) tagged_890 exec_while (integer_dup_times) boolean_invert_first_then_and integer_max)) 80 integer_empty boolean_invert_second_then_and)
Errors: [1 1 0 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 66
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 9.989
Median total errors in population: 10
Error averages by case: (0.999 1.0 0.998 1.0 0.998 0.998 1.0 1.0 0.998 0.998)
Error minima by case: (0 1 0 1 0 0 1 1 0 0)
Average genome size in population (length): 50.866
Average program size in population (points): 70.067
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 483835
--- Timings ---
Current time: 1559593884613 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 30.1%
Fitness Testing:      1.7 seconds, 65.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: 51                 
Correct output: -65                 | Program output: 48                 
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: 18                 
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output:                    
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 13                  | Program output: 26                 
Correct output: 17                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 61                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 35                  | Program output: 42                 
Correct output: 16                  | Program output: 53                 
Correct output: 4                   | Program output: 33                 
Correct output: 32                  | Program output: 99                 
Correct output: 3                   | Program output: (exec_do*times (integer_flush boolean_or) in2)6
Correct output: 17                  | Program output: 90                 
Correct output: 21                  | Program output: 46                 
Correct output: 40                  | Program output: 69                 
Correct output: 41                  | Program output: 91                 
Correct output: 46                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 19                 
Correct output: -98                 | Program output: -48                
Correct output: -82                 | Program output: 74                 
Correct output: -66                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -34                
Correct output: -71                 | Program output: -35                
Correct output: -64                 | Program output: 29                 
Correct output: -54                 | Program output:                    
Correct output: -79                 | Program output: 23                 
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 65                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 30                 
Correct output: -75                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: 65                 
Correct output: -95                 | Program output: -29                
Correct output: -46                 | Program output: 49                 
Correct output: -60                 | Program output: 79                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: 90                 
Correct output: -28                 | Program output: 75                 
Correct output: -73                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -32                
Correct output: -69                 | Program output: 27                 
Correct output: -70                 | Program output: (exec_do*times (integer_flush boolean_or) in2)8
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 37                 
Correct output: -60                 | Program output: 11                 
Correct output: -29                 | Program output: 33                 
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -32                
Correct output: 41                  | Program output: 85                 
Correct output: -74                 | Program output: 7                  
Correct output: -22                 | Program output: -9                 
Correct output: -63                 | Program output: 93                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: 92                 
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 77                 
Correct output: -97                 | Program output: 2                  
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -10                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction -24} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_rot in4 -24 integer_dup_items exec_pop () integer_mult integer_fromboolean in2 exec_empty integer_flush boolean_xor boolean_stackdepth exec_dup_times (boolean_dup_times exec_dup (exec_yank exec_do*while () integer_dup_times boolean_dup_items in4 integer_mult) exec_empty in2) exec_if (integer_dup_items print_exec (exec_do*times (integer_flush boolean_or) in2)) () print_integer integer_yankdup boolean_or exec_eq boolean_flush integer_dup_times integer_fromboolean boolean_and exec_do*while (integer_dup_items integer_eq exec_shove (exec_do*times (exec_k (exec_do*range (integer_gt)) ()))))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 61
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction -24} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_rot in4 -24 integer_dup_items exec_pop () integer_mult integer_fromboolean in2 exec_empty integer_flush boolean_xor boolean_stackdepth exec_dup_times (boolean_dup_times exec_dup (exec_yank exec_do*while () integer_dup_times boolean_dup_items in4 integer_mult) exec_empty in2) exec_if (integer_dup_items print_exec (exec_do*times (integer_flush boolean_or) in2)) () print_integer integer_yankdup boolean_or exec_eq boolean_flush integer_dup_times integer_fromboolean boolean_and exec_do*while (integer_dup_items integer_eq exec_shove (exec_do*times (exec_k (exec_do*range (integer_gt)) ()))))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 61
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 455 5 312 320 6 3 304 317 320)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (330 455 5 312 320 6 3 304 317 320)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 1, :instruction -24} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (boolean_rot in4 -24 integer_dup_items exec_pop () integer_mult integer_fromboolean in2 exec_empty integer_flush boolean_xor boolean_stackdepth exec_dup_times (boolean_dup_times exec_dup (exec_yank exec_do*while () integer_dup_times boolean_dup_items in4 integer_mult) exec_empty in2) exec_if (integer_dup_items print_exec (exec_do*times (integer_flush boolean_or) in2)) () print_integer integer_yankdup boolean_or exec_eq boolean_flush integer_dup_times integer_fromboolean boolean_and exec_do*while (integer_dup_items integer_eq exec_shove (exec_do*times (exec_k (exec_do*range (integer_gt)) ()))))
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 46
Size: 61
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.628
Median total errors in population: 10
Error averages by case: (0.67 0.545 0.995 0.688 0.68 0.994 0.997 0.696 0.683 0.68)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.236
Average program size in population (points): 68.411
Average percent parens in population: 0.233
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1027061
--- Timings ---
Current time: 1559593886691 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         1.8 seconds, 36.3%
Fitness Testing:      2.5 seconds, 50.8%
Report:               0.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: 57                 
Correct output: -34                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: 34                 
Correct output: -75                 | Program output: 90                 
Correct output: 40                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 61                 
Correct output: 13                  | Program output: 67                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 69                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 100                
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 40                  | Program output: 40                 
Correct output: 41                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 15                 
Correct output: 33                  | Program output: 59                 
Correct output: -78                 | Program output: 29                 
Correct output: -54                 | Program output: 66                 
Correct output: -98                 | Program output: 59                 
Correct output: -82                 | Program output: 17                 
Correct output: -66                 | Program output: 62                 
Correct output: -54                 | Program output: 27                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 14                 
Correct output: -64                 | Program output: 60                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -9                 
Correct output: -64                 | Program output: 100                
Correct output: -2                  | Program output: 78                 
Correct output: -89                 | Program output: 17                 
Correct output: -96                 | Program output: 100                
Correct output: -75                 | Program output: 84                 
Correct output: -89                 | Program output: 52                 
Correct output: -78                 | Program output: -62                
Correct output: -74                 | Program output: -54                
Correct output: -42                 | Program output: -4                 
Correct output: -81                 | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: 76                 
Correct output: -71                 | Program output: 12                 
Correct output: -50                 | Program output: 62                 
Correct output: -28                 | Program output: 63                 
Correct output: -73                 | Program output: -73                
Correct output: 7                   | Program output: 21                 
Correct output: -79                 | Program output: -51                
Correct output: -98                 | Program output: 2                  
Correct output: -96                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: 26                 
Correct output: -41                 | Program output: 51                 
Correct output: 25                  | Program output: 57                 
Correct output: -60                 | Program output: 36                 
Correct output: -29                 | Program output: 27                 
Correct output: -25                 | Program output: 46                 
Correct output: -46                 | Program output: 10                 
Correct output: -74                 | Program output: -29                
Correct output: -92                 | Program output: -1                 
Correct output: 41                  | Program output: 72                 
Correct output: -74                 | Program output: 22                 
Correct output: -22                 | Program output: 68                 
Correct output: -63                 | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -31                
Correct output: -84                 | Program output: -27                
Correct output: -70                 | Program output: -63                
Correct output: -91                 | Program output: -59                
Correct output: -91                 | Program output: 51                 
Correct output: -76                 | Program output: -40                
Correct output: -28                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -46                
Correct output: -88                 | Program output: 88                 
Correct output: -58                 | Program output: -9                 
Correct output: -33                 | Program output: 73                 
Correct output: -43                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_374} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot})
Lexicase best program: (exec_empty exec_do*times () exec_do*times (boolean_and exec_do*count (boolean_shove) exec_s (exec_k_when_autoconstructing (in3 exec_do*range () print_integer) (integer_min exec_s (in1 integer_pop) (exec_do*range (boolean_or integer_dup) integer_empty boolean_swap integer_fromboolean exec_do*while (exec_do*times (exec_if (integer_sub integer_add exec_y () boolean_dup_items integer_swap) (exec_if (boolean_xor) (boolean_empty integer_gt boolean_shove boolean_or tagged_374 print_boolean exec_empty exec_dup_items exec_stackdepth exec_y (exec_eq) integer_min exec_dup_times (exec_flush boolean_dup integer_div integer_shove print_boolean) integer_add exec_dup (exec_s (integer_mod exec_when () exec_dup_items exec_dup_times () integer_rot) () ())))))) ())) () ()))
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_374} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot})
Zero cases best program: (exec_empty exec_do*times () exec_do*times (boolean_and exec_do*count (boolean_shove) exec_s (exec_k_when_autoconstructing (in3 exec_do*range () print_integer) (integer_min exec_s (in1 integer_pop) (exec_do*range (boolean_or integer_dup) integer_empty boolean_swap integer_fromboolean exec_do*while (exec_do*times (exec_if (integer_sub integer_add exec_y () boolean_dup_items integer_swap) (exec_if (boolean_xor) (boolean_empty integer_gt boolean_shove boolean_or tagged_374 print_boolean exec_empty exec_dup_items exec_stackdepth exec_y (exec_eq) integer_min exec_dup_times (exec_flush boolean_dup integer_div integer_shove print_boolean) integer_add exec_dup (exec_s (integer_mod exec_when () exec_dup_items exec_dup_times () integer_rot) () ())))))) ())) () ()))
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (481 67 110 288 110 472 64 64 65 110)
Population mean number of elite cases: 1.83
Count of perfect (error zero) individuals by case: (481 67 110 288 110 472 64 64 65 110)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_374} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot})
Best program: (exec_empty exec_do*times () exec_do*times (exec_do*count (boolean_shove) exec_s (exec_k_when_autoconstructing (in3 exec_do*range () print_integer) (integer_min exec_s (integer_pop) (exec_do*range (boolean_or integer_dup) boolean_swap integer_fromboolean exec_do*while (exec_do*times (exec_if (integer_sub integer_add integer_gte exec_y () integer_eq integer_swap boolean_dup_items exec_if (boolean_empty integer_gt boolean_shove boolean_dup_items boolean_or tagged_374 print_boolean exec_empty exec_dup_items exec_stackdepth integer_empty) (exec_eq) integer_min exec_dup_times (exec_noop) exec_flush boolean_dup boolean_dup_times boolean_invert_first_then_and integer_div integer_shove print_boolean) (integer_add integer_dup_times exec_dup (exec_s (integer_mod exec_when () exec_dup_items integer_rot) () ()))))) ())) () ()))
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 59
Size: 86
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 8.169
Median total errors in population: 10
Error averages by case: (0.519 0.933 0.89 0.712 0.89 0.528 0.936 0.936 0.935 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.336
Average program size in population (points): 62.359
Average percent parens in population: 0.255
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1538209
--- Timings ---
Current time: 1559593888989 milliseconds
Total Time:           7.0 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.9 seconds, 42.1%
Fitness Testing:      3.0 seconds, 43.4%
Report:               0.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 13                  | Program output: 26                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 19                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 53                 
Correct output: 4                   | Program output: 33                 
Correct output: 32                  | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 40                  | Program output: 40                 
Correct output: 41                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 19                 
Correct output: -98                 | Program output: -48                
Correct output: -82                 | Program output: 17                 
Correct output: -66                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -35                
Correct output: -64                 | Program output: 29                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 65                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 30                 
Correct output: -75                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: 76                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: 62                 
Correct output: -28                 | Program output: 63                 
Correct output: -73                 | Program output: -73                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: (exec_do*times (integer_stackdepth integer_flush boolean_or) in2)-70
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 37                 
Correct output: -60                 | Program output: 11                 
Correct output: -29                 | Program output: 27                 
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -32                
Correct output: 41                  | Program output: 72                 
Correct output: -74                 | Program output: -20                
Correct output: -22                 | Program output: -9                 
Correct output: -63                 | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -10                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_rot integer_shove in4 integer_dup_items exec_pop () integer_fromboolean exec_dup_times (in2 exec_empty integer_flush boolean_xor boolean_shove) exec_dup_times (boolean_rot boolean_dup_times exec_dup (exec_yank exec_do*while () boolean_dup_items in4 integer_mult) exec_empty in2) in3 exec_if (integer_dup_items print_exec (exec_do*times (integer_stackdepth integer_flush boolean_or) in2)) () integer_min print_integer boolean_or exec_eq boolean_flush integer_dup_times integer_fromboolean boolean_and exec_do*while (integer_add) integer_dup_items boolean_and integer_eq exec_shove (integer_mult exec_do*times (exec_do*while (exec_k (exec_do*range (integer_gt)) ()))))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 69
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_rot integer_shove in4 integer_dup_items exec_pop () integer_fromboolean exec_dup_times (in2 exec_empty integer_flush boolean_xor boolean_shove) exec_dup_times (boolean_rot boolean_dup_times exec_dup (exec_yank exec_do*while () boolean_dup_items in4 integer_mult) exec_empty in2) in3 exec_if (integer_dup_items print_exec (exec_do*times (integer_stackdepth integer_flush boolean_or) in2)) () integer_min print_integer boolean_or exec_eq boolean_flush integer_dup_times integer_fromboolean boolean_and exec_do*while (integer_add) integer_dup_items boolean_and integer_eq exec_shove (integer_mult exec_do*times (exec_do*while (exec_k (exec_do*range (integer_gt)) ()))))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 69
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (515 203 287 196 286 287 143 193 134 204)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (515 203 287 196 286 287 143 193 134 204)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (boolean_rot integer_shove in4 integer_dup_items exec_pop () integer_fromboolean exec_dup_times (in2 exec_empty integer_flush boolean_xor boolean_shove) exec_dup_times (boolean_rot boolean_dup_times exec_dup (exec_yank exec_do*while () boolean_dup_items in4 integer_mult) exec_empty in2) in3 exec_if (integer_dup_items print_exec (exec_do*times (integer_stackdepth integer_flush boolean_or) in2)) () integer_min print_integer boolean_or exec_eq boolean_flush integer_dup_times integer_fromboolean boolean_and exec_do*while (integer_add) integer_dup_items boolean_and integer_eq exec_shove (integer_mult exec_do*times (exec_do*while (exec_k (exec_do*range (integer_gt)) ()))))
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 52
Size: 69
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.552
Median total errors in population: 7
Error averages by case: (0.485 0.797 0.713 0.804 0.714 0.713 0.857 0.807 0.866 0.796)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.911
Average program size in population (points): 70.853
Average percent parens in population: 0.277
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2090038
--- Timings ---
Current time: 1559593891130 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.1 seconds, 44.1%
Fitness Testing:      3.7 seconds, 39.3%
Report:               1.4 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 373
Test mean error for best: 0.37300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 13                  | Program output: 26                 
Correct output: 17                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 35                  | Program output: 42                 
Correct output: 16                  | Program output: 19                 
Correct output: 4                   | Program output: 26                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 6                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 46                 
Correct output: 40                  | Program output: 69                 
Correct output: 41                  | Program output: 87                 
Correct output: 46                  | Program output: 47                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 19                 
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 29                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 65                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 30                 
Correct output: -75                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -5                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: (exec_do*times (integer_stackdepth integer_flush boolean_or) in2)-70
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 2                  
Correct output: -29                 | Program output: -3                 
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -32                
Correct output: 41                  | Program output: 41                 
Correct output: -74                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: -63                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -25                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_yankdup boolean_rot integer_shove integer_eq in4 integer_dup_items exec_pop () integer_fromboolean exec_dup_times (in2 exec_yank exec_empty integer_flush boolean_xor boolean_shove) exec_dup_times (boolean_rot boolean_dup_times exec_dup (exec_yank in4 exec_pop (integer_mult) exec_empty in2) in3 exec_if (print_exec (exec_do*times (integer_stackdepth integer_flush print_exec () boolean_or) in2)) () integer_min print_integer boolean_or exec_eq boolean_flush integer_dup_times) integer_fromboolean exec_k () (boolean_and exec_do*while (integer_add) integer_dup_items boolean_and integer_eq exec_shove (integer_mult exec_do*times (exec_do*while (exec_do*range (integer_gt))))))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_yankdup boolean_rot integer_shove integer_eq in4 integer_dup_items exec_pop () integer_fromboolean exec_dup_times (in2 exec_yank exec_empty integer_flush boolean_xor boolean_shove) exec_dup_times (boolean_rot boolean_dup_times exec_dup (exec_yank in4 exec_pop (integer_mult) exec_empty in2) in3 exec_if (print_exec (exec_do*times (integer_stackdepth integer_flush print_exec () boolean_or) in2)) () integer_min print_integer boolean_or exec_eq boolean_flush integer_dup_times) integer_fromboolean exec_k () (boolean_and exec_do*while (integer_add) integer_dup_items boolean_and integer_eq exec_shove (integer_mult exec_do*times (exec_do*while (exec_do*range (integer_gt))))))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (369 171 175 1 463 375 1 1 170 222)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (369 171 175 1 463 375 1 1 170 222)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (boolean_rot integer_shove in4 exec_when (integer_dup_items exec_pop () integer_fromboolean exec_dup_times (in2 exec_empty integer_flush boolean_xor boolean_shove) exec_dup_times (boolean_rot boolean_dup_times exec_dup (exec_yank exec_do*while () boolean_dup_items in4 integer_mult) exec_empty in2) in3 exec_if (print_exec (exec_do*times (integer_stackdepth integer_flush boolean_or) in2)) () exec_do*times (integer_min print_integer boolean_or exec_eq boolean_flush integer_dup_times) integer_fromboolean boolean_swap integer_add) boolean_and integer_eq exec_shove (integer_mult exec_do*times (exec_do*while (exec_k (exec_do*range (integer_gt)) ()))))
Errors: [0 1 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 8.052
Median total errors in population: 10
Error averages by case: (0.631 0.829 0.825 0.999 0.537 0.625 0.999 0.999 0.83 0.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.673
Average program size in population (points): 67.779
Average percent parens in population: 0.252
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.49
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2668521
--- Timings ---
Current time: 1559593893380 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.3 seconds, 46.4%
Fitness Testing:      4.2 seconds, 36.9%
Report:               1.8 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 302
Test mean error for best: 0.30200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 69                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 40                  | Program output: 40                 
Correct output: 41                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 15                 
Correct output: 33                  | Program output: 38                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -85                
Correct output: -82                 | Program output: -63                
Correct output: -66                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -34                
Correct output: -71                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -51                
Correct output: -79                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: -2                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: 32                 
Correct output: -95                 | Program output: -33                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -28                 | Program output: 15                 
Correct output: -73                 | Program output: -41                
Correct output: 7                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -72                
Correct output: 41                  | Program output: 72                 
Correct output: -74                 | Program output: -74                
Correct output: -22                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_yank in2 integer_shove exec_k_when_autoconstructing (in4 exec_pop () integer_fromboolean in2 exec_empty integer_stackdepth) (integer_flush boolean_shove) integer_shove exec_dup_times (boolean_dup_times exec_dup (exec_yank exec_do*while () integer_mult) exec_empty in2) exec_do*times (in3 integer_yankdup exec_if (print_exec (boolean_or exec_do*times (integer_stackdepth integer_flush boolean_or) in2)) () in1 integer_min print_integer boolean_or exec_eq integer_yank) integer_dup_times integer_fromboolean boolean_and exec_do*while (integer_dup_items boolean_and integer_gt integer_eq integer_mult exec_do*times (exec_do*while (integer_div exec_do*range (integer_gt)))))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 68
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_yank in2 integer_shove exec_k_when_autoconstructing (in4 exec_pop () integer_fromboolean in2 exec_empty integer_stackdepth) (integer_flush boolean_shove) integer_shove exec_dup_times (boolean_dup_times exec_dup (exec_yank exec_do*while () integer_mult) exec_empty in2) exec_do*times (in3 integer_yankdup exec_if (print_exec (boolean_or exec_do*times (integer_stackdepth integer_flush boolean_or) in2)) () in1 integer_min print_integer boolean_or exec_eq integer_yank) integer_dup_times integer_fromboolean boolean_and exec_do*while (integer_dup_items boolean_and integer_gt integer_eq integer_mult exec_do*times (exec_do*while (integer_div exec_do*range (integer_gt)))))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 68
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 97 306 184 98 462 80 261 196 433)
Population mean number of elite cases: 2.30
Count of perfect (error zero) individuals by case: (185 97 306 184 98 462 80 261 196 433)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (exec_yank in2 integer_shove exec_k_when_autoconstructing (in4 exec_pop () integer_fromboolean in2 exec_empty integer_stackdepth) (integer_flush boolean_shove) integer_shove exec_dup_times (boolean_dup_times exec_dup (exec_yank exec_do*while () integer_mult) exec_empty in2) exec_do*times (in3 integer_yankdup exec_if (print_exec (boolean_or exec_do*times (integer_stackdepth integer_flush boolean_or) in2)) () in1 integer_min print_integer boolean_or exec_eq integer_yank) integer_dup_times integer_fromboolean boolean_and exec_do*while (integer_dup_items boolean_and integer_gt integer_eq integer_mult exec_do*times (exec_do*while (integer_div exec_do*range (integer_gt)))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 52
Size: 68
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.698
Median total errors in population: 10
Error averages by case: (0.815 0.903 0.694 0.816 0.902 0.538 0.92 0.739 0.804 0.567)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.053
Average program size in population (points): 67.829
Average percent parens in population: 0.246
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.546
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3462924
--- Timings ---
Current time: 1559593895640 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.4 seconds, 46.6%
Fitness Testing:      4.9 seconds, 35.6%
Report:               2.3 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: 51                 
Correct output: -65                 | Program output: 48                 
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: 18                 
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 13                  | Program output: 26                 
Correct output: 17                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 35                  | Program output: 42                 
Correct output: 16                  | Program output: 19                 
Correct output: 4                   | Program output: 26                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 6                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 46                 
Correct output: 40                  | Program output: 69                 
Correct output: 41                  | Program output: 87                 
Correct output: 46                  | Program output: 47                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 19                 
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 29                 
Correct output: -54                 | Program output: -37                
Correct output: -79                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 65                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 30                 
Correct output: -75                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -35                
Correct output: -46                 | Program output: 40                 
Correct output: -60                 | Program output: -5                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -32                
Correct output: -69                 | Program output: -66                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 11                 
Correct output: -29                 | Program output: -3                 
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: 41                  | Program output: 41                 
Correct output: -74                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: -63                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -97                 | Program output: 2                  
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -25                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_rot integer_shove exec_when (integer_dup_items exec_pop () integer_fromboolean exec_dup_times (in2 exec_empty integer_flush boolean_xor boolean_shove) exec_dup_times (boolean_rot boolean_dup_times exec_dup (exec_yank exec_do*while () boolean_dup_items in4 exec_swap () (integer_mult) exec_empty in2) exec_if (exec_do*times (boolean_or) in2) ()) integer_min print_integer boolean_or exec_eq boolean_flush integer_dup_times) integer_fromboolean boolean_swap integer_add boolean_and integer_eq boolean_dup integer_mult exec_do*times (exec_do*while (exec_k (exec_do*range ()) ())))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_rot integer_shove exec_when (integer_dup_items exec_pop () integer_fromboolean exec_dup_times (in2 exec_empty integer_flush boolean_xor boolean_shove) exec_dup_times (boolean_rot boolean_dup_times exec_dup (exec_yank exec_do*while () boolean_dup_items in4 exec_swap () (integer_mult) exec_empty in2) exec_if (exec_do*times (boolean_or) in2) ()) integer_min print_integer boolean_or exec_eq boolean_flush integer_dup_times) integer_fromboolean boolean_swap integer_add boolean_and integer_eq boolean_dup integer_mult exec_do*times (exec_do*while (exec_k (exec_do*range ()) ())))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (52 209 317 146 146 31 26 477 126 322)
Population mean number of elite cases: 1.85
Count of perfect (error zero) individuals by case: (52 209 317 146 146 31 26 477 126 322)
Population mean number of perfect (error zero) cases: 1.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (exec_yankdup boolean_rot integer_shove integer_eq in4 integer_add integer_dup_items exec_pop () integer_fromboolean exec_do*count (exec_dup_times (in2 exec_yank integer_div exec_empty boolean_swap integer_div integer_flush boolean_xor boolean_shove) integer_gte exec_dup_times (boolean_dup_times exec_dup (exec_yank in4 exec_pop (integer_mult) exec_empty in2) exec_if (exec_do*times (exec_empty boolean_dup_times integer_flush print_exec () boolean_or) in2) ()) boolean_not) integer_min print_integer boolean_or exec_stackdepth exec_s_when_autoconstructing (exec_eq boolean_flush integer_fromboolean boolean_and exec_do*while (integer_dup_items exec_k_when_autoconstructing () (boolean_and integer_eq exec_shove (integer_mult exec_do*times (exec_do*while (exec_do*range (integer_gt))))))) () ())
Errors: [0 1 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 59
Size: 80
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 8.148
Median total errors in population: 10
Error averages by case: (0.948 0.791 0.683 0.854 0.854 0.969 0.974 0.523 0.874 0.678)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.23
Average program size in population (points): 68.91
Average percent parens in population: 0.242
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.605
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4292894
--- Timings ---
Current time: 1559593897962 milliseconds
Total Time:          16.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.6 seconds, 47.2%
Fitness Testing:      5.6 seconds, 35.1%
Report:               2.7 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output:                    
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 13                  | Program output: 26                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 19                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 53                 
Correct output: 4                   | Program output: 33                 
Correct output: 32                  | Program output: 38                 
Correct output: 3                   | Program output: 35                 
Correct output: 17                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 40                  | Program output: 40                 
Correct output: 41                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 19                 
Correct output: -98                 | Program output: -48                
Correct output: -82                 | Program output: 17                 
Correct output: -66                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -35                
Correct output: -64                 | Program output: 29                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 65                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 30                 
Correct output: -75                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: 76                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: 62                 
Correct output: -28                 | Program output: 63                 
Correct output: -73                 | Program output: -73                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 37                 
Correct output: -60                 | Program output:                    
Correct output: -29                 | Program output: 27                 
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -32                
Correct output: 41                  | Program output: 72                 
Correct output: -74                 | Program output: -20                
Correct output: -22                 | Program output: -9                 
Correct output: -63                 | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -10                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_rot integer_shove in4 exec_when (integer_shove integer_dup_items exec_pop () integer_fromboolean boolean_xor) exec_dup_times (in2 exec_empty integer_flush boolean_xor boolean_shove) integer_add boolean_rot boolean_dup_times exec_dup (exec_yank exec_do*while () boolean_dup_items in4 integer_mult) exec_empty in2 in3 exec_if (integer_max exec_do*times (boolean_or) in2) () integer_min print_integer boolean_or boolean_stackdepth exec_eq boolean_flush integer_dup_times exec_do*times (boolean_swap integer_dup_times boolean_dup) boolean_and boolean_not exec_shove (integer_mult exec_do*times (exec_do*while (exec_k (exec_do*range ()) ()))))
Lexicase best errors: [0 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_rot integer_shove in4 exec_when (integer_shove integer_dup_items exec_pop () integer_fromboolean boolean_xor) exec_dup_times (in2 exec_empty integer_flush boolean_xor boolean_shove) integer_add boolean_rot boolean_dup_times exec_dup (exec_yank exec_do*while () boolean_dup_items in4 integer_mult) exec_empty in2 in3 exec_if (integer_max exec_do*times (boolean_or) in2) () integer_min print_integer boolean_or boolean_stackdepth exec_eq boolean_flush integer_dup_times exec_do*times (boolean_swap integer_dup_times boolean_dup) boolean_and boolean_not exec_shove (integer_mult exec_do*times (exec_do*while (exec_k (exec_do*range ()) ()))))
Zero cases best errors: [0 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (118 91 146 117 134 276 276 112 290 98)
Population mean number of elite cases: 1.66
Count of perfect (error zero) individuals by case: (118 91 146 117 134 276 276 112 290 98)
Population mean number of perfect (error zero) cases: 1.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 3, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (exec_yankdup boolean_rot integer_shove integer_eq in4 integer_add integer_dup_items exec_pop () exec_do*count (integer_rot) boolean_shove exec_dup_times (in2 exec_yank integer_div exec_empty boolean_swap integer_min integer_flush boolean_xor boolean_shove) exec_dup_times (boolean_dup_times exec_dup (exec_yank in4 exec_pop (integer_mult) exec_empty in2) in3 exec_if (exec_do*times (exec_empty integer_stackdepth integer_flush boolean_or) in2) ()) integer_min integer_dup print_integer boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean exec_y_when_autoconstructing ()) boolean_and integer_dup_items boolean_and integer_fromboolean exec_shove (integer_mult exec_do*times (exec_do*range (integer_gt))))
Errors: [0 0 1 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 56
Size: 71
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 8.342
Median total errors in population: 10
Error averages by case: (0.882 0.909 0.854 0.883 0.866 0.724 0.724 0.888 0.71 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.101
Average program size in population (points): 68.804
Average percent parens in population: 0.242
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.576
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5017052
--- Timings ---
Current time: 1559593900248 milliseconds
Total Time:          18.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.7 seconds, 47.6%
Fitness Testing:      6.3 seconds, 34.5%
Report:               3.2 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 13                  | Program output: 26                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 19                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 53                 
Correct output: 4                   | Program output: 33                 
Correct output: 32                  | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 40                  | Program output: 40                 
Correct output: 41                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output:                    
Correct output: 33                  | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 19                 
Correct output: -98                 | Program output: -48                
Correct output: -82                 | Program output: 17                 
Correct output: -66                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -35                
Correct output: -64                 | Program output: 29                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 65                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 30                 
Correct output: -75                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: 76                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: 62                 
Correct output: -28                 | Program output: 63                 
Correct output: -73                 | Program output: -73                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -68                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 37                 
Correct output: -60                 | Program output: 11                 
Correct output: -29                 | Program output: 27                 
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -32                
Correct output: 41                  | Program output: 72                 
Correct output: -74                 | Program output: -20                
Correct output: -22                 | Program output: -9                 
Correct output: -63                 | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -10                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 3, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_yankdup boolean_eq boolean_rot integer_shove in4 integer_add integer_dup_items exec_pop () exec_do*count (integer_rot) boolean_shove exec_dup_times (in2 exec_yank integer_div exec_empty integer_min boolean_shove) exec_do*while (exec_dup_times (boolean_dup_times exec_dup (exec_yank in4 exec_pop (integer_mult) exec_empty in2) in3 exec_if (exec_do*times (exec_empty integer_stackdepth integer_flush boolean_or) in2) ()) integer_min integer_dup print_integer boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean exec_stackdepth exec_y_when_autoconstructing ())) boolean_and integer_dup_items integer_fromboolean exec_shove (integer_mult exec_do*range (integer_gt)))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 3, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_yankdup boolean_eq boolean_rot integer_shove in4 integer_add integer_dup_items exec_pop () exec_do*count (integer_rot) boolean_shove exec_dup_times (in2 exec_yank integer_div exec_empty integer_min boolean_shove) exec_do*while (exec_dup_times (boolean_dup_times exec_dup (exec_yank in4 exec_pop (integer_mult) exec_empty in2) in3 exec_if (exec_do*times (exec_empty integer_stackdepth integer_flush boolean_or) in2) ()) integer_min integer_dup print_integer boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean exec_stackdepth exec_y_when_autoconstructing ())) boolean_and integer_dup_items integer_fromboolean exec_shove (integer_mult exec_do*range (integer_gt)))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 248 158 125 244 87 280 205 216 359)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (330 248 158 125 244 87 280 205 216 359)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 3, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (integer_shove integer_eq integer_gte in4 integer_add integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 exec_yank integer_pop) exec_empty boolean_swap integer_yankdup integer_flush boolean_xor exec_dup_times (boolean_dup_times exec_dup (exec_yank in4 exec_pop (integer_mult) exec_empty in2) in3 exec_while (exec_noop exec_if (exec_do*times (integer_dup_times exec_empty integer_stackdepth integer_mod boolean_shove) integer_flush boolean_or) (in2))) integer_min integer_dup print_integer boolean_or exec_eq boolean_flush integer_fromboolean exec_s_when_autoconstructing (exec_y_when_autoconstructing ()) () (boolean_and integer_add) boolean_dup_items boolean_and integer_fromboolean exec_shove (integer_mult exec_do*times (exec_do*while (exec_do*range (integer_gt)))))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 60
Size: 79
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.748
Median total errors in population: 10
Error averages by case: (0.67 0.752 0.842 0.875 0.756 0.913 0.72 0.795 0.784 0.641)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.058
Average program size in population (points): 69.254
Average percent parens in population: 0.233
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.522
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5774150
--- Timings ---
Current time: 1559593902501 milliseconds
Total Time:          20.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.9 seconds, 47.8%
Fitness Testing:      7.0 seconds, 33.9%
Report:               3.7 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 317
Test mean error for best: 0.31700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 4(exec_do*times (integer_stackdepth integer_mult) integer_add integer_flush integer_min boolean_or)4(exec_do*times (integer_stackdepth integer_mult) integer_add integer_flush integer_min boolean_or)4(exec_do*times (integer_stackdepth integer_mult) integer_add integer_flush integer_min boolean_or)4
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 69                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 40                  | Program output: 40                 
Correct output: 41                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 15                 
Correct output: 33                  | Program output: 38                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -85                
Correct output: -82                 | Program output: -63                
Correct output: -66                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -34                
Correct output: -71                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -51                
Correct output: -79                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: -2                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: 32                 
Correct output: -95                 | Program output: -33                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -28                 | Program output: 15                 
Correct output: -73                 | Program output: -41                
Correct output: 7                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: (exec_do*times (integer_stackdepth integer_mult) integer_add integer_flush integer_min boolean_or)-70
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -72                
Correct output: 41                  | Program output: 72                 
Correct output: -74                 | Program output: -74                
Correct output: -22                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_993} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_dup_times () integer_gte in2 integer_shove integer_min in2 tag_boolean_993 exec_empty boolean_and integer_flush boolean_empty exec_rot (integer_shove) (boolean_dup_times integer_fromboolean exec_dup (exec_yank exec_do*while () boolean_flush exec_empty in2) exec_do*times (in3 integer_yankdup exec_if (exec_noop print_exec (exec_yank boolean_or exec_do*times (boolean_eq integer_flush boolean_or) integer_sub in2)) () in1 integer_min print_integer boolean_or exec_eq integer_yank) integer_add integer_dup_times) (boolean_and exec_do*while (boolean_and integer_eq integer_mult exec_do*times (integer_div integer_gt))))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 65
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction tag_boolean_993} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_dup_times () integer_gte in2 integer_shove integer_min in2 tag_boolean_993 exec_empty boolean_and integer_flush boolean_empty exec_rot (integer_shove) (boolean_dup_times integer_fromboolean exec_dup (exec_yank exec_do*while () boolean_flush exec_empty in2) exec_do*times (in3 integer_yankdup exec_if (exec_noop print_exec (exec_yank boolean_or exec_do*times (boolean_eq integer_flush boolean_or) integer_sub in2)) () in1 integer_min print_integer boolean_or exec_eq integer_yank) integer_add integer_dup_times) (boolean_and exec_do*while (boolean_and integer_eq integer_mult exec_do*times (integer_div integer_gt))))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 65
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (144 392 312 192 325 454 301 177 156 358)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (144 392 312 192 325 454 301 177 156 358)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction tagged_518} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction -9} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (exec_yank integer_mod in2 tagged_518 integer_shove exec_k_when_autoconstructing (boolean_swap exec_shove (in4 integer_yank) exec_when (integer_fromboolean integer_gt) -9 integer_stackdepth in2 exec_empty integer_pop integer_flush boolean_shove) (integer_shove) boolean_dup_times in4 exec_yank boolean_shove integer_mult in2 integer_min exec_do*times (in3 integer_stackdepth integer_yankdup exec_if (exec_swap (print_exec (exec_do*times (integer_stackdepth integer_mult) integer_add integer_flush integer_min boolean_or) in2) ()) (in1 integer_min print_integer exec_yank exec_pop ()) exec_eq integer_dup_times) integer_swap boolean_and exec_do*while (exec_s () (boolean_yankdup boolean_and integer_gt integer_eq integer_mult exec_do*times (exec_do*while (exec_eq integer_div exec_do*range (integer_gt)))) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 85
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.189
Median total errors in population: 9
Error averages by case: (0.856 0.608 0.688 0.808 0.675 0.546 0.699 0.823 0.844 0.642)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.114
Average program size in population (points): 70.654
Average percent parens in population: 0.234
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.488
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6468190
--- Timings ---
Current time: 1559593904667 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.0 seconds, 48.3%
Fitness Testing:      7.6 seconds, 33.3%
Report:               4.1 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 302
Test mean error for best: 0.30200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 69                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 40                  | Program output: 40                 
Correct output: 41                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 15                 
Correct output: 33                  | Program output: 38                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -85                
Correct output: -82                 | Program output: -63                
Correct output: -66                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -34                
Correct output: -71                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -51                
Correct output: -79                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: -2                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: 32                 
Correct output: -95                 | Program output: -33                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -28                 | Program output: 15                 
Correct output: -73                 | Program output: -41                
Correct output: 7                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -72                
Correct output: 41                  | Program output: 72                 
Correct output: -74                 | Program output: -74                
Correct output: -22                 | Program output: -16                
Correct output: -63                 | Program output: -63                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_yankdup boolean_rot integer_shove integer_pop exec_do*count (boolean_yankdup in4 boolean_dup boolean_yank integer_dup_times) integer_add integer_dup_items integer_fromboolean exec_do*count (exec_dup_times (in2 exec_yank integer_div integer_flush boolean_xor boolean_shove) boolean_empty exec_dup_times (boolean_dup_times exec_dup (in4 exec_pop (integer_mult) exec_empty in2) exec_if (integer_mult exec_k_when_autoconstructing () (boolean_yankdup exec_k (boolean_or) (integer_swap in2))) (integer_min print_integer exec_stackdepth exec_eq exec_rot (integer_fromboolean boolean_and exec_do*while (integer_gte integer_dup_items boolean_pop integer_dec) integer_eq boolean_swap exec_do*while ()) () ()))))
Lexicase best errors: [1 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 3, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_yankdup boolean_rot integer_shove integer_pop exec_do*count (boolean_yankdup in4 boolean_dup boolean_yank integer_dup_times) integer_add integer_dup_items integer_fromboolean exec_do*count (exec_dup_times (in2 exec_yank integer_div integer_flush boolean_xor boolean_shove) boolean_empty exec_dup_times (boolean_dup_times exec_dup (in4 exec_pop (integer_mult) exec_empty in2) exec_if (integer_mult exec_k_when_autoconstructing () (boolean_yankdup exec_k (boolean_or) (integer_swap in2))) (integer_min print_integer exec_stackdepth exec_eq exec_rot (integer_fromboolean boolean_and exec_do*while (integer_gte integer_dup_items boolean_pop integer_dec) integer_eq boolean_swap exec_do*while ()) () ()))))
Zero cases best errors: [1 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 59 60 207 59 155 290 156 282 277)
Population mean number of elite cases: 1.75
Count of perfect (error zero) individuals by case: (210 59 60 207 59 155 290 156 282 277)
Population mean number of perfect (error zero) cases: 1.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_40} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (exec_yank in2 integer_shove in4 in4 integer_rot exec_pop () integer_gt exec_noop tagged_40 in2 exec_empty exec_do*while (integer_mod integer_flush boolean_shove) exec_dup_times (boolean_dup_times exec_dup (integer_mult) exec_empty boolean_rot) in2 exec_do*times (in3 integer_yankdup exec_if (print_exec (boolean_or exec_do*times (integer_stackdepth integer_flush boolean_xor boolean_or) in2)) () in1 integer_min print_integer exec_eq integer_yank) integer_dup_times integer_fromboolean exec_do*while (integer_dup_items boolean_and integer_min integer_gt integer_eq integer_dec exec_do*times (exec_while (exec_do*while (boolean_dup_items) integer_div exec_do*range (integer_gt)))))
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 56
Size: 71
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 8.245
Median total errors in population: 10
Error averages by case: (0.79 0.941 0.94 0.793 0.941 0.845 0.71 0.844 0.718 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.119
Average program size in population (points): 70.397
Average percent parens in population: 0.230
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.547
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7112731
--- Timings ---
Current time: 1559593906757 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.2 seconds, 48.8%
Fitness Testing:      8.2 seconds, 32.8%
Report:               4.5 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 177
Test mean error for best: 0.17700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: -82                
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 61                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 69                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 38                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: 40                  | Program output: 40                 
Correct output: 41                  | Program output: 41                 
Correct output: 46                  | Program output: 46                 
Correct output: 7                   | Program output: 15                 
Correct output: 33                  | Program output: 38                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -34                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -51                
Correct output: -79                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: -2                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -35                
Correct output: -46                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -41                
Correct output: 7                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -66                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 45                 
Correct output: -60                 | Program output: -60                
Correct output: -29                 | Program output: -29                
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: 41                  | Program output: 72                 
Correct output: -74                 | Program output: -74                
Correct output: -22                 | Program output: -22                
Correct output: -63                 | Program output: -63                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -97                 | Program output: -97                
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -33                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -9} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_flush} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_yank integer_gte integer_mod in2 integer_shove exec_k_when_autoconstructing (exec_shove (integer_yank) exec_when (integer_fromboolean -9 integer_stackdepth exec_if (exec_dup_items in2 exec_empty boolean_shove) (integer_shove) boolean_dup_times in4 integer_mult) exec_empty in2) (integer_min exec_do*times (in3 integer_yankdup exec_if (exec_swap (print_exec (boolean_or integer_mult) integer_flush integer_min boolean_or) (in2)) () in1 integer_min print_integer exec_flush)) exec_pop () exec_eq integer_dup_times exec_yankdup exec_do*while (integer_shove integer_gt integer_mult exec_pop (exec_do*times (integer_div exec_do*range (integer_gt)))))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -9} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_flush} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_yank integer_gte integer_mod in2 integer_shove exec_k_when_autoconstructing (exec_shove (integer_yank) exec_when (integer_fromboolean -9 integer_stackdepth exec_if (exec_dup_items in2 exec_empty boolean_shove) (integer_shove) boolean_dup_times in4 integer_mult) exec_empty in2) (integer_min exec_do*times (in3 integer_yankdup exec_if (exec_swap (print_exec (boolean_or integer_mult) integer_flush integer_min boolean_or) (in2)) () in1 integer_min print_integer exec_flush)) exec_pop () exec_eq integer_dup_times exec_yankdup exec_do*while (integer_shove integer_gt integer_mult exec_pop (exec_do*times (integer_div exec_do*range (integer_gt)))))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 183 200 357 365 101 121 177 198 109)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (252 183 200 357 365 101 121 177 198 109)
Population mean number of perfect (error zero) cases: 2.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -9} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_flush} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Best program: (exec_yank integer_gte integer_mod in2 integer_shove exec_k_when_autoconstructing (exec_shove (integer_yank) exec_when (integer_fromboolean -9 integer_stackdepth exec_if (exec_dup_items in2 exec_empty boolean_shove) (integer_shove) boolean_dup_times in4 integer_mult) exec_empty in2) (integer_min exec_do*times (in3 integer_yankdup exec_if (exec_swap (print_exec (boolean_or integer_mult) integer_flush integer_min boolean_or) (in2)) () in1 integer_min print_integer exec_flush)) exec_pop () exec_eq integer_dup_times exec_yankdup exec_do*while (integer_shove integer_gt integer_mult exec_pop (exec_do*times (integer_div exec_do*range (integer_gt)))))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 53
Size: 71
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.937
Median total errors in population: 10
Error averages by case: (0.748 0.817 0.8 0.643 0.635 0.899 0.879 0.823 0.802 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.791
Average program size in population (points): 68.934
Average percent parens in population: 0.234
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.457
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7835171
--- Timings ---
Current time: 1559593908853 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 49.2%
Fitness Testing:      8.8 seconds, 32.6%
Report:               4.8 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 444
Test mean error for best: 0.44400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: 51                 
Correct output: -65                 | Program output: 48                 
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: 18                 
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 13                  | Program output: 26                 
Correct output: 17                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 35                  | Program output: 42                 
Correct output: 16                  | Program output: 19                 
Correct output: 4                   | Program output: 26                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 6                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 46                 
Correct output: 40                  | Program output: 69                 
Correct output: 41                  | Program output: 87                 
Correct output: 46                  | Program output: 47                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 19                 
Correct output: -98                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -35                
Correct output: -64                 | Program output: 29                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 65                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 30                 
Correct output: -75                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 40                 
Correct output: -60                 | Program output: -5                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -68                
Correct output: -69                 | Program output: -66                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 2                  
Correct output: -29                 | Program output: -3                 
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -32                
Correct output: 41                  | Program output: 41                 
Correct output: -74                 | Program output: -20                
Correct output: -22                 | Program output: -9                 
Correct output: -63                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -97                 | Program output: 2                  
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -10                
Correct output: -43                 | Program output: -43                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_794} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_yankdup boolean_rot integer_inc exec_dup_items integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 integer_lte integer_div boolean_swap integer_flush boolean_shove) exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (exec_eq exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) integer_flush boolean_eq boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_or exec_eq exec_do*count (exec_flush boolean_flush integer_fromboolean boolean_and tagged_794 integer_gt boolean_and integer_fromboolean) exec_do*range (integer_gt))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 69
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_794} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_yankdup boolean_rot integer_inc exec_dup_items integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 integer_lte integer_div boolean_swap integer_flush boolean_shove) exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (exec_eq exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) integer_flush boolean_eq boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_or exec_eq exec_do*count (exec_flush boolean_flush integer_fromboolean boolean_and tagged_794 integer_gt boolean_and integer_fromboolean) exec_do*range (integer_gt))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 69
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 159 172 352 234 77 216 243 271 233)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (216 159 172 352 234 77 216 243 271 233)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_or} {:close 3, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_794} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt})
Best program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 56
Size: 68
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 7.827
Median total errors in population: 9
Error averages by case: (0.784 0.841 0.828 0.648 0.766 0.923 0.784 0.757 0.729 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.4
Average program size in population (points): 69.812
Average percent parens in population: 0.248
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.44
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8328922
--- Timings ---
Current time: 1559593910915 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.5 seconds, 49.9%
Fitness Testing:      9.3 seconds, 32.0%
Report:               5.1 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 12
Successful program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 68


Auto-simplifying with starting size: 68
step: 0
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 500
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 1000
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 1500
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 2000
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 2500
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 3000
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 3500
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 4000
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 4500
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

step: 5000
program: (exec_yankdup boolean_rot boolean_dup_items integer_eq exec_dup_items integer_add integer_min integer_dup_items integer_dup_items exec_pop () exec_do*count (integer_rot) exec_dup_times (in2 boolean_swap integer_flush boolean_shove) integer_lt exec_dup_times (boolean_dup_times integer_dup) exec_yank in4 integer_mult exec_pop (integer_mult) exec_empty in2 in3 boolean_and exec_if (integer_add exec_do*times (exec_empty integer_stackdepth boolean_invert_first_then_and) boolean_or) (in2) integer_shove integer_min integer_dup exec_do*while () print_integer boolean_invert_second_then_and boolean_or exec_eq exec_do*count (boolean_flush integer_fromboolean boolean_and tagged_794 boolean_and integer_fromboolean) exec_do*times (integer_dec integer_gt))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 68

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 444
Test mean error for best: 0.44400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: -34                 | Program output: 51                 
Correct output: -65                 | Program output: 48                 
Correct output: -12                 | Program output: -12                
Correct output: -82                 | Program output: 18                 
Correct output: -85                 | Program output: -85                
Correct output: -75                 | Program output: -75                
Correct output: 40                  | Program output: 40                 
Correct output: -19                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: 16                  | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -17                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: 28                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 13                  | Program output: 26                 
Correct output: 17                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 5                   | Program output: 75                 
Correct output: 5                   | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 35                  | Program output: 42                 
Correct output: 16                  | Program output: 19                 
Correct output: 4                   | Program output: 26                 
Correct output: 32                  | Program output: 32                 
Correct output: 3                   | Program output: 6                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 46                 
Correct output: 40                  | Program output: 69                 
Correct output: 41                  | Program output: 87                 
Correct output: 46                  | Program output: 47                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 19                 
Correct output: -98                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -35                
Correct output: -64                 | Program output: 29                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 65                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 30                 
Correct output: -75                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: -74                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -81                 | Program output: -81                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 40                 
Correct output: -60                 | Program output: -5                 
Correct output: -71                 | Program output: -71                
Correct output: -50                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: -73                 | Program output: -73                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -68                
Correct output: -69                 | Program output: -66                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 25                  | Program output: 25                 
Correct output: -60                 | Program output: 2                  
Correct output: -29                 | Program output: -3                 
Correct output: -25                 | Program output: -25                
Correct output: -46                 | Program output: -46                
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -32                
Correct output: 41                  | Program output: 41                 
Correct output: -74                 | Program output: -20                
Correct output: -22                 | Program output: -9                 
Correct output: -63                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -97                 | Program output: 2                  
Correct output: -51                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -33                 | Program output: -10                
Correct output: -43                 | Program output: -43                
;;******************************
