Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[37 -67 37 37] -67] [[-50 -50 -50 95] -50] [[88 -85 -85 -85] -85] [[-13 -13 -9 -13] -13] [[61 61 -79 61] -79] [[-9 39 -9 -9] -9] [[-66 -66 -49 -66] -66] [[-85 -85 -61 -85] -85] [[28 -38 28 28] -38] [[67 40 40 40] 40] [(-25 -25 -25 -25) -25] [(-55 -55 -55 -55) -55] [(-78 -78 -78 -78) -78] [(82 82 82 82) 82] [(-75 -75 -75 -75) -75] [(53 52 84 17) 17] [(15 20 21 79) 15] [(30 64 55 14) 14] [(90 44 6 88) 6] [(73 57 38 64) 38] [(57 21 84 27) 21] [(22 97 63 38) 22] [(9 35 56 84) 9] [(3 2 65 57) 2] [(50 50 78 86) 50] [(62 100 16 29) 16] [(91 49 16 75) 16] [(14 74 78 86) 14] [(90 97 35 90) 35] [(61 33 17 49) 17] [(76 72 63 18) 18] [(55 63 78 95) 55] [(91 22 92 25) 22] [(10 99 85 63) 10] [(55 40 25 34) 25] [(58 -68 -7 -91) -91] [(-11 93 30 43) -11] [(7 34 -92 -45) -92] [(58 -11 -27 94) -27] [(-80 -63 96 1) -80] [(-99 -36 -2 -47) -99] [(75 29 -4 -44) -44] [(76 93 -45 -95) -95] [(-30 -7 -20 93) -30] [(-61 -91 -53 -61) -91] [(61 -19 30 -89) -89] [(94 92 3 85) 3] [(64 83 3 79) 3] [(-98 77 -100 -82) -100] [(-3 64 -63 -75) -75] [(66 31 -20 68) -20] [(47 -56 69 53) -56] [(53 -91 -5 17) -91] [(86 19 21 -32) -32] [(61 68 77 1) 1] [(40 77 -91 -86) -91] [(-64 52 -45 -92) -92] [(-64 62 46 67) -64] [(-66 -20 -71 -80) -80] [(-33 -55 25 19) -55] [(-77 -90 2 -30) -90] [(-81 -63 -56 37) -81] [(41 35 71 -75) -75] [(85 -2 32 -61) -61] [(-76 -22 -3 -66) -76] [(-33 -77 98 -81) -81] [(89 -8 33 49) -8] [(86 42 61 -79) -79] [(91 -65 40 -34) -65] [(97 52 -15 -10) -15] [(69 63 67 -99) -99] [(9 -64 -76 -68) -76] [(-26 -86 -18 -72) -86] [(-57 -16 95 -92) -92] [(28 -83 -39 -89) -89] [(14 8 -32 -81) -81] [(48 -80 -75 97) -80] [(-90 -49 83 -84) -90] [(83 -64 -83 14) -83] [(65 -26 6 42) -26] [(18 15 79 -54) -54] [(-41 42 -18 -71) -71] [(95 61 78 -3) -3] [(-91 -83 72 -74) -91] [(-44 -71 -46 50) -71] [(2 34 8 86) 2] [(49 92 79 -78) -78] [(30 3 18 -73) -73] [(21 89 -26 -49) -49] [(-93 46 26 4) -93] [(-44 96 77 5) -44] [(30 -29 70 25) -29] [(-37 -3 -63 -94) -94] [(-88 46 76 -94) -94] [(-68 -65 -29 99) -68])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[37 -67 37 37] -67]
Train Case:   6 | Input/Output: [[-50 -50 -50 95] -50]
Train Case:   7 | Input/Output: [[88 -85 -85 -85] -85]
Train Case:   8 | Input/Output: [[-13 -13 -9 -13] -13]
Train Case:   9 | Input/Output: [[61 61 -79 61] -79]
Train Case:  10 | Input/Output: [[-9 39 -9 -9] -9]
Train Case:  11 | Input/Output: [[-66 -66 -49 -66] -66]
Train Case:  12 | Input/Output: [[-85 -85 -61 -85] -85]
Train Case:  13 | Input/Output: [[28 -38 28 28] -38]
Train Case:  14 | Input/Output: [[67 40 40 40] 40]
Train Case:  15 | Input/Output: [(-25 -25 -25 -25) -25]
Train Case:  16 | Input/Output: [(-55 -55 -55 -55) -55]
Train Case:  17 | Input/Output: [(-78 -78 -78 -78) -78]
Train Case:  18 | Input/Output: [(82 82 82 82) 82]
Train Case:  19 | Input/Output: [(-75 -75 -75 -75) -75]
Train Case:  20 | Input/Output: [(53 52 84 17) 17]
Train Case:  21 | Input/Output: [(15 20 21 79) 15]
Train Case:  22 | Input/Output: [(30 64 55 14) 14]
Train Case:  23 | Input/Output: [(90 44 6 88) 6]
Train Case:  24 | Input/Output: [(73 57 38 64) 38]
Train Case:  25 | Input/Output: [(57 21 84 27) 21]
Train Case:  26 | Input/Output: [(22 97 63 38) 22]
Train Case:  27 | Input/Output: [(9 35 56 84) 9]
Train Case:  28 | Input/Output: [(3 2 65 57) 2]
Train Case:  29 | Input/Output: [(50 50 78 86) 50]
Train Case:  30 | Input/Output: [(62 100 16 29) 16]
Train Case:  31 | Input/Output: [(91 49 16 75) 16]
Train Case:  32 | Input/Output: [(14 74 78 86) 14]
Train Case:  33 | Input/Output: [(90 97 35 90) 35]
Train Case:  34 | Input/Output: [(61 33 17 49) 17]
Train Case:  35 | Input/Output: [(76 72 63 18) 18]
Train Case:  36 | Input/Output: [(55 63 78 95) 55]
Train Case:  37 | Input/Output: [(91 22 92 25) 22]
Train Case:  38 | Input/Output: [(10 99 85 63) 10]
Train Case:  39 | Input/Output: [(55 40 25 34) 25]
Train Case:  40 | Input/Output: [(58 -68 -7 -91) -91]
Train Case:  41 | Input/Output: [(-11 93 30 43) -11]
Train Case:  42 | Input/Output: [(7 34 -92 -45) -92]
Train Case:  43 | Input/Output: [(58 -11 -27 94) -27]
Train Case:  44 | Input/Output: [(-80 -63 96 1) -80]
Train Case:  45 | Input/Output: [(-99 -36 -2 -47) -99]
Train Case:  46 | Input/Output: [(75 29 -4 -44) -44]
Train Case:  47 | Input/Output: [(76 93 -45 -95) -95]
Train Case:  48 | Input/Output: [(-30 -7 -20 93) -30]
Train Case:  49 | Input/Output: [(-61 -91 -53 -61) -91]
Train Case:  50 | Input/Output: [(61 -19 30 -89) -89]
Train Case:  51 | Input/Output: [(94 92 3 85) 3]
Train Case:  52 | Input/Output: [(64 83 3 79) 3]
Train Case:  53 | Input/Output: [(-98 77 -100 -82) -100]
Train Case:  54 | Input/Output: [(-3 64 -63 -75) -75]
Train Case:  55 | Input/Output: [(66 31 -20 68) -20]
Train Case:  56 | Input/Output: [(47 -56 69 53) -56]
Train Case:  57 | Input/Output: [(53 -91 -5 17) -91]
Train Case:  58 | Input/Output: [(86 19 21 -32) -32]
Train Case:  59 | Input/Output: [(61 68 77 1) 1]
Train Case:  60 | Input/Output: [(40 77 -91 -86) -91]
Train Case:  61 | Input/Output: [(-64 52 -45 -92) -92]
Train Case:  62 | Input/Output: [(-64 62 46 67) -64]
Train Case:  63 | Input/Output: [(-66 -20 -71 -80) -80]
Train Case:  64 | Input/Output: [(-33 -55 25 19) -55]
Train Case:  65 | Input/Output: [(-77 -90 2 -30) -90]
Train Case:  66 | Input/Output: [(-81 -63 -56 37) -81]
Train Case:  67 | Input/Output: [(41 35 71 -75) -75]
Train Case:  68 | Input/Output: [(85 -2 32 -61) -61]
Train Case:  69 | Input/Output: [(-76 -22 -3 -66) -76]
Train Case:  70 | Input/Output: [(-33 -77 98 -81) -81]
Train Case:  71 | Input/Output: [(89 -8 33 49) -8]
Train Case:  72 | Input/Output: [(86 42 61 -79) -79]
Train Case:  73 | Input/Output: [(91 -65 40 -34) -65]
Train Case:  74 | Input/Output: [(97 52 -15 -10) -15]
Train Case:  75 | Input/Output: [(69 63 67 -99) -99]
Train Case:  76 | Input/Output: [(9 -64 -76 -68) -76]
Train Case:  77 | Input/Output: [(-26 -86 -18 -72) -86]
Train Case:  78 | Input/Output: [(-57 -16 95 -92) -92]
Train Case:  79 | Input/Output: [(28 -83 -39 -89) -89]
Train Case:  80 | Input/Output: [(14 8 -32 -81) -81]
Train Case:  81 | Input/Output: [(48 -80 -75 97) -80]
Train Case:  82 | Input/Output: [(-90 -49 83 -84) -90]
Train Case:  83 | Input/Output: [(83 -64 -83 14) -83]
Train Case:  84 | Input/Output: [(65 -26 6 42) -26]
Train Case:  85 | Input/Output: [(18 15 79 -54) -54]
Train Case:  86 | Input/Output: [(-41 42 -18 -71) -71]
Train Case:  87 | Input/Output: [(95 61 78 -3) -3]
Train Case:  88 | Input/Output: [(-91 -83 72 -74) -91]
Train Case:  89 | Input/Output: [(-44 -71 -46 50) -71]
Train Case:  90 | Input/Output: [(2 34 8 86) 2]
Train Case:  91 | Input/Output: [(49 92 79 -78) -78]
Train Case:  92 | Input/Output: [(30 3 18 -73) -73]
Train Case:  93 | Input/Output: [(21 89 -26 -49) -49]
Train Case:  94 | Input/Output: [(-93 46 26 4) -93]
Train Case:  95 | Input/Output: [(-44 96 77 5) -44]
Train Case:  96 | Input/Output: [(30 -29 70 25) -29]
Train Case:  97 | Input/Output: [(-37 -3 -63 -94) -94]
Train Case:  98 | Input/Output: [(-88 46 76 -94) -94]
Train Case:  99 | Input/Output: [(-68 -65 -29 99) -68]
Test Case:   0 | Input/Output: [[98 32 32 32] 32]
Test Case:   1 | Input/Output: [[16 16 81 16] 16]
Test Case:   2 | Input/Output: [[-7 -7 -7 -70] -70]
Test Case:   3 | Input/Output: [[-81 -81 38 -81] -81]
Test Case:   4 | Input/Output: [[7 7 7 16] 7]
Test Case:   5 | Input/Output: [[9 9 9 83] 9]
Test Case:   6 | Input/Output: [[-11 -47 -11 -11] -47]
Test Case:   7 | Input/Output: [[94 88 94 94] 88]
Test Case:   8 | Input/Output: [[-86 -86 -86 4] -86]
Test Case:   9 | Input/Output: [[-35 -35 -35 -53] -53]
Test Case:  10 | Input/Output: [[-46 80 -46 -46] -46]
Test Case:  11 | Input/Output: [[66 66 -48 66] -48]
Test Case:  12 | Input/Output: [[72 72 72 67] 67]
Test Case:  13 | Input/Output: [[91 91 33 91] 33]
Test Case:  14 | Input/Output: [[61 67 67 67] 61]
Test Case:  15 | Input/Output: [[-98 -98 -98 -17] -98]
Test Case:  16 | Input/Output: [[31 31 47 31] 31]
Test Case:  17 | Input/Output: [[24 24 -55 24] -55]
Test Case:  18 | Input/Output: [[3 3 6 3] 3]
Test Case:  19 | Input/Output: [[93 93 93 85] 85]
Test Case:  20 | Input/Output: [[-1 -44 -44 -44] -44]
Test Case:  21 | Input/Output: [[-63 -59 -59 -59] -63]
Test Case:  22 | Input/Output: [[72 72 72 38] 38]
Test Case:  23 | Input/Output: [[44 29 44 44] 29]
Test Case:  24 | Input/Output: [[-45 -46 -46 -46] -46]
Test Case:  25 | Input/Output: [[-100 12 12 12] -100]
Test Case:  26 | Input/Output: [[41 41 41 -31] -31]
Test Case:  27 | Input/Output: [[-62 56 56 56] -62]
Test Case:  28 | Input/Output: [[-2 -2 -2 49] -2]
Test Case:  29 | Input/Output: [[45 -91 -91 -91] -91]
Test Case:  30 | Input/Output: [[-12 -30 -30 -30] -30]
Test Case:  31 | Input/Output: [[73 44 44 44] 44]
Test Case:  32 | Input/Output: [[71 -14 -14 -14] -14]
Test Case:  33 | Input/Output: [[-100 -28 -28 -28] -100]
Test Case:  34 | Input/Output: [[64 89 89 89] 64]
Test Case:  35 | Input/Output: [[50 50 -35 50] -35]
Test Case:  36 | Input/Output: [[-5 -5 -5 -33] -33]
Test Case:  37 | Input/Output: [[-40 -40 69 -40] -40]
Test Case:  38 | Input/Output: [[-30 -30 -30 -75] -75]
Test Case:  39 | Input/Output: [[-47 -47 -47 -61] -61]
Test Case:  40 | Input/Output: [[-55 -55 53 -55] -55]
Test Case:  41 | Input/Output: [[-66 -44 -44 -44] -66]
Test Case:  42 | Input/Output: [[65 67 65 65] 65]
Test Case:  43 | Input/Output: [[-88 -88 -88 70] -88]
Test Case:  44 | Input/Output: [[29 -27 29 29] -27]
Test Case:  45 | Input/Output: [[24 79 79 79] 24]
Test Case:  46 | Input/Output: [[-8 -8 -67 -8] -67]
Test Case:  47 | Input/Output: [[-82 -82 -47 -82] -82]
Test Case:  48 | Input/Output: [[-31 92 -31 -31] -31]
Test Case:  49 | Input/Output: [[-7 61 -7 -7] -7]
Test Case:  50 | Input/Output: [[0 99 0 0] 0]
Test Case:  51 | Input/Output: [[-50 -50 15 -50] -50]
Test Case:  52 | Input/Output: [[69 69 69 49] 49]
Test Case:  53 | Input/Output: [[-83 -83 -88 -83] -88]
Test Case:  54 | Input/Output: [[86 43 43 43] 43]
Test Case:  55 | Input/Output: [[83 83 83 -56] -56]
Test Case:  56 | Input/Output: [[-7 -7 -82 -7] -82]
Test Case:  57 | Input/Output: [[-69 -69 13 -69] -69]
Test Case:  58 | Input/Output: [[-14 69 69 69] -14]
Test Case:  59 | Input/Output: [[-30 -30 -71 -30] -71]
Test Case:  60 | Input/Output: [[77 77 54 77] 54]
Test Case:  61 | Input/Output: [[-13 16 -13 -13] -13]
Test Case:  62 | Input/Output: [[-18 -51 -51 -51] -51]
Test Case:  63 | Input/Output: [[28 44 28 28] 28]
Test Case:  64 | Input/Output: [[-3 -3 -3 -14] -14]
Test Case:  65 | Input/Output: [[-72 -72 -72 33] -72]
Test Case:  66 | Input/Output: [[70 70 37 70] 37]
Test Case:  67 | Input/Output: [[-50 -50 19 -50] -50]
Test Case:  68 | Input/Output: [[19 19 19 43] 19]
Test Case:  69 | Input/Output: [[-37 78 -37 -37] -37]
Test Case:  70 | Input/Output: [[31 31 57 31] 31]
Test Case:  71 | Input/Output: [[36 87 87 87] 36]
Test Case:  72 | Input/Output: [[6 -45 -45 -45] -45]
Test Case:  73 | Input/Output: [[-15 -15 26 -15] -15]
Test Case:  74 | Input/Output: [[82 82 -39 82] -39]
Test Case:  75 | Input/Output: [[-86 -86 49 -86] -86]
Test Case:  76 | Input/Output: [[-87 -87 1 -87] -87]
Test Case:  77 | Input/Output: [[-21 -21 -21 93] -21]
Test Case:  78 | Input/Output: [[91 91 91 -80] -80]
Test Case:  79 | Input/Output: [[-44 23 23 23] -44]
Test Case:  80 | Input/Output: [[-85 -85 73 -85] -85]
Test Case:  81 | Input/Output: [[25 25 25 15] 15]
Test Case:  82 | Input/Output: [[-83 -50 -50 -50] -83]
Test Case:  83 | Input/Output: [[46 46 -9 46] -9]
Test Case:  84 | Input/Output: [[62 62 62 -78] -78]
Test Case:  85 | Input/Output: [[94 56 56 56] 56]
Test Case:  86 | Input/Output: [[-45 94 -45 -45] -45]
Test Case:  87 | Input/Output: [[7 7 7 -93] -93]
Test Case:  88 | Input/Output: [[-16 -16 1 -16] -16]
Test Case:  89 | Input/Output: [[79 -43 79 79] -43]
Test Case:  90 | Input/Output: [[20 20 20 61] 20]
Test Case:  91 | Input/Output: [[14 -94 14 14] -94]
Test Case:  92 | Input/Output: [[-48 -48 -48 20] -48]
Test Case:  93 | Input/Output: [[89 89 89 -68] -68]
Test Case:  94 | Input/Output: [[68 68 68 -61] -61]
Test Case:  95 | Input/Output: [[81 82 81 81] 81]
Test Case:  96 | Input/Output: [[31 31 31 -36] -36]
Test Case:  97 | Input/Output: [[52 52 33 52] 33]
Test Case:  98 | Input/Output: [[-19 68 68 68] -19]
Test Case:  99 | Input/Output: [[64 64 64 84] 64]
Test Case: 100 | Input/Output: [(23 23 23 23) 23]
Test Case: 101 | Input/Output: [(76 76 76 76) 76]
Test Case: 102 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 103 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 104 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 105 | Input/Output: [(44 44 44 44) 44]
Test Case: 106 | Input/Output: [(24 24 24 24) 24]
Test Case: 107 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 108 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 109 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 110 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 111 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 112 | Input/Output: [(65 65 65 65) 65]
Test Case: 113 | Input/Output: [(39 39 39 39) 39]
Test Case: 114 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 115 | Input/Output: [(66 66 66 66) 66]
Test Case: 116 | Input/Output: [(59 59 59 59) 59]
Test Case: 117 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 118 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 119 | Input/Output: [(57 57 57 57) 57]
Test Case: 120 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 121 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 122 | Input/Output: [(80 80 80 80) 80]
Test Case: 123 | Input/Output: [(0 0 0 0) 0]
Test Case: 124 | Input/Output: [(20 20 20 20) 20]
Test Case: 125 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 126 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 127 | Input/Output: [(79 79 79 79) 79]
Test Case: 128 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 129 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 130 | Input/Output: [(5 5 5 5) 5]
Test Case: 131 | Input/Output: [(61 61 61 61) 61]
Test Case: 132 | Input/Output: [(8 8 8 8) 8]
Test Case: 133 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 134 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 135 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 136 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 137 | Input/Output: [(31 31 31 31) 31]
Test Case: 138 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 139 | Input/Output: [(69 69 69 69) 69]
Test Case: 140 | Input/Output: [(14 14 14 14) 14]
Test Case: 141 | Input/Output: [(27 27 27 27) 27]
Test Case: 142 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 143 | Input/Output: [(81 81 81 81) 81]
Test Case: 144 | Input/Output: [(72 72 72 72) 72]
Test Case: 145 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 146 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 147 | Input/Output: [(34 34 34 34) 34]
Test Case: 148 | Input/Output: [(75 75 75 75) 75]
Test Case: 149 | Input/Output: [(17 17 17 17) 17]
Test Case: 150 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 151 | Input/Output: [(55 55 55 55) 55]
Test Case: 152 | Input/Output: [(56 56 56 56) 56]
Test Case: 153 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 154 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 155 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 156 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 157 | Input/Output: [(80 80 80 80) 80]
Test Case: 158 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 159 | Input/Output: [(36 36 36 36) 36]
Test Case: 160 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 161 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 162 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 163 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 164 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 165 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 166 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 167 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 168 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 169 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 170 | Input/Output: [(55 55 55 55) 55]
Test Case: 171 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 172 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 173 | Input/Output: [(73 73 73 73) 73]
Test Case: 174 | Input/Output: [(30 30 30 30) 30]
Test Case: 175 | Input/Output: [(64 64 64 64) 64]
Test Case: 176 | Input/Output: [(45 45 45 45) 45]
Test Case: 177 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 178 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 179 | Input/Output: [(100 100 100 100) 100]
Test Case: 180 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 181 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 182 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 183 | Input/Output: [(23 23 23 23) 23]
Test Case: 184 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 185 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 186 | Input/Output: [(16 16 16 16) 16]
Test Case: 187 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 188 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 189 | Input/Output: [(33 33 33 33) 33]
Test Case: 190 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 191 | Input/Output: [(53 53 53 53) 53]
Test Case: 192 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 193 | Input/Output: [(5 5 5 5) 5]
Test Case: 194 | Input/Output: [(34 34 34 34) 34]
Test Case: 195 | Input/Output: [(47 47 47 47) 47]
Test Case: 196 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 197 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 198 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 199 | Input/Output: [(34 34 34 34) 34]
Test Case: 200 | Input/Output: [(9 14 80 91) 9]
Test Case: 201 | Input/Output: [(41 86 26 14) 14]
Test Case: 202 | Input/Output: [(84 13 46 79) 13]
Test Case: 203 | Input/Output: [(27 7 96 47) 7]
Test Case: 204 | Input/Output: [(42 79 40 36) 36]
Test Case: 205 | Input/Output: [(53 68 57 26) 26]
Test Case: 206 | Input/Output: [(7 75 94 91) 7]
Test Case: 207 | Input/Output: [(24 68 100 100) 24]
Test Case: 208 | Input/Output: [(27 34 94 5) 5]
Test Case: 209 | Input/Output: [(64 46 74 81) 46]
Test Case: 210 | Input/Output: [(5 81 3 34) 3]
Test Case: 211 | Input/Output: [(53 48 88 39) 39]
Test Case: 212 | Input/Output: [(3 51 99 91) 3]
Test Case: 213 | Input/Output: [(72 95 45 90) 45]
Test Case: 214 | Input/Output: [(50 96 80 31) 31]
Test Case: 215 | Input/Output: [(81 58 91 98) 58]
Test Case: 216 | Input/Output: [(44 34 92 8) 8]
Test Case: 217 | Input/Output: [(89 86 51 75) 51]
Test Case: 218 | Input/Output: [(30 16 40 33) 16]
Test Case: 219 | Input/Output: [(26 86 0 17) 0]
Test Case: 220 | Input/Output: [(15 87 96 26) 15]
Test Case: 221 | Input/Output: [(61 29 7 49) 7]
Test Case: 222 | Input/Output: [(61 42 90 66) 42]
Test Case: 223 | Input/Output: [(76 97 24 7) 7]
Test Case: 224 | Input/Output: [(31 21 49 83) 21]
Test Case: 225 | Input/Output: [(29 10 54 2) 2]
Test Case: 226 | Input/Output: [(66 79 44 61) 44]
Test Case: 227 | Input/Output: [(8 80 4 80) 4]
Test Case: 228 | Input/Output: [(88 29 30 7) 7]
Test Case: 229 | Input/Output: [(17 2 15 43) 2]
Test Case: 230 | Input/Output: [(71 65 97 96) 65]
Test Case: 231 | Input/Output: [(50 56 92 76) 50]
Test Case: 232 | Input/Output: [(61 42 75 56) 42]
Test Case: 233 | Input/Output: [(95 13 6 31) 6]
Test Case: 234 | Input/Output: [(94 6 76 7) 6]
Test Case: 235 | Input/Output: [(49 39 97 96) 39]
Test Case: 236 | Input/Output: [(93 69 8 47) 8]
Test Case: 237 | Input/Output: [(8 65 98 4) 4]
Test Case: 238 | Input/Output: [(7 30 34 15) 7]
Test Case: 239 | Input/Output: [(9 65 96 60) 9]
Test Case: 240 | Input/Output: [(88 57 50 26) 26]
Test Case: 241 | Input/Output: [(72 89 85 59) 59]
Test Case: 242 | Input/Output: [(13 75 91 64) 13]
Test Case: 243 | Input/Output: [(88 51 44 81) 44]
Test Case: 244 | Input/Output: [(51 78 7 7) 7]
Test Case: 245 | Input/Output: [(51 73 21 72) 21]
Test Case: 246 | Input/Output: [(53 2 72 83) 2]
Test Case: 247 | Input/Output: [(69 65 28 24) 24]
Test Case: 248 | Input/Output: [(55 9 36 37) 9]
Test Case: 249 | Input/Output: [(31 89 21 31) 21]
Test Case: 250 | Input/Output: [(48 39 100 74) 39]
Test Case: 251 | Input/Output: [(59 21 82 75) 21]
Test Case: 252 | Input/Output: [(15 21 58 64) 15]
Test Case: 253 | Input/Output: [(100 9 51 87) 9]
Test Case: 254 | Input/Output: [(100 36 91 96) 36]
Test Case: 255 | Input/Output: [(11 63 57 100) 11]
Test Case: 256 | Input/Output: [(86 67 36 33) 33]
Test Case: 257 | Input/Output: [(90 23 46 85) 23]
Test Case: 258 | Input/Output: [(23 67 36 85) 23]
Test Case: 259 | Input/Output: [(15 57 94 99) 15]
Test Case: 260 | Input/Output: [(6 5 81 79) 5]
Test Case: 261 | Input/Output: [(30 93 27 0) 0]
Test Case: 262 | Input/Output: [(94 70 90 83) 70]
Test Case: 263 | Input/Output: [(57 73 14 89) 14]
Test Case: 264 | Input/Output: [(24 27 34 28) 24]
Test Case: 265 | Input/Output: [(40 9 37 14) 9]
Test Case: 266 | Input/Output: [(86 56 42 62) 42]
Test Case: 267 | Input/Output: [(86 31 78 32) 31]
Test Case: 268 | Input/Output: [(69 52 19 25) 19]
Test Case: 269 | Input/Output: [(34 97 23 60) 23]
Test Case: 270 | Input/Output: [(66 15 82 31) 15]
Test Case: 271 | Input/Output: [(64 79 34 30) 30]
Test Case: 272 | Input/Output: [(85 79 55 64) 55]
Test Case: 273 | Input/Output: [(87 100 89 36) 36]
Test Case: 274 | Input/Output: [(30 98 71 39) 30]
Test Case: 275 | Input/Output: [(35 18 47 45) 18]
Test Case: 276 | Input/Output: [(3 67 49 60) 3]
Test Case: 277 | Input/Output: [(46 71 78 31) 31]
Test Case: 278 | Input/Output: [(66 11 46 37) 11]
Test Case: 279 | Input/Output: [(32 79 73 58) 32]
Test Case: 280 | Input/Output: [(17 93 47 81) 17]
Test Case: 281 | Input/Output: [(34 78 3 0) 0]
Test Case: 282 | Input/Output: [(13 22 5 36) 5]
Test Case: 283 | Input/Output: [(15 75 18 51) 15]
Test Case: 284 | Input/Output: [(39 24 86 52) 24]
Test Case: 285 | Input/Output: [(45 23 59 29) 23]
Test Case: 286 | Input/Output: [(81 47 84 4) 4]
Test Case: 287 | Input/Output: [(58 91 94 70) 58]
Test Case: 288 | Input/Output: [(44 41 9 14) 9]
Test Case: 289 | Input/Output: [(23 99 74 31) 23]
Test Case: 290 | Input/Output: [(54 36 56 32) 32]
Test Case: 291 | Input/Output: [(8 25 55 4) 4]
Test Case: 292 | Input/Output: [(26 95 61 72) 26]
Test Case: 293 | Input/Output: [(60 71 100 58) 58]
Test Case: 294 | Input/Output: [(14 72 57 62) 14]
Test Case: 295 | Input/Output: [(76 49 57 91) 49]
Test Case: 296 | Input/Output: [(75 75 69 13) 13]
Test Case: 297 | Input/Output: [(76 61 84 81) 61]
Test Case: 298 | Input/Output: [(45 41 29 42) 29]
Test Case: 299 | Input/Output: [(90 16 54 44) 16]
Test Case: 300 | Input/Output: [(46 51 20 100) 20]
Test Case: 301 | Input/Output: [(44 78 39 49) 39]
Test Case: 302 | Input/Output: [(0 27 55 93) 0]
Test Case: 303 | Input/Output: [(32 24 96 90) 24]
Test Case: 304 | Input/Output: [(23 1 59 85) 1]
Test Case: 305 | Input/Output: [(48 29 97 43) 29]
Test Case: 306 | Input/Output: [(55 100 26 45) 26]
Test Case: 307 | Input/Output: [(57 18 91 84) 18]
Test Case: 308 | Input/Output: [(19 12 69 35) 12]
Test Case: 309 | Input/Output: [(63 12 72 1) 1]
Test Case: 310 | Input/Output: [(32 69 18 55) 18]
Test Case: 311 | Input/Output: [(59 34 7 68) 7]
Test Case: 312 | Input/Output: [(39 84 13 68) 13]
Test Case: 313 | Input/Output: [(65 2 6 69) 2]
Test Case: 314 | Input/Output: [(37 17 55 27) 17]
Test Case: 315 | Input/Output: [(33 27 52 36) 27]
Test Case: 316 | Input/Output: [(31 61 64 10) 10]
Test Case: 317 | Input/Output: [(100 96 71 40) 40]
Test Case: 318 | Input/Output: [(57 40 32 95) 32]
Test Case: 319 | Input/Output: [(48 59 44 77) 44]
Test Case: 320 | Input/Output: [(2 67 99 26) 2]
Test Case: 321 | Input/Output: [(35 18 74 81) 18]
Test Case: 322 | Input/Output: [(80 47 32 53) 32]
Test Case: 323 | Input/Output: [(100 94 2 14) 2]
Test Case: 324 | Input/Output: [(23 92 53 51) 23]
Test Case: 325 | Input/Output: [(62 89 15 97) 15]
Test Case: 326 | Input/Output: [(24 51 30 85) 24]
Test Case: 327 | Input/Output: [(3 81 62 3) 3]
Test Case: 328 | Input/Output: [(38 53 45 58) 38]
Test Case: 329 | Input/Output: [(91 0 3 71) 0]
Test Case: 330 | Input/Output: [(96 29 58 35) 29]
Test Case: 331 | Input/Output: [(0 58 70 46) 0]
Test Case: 332 | Input/Output: [(95 13 7 3) 3]
Test Case: 333 | Input/Output: [(63 62 31 83) 31]
Test Case: 334 | Input/Output: [(1 77 50 13) 1]
Test Case: 335 | Input/Output: [(38 61 87 48) 38]
Test Case: 336 | Input/Output: [(52 85 40 96) 40]
Test Case: 337 | Input/Output: [(28 20 33 13) 13]
Test Case: 338 | Input/Output: [(10 28 3 47) 3]
Test Case: 339 | Input/Output: [(62 89 76 72) 62]
Test Case: 340 | Input/Output: [(50 11 46 8) 8]
Test Case: 341 | Input/Output: [(93 13 65 62) 13]
Test Case: 342 | Input/Output: [(17 52 76 51) 17]
Test Case: 343 | Input/Output: [(17 59 21 91) 17]
Test Case: 344 | Input/Output: [(15 9 89 41) 9]
Test Case: 345 | Input/Output: [(38 67 68 37) 37]
Test Case: 346 | Input/Output: [(19 16 97 34) 16]
Test Case: 347 | Input/Output: [(5 78 25 16) 5]
Test Case: 348 | Input/Output: [(23 85 87 7) 7]
Test Case: 349 | Input/Output: [(33 21 87 76) 21]
Test Case: 350 | Input/Output: [(97 41 24 47) 24]
Test Case: 351 | Input/Output: [(37 42 5 47) 5]
Test Case: 352 | Input/Output: [(58 73 79 27) 27]
Test Case: 353 | Input/Output: [(11 33 45 72) 11]
Test Case: 354 | Input/Output: [(96 99 33 54) 33]
Test Case: 355 | Input/Output: [(13 42 5 6) 5]
Test Case: 356 | Input/Output: [(89 12 46 88) 12]
Test Case: 357 | Input/Output: [(64 44 98 2) 2]
Test Case: 358 | Input/Output: [(100 2 58 54) 2]
Test Case: 359 | Input/Output: [(52 35 96 93) 35]
Test Case: 360 | Input/Output: [(98 36 88 84) 36]
Test Case: 361 | Input/Output: [(50 4 75 75) 4]
Test Case: 362 | Input/Output: [(31 23 41 28) 23]
Test Case: 363 | Input/Output: [(12 63 73 34) 12]
Test Case: 364 | Input/Output: [(82 19 28 98) 19]
Test Case: 365 | Input/Output: [(86 57 67 90) 57]
Test Case: 366 | Input/Output: [(25 11 34 46) 11]
Test Case: 367 | Input/Output: [(40 51 85 16) 16]
Test Case: 368 | Input/Output: [(33 31 32 4) 4]
Test Case: 369 | Input/Output: [(65 60 32 11) 11]
Test Case: 370 | Input/Output: [(68 9 83 91) 9]
Test Case: 371 | Input/Output: [(12 47 88 48) 12]
Test Case: 372 | Input/Output: [(25 76 86 68) 25]
Test Case: 373 | Input/Output: [(7 38 12 41) 7]
Test Case: 374 | Input/Output: [(81 88 24 34) 24]
Test Case: 375 | Input/Output: [(98 90 78 100) 78]
Test Case: 376 | Input/Output: [(18 97 87 31) 18]
Test Case: 377 | Input/Output: [(89 40 67 5) 5]
Test Case: 378 | Input/Output: [(98 40 49 96) 40]
Test Case: 379 | Input/Output: [(90 52 48 87) 48]
Test Case: 380 | Input/Output: [(38 58 77 10) 10]
Test Case: 381 | Input/Output: [(45 51 68 70) 45]
Test Case: 382 | Input/Output: [(56 91 0 35) 0]
Test Case: 383 | Input/Output: [(13 63 85 67) 13]
Test Case: 384 | Input/Output: [(30 5 12 63) 5]
Test Case: 385 | Input/Output: [(76 14 81 52) 14]
Test Case: 386 | Input/Output: [(31 35 29 35) 29]
Test Case: 387 | Input/Output: [(70 79 45 82) 45]
Test Case: 388 | Input/Output: [(3 71 15 56) 3]
Test Case: 389 | Input/Output: [(18 23 60 18) 18]
Test Case: 390 | Input/Output: [(79 55 38 0) 0]
Test Case: 391 | Input/Output: [(72 84 29 1) 1]
Test Case: 392 | Input/Output: [(73 10 75 72) 10]
Test Case: 393 | Input/Output: [(32 15 99 82) 15]
Test Case: 394 | Input/Output: [(87 88 1 25) 1]
Test Case: 395 | Input/Output: [(4 95 66 8) 4]
Test Case: 396 | Input/Output: [(87 2 38 18) 2]
Test Case: 397 | Input/Output: [(22 30 42 82) 22]
Test Case: 398 | Input/Output: [(49 8 88 39) 8]
Test Case: 399 | Input/Output: [(85 32 35 52) 32]
Test Case: 400 | Input/Output: [(70 -80 93 -84) -84]
Test Case: 401 | Input/Output: [(-5 76 39 -65) -65]
Test Case: 402 | Input/Output: [(-97 -21 44 77) -97]
Test Case: 403 | Input/Output: [(-68 -52 24 -66) -68]
Test Case: 404 | Input/Output: [(11 46 83 -75) -75]
Test Case: 405 | Input/Output: [(59 90 -55 27) -55]
Test Case: 406 | Input/Output: [(91 21 -87 -90) -90]
Test Case: 407 | Input/Output: [(68 -11 9 88) -11]
Test Case: 408 | Input/Output: [(-21 83 -15 58) -21]
Test Case: 409 | Input/Output: [(66 35 97 40) 35]
Test Case: 410 | Input/Output: [(48 41 -92 -7) -92]
Test Case: 411 | Input/Output: [(-32 -91 -12 20) -91]
Test Case: 412 | Input/Output: [(-90 91 -29 -78) -90]
Test Case: 413 | Input/Output: [(-11 74 72 -78) -78]
Test Case: 414 | Input/Output: [(-44 -57 -18 -30) -57]
Test Case: 415 | Input/Output: [(-36 59 30 -38) -38]
Test Case: 416 | Input/Output: [(-52 -97 42 -85) -97]
Test Case: 417 | Input/Output: [(-91 -15 -22 6) -91]
Test Case: 418 | Input/Output: [(80 -56 88 100) -56]
Test Case: 419 | Input/Output: [(-48 38 -89 -1) -89]
Test Case: 420 | Input/Output: [(24 -54 -96 -91) -96]
Test Case: 421 | Input/Output: [(-65 -18 81 33) -65]
Test Case: 422 | Input/Output: [(-45 -91 -20 -80) -91]
Test Case: 423 | Input/Output: [(-37 -37 27 -35) -37]
Test Case: 424 | Input/Output: [(-87 -96 -12 -97) -97]
Test Case: 425 | Input/Output: [(-88 54 38 52) -88]
Test Case: 426 | Input/Output: [(-90 -71 -35 25) -90]
Test Case: 427 | Input/Output: [(96 84 -13 -5) -13]
Test Case: 428 | Input/Output: [(-87 -84 84 -19) -87]
Test Case: 429 | Input/Output: [(-96 -82 95 74) -96]
Test Case: 430 | Input/Output: [(-86 -43 -26 34) -86]
Test Case: 431 | Input/Output: [(-80 -96 66 -29) -96]
Test Case: 432 | Input/Output: [(-57 -62 -97 62) -97]
Test Case: 433 | Input/Output: [(-37 88 -14 -56) -56]
Test Case: 434 | Input/Output: [(77 74 50 -78) -78]
Test Case: 435 | Input/Output: [(-83 47 44 -44) -83]
Test Case: 436 | Input/Output: [(-18 -49 -41 87) -49]
Test Case: 437 | Input/Output: [(8 2 77 89) 2]
Test Case: 438 | Input/Output: [(-16 85 79 -65) -65]
Test Case: 439 | Input/Output: [(-93 1 -16 30) -93]
Test Case: 440 | Input/Output: [(27 43 -12 38) -12]
Test Case: 441 | Input/Output: [(42 -59 -99 89) -99]
Test Case: 442 | Input/Output: [(-18 77 42 -56) -56]
Test Case: 443 | Input/Output: [(57 -93 46 95) -93]
Test Case: 444 | Input/Output: [(-45 89 70 -75) -75]
Test Case: 445 | Input/Output: [(38 -53 30 39) -53]
Test Case: 446 | Input/Output: [(34 29 -81 -40) -81]
Test Case: 447 | Input/Output: [(92 73 62 57) 57]
Test Case: 448 | Input/Output: [(-55 97 -25 56) -55]
Test Case: 449 | Input/Output: [(14 75 37 -61) -61]
Test Case: 450 | Input/Output: [(-44 75 -92 0) -92]
Test Case: 451 | Input/Output: [(72 -94 79 74) -94]
Test Case: 452 | Input/Output: [(5 13 79 3) 3]
Test Case: 453 | Input/Output: [(-19 50 -78 -25) -78]
Test Case: 454 | Input/Output: [(21 9 1 -32) -32]
Test Case: 455 | Input/Output: [(-2 56 -27 77) -27]
Test Case: 456 | Input/Output: [(48 -51 59 -35) -51]
Test Case: 457 | Input/Output: [(-78 -91 38 49) -91]
Test Case: 458 | Input/Output: [(3 98 -47 -13) -47]
Test Case: 459 | Input/Output: [(27 55 -13 -37) -37]
Test Case: 460 | Input/Output: [(86 -46 -38 75) -46]
Test Case: 461 | Input/Output: [(-29 -64 14 -98) -98]
Test Case: 462 | Input/Output: [(-77 54 -14 2) -77]
Test Case: 463 | Input/Output: [(-44 11 46 22) -44]
Test Case: 464 | Input/Output: [(-15 77 -33 17) -33]
Test Case: 465 | Input/Output: [(-14 -98 25 54) -98]
Test Case: 466 | Input/Output: [(58 -65 90 59) -65]
Test Case: 467 | Input/Output: [(75 -29 16 -10) -29]
Test Case: 468 | Input/Output: [(-53 11 31 -90) -90]
Test Case: 469 | Input/Output: [(65 39 81 -54) -54]
Test Case: 470 | Input/Output: [(-39 28 -41 48) -41]
Test Case: 471 | Input/Output: [(41 80 -15 -61) -61]
Test Case: 472 | Input/Output: [(-95 -48 34 -75) -95]
Test Case: 473 | Input/Output: [(-84 -46 74 26) -84]
Test Case: 474 | Input/Output: [(21 -13 -93 -33) -93]
Test Case: 475 | Input/Output: [(15 -59 2 40) -59]
Test Case: 476 | Input/Output: [(72 -85 -92 -29) -92]
Test Case: 477 | Input/Output: [(66 33 -96 -6) -96]
Test Case: 478 | Input/Output: [(-58 -48 69 -99) -99]
Test Case: 479 | Input/Output: [(-55 -40 -75 43) -75]
Test Case: 480 | Input/Output: [(-17 60 11 85) -17]
Test Case: 481 | Input/Output: [(-69 16 79 -70) -70]
Test Case: 482 | Input/Output: [(-71 50 -13 70) -71]
Test Case: 483 | Input/Output: [(-88 -11 -5 83) -88]
Test Case: 484 | Input/Output: [(98 46 11 -68) -68]
Test Case: 485 | Input/Output: [(89 73 -73 72) -73]
Test Case: 486 | Input/Output: [(-98 47 -5 63) -98]
Test Case: 487 | Input/Output: [(-39 -86 23 5) -86]
Test Case: 488 | Input/Output: [(-20 27 73 65) -20]
Test Case: 489 | Input/Output: [(-98 -50 44 81) -98]
Test Case: 490 | Input/Output: [(-9 -54 97 100) -54]
Test Case: 491 | Input/Output: [(50 -32 100 -36) -36]
Test Case: 492 | Input/Output: [(-78 -32 -46 -8) -78]
Test Case: 493 | Input/Output: [(-91 25 -93 98) -93]
Test Case: 494 | Input/Output: [(75 55 -71 -8) -71]
Test Case: 495 | Input/Output: [(12 -73 70 -63) -73]
Test Case: 496 | Input/Output: [(-98 85 40 -40) -98]
Test Case: 497 | Input/Output: [(-92 14 -86 3) -92]
Test Case: 498 | Input/Output: [(58 -80 -50 78) -80]
Test Case: 499 | Input/Output: [(58 86 17 -62) -62]
Test Case: 500 | Input/Output: [(29 84 97 72) 29]
Test Case: 501 | Input/Output: [(-13 18 -50 29) -50]
Test Case: 502 | Input/Output: [(-39 -30 0 42) -39]
Test Case: 503 | Input/Output: [(-25 -24 94 86) -25]
Test Case: 504 | Input/Output: [(-84 54 44 49) -84]
Test Case: 505 | Input/Output: [(91 72 -82 -46) -82]
Test Case: 506 | Input/Output: [(-24 78 66 23) -24]
Test Case: 507 | Input/Output: [(21 9 33 -89) -89]
Test Case: 508 | Input/Output: [(-11 -28 -31 28) -31]
Test Case: 509 | Input/Output: [(29 88 48 51) 29]
Test Case: 510 | Input/Output: [(-96 31 -7 66) -96]
Test Case: 511 | Input/Output: [(67 -11 49 -51) -51]
Test Case: 512 | Input/Output: [(-92 -43 55 -50) -92]
Test Case: 513 | Input/Output: [(49 73 8 -60) -60]
Test Case: 514 | Input/Output: [(67 75 -89 61) -89]
Test Case: 515 | Input/Output: [(-52 32 -30 22) -52]
Test Case: 516 | Input/Output: [(-21 61 91 -58) -58]
Test Case: 517 | Input/Output: [(-70 35 -97 -93) -97]
Test Case: 518 | Input/Output: [(-83 90 -25 -5) -83]
Test Case: 519 | Input/Output: [(8 72 -7 17) -7]
Test Case: 520 | Input/Output: [(19 -23 -23 -66) -66]
Test Case: 521 | Input/Output: [(-23 76 -65 30) -65]
Test Case: 522 | Input/Output: [(-58 -100 87 -48) -100]
Test Case: 523 | Input/Output: [(42 68 -17 32) -17]
Test Case: 524 | Input/Output: [(48 4 -16 97) -16]
Test Case: 525 | Input/Output: [(12 -56 99 95) -56]
Test Case: 526 | Input/Output: [(-52 90 17 -5) -52]
Test Case: 527 | Input/Output: [(55 0 24 67) 0]
Test Case: 528 | Input/Output: [(45 85 12 -74) -74]
Test Case: 529 | Input/Output: [(81 -80 41 -91) -91]
Test Case: 530 | Input/Output: [(-55 53 -21 -15) -55]
Test Case: 531 | Input/Output: [(29 40 -83 52) -83]
Test Case: 532 | Input/Output: [(88 -32 40 22) -32]
Test Case: 533 | Input/Output: [(11 -88 -17 36) -88]
Test Case: 534 | Input/Output: [(-78 43 47 95) -78]
Test Case: 535 | Input/Output: [(64 86 22 -30) -30]
Test Case: 536 | Input/Output: [(-89 -34 -55 32) -89]
Test Case: 537 | Input/Output: [(6 15 -48 83) -48]
Test Case: 538 | Input/Output: [(-68 64 -79 61) -79]
Test Case: 539 | Input/Output: [(51 59 -3 -100) -100]
Test Case: 540 | Input/Output: [(-100 59 1 -35) -100]
Test Case: 541 | Input/Output: [(-62 -90 35 -30) -90]
Test Case: 542 | Input/Output: [(-95 34 -97 13) -97]
Test Case: 543 | Input/Output: [(-47 -11 20 -36) -47]
Test Case: 544 | Input/Output: [(-10 -95 2 62) -95]
Test Case: 545 | Input/Output: [(-45 -48 14 -52) -52]
Test Case: 546 | Input/Output: [(37 -89 23 75) -89]
Test Case: 547 | Input/Output: [(-4 56 20 32) -4]
Test Case: 548 | Input/Output: [(49 -100 -24 -59) -100]
Test Case: 549 | Input/Output: [(-52 -70 86 -22) -70]
Test Case: 550 | Input/Output: [(-56 6 -86 -29) -86]
Test Case: 551 | Input/Output: [(-56 -39 -31 47) -56]
Test Case: 552 | Input/Output: [(-71 64 20 -54) -71]
Test Case: 553 | Input/Output: [(-1 33 -42 -7) -42]
Test Case: 554 | Input/Output: [(-20 -18 31 -66) -66]
Test Case: 555 | Input/Output: [(70 -88 -10 45) -88]
Test Case: 556 | Input/Output: [(35 78 -54 85) -54]
Test Case: 557 | Input/Output: [(80 -53 -6 -56) -56]
Test Case: 558 | Input/Output: [(91 97 -51 -77) -77]
Test Case: 559 | Input/Output: [(90 -43 -75 -67) -75]
Test Case: 560 | Input/Output: [(59 78 -2 77) -2]
Test Case: 561 | Input/Output: [(71 38 31 90) 31]
Test Case: 562 | Input/Output: [(84 -23 7 42) -23]
Test Case: 563 | Input/Output: [(-94 -35 -12 -68) -94]
Test Case: 564 | Input/Output: [(-43 -77 62 71) -77]
Test Case: 565 | Input/Output: [(68 -56 -33 20) -56]
Test Case: 566 | Input/Output: [(-97 62 56 -58) -97]
Test Case: 567 | Input/Output: [(-71 -45 10 50) -71]
Test Case: 568 | Input/Output: [(-25 -83 69 -43) -83]
Test Case: 569 | Input/Output: [(9 6 47 -19) -19]
Test Case: 570 | Input/Output: [(-58 44 35 68) -58]
Test Case: 571 | Input/Output: [(57 87 69 -100) -100]
Test Case: 572 | Input/Output: [(100 -9 100 16) -9]
Test Case: 573 | Input/Output: [(-86 19 -70 -34) -86]
Test Case: 574 | Input/Output: [(97 28 -43 -7) -43]
Test Case: 575 | Input/Output: [(-12 -79 16 -25) -79]
Test Case: 576 | Input/Output: [(-7 85 71 75) -7]
Test Case: 577 | Input/Output: [(98 11 -71 -84) -84]
Test Case: 578 | Input/Output: [(-38 48 -72 53) -72]
Test Case: 579 | Input/Output: [(-6 -95 87 38) -95]
Test Case: 580 | Input/Output: [(-80 -88 5 -38) -88]
Test Case: 581 | Input/Output: [(-19 -84 -98 67) -98]
Test Case: 582 | Input/Output: [(-100 -39 93 82) -100]
Test Case: 583 | Input/Output: [(95 -72 -8 33) -72]
Test Case: 584 | Input/Output: [(-54 -3 76 -25) -54]
Test Case: 585 | Input/Output: [(63 -35 99 -12) -35]
Test Case: 586 | Input/Output: [(77 -97 -18 -2) -97]
Test Case: 587 | Input/Output: [(-96 43 44 12) -96]
Test Case: 588 | Input/Output: [(38 -97 18 48) -97]
Test Case: 589 | Input/Output: [(22 52 -90 14) -90]
Test Case: 590 | Input/Output: [(-65 -97 2 57) -97]
Test Case: 591 | Input/Output: [(-25 44 -92 13) -92]
Test Case: 592 | Input/Output: [(50 62 -98 82) -98]
Test Case: 593 | Input/Output: [(-8 -65 -69 36) -69]
Test Case: 594 | Input/Output: [(-1 70 3 -94) -94]
Test Case: 595 | Input/Output: [(-56 -4 -25 -13) -56]
Test Case: 596 | Input/Output: [(14 -62 0 -79) -79]
Test Case: 597 | Input/Output: [(31 -12 -37 81) -37]
Test Case: 598 | Input/Output: [(54 -9 -59 22) -59]
Test Case: 599 | Input/Output: [(-62 68 86 77) -62]
Test Case: 600 | Input/Output: [(24 10 65 -41) -41]
Test Case: 601 | Input/Output: [(-20 -83 -5 16) -83]
Test Case: 602 | Input/Output: [(-86 66 -64 -91) -91]
Test Case: 603 | Input/Output: [(95 -79 -48 93) -79]
Test Case: 604 | Input/Output: [(-95 64 85 79) -95]
Test Case: 605 | Input/Output: [(-34 82 3 51) -34]
Test Case: 606 | Input/Output: [(8 -45 90 78) -45]
Test Case: 607 | Input/Output: [(26 -12 14 4) -12]
Test Case: 608 | Input/Output: [(-7 -38 -92 81) -92]
Test Case: 609 | Input/Output: [(-15 -72 -26 -39) -72]
Test Case: 610 | Input/Output: [(-35 30 69 33) -35]
Test Case: 611 | Input/Output: [(-84 -42 -46 33) -84]
Test Case: 612 | Input/Output: [(-41 -31 -94 21) -94]
Test Case: 613 | Input/Output: [(-88 35 -56 -64) -88]
Test Case: 614 | Input/Output: [(-39 80 73 77) -39]
Test Case: 615 | Input/Output: [(-61 -67 -35 -92) -92]
Test Case: 616 | Input/Output: [(-14 31 -49 86) -49]
Test Case: 617 | Input/Output: [(-28 -49 -24 4) -49]
Test Case: 618 | Input/Output: [(70 62 17 -21) -21]
Test Case: 619 | Input/Output: [(59 -28 11 51) -28]
Test Case: 620 | Input/Output: [(-1 -28 -26 -44) -44]
Test Case: 621 | Input/Output: [(30 -4 -60 -19) -60]
Test Case: 622 | Input/Output: [(-63 99 16 -87) -87]
Test Case: 623 | Input/Output: [(-17 -50 73 11) -50]
Test Case: 624 | Input/Output: [(-26 -83 66 -7) -83]
Test Case: 625 | Input/Output: [(-78 74 79 -13) -78]
Test Case: 626 | Input/Output: [(-49 -14 -96 24) -96]
Test Case: 627 | Input/Output: [(87 89 -80 -45) -80]
Test Case: 628 | Input/Output: [(100 -82 63 -90) -90]
Test Case: 629 | Input/Output: [(-9 -48 62 -57) -57]
Test Case: 630 | Input/Output: [(-73 46 -80 -60) -80]
Test Case: 631 | Input/Output: [(25 -71 -73 18) -73]
Test Case: 632 | Input/Output: [(-50 -51 -91 64) -91]
Test Case: 633 | Input/Output: [(-60 10 -78 -97) -97]
Test Case: 634 | Input/Output: [(49 -85 2 -92) -92]
Test Case: 635 | Input/Output: [(-88 79 59 -55) -88]
Test Case: 636 | Input/Output: [(20 -87 4 28) -87]
Test Case: 637 | Input/Output: [(22 85 -94 -27) -94]
Test Case: 638 | Input/Output: [(-18 97 28 94) -18]
Test Case: 639 | Input/Output: [(58 2 -81 82) -81]
Test Case: 640 | Input/Output: [(37 72 -77 -93) -93]
Test Case: 641 | Input/Output: [(82 36 62 -37) -37]
Test Case: 642 | Input/Output: [(-93 -96 90 14) -96]
Test Case: 643 | Input/Output: [(44 76 -56 26) -56]
Test Case: 644 | Input/Output: [(64 94 -71 -38) -71]
Test Case: 645 | Input/Output: [(56 21 -8 18) -8]
Test Case: 646 | Input/Output: [(-27 51 98 99) -27]
Test Case: 647 | Input/Output: [(-46 -99 -90 89) -99]
Test Case: 648 | Input/Output: [(56 17 -50 -91) -91]
Test Case: 649 | Input/Output: [(71 -69 -41 -36) -69]
Test Case: 650 | Input/Output: [(46 31 -29 70) -29]
Test Case: 651 | Input/Output: [(46 -31 71 47) -31]
Test Case: 652 | Input/Output: [(21 -33 -93 -15) -93]
Test Case: 653 | Input/Output: [(30 -86 -28 36) -86]
Test Case: 654 | Input/Output: [(86 -74 5 11) -74]
Test Case: 655 | Input/Output: [(91 41 -81 -92) -92]
Test Case: 656 | Input/Output: [(6 55 -73 61) -73]
Test Case: 657 | Input/Output: [(66 56 94 -85) -85]
Test Case: 658 | Input/Output: [(-22 -49 23 -26) -49]
Test Case: 659 | Input/Output: [(-39 59 -41 90) -41]
Test Case: 660 | Input/Output: [(-65 81 29 57) -65]
Test Case: 661 | Input/Output: [(78 -100 93 -68) -100]
Test Case: 662 | Input/Output: [(21 90 -15 30) -15]
Test Case: 663 | Input/Output: [(-75 74 -37 74) -75]
Test Case: 664 | Input/Output: [(69 63 69 52) 52]
Test Case: 665 | Input/Output: [(38 80 10 -3) -3]
Test Case: 666 | Input/Output: [(14 12 76 95) 12]
Test Case: 667 | Input/Output: [(-60 -82 -77 -52) -82]
Test Case: 668 | Input/Output: [(-100 2 -88 -55) -100]
Test Case: 669 | Input/Output: [(-44 -17 -45 -70) -70]
Test Case: 670 | Input/Output: [(-48 -78 77 66) -78]
Test Case: 671 | Input/Output: [(-91 -76 57 -20) -91]
Test Case: 672 | Input/Output: [(-57 73 24 89) -57]
Test Case: 673 | Input/Output: [(-56 -13 88 29) -56]
Test Case: 674 | Input/Output: [(-78 -5 70 63) -78]
Test Case: 675 | Input/Output: [(39 -49 41 8) -49]
Test Case: 676 | Input/Output: [(-3 -13 -78 68) -78]
Test Case: 677 | Input/Output: [(9 34 -40 -19) -40]
Test Case: 678 | Input/Output: [(82 -47 -78 94) -78]
Test Case: 679 | Input/Output: [(37 -39 -74 -19) -74]
Test Case: 680 | Input/Output: [(92 -97 56 56) -97]
Test Case: 681 | Input/Output: [(-70 -100 50 -45) -100]
Test Case: 682 | Input/Output: [(-39 -21 -97 71) -97]
Test Case: 683 | Input/Output: [(-31 7 37 84) -31]
Test Case: 684 | Input/Output: [(78 35 36 -39) -39]
Test Case: 685 | Input/Output: [(60 -33 96 -4) -33]
Test Case: 686 | Input/Output: [(-77 -40 -26 68) -77]
Test Case: 687 | Input/Output: [(-55 -34 64 -60) -60]
Test Case: 688 | Input/Output: [(95 51 55 48) 48]
Test Case: 689 | Input/Output: [(19 81 -15 67) -15]
Test Case: 690 | Input/Output: [(-25 -59 39 -4) -59]
Test Case: 691 | Input/Output: [(-74 -42 -38 -90) -90]
Test Case: 692 | Input/Output: [(15 71 -28 -62) -62]
Test Case: 693 | Input/Output: [(66 20 18 -69) -69]
Test Case: 694 | Input/Output: [(-18 19 92 -56) -56]
Test Case: 695 | Input/Output: [(45 97 -42 49) -42]
Test Case: 696 | Input/Output: [(42 49 49 91) 42]
Test Case: 697 | Input/Output: [(3 -90 85 -67) -90]
Test Case: 698 | Input/Output: [(53 62 -10 33) -10]
Test Case: 699 | Input/Output: [(78 -41 -79 40) -79]
Test Case: 700 | Input/Output: [(22 -92 -84 -90) -92]
Test Case: 701 | Input/Output: [(19 -43 81 34) -43]
Test Case: 702 | Input/Output: [(-52 -19 91 -98) -98]
Test Case: 703 | Input/Output: [(-98 -31 -66 -55) -98]
Test Case: 704 | Input/Output: [(-89 57 -40 -64) -89]
Test Case: 705 | Input/Output: [(30 -84 67 -45) -84]
Test Case: 706 | Input/Output: [(61 53 58 -3) -3]
Test Case: 707 | Input/Output: [(32 34 -29 5) -29]
Test Case: 708 | Input/Output: [(74 47 -23 -38) -38]
Test Case: 709 | Input/Output: [(-12 -5 95 -50) -50]
Test Case: 710 | Input/Output: [(-51 74 97 -33) -51]
Test Case: 711 | Input/Output: [(-49 -72 17 22) -72]
Test Case: 712 | Input/Output: [(-71 -25 12 -65) -71]
Test Case: 713 | Input/Output: [(22 24 94 -98) -98]
Test Case: 714 | Input/Output: [(-61 -66 -83 -70) -83]
Test Case: 715 | Input/Output: [(-17 42 34 -32) -32]
Test Case: 716 | Input/Output: [(-45 17 33 -14) -45]
Test Case: 717 | Input/Output: [(87 -57 95 22) -57]
Test Case: 718 | Input/Output: [(39 -33 -80 -40) -80]
Test Case: 719 | Input/Output: [(-100 92 50 -25) -100]
Test Case: 720 | Input/Output: [(-68 61 71 59) -68]
Test Case: 721 | Input/Output: [(22 18 -16 -34) -34]
Test Case: 722 | Input/Output: [(50 99 72 38) 38]
Test Case: 723 | Input/Output: [(-4 -50 -97 -23) -97]
Test Case: 724 | Input/Output: [(-88 -81 -89 -88) -89]
Test Case: 725 | Input/Output: [(-54 35 34 29) -54]
Test Case: 726 | Input/Output: [(25 -42 -23 53) -42]
Test Case: 727 | Input/Output: [(-5 65 18 86) -5]
Test Case: 728 | Input/Output: [(-63 -90 46 84) -90]
Test Case: 729 | Input/Output: [(-23 -30 19 -64) -64]
Test Case: 730 | Input/Output: [(53 6 29 -47) -47]
Test Case: 731 | Input/Output: [(-50 -79 -66 -39) -79]
Test Case: 732 | Input/Output: [(40 76 61 7) 7]
Test Case: 733 | Input/Output: [(-78 64 -2 94) -78]
Test Case: 734 | Input/Output: [(90 -88 -25 96) -88]
Test Case: 735 | Input/Output: [(30 -83 -75 -98) -98]
Test Case: 736 | Input/Output: [(45 -59 -32 -49) -59]
Test Case: 737 | Input/Output: [(38 -86 -4 -11) -86]
Test Case: 738 | Input/Output: [(-60 81 -51 19) -60]
Test Case: 739 | Input/Output: [(40 27 -66 -74) -74]
Test Case: 740 | Input/Output: [(-94 61 -81 93) -94]
Test Case: 741 | Input/Output: [(52 9 -61 -71) -71]
Test Case: 742 | Input/Output: [(-91 -35 -65 -36) -91]
Test Case: 743 | Input/Output: [(42 -18 -28 -21) -28]
Test Case: 744 | Input/Output: [(99 73 -2 67) -2]
Test Case: 745 | Input/Output: [(-17 -66 92 -4) -66]
Test Case: 746 | Input/Output: [(5 -20 26 91) -20]
Test Case: 747 | Input/Output: [(6 -15 -81 66) -81]
Test Case: 748 | Input/Output: [(-87 89 83 18) -87]
Test Case: 749 | Input/Output: [(-79 -95 -86 6) -95]
Test Case: 750 | Input/Output: [(79 99 -27 43) -27]
Test Case: 751 | Input/Output: [(-98 -87 -44 7) -98]
Test Case: 752 | Input/Output: [(8 -65 68 -89) -89]
Test Case: 753 | Input/Output: [(-5 -5 77 13) -5]
Test Case: 754 | Input/Output: [(-84 1 55 57) -84]
Test Case: 755 | Input/Output: [(-55 -51 -23 53) -55]
Test Case: 756 | Input/Output: [(63 -7 -92 -93) -93]
Test Case: 757 | Input/Output: [(43 -93 27 -58) -93]
Test Case: 758 | Input/Output: [(71 98 94 5) 5]
Test Case: 759 | Input/Output: [(-70 -17 -43 74) -70]
Test Case: 760 | Input/Output: [(-85 -70 54 76) -85]
Test Case: 761 | Input/Output: [(-49 97 -32 -23) -49]
Test Case: 762 | Input/Output: [(23 14 -81 -77) -81]
Test Case: 763 | Input/Output: [(-49 -30 94 -45) -49]
Test Case: 764 | Input/Output: [(-92 -48 97 -83) -92]
Test Case: 765 | Input/Output: [(-3 91 -73 94) -73]
Test Case: 766 | Input/Output: [(-37 17 -7 99) -37]
Test Case: 767 | Input/Output: [(89 -5 85 27) -5]
Test Case: 768 | Input/Output: [(-70 35 5 98) -70]
Test Case: 769 | Input/Output: [(62 -23 -90 42) -90]
Test Case: 770 | Input/Output: [(-9 14 25 86) -9]
Test Case: 771 | Input/Output: [(-3 -10 -71 93) -71]
Test Case: 772 | Input/Output: [(-65 -13 -67 100) -67]
Test Case: 773 | Input/Output: [(-23 -26 75 -38) -38]
Test Case: 774 | Input/Output: [(55 50 -12 51) -12]
Test Case: 775 | Input/Output: [(91 -47 92 -7) -47]
Test Case: 776 | Input/Output: [(100 -65 -50 78) -65]
Test Case: 777 | Input/Output: [(-95 -77 48 1) -95]
Test Case: 778 | Input/Output: [(-46 -48 17 -13) -48]
Test Case: 779 | Input/Output: [(63 43 -39 -51) -51]
Test Case: 780 | Input/Output: [(9 -63 -72 -41) -72]
Test Case: 781 | Input/Output: [(8 -67 72 98) -67]
Test Case: 782 | Input/Output: [(-99 21 26 93) -99]
Test Case: 783 | Input/Output: [(74 33 -59 77) -59]
Test Case: 784 | Input/Output: [(44 11 -99 17) -99]
Test Case: 785 | Input/Output: [(21 96 -30 94) -30]
Test Case: 786 | Input/Output: [(84 80 77 -50) -50]
Test Case: 787 | Input/Output: [(63 -19 75 -13) -19]
Test Case: 788 | Input/Output: [(-64 23 -13 48) -64]
Test Case: 789 | Input/Output: [(81 -34 -100 86) -100]
Test Case: 790 | Input/Output: [(12 -91 45 -44) -91]
Test Case: 791 | Input/Output: [(85 83 100 -99) -99]
Test Case: 792 | Input/Output: [(-26 33 -14 15) -26]
Test Case: 793 | Input/Output: [(-69 36 -6 -19) -69]
Test Case: 794 | Input/Output: [(28 41 50 72) 28]
Test Case: 795 | Input/Output: [(2 39 8 -29) -29]
Test Case: 796 | Input/Output: [(-12 -70 7 90) -70]
Test Case: 797 | Input/Output: [(-3 -29 21 -40) -40]
Test Case: 798 | Input/Output: [(34 -94 98 69) -94]
Test Case: 799 | Input/Output: [(-28 49 41 39) -28]
Test Case: 800 | Input/Output: [(91 -11 -56 -55) -56]
Test Case: 801 | Input/Output: [(-23 58 -34 -18) -34]
Test Case: 802 | Input/Output: [(-71 -7 76 93) -71]
Test Case: 803 | Input/Output: [(48 -30 -64 -2) -64]
Test Case: 804 | Input/Output: [(5 36 79 -58) -58]
Test Case: 805 | Input/Output: [(-48 100 -12 13) -48]
Test Case: 806 | Input/Output: [(-95 -8 41 -41) -95]
Test Case: 807 | Input/Output: [(27 32 -13 47) -13]
Test Case: 808 | Input/Output: [(-53 -7 -67 15) -67]
Test Case: 809 | Input/Output: [(55 -43 79 -31) -43]
Test Case: 810 | Input/Output: [(-90 -81 -18 21) -90]
Test Case: 811 | Input/Output: [(-41 66 3 90) -41]
Test Case: 812 | Input/Output: [(51 -90 -24 31) -90]
Test Case: 813 | Input/Output: [(-11 -21 100 -99) -99]
Test Case: 814 | Input/Output: [(-58 12 -47 -42) -58]
Test Case: 815 | Input/Output: [(-6 -8 73 48) -8]
Test Case: 816 | Input/Output: [(-77 61 13 -74) -77]
Test Case: 817 | Input/Output: [(-64 -11 -48 50) -64]
Test Case: 818 | Input/Output: [(12 88 29 0) 0]
Test Case: 819 | Input/Output: [(-59 89 59 69) -59]
Test Case: 820 | Input/Output: [(39 54 -100 51) -100]
Test Case: 821 | Input/Output: [(95 99 -1 -37) -37]
Test Case: 822 | Input/Output: [(75 57 53 -68) -68]
Test Case: 823 | Input/Output: [(70 75 -77 38) -77]
Test Case: 824 | Input/Output: [(86 72 -35 -33) -35]
Test Case: 825 | Input/Output: [(-95 -67 -92 -39) -95]
Test Case: 826 | Input/Output: [(8 40 -80 -87) -87]
Test Case: 827 | Input/Output: [(-27 -55 -86 20) -86]
Test Case: 828 | Input/Output: [(-62 90 -62 66) -62]
Test Case: 829 | Input/Output: [(19 -46 65 -81) -81]
Test Case: 830 | Input/Output: [(55 99 -57 45) -57]
Test Case: 831 | Input/Output: [(18 44 -58 17) -58]
Test Case: 832 | Input/Output: [(-39 91 36 58) -39]
Test Case: 833 | Input/Output: [(-73 22 0 -26) -73]
Test Case: 834 | Input/Output: [(-73 -34 30 -67) -73]
Test Case: 835 | Input/Output: [(-50 -10 -73 90) -73]
Test Case: 836 | Input/Output: [(-83 -25 -88 -93) -93]
Test Case: 837 | Input/Output: [(-3 10 -89 -59) -89]
Test Case: 838 | Input/Output: [(97 86 57 -59) -59]
Test Case: 839 | Input/Output: [(52 -93 26 -63) -93]
Test Case: 840 | Input/Output: [(-53 25 -48 -98) -98]
Test Case: 841 | Input/Output: [(-66 -22 -43 98) -66]
Test Case: 842 | Input/Output: [(-4 96 -66 4) -66]
Test Case: 843 | Input/Output: [(77 36 -25 -2) -25]
Test Case: 844 | Input/Output: [(-64 -87 83 -82) -87]
Test Case: 845 | Input/Output: [(65 -44 -22 92) -44]
Test Case: 846 | Input/Output: [(-90 -41 0 90) -90]
Test Case: 847 | Input/Output: [(69 8 83 94) 8]
Test Case: 848 | Input/Output: [(-66 52 61 25) -66]
Test Case: 849 | Input/Output: [(-23 -62 23 -65) -65]
Test Case: 850 | Input/Output: [(-5 88 -52 13) -52]
Test Case: 851 | Input/Output: [(-9 -91 -45 -78) -91]
Test Case: 852 | Input/Output: [(-100 41 38 -2) -100]
Test Case: 853 | Input/Output: [(57 -81 -91 -74) -91]
Test Case: 854 | Input/Output: [(-13 -12 31 87) -13]
Test Case: 855 | Input/Output: [(77 -7 -57 1) -57]
Test Case: 856 | Input/Output: [(-58 22 39 -75) -75]
Test Case: 857 | Input/Output: [(22 94 55 -32) -32]
Test Case: 858 | Input/Output: [(-80 -7 -47 -50) -80]
Test Case: 859 | Input/Output: [(-18 31 -13 -79) -79]
Test Case: 860 | Input/Output: [(62 92 42 -71) -71]
Test Case: 861 | Input/Output: [(-63 12 97 -2) -63]
Test Case: 862 | Input/Output: [(-97 -29 -83 79) -97]
Test Case: 863 | Input/Output: [(99 -81 -47 -22) -81]
Test Case: 864 | Input/Output: [(99 -92 -24 42) -92]
Test Case: 865 | Input/Output: [(49 65 76 -60) -60]
Test Case: 866 | Input/Output: [(-100 89 -88 -61) -100]
Test Case: 867 | Input/Output: [(84 61 -29 64) -29]
Test Case: 868 | Input/Output: [(-85 -68 80 100) -85]
Test Case: 869 | Input/Output: [(-56 -54 22 29) -56]
Test Case: 870 | Input/Output: [(-62 0 -75 16) -75]
Test Case: 871 | Input/Output: [(74 -93 63 -95) -95]
Test Case: 872 | Input/Output: [(-33 73 -76 31) -76]
Test Case: 873 | Input/Output: [(3 52 97 53) 3]
Test Case: 874 | Input/Output: [(-39 -38 96 -88) -88]
Test Case: 875 | Input/Output: [(-79 -24 90 35) -79]
Test Case: 876 | Input/Output: [(-88 -32 -69 7) -88]
Test Case: 877 | Input/Output: [(-35 -66 65 43) -66]
Test Case: 878 | Input/Output: [(63 52 -76 65) -76]
Test Case: 879 | Input/Output: [(5 -23 -61 -70) -70]
Test Case: 880 | Input/Output: [(-60 -83 66 -24) -83]
Test Case: 881 | Input/Output: [(-4 -63 -13 -9) -63]
Test Case: 882 | Input/Output: [(17 -100 76 -83) -100]
Test Case: 883 | Input/Output: [(39 79 -95 -65) -95]
Test Case: 884 | Input/Output: [(-29 -44 -92 -23) -92]
Test Case: 885 | Input/Output: [(7 36 43 -5) -5]
Test Case: 886 | Input/Output: [(77 -16 -3 -48) -48]
Test Case: 887 | Input/Output: [(73 10 19 -81) -81]
Test Case: 888 | Input/Output: [(3 -27 -30 -3) -30]
Test Case: 889 | Input/Output: [(-38 -37 90 -37) -38]
Test Case: 890 | Input/Output: [(-35 64 -3 -12) -35]
Test Case: 891 | Input/Output: [(68 23 9 -52) -52]
Test Case: 892 | Input/Output: [(95 71 82 -48) -48]
Test Case: 893 | Input/Output: [(83 -81 54 70) -81]
Test Case: 894 | Input/Output: [(33 13 -81 86) -81]
Test Case: 895 | Input/Output: [(-83 6 -21 -7) -83]
Test Case: 896 | Input/Output: [(14 28 3 97) 3]
Test Case: 897 | Input/Output: [(2 76 -66 3) -66]
Test Case: 898 | Input/Output: [(-79 59 15 -36) -79]
Test Case: 899 | Input/Output: [(-78 -6 44 23) -78]
Test Case: 900 | Input/Output: [(-29 90 -23 -10) -29]
Test Case: 901 | Input/Output: [(-14 -74 63 94) -74]
Test Case: 902 | Input/Output: [(-17 50 3 -87) -87]
Test Case: 903 | Input/Output: [(95 86 -45 18) -45]
Test Case: 904 | Input/Output: [(-97 2 78 -19) -97]
Test Case: 905 | Input/Output: [(82 53 57 -78) -78]
Test Case: 906 | Input/Output: [(2 23 -16 94) -16]
Test Case: 907 | Input/Output: [(64 32 10 34) 10]
Test Case: 908 | Input/Output: [(-52 -98 -43 42) -98]
Test Case: 909 | Input/Output: [(-62 9 -33 17) -62]
Test Case: 910 | Input/Output: [(-89 -51 98 57) -89]
Test Case: 911 | Input/Output: [(-85 -64 75 -32) -85]
Test Case: 912 | Input/Output: [(39 -67 73 62) -67]
Test Case: 913 | Input/Output: [(86 11 12 43) 11]
Test Case: 914 | Input/Output: [(38 94 23 87) 23]
Test Case: 915 | Input/Output: [(76 61 45 34) 34]
Test Case: 916 | Input/Output: [(35 85 2 -22) -22]
Test Case: 917 | Input/Output: [(-81 -24 77 -75) -81]
Test Case: 918 | Input/Output: [(-53 -90 7 48) -90]
Test Case: 919 | Input/Output: [(53 33 -92 -76) -92]
Test Case: 920 | Input/Output: [(24 -70 -77 -1) -77]
Test Case: 921 | Input/Output: [(55 13 -12 -64) -64]
Test Case: 922 | Input/Output: [(49 -90 -87 0) -90]
Test Case: 923 | Input/Output: [(29 -5 67 -58) -58]
Test Case: 924 | Input/Output: [(-37 4 -10 -65) -65]
Test Case: 925 | Input/Output: [(85 -77 34 -98) -98]
Test Case: 926 | Input/Output: [(-39 -8 -59 6) -59]
Test Case: 927 | Input/Output: [(17 -4 -60 36) -60]
Test Case: 928 | Input/Output: [(36 37 26 -98) -98]
Test Case: 929 | Input/Output: [(21 -45 45 1) -45]
Test Case: 930 | Input/Output: [(51 8 -3 59) -3]
Test Case: 931 | Input/Output: [(-66 -72 -35 -99) -99]
Test Case: 932 | Input/Output: [(-60 80 -61 7) -61]
Test Case: 933 | Input/Output: [(100 83 21 -36) -36]
Test Case: 934 | Input/Output: [(-95 -42 22 -64) -95]
Test Case: 935 | Input/Output: [(-41 15 -99 -17) -99]
Test Case: 936 | Input/Output: [(-31 16 91 97) -31]
Test Case: 937 | Input/Output: [(-36 94 -40 28) -40]
Test Case: 938 | Input/Output: [(-23 -64 67 -41) -64]
Test Case: 939 | Input/Output: [(-17 77 -44 88) -44]
Test Case: 940 | Input/Output: [(24 31 -70 -38) -70]
Test Case: 941 | Input/Output: [(-45 47 67 -51) -51]
Test Case: 942 | Input/Output: [(48 96 71 -26) -26]
Test Case: 943 | Input/Output: [(-33 -49 -87 -70) -87]
Test Case: 944 | Input/Output: [(9 -52 -96 -85) -96]
Test Case: 945 | Input/Output: [(-21 47 43 -99) -99]
Test Case: 946 | Input/Output: [(-94 23 8 -11) -94]
Test Case: 947 | Input/Output: [(-67 -8 -56 -39) -67]
Test Case: 948 | Input/Output: [(-95 37 32 -88) -95]
Test Case: 949 | Input/Output: [(-90 -48 72 -28) -90]
Test Case: 950 | Input/Output: [(97 -9 -84 24) -84]
Test Case: 951 | Input/Output: [(97 5 37 97) 5]
Test Case: 952 | Input/Output: [(-30 20 -85 17) -85]
Test Case: 953 | Input/Output: [(1 97 25 -70) -70]
Test Case: 954 | Input/Output: [(94 -6 50 67) -6]
Test Case: 955 | Input/Output: [(-10 -9 88 76) -10]
Test Case: 956 | Input/Output: [(50 -87 37 -88) -88]
Test Case: 957 | Input/Output: [(-93 76 -1 61) -93]
Test Case: 958 | Input/Output: [(94 6 -75 53) -75]
Test Case: 959 | Input/Output: [(80 -57 -86 0) -86]
Test Case: 960 | Input/Output: [(20 93 76 76) 20]
Test Case: 961 | Input/Output: [(86 -5 20 63) -5]
Test Case: 962 | Input/Output: [(-2 66 -84 -81) -84]
Test Case: 963 | Input/Output: [(-71 -32 91 46) -71]
Test Case: 964 | Input/Output: [(86 -50 -97 -42) -97]
Test Case: 965 | Input/Output: [(-33 71 5 89) -33]
Test Case: 966 | Input/Output: [(16 -54 24 85) -54]
Test Case: 967 | Input/Output: [(68 -26 77 -74) -74]
Test Case: 968 | Input/Output: [(-63 -58 62 35) -63]
Test Case: 969 | Input/Output: [(-99 98 94 -85) -99]
Test Case: 970 | Input/Output: [(-54 -96 15 -51) -96]
Test Case: 971 | Input/Output: [(56 33 -46 17) -46]
Test Case: 972 | Input/Output: [(64 97 -22 -27) -27]
Test Case: 973 | Input/Output: [(65 -68 68 16) -68]
Test Case: 974 | Input/Output: [(25 -100 -9 57) -100]
Test Case: 975 | Input/Output: [(71 -47 -50 -1) -50]
Test Case: 976 | Input/Output: [(-16 -67 -19 65) -67]
Test Case: 977 | Input/Output: [(-88 -9 -60 -30) -88]
Test Case: 978 | Input/Output: [(2 38 -1 -39) -39]
Test Case: 979 | Input/Output: [(-67 -12 55 70) -67]
Test Case: 980 | Input/Output: [(57 -28 -11 15) -28]
Test Case: 981 | Input/Output: [(27 20 -66 -82) -82]
Test Case: 982 | Input/Output: [(14 83 -12 49) -12]
Test Case: 983 | Input/Output: [(-73 45 -63 -39) -73]
Test Case: 984 | Input/Output: [(-87 -42 48 -59) -87]
Test Case: 985 | Input/Output: [(-31 -19 5 -51) -51]
Test Case: 986 | Input/Output: [(100 29 -43 -18) -43]
Test Case: 987 | Input/Output: [(-72 -37 96 -72) -72]
Test Case: 988 | Input/Output: [(-2 -33 -64 -10) -64]
Test Case: 989 | Input/Output: [(-22 -22 -25 26) -25]
Test Case: 990 | Input/Output: [(25 45 1 9) 1]
Test Case: 991 | Input/Output: [(32 -35 1 77) -35]
Test Case: 992 | Input/Output: [(-65 -78 -18 57) -78]
Test Case: 993 | Input/Output: [(-12 28 31 21) -12]
Test Case: 994 | Input/Output: [(12 40 -29 29) -29]
Test Case: 995 | Input/Output: [(-47 12 47 -10) -47]
Test Case: 996 | Input/Output: [(38 -98 -95 -62) -98]
Test Case: 997 | Input/Output: [(-24 -74 45 -36) -74]
Test Case: 998 | Input/Output: [(-87 77 37 -16) -87]
Test Case: 999 | Input/Output: [(99 6 86 -73) -73]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 44 -7 42 -76 -51 -89 -97 -52 -3 108 -68 79 127 -13 -103 -101
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[37 -67 37 37] -67] [[-50 -50 -50 95] -50] [[88 -85 -85 -85] -85] [[-13 -13 -9 -13] -13] [[61 61 -79 61] -79] [[-9 39 -9 -9] -9] [[-66 -66 -49 -66] -66] [[-85 -85 -61 -85] -85] [[28 -38 28 28] -38] [[67 40 40 40] 40] [(-25 -25 -25 -25) -25] [(-55 -55 -55 -55) -55] [(-78 -78 -78 -78) -78] [(82 82 82 82) 82] [(-75 -75 -75 -75) -75] [(53 52 84 17) 17] [(15 20 21 79) 15] [(30 64 55 14) 14] [(90 44 6 88) 6] [(73 57 38 64) 38] [(57 21 84 27) 21] [(22 97 63 38) 22] [(9 35 56 84) 9] [(3 2 65 57) 2] [(50 50 78 86) 50] [(62 100 16 29) 16] [(91 49 16 75) 16] [(14 74 78 86) 14] [(90 97 35 90) 35] [(61 33 17 49) 17] [(76 72 63 18) 18] [(55 63 78 95) 55] [(91 22 92 25) 22] [(10 99 85 63) 10] [(55 40 25 34) 25] [(58 -68 -7 -91) -91] [(-11 93 30 43) -11] [(7 34 -92 -45) -92] [(58 -11 -27 94) -27] [(-80 -63 96 1) -80] [(-99 -36 -2 -47) -99] [(75 29 -4 -44) -44] [(76 93 -45 -95) -95] [(-30 -7 -20 93) -30] [(-61 -91 -53 -61) -91] [(61 -19 30 -89) -89] [(94 92 3 85) 3] [(64 83 3 79) 3] [(-98 77 -100 -82) -100] [(-3 64 -63 -75) -75] [(66 31 -20 68) -20] [(47 -56 69 53) -56] [(53 -91 -5 17) -91] [(86 19 21 -32) -32] [(61 68 77 1) 1] [(40 77 -91 -86) -91] [(-64 52 -45 -92) -92] [(-64 62 46 67) -64] [(-66 -20 -71 -80) -80] [(-33 -55 25 19) -55] [(-77 -90 2 -30) -90] [(-81 -63 -56 37) -81] [(41 35 71 -75) -75] [(85 -2 32 -61) -61] [(-76 -22 -3 -66) -76] [(-33 -77 98 -81) -81] [(89 -8 33 49) -8] [(86 42 61 -79) -79] [(91 -65 40 -34) -65] [(97 52 -15 -10) -15] [(69 63 67 -99) -99] [(9 -64 -76 -68) -76] [(-26 -86 -18 -72) -86] [(-57 -16 95 -92) -92] [(28 -83 -39 -89) -89] [(14 8 -32 -81) -81] [(48 -80 -75 97) -80] [(-90 -49 83 -84) -90] [(83 -64 -83 14) -83] [(65 -26 6 42) -26] [(18 15 79 -54) -54] [(-41 42 -18 -71) -71] [(95 61 78 -3) -3] [(-91 -83 72 -74) -91] [(-44 -71 -46 50) -71] [(2 34 8 86) 2] [(49 92 79 -78) -78] [(30 3 18 -73) -73] [(21 89 -26 -49) -49] [(-93 46 26 4) -93] [(-44 96 77 5) -44] [(30 -29 70 25) -29] [(-37 -3 -63 -94) -94] [(-88 46 76 -94) -94] [(-68 -65 -29 99) -68])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: 88                 
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 28                 
Correct output: 40                  | Program output: 67                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 30                 
Correct output: 6                   | Program output: 90                 
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 62                 
Correct output: 16                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 35                  | Program output: 90                 
Correct output: 17                  | Program output: 61                 
Correct output: 18                  | Program output: 76                 
Correct output: 55                  | Program output: 55                 
Correct output: 22                  | Program output: 91                 
Correct output: 10                  | Program output: 10                 
Correct output: 25                  | Program output: 55                 
Correct output: -91                 | Program output: 58                 
Correct output: -11                 | Program output: -11                
Correct output: -92                 | Program output: 7                  
Correct output: -27                 | Program output: 58                 
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 75                 
Correct output: -95                 | Program output: 76                 
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -61                
Correct output: -89                 | Program output: 61                 
Correct output: 3                   | Program output: 94                 
Correct output: 3                   | Program output: 64                 
Correct output: -100                | Program output: -98                
Correct output: -75                 | Program output: -3                 
Correct output: -20                 | Program output: 66                 
Correct output: -56                 | Program output: 47                 
Correct output: -91                 | Program output: 53                 
Correct output: -32                 | Program output: 86                 
Correct output: 1                   | Program output: 61                 
Correct output: -91                 | Program output: 40                 
Correct output: -92                 | Program output: -64                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -66                
Correct output: -55                 | Program output: -33                
Correct output: -90                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -75                 | Program output: 41                 
Correct output: -61                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -33                
Correct output: -8                  | Program output: 89                 
Correct output: -79                 | Program output: 86                 
Correct output: -65                 | Program output: 91                 
Correct output: -15                 | Program output: 97                 
Correct output: -99                 | Program output: 69                 
Correct output: -76                 | Program output: 9                  
Correct output: -86                 | Program output: -26                
Correct output: -92                 | Program output: -57                
Correct output: -89                 | Program output: 28                 
Correct output: -81                 | Program output: 14                 
Correct output: -80                 | Program output: 48                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 83                 
Correct output: -26                 | Program output: 65                 
Correct output: -54                 | Program output: 18                 
Correct output: -71                 | Program output: -41                
Correct output: -3                  | Program output: 95                 
Correct output: -91                 | Program output: -91                
Correct output: -71                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: -78                 | Program output: 49                 
Correct output: -73                 | Program output: 30                 
Correct output: -49                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -29                 | Program output: 30                 
Correct output: -94                 | Program output: -37                
Correct output: -94                 | Program output: -88                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_365} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction -39} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_953} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_617} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction tag_exec_956} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_div print_boolean integer_div exec_do*range (boolean_empty integer_pop exec_k (integer_dup_items boolean_shove boolean_empty tagged_365 exec_stackdepth integer_inc boolean_pop in3 exec_do*count (exec_s (exec_do*count (integer_swap boolean_pop integer_yankdup integer_empty exec_do*count () boolean_yank boolean_yank in3 -39 boolean_dup_times) exec_do*count () integer_inc) (integer_mult exec_do*range (boolean_not) integer_dup exec_yankdup in3 boolean_invert_first_then_and integer_dup_items tag_boolean_953 boolean_dup exec_y (exec_k (print_integer integer_eq boolean_frominteger exec_do*count (integer_dup integer_mult integer_sub integer_max in4 integer_dup_items integer_gt) boolean_swap integer_shove) (tagged_617 exec_s_when_autoconstructing (exec_flush) (integer_min tag_exec_956 (exec_when (boolean_or boolean_eq integer_gte exec_if (boolean_eq exec_when (exec_rot () (print_newline integer_yank exec_do*while ()) ())) ()))) ()))) ())) ()))
Lexicase best errors: [1 0 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 99
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_365} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction -39} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_953} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_617} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction tag_exec_956} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_div print_boolean integer_div exec_do*range (boolean_empty integer_pop exec_k (integer_dup_items boolean_shove boolean_empty tagged_365 exec_stackdepth integer_inc boolean_pop in3 exec_do*count (exec_s (exec_do*count (integer_swap boolean_pop integer_yankdup integer_empty exec_do*count () boolean_yank boolean_yank in3 -39 boolean_dup_times) exec_do*count () integer_inc) (integer_mult exec_do*range (boolean_not) integer_dup exec_yankdup in3 boolean_invert_first_then_and integer_dup_items tag_boolean_953 boolean_dup exec_y (exec_k (print_integer integer_eq boolean_frominteger exec_do*count (integer_dup integer_mult integer_sub integer_max in4 integer_dup_items integer_gt) boolean_swap integer_shove) (tagged_617 exec_s_when_autoconstructing (exec_flush) (integer_min tag_exec_956 (exec_when (boolean_or boolean_eq integer_gte exec_if (boolean_eq exec_when (exec_rot () (print_newline integer_yank exec_do*while ()) ())) ()))) ()))) ())) ()))
Zero cases best errors: [1 0 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 99
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 5 1000 1 2 6 2 2 2 2)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (0 5 0 1 2 6 2 2 2 2)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when} {:close 1, :instruction integer_empty})
Best program: (boolean_dup exec_yankdup boolean_not boolean_flush boolean_invert_first_then_and boolean_flush boolean_dup_times exec_dup_items integer_shove print_integer boolean_and integer_max integer_rot in1 integer_yank boolean_and integer_yankdup print_integer integer_gt exec_k_when_autoconstructing (integer_mult exec_s (in3 integer_fromboolean boolean_stackdepth integer_flush integer_mult) (exec_empty) (integer_mult) exec_noop integer_eq boolean_swap exec_yankdup) (integer_dup_times exec_noop integer_yankdup) exec_dup_items exec_rot () () (exec_k_when_autoconstructing (integer_gt boolean_dup_times print_integer integer_inc exec_pop (integer_dup_times boolean_eq) integer_yankdup boolean_xor exec_if () (exec_when (exec_when () integer_empty))) ()))
Errors: [1 0 1 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 52
Size: 68
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 9.978
Median total errors in population: 10
Error averages by case: (1.0 0.995 1.0 0.999 0.998 0.994 0.998 0.998 0.998 0.998)
Error minima by case: (1 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 51.009
Average program size in population (points): 70.134
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 471542
--- Timings ---
Current time: 1559593728762 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.7 seconds, 25.2%
Fitness Testing:      2.0 seconds, 71.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -67                 | Program output: 37                 
Correct output: -50                 | Program output: 95                 
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 28                 
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 79                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 88                 
Correct output: 38                  | Program output: 64                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 38                 
Correct output: 9                   | Program output: 84                 
Correct output: 2                   | Program output: 57                 
Correct output: 50                  | Program output: 86                 
Correct output: 16                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 14                  | Program output: 86                 
Correct output: 35                  | Program output: 90                 
Correct output: 17                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 95                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 63                 
Correct output: 25                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: 43                 
Correct output: -92                 | Program output: -45                
Correct output: -27                 | Program output: 94                 
Correct output: -80                 | Program output: 1                  
Correct output: -99                 | Program output: -47                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: 93                 
Correct output: -91                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: 3                   | Program output: 85                 
Correct output: 3                   | Program output: 79                 
Correct output: -100                | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 68                 
Correct output: -56                 | Program output: 53                 
Correct output: -91                 | Program output: 17                 
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: 19                 
Correct output: -90                 | Program output: -30                
Correct output: -81                 | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -76                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -34                
Correct output: -15                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -68                
Correct output: -86                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 97                 
Correct output: -90                 | Program output: -84                
Correct output: -83                 | Program output: 14                 
Correct output: -26                 | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -74                
Correct output: -71                 | Program output: 50                 
Correct output: 2                   | Program output: 86                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 4                  
Correct output: -44                 | Program output: 5                  
Correct output: -29                 | Program output: 25                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush})
Lexicase best program: (exec_k (integer_dup_times boolean_dup integer_lt integer_add in4 exec_do*while (print_integer integer_yank integer_div exec_while (exec_while (exec_if (in4 integer_dec) (integer_dup_times integer_dup_items boolean_invert_first_then_and exec_shove (in1) boolean_invert_second_then_and) exec_when (in3 integer_mult exec_shove (integer_fromboolean integer_fromboolean integer_sub integer_dup_items integer_sub boolean_xor boolean_invert_second_then_and integer_pop print_exec () exec_shove (integer_inc integer_empty integer_dup_items exec_yank) print_boolean) integer_fromboolean print_boolean exec_pop (exec_k (integer_inc integer_min exec_flush) ())))))) ())
Lexicase best errors: [1 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush})
Zero cases best program: (exec_k (integer_dup_times boolean_dup integer_lt integer_add in4 exec_do*while (print_integer integer_yank integer_div exec_while (exec_while (exec_if (in4 integer_dec) (integer_dup_times integer_dup_items boolean_invert_first_then_and exec_shove (in1) boolean_invert_second_then_and) exec_when (in3 integer_mult exec_shove (integer_fromboolean integer_fromboolean integer_sub integer_dup_items integer_sub boolean_xor boolean_invert_second_then_and integer_pop print_exec () exec_shove (integer_inc integer_empty integer_dup_items exec_yank) print_boolean) integer_fromboolean print_boolean exec_pop (exec_k (integer_inc integer_min exec_flush) ())))))) ())
Zero cases best errors: [1 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 194 190 193 128 512 190 133 317 189)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (188 194 190 193 128 512 190 133 317 189)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 2, :instruction integer_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction exec_flush})
Best program: (exec_k (integer_dup_times boolean_dup integer_shove integer_lt exec_dup_times () in4 exec_do*while (print_integer integer_yank exec_while (exec_while (exec_if (in4 integer_dec) (integer_dup_times integer_dup_items boolean_invert_first_then_and exec_shove (in1) boolean_invert_second_then_and) exec_when (boolean_xor in3 integer_mult exec_shove (integer_fromboolean integer_fromboolean boolean_rot integer_sub integer_dup_items integer_sub boolean_xor integer_empty boolean_invert_second_then_and integer_pop print_exec () exec_shove (integer_empty integer_dup_items exec_yank) integer_yank)) print_boolean) integer_fromboolean print_boolean exec_s_when_autoconstructing (exec_k (exec_flush) ()) () ()))) ())
Errors: [1 0 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.766
Median total errors in population: 7
Error averages by case: (0.812 0.806 0.81 0.807 0.872 0.488 0.81 0.867 0.683 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.275
Average program size in population (points): 80.05
Average percent parens in population: 0.255
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1111420
--- Timings ---
Current time: 1559593730961 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.8 seconds, 34.2%
Fitness Testing:      2.9 seconds, 54.9%
Report:               0.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -67                 | Program output: 37                 
Correct output: -50                 | Program output: 95                 
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 28                 
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 79                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 88                 
Correct output: 38                  | Program output: 64                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 38                 
Correct output: 9                   | Program output: 84                 
Correct output: 2                   | Program output: 57                 
Correct output: 50                  | Program output: 86                 
Correct output: 16                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 14                  | Program output: 86                 
Correct output: 35                  | Program output: 90                 
Correct output: 17                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 95                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 63                 
Correct output: 25                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: 43                 
Correct output: -92                 | Program output: -45                
Correct output: -27                 | Program output: 94                 
Correct output: -80                 | Program output: 1                  
Correct output: -99                 | Program output: -47                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: 93                 
Correct output: -91                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: 3                   | Program output: 85                 
Correct output: 3                   | Program output: 79                 
Correct output: -100                | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 68                 
Correct output: -56                 | Program output: 53                 
Correct output: -91                 | Program output: 17                 
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: 19                 
Correct output: -90                 | Program output: -30                
Correct output: -81                 | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -76                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -34                
Correct output: -15                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -68                
Correct output: -86                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 97                 
Correct output: -90                 | Program output: -84                
Correct output: -83                 | Program output: 14                 
Correct output: -26                 | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -74                
Correct output: -71                 | Program output: 50                 
Correct output: 2                   | Program output: 86                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 4                  
Correct output: -44                 | Program output: 5                  
Correct output: -29                 | Program output: 25                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_246} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_pop exec_s (boolean_flush integer_inc exec_stackdepth in3 exec_s (tagged_246 print_integer integer_div exec_noop) (exec_rot (boolean_pop integer_shove exec_do*while (integer_yankdup) exec_when (in3 integer_fromboolean boolean_flush exec_yank boolean_dup_times) exec_y (integer_add exec_rot (integer_max exec_rot (exec_yank boolean_eq integer_lte) (exec_k () (integer_sub boolean_empty in4) integer_rot in4 exec_pop () boolean_shove exec_k (integer_dec) (exec_swap (boolean_xor boolean_not) (boolean_shove integer_dup_items integer_mod integer_lt exec_do*range (boolean_or integer_shove integer_mod exec_when () exec_s_when_autoconstructing (integer_stackdepth boolean_shove exec_while () boolean_not integer_pop exec_stackdepth exec_noop integer_pop integer_flush print_integer in2 exec_pop (integer_dup_times) in1 exec_dup () exec_when (boolean_and integer_div exec_noop boolean_and boolean_dup_times) integer_gt) (boolean_rot boolean_dup integer_swap integer_div) ())))) ()) () ())) () ()) ()) () ())
Lexicase best errors: [0 1 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 114
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_246} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_pop exec_s (boolean_flush integer_inc exec_stackdepth in3 exec_s (tagged_246 print_integer integer_div exec_noop) (exec_rot (boolean_pop integer_shove exec_do*while (integer_yankdup) exec_when (in3 integer_fromboolean boolean_flush exec_yank boolean_dup_times) exec_y (integer_add exec_rot (integer_max exec_rot (exec_yank boolean_eq integer_lte) (exec_k () (integer_sub boolean_empty in4) integer_rot in4 exec_pop () boolean_shove exec_k (integer_dec) (exec_swap (boolean_xor boolean_not) (boolean_shove integer_dup_items integer_mod integer_lt exec_do*range (boolean_or integer_shove integer_mod exec_when () exec_s_when_autoconstructing (integer_stackdepth boolean_shove exec_while () boolean_not integer_pop exec_stackdepth exec_noop integer_pop integer_flush print_integer in2 exec_pop (integer_dup_times) in1 exec_dup () exec_when (boolean_and integer_div exec_noop boolean_and boolean_dup_times) integer_gt) (boolean_rot boolean_dup integer_swap integer_div) ())))) ()) () ())) () ()) ()) () ())
Zero cases best errors: [0 1 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 114
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (144 2 149 2 247 247 149 245 3 566)
Population mean number of elite cases: 1.75
Count of perfect (error zero) individuals by case: (144 2 149 2 247 247 149 245 3 566)
Population mean number of perfect (error zero) cases: 1.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush})
Best program: (exec_k (integer_dup_times boolean_dup integer_lt exec_dup_times () in4 exec_do*while (print_integer integer_yank exec_while (exec_while (exec_if (in4 integer_yankdup) (integer_dec) integer_lte integer_dup_times integer_dup_items exec_shove (in1) boolean_invert_second_then_and) exec_when (in3 integer_eq integer_mult integer_fromboolean integer_fromboolean exec_eq integer_sub integer_dup_items integer_sub boolean_xor integer_empty boolean_invert_second_then_and integer_pop print_exec () integer_inc integer_empty integer_dup_items boolean_and exec_yank) print_boolean) integer_fromboolean print_boolean exec_s_when_autoconstructing (boolean_stackdepth boolean_or exec_k (integer_min exec_flush) ()) () ())) ())
Errors: [1 1 1 1 0 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 50
Size: 67
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 8.246
Median total errors in population: 9
Error averages by case: (0.856 0.998 0.851 0.998 0.753 0.753 0.851 0.755 0.997 0.434)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.2
Average program size in population (points): 78.424
Average percent parens in population: 0.253
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1742826
--- Timings ---
Current time: 1559593733287 milliseconds
Total Time:           7.6 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.1 seconds, 41.0%
Fitness Testing:      3.7 seconds, 48.6%
Report:               0.7 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -67                 | Program output: 37                 
Correct output: -50                 | Program output: 95                 
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 28                 
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 79                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 88                 
Correct output: 38                  | Program output: 64                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 38                 
Correct output: 9                   | Program output: 84                 
Correct output: 2                   | Program output: 57                 
Correct output: 50                  | Program output: 86                 
Correct output: 16                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 14                  | Program output: 86                 
Correct output: 35                  | Program output: 90                 
Correct output: 17                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 95                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 63                 
Correct output: 25                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: 43                 
Correct output: -92                 | Program output: -45                
Correct output: -27                 | Program output: 94                 
Correct output: -80                 | Program output: 1                  
Correct output: -99                 | Program output: -47                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: 93                 
Correct output: -91                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: 3                   | Program output: 85                 
Correct output: 3                   | Program output: 79                 
Correct output: -100                | Program output: -82                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 68                 
Correct output: -56                 | Program output: 53                 
Correct output: -91                 | Program output: 17                 
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 67                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: 19                 
Correct output: -90                 | Program output: -30                
Correct output: -81                 | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -76                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -34                
Correct output: -15                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -68                
Correct output: -86                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 97                 
Correct output: -90                 | Program output: -84                
Correct output: -83                 | Program output: 14                 
Correct output: -26                 | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -74                
Correct output: -71                 | Program output: 50                 
Correct output: 2                   | Program output: 86                 
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 4                  
Correct output: -44                 | Program output: 5                  
Correct output: -29                 | Program output: 25                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_994} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_691} {:close 0, :instruction in2} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction -37} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_or boolean_invert_second_then_and in3 integer_empty boolean_dup_items boolean_invert_second_then_and integer_gt exec_shove (exec_do*count (in4 print_integer tagged_994 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_shove boolean_frominteger tagged_691) in2 integer_empty)) integer_eq boolean_and boolean_eq boolean_flush) boolean_dup exec_dup_times () exec_dup_items exec_eq exec_when (boolean_stackdepth boolean_or) exec_flush integer_empty exec_dup_times (print_newline integer_empty) exec_do*count (exec_k (exec_if (-37 boolean_dup_items exec_dup_times (in2) integer_eq print_exec (in1) boolean_yankdup integer_stackdepth integer_dec exec_empty print_boolean) ()) ()))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_994} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_691} {:close 0, :instruction in2} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction -37} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_or boolean_invert_second_then_and in3 integer_empty boolean_dup_items boolean_invert_second_then_and integer_gt exec_shove (exec_do*count (in4 print_integer tagged_994 exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_shove boolean_frominteger tagged_691) in2 integer_empty)) integer_eq boolean_and boolean_eq boolean_flush) boolean_dup exec_dup_times () exec_dup_items exec_eq exec_when (boolean_stackdepth boolean_or) exec_flush integer_empty exec_dup_times (print_newline integer_empty) exec_do*count (exec_k (exec_if (-37 boolean_dup_items exec_dup_times (in2) integer_eq print_exec (in1) boolean_yankdup integer_stackdepth integer_dec exec_empty print_boolean) ()) ()))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (631 234 235 155 213 244 216 17 473 155)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (631 234 235 155 213 244 216 17 473 155)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 1, :instruction tagged_883} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean})
Best program: (boolean_or boolean_invert_second_then_and exec_do*times (integer_gte in3 integer_inc integer_stackdepth) boolean_dup_items in4 print_integer exec_y_when_autoconstructing (boolean_pop) exec_if (integer_shove integer_dup in2 integer_empty) () integer_eq boolean_not boolean_and exec_k (integer_shove boolean_flush) (boolean_dup exec_dup_times () exec_dup_items boolean_flush) exec_shove () boolean_stackdepth boolean_or exec_do*times (integer_dup_times integer_max exec_flush exec_if (integer_dup_items print_newline integer_dec) (integer_empty) exec_do*count (exec_dup_items integer_lte boolean_empty) tagged_883) exec_if (exec_do*while () exec_y (exec_dup_times (exec_yank boolean_flush integer_eq print_exec (boolean_invert_first_then_and in1) integer_dec exec_pop (exec_dup (exec_y (print_boolean)))))) ())
Errors: [0 0 0 1 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 81
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 7.427
Median total errors in population: 7
Error averages by case: (0.369 0.766 0.765 0.845 0.787 0.756 0.784 0.983 0.527 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.039
Average program size in population (points): 80.729
Average percent parens in population: 0.249
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2382235
--- Timings ---
Current time: 1559593735516 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.3 seconds, 44.4%
Fitness Testing:      4.4 seconds, 45.1%
Report:               0.9 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -9                 
Correct output: -79                 | Program output: -79                
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -49                
Correct output: -85                 | Program output: -61                
Correct output: -38                 | Program output: 28                 
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 84                 
Correct output: 15                  | Program output: 21                 
Correct output: 14                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 84                 
Correct output: 22                  | Program output: 63                 
Correct output: 9                   | Program output: 56                 
Correct output: 2                   | Program output: 65                 
Correct output: 50                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 14                  | Program output: 78                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 63                 
Correct output: 55                  | Program output: 78                 
Correct output: 22                  | Program output: 92                 
Correct output: 10                  | Program output: 85                 
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -7                 
Correct output: -11                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: 96                 
Correct output: -99                 | Program output: -2                 
Correct output: -44                 | Program output: -4                 
Correct output: -95                 | Program output: -45                
Correct output: -30                 | Program output: -20                
Correct output: -91                 | Program output: -53                
Correct output: -89                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -63                
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: 69                 
Correct output: -91                 | Program output: -5                 
Correct output: -32                 | Program output: 21                 
Correct output: 1                   | Program output: 77                 
Correct output: -91                 | Program output: -91                
Correct output: -92                 | Program output: -45                
Correct output: -64                 | Program output: 46                 
Correct output: -80                 | Program output: -71                
Correct output: -55                 | Program output: 25                 
Correct output: -90                 | Program output: 2                  
Correct output: -81                 | Program output: -56                
Correct output: -75                 | Program output: 71                 
Correct output: -61                 | Program output: 32                 
Correct output: -76                 | Program output: -3                 
Correct output: -81                 | Program output: 98                 
Correct output: -8                  | Program output: 33                 
Correct output: -79                 | Program output: 61                 
Correct output: -65                 | Program output: 40                 
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -18                
Correct output: -92                 | Program output: 95                 
Correct output: -89                 | Program output: -39                
Correct output: -81                 | Program output: -32                
Correct output: -80                 | Program output: -75                
Correct output: -90                 | Program output: 83                 
Correct output: -83                 | Program output: -83                
Correct output: -26                 | Program output: 6                  
Correct output: -54                 | Program output: 79                 
Correct output: -71                 | Program output: -18                
Correct output: -3                  | Program output: 78                 
Correct output: -91                 | Program output: 72                 
Correct output: -71                 | Program output: -46                
Correct output: 2                   | Program output: 8                  
Correct output: -78                 | Program output: 79                 
Correct output: -73                 | Program output: 18                 
Correct output: -49                 | Program output: -26                
Correct output: -93                 | Program output: 26                 
Correct output: -44                 | Program output: 77                 
Correct output: -29                 | Program output: 70                 
Correct output: -94                 | Program output: -63                
Correct output: -94                 | Program output: 76                 
Correct output: -68                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_810} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction tagged_687} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction tagged_14} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_219} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div})
Lexicase best program: (integer_dup tag_integer_810 boolean_pop boolean_flush boolean_invert_first_then_and integer_dec exec_stackdepth in3 tagged_687 exec_s (print_integer exec_empty) (integer_yank integer_div integer_inc exec_noop) (integer_dec) tagged_14 integer_yankdup in1 boolean_pop integer_shove integer_stackdepth exec_do*while (exec_do*times (boolean_rot integer_rot integer_yankdup) boolean_swap in4 boolean_flush integer_max) integer_lte exec_yank boolean_dup_times exec_y (boolean_dup_times exec_rot (integer_max exec_noop exec_rot (boolean_eq exec_dup_times (boolean_invert_second_then_and integer_lte) exec_k () (boolean_yankdup integer_sub exec_pop () boolean_shove integer_yank integer_fromboolean boolean_not) integer_dup_items boolean_eq boolean_shove integer_mod integer_lte) (exec_k () (exec_do*range (boolean_or exec_dup () integer_shove integer_mod exec_when () boolean_shove boolean_shove exec_while () integer_pop integer_pop integer_flush print_integer in2 exec_swap (integer_dup_times) (in1 integer_gte) exec_when (boolean_eq tagged_219 boolean_and integer_max) integer_div integer_gte exec_if (boolean_and print_integer integer_gt) (boolean_invert_first_then_and boolean_dup integer_swap integer_div)))) ()) () ()))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 120
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_810} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction tagged_687} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 0, :instruction tagged_14} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_219} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div})
Zero cases best program: (integer_dup tag_integer_810 boolean_pop boolean_flush boolean_invert_first_then_and integer_dec exec_stackdepth in3 tagged_687 exec_s (print_integer exec_empty) (integer_yank integer_div integer_inc exec_noop) (integer_dec) tagged_14 integer_yankdup in1 boolean_pop integer_shove integer_stackdepth exec_do*while (exec_do*times (boolean_rot integer_rot integer_yankdup) boolean_swap in4 boolean_flush integer_max) integer_lte exec_yank boolean_dup_times exec_y (boolean_dup_times exec_rot (integer_max exec_noop exec_rot (boolean_eq exec_dup_times (boolean_invert_second_then_and integer_lte) exec_k () (boolean_yankdup integer_sub exec_pop () boolean_shove integer_yank integer_fromboolean boolean_not) integer_dup_items boolean_eq boolean_shove integer_mod integer_lte) (exec_k () (exec_do*range (boolean_or exec_dup () integer_shove integer_mod exec_when () boolean_shove boolean_shove exec_while () integer_pop integer_pop integer_flush print_integer in2 exec_swap (integer_dup_times) (in1 integer_gte) exec_when (boolean_eq tagged_219 boolean_and integer_max) integer_div integer_gte exec_if (boolean_and print_integer integer_gt) (boolean_invert_first_then_and boolean_dup integer_swap integer_div)))) ()) () ()))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 120
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (166 630 213 167 166 166 234 233 164 245)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (166 630 213 167 166 166 234 233 164 245)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap})
Best program: (boolean_pop integer_swap integer_dup_items exec_s (integer_inc integer_dec) (boolean_flush exec_stackdepth in3 exec_s (print_integer exec_do*count (exec_dup (boolean_pop integer_shove exec_do*while (exec_do*times (integer_yankdup) exec_when (integer_fromboolean integer_sub in4 boolean_swap exec_yank boolean_dup_times) exec_do*range (integer_gte exec_rot (integer_max exec_rot (exec_do*count () exec_yank integer_dup) (exec_do*times (boolean_eq integer_lte) integer_sub exec_shove (integer_rot exec_pop () integer_empty boolean_shove exec_k (boolean_xor boolean_not) (boolean_shove boolean_xor integer_mod boolean_shove integer_lt integer_lte) exec_k () (exec_do*range (exec_dup () integer_shove exec_stackdepth exec_when () boolean_yankdup integer_gte) integer_stackdepth boolean_shove exec_while () integer_pop in2 exec_swap (boolean_pop exec_when (exec_stackdepth integer_lte boolean_eq) integer_dup_times) (exec_k (integer_rot in1 exec_when (boolean_eq integer_add integer_gte boolean_and boolean_dup_times) integer_gt) (boolean_dup integer_swap))))) ()) () ()))))) () ()) ())
Errors: [0 0 1 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 83
Size: 120
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.616
Median total errors in population: 7
Error averages by case: (0.834 0.37 0.787 0.833 0.834 0.834 0.766 0.767 0.836 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.087
Average program size in population (points): 76.21
Average percent parens in population: 0.245
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2963855
--- Timings ---
Current time: 1559593738117 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.6 seconds, 46.9%
Fitness Testing:      5.0 seconds, 42.1%
Report:               1.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 28                 
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 88                 
Correct output: 38                  | Program output: 64                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 35                  | Program output: 90                 
Correct output: 17                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 55                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 10                 
Correct output: 25                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -92                 | Program output: -45                
Correct output: -27                 | Program output: 58                 
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: 3                   | Program output: 85                 
Correct output: 3                   | Program output: 64                 
Correct output: -100                | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 66                 
Correct output: -56                 | Program output: 47                 
Correct output: -91                 | Program output: 17                 
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -33                
Correct output: -90                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -34                
Correct output: -15                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -68                
Correct output: -86                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 48                 
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: 14                 
Correct output: -26                 | Program output: 42                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -71                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -29                 | Program output: 25                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when})
Lexicase best program: (exec_yankdup boolean_flush boolean_dup_times exec_dup_items integer_shove print_boolean boolean_and integer_max boolean_flush integer_mult integer_rot in4 in1 integer_min integer_yank integer_mod boolean_and integer_yankdup print_boolean print_integer integer_gt integer_gte integer_flush integer_gt integer_mult exec_s (integer_fromboolean boolean_stackdepth integer_flush integer_mult) (exec_empty) (integer_eq boolean_swap exec_yankdup) integer_dup_times exec_dup_items exec_k_when_autoconstructing (boolean_dup_times exec_eq exec_empty) () integer_inc exec_pop (exec_do*range (boolean_eq) integer_yankdup boolean_xor exec_if () (exec_flush) exec_when (exec_when ())))
Lexicase best errors: [1 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 62
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when})
Zero cases best program: (exec_yankdup boolean_flush boolean_dup_times exec_dup_items integer_shove print_boolean boolean_and integer_max boolean_flush integer_mult integer_rot in4 in1 integer_min integer_yank integer_mod boolean_and integer_yankdup print_boolean print_integer integer_gt integer_gte integer_flush integer_gt integer_mult exec_s (integer_fromboolean boolean_stackdepth integer_flush integer_mult) (exec_empty) (integer_eq boolean_swap exec_yankdup) integer_dup_times exec_dup_items exec_k_when_autoconstructing (boolean_dup_times exec_eq exec_empty) () integer_inc exec_pop (exec_do*range (boolean_eq) integer_yankdup boolean_xor exec_if () (exec_flush) exec_when (exec_when ())))
Zero cases best errors: [1 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 62
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 135 135 75 168 175 170 134 630 251)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (298 135 135 75 168 175 170 134 630 251)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_when})
Best program: (exec_yankdup boolean_not boolean_flush boolean_flush boolean_dup_times exec_dup_items integer_shove print_boolean boolean_and integer_max integer_mult integer_rot in4 in1 integer_min integer_yank integer_mod exec_swap (boolean_and) (integer_yankdup print_boolean print_integer) integer_gt boolean_invert_first_then_and exec_swap (integer_gt integer_mult exec_s (integer_fromboolean boolean_stackdepth integer_flush integer_mult) (exec_empty) (exec_flush integer_eq boolean_swap exec_yankdup) integer_dup_times exec_dup_items exec_k_when_autoconstructing (exec_eq exec_empty) () integer_inc boolean_or exec_k (exec_pop (exec_do*range (boolean_eq) integer_yankdup boolean_xor exec_if () (exec_flush) exec_when (exec_when ()))) ()) ())
Errors: [1 0 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 54
Size: 72
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.829
Median total errors in population: 8
Error averages by case: (0.702 0.865 0.865 0.925 0.832 0.825 0.83 0.866 0.37 0.749)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.202
Average program size in population (points): 88.471
Average percent parens in population: 0.246
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3866237
--- Timings ---
Current time: 1559593740566 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.8 seconds, 46.1%
Fitness Testing:      5.9 seconds, 40.1%
Report:               1.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 52                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 30                 
Correct output: 6                   | Program output: 44                 
Correct output: 38                  | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 2                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 62                 
Correct output: 16                  | Program output: 49                 
Correct output: 14                  | Program output: 14                 
Correct output: 35                  | Program output: 90                 
Correct output: 17                  | Program output: 33                 
Correct output: 18                  | Program output: 72                 
Correct output: 55                  | Program output: 55                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 25                  | Program output: 40                 
Correct output: -91                 | Program output: -68                
Correct output: -11                 | Program output: -11                
Correct output: -92                 | Program output: 7                  
Correct output: -27                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 29                 
Correct output: -95                 | Program output: 76                 
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -19                
Correct output: 3                   | Program output: 92                 
Correct output: 3                   | Program output: 64                 
Correct output: -100                | Program output: -98                
Correct output: -75                 | Program output: -3                 
Correct output: -20                 | Program output: 31                 
Correct output: -56                 | Program output: -56                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 19                 
Correct output: 1                   | Program output: 61                 
Correct output: -91                 | Program output: 40                 
Correct output: -92                 | Program output: -64                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -66                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -81                
Correct output: -75                 | Program output: 35                 
Correct output: -61                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -15                 | Program output: 52                 
Correct output: -99                 | Program output: 63                 
Correct output: -76                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -57                
Correct output: -89                 | Program output: -83                
Correct output: -81                 | Program output: 8                  
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -64                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: 15                 
Correct output: -71                 | Program output: -41                
Correct output: -3                  | Program output: 61                 
Correct output: -91                 | Program output: -91                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 2                  
Correct output: -78                 | Program output: 49                 
Correct output: -73                 | Program output: 3                  
Correct output: -49                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -94                 | Program output: -37                
Correct output: -94                 | Program output: -88                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction exec_when})
Lexicase best program: (exec_yankdup boolean_not boolean_flush boolean_flush integer_gt boolean_dup_times exec_dup_items integer_dup_items integer_shove print_boolean integer_dup_times integer_dup_times boolean_and integer_max integer_yankdup integer_rot in2 in1 integer_min integer_yank integer_mod boolean_and print_boolean print_integer exec_y_when_autoconstructing (integer_gt) exec_do*while (exec_eq exec_k_when_autoconstructing (integer_gt integer_mult boolean_frominteger exec_s (integer_fromboolean boolean_stackdepth integer_stackdepth integer_flush integer_dup_times) (integer_mult) (exec_empty) exec_noop integer_eq exec_yankdup) (exec_dup_items exec_k_when_autoconstructing (in4 boolean_eq boolean_dup_times integer_fromboolean exec_pop (exec_do*range (boolean_eq) integer_yankdup boolean_xor exec_if () (exec_when ()))) ())))
Lexicase best errors: [1 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction exec_when})
Zero cases best program: (exec_yankdup boolean_not boolean_flush boolean_flush integer_gt boolean_dup_times exec_dup_items integer_dup_items integer_shove print_boolean integer_dup_times integer_dup_times boolean_and integer_max integer_yankdup integer_rot in2 in1 integer_min integer_yank integer_mod boolean_and print_boolean print_integer exec_y_when_autoconstructing (integer_gt) exec_do*while (exec_eq exec_k_when_autoconstructing (integer_gt integer_mult boolean_frominteger exec_s (integer_fromboolean boolean_stackdepth integer_stackdepth integer_flush integer_dup_times) (integer_mult) (exec_empty) exec_noop integer_eq exec_yankdup) (exec_dup_items exec_k_when_autoconstructing (in4 boolean_eq boolean_dup_times integer_fromboolean exec_pop (exec_do*range (boolean_eq) integer_yankdup boolean_xor exec_if () (exec_when ()))) ())))
Zero cases best errors: [1 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (136 137 118 133 421 118 130 119 426 118)
Population mean number of elite cases: 1.86
Count of perfect (error zero) individuals by case: (136 137 118 133 421 118 130 119 426 118)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction exec_when})
Best program: (exec_yankdup boolean_not boolean_flush integer_gt boolean_dup_times exec_dup_items exec_do*times () integer_shove print_boolean boolean_and exec_do*while (in2 exec_noop in1) integer_min integer_yank integer_mod boolean_and integer_yankdup print_boolean print_integer integer_gt integer_gt integer_mult exec_s (integer_fromboolean boolean_stackdepth integer_mult) (integer_mult) (integer_lt integer_eq boolean_swap boolean_dup_times exec_dup_items boolean_dup_times exec_eq integer_inc exec_do*range (in3 boolean_xor exec_if () (exec_when ()))))
Errors: [1 1 0 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 8.144
Median total errors in population: 8
Error averages by case: (0.864 0.863 0.882 0.867 0.579 0.882 0.87 0.881 0.574 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.956
Average program size in population (points): 72.669
Average percent parens in population: 0.237
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4458645
--- Timings ---
Current time: 1559593742715 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.0 seconds, 47.4%
Fitness Testing:      6.6 seconds, 38.8%
Report:               2.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 88                 
Correct output: 38                  | Program output: 64                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 35                  | Program output: 90                 
Correct output: 17                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 55                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 10                 
Correct output: 25                  | Program output: 34                 
Correct output: -91                 | Program output: -68                
Correct output: -11                 | Program output: -11                
Correct output: -92                 | Program output: -45                
Correct output: -27                 | Program output: -11                
Correct output: -80                 | Program output: -63                
Correct output: -99                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -19                
Correct output: 3                   | Program output: 85                 
Correct output: 3                   | Program output: 64                 
Correct output: -100                | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 66                 
Correct output: -56                 | Program output: -56                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -20                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -2                 
Correct output: -76                 | Program output: -22                
Correct output: -81                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -65                
Correct output: -15                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -16                
Correct output: -89                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -49                
Correct output: -83                 | Program output: -64                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -94                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Lexicase best program: (exec_yankdup boolean_not integer_mod boolean_flush boolean_dup_times exec_dup_items integer_min integer_shove print_boolean boolean_and exec_do*times () integer_max integer_rot in4 in1 integer_min integer_swap integer_yank in2 integer_dup boolean_and integer_yankdup print_boolean print_integer integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_s (integer_fromboolean exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) (integer_eq boolean_swap exec_yankdup) (integer_gte integer_dup_times exec_dup_items exec_k_when_autoconstructing (boolean_dup_times exec_eq integer_inc exec_do*range (integer_yankdup boolean_xor exec_flush) in3 exec_when ()) ()))) ())
Lexicase best errors: [0 1 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Zero cases best program: (exec_yankdup boolean_not integer_mod boolean_flush boolean_dup_times exec_dup_items integer_min integer_shove print_boolean boolean_and exec_do*times () integer_max integer_rot in4 in1 integer_min integer_swap integer_yank in2 integer_dup boolean_and integer_yankdup print_boolean print_integer integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_s (integer_fromboolean exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) (integer_eq boolean_swap exec_yankdup) (integer_gte integer_dup_times exec_dup_items exec_k_when_autoconstructing (boolean_dup_times exec_eq integer_inc exec_do*range (integer_yankdup boolean_xor exec_flush) in3 exec_when ()) ()))) ())
Zero cases best errors: [0 1 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 5 7 7 318 5 319 317 250 7)
Population mean number of elite cases: 1.24
Count of perfect (error zero) individuals by case: (6 5 7 7 318 5 319 317 250 7)
Population mean number of perfect (error zero) cases: 1.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Best program: (exec_yankdup boolean_not integer_mod boolean_flush boolean_dup_times exec_dup_items integer_min integer_shove print_boolean boolean_and exec_do*times () integer_max integer_rot in4 in1 integer_min integer_swap integer_yank in2 integer_dup boolean_and integer_yankdup print_boolean print_integer integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_s (integer_fromboolean exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) (integer_eq boolean_swap exec_yankdup) (integer_gte integer_dup_times exec_dup_items exec_k_when_autoconstructing (boolean_dup_times exec_eq integer_inc exec_do*range (integer_yankdup boolean_xor exec_flush) in3 exec_when ()) ()))) ())
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 51
Size: 65
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 8.759
Median total errors in population: 9
Error averages by case: (0.994 0.995 0.993 0.993 0.682 0.995 0.681 0.683 0.75 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.644
Average program size in population (points): 78.257
Average percent parens in population: 0.242
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5148837
--- Timings ---
Current time: 1559593744971 milliseconds
Total Time:          19.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.2 seconds, 48.2%
Fitness Testing:      7.3 seconds, 37.9%
Report:               2.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 88                 
Correct output: 38                  | Program output: 64                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 35                  | Program output: 90                 
Correct output: 17                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 55                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 10                 
Correct output: 25                  | Program output: 34                 
Correct output: -91                 | Program output: -68                
Correct output: -11                 | Program output: -11                
Correct output: -92                 | Program output: -45                
Correct output: -27                 | Program output: -11                
Correct output: -80                 | Program output: -63                
Correct output: -99                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -19                
Correct output: 3                   | Program output: 85                 
Correct output: 3                   | Program output: 64                 
Correct output: -100                | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 66                 
Correct output: -56                 | Program output: -56                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -20                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -2                 
Correct output: -76                 | Program output: -22                
Correct output: -81                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -65                
Correct output: -15                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -16                
Correct output: -89                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -49                
Correct output: -83                 | Program output: -64                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -94                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Lexicase best program: (exec_yankdup boolean_not integer_mod boolean_flush boolean_dup_times exec_dup_items integer_min integer_shove print_boolean boolean_and exec_do*times () integer_max integer_mult integer_rot in4 in1 integer_min integer_swap integer_yank in2 integer_dup boolean_and integer_yankdup print_boolean print_integer integer_gt boolean_rot exec_k_when_autoconstructing (exec_if () (exec_s (integer_fromboolean exec_y (exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) integer_eq boolean_swap exec_yankdup) (integer_gte integer_dup_times exec_dup_items exec_k_when_autoconstructing (boolean_dup_times exec_eq integer_inc exec_do*range (integer_yankdup boolean_xor exec_flush) in3 exec_when ()) ()) ())) ())
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Zero cases best program: (exec_yankdup boolean_not integer_mod boolean_flush boolean_dup_times exec_dup_items integer_min integer_shove print_boolean boolean_and exec_do*times () integer_max integer_mult integer_rot in4 in1 integer_min integer_swap integer_yank in2 integer_dup boolean_and integer_yankdup print_boolean print_integer integer_gt boolean_rot exec_k_when_autoconstructing (exec_if () (exec_s (integer_fromboolean exec_y (exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) integer_eq boolean_swap exec_yankdup) (integer_gte integer_dup_times exec_dup_items exec_k_when_autoconstructing (boolean_dup_times exec_eq integer_inc exec_do*range (integer_yankdup boolean_xor exec_flush) in3 exec_when ()) ()) ())) ())
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (337 66 440 334 262 437 66 443 343 621)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (337 66 440 334 262 437 66 443 343 621)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Best program: (exec_yankdup boolean_not integer_mod boolean_flush boolean_dup_times exec_dup_items integer_min integer_shove print_boolean boolean_and exec_do*times () integer_max integer_rot in4 in1 integer_min integer_swap integer_yank in2 integer_dup integer_yankdup print_boolean print_integer integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_s (integer_fromboolean exec_when (exec_shove (tag_integer_252 integer_flush integer_mult) exec_y (exec_empty) integer_eq boolean_swap exec_yankdup) integer_gte integer_dup_times exec_dup_items exec_k_when_autoconstructing (boolean_dup_times exec_eq integer_inc print_integer exec_do*range (integer_yankdup boolean_xor exec_flush) in3 exec_when ()) ()) () ())) ())
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 53
Size: 69
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 6.651
Median total errors in population: 7
Error averages by case: (0.663 0.934 0.56 0.666 0.738 0.563 0.934 0.557 0.657 0.379)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.138
Average program size in population (points): 69.708
Average percent parens in population: 0.234
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5731011
--- Timings ---
Current time: 1559593747233 milliseconds
Total Time:          21.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.4 seconds, 49.1%
Fitness Testing:      7.8 seconds, 36.9%
Report:               2.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 28                 
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 38                 
Correct output: 9                   | Program output: 56                 
Correct output: 2                   | Program output: 57                 
Correct output: 50                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 14                  | Program output: 78                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 78                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 63                 
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: 1                  
Correct output: -99                 | Program output: -47                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: -20                
Correct output: -91                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: 53                 
Correct output: -91                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -91                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 46                 
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: 19                 
Correct output: -90                 | Program output: -30                
Correct output: -81                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -76                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -75                
Correct output: -90                 | Program output: -84                
Correct output: -83                 | Program output: -83                
Correct output: -26                 | Program output: 6                  
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -74                
Correct output: -71                 | Program output: -46                
Correct output: 2                   | Program output: 8                  
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 4                  
Correct output: -44                 | Program output: 5                  
Correct output: -29                 | Program output: 25                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_xor} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_stackdepth})
Lexicase best program: (exec_yankdup exec_pop (boolean_flush boolean_flush boolean_dup_times boolean_flush) exec_dup_items integer_dec integer_shove boolean_and integer_inc integer_max in3 integer_rot in4 integer_min integer_yank boolean_and integer_yankdup print_boolean print_integer exec_eq boolean_pop integer_gt integer_mult exec_s (exec_s (integer_fromboolean boolean_stackdepth exec_y_when_autoconstructing (integer_flush integer_mult) print_boolean exec_empty) (exec_while (integer_eq boolean_swap in4 integer_dup_times integer_dup_times exec_k_when_autoconstructing (integer_dup boolean_dup_times exec_eq boolean_xor) () exec_empty)) (exec_yank integer_inc exec_pop (exec_do*range (boolean_eq) integer_yankdup integer_yankdup boolean_stackdepth))) () ())
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_xor} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_stackdepth})
Zero cases best program: (exec_yankdup exec_pop (boolean_flush boolean_flush boolean_dup_times boolean_flush) exec_dup_items integer_dec integer_shove boolean_and integer_inc integer_max in3 integer_rot in4 integer_min integer_yank boolean_and integer_yankdup print_boolean print_integer exec_eq boolean_pop integer_gt integer_mult exec_s (exec_s (integer_fromboolean boolean_stackdepth exec_y_when_autoconstructing (integer_flush integer_mult) print_boolean exec_empty) (exec_while (integer_eq boolean_swap in4 integer_dup_times integer_dup_times exec_k_when_autoconstructing (integer_dup boolean_dup_times exec_eq boolean_xor) () exec_empty)) (exec_yank integer_inc exec_pop (exec_do*range (boolean_eq) integer_yankdup integer_yankdup boolean_stackdepth))) () ())
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (529 370 585 161 227 628 386 74 215 220)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (529 370 585 161 227 628 386 74 215 220)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_xor} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_stackdepth})
Best program: (exec_yankdup exec_pop (boolean_flush boolean_flush boolean_dup_times boolean_flush) exec_dup_items integer_shove boolean_and integer_inc integer_max in3 integer_rot in4 integer_min integer_yank integer_mod boolean_and integer_yankdup print_boolean print_integer boolean_pop integer_gt integer_div integer_gt integer_mult exec_s (exec_s (integer_fromboolean boolean_stackdepth exec_y_when_autoconstructing (integer_flush integer_mult) print_boolean exec_empty) (exec_while (boolean_swap in4 integer_dup_times integer_dup_times exec_dup_items exec_k_when_autoconstructing (integer_dup boolean_dup_times exec_eq boolean_xor) () exec_empty)) (integer_flush integer_inc exec_pop (exec_do*range (boolean_eq) integer_yankdup boolean_xor boolean_stackdepth))) () ())
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 69
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 6.605
Median total errors in population: 6
Error averages by case: (0.471 0.63 0.415 0.839 0.773 0.372 0.614 0.926 0.785 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.387
Average program size in population (points): 66.232
Average percent parens in population: 0.224
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.232
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6195574
--- Timings ---
Current time: 1559593749146 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.6 seconds, 49.6%
Fitness Testing:      8.3 seconds, 35.5%
Report:               3.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 199
Test mean error for best: 0.19900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 52                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 30                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 2                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 14                  | Program output: 14                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 63                 
Correct output: 55                  | Program output: 55                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -68                
Correct output: -11                 | Program output: -11                
Correct output: -92                 | Program output: -92                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -4                 
Correct output: -95                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -19                
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -63                
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: -56                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 19                 
Correct output: 1                   | Program output: 61                 
Correct output: -91                 | Program output: -91                
Correct output: -92                 | Program output: -64                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -81                
Correct output: -75                 | Program output: 35                 
Correct output: -61                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -57                
Correct output: -89                 | Program output: -83                
Correct output: -81                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: 15                 
Correct output: -71                 | Program output: -41                
Correct output: -3                  | Program output: 61                 
Correct output: -91                 | Program output: -91                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 2                  
Correct output: -78                 | Program output: 49                 
Correct output: -73                 | Program output: 3                  
Correct output: -49                 | Program output: -26                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -94                 | Program output: -63                
Correct output: -94                 | Program output: -88                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when})
Lexicase best program: (exec_yankdup boolean_not integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_swap integer_yank in2 boolean_and integer_min integer_yankdup print_boolean print_integer print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) integer_eq boolean_swap exec_yankdup) (exec_dup_items integer_pop exec_dup_items exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor exec_flush) in3 exec_pop (exec_when ())) ()))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when})
Zero cases best program: (exec_yankdup boolean_not integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_swap integer_yank in2 boolean_and integer_min integer_yankdup print_boolean print_integer print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) integer_eq boolean_swap exec_yankdup) (exec_dup_items integer_pop exec_dup_items exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor exec_flush) in3 exec_pop (exec_when ())) ()))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 271 212 187 183 198 44 207 413 199)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (162 271 212 187 183 198 44 207 413 199)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction -4})
Best program: (exec_yankdup boolean_not exec_dup_items integer_mod boolean_dup_times exec_dup (integer_min print_boolean) exec_do*times () in1 in3 integer_min integer_swap integer_yank in2 boolean_and integer_min integer_yankdup print_boolean print_integer integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) integer_eq boolean_swap exec_yankdup) (integer_pop exec_dup_items exec_k_when_autoconstructing (exec_eq exec_do*range (integer_mult integer_yankdup exec_flush) in3 -4) ()))
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 42
Size: 53
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 7.924
Median total errors in population: 7
Error averages by case: (0.838 0.729 0.788 0.813 0.817 0.802 0.956 0.793 0.587 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.344
Average program size in population (points): 64.295
Average percent parens in population: 0.233
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6707508
--- Timings ---
Current time: 1559593751108 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.8 seconds, 50.5%
Fitness Testing:      8.8 seconds, 34.7%
Report:               3.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 52                 
Correct output: 15                  | Program output: 20                 
Correct output: 14                  | Program output: 55                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: 22                  | Program output: 63                 
Correct output: 9                   | Program output: 35                 
Correct output: 2                   | Program output: 2                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 14                  | Program output: 74                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 63                 
Correct output: 55                  | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 85                 
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -68                
Correct output: -11                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -63                
Correct output: -99                 | Program output: -36                
Correct output: -44                 | Program output: -4                 
Correct output: -95                 | Program output: -45                
Correct output: -30                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -19                
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -63                
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: -56                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: 19                 
Correct output: 1                   | Program output: 68                 
Correct output: -91                 | Program output: -91                
Correct output: -92                 | Program output: -45                
Correct output: -64                 | Program output: 46                 
Correct output: -80                 | Program output: -71                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -63                
Correct output: -75                 | Program output: 35                 
Correct output: -61                 | Program output: -2                 
Correct output: -76                 | Program output: -22                
Correct output: -81                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -16                
Correct output: -89                 | Program output: -83                
Correct output: -81                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: 15                 
Correct output: -71                 | Program output: -18                
Correct output: -3                  | Program output: 61                 
Correct output: -91                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 8                  
Correct output: -78                 | Program output: 79                 
Correct output: -73                 | Program output: 3                  
Correct output: -49                 | Program output: -26                
Correct output: -93                 | Program output: 26                 
Correct output: -44                 | Program output: 77                 
Correct output: -29                 | Program output: -29                
Correct output: -94                 | Program output: -63                
Correct output: -94                 | Program output: 46                 
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Lexicase best program: (exec_yankdup boolean_not integer_mod boolean_dup_times integer_min print_boolean in1 exec_y_when_autoconstructing () in3 exec_noop integer_min integer_swap in2 boolean_and integer_min integer_yankdup print_integer integer_gt in3 exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) integer_eq exec_yankdup) (integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (integer_yankdup boolean_xor exec_flush) in3 exec_when ()) ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Zero cases best program: (exec_yankdup boolean_not integer_mod boolean_dup_times integer_min print_boolean in1 exec_y_when_autoconstructing () in3 exec_noop integer_min integer_swap in2 boolean_and integer_min integer_yankdup print_integer integer_gt in3 exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (tag_integer_252 integer_flush integer_mult) exec_empty) integer_eq exec_yankdup) (integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (integer_yankdup boolean_xor exec_flush) in3 exec_when ()) ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (280 309 258 256 253 617 281 260 314 264)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (280 309 258 256 253 617 281 260 314 264)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Best program: (exec_pop (exec_yankdup boolean_not integer_mod boolean_frominteger boolean_dup_times exec_dup (integer_min print_boolean) in1) in3 integer_min integer_swap integer_yank in2 boolean_and integer_min integer_yankdup print_integer boolean_pop integer_gt in3 exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (tag_integer_252 integer_flush exec_empty) exec_yankdup) boolean_pop) (integer_pop boolean_xor exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_xor exec_flush) in3 exec_when ()) ()))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.908
Median total errors in population: 6
Error averages by case: (0.72 0.691 0.742 0.744 0.747 0.383 0.719 0.74 0.686 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.533
Average program size in population (points): 60.921
Average percent parens in population: 0.219
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7175011
--- Timings ---
Current time: 1559593752975 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.0 seconds, 51.4%
Fitness Testing:      9.2 seconds, 33.9%
Report:               3.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: 61                 
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 88                 
Correct output: 38                  | Program output: 64                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 35                  | Program output: 90                 
Correct output: 17                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 55                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 10                 
Correct output: 25                  | Program output: 34                 
Correct output: -91                 | Program output: -68                
Correct output: -11                 | Program output: -11                
Correct output: -92                 | Program output: -45                
Correct output: -27                 | Program output: -11                
Correct output: -80                 | Program output: -63                
Correct output: -99                 | Program output: -36                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -19                
Correct output: 3                   | Program output: 85                 
Correct output: 3                   | Program output: 64                 
Correct output: -100                | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: 66                 
Correct output: -56                 | Program output: -56                
Correct output: -91                 | Program output: -91                
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -20                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -2                 
Correct output: -76                 | Program output: -22                
Correct output: -81                 | Program output: -77                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -65                
Correct output: -15                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -16                
Correct output: -89                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -90                 | Program output: -49                
Correct output: -83                 | Program output: -64                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: 2                   | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -94                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_252} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_when})
Lexicase best program: (exec_yankdup boolean_yankdup integer_mod boolean_invert_first_then_and boolean_not integer_fromboolean exec_do*while (boolean_flush integer_shove) boolean_flush boolean_dup_times exec_dup_items boolean_and integer_max in4 in1 integer_min exec_s_when_autoconstructing (integer_swap exec_stackdepth exec_s_when_autoconstructing (integer_yank in2 exec_swap (integer_dup boolean_shove) (boolean_shove) boolean_and) (integer_yankdup print_integer) (integer_min exec_k_when_autoconstructing (integer_gt exec_do*while (boolean_frominteger exec_if () (integer_div integer_fromboolean tag_integer_252 boolean_stackdepth integer_mult) integer_inc exec_swap () () integer_pop) boolean_and integer_eq exec_k (integer_rot exec_dup_items integer_mult exec_s (boolean_dup_times exec_eq integer_dec integer_lt exec_pop (exec_noop) exec_do*range (exec_flush) integer_gte exec_when ()) () ()) ()) ())) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 86
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_252} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_when})
Zero cases best program: (exec_yankdup boolean_yankdup integer_mod boolean_invert_first_then_and boolean_not integer_fromboolean exec_do*while (boolean_flush integer_shove) boolean_flush boolean_dup_times exec_dup_items boolean_and integer_max in4 in1 integer_min exec_s_when_autoconstructing (integer_swap exec_stackdepth exec_s_when_autoconstructing (integer_yank in2 exec_swap (integer_dup boolean_shove) (boolean_shove) boolean_and) (integer_yankdup print_integer) (integer_min exec_k_when_autoconstructing (integer_gt exec_do*while (boolean_frominteger exec_if () (integer_div integer_fromboolean tag_integer_252 boolean_stackdepth integer_mult) integer_inc exec_swap () () integer_pop) boolean_and integer_eq exec_k (integer_rot exec_dup_items integer_mult exec_s (boolean_dup_times exec_eq integer_dec integer_lt exec_pop (exec_noop) exec_do*range (exec_flush) integer_gte exec_when ()) () ()) ()) ())) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 86
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 276 280 193 344 294 346 291 344 339)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (367 276 280 193 344 294 346 291 344 339)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Best program: (exec_yankdup boolean_flush integer_div exec_when (boolean_dup_times exec_dup_items integer_min exec_do*times () integer_max) integer_rot in4 in1 integer_min integer_swap integer_yank boolean_dup_times in2 integer_dup boolean_and integer_yankdup print_boolean print_integer integer_gt exec_if () (exec_s (integer_yankdup integer_fromboolean integer_swap) (exec_when (integer_flush exec_empty) boolean_or) (integer_eq exec_when (boolean_swap exec_yankdup) integer_gte integer_dup_times exec_dup_items exec_k_when_autoconstructing (boolean_dup_times in4 boolean_frominteger exec_eq exec_eq boolean_eq exec_do*range (exec_shove (exec_do*range (integer_yankdup exec_shove () boolean_xor in3 exec_when ())))) ())))
Errors: [0 0 0 1 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 54
Size: 71
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 6.926
Median total errors in population: 7
Error averages by case: (0.633 0.724 0.72 0.807 0.656 0.706 0.654 0.709 0.656 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.801
Average program size in population (points): 62.773
Average percent parens in population: 0.221
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7664212
--- Timings ---
Current time: 1559593754962 milliseconds
Total Time:          29.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.2 seconds, 52.0%
Fitness Testing:      9.7 seconds, 33.3%
Report:               4.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 205
Test mean error for best: 0.20500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 28                 
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 14                  | Program output: 14                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 55                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 10                 
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -92                 | Program output: -92                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: 47                 
Correct output: -91                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -91                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -33                
Correct output: -90                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -26                 | Program output: 6                  
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -71                 | Program output: -46                
Correct output: 2                   | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -29                 | Program output: 25                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Lexicase best program: (integer_lte boolean_not boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and integer_min exec_when (boolean_yankdup print_boolean print_integer) print_boolean integer_gt exec_k_when_autoconstructing (exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_flush boolean_rot exec_empty) (integer_eq boolean_swap exec_yankdup) boolean_dup_times exec_dup_items integer_pop exec_dup_items exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor integer_shove boolean_stackdepth) exec_flush) in3 exec_when ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 58
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_252} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction exec_when})
Zero cases best program: (integer_lte boolean_not boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and integer_min exec_when (boolean_yankdup print_boolean print_integer) print_boolean integer_gt exec_k_when_autoconstructing (exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_flush boolean_rot exec_empty) (integer_eq boolean_swap exec_yankdup) boolean_dup_times exec_dup_items integer_pop exec_dup_items exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor integer_shove boolean_stackdepth) exec_flush) in3 exec_when ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 58
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 183 607 224 257 607 254 565 186 308)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (296 183 607 224 257 607 254 565 186 308)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_252} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when})
Best program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 44
Size: 59
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 6.513
Median total errors in population: 7
Error averages by case: (0.704 0.817 0.393 0.776 0.743 0.393 0.746 0.435 0.814 0.692)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.302
Average program size in population (points): 62.283
Average percent parens in population: 0.223
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8178480
--- Timings ---
Current time: 1559593756917 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.3 seconds, 52.4%
Fitness Testing:     10.2 seconds, 32.7%
Report:               4.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 13
Successful program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 59


Auto-simplifying with starting size: 59
step: 0
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 500
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 1000
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 1500
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 2000
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 2500
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 3000
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 3500
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 4000
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 4500
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 5000
program: (exec_yankdup boolean_flush integer_mod boolean_dup_times exec_dup (print_boolean) exec_do*times () in1 in3 integer_min integer_yank in4 boolean_and boolean_and integer_min print_boolean print_integer exec_yank print_boolean integer_gt exec_k_when_autoconstructing (integer_gt exec_if () (exec_when (exec_k_when_autoconstructing (tag_integer_252 integer_mult) (integer_eq boolean_swap exec_yankdup) exec_dup_items integer_pop exec_k_when_autoconstructing (exec_eq exec_do*range (boolean_yankdup integer_yankdup boolean_xor boolean_xor boolean_stackdepth) exec_flush) (in3 exec_pop (exec_when ()))))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 205
Test mean error for best: 0.20500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 37                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -13                 | Program output: -13                
Correct output: -79                 | Program output: -79                
Correct output: -9                  | Program output: -9                 
Correct output: -66                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 28                 
Correct output: 40                  | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: 82                  | Program output: 82                 
Correct output: -75                 | Program output: -75                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 9                   | Program output: 9                  
Correct output: 2                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 14                  | Program output: 14                 
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 55                  | Program output: 55                 
Correct output: 22                  | Program output: 25                 
Correct output: 10                  | Program output: 10                 
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -92                 | Program output: -92                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: 47                 
Correct output: -91                 | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: 1                   | Program output: 1                  
Correct output: -91                 | Program output: -91                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -55                 | Program output: -33                
Correct output: -90                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -83                 | Program output: -83                
Correct output: -26                 | Program output: 6                  
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -3                  | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -71                 | Program output: -46                
Correct output: 2                   | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -73                 | Program output: -73                
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -29                 | Program output: 25                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
;;******************************
